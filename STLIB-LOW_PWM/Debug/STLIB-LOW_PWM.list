
STLIB-LOW_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa88  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0801ad58  0801ad58  0002ad58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b304  0801b304  0002b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  0801b30c  0801b30c  0002b30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000018  0801b324  0801b324  0002b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0801b33c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0801b3b0  00030074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0801b410  000300d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000111c  24000134  0801b470  00030134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001250  0801b470  00031250  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000aa707  00000000  00000000  00030162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a491  00000000  00000000  000da869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000058b0  00000000  00000000  000e4d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00005960  00000000  00000000  000ea5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004e4a8  00000000  00000000  000eff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004e683  00000000  00000000  0013e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00228e13  00000000  00000000  0018ca3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  003b584e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00019b00  00000000  00000000  003b58a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000134 	.word	0x24000134
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ad40 	.word	0x0801ad40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000138 	.word	0x24000138
 800030c:	0801ad40 	.word	0x0801ad40

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08c      	sub	sp, #48	; 0x30
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2224      	movs	r2, #36	; 0x24
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f01a fa3d 	bl	801aaac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000632:	4b39      	ldr	r3, [pc, #228]	; (8000718 <MX_ADC1_Init+0x104>)
 8000634:	4a39      	ldr	r2, [pc, #228]	; (800071c <MX_ADC1_Init+0x108>)
 8000636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000638:	4b37      	ldr	r3, [pc, #220]	; (8000718 <MX_ADC1_Init+0x104>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <MX_ADC1_Init+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000644:	4b34      	ldr	r3, [pc, #208]	; (8000718 <MX_ADC1_Init+0x104>)
 8000646:	2201      	movs	r2, #1
 8000648:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <MX_ADC1_Init+0x104>)
 800064c:	2208      	movs	r2, #8
 800064e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000650:	4b31      	ldr	r3, [pc, #196]	; (8000718 <MX_ADC1_Init+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000656:	4b30      	ldr	r3, [pc, #192]	; (8000718 <MX_ADC1_Init+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800065c:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <MX_ADC1_Init+0x104>)
 800065e:	2202      	movs	r2, #2
 8000660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <MX_ADC1_Init+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM1_OUT;
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <MX_ADC1_Init+0x104>)
 800066c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <MX_ADC1_Init+0x104>)
 8000674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800067a:	4b27      	ldr	r3, [pc, #156]	; (8000718 <MX_ADC1_Init+0x104>)
 800067c:	2203      	movs	r2, #3
 800067e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000680:	4b25      	ldr	r3, [pc, #148]	; (8000718 <MX_ADC1_Init+0x104>)
 8000682:	2200      	movs	r2, #0
 8000684:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <MX_ADC1_Init+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <MX_ADC1_Init+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000694:	4820      	ldr	r0, [pc, #128]	; (8000718 <MX_ADC1_Init+0x104>)
 8000696:	f003 f83f 	bl	8003718 <HAL_ADC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a0:	f001 f95f 	bl	8001962 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	481a      	ldr	r0, [pc, #104]	; (8000718 <MX_ADC1_Init+0x104>)
 80006b0:	f004 fb02 	bl	8004cb8 <HAL_ADCEx_MultiModeConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006ba:	f001 f952 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_ADC1_Init+0x10c>)
 80006c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2306      	movs	r3, #6
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	463b      	mov	r3, r7
 80006e0:	4619      	mov	r1, r3
 80006e2:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_ADC1_Init+0x104>)
 80006e4:	f003 fc78 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006ee:	f001 f938 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_ADC1_Init+0x110>)
 80006f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f6:	230c      	movs	r3, #12
 80006f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	463b      	mov	r3, r7
 80006fc:	4619      	mov	r1, r3
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <MX_ADC1_Init+0x104>)
 8000700:	f003 fc6a 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800070a:	f001 f92a 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	3730      	adds	r7, #48	; 0x30
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000150 	.word	0x24000150
 800071c:	40022000 	.word	0x40022000
 8000720:	08600004 	.word	0x08600004
 8000724:	0c900008 	.word	0x0c900008

08000728 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2224      	movs	r2, #36	; 0x24
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f01a f9b9 	bl	801aaac <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <MX_ADC2_Init+0xdc>)
 800073c:	4a32      	ldr	r2, [pc, #200]	; (8000808 <MX_ADC2_Init+0xe0>)
 800073e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_ADC2_Init+0xdc>)
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000754:	2208      	movs	r2, #8
 8000756:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000758:	4b2a      	ldr	r3, [pc, #168]	; (8000804 <MX_ADC2_Init+0xdc>)
 800075a:	2200      	movs	r2, #0
 800075c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000760:	2200      	movs	r2, #0
 8000762:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000766:	2202      	movs	r2, #2
 8000768:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC2_Init+0xdc>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM2_OUT;
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000774:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_ADC2_Init+0xdc>)
 800077c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000784:	2203      	movs	r2, #3
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC2_Init+0xdc>)
 800078a:	2200      	movs	r2, #0
 800078c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000790:	2200      	movs	r2, #0
 8000792:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC2_Init+0xdc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800079c:	4819      	ldr	r0, [pc, #100]	; (8000804 <MX_ADC2_Init+0xdc>)
 800079e:	f002 ffbb 	bl	8003718 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80007a8:	f001 f8db 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC2_Init+0xe4>)
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b0:	2306      	movs	r3, #6
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007be:	2304      	movs	r3, #4
 80007c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_ADC2_Init+0xdc>)
 80007d2:	f003 fc01 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80007dc:	f001 f8c1 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_ADC2_Init+0xe8>)
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007e4:	230c      	movs	r3, #12
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC2_Init+0xdc>)
 80007ee:	f003 fbf3 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80007f8:	f001 f8b3 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	240001c0 	.word	0x240001c0
 8000808:	40022100 	.word	0x40022100
 800080c:	08600004 	.word	0x08600004
 8000810:	19200040 	.word	0x19200040

08000814 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2224      	movs	r2, #36	; 0x24
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f01a f943 	bl	801aaac <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000828:	4a38      	ldr	r2, [pc, #224]	; (800090c <MX_ADC3_Init+0xf8>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800082c:	4b36      	ldr	r3, [pc, #216]	; (8000908 <MX_ADC3_Init+0xf4>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000834:	2208      	movs	r2, #8
 8000836:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000838:	4b33      	ldr	r3, [pc, #204]	; (8000908 <MX_ADC3_Init+0xf4>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000840:	2201      	movs	r2, #1
 8000842:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000844:	4b30      	ldr	r3, [pc, #192]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000846:	2208      	movs	r2, #8
 8000848:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_ADC3_Init+0xf4>)
 800084c:	2200      	movs	r2, #0
 800084e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000850:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000852:	2200      	movs	r2, #0
 8000854:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 2;
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000858:	2202      	movs	r2, #2
 800085a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800085c:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_ADC3_Init+0xf4>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_LPTIM3_OUT;
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000866:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_ADC3_Init+0xf4>)
 800086e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000874:	4b24      	ldr	r3, [pc, #144]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000876:	2201      	movs	r2, #1
 8000878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_ADC3_Init+0xf4>)
 800087e:	2200      	movs	r2, #0
 8000880:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000884:	2203      	movs	r2, #3
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_ADC3_Init+0xf4>)
 800088a:	2200      	movs	r2, #0
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000890:	2200      	movs	r2, #0
 8000892:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_ADC3_Init+0xf4>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800089c:	481a      	ldr	r0, [pc, #104]	; (8000908 <MX_ADC3_Init+0xf4>)
 800089e:	f002 ff3b 	bl	8003718 <HAL_ADC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 80008a8:	f001 f85b 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ac:	2301      	movs	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b0:	2306      	movs	r3, #6
 80008b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008be:	2304      	movs	r3, #4
 80008c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_ADC3_Init+0xf4>)
 80008d6:	f003 fb7f 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80008e0:	f001 f83f 	bl	8001962 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <MX_ADC3_Init+0xfc>)
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008e8:	230c      	movs	r3, #12
 80008ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_ADC3_Init+0xf4>)
 80008f2:	f003 fb71 	bl	8003fd8 <HAL_ADC_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 80008fc:	f001 f831 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000230 	.word	0x24000230
 800090c:	58026000 	.word	0x58026000
 8000910:	04300002 	.word	0x04300002

08000914 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b092      	sub	sp, #72	; 0x48
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a9f      	ldr	r2, [pc, #636]	; (8000bb0 <HAL_ADC_MspInit+0x29c>)
 8000932:	4293      	cmp	r3, r2
 8000934:	f040 80b6 	bne.w	8000aa4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000938:	4b9e      	ldr	r3, [pc, #632]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	4a9d      	ldr	r2, [pc, #628]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 8000940:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000942:	4b9c      	ldr	r3, [pc, #624]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d10e      	bne.n	8000968 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800094a:	4b9b      	ldr	r3, [pc, #620]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 800094c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000950:	4a99      	ldr	r2, [pc, #612]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000952:	f043 0320 	orr.w	r3, r3, #32
 8000956:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800095a:	4b97      	ldr	r3, [pc, #604]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 800095c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000960:	f003 0320 	and.w	r3, r3, #32
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
 8000966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000968:	4b93      	ldr	r3, [pc, #588]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a92      	ldr	r2, [pc, #584]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b8f      	ldr	r3, [pc, #572]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b8c      	ldr	r3, [pc, #560]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a8a      	ldr	r2, [pc, #552]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b88      	ldr	r3, [pc, #544]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80009a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b84      	ldr	r3, [pc, #528]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a83      	ldr	r2, [pc, #524]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b80      	ldr	r3, [pc, #512]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a7b      	ldr	r2, [pc, #492]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009ca:	f043 0320 	orr.w	r3, r3, #32
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b79      	ldr	r3, [pc, #484]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0320 	and.w	r3, r3, #32
 80009dc:	623b      	str	r3, [r7, #32]
 80009de:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 80009e0:	2301      	movs	r3, #1
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e4:	2303      	movs	r3, #3
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009f0:	4619      	mov	r1, r3
 80009f2:	4872      	ldr	r0, [pc, #456]	; (8000bbc <HAL_ADC_MspInit+0x2a8>)
 80009f4:	f007 f878 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 80009f8:	2379      	movs	r3, #121	; 0x79
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fc:	2303      	movs	r3, #3
 80009fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a08:	4619      	mov	r1, r3
 8000a0a:	486d      	ldr	r0, [pc, #436]	; (8000bc0 <HAL_ADC_MspInit+0x2ac>)
 8000a0c:	f007 f86c 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 8000a10:	2303      	movs	r3, #3
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a14:	2303      	movs	r3, #3
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a20:	4619      	mov	r1, r3
 8000a22:	4868      	ldr	r0, [pc, #416]	; (8000bc4 <HAL_ADC_MspInit+0x2b0>)
 8000a24:	f007 f860 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 8000a28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4862      	ldr	r0, [pc, #392]	; (8000bc8 <HAL_ADC_MspInit+0x2b4>)
 8000a3e:	f007 f853 	bl	8007ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a42:	4b62      	ldr	r3, [pc, #392]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a44:	4a62      	ldr	r2, [pc, #392]	; (8000bd0 <HAL_ADC_MspInit+0x2bc>)
 8000a46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a48:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a4a:	2209      	movs	r2, #9
 8000a4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a54:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a5a:	4b5c      	ldr	r3, [pc, #368]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a62:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a6a:	4b58      	ldr	r3, [pc, #352]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a7a:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a80:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a86:	4851      	ldr	r0, [pc, #324]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a88:	f004 fb3a 	bl	8005100 <HAL_DMA_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8000a92:	f000 ff66 	bl	8001962 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a4c      	ldr	r2, [pc, #304]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <HAL_ADC_MspInit+0x2b8>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000aa2:	e120      	b.n	8000ce6 <HAL_ADC_MspInit+0x3d2>
  else if(adcHandle->Instance==ADC2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a4a      	ldr	r2, [pc, #296]	; (8000bd4 <HAL_ADC_MspInit+0x2c0>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	f040 8098 	bne.w	8000be0 <HAL_ADC_MspInit+0x2cc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ab0:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 8000ab8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000aba:	4b3e      	ldr	r3, [pc, #248]	; (8000bb4 <HAL_ADC_MspInit+0x2a0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10e      	bne.n	8000ae0 <HAL_ADC_MspInit+0x1cc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ac2:	4b3d      	ldr	r3, [pc, #244]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac8:	4a3b      	ldr	r2, [pc, #236]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000ad4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad8:	f003 0320 	and.w	r3, r3, #32
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	4a34      	ldr	r2, [pc, #208]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
 8000afc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000afe:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b04:	4a2c      	ldr	r2, [pc, #176]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000b06:	f043 0320 	orr.w	r3, r3, #32
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_ADC_MspInit+0x2a4>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b14:	f003 0320 	and.w	r3, r3, #32
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b1c:	2340      	movs	r3, #64	; 0x40
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b20:	2303      	movs	r3, #3
 8000b22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4824      	ldr	r0, [pc, #144]	; (8000bc0 <HAL_ADC_MspInit+0x2ac>)
 8000b30:	f006 ffda 	bl	8007ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 8000b34:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b46:	4619      	mov	r1, r3
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <HAL_ADC_MspInit+0x2b4>)
 8000b4a:	f006 ffcd 	bl	8007ae8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b50:	4a22      	ldr	r2, [pc, #136]	; (8000bdc <HAL_ADC_MspInit+0x2c8>)
 8000b52:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b56:	220a      	movs	r2, #10
 8000b58:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6e:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b74:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b84:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b92:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000b94:	f004 fab4 	bl	8005100 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_ADC_MspInit+0x28e>
      Error_Handler();
 8000b9e:	f000 fee0 	bl	8001962 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8000ba8:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_ADC_MspInit+0x2c4>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000bae:	e09a      	b.n	8000ce6 <HAL_ADC_MspInit+0x3d2>
 8000bb0:	40022000 	.word	0x40022000
 8000bb4:	24000408 	.word	0x24000408
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58020800 	.word	0x58020800
 8000bc0:	58020000 	.word	0x58020000
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58021400 	.word	0x58021400
 8000bcc:	240002a0 	.word	0x240002a0
 8000bd0:	40020010 	.word	0x40020010
 8000bd4:	40022100 	.word	0x40022100
 8000bd8:	24000318 	.word	0x24000318
 8000bdc:	40020028 	.word	0x40020028
  else if(adcHandle->Instance==ADC3)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a42      	ldr	r2, [pc, #264]	; (8000cf0 <HAL_ADC_MspInit+0x3dc>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d17d      	bne.n	8000ce6 <HAL_ADC_MspInit+0x3d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	4a40      	ldr	r2, [pc, #256]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c08:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c18:	4b36      	ldr	r3, [pc, #216]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	f003 0320 	and.w	r3, r3, #32
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_ADC_MspInit+0x3e0>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 8000c44:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c56:	4619      	mov	r1, r3
 8000c58:	4827      	ldr	r0, [pc, #156]	; (8000cf8 <HAL_ADC_MspInit+0x3e4>)
 8000c5a:	f006 ff45 	bl	8007ae8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000c5e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000c62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000c66:	f002 fab9 	bl	80031dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000c6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000c6e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000c72:	f002 fab3 	bl	80031dc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <HAL_ADC_MspInit+0x3ec>)
 8000c7a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c7e:	2273      	movs	r2, #115	; 0x73
 8000c80:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c94:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000ca0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ca4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cac:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000cbc:	f004 fa20 	bl	8005100 <HAL_DMA_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_ADC_MspInit+0x3b6>
      Error_Handler();
 8000cc6:	f000 fe4c 	bl	8001962 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000cce:	659a      	str	r2, [r3, #88]	; 0x58
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_ADC_MspInit+0x3e8>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	207f      	movs	r0, #127	; 0x7f
 8000cdc:	f004 f9db 	bl	8005096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000ce0:	207f      	movs	r0, #127	; 0x7f
 8000ce2:	f004 f9f2 	bl	80050ca <HAL_NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3748      	adds	r7, #72	; 0x48
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	58026000 	.word	0x58026000
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58021400 	.word	0x58021400
 8000cfc:	24000390 	.word	0x24000390
 8000d00:	40020040 	.word	0x40020040

08000d04 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_CORDIC_Init+0x20>)
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <MX_CORDIC_Init+0x24>)
 8000d0c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_CORDIC_Init+0x20>)
 8000d10:	f004 f8b4 	bl	8004e7c <HAL_CORDIC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000d1a:	f000 fe22 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2400040c 	.word	0x2400040c
 8000d28:	48024400 	.word	0x48024400

08000d2c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <HAL_CORDIC_MspInit+0x3c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10e      	bne.n	8000d5c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_CORDIC_MspInit+0x40>)
 8000d40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_CORDIC_MspInit+0x40>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_CORDIC_MspInit+0x40>)
 8000d50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	48024400 	.word	0x48024400
 8000d6c:	58024400 	.word	0x58024400

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7c:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_DMA_Init+0x5c>)
 8000d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2100      	movs	r1, #0
 8000d98:	200b      	movs	r0, #11
 8000d9a:	f004 f97c 	bl	8005096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d9e:	200b      	movs	r0, #11
 8000da0:	f004 f993 	bl	80050ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	200c      	movs	r0, #12
 8000daa:	f004 f974 	bl	8005096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000dae:	200c      	movs	r0, #12
 8000db0:	f004 f98b 	bl	80050ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	200d      	movs	r0, #13
 8000dba:	f004 f96c 	bl	8005096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dbe:	200d      	movs	r0, #13
 8000dc0:	f004 f983 	bl	80050ca <HAL_NVIC_EnableIRQ>

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_ETH_Init+0x80>)
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <MX_ETH_Init+0x84>)
 8000dd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_ETH_Init+0x88>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_ETH_Init+0x88>)
 8000de2:	2280      	movs	r2, #128	; 0x80
 8000de4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_ETH_Init+0x88>)
 8000de8:	22e1      	movs	r2, #225	; 0xe1
 8000dea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_ETH_Init+0x88>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_ETH_Init+0x88>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_ETH_Init+0x88>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <MX_ETH_Init+0x88>)
 8000e02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e0c:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_ETH_Init+0x8c>)
 8000e0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e12:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <MX_ETH_Init+0x90>)
 8000e14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_ETH_Init+0x80>)
 8000e20:	f005 fe2e 	bl	8006a80 <HAL_ETH_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e2a:	f000 fd9a 	bl	8001962 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e2e:	2238      	movs	r2, #56	; 0x38
 8000e30:	2100      	movs	r1, #0
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <MX_ETH_Init+0x94>)
 8000e34:	f019 fe3a 	bl	801aaac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <MX_ETH_Init+0x94>)
 8000e3a:	2221      	movs	r2, #33	; 0x21
 8000e3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_ETH_Init+0x94>)
 8000e40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <MX_ETH_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2400046c 	.word	0x2400046c
 8000e54:	40028000 	.word	0x40028000
 8000e58:	2400051c 	.word	0x2400051c
 8000e5c:	240000d4 	.word	0x240000d4
 8000e60:	24000074 	.word	0x24000074
 8000e64:	24000434 	.word	0x24000434

08000e68 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a59      	ldr	r2, [pc, #356]	; (8000fec <HAL_ETH_MspInit+0x184>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	f040 80ab 	bne.w	8000fe2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e8c:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e92:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000e94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000eac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000eba:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	61fb      	str	r3, [r7, #28]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ec8:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ece:	4a48      	ldr	r2, [pc, #288]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_ETH_MspInit+0x188>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f5e:	2332      	movs	r3, #50	; 0x32
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <HAL_ETH_MspInit+0x18c>)
 8000f7a:	f006 fdb5 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f7e:	2386      	movs	r3, #134	; 0x86
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f8e:	230b      	movs	r3, #11
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <HAL_ETH_MspInit+0x190>)
 8000f9a:	f006 fda5 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb0:	230b      	movs	r3, #11
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <HAL_ETH_MspInit+0x194>)
 8000fbc:	f006 fd94 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd2:	230b      	movs	r3, #11
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <HAL_ETH_MspInit+0x198>)
 8000fde:	f006 fd83 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40028000 	.word	0x40028000
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58020800 	.word	0x58020800
 8000ff8:	58020000 	.word	0x58020000
 8000ffc:	58020400 	.word	0x58020400
 8001000:	58021800 	.word	0x58021800

08001004 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <MX_FDCAN1_Init+0xc4>)
 800100c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800100e:	4b2d      	ldr	r3, [pc, #180]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800101a:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800101c:	2200      	movs	r2, #0
 800101e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001022:	2200      	movs	r2, #0
 8001024:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001026:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001028:	2200      	movs	r2, #0
 800102a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800102e:	2210      	movs	r2, #16
 8001030:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001032:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001034:	2201      	movs	r2, #1
 8001036:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800103a:	2202      	movs	r2, #2
 800103c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001040:	2202      	movs	r2, #2
 8001042:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001046:	2201      	movs	r2, #1
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800104c:	2201      	movs	r2, #1
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001052:	2201      	movs	r2, #1
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001058:	2201      	movs	r2, #1
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001076:	2204      	movs	r2, #4
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800107c:	2200      	movs	r2, #0
 800107e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001082:	2204      	movs	r2, #4
 8001084:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001086:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001088:	2200      	movs	r2, #0
 800108a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800108e:	2204      	movs	r2, #4
 8001090:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 8001094:	2200      	movs	r2, #0
 8001096:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010a4:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80010b0:	4804      	ldr	r0, [pc, #16]	; (80010c4 <MX_FDCAN1_Init+0xc0>)
 80010b2:	f006 f909 	bl	80072c8 <HAL_FDCAN_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80010bc:	f000 fc51 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	24000524 	.word	0x24000524
 80010c8:	4000a000 	.word	0x4000a000

080010cc <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010d2:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <MX_FDCAN3_Init+0xc4>)
 80010d4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80010f4:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010f6:	2210      	movs	r2, #16
 80010f8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_FDCAN3_Init+0xc0>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001100:	4b22      	ldr	r3, [pc, #136]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001102:	2202      	movs	r2, #2
 8001104:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001106:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001108:	2202      	movs	r2, #2
 800110a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800110e:	2201      	movs	r2, #1
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001114:	2201      	movs	r2, #1
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800111a:	2201      	movs	r2, #1
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001120:	2201      	movs	r2, #1
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001126:	2200      	movs	r2, #0
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800112c:	2200      	movs	r2, #0
 800112e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001132:	2200      	movs	r2, #0
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001138:	2200      	movs	r2, #0
 800113a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800113e:	2204      	movs	r2, #4
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001144:	2200      	movs	r2, #0
 8001146:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800114a:	2204      	movs	r2, #4
 800114c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800114e:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001150:	2200      	movs	r2, #0
 8001152:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001156:	2204      	movs	r2, #4
 8001158:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800115c:	2200      	movs	r2, #0
 800115e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001162:	2200      	movs	r2, #0
 8001164:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001168:	2200      	movs	r2, #0
 800116a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800116e:	2200      	movs	r2, #0
 8001170:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_FDCAN3_Init+0xc0>)
 8001174:	2204      	movs	r2, #4
 8001176:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_FDCAN3_Init+0xc0>)
 800117a:	f006 f8a5 	bl	80072c8 <HAL_FDCAN_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001184:	f000 fbed 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	240005c4 	.word	0x240005c4
 8001190:	4000d400 	.word	0x4000d400

08001194 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0b8      	sub	sp, #224	; 0xe0
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0318 	add.w	r3, r7, #24
 80011b0:	22b4      	movs	r2, #180	; 0xb4
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f019 fc79 	bl	801aaac <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a54      	ldr	r2, [pc, #336]	; (8001310 <HAL_FDCAN_MspInit+0x17c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d14e      	bne.n	8001262 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f007 ff72 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80011e2:	f000 fbbe 	bl	8001962 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80011e6:	4b4b      	ldr	r3, [pc, #300]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 80011ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80011f0:	4b48      	ldr	r3, [pc, #288]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10e      	bne.n	8001216 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80011f8:	4b47      	ldr	r3, [pc, #284]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80011fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011fe:	4a46      	ldr	r2, [pc, #280]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 800120a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	4a3e      	ldr	r2, [pc, #248]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001226:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001234:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800124e:	2309      	movs	r3, #9
 8001250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001258:	4619      	mov	r1, r3
 800125a:	4830      	ldr	r0, [pc, #192]	; (800131c <HAL_FDCAN_MspInit+0x188>)
 800125c:	f006 fc44 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8001260:	e052      	b.n	8001308 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN3)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a2e      	ldr	r2, [pc, #184]	; (8001320 <HAL_FDCAN_MspInit+0x18c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d14d      	bne.n	8001308 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800126c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001270:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001276:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	4618      	mov	r0, r3
 8001280:	f007 ff1e 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 800128a:	f000 fb6a 	bl	8001962 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a1f      	ldr	r2, [pc, #124]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 8001296:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_FDCAN_MspInit+0x180>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d10e      	bne.n	80012be <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80012a0:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012a6:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80012b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_FDCAN_MspInit+0x184>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001300:	4619      	mov	r1, r3
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <HAL_FDCAN_MspInit+0x190>)
 8001304:	f006 fbf0 	bl	8007ae8 <HAL_GPIO_Init>
}
 8001308:	bf00      	nop
 800130a:	37e0      	adds	r7, #224	; 0xe0
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	4000a000 	.word	0x4000a000
 8001314:	24000664 	.word	0x24000664
 8001318:	58024400 	.word	0x58024400
 800131c:	58020000 	.word	0x58020000
 8001320:	4000d400 	.word	0x4000d400
 8001324:	58021800 	.word	0x58021800

08001328 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_FMAC_Init+0x20>)
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <MX_FMAC_Init+0x24>)
 8001330:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_FMAC_Init+0x20>)
 8001334:	f006 fb2c 	bl	8007990 <HAL_FMAC_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800133e:	f000 fb10 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	24000668 	.word	0x24000668
 800134c:	48024000 	.word	0x48024000

08001350 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_FMAC_MspInit+0x3c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10e      	bne.n	8001380 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_FMAC_MspInit+0x40>)
 8001364:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_FMAC_MspInit+0x40>)
 800136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_FMAC_MspInit+0x40>)
 8001374:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001380:	bf00      	nop
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	48024000 	.word	0x48024000
 8001390:	58024400 	.word	0x58024400

08001394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <MX_GPIO_Init+0x170>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a54      	ldr	r2, [pc, #336]	; (8001504 <MX_GPIO_Init+0x170>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b52      	ldr	r3, [pc, #328]	; (8001504 <MX_GPIO_Init+0x170>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b4e      	ldr	r3, [pc, #312]	; (8001504 <MX_GPIO_Init+0x170>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a4d      	ldr	r2, [pc, #308]	; (8001504 <MX_GPIO_Init+0x170>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <MX_GPIO_Init+0x170>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <MX_GPIO_Init+0x170>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a45      	ldr	r2, [pc, #276]	; (8001504 <MX_GPIO_Init+0x170>)
 80013ee:	f043 0320 	orr.w	r3, r3, #32
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <MX_GPIO_Init+0x170>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <MX_GPIO_Init+0x170>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a3e      	ldr	r2, [pc, #248]	; (8001504 <MX_GPIO_Init+0x170>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <MX_GPIO_Init+0x170>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b38      	ldr	r3, [pc, #224]	; (8001504 <MX_GPIO_Init+0x170>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	4a36      	ldr	r2, [pc, #216]	; (8001504 <MX_GPIO_Init+0x170>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001432:	4b34      	ldr	r3, [pc, #208]	; (8001504 <MX_GPIO_Init+0x170>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <MX_GPIO_Init+0x170>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <MX_GPIO_Init+0x170>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <MX_GPIO_Init+0x170>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b29      	ldr	r3, [pc, #164]	; (8001504 <MX_GPIO_Init+0x170>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <MX_GPIO_Init+0x170>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <MX_GPIO_Init+0x170>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_GPIO_Init+0x170>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a20      	ldr	r2, [pc, #128]	; (8001504 <MX_GPIO_Init+0x170>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_GPIO_Init+0x170>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2101      	movs	r1, #1
 800149e:	481a      	ldr	r0, [pc, #104]	; (8001508 <MX_GPIO_Init+0x174>)
 80014a0:	f006 fcca 	bl	8007e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_SS_Pin;
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <MX_GPIO_Init+0x174>)
 80014bc:	f006 fb14 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014c0:	2303      	movs	r3, #3
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_GPIO_Init+0x178>)
 80014d6:	f006 fb07 	bl	8007ae8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2006      	movs	r0, #6
 80014e0:	f003 fdd9 	bl	8005096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014e4:	2006      	movs	r0, #6
 80014e6:	f003 fdf0 	bl	80050ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2007      	movs	r0, #7
 80014f0:	f003 fdd1 	bl	8005096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014f4:	2007      	movs	r0, #7
 80014f6:	f003 fde8 	bl	80050ca <HAL_NVIC_EnableIRQ>

}
 80014fa:	bf00      	nop
 80014fc:	3738      	adds	r7, #56	; 0x38
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	58024400 	.word	0x58024400
 8001508:	58020c00 	.word	0x58020c00
 800150c:	58021000 	.word	0x58021000

08001510 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim2;
LPTIM_HandleTypeDef hlptim3;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <MX_LPTIM1_Init+0x54>)
 8001518:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_LPTIM1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001534:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_LPTIM1_Init+0x50>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_LPTIM1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_LPTIM1_Init+0x50>)
 800154e:	f006 fcb1 	bl	8007eb4 <HAL_LPTIM_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001558:	f000 fa03 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	240006a0 	.word	0x240006a0
 8001564:	40002400 	.word	0x40002400

08001568 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	; (80015bc <MX_LPTIM2_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 8001580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001584:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80015a4:	4804      	ldr	r0, [pc, #16]	; (80015b8 <MX_LPTIM2_Init+0x50>)
 80015a6:	f006 fc85 	bl	8007eb4 <HAL_LPTIM_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 80015b0:	f000 f9d7 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	240006d8 	.word	0x240006d8
 80015bc:	58002400 	.word	0x58002400

080015c0 <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <MX_LPTIM3_Init+0x50>)
 80015c8:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015dc:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80015de:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <MX_LPTIM3_Init+0x4c>)
 80015f8:	f006 fc5c 	bl	8007eb4 <HAL_LPTIM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8001602:	f000 f9ae 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000710 	.word	0x24000710
 8001610:	58002800 	.word	0x58002800

08001614 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0b2      	sub	sp, #200	; 0xc8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	22b4      	movs	r2, #180	; 0xb4
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f019 fa41 	bl	801aaac <memset>
  if(lptimHandle->Instance==LPTIM1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_LPTIM_MspInit+0x124>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d126      	bne.n	8001682 <HAL_LPTIM_MspInit+0x6e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001634:	2320      	movs	r3, #32
 8001636:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4618      	mov	r0, r3
 8001644:	f007 fd3c 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800164e:	f000 f988 	bl	8001962 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 8001654:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001658:	4a38      	ldr	r2, [pc, #224]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 8001664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	205d      	movs	r0, #93	; 0x5d
 8001676:	f003 fd0e 	bl	8005096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800167a:	205d      	movs	r0, #93	; 0x5d
 800167c:	f003 fd25 	bl	80050ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }
}
 8001680:	e056      	b.n	8001730 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a2e      	ldr	r2, [pc, #184]	; (8001740 <HAL_LPTIM_MspInit+0x12c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d126      	bne.n	80016da <HAL_LPTIM_MspInit+0xc6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8001690:	2300      	movs	r3, #0
 8001692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4618      	mov	r0, r3
 800169c:	f007 fd10 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 80016a6:	f000 f95c 	bl	8001962 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80016aa:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 80016ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	208a      	movs	r0, #138	; 0x8a
 80016ce:	f003 fce2 	bl	8005096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80016d2:	208a      	movs	r0, #138	; 0x8a
 80016d4:	f003 fcf9 	bl	80050ca <HAL_NVIC_EnableIRQ>
}
 80016d8:	e02a      	b.n	8001730 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM3)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a19      	ldr	r2, [pc, #100]	; (8001744 <HAL_LPTIM_MspInit+0x130>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d125      	bne.n	8001730 <HAL_LPTIM_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4618      	mov	r0, r3
 80016f4:	f007 fce4 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_LPTIM_MspInit+0xee>
      Error_Handler();
 80016fe:	f000 f930 	bl	8001962 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_LPTIM_MspInit+0x128>)
 8001714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	208b      	movs	r0, #139	; 0x8b
 8001726:	f003 fcb6 	bl	8005096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 800172a:	208b      	movs	r0, #139	; 0x8b
 800172c:	f003 fccd 	bl	80050ca <HAL_NVIC_EnableIRQ>
}
 8001730:	bf00      	nop
 8001732:	37c8      	adds	r7, #200	; 0xc8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40002400 	.word	0x40002400
 800173c:	58024400 	.word	0x58024400
 8001740:	58002400 	.word	0x58002400
 8001744:	58002800 	.word	0x58002800

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PwmInstance pwm1 = PwmInstance(PE6);
 800174e:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <main+0xa0>)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	ca06      	ldmia	r2, {r1, r2}
 8001754:	4618      	mov	r0, r3
 8001756:	f00d fbc9 	bl	800eeec <_ZN11PwmInstanceC1E3Pin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175a:	f001 fc99 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175e:	f000 f845 	bl	80017ec <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001762:	f000 f8cd 	bl	8001900 <_Z24PeriphCommonClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001766:	f7ff fe15 	bl	8001394 <MX_GPIO_Init>
  MX_ETH_Init();
 800176a:	f7ff fb31 	bl	8000dd0 <MX_ETH_Init>
  MX_ADC1_Init();
 800176e:	f7fe ff51 	bl	8000614 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001772:	f7fe ffd9 	bl	8000728 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001776:	f7ff f84d 	bl	8000814 <MX_ADC3_Init>
  MX_FDCAN1_Init();
 800177a:	f7ff fc43 	bl	8001004 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 800177e:	f000 fb71 	bl	8001e64 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001782:	f000 fc79 	bl	8002078 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001786:	f000 fcf3 	bl	8002170 <MX_TIM4_Init>
  MX_TIM8_Init();
 800178a:	f000 fd6d 	bl	8002268 <MX_TIM8_Init>
  MX_TIM12_Init();
 800178e:	f000 fdc5 	bl	800231c <MX_TIM12_Init>
  MX_TIM23_Init();
 8001792:	f000 ff9b 	bl	80026cc <MX_TIM23_Init>
  MX_USART1_UART_Init();
 8001796:	f001 fb07 	bl	8002da8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800179a:	f001 fb51 	bl	8002e40 <MX_USART2_UART_Init>
  MX_CORDIC_Init();
 800179e:	f7ff fab1 	bl	8000d04 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80017a2:	f7ff fdc1 	bl	8001328 <MX_FMAC_Init>
  MX_RTC_Init();
 80017a6:	f000 f8e1 	bl	800196c <MX_RTC_Init>
  MX_TIM15_Init();
 80017aa:	f000 fe07 	bl	80023bc <MX_TIM15_Init>
  MX_TIM16_Init();
 80017ae:	f000 fe99 	bl	80024e4 <MX_TIM16_Init>
  MX_DMA_Init();
 80017b2:	f7ff fadd 	bl	8000d70 <MX_DMA_Init>
  MX_LPTIM1_Init();
 80017b6:	f7ff feab 	bl	8001510 <MX_LPTIM1_Init>
  MX_LPTIM3_Init();
 80017ba:	f7ff ff01 	bl	80015c0 <MX_LPTIM3_Init>
  MX_SPI3_Init();
 80017be:	f000 f92d 	bl	8001a1c <MX_SPI3_Init>
  MX_TIM17_Init();
 80017c2:	f000 ff09 	bl	80025d8 <MX_TIM17_Init>
  MX_FDCAN3_Init();
 80017c6:	f7ff fc81 	bl	80010cc <MX_FDCAN3_Init>
  MX_LPTIM2_Init();
 80017ca:	f7ff fecd 	bl	8001568 <MX_LPTIM2_Init>
  MX_TIM2_Init();
 80017ce:	f000 fbfd 	bl	8001fcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  pwm1.turn_on();
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00d fbb5 	bl	800ef44 <_ZN11PwmInstance7turn_onEv>
  pwm1.set_duty_cycle(70);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2146      	movs	r1, #70	; 0x46
 80017de:	4618      	mov	r0, r3
 80017e0:	f00d fbbd 	bl	800ef5e <_ZN11PwmInstance14set_duty_cycleEh>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <main+0x9c>
 80017e6:	bf00      	nop
 80017e8:	24000c34 	.word	0x24000c34

080017ec <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09c      	sub	sp, #112	; 0x70
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f6:	224c      	movs	r2, #76	; 0x4c
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f019 f956 	bl	801aaac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2220      	movs	r2, #32
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f019 f950 	bl	801aaac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800180c:	2002      	movs	r0, #2
 800180e:	f006 fce3 	bl	80081d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <_Z18SystemClock_Configv+0x10c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <_Z18SystemClock_Configv+0x10c>)
 800181c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <_Z18SystemClock_Configv+0x10c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800182e:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <_Z18SystemClock_Configv+0x10c>)
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183a:	bf14      	ite	ne
 800183c:	2301      	movne	r3, #1
 800183e:	2300      	moveq	r3, #0
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <_Z18SystemClock_Configv+0x5c>
 8001846:	e7f2      	b.n	800182e <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001848:	4b2c      	ldr	r3, [pc, #176]	; (80018fc <_Z18SystemClock_Configv+0x110>)
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <_Z18SystemClock_Configv+0x110>)
 8001852:	f043 0302 	orr.w	r3, r3, #2
 8001856:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001858:	2309      	movs	r3, #9
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001862:	2301      	movs	r3, #1
 8001864:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001866:	2302      	movs	r3, #2
 8001868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186a:	2302      	movs	r3, #2
 800186c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800186e:	2304      	movs	r3, #4
 8001870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001872:	f240 1313 	movw	r3, #275	; 0x113
 8001876:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001880:	2302      	movs	r3, #2
 8001882:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001884:	2304      	movs	r3, #4
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001888:	2300      	movs	r3, #0
 800188a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4618      	mov	r0, r3
 8001896:	f006 fcd9 	bl	800824c <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 80018aa:	f000 f85a 	bl	8001962 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ae:	233f      	movs	r3, #63	; 0x3f
 80018b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b2:	2303      	movs	r3, #3
 80018b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018ba:	2308      	movs	r3, #8
 80018bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018be:	2340      	movs	r3, #64	; 0x40
 80018c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018c2:	2340      	movs	r3, #64	; 0x40
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2103      	movs	r1, #3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 f867 	bl	80089a8 <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 80018ea:	f000 f83a 	bl	8001962 <Error_Handler>
  }
}
 80018ee:	bf00      	nop
 80018f0:	3770      	adds	r7, #112	; 0x70
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	58024800 	.word	0x58024800
 80018fc:	58024400 	.word	0x58024400

08001900 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b0ae      	sub	sp, #184	; 0xb8
 8001904:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	22b4      	movs	r2, #180	; 0xb4
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f019 f8cd 	bl	801aaac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001916:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800191c:	2318      	movs	r3, #24
 800191e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001924:	2302      	movs	r3, #2
 8001926:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800192c:	23c0      	movs	r3, #192	; 0xc0
 800192e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f007 fbbd 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	bf14      	ite	ne
 800194c:	2301      	movne	r3, #1
 800194e:	2300      	moveq	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8001956:	f000 f804 	bl	8001962 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	37b8      	adds	r7, #184	; 0xb8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001966:	b672      	cpsid	i
}
 8001968:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800196a:	e7fe      	b.n	800196a <Error_Handler+0x8>

0800196c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_RTC_Init+0x48>)
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <MX_RTC_Init+0x4c>)
 8001974:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_RTC_Init+0x48>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_RTC_Init+0x48>)
 800197e:	227f      	movs	r2, #127	; 0x7f
 8001980:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <MX_RTC_Init+0x48>)
 8001984:	22ff      	movs	r2, #255	; 0xff
 8001986:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <MX_RTC_Init+0x48>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <MX_RTC_Init+0x48>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <MX_RTC_Init+0x48>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <MX_RTC_Init+0x48>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <MX_RTC_Init+0x48>)
 80019a2:	f009 fc21 	bl	800b1e8 <HAL_RTC_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80019ac:	f7ff ffd9 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24000748 	.word	0x24000748
 80019b8:	58004000 	.word	0x58004000

080019bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0b0      	sub	sp, #192	; 0xc0
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	22b4      	movs	r2, #180	; 0xb4
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f019 f86d 	bl	801aaac <memset>
  if(rtcHandle->Instance==RTC)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_RTC_MspInit+0x58>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d116      	bne.n	8001a0a <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	4618      	mov	r0, r3
 80019f0:	f007 fb66 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019fa:	f7ff ffb2 	bl	8001962 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_RTC_MspInit+0x5c>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_RTC_MspInit+0x5c>)
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	37c0      	adds	r7, #192	; 0xc0
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	58004000 	.word	0x58004000
 8001a18:	58024400 	.word	0x58024400

08001a1c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a22:	4a28      	ldr	r2, [pc, #160]	; (8001ac4 <MX_SPI3_Init+0xa8>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a36:	2203      	movs	r2, #3
 8001a38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_SPI3_Init+0xa4>)
 8001aac:	f009 fcac 	bl	800b408 <HAL_SPI_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001ab6:	f7ff ff54 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2400076c 	.word	0x2400076c
 8001ac4:	40003c00 	.word	0x40003c00

08001ac8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b0b6      	sub	sp, #216	; 0xd8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	22b4      	movs	r2, #180	; 0xb4
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f018 ffdf 	bl	801aaac <memset>
  if(spiHandle->Instance==SPI3)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <HAL_SPI_MspInit+0xc0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d142      	bne.n	8001b7e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f007 fada 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001b12:	f7ff ff26 	bl	8001962 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b16:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_SPI_MspInit+0xc4>)
 8001b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <HAL_SPI_MspInit+0xc8>)
 8001b7a:	f005 ffb5 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b7e:	bf00      	nop
 8001b80:	37d8      	adds	r7, #216	; 0xd8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40003c00 	.word	0x40003c00
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58020800 	.word	0x58020800

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x30>)
 8001b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_MspInit+0x30>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_MspInit+0x30>)
 8001bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	607b      	str	r3, [r7, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	58024400 	.word	0x58024400

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f001 faae 	bl	8003174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f006 f922 	bl	8007e6a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f006 f91b 	bl	8007e6a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA1_Stream0_IRQHandler+0x10>)
 8001c3e:	f003 fdb9 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	240002a0 	.word	0x240002a0

08001c4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA1_Stream1_IRQHandler+0x10>)
 8001c52:	f003 fdaf 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	24000318 	.word	0x24000318

08001c60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA1_Stream2_IRQHandler+0x10>)
 8001c66:	f003 fda5 	bl	80057b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	24000390 	.word	0x24000390

08001c74 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <LPTIM1_IRQHandler+0x10>)
 8001c7a:	f006 f9cb 	bl	8008014 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	240006a0 	.word	0x240006a0

08001c88 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <ADC3_IRQHandler+0x10>)
 8001c8e:	f001 ff4b 	bl	8003b28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	24000230 	.word	0x24000230

08001c9c <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <LPTIM2_IRQHandler+0x10>)
 8001ca2:	f006 f9b7 	bl	8008014 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	240006d8 	.word	0x240006d8

08001cb0 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <LPTIM3_IRQHandler+0x10>)
 8001cb6:	f006 f9ad 	bl	8008014 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	24000710 	.word	0x24000710

08001cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
	return 1;
 8001cc8:	2301      	movs	r3, #1
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_kill>:

int _kill(int pid, int sig)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cde:	f018 fe83 	bl	801a9e8 <__errno>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2216      	movs	r2, #22
 8001ce6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_exit>:

void _exit (int status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ffe7 	bl	8001cd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d06:	e7fe      	b.n	8001d06 <_exit+0x12>

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	; (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f018 fe56 	bl	801a9e8 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	24050000 	.word	0x24050000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	240007f4 	.word	0x240007f4
 8001d70:	24001250 	.word	0x24001250

08001d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d78:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <SystemInit+0xd0>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7e:	4a31      	ldr	r2, [pc, #196]	; (8001e44 <SystemInit+0xd0>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d88:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <SystemInit+0xd4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d807      	bhi.n	8001da4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <SystemInit+0xd4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 030f 	bic.w	r3, r3, #15
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <SystemInit+0xd4>)
 8001d9e:	f043 0307 	orr.w	r3, r3, #7
 8001da2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <SystemInit+0xd8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <SystemInit+0xd8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <SystemInit+0xd8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <SystemInit+0xd8>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4924      	ldr	r1, [pc, #144]	; (8001e4c <SystemInit+0xd8>)
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <SystemInit+0xdc>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dc2:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <SystemInit+0xd4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dce:	4b1e      	ldr	r3, [pc, #120]	; (8001e48 <SystemInit+0xd4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 030f 	bic.w	r3, r3, #15
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <SystemInit+0xd4>)
 8001dd8:	f043 0307 	orr.w	r3, r3, #7
 8001ddc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <SystemInit+0xd8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <SystemInit+0xd8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <SystemInit+0xd8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <SystemInit+0xd8>)
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <SystemInit+0xe0>)
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <SystemInit+0xd8>)
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <SystemInit+0xe4>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <SystemInit+0xd8>)
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <SystemInit+0xe8>)
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <SystemInit+0xd8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <SystemInit+0xd8>)
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <SystemInit+0xe8>)
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <SystemInit+0xd8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <SystemInit+0xd8>)
 8001e16:	4a11      	ldr	r2, [pc, #68]	; (8001e5c <SystemInit+0xe8>)
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <SystemInit+0xd8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <SystemInit+0xd8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <SystemInit+0xd8>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <SystemInit+0xd8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <SystemInit+0xec>)
 8001e34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00
 8001e48:	52002000 	.word	0x52002000
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e54:	02020200 	.word	0x02020200
 8001e58:	01ff0000 	.word	0x01ff0000
 8001e5c:	01010280 	.word	0x01010280
 8001e60:	52004000 	.word	0x52004000

08001e64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim23;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b098      	sub	sp, #96	; 0x60
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
 8001e86:	615a      	str	r2, [r3, #20]
 8001e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2234      	movs	r2, #52	; 0x34
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f018 fe0b 	bl	801aaac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <MX_TIM1_Init+0x164>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e9c:	4b49      	ldr	r3, [pc, #292]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb0:	4b44      	ldr	r3, [pc, #272]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec2:	4840      	ldr	r0, [pc, #256]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001ec4:	f009 fc18 	bl	800b6f8 <HAL_TIM_PWM_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ece:	f7ff fd48 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4837      	ldr	r0, [pc, #220]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001ee6:	f00a fdd1 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ef0:	f7ff fd37 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ef4:	2360      	movs	r3, #96	; 0x60
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001efc:	2300      	movs	r3, #0
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f00:	2300      	movs	r3, #0
 8001f02:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	482a      	ldr	r0, [pc, #168]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001f1a:	f009 fefb 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f24:	f7ff fd1d 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4824      	ldr	r0, [pc, #144]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001f32:	f009 feef 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001f3c:	f7ff fd11 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f44:	2208      	movs	r2, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001f4a:	f009 fee3 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001f54:	f7ff fd05 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4818      	ldr	r0, [pc, #96]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001f62:	f009 fed7 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001f6c:	f7ff fcf9 	bl	8001962 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001fa6:	f00a fe0d 	bl	800cbc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001fb0:	f7ff fcd7 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <MX_TIM1_Init+0x160>)
 8001fb6:	f000 fd7f 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8001fba:	bf00      	nop
 8001fbc:	3760      	adds	r7, #96	; 0x60
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	240007f8 	.word	0x240007f8
 8001fc8:	40010000 	.word	0x40010000

08001fcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <MX_TIM2_Init+0xa8>)
 8001ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_TIM2_Init+0xa8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM2_Init+0xa8>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM2_Init+0xa8>)
 8002006:	f04f 32ff 	mov.w	r2, #4294967295
 800200a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <MX_TIM2_Init+0xa8>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM2_Init+0xa8>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <MX_TIM2_Init+0xa8>)
 800201a:	f009 fb6d 	bl	800b6f8 <HAL_TIM_PWM_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002024:	f7ff fc9d 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	480f      	ldr	r0, [pc, #60]	; (8002074 <MX_TIM2_Init+0xa8>)
 8002038:	f00a fd28 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002042:	f7ff fc8e 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002046:	2360      	movs	r3, #96	; 0x60
 8002048:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <MX_TIM2_Init+0xa8>)
 800205e:	f009 fe59 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002068:	f7ff fc7b 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000844 	.word	0x24000844

08002078 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_TIM3_Init+0xf0>)
 800209e:	4a33      	ldr	r2, [pc, #204]	; (800216c <MX_TIM3_Init+0xf4>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020c2:	4829      	ldr	r0, [pc, #164]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020c4:	f009 fb18 	bl	800b6f8 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80020ce:	f7ff fc48 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4821      	ldr	r0, [pc, #132]	; (8002168 <MX_TIM3_Init+0xf0>)
 80020e2:	f00a fcd3 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80020ec:	f7ff fc39 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f0:	2360      	movs	r3, #96	; 0x60
 80020f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	4818      	ldr	r0, [pc, #96]	; (8002168 <MX_TIM3_Init+0xf0>)
 8002108:	f009 fe04 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002112:	f7ff fc26 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2204      	movs	r2, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4812      	ldr	r0, [pc, #72]	; (8002168 <MX_TIM3_Init+0xf0>)
 800211e:	f009 fdf9 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002128:	f7ff fc1b 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	2208      	movs	r2, #8
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	; (8002168 <MX_TIM3_Init+0xf0>)
 8002134:	f009 fdee 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 800213e:	f7ff fc10 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	220c      	movs	r2, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM3_Init+0xf0>)
 800214a:	f009 fde3 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002154:	f7ff fc05 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM3_Init+0xf0>)
 800215a:	f000 fcad 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	; 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000890 	.word	0x24000890
 800216c:	40000400 	.word	0x40000400

08002170 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <MX_TIM4_Init+0xf0>)
 8002196:	4a33      	ldr	r2, [pc, #204]	; (8002264 <MX_TIM4_Init+0xf4>)
 8002198:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <MX_TIM4_Init+0xf0>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021ba:	4829      	ldr	r0, [pc, #164]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021bc:	f009 fa9c 	bl	800b6f8 <HAL_TIM_PWM_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80021c6:	f7ff fbcc 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	4619      	mov	r1, r3
 80021d8:	4821      	ldr	r0, [pc, #132]	; (8002260 <MX_TIM4_Init+0xf0>)
 80021da:	f00a fc57 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80021e4:	f7ff fbbd 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e8:	2360      	movs	r3, #96	; 0x60
 80021ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021f8:	463b      	mov	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	4619      	mov	r1, r3
 80021fe:	4818      	ldr	r0, [pc, #96]	; (8002260 <MX_TIM4_Init+0xf0>)
 8002200:	f009 fd88 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800220a:	f7ff fbaa 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2204      	movs	r2, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4812      	ldr	r0, [pc, #72]	; (8002260 <MX_TIM4_Init+0xf0>)
 8002216:	f009 fd7d 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002220:	f7ff fb9f 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2208      	movs	r2, #8
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_TIM4_Init+0xf0>)
 800222c:	f009 fd72 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002236:	f7ff fb94 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	220c      	movs	r2, #12
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM4_Init+0xf0>)
 8002242:	f009 fd67 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800224c:	f7ff fb89 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM4_Init+0xf0>)
 8002252:	f000 fc31 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	240008dc 	.word	0x240008dc
 8002264:	40000800 	.word	0x40000800

08002268 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f018 fc18 	bl	801aaac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MX_TIM8_Init+0xac>)
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <MX_TIM8_Init+0xb0>)
 800228a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <MX_TIM8_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_TIM8_Init+0xac>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <MX_TIM8_Init+0xac>)
 800229a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <MX_TIM8_Init+0xac>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <MX_TIM8_Init+0xac>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <MX_TIM8_Init+0xac>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022ba:	2301      	movs	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c6:	2300      	movs	r3, #0
 80022c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ca:	2301      	movs	r3, #1
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4619      	mov	r1, r3
 80022dc:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_TIM8_Init+0xac>)
 80022de:	f009 fbd7 	bl	800ba90 <HAL_TIM_Encoder_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80022e8:	f7ff fb3b 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <MX_TIM8_Init+0xac>)
 80022fe:	f00a fbc5 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002308:	f7ff fb2b 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	24000928 	.word	0x24000928
 8002318:	40010400 	.word	0x40010400

0800231c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <MX_TIM12_Init+0x9c>)
 8002338:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <MX_TIM12_Init+0x98>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002356:	2200      	movs	r2, #0
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800235a:	4816      	ldr	r0, [pc, #88]	; (80023b4 <MX_TIM12_Init+0x98>)
 800235c:	f009 f9cc 	bl	800b6f8 <HAL_TIM_PWM_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002366:	f7ff fafc 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800236a:	2360      	movs	r3, #96	; 0x60
 800236c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	2200      	movs	r2, #0
 800237e:	4619      	mov	r1, r3
 8002380:	480c      	ldr	r0, [pc, #48]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002382:	f009 fcc7 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800238c:	f7ff fae9 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2204      	movs	r2, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4807      	ldr	r0, [pc, #28]	; (80023b4 <MX_TIM12_Init+0x98>)
 8002398:	f009 fcbc 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80023a2:	f7ff fade 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <MX_TIM12_Init+0x98>)
 80023a8:	f000 fb86 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80023ac:	bf00      	nop
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	24000974 	.word	0x24000974
 80023b8:	40001800 	.word	0x40001800

080023bc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b098      	sub	sp, #96	; 0x60
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
 80023de:	615a      	str	r2, [r3, #20]
 80023e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2234      	movs	r2, #52	; 0x34
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f018 fb5f 	bl	801aaac <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80023ee:	4b3b      	ldr	r3, [pc, #236]	; (80024dc <MX_TIM15_Init+0x120>)
 80023f0:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <MX_TIM15_Init+0x124>)
 80023f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 27500;
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <MX_TIM15_Init+0x120>)
 80023f6:	f646 326c 	movw	r2, #27500	; 0x6b6c
 80023fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b37      	ldr	r3, [pc, #220]	; (80024dc <MX_TIM15_Init+0x120>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8002402:	4b36      	ldr	r3, [pc, #216]	; (80024dc <MX_TIM15_Init+0x120>)
 8002404:	f242 7210 	movw	r2, #10000	; 0x2710
 8002408:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <MX_TIM15_Init+0x120>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <MX_TIM15_Init+0x120>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b31      	ldr	r3, [pc, #196]	; (80024dc <MX_TIM15_Init+0x120>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800241c:	482f      	ldr	r0, [pc, #188]	; (80024dc <MX_TIM15_Init+0x120>)
 800241e:	f009 f96b 	bl	800b6f8 <HAL_TIM_PWM_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8002428:	f7ff fa9b 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002438:	4619      	mov	r1, r3
 800243a:	4828      	ldr	r0, [pc, #160]	; (80024dc <MX_TIM15_Init+0x120>)
 800243c:	f00a fb26 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8002446:	f7ff fa8c 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244a:	2360      	movs	r3, #96	; 0x60
 800244c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002452:	2300      	movs	r3, #0
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002456:	2300      	movs	r3, #0
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002466:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	481b      	ldr	r0, [pc, #108]	; (80024dc <MX_TIM15_Init+0x120>)
 8002470:	f009 fc50 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800247a:	f7ff fa72 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800247e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002482:	2204      	movs	r2, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4815      	ldr	r0, [pc, #84]	; (80024dc <MX_TIM15_Init+0x120>)
 8002488:	f009 fc44 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM15_Init+0xda>
  {
    Error_Handler();
 8002492:	f7ff fa66 	bl	8001962 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4807      	ldr	r0, [pc, #28]	; (80024dc <MX_TIM15_Init+0x120>)
 80024be:	f00a fb81 	bl	800cbc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM15_Init+0x110>
  {
    Error_Handler();
 80024c8:	f7ff fa4b 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <MX_TIM15_Init+0x120>)
 80024ce:	f000 faf3 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80024d2:	bf00      	nop
 80024d4:	3760      	adds	r7, #96	; 0x60
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	240009c0 	.word	0x240009c0
 80024e0:	40014000 	.word	0x40014000

080024e4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b094      	sub	sp, #80	; 0x50
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	615a      	str	r2, [r3, #20]
 80024fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024fe:	463b      	mov	r3, r7
 8002500:	2234      	movs	r2, #52	; 0x34
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f018 fad1 	bl	801aaac <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800250a:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <MX_TIM16_Init+0xec>)
 800250c:	4a31      	ldr	r2, [pc, #196]	; (80025d4 <MX_TIM16_Init+0xf0>)
 800250e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002516:	4b2e      	ldr	r3, [pc, #184]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_TIM16_Init+0xec>)
 800251e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002522:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002526:	2200      	movs	r2, #0
 8002528:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <MX_TIM16_Init+0xec>)
 800252c:	2200      	movs	r2, #0
 800252e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002532:	2200      	movs	r2, #0
 8002534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002536:	4826      	ldr	r0, [pc, #152]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002538:	f009 f887 	bl	800b64a <HAL_TIM_Base_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002542:	f7ff fa0e 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002546:	4822      	ldr	r0, [pc, #136]	; (80025d0 <MX_TIM16_Init+0xec>)
 8002548:	f009 f8d6 	bl	800b6f8 <HAL_TIM_PWM_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002552:	f7ff fa06 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002556:	2360      	movs	r3, #96	; 0x60
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800255e:	2300      	movs	r3, #0
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002562:	2300      	movs	r3, #0
 8002564:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002572:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002576:	2200      	movs	r2, #0
 8002578:	4619      	mov	r1, r3
 800257a:	4815      	ldr	r0, [pc, #84]	; (80025d0 <MX_TIM16_Init+0xec>)
 800257c:	f009 fbca 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002586:	f7ff f9ec 	bl	8001962 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800259e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80025ac:	463b      	mov	r3, r7
 80025ae:	4619      	mov	r1, r3
 80025b0:	4807      	ldr	r0, [pc, #28]	; (80025d0 <MX_TIM16_Init+0xec>)
 80025b2:	f00a fb07 	bl	800cbc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80025bc:	f7ff f9d1 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <MX_TIM16_Init+0xec>)
 80025c2:	f000 fa79 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80025c6:	bf00      	nop
 80025c8:	3750      	adds	r7, #80	; 0x50
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	24000a0c 	.word	0x24000a0c
 80025d4:	40014400 	.word	0x40014400

080025d8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b094      	sub	sp, #80	; 0x50
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]
 80025ee:	615a      	str	r2, [r3, #20]
 80025f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025f2:	463b      	mov	r3, r7
 80025f4:	2234      	movs	r2, #52	; 0x34
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f018 fa57 	bl	801aaac <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002600:	4a31      	ldr	r2, [pc, #196]	; (80026c8 <MX_TIM17_Init+0xf0>)
 8002602:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002606:	2200      	movs	r2, #0
 8002608:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b2e      	ldr	r3, [pc, #184]	; (80026c4 <MX_TIM17_Init+0xec>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002616:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <MX_TIM17_Init+0xec>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002620:	2200      	movs	r2, #0
 8002622:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002626:	2200      	movs	r2, #0
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <MX_TIM17_Init+0xec>)
 800262c:	f009 f80d 	bl	800b64a <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8002636:	f7ff f994 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800263a:	4822      	ldr	r0, [pc, #136]	; (80026c4 <MX_TIM17_Init+0xec>)
 800263c:	f009 f85c 	bl	800b6f8 <HAL_TIM_PWM_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8002646:	f7ff f98c 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800264a:	2360      	movs	r3, #96	; 0x60
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002652:	2300      	movs	r3, #0
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002656:	2300      	movs	r3, #0
 8002658:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002666:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800266a:	2200      	movs	r2, #0
 800266c:	4619      	mov	r1, r3
 800266e:	4815      	ldr	r0, [pc, #84]	; (80026c4 <MX_TIM17_Init+0xec>)
 8002670:	f009 fb50 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800267a:	f7ff f972 	bl	8001962 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80026a0:	463b      	mov	r3, r7
 80026a2:	4619      	mov	r1, r3
 80026a4:	4807      	ldr	r0, [pc, #28]	; (80026c4 <MX_TIM17_Init+0xec>)
 80026a6:	f00a fa8d 	bl	800cbc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80026b0:	f7ff f957 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <MX_TIM17_Init+0xec>)
 80026b6:	f000 f9ff 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80026ba:	bf00      	nop
 80026bc:	3750      	adds	r7, #80	; 0x50
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	24000a58 	.word	0x24000a58
 80026c8:	40014800 	.word	0x40014800

080026cc <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026de:	f107 031c 	add.w	r3, r7, #28
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	609a      	str	r2, [r3, #8]
 80026ea:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	; (80027ec <MX_TIM23_Init+0x120>)
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <MX_TIM23_Init+0x124>)
 8002702:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <MX_TIM23_Init+0x120>)
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <MX_TIM23_Init+0x120>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002710:	4b36      	ldr	r3, [pc, #216]	; (80027ec <MX_TIM23_Init+0x120>)
 8002712:	f04f 32ff 	mov.w	r2, #4294967295
 8002716:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b34      	ldr	r3, [pc, #208]	; (80027ec <MX_TIM23_Init+0x120>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <MX_TIM23_Init+0x120>)
 8002720:	2200      	movs	r2, #0
 8002722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 8002724:	4831      	ldr	r0, [pc, #196]	; (80027ec <MX_TIM23_Init+0x120>)
 8002726:	f009 f95b 	bl	800b9e0 <HAL_TIM_IC_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 8002730:	f7ff f917 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8002734:	482d      	ldr	r0, [pc, #180]	; (80027ec <MX_TIM23_Init+0x120>)
 8002736:	f008 ffdf 	bl	800b6f8 <HAL_TIM_PWM_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8002740:	f7ff f90f 	bl	8001962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	4826      	ldr	r0, [pc, #152]	; (80027ec <MX_TIM23_Init+0x120>)
 8002754:	f00a f99a 	bl	800ca8c <HAL_TIMEx_MasterConfigSynchronization>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM23_Init+0x96>
  {
    Error_Handler();
 800275e:	f7ff f900 	bl	8001962 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002766:	2301      	movs	r3, #1
 8002768:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	2200      	movs	r2, #0
 8002778:	4619      	mov	r1, r3
 800277a:	481c      	ldr	r0, [pc, #112]	; (80027ec <MX_TIM23_Init+0x120>)
 800277c:	f009 fa2e 	bl	800bbdc <HAL_TIM_IC_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM23_Init+0xbe>
  {
    Error_Handler();
 8002786:	f7ff f8ec 	bl	8001962 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800278a:	2360      	movs	r3, #96	; 0x60
 800278c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2204      	movs	r2, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4812      	ldr	r0, [pc, #72]	; (80027ec <MX_TIM23_Init+0x120>)
 80027a2:	f009 fab7 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM23_Init+0xe4>
  {
    Error_Handler();
 80027ac:	f7ff f8d9 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027b0:	463b      	mov	r3, r7
 80027b2:	2208      	movs	r2, #8
 80027b4:	4619      	mov	r1, r3
 80027b6:	480d      	ldr	r0, [pc, #52]	; (80027ec <MX_TIM23_Init+0x120>)
 80027b8:	f009 faac 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM23_Init+0xfa>
  {
    Error_Handler();
 80027c2:	f7ff f8ce 	bl	8001962 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027c6:	463b      	mov	r3, r7
 80027c8:	220c      	movs	r2, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <MX_TIM23_Init+0x120>)
 80027ce:	f009 faa1 	bl	800bd14 <HAL_TIM_PWM_ConfigChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM23_Init+0x110>
  {
    Error_Handler();
 80027d8:	f7ff f8c3 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <MX_TIM23_Init+0x120>)
 80027de:	f000 f96b 	bl	8002ab8 <HAL_TIM_MspPostInit>

}
 80027e2:	bf00      	nop
 80027e4:	3738      	adds	r7, #56	; 0x38
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	24000aa4 	.word	0x24000aa4
 80027f0:	4000e000 	.word	0x4000e000

080027f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a40      	ldr	r2, [pc, #256]	; (8002904 <HAL_TIM_PWM_MspInit+0x110>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10f      	bne.n	8002826 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002806:	4b40      	ldr	r3, [pc, #256]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800280c:	4a3e      	ldr	r2, [pc, #248]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002816:	4b3c      	ldr	r3, [pc, #240]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002824:	e067      	b.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d10f      	bne.n	8002850 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002830:	4b35      	ldr	r3, [pc, #212]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002832:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002836:	4a34      	ldr	r2, [pc, #208]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
}
 800284e:	e052      	b.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2d      	ldr	r2, [pc, #180]	; (800290c <HAL_TIM_PWM_MspInit+0x118>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10f      	bne.n	800287a <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285a:	4b2b      	ldr	r3, [pc, #172]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 800285c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 800286c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	697b      	ldr	r3, [r7, #20]
}
 8002878:	e03d      	b.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM4)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a24      	ldr	r2, [pc, #144]	; (8002910 <HAL_TIM_PWM_MspInit+0x11c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10f      	bne.n	80028a4 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002894:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 8002896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
}
 80028a2:	e028      	b.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM12)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1a      	ldr	r2, [pc, #104]	; (8002914 <HAL_TIM_PWM_MspInit+0x120>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d10f      	bne.n	80028ce <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b4:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
}
 80028cc:	e013      	b.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM15)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_TIM_PWM_MspInit+0x124>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d10e      	bne.n	80028f6 <HAL_TIM_PWM_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <HAL_TIM_PWM_MspInit+0x114>)
 80028ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
}
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010000 	.word	0x40010000
 8002908:	58024400 	.word	0x58024400
 800290c:	40000400 	.word	0x40000400
 8002910:	40000800 	.word	0x40000800
 8002914:	40001800 	.word	0x40001800
 8002918:	40014000 	.word	0x40014000

0800291c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <HAL_TIM_Encoder_MspInit+0x88>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12d      	bne.n	800299a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800296c:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800296e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 800297a:	23c0      	movs	r3, #192	; 0xc0
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800298a:	2303      	movs	r3, #3
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <HAL_TIM_Encoder_MspInit+0x90>)
 8002996:	f005 f8a7 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40010400 	.word	0x40010400
 80029a8:	58024400 	.word	0x58024400
 80029ac:	58020800 	.word	0x58020800

080029b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a16      	ldr	r2, [pc, #88]	; (8002a18 <HAL_TIM_Base_MspInit+0x68>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10f      	bne.n	80029e2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029c8:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80029e0:	e013      	b.n	8002a0a <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM17)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0e      	ldr	r2, [pc, #56]	; (8002a20 <HAL_TIM_Base_MspInit+0x70>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10e      	bne.n	8002a0a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f2:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <HAL_TIM_Base_MspInit+0x6c>)
 80029fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40014400 	.word	0x40014400
 8002a1c:	58024400 	.word	0x58024400
 8002a20:	40014800 	.word	0x40014800

08002a24 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM23)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_TIM_IC_MspInit+0x88>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d12d      	bne.n	8002aa2 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a52:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a64:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a6c:	f043 0320 	orr.w	r3, r3, #32
 8002a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_TIM_IC_MspInit+0x8c>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8002a82:	2301      	movs	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002a92:	230d      	movs	r3, #13
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f107 0314 	add.w	r3, r7, #20
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_TIM_IC_MspInit+0x90>)
 8002a9e:	f005 f823 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	4000e000 	.word	0x4000e000
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	58021400 	.word	0x58021400

08002ab8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4aa6      	ldr	r2, [pc, #664]	; (8002d70 <HAL_TIM_MspPostInit+0x2b8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d120      	bne.n	8002b1c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ada:	4ba6      	ldr	r3, [pc, #664]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae0:	4aa4      	ldr	r2, [pc, #656]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002ae2:	f043 0310 	orr.w	r3, r3, #16
 8002ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aea:	4ba2      	ldr	r3, [pc, #648]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 8002af8:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	2302      	movs	r3, #2
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b12:	4619      	mov	r1, r3
 8002b14:	4898      	ldr	r0, [pc, #608]	; (8002d78 <HAL_TIM_MspPostInit+0x2c0>)
 8002b16:	f004 ffe7 	bl	8007ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8002b1a:	e125      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM3)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a96      	ldr	r2, [pc, #600]	; (8002d7c <HAL_TIM_MspPostInit+0x2c4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d13f      	bne.n	8002ba6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	4a91      	ldr	r2, [pc, #580]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b36:	4b8f      	ldr	r3, [pc, #572]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b44:	4b8b      	ldr	r3, [pc, #556]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	4a8a      	ldr	r2, [pc, #552]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b54:	4b87      	ldr	r3, [pc, #540]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 8002b62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b74:	2302      	movs	r3, #2
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4880      	ldr	r0, [pc, #512]	; (8002d80 <HAL_TIM_MspPostInit+0x2c8>)
 8002b80:	f004 ffb2 	bl	8007ae8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 8002b84:	2330      	movs	r3, #48	; 0x30
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b94:	2302      	movs	r3, #2
 8002b96:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4879      	ldr	r0, [pc, #484]	; (8002d84 <HAL_TIM_MspPostInit+0x2cc>)
 8002ba0:	f004 ffa2 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002ba4:	e0e0      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM4)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a77      	ldr	r2, [pc, #476]	; (8002d88 <HAL_TIM_MspPostInit+0x2d0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d120      	bne.n	8002bf2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bb0:	4b70      	ldr	r3, [pc, #448]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	4a6f      	ldr	r2, [pc, #444]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc0:	4b6c      	ldr	r3, [pc, #432]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 8002bce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002be0:	2302      	movs	r3, #2
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be8:	4619      	mov	r1, r3
 8002bea:	4868      	ldr	r0, [pc, #416]	; (8002d8c <HAL_TIM_MspPostInit+0x2d4>)
 8002bec:	f004 ff7c 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002bf0:	e0ba      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM12)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a66      	ldr	r2, [pc, #408]	; (8002d90 <HAL_TIM_MspPostInit+0x2d8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d120      	bne.n	8002c3e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	4a5c      	ldr	r2, [pc, #368]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0c:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 8002c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c34:	4619      	mov	r1, r3
 8002c36:	4853      	ldr	r0, [pc, #332]	; (8002d84 <HAL_TIM_MspPostInit+0x2cc>)
 8002c38:	f004 ff56 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002c3c:	e094      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM15)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a54      	ldr	r2, [pc, #336]	; (8002d94 <HAL_TIM_MspPostInit+0x2dc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d11f      	bne.n	8002c88 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c48:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4e:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c50:	f043 0310 	orr.w	r3, r3, #16
 8002c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c58:	4b46      	ldr	r3, [pc, #280]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 8002c66:	2370      	movs	r3, #112	; 0x70
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002c76:	2304      	movs	r3, #4
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	483d      	ldr	r0, [pc, #244]	; (8002d78 <HAL_TIM_MspPostInit+0x2c0>)
 8002c82:	f004 ff31 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002c86:	e06f      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM16)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a42      	ldr	r2, [pc, #264]	; (8002d98 <HAL_TIM_MspPostInit+0x2e0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d120      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	4a36      	ldr	r2, [pc, #216]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca2:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 8002cb0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	482d      	ldr	r0, [pc, #180]	; (8002d84 <HAL_TIM_MspPostInit+0x2cc>)
 8002cce:	f004 ff0b 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002cd2:	e049      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM17)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a30      	ldr	r2, [pc, #192]	; (8002d9c <HAL_TIM_MspPostInit+0x2e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d120      	bne.n	8002d20 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	4a23      	ldr	r2, [pc, #140]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 8002cfc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d16:	4619      	mov	r1, r3
 8002d18:	481a      	ldr	r0, [pc, #104]	; (8002d84 <HAL_TIM_MspPostInit+0x2cc>)
 8002d1a:	f004 fee5 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002d1e:	e023      	b.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM23)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_TIM_MspPostInit+0x2e8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d11e      	bne.n	8002d68 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2a:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002d32:	f043 0320 	orr.w	r3, r3, #32
 8002d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_TIM_MspPostInit+0x2bc>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 8002d48:	230e      	movs	r3, #14
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	2300      	movs	r3, #0
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002d58:	230d      	movs	r3, #13
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d60:	4619      	mov	r1, r3
 8002d62:	4810      	ldr	r0, [pc, #64]	; (8002da4 <HAL_TIM_MspPostInit+0x2ec>)
 8002d64:	f004 fec0 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002d68:	bf00      	nop
 8002d6a:	3740      	adds	r7, #64	; 0x40
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40010000 	.word	0x40010000
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58021000 	.word	0x58021000
 8002d7c:	40000400 	.word	0x40000400
 8002d80:	58020800 	.word	0x58020800
 8002d84:	58020400 	.word	0x58020400
 8002d88:	40000800 	.word	0x40000800
 8002d8c:	58020c00 	.word	0x58020c00
 8002d90:	40001800 	.word	0x40001800
 8002d94:	40014000 	.word	0x40014000
 8002d98:	40014400 	.word	0x40014400
 8002d9c:	40014800 	.word	0x40014800
 8002da0:	4000e000 	.word	0x4000e000
 8002da4:	58021400 	.word	0x58021400

08002da8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dae:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <MX_USART1_UART_Init+0x94>)
 8002db0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002db2:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002db8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dba:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dc0:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dce:	220c      	movs	r2, #12
 8002dd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dd2:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd8:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dde:	4b16      	ldr	r3, [pc, #88]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002df0:	4811      	ldr	r0, [pc, #68]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002df2:	f009 ffac 	bl	800cd4e <HAL_UART_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002dfc:	f7fe fdb1 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e00:	2100      	movs	r1, #0
 8002e02:	480d      	ldr	r0, [pc, #52]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002e04:	f00b f84e 	bl	800dea4 <HAL_UARTEx_SetTxFifoThreshold>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e0e:	f7fe fda8 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e12:	2100      	movs	r1, #0
 8002e14:	4808      	ldr	r0, [pc, #32]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002e16:	f00b f883 	bl	800df20 <HAL_UARTEx_SetRxFifoThreshold>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e20:	f7fe fd9f 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <MX_USART1_UART_Init+0x90>)
 8002e26:	f00b f804 	bl	800de32 <HAL_UARTEx_DisableFifoMode>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e30:	f7fe fd97 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	24000af0 	.word	0x24000af0
 8002e3c:	40011000 	.word	0x40011000

08002e40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e44:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <MX_USART2_UART_Init+0x94>)
 8002e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e4a:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e52:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e66:	220c      	movs	r2, #12
 8002e68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e88:	4811      	ldr	r0, [pc, #68]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e8a:	f009 ff60 	bl	800cd4e <HAL_UART_Init>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e94:	f7fe fd65 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002e9c:	f00b f802 	bl	800dea4 <HAL_UARTEx_SetTxFifoThreshold>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ea6:	f7fe fd5c 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002eae:	f00b f837 	bl	800df20 <HAL_UARTEx_SetRxFifoThreshold>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002eb8:	f7fe fd53 	bl	8001962 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <MX_USART2_UART_Init+0x90>)
 8002ebe:	f00a ffb8 	bl	800de32 <HAL_UARTEx_DisableFifoMode>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ec8:	f7fe fd4b 	bl	8001962 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ecc:	bf00      	nop
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	24000b80 	.word	0x24000b80
 8002ed4:	40004400 	.word	0x40004400

08002ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0b8      	sub	sp, #224	; 0xe0
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ef0:	f107 0318 	add.w	r3, r7, #24
 8002ef4:	22b4      	movs	r2, #180	; 0xb4
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f017 fdd7 	bl	801aaac <memset>
  if(uartHandle->Instance==USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a49      	ldr	r2, [pc, #292]	; (8003028 <HAL_UART_MspInit+0x150>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d143      	bne.n	8002f90 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f12:	f107 0318 	add.w	r3, r7, #24
 8002f16:	4618      	mov	r0, r3
 8002f18:	f006 f8d2 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f22:	f7fe fd1e 	bl	8001962 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f26:	4b41      	ldr	r3, [pc, #260]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f2c:	4a3f      	ldr	r2, [pc, #252]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f36:	4b3d      	ldr	r3, [pc, #244]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f4a:	4a38      	ldr	r2, [pc, #224]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_UART_MspInit+0x154>)
 8002f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f86:	4619      	mov	r1, r3
 8002f88:	4829      	ldr	r0, [pc, #164]	; (8003030 <HAL_UART_MspInit+0x158>)
 8002f8a:	f004 fdad 	bl	8007ae8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f8e:	e046      	b.n	800301e <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_UART_MspInit+0x15c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d141      	bne.n	800301e <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa4:	f107 0318 	add.w	r3, r7, #24
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f006 f889 	bl	80090c0 <HAL_RCCEx_PeriphCLKConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002fb4:	f7fe fcd5 	bl	8001962 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fdc:	4a13      	ldr	r2, [pc, #76]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_UART_MspInit+0x154>)
 8002fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002ff4:	2360      	movs	r3, #96	; 0x60
 8002ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800300c:	2307      	movs	r3, #7
 800300e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003012:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003016:	4619      	mov	r1, r3
 8003018:	4807      	ldr	r0, [pc, #28]	; (8003038 <HAL_UART_MspInit+0x160>)
 800301a:	f004 fd65 	bl	8007ae8 <HAL_GPIO_Init>
}
 800301e:	bf00      	nop
 8003020:	37e0      	adds	r7, #224	; 0xe0
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40011000 	.word	0x40011000
 800302c:	58024400 	.word	0x58024400
 8003030:	58020000 	.word	0x58020000
 8003034:	40004400 	.word	0x40004400
 8003038:	58020c00 	.word	0x58020c00

0800303c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003040:	f7fe fe98 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	; (8003078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	; (800307c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800306a:	f017 fcc3 	bl	801a9f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fe fb6b 	bl	8001748 <main>
  bx  lr
 8003072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003078:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800307c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8003080:	0801b33c 	.word	0x0801b33c
  ldr r2, =_sbss
 8003084:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 8003088:	24001250 	.word	0x24001250

0800308c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003096:	2003      	movs	r0, #3
 8003098:	f001 fff2 	bl	8005080 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800309c:	f005 fe3a 	bl	8008d14 <HAL_RCC_GetSysClockFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_Init+0x68>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4913      	ldr	r1, [pc, #76]	; (80030fc <HAL_Init+0x6c>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_Init+0x68>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_Init+0x6c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <HAL_Init+0x70>)
 80030d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d4:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <HAL_Init+0x74>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f814 	bl	8003108 <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e002      	b.n	80030f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030ea:	f7fe fd53 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	0801b2bc 	.word	0x0801b2bc
 8003100:	24000004 	.word	0x24000004
 8003104:	24000000 	.word	0x24000000

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_InitTick+0x60>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e021      	b.n	8003160 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <HAL_InitTick+0x64>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_InitTick+0x60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800312a:	fbb3 f3f1 	udiv	r3, r3, r1
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	4618      	mov	r0, r3
 8003134:	f001 ffd7 	bl	80050e6 <HAL_SYSTICK_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00e      	b.n	8003160 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d80a      	bhi.n	800315e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003148:	2200      	movs	r2, #0
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f001 ffa1 	bl	8005096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003154:	4a06      	ldr	r2, [pc, #24]	; (8003170 <HAL_InitTick+0x68>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2400000c 	.word	0x2400000c
 800316c:	24000000 	.word	0x24000000
 8003170:	24000008 	.word	0x24000008

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2400000c 	.word	0x2400000c
 8003198:	24000c10 	.word	0x24000c10

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	24000c10 	.word	0x24000c10

080031b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80031c4:	4904      	ldr	r1, [pc, #16]	; (80031d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	604b      	str	r3, [r1, #4]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	58000400 	.word	0x58000400

080031dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	4904      	ldr	r1, [pc, #16]	; (8003204 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	58000400 	.word	0x58000400

08003208 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	461a      	mov	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <LL_ADC_SetOffset+0x60>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d10b      	bne.n	80032ac <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80032aa:	e00b      	b.n	80032c4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	430b      	orrs	r3, r1
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	58026000 	.word	0x58026000

080032d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3360      	adds	r3, #96	; 0x60
 80032e2:	461a      	mov	r2, r3
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	611a      	str	r2, [r3, #16]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a0c      	ldr	r2, [pc, #48]	; (8003374 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	601a      	str	r2, [r3, #0]
  }
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	58026000 	.word	0x58026000

08003378 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4a0c      	ldr	r2, [pc, #48]	; (80033b8 <LL_ADC_SetOffsetSaturation+0x40>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d10e      	bne.n	80033aa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	461a      	mov	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	58026000 	.word	0x58026000

080033bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <LL_ADC_SetOffsetSign+0x40>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10e      	bne.n	80033ee <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	58026000 	.word	0x58026000

08003400 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3360      	adds	r3, #96	; 0x60
 8003410:	461a      	mov	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <LL_ADC_SetOffsetState+0x50>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d108      	bne.n	8003434 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003432:	e007      	b.n	8003444 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	431a      	orrs	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	601a      	str	r2, [r3, #0]
}
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	58026000 	.word	0x58026000

08003454 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800347a:	b480      	push	{r7}
 800347c:	b087      	sub	sp, #28
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3330      	adds	r3, #48	; 0x30
 800348a:	461a      	mov	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	4413      	add	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	211f      	movs	r1, #31
 80034a6:	fa01 f303 	lsl.w	r3, r1, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	401a      	ands	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	f003 011f 	and.w	r1, r3, #31
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3314      	adds	r3, #20
 8003508:	461a      	mov	r2, r3
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	0e5b      	lsrs	r3, r3, #25
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	4413      	add	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	0d1b      	lsrs	r3, r3, #20
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	2107      	movs	r1, #7
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	401a      	ands	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0d1b      	lsrs	r3, r3, #20
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	431a      	orrs	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d115      	bne.n	8003590 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003570:	43db      	mvns	r3, r3
 8003572:	401a      	ands	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0318 	and.w	r3, r3, #24
 800357a:	4914      	ldr	r1, [pc, #80]	; (80035cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800357c:	40d9      	lsrs	r1, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	400b      	ands	r3, r1
 8003582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800358e:	e014      	b.n	80035ba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f003 0318 	and.w	r3, r3, #24
 80035a6:	4909      	ldr	r1, [pc, #36]	; (80035cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 80035a8:	40d9      	lsrs	r1, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	400b      	ands	r3, r1
 80035ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	58026000 	.word	0x58026000
 80035cc:	000fffff 	.word	0x000fffff

080035d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 031f 	and.w	r3, r3, #31
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003616:	4013      	ands	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6093      	str	r3, [r2, #8]
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	5fffffc0 	.word	0x5fffffc0

0800362c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800363c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003640:	d101      	bne.n	8003646 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <LL_ADC_EnableInternalRegulator+0x24>)
 8003662:	4013      	ands	r3, r2
 8003664:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	6fffffc0 	.word	0x6fffffc0

0800367c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003690:	d101      	bne.n	8003696 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <LL_ADC_IsEnabled+0x18>
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <LL_ADC_IsEnabled+0x1a>
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d101      	bne.n	80036e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b08      	cmp	r3, #8
 8003702:	d101      	bne.n	8003708 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b089      	sub	sp, #36	; 0x24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1ee      	b.n	8003b10 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fd f8e7 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff67 	bl	800362c <LL_ADC_IsDeepPowerDownEnabled>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff4d 	bl	8003608 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff82 	bl	800367c <LL_ADC_IsInternalRegulatorEnabled>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d114      	bne.n	80037a8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ff66 	bl	8003654 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003788:	4b8e      	ldr	r3, [pc, #568]	; (80039c4 <HAL_ADC_Init+0x2ac>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	4a8e      	ldr	r2, [pc, #568]	; (80039c8 <HAL_ADC_Init+0x2b0>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	3301      	adds	r3, #1
 8003798:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800379a:	e002      	b.n	80037a2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f9      	bne.n	800379c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff65 	bl	800367c <LL_ADC_IsInternalRegulatorEnabled>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037bc:	f043 0210 	orr.w	r2, r3, #16
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ff76 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 80037de:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f040 8188 	bne.w	8003afe <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f040 8184 	bne.w	8003afe <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037fe:	f043 0202 	orr.w	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff4a 	bl	80036a4 <LL_ADC_IsEnabled>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d136      	bne.n	8003884 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a6c      	ldr	r2, [pc, #432]	; (80039cc <HAL_ADC_Init+0x2b4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_ADC_Init+0x112>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_ADC_Init+0x2b8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10e      	bne.n	8003848 <HAL_ADC_Init+0x130>
 800382a:	4868      	ldr	r0, [pc, #416]	; (80039cc <HAL_ADC_Init+0x2b4>)
 800382c:	f7ff ff3a 	bl	80036a4 <LL_ADC_IsEnabled>
 8003830:	4604      	mov	r4, r0
 8003832:	4867      	ldr	r0, [pc, #412]	; (80039d0 <HAL_ADC_Init+0x2b8>)
 8003834:	f7ff ff36 	bl	80036a4 <LL_ADC_IsEnabled>
 8003838:	4603      	mov	r3, r0
 800383a:	4323      	orrs	r3, r4
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e008      	b.n	800385a <HAL_ADC_Init+0x142>
 8003848:	4862      	ldr	r0, [pc, #392]	; (80039d4 <HAL_ADC_Init+0x2bc>)
 800384a:	f7ff ff2b 	bl	80036a4 <LL_ADC_IsEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5a      	ldr	r2, [pc, #360]	; (80039cc <HAL_ADC_Init+0x2b4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_ADC_Init+0x15a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_ADC_Init+0x2b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_ADC_Init+0x15e>
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_ADC_Init+0x2c0>)
 8003874:	e000      	b.n	8003878 <HAL_ADC_Init+0x160>
 8003876:	4a59      	ldr	r2, [pc, #356]	; (80039dc <HAL_ADC_Init+0x2c4>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7ff fcc2 	bl	8003208 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a52      	ldr	r2, [pc, #328]	; (80039d4 <HAL_ADC_Init+0x2bc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d129      	bne.n	80038e2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7e5b      	ldrb	r3, [r3, #25]
 8003892:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003898:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800389e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d013      	beq.n	80038d0 <HAL_ADC_Init+0x1b8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b0c      	cmp	r3, #12
 80038ae:	d00d      	beq.n	80038cc <HAL_ADC_Init+0x1b4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b1c      	cmp	r3, #28
 80038b6:	d007      	beq.n	80038c8 <HAL_ADC_Init+0x1b0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b18      	cmp	r3, #24
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_Init+0x1ac>
 80038c0:	2318      	movs	r3, #24
 80038c2:	e006      	b.n	80038d2 <HAL_ADC_Init+0x1ba>
 80038c4:	2300      	movs	r3, #0
 80038c6:	e004      	b.n	80038d2 <HAL_ADC_Init+0x1ba>
 80038c8:	2310      	movs	r3, #16
 80038ca:	e002      	b.n	80038d2 <HAL_ADC_Init+0x1ba>
 80038cc:	2308      	movs	r3, #8
 80038ce:	e000      	b.n	80038d2 <HAL_ADC_Init+0x1ba>
 80038d0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80038d2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	e00e      	b.n	8003900 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7e5b      	ldrb	r3, [r3, #25]
 80038e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80038f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d106      	bne.n	8003918 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	3b01      	subs	r3, #1
 8003910:	045b      	lsls	r3, r3, #17
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_ADC_Init+0x2bc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d115      	bne.n	800396a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_ADC_Init+0x2c8>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	69b9      	ldr	r1, [r7, #24]
 800394e:	430b      	orrs	r3, r1
 8003950:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	611a      	str	r2, [r3, #16]
 8003968:	e009      	b.n	800397e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <HAL_ADC_Init+0x2cc>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	430b      	orrs	r3, r1
 800397c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fea1 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 8003988:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff feae 	bl	80036f0 <LL_ADC_INJ_IsConversionOngoing>
 8003994:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f040 808e 	bne.w	8003aba <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 808a 	bne.w	8003aba <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_ADC_Init+0x2bc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d11b      	bne.n	80039e8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7e1b      	ldrb	r3, [r3, #24]
 80039b4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039bc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
 80039c2:	e018      	b.n	80039f6 <HAL_ADC_Init+0x2de>
 80039c4:	24000000 	.word	0x24000000
 80039c8:	053e2d63 	.word	0x053e2d63
 80039cc:	40022000 	.word	0x40022000
 80039d0:	40022100 	.word	0x40022100
 80039d4:	58026000 	.word	0x58026000
 80039d8:	40022300 	.word	0x40022300
 80039dc:	58026300 	.word	0x58026300
 80039e0:	fff04007 	.word	0xfff04007
 80039e4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7e1b      	ldrb	r3, [r3, #24]
 80039ec:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <HAL_ADC_Init+0x400>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	69b9      	ldr	r1, [r7, #24]
 8003a06:	430b      	orrs	r3, r1
 8003a08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d137      	bne.n	8003a84 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3f      	ldr	r2, [pc, #252]	; (8003b1c <HAL_ADC_Init+0x404>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d116      	bne.n	8003a52 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	4b3d      	ldr	r3, [pc, #244]	; (8003b20 <HAL_ADC_Init+0x408>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a42:	430a      	orrs	r2, r1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	611a      	str	r2, [r3, #16]
 8003a50:	e020      	b.n	8003a94 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_ADC_Init+0x40c>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a60:	3a01      	subs	r2, #1
 8003a62:	0411      	lsls	r1, r2, #16
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a68:	4311      	orrs	r1, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a74:	430a      	orrs	r2, r1
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0201 	orr.w	r2, r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	e007      	b.n	8003a94 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0201 	bic.w	r2, r2, #1
 8003a92:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_ADC_Init+0x404>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d002      	beq.n	8003aba <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 ffbb 	bl	8004a30 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10c      	bne.n	8003adc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f023 010f 	bic.w	r1, r3, #15
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8003ada:	e007      	b.n	8003aec <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 020f 	bic.w	r2, r2, #15
 8003aea:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af0:	f023 0303 	bic.w	r3, r3, #3
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	661a      	str	r2, [r3, #96]	; 0x60
 8003afc:	e007      	b.n	8003b0e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b02:	f043 0210 	orr.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3724      	adds	r7, #36	; 0x24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	ffffbffc 	.word	0xffffbffc
 8003b1c:	58026000 	.word	0x58026000
 8003b20:	fc00f81f 	.word	0xfc00f81f
 8003b24:	fc00f81e 	.word	0xfc00f81e

08003b28 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	; 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a87      	ldr	r2, [pc, #540]	; (8003d68 <HAL_ADC_IRQHandler+0x240>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_ADC_IRQHandler+0x30>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a86      	ldr	r2, [pc, #536]	; (8003d6c <HAL_ADC_IRQHandler+0x244>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_IRQHandler+0x34>
 8003b58:	4b85      	ldr	r3, [pc, #532]	; (8003d70 <HAL_ADC_IRQHandler+0x248>)
 8003b5a:	e000      	b.n	8003b5e <HAL_ADC_IRQHandler+0x36>
 8003b5c:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <HAL_ADC_IRQHandler+0x24c>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd36 	bl	80035d0 <LL_ADC_GetMultimode>
 8003b64:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <HAL_ADC_IRQHandler+0x78>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d012      	beq.n	8003ba0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f001 f886 	bl	8004ca4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_ADC_IRQHandler+0x8c>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8083 	beq.w	8003cc6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d07d      	beq.n	8003cc6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d105      	bne.n	8003be2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fc34 	bl	8003454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d062      	beq.n	8003cb8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <HAL_ADC_IRQHandler+0x244>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d002      	beq.n	8003c02 <HAL_ADC_IRQHandler+0xda>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	e000      	b.n	8003c04 <HAL_ADC_IRQHandler+0xdc>
 8003c02:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_ADC_IRQHandler+0x240>)
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d008      	beq.n	8003c1e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d002      	beq.n	8003c1e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d104      	bne.n	8003c28 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	e00c      	b.n	8003c42 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a4f      	ldr	r2, [pc, #316]	; (8003d6c <HAL_ADC_IRQHandler+0x244>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d002      	beq.n	8003c38 <HAL_ADC_IRQHandler+0x110>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	e000      	b.n	8003c3a <HAL_ADC_IRQHandler+0x112>
 8003c38:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <HAL_ADC_IRQHandler+0x240>)
 8003c3a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d135      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d12e      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fd33 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11a      	bne.n	8003ca0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 020c 	bic.w	r2, r2, #12
 8003c78:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d112      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	; 0x60
 8003c9e:	e00b      	b.n	8003cb8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f96f 	bl	8003f9c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d004      	beq.n	8003cda <HAL_ADC_IRQHandler+0x1b2>
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a0 	beq.w	8003e26 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 809a 	beq.w	8003e26 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d02:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fbdf 	bl	80034d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d14:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fb9a 	bl	8003454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d20:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a11      	ldr	r2, [pc, #68]	; (8003d6c <HAL_ADC_IRQHandler+0x244>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d002      	beq.n	8003d32 <HAL_ADC_IRQHandler+0x20a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	e000      	b.n	8003d34 <HAL_ADC_IRQHandler+0x20c>
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_ADC_IRQHandler+0x240>)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d008      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b06      	cmp	r3, #6
 8003d46:	d002      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	d104      	bne.n	8003d58 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	623b      	str	r3, [r7, #32]
 8003d56:	e014      	b.n	8003d82 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a03      	ldr	r2, [pc, #12]	; (8003d6c <HAL_ADC_IRQHandler+0x244>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00a      	beq.n	8003d78 <HAL_ADC_IRQHandler+0x250>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	e008      	b.n	8003d7a <HAL_ADC_IRQHandler+0x252>
 8003d68:	40022000 	.word	0x40022000
 8003d6c:	40022100 	.word	0x40022100
 8003d70:	40022300 	.word	0x40022300
 8003d74:	58026300 	.word	0x58026300
 8003d78:	4b84      	ldr	r3, [pc, #528]	; (8003f8c <HAL_ADC_IRQHandler+0x464>)
 8003d7a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d047      	beq.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_ADC_IRQHandler+0x27a>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d03f      	beq.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d13a      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d133      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d12e      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fc96 	bl	80036f0 <LL_ADC_INJ_IsConversionOngoing>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d11a      	bne.n	8003e00 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dd8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d112      	bne.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df6:	f043 0201 	orr.w	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	661a      	str	r2, [r3, #96]	; 0x60
 8003dfe:	e00b      	b.n	8003e18 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e04:	f043 0210 	orr.w	r2, r3, #16
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 ff1b 	bl	8004c54 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2260      	movs	r2, #96	; 0x60
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d011      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x32c>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00c      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f8b2 	bl	8003fb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2280      	movs	r2, #128	; 0x80
 8003e52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d012      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x35c>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 ff01 	bl	8004c7c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x38c>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fef3 	bl	8004c90 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d043      	beq.n	8003f46 <HAL_ADC_IRQHandler+0x41e>
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03e      	beq.n	8003f46 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d102      	bne.n	8003ed6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e021      	b.n	8003f1a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <HAL_ADC_IRQHandler+0x464>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_ADC_IRQHandler+0x3c8>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_ADC_IRQHandler+0x468>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <HAL_ADC_IRQHandler+0x3cc>
 8003ef0:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <HAL_ADC_IRQHandler+0x46c>)
 8003ef2:	e000      	b.n	8003ef6 <HAL_ADC_IRQHandler+0x3ce>
 8003ef4:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_ADC_IRQHandler+0x470>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fb78 	bl	80035ec <LL_ADC_GetMultiDMATransfer>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f02:	2301      	movs	r3, #1
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e008      	b.n	8003f1a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f16:	2301      	movs	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10e      	bne.n	8003f3e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f843 	bl	8003fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2210      	movs	r2, #16
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x45a>
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fe73 	bl	8004c68 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003f82:	bf00      	nop
 8003f84:	3728      	adds	r7, #40	; 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40022000 	.word	0x40022000
 8003f90:	40022100 	.word	0x40022100
 8003f94:	40022300 	.word	0x40022300
 8003f98:	58026300 	.word	0x58026300

08003f9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b0b9      	sub	sp, #228	; 0xe4
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4aa9      	ldr	r2, [pc, #676]	; (80042a0 <HAL_ADC_ConfigChannel+0x2c8>)
 8003ffa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <HAL_ADC_ConfigChannel+0x34>
 8004006:	2302      	movs	r3, #2
 8004008:	f000 bcfa 	b.w	8004a00 <HAL_ADC_ConfigChannel+0xa28>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fb56 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 84de 	bne.w	80049e2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a9e      	ldr	r2, [pc, #632]	; (80042a4 <HAL_ADC_ConfigChannel+0x2cc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d033      	beq.n	8004098 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004038:	2b00      	cmp	r3, #0
 800403a:	d108      	bne.n	800404e <HAL_ADC_ConfigChannel+0x76>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2201      	movs	r2, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	e01d      	b.n	800408a <HAL_ADC_ConfigChannel+0xb2>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004062:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800406a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e004      	b.n	8004080 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004076:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800407a:	fab3 f383 	clz	r3, r3
 800407e:	b2db      	uxtb	r3, r3
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	69d1      	ldr	r1, [r2, #28]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	430b      	orrs	r3, r1
 8004096:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	f7ff f9e8 	bl	800347a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fb0b 	bl	80036ca <LL_ADC_REG_IsConversionOngoing>
 80040b4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fb17 	bl	80036f0 <LL_ADC_INJ_IsConversionOngoing>
 80040c2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f040 8270 	bne.w	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 826b 	bne.w	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7ff fa06 	bl	80034f8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a6c      	ldr	r2, [pc, #432]	; (80042a4 <HAL_ADC_ConfigChannel+0x2cc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10d      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	08db      	lsrs	r3, r3, #3
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004110:	e032      	b.n	8004178 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004112:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_ADC_ConfigChannel+0x2d0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800411a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800411e:	d10b      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x160>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	695a      	ldr	r2, [r3, #20]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	e01d      	b.n	8004174 <HAL_ADC_ConfigChannel+0x19c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_ADC_ConfigChannel+0x186>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	e00a      	b.n	8004174 <HAL_ADC_ConfigChannel+0x19c>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d048      	beq.n	8004212 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	6919      	ldr	r1, [r3, #16]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004190:	f7ff f86e 	bl	8003270 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <HAL_ADC_ConfigChannel+0x2cc>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d119      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6919      	ldr	r1, [r3, #16]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f7ff f906 	bl	80033bc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	6919      	ldr	r1, [r3, #16]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d102      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x1f0>
 80041c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c6:	e000      	b.n	80041ca <HAL_ADC_ConfigChannel+0x1f2>
 80041c8:	2300      	movs	r3, #0
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7ff f8d4 	bl	8003378 <LL_ADC_SetOffsetSaturation>
 80041d0:	e1ee      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6919      	ldr	r1, [r3, #16]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d102      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x212>
 80041e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041e8:	e000      	b.n	80041ec <HAL_ADC_ConfigChannel+0x214>
 80041ea:	2300      	movs	r3, #0
 80041ec:	461a      	mov	r2, r3
 80041ee:	f7ff f8a1 	bl	8003334 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6919      	ldr	r1, [r3, #16]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	7e1b      	ldrb	r3, [r3, #24]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x230>
 8004202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004206:	e000      	b.n	800420a <HAL_ADC_ConfigChannel+0x232>
 8004208:	2300      	movs	r3, #0
 800420a:	461a      	mov	r2, r3
 800420c:	f7ff f878 	bl	8003300 <LL_ADC_SetDataRightShift>
 8004210:	e1ce      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	f040 8181 	bne.w	8004520 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff f855 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <HAL_ADC_ConfigChannel+0x272>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff f84a 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004240:	4603      	mov	r3, r0
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	e01e      	b.n	8004288 <HAL_ADC_ConfigChannel+0x2b0>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f7ff f83f 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800426c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004278:	2320      	movs	r3, #32
 800427a:	e004      	b.n	8004286 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800427c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004280:	fab3 f383 	clz	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10b      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x2d4>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	e01e      	b.n	80042de <HAL_ADC_ConfigChannel+0x306>
 80042a0:	47ff0000 	.word	0x47ff0000
 80042a4:	58026000 	.word	0x58026000
 80042a8:	5c001000 	.word	0x5c001000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80042c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80042c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80042c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80042d0:	2320      	movs	r3, #32
 80042d2:	e004      	b.n	80042de <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80042d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	429a      	cmp	r2, r3
 80042e0:	d106      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f888 	bl	8003400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe ffec 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_ADC_ConfigChannel+0x344>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2101      	movs	r1, #1
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe ffe1 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004312:	4603      	mov	r3, r0
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	e01e      	b.n	800435a <HAL_ADC_ConfigChannel+0x382>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	4618      	mov	r0, r3
 8004324:	f7fe ffd6 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004328:	4603      	mov	r3, r0
 800432a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800433a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e004      	b.n	8004358 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800434e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	461a      	mov	r2, r3
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004362:	2b00      	cmp	r3, #0
 8004364:	d105      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x39a>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	0e9b      	lsrs	r3, r3, #26
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	e018      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x3cc>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004386:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800438a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800438e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e004      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800439a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800439e:	fab3 f383 	clz	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d106      	bne.n	80043b6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2101      	movs	r1, #1
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff f825 	bl	8003400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe ff89 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x40a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe ff7e 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 80043d8:	4603      	mov	r3, r0
 80043da:	0e9b      	lsrs	r3, r3, #26
 80043dc:	f003 021f 	and.w	r2, r3, #31
 80043e0:	e01e      	b.n	8004420 <HAL_ADC_ConfigChannel+0x448>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe ff73 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e004      	b.n	800441e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004418:	fab3 f383 	clz	r3, r3
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x460>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	0e9b      	lsrs	r3, r3, #26
 8004432:	f003 031f 	and.w	r3, r3, #31
 8004436:	e014      	b.n	8004462 <HAL_ADC_ConfigChannel+0x48a>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800444c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004454:	2320      	movs	r3, #32
 8004456:	e004      	b.n	8004462 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	429a      	cmp	r2, r3
 8004464:	d106      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	2102      	movs	r1, #2
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe ffc6 	bl	8003400 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2103      	movs	r1, #3
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe ff2a 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004480:	4603      	mov	r3, r0
 8004482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x4c8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2103      	movs	r1, #3
 8004490:	4618      	mov	r0, r3
 8004492:	f7fe ff1f 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 8004496:	4603      	mov	r3, r0
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	f003 021f 	and.w	r2, r3, #31
 800449e:	e017      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x4f8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2103      	movs	r1, #3
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe ff14 	bl	80032d4 <LL_ADC_GetOffsetChannel>
 80044ac:	4603      	mov	r3, r0
 80044ae:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b2:	fa93 f3a3 	rbit	r3, r3
 80044b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ba:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80044bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e003      	b.n	80044ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80044c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c8:	fab3 f383 	clz	r3, r3
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x510>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	e011      	b.n	800450c <HAL_ADC_ConfigChannel+0x534>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044f0:	fa93 f3a3 	rbit	r3, r3
 80044f4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044f8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004500:	2320      	movs	r3, #32
 8004502:	e003      	b.n	800450c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	429a      	cmp	r2, r3
 800450e:	d14f      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	2103      	movs	r1, #3
 8004518:	4618      	mov	r0, r3
 800451a:	f7fe ff71 	bl	8003400 <LL_ADC_SetOffsetState>
 800451e:	e047      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004526:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	069b      	lsls	r3, r3, #26
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004542:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800454a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	069b      	lsls	r3, r3, #26
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004566:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	069b      	lsls	r3, r3, #26
 8004578:	429a      	cmp	r2, r3
 800457a:	d107      	bne.n	800458c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800458a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004592:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	069b      	lsls	r3, r3, #26
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ae:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff f875 	bl	80036a4 <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f040 8219 	bne.w	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6818      	ldr	r0, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6819      	ldr	r1, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f7fe ffbe 	bl	8003550 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	4aa1      	ldr	r2, [pc, #644]	; (8004860 <HAL_ADC_ConfigChannel+0x888>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	f040 812e 	bne.w	800483c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x630>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	0e9b      	lsrs	r3, r3, #26
 80045f6:	3301      	adds	r3, #1
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2b09      	cmp	r3, #9
 80045fe:	bf94      	ite	ls
 8004600:	2301      	movls	r3, #1
 8004602:	2300      	movhi	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e019      	b.n	800463c <HAL_ADC_ConfigChannel+0x664>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004618:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004620:	2320      	movs	r3, #32
 8004622:	e003      	b.n	800462c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	3301      	adds	r3, #1
 800462e:	f003 031f 	and.w	r3, r3, #31
 8004632:	2b09      	cmp	r3, #9
 8004634:	bf94      	ite	ls
 8004636:	2301      	movls	r3, #1
 8004638:	2300      	movhi	r3, #0
 800463a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800463c:	2b00      	cmp	r3, #0
 800463e:	d079      	beq.n	8004734 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004648:	2b00      	cmp	r3, #0
 800464a:	d107      	bne.n	800465c <HAL_ADC_ConfigChannel+0x684>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	3301      	adds	r3, #1
 8004654:	069b      	lsls	r3, r3, #26
 8004656:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800465a:	e015      	b.n	8004688 <HAL_ADC_ConfigChannel+0x6b0>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	fa93 f3a3 	rbit	r3, r3
 8004668:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800466a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800466e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004674:	2320      	movs	r3, #32
 8004676:	e003      	b.n	8004680 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3301      	adds	r3, #1
 8004682:	069b      	lsls	r3, r3, #26
 8004684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x6d0>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	0e9b      	lsrs	r3, r3, #26
 800469a:	3301      	adds	r3, #1
 800469c:	f003 031f 	and.w	r3, r3, #31
 80046a0:	2101      	movs	r1, #1
 80046a2:	fa01 f303 	lsl.w	r3, r1, r3
 80046a6:	e017      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x700>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046b0:	fa93 f3a3 	rbit	r3, r3
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80046c0:	2320      	movs	r3, #32
 80046c2:	e003      	b.n	80046cc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	2101      	movs	r1, #1
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	ea42 0103 	orr.w	r1, r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x726>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0e9b      	lsrs	r3, r3, #26
 80046ee:	3301      	adds	r3, #1
 80046f0:	f003 021f 	and.w	r2, r3, #31
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	051b      	lsls	r3, r3, #20
 80046fc:	e018      	b.n	8004730 <HAL_ADC_ConfigChannel+0x758>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004716:	2320      	movs	r3, #32
 8004718:	e003      	b.n	8004722 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	b2db      	uxtb	r3, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004730:	430b      	orrs	r3, r1
 8004732:	e07e      	b.n	8004832 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800473c:	2b00      	cmp	r3, #0
 800473e:	d107      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x778>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0e9b      	lsrs	r3, r3, #26
 8004746:	3301      	adds	r3, #1
 8004748:	069b      	lsls	r3, r3, #26
 800474a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800474e:	e015      	b.n	800477c <HAL_ADC_ConfigChannel+0x7a4>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e003      	b.n	8004774 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800476c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3301      	adds	r3, #1
 8004776:	069b      	lsls	r3, r3, #26
 8004778:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_ADC_ConfigChannel+0x7c4>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0e9b      	lsrs	r3, r3, #26
 800478e:	3301      	adds	r3, #1
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	e017      	b.n	80047cc <HAL_ADC_ConfigChannel+0x7f4>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	61bb      	str	r3, [r7, #24]
  return result;
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	ea42 0103 	orr.w	r1, r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10d      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x820>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	4613      	mov	r3, r2
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	4413      	add	r3, r2
 80047ee:	3b1e      	subs	r3, #30
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047f6:	e01b      	b.n	8004830 <HAL_ADC_ConfigChannel+0x858>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	60fb      	str	r3, [r7, #12]
  return result;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f003 021f 	and.w	r2, r3, #31
 8004822:	4613      	mov	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4413      	add	r3, r2
 8004828:	3b1e      	subs	r3, #30
 800482a:	051b      	lsls	r3, r3, #20
 800482c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004830:	430b      	orrs	r3, r1
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	4619      	mov	r1, r3
 8004838:	f7fe fe5e 	bl	80034f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	f280 80d7 	bge.w	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a06      	ldr	r2, [pc, #24]	; (8004864 <HAL_ADC_ConfigChannel+0x88c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_ADC_ConfigChannel+0x882>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a04      	ldr	r2, [pc, #16]	; (8004868 <HAL_ADC_ConfigChannel+0x890>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10a      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x898>
 800485a:	4b04      	ldr	r3, [pc, #16]	; (800486c <HAL_ADC_ConfigChannel+0x894>)
 800485c:	e009      	b.n	8004872 <HAL_ADC_ConfigChannel+0x89a>
 800485e:	bf00      	nop
 8004860:	47ff0000 	.word	0x47ff0000
 8004864:	40022000 	.word	0x40022000
 8004868:	40022100 	.word	0x40022100
 800486c:	40022300 	.word	0x40022300
 8004870:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_ADC_ConfigChannel+0xa30>)
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fcee 	bl	8003254 <LL_ADC_GetCommonPathInternalCh>
 8004878:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a62      	ldr	r2, [pc, #392]	; (8004a0c <HAL_ADC_ConfigChannel+0xa34>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_ADC_ConfigChannel+0x8b8>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a61      	ldr	r2, [pc, #388]	; (8004a10 <HAL_ADC_ConfigChannel+0xa38>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d10e      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x8d6>
 8004890:	485e      	ldr	r0, [pc, #376]	; (8004a0c <HAL_ADC_ConfigChannel+0xa34>)
 8004892:	f7fe ff07 	bl	80036a4 <LL_ADC_IsEnabled>
 8004896:	4604      	mov	r4, r0
 8004898:	485d      	ldr	r0, [pc, #372]	; (8004a10 <HAL_ADC_ConfigChannel+0xa38>)
 800489a:	f7fe ff03 	bl	80036a4 <LL_ADC_IsEnabled>
 800489e:	4603      	mov	r3, r0
 80048a0:	4323      	orrs	r3, r4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e008      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x8e8>
 80048ae:	4859      	ldr	r0, [pc, #356]	; (8004a14 <HAL_ADC_ConfigChannel+0xa3c>)
 80048b0:	f7fe fef8 	bl	80036a4 <LL_ADC_IsEnabled>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 8084 	beq.w	80049ce <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a53      	ldr	r2, [pc, #332]	; (8004a18 <HAL_ADC_ConfigChannel+0xa40>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d132      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x95e>
 80048d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80048d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d12c      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a4c      	ldr	r2, [pc, #304]	; (8004a14 <HAL_ADC_ConfigChannel+0xa3c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f040 8086 	bne.w	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a47      	ldr	r2, [pc, #284]	; (8004a0c <HAL_ADC_ConfigChannel+0xa34>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x924>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a46      	ldr	r2, [pc, #280]	; (8004a10 <HAL_ADC_ConfigChannel+0xa38>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x928>
 80048fc:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <HAL_ADC_ConfigChannel+0xa44>)
 80048fe:	e000      	b.n	8004902 <HAL_ADC_ConfigChannel+0x92a>
 8004900:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <HAL_ADC_ConfigChannel+0xa30>)
 8004902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004906:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f7fe fc8e 	bl	800322e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004912:	4b43      	ldr	r3, [pc, #268]	; (8004a20 <HAL_ADC_ConfigChannel+0xa48>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a42      	ldr	r2, [pc, #264]	; (8004a24 <HAL_ADC_ConfigChannel+0xa4c>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	3301      	adds	r3, #1
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004926:	e002      	b.n	800492e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f9      	bne.n	8004928 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004934:	e05e      	b.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <HAL_ADC_ConfigChannel+0xa50>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d120      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x9aa>
 8004940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11a      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_ADC_ConfigChannel+0xa3c>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d14e      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <HAL_ADC_ConfigChannel+0xa34>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_ADC_ConfigChannel+0x992>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_ADC_ConfigChannel+0xa38>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d101      	bne.n	800496e <HAL_ADC_ConfigChannel+0x996>
 800496a:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <HAL_ADC_ConfigChannel+0xa44>)
 800496c:	e000      	b.n	8004970 <HAL_ADC_ConfigChannel+0x998>
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_ADC_ConfigChannel+0xa30>)
 8004970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7fe fc57 	bl	800322e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004980:	e038      	b.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a29      	ldr	r2, [pc, #164]	; (8004a2c <HAL_ADC_ConfigChannel+0xa54>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d133      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
 800498c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d12d      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1d      	ldr	r2, [pc, #116]	; (8004a14 <HAL_ADC_ConfigChannel+0xa3c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d128      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a19      	ldr	r2, [pc, #100]	; (8004a0c <HAL_ADC_ConfigChannel+0xa34>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_ADC_ConfigChannel+0x9de>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a17      	ldr	r2, [pc, #92]	; (8004a10 <HAL_ADC_ConfigChannel+0xa38>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x9e2>
 80049b6:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_ADC_ConfigChannel+0xa44>)
 80049b8:	e000      	b.n	80049bc <HAL_ADC_ConfigChannel+0x9e4>
 80049ba:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <HAL_ADC_ConfigChannel+0xa30>)
 80049bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fe fc31 	bl	800322e <LL_ADC_SetCommonPathInternalCh>
 80049cc:	e012      	b.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80049e0:	e008      	b.n	80049f4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e6:	f043 0220 	orr.w	r2, r3, #32
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049fc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	37e4      	adds	r7, #228	; 0xe4
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd90      	pop	{r4, r7, pc}
 8004a08:	58026300 	.word	0x58026300
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40022100 	.word	0x40022100
 8004a14:	58026000 	.word	0x58026000
 8004a18:	c7520000 	.word	0xc7520000
 8004a1c:	40022300 	.word	0x40022300
 8004a20:	24000000 	.word	0x24000000
 8004a24:	053e2d63 	.word	0x053e2d63
 8004a28:	c3210000 	.word	0xc3210000
 8004a2c:	cb840000 	.word	0xcb840000

08004a30 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6b      	ldr	r2, [pc, #428]	; (8004bec <ADC_ConfigureBoostMode+0x1bc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <ADC_ConfigureBoostMode+0x1c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a6a      	ldr	r2, [pc, #424]	; (8004bf0 <ADC_ConfigureBoostMode+0x1c0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d109      	bne.n	8004a60 <ADC_ConfigureBoostMode+0x30>
 8004a4c:	4b69      	ldr	r3, [pc, #420]	; (8004bf4 <ADC_ConfigureBoostMode+0x1c4>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	e008      	b.n	8004a72 <ADC_ConfigureBoostMode+0x42>
 8004a60:	4b65      	ldr	r3, [pc, #404]	; (8004bf8 <ADC_ConfigureBoostMode+0x1c8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01c      	beq.n	8004ab0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a76:	f004 fac7 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 8004a7a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a84:	d010      	beq.n	8004aa8 <ADC_ConfigureBoostMode+0x78>
 8004a86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a8a:	d871      	bhi.n	8004b70 <ADC_ConfigureBoostMode+0x140>
 8004a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a90:	d002      	beq.n	8004a98 <ADC_ConfigureBoostMode+0x68>
 8004a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a96:	d16b      	bne.n	8004b70 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	60fb      	str	r3, [r7, #12]
        break;
 8004aa6:	e066      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	089b      	lsrs	r3, r3, #2
 8004aac:	60fb      	str	r3, [r7, #12]
        break;
 8004aae:	e062      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ab0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ab4:	f005 f9fe 	bl	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ab8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ac2:	d051      	beq.n	8004b68 <ADC_ConfigureBoostMode+0x138>
 8004ac4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ac8:	d854      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004aca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ace:	d047      	beq.n	8004b60 <ADC_ConfigureBoostMode+0x130>
 8004ad0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ad4:	d84e      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004ad6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ada:	d03d      	beq.n	8004b58 <ADC_ConfigureBoostMode+0x128>
 8004adc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ae0:	d848      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae6:	d033      	beq.n	8004b50 <ADC_ConfigureBoostMode+0x120>
 8004ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aec:	d842      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004aee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004af2:	d029      	beq.n	8004b48 <ADC_ConfigureBoostMode+0x118>
 8004af4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004af8:	d83c      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004afa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004afe:	d01a      	beq.n	8004b36 <ADC_ConfigureBoostMode+0x106>
 8004b00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004b04:	d836      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004b06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b0a:	d014      	beq.n	8004b36 <ADC_ConfigureBoostMode+0x106>
 8004b0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004b10:	d830      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b16:	d00e      	beq.n	8004b36 <ADC_ConfigureBoostMode+0x106>
 8004b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1c:	d82a      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004b1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b22:	d008      	beq.n	8004b36 <ADC_ConfigureBoostMode+0x106>
 8004b24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b28:	d824      	bhi.n	8004b74 <ADC_ConfigureBoostMode+0x144>
 8004b2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b2e:	d002      	beq.n	8004b36 <ADC_ConfigureBoostMode+0x106>
 8004b30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b34:	d11e      	bne.n	8004b74 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	0c9b      	lsrs	r3, r3, #18
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	60fb      	str	r3, [r7, #12]
        break;
 8004b46:	e016      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]
        break;
 8004b4e:	e012      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	60fb      	str	r3, [r7, #12]
        break;
 8004b56:	e00e      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	60fb      	str	r3, [r7, #12]
        break;
 8004b5e:	e00a      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	09db      	lsrs	r3, r3, #7
 8004b64:	60fb      	str	r3, [r7, #12]
        break;
 8004b66:	e006      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	0a1b      	lsrs	r3, r3, #8
 8004b6c:	60fb      	str	r3, [r7, #12]
        break;
 8004b6e:	e002      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
        break;
 8004b70:	bf00      	nop
 8004b72:	e000      	b.n	8004b76 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004b74:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <ADC_ConfigureBoostMode+0x1cc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d808      	bhi.n	8004b96 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b94:	e025      	b.n	8004be2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <ADC_ConfigureBoostMode+0x1d0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d80a      	bhi.n	8004bb4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	609a      	str	r2, [r3, #8]
}
 8004bb2:	e016      	b.n	8004be2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <ADC_ConfigureBoostMode+0x1d4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d80a      	bhi.n	8004bd2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bce:	609a      	str	r2, [r3, #8]
}
 8004bd0:	e007      	b.n	8004be2 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	40022100 	.word	0x40022100
 8004bf4:	40022300 	.word	0x40022300
 8004bf8:	58026300 	.word	0x58026300
 8004bfc:	005f5e10 	.word	0x005f5e10
 8004c00:	00bebc20 	.word	0x00bebc20
 8004c04:	017d7840 	.word	0x017d7840

08004c08 <LL_ADC_IsEnabled>:
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <LL_ADC_IsEnabled+0x18>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <LL_ADC_IsEnabled+0x1a>
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_ADC_REG_IsConversionOngoing>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d101      	bne.n	8004c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b0a3      	sub	sp, #140	; 0x8c
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0c1      	b.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5e      	ldr	r2, [pc, #376]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d102      	bne.n	8004cf6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004cf0:	4b5d      	ldr	r3, [pc, #372]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e001      	b.n	8004cfa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	f043 0220 	orr.w	r2, r3, #32
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0a0      	b.n	8004e5a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff ff87 	bl	8004c2e <LL_ADC_REG_IsConversionOngoing>
 8004d20:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff80 	bl	8004c2e <LL_ADC_REG_IsConversionOngoing>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f040 8081 	bne.w	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d17c      	bne.n	8004e38 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a48      	ldr	r2, [pc, #288]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a46      	ldr	r2, [pc, #280]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004d52:	4b46      	ldr	r3, [pc, #280]	; (8004e6c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d54:	e000      	b.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004d56:	4b46      	ldr	r3, [pc, #280]	; (8004e70 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d58:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d039      	beq.n	8004dd6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a3a      	ldr	r2, [pc, #232]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10e      	bne.n	8004da6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004d88:	4836      	ldr	r0, [pc, #216]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d8a:	f7ff ff3d 	bl	8004c08 <LL_ADC_IsEnabled>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4835      	ldr	r0, [pc, #212]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d92:	f7ff ff39 	bl	8004c08 <LL_ADC_IsEnabled>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4323      	orrs	r3, r4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bf0c      	ite	eq
 8004d9e:	2301      	moveq	r3, #1
 8004da0:	2300      	movne	r3, #0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	e008      	b.n	8004db8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004da6:	4833      	ldr	r0, [pc, #204]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004da8:	f7ff ff2e 	bl	8004c08 <LL_ADC_IsEnabled>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d047      	beq.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6811      	ldr	r1, [r2, #0]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	6892      	ldr	r2, [r2, #8]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dd4:	e03a      	b.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004dd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d004      	beq.n	8004df6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10e      	bne.n	8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004df6:	481b      	ldr	r0, [pc, #108]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004df8:	f7ff ff06 	bl	8004c08 <LL_ADC_IsEnabled>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	481a      	ldr	r0, [pc, #104]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004e00:	f7ff ff02 	bl	8004c08 <LL_ADC_IsEnabled>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4323      	orrs	r3, r4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	e008      	b.n	8004e26 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004e14:	4817      	ldr	r0, [pc, #92]	; (8004e74 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004e16:	f7ff fef7 	bl	8004c08 <LL_ADC_IsEnabled>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d010      	beq.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004e34:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e36:	e009      	b.n	8004e4c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004e4a:	e000      	b.n	8004e4e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004e56:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	378c      	adds	r7, #140	; 0x8c
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40022000 	.word	0x40022000
 8004e68:	40022100 	.word	0x40022100
 8004e6c:	40022300 	.word	0x40022300
 8004e70:	58026300 	.word	0x58026300
 8004e74:	58026000 	.word	0x58026000
 8004e78:	fffff0e0 	.word	0xfffff0e0

08004e7c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e023      	b.n	8004ed6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fb ff42 	bl	8000d2c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef0:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <__NVIC_SetPriorityGrouping+0x40>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004efc:	4013      	ands	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <__NVIC_SetPriorityGrouping+0x44>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <__NVIC_SetPriorityGrouping+0x40>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	60d3      	str	r3, [r2, #12]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed00 	.word	0xe000ed00
 8004f24:	05fa0000 	.word	0x05fa0000

08004f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <__NVIC_GetPriorityGrouping+0x18>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	f003 0307 	and.w	r3, r3, #7
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	db0b      	blt.n	8004f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	f003 021f 	and.w	r2, r3, #31
 8004f5c:	4907      	ldr	r1, [pc, #28]	; (8004f7c <__NVIC_EnableIRQ+0x38>)
 8004f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2001      	movs	r0, #1
 8004f66:	fa00 f202 	lsl.w	r2, r0, r2
 8004f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000e100 	.word	0xe000e100

08004f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	6039      	str	r1, [r7, #0]
 8004f8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	db0a      	blt.n	8004faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	490c      	ldr	r1, [pc, #48]	; (8004fcc <__NVIC_SetPriority+0x4c>)
 8004f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f9e:	0112      	lsls	r2, r2, #4
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa8:	e00a      	b.n	8004fc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4908      	ldr	r1, [pc, #32]	; (8004fd0 <__NVIC_SetPriority+0x50>)
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	f003 030f 	and.w	r3, r3, #15
 8004fb6:	3b04      	subs	r3, #4
 8004fb8:	0112      	lsls	r2, r2, #4
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	761a      	strb	r2, [r3, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000e100 	.word	0xe000e100
 8004fd0:	e000ed00 	.word	0xe000ed00

08004fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f1c3 0307 	rsb	r3, r3, #7
 8004fee:	2b04      	cmp	r3, #4
 8004ff0:	bf28      	it	cs
 8004ff2:	2304      	movcs	r3, #4
 8004ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d902      	bls.n	8005004 <NVIC_EncodePriority+0x30>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3b03      	subs	r3, #3
 8005002:	e000      	b.n	8005006 <NVIC_EncodePriority+0x32>
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005008:	f04f 32ff 	mov.w	r2, #4294967295
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43da      	mvns	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	401a      	ands	r2, r3
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800501c:	f04f 31ff 	mov.w	r1, #4294967295
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	43d9      	mvns	r1, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800502c:	4313      	orrs	r3, r2
         );
}
 800502e:	4618      	mov	r0, r3
 8005030:	3724      	adds	r7, #36	; 0x24
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3b01      	subs	r3, #1
 8005048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800504c:	d301      	bcc.n	8005052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800504e:	2301      	movs	r3, #1
 8005050:	e00f      	b.n	8005072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005052:	4a0a      	ldr	r2, [pc, #40]	; (800507c <SysTick_Config+0x40>)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800505a:	210f      	movs	r1, #15
 800505c:	f04f 30ff 	mov.w	r0, #4294967295
 8005060:	f7ff ff8e 	bl	8004f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <SysTick_Config+0x40>)
 8005066:	2200      	movs	r2, #0
 8005068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <SysTick_Config+0x40>)
 800506c:	2207      	movs	r2, #7
 800506e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	e000e010 	.word	0xe000e010

08005080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff29 	bl	8004ee0 <__NVIC_SetPriorityGrouping>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b086      	sub	sp, #24
 800509a:	af00      	add	r7, sp, #0
 800509c:	4603      	mov	r3, r0
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050a4:	f7ff ff40 	bl	8004f28 <__NVIC_GetPriorityGrouping>
 80050a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff90 	bl	8004fd4 <NVIC_EncodePriority>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff5f 	bl	8004f80 <__NVIC_SetPriority>
}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	4603      	mov	r3, r0
 80050d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff33 	bl	8004f44 <__NVIC_EnableIRQ>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff ffa4 	bl	800503c <SysTick_Config>
 80050f4:	4603      	mov	r3, r0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7fe f848 	bl	800319c <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e314      	b.n	8005742 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a66      	ldr	r2, [pc, #408]	; (80052b8 <HAL_DMA_Init+0x1b8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d04a      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a65      	ldr	r2, [pc, #404]	; (80052bc <HAL_DMA_Init+0x1bc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d045      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a63      	ldr	r2, [pc, #396]	; (80052c0 <HAL_DMA_Init+0x1c0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d040      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a62      	ldr	r2, [pc, #392]	; (80052c4 <HAL_DMA_Init+0x1c4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d03b      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a60      	ldr	r2, [pc, #384]	; (80052c8 <HAL_DMA_Init+0x1c8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d036      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5f      	ldr	r2, [pc, #380]	; (80052cc <HAL_DMA_Init+0x1cc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d031      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a5d      	ldr	r2, [pc, #372]	; (80052d0 <HAL_DMA_Init+0x1d0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02c      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a5c      	ldr	r2, [pc, #368]	; (80052d4 <HAL_DMA_Init+0x1d4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d027      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5a      	ldr	r2, [pc, #360]	; (80052d8 <HAL_DMA_Init+0x1d8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d022      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a59      	ldr	r2, [pc, #356]	; (80052dc <HAL_DMA_Init+0x1dc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d01d      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a57      	ldr	r2, [pc, #348]	; (80052e0 <HAL_DMA_Init+0x1e0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d018      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a56      	ldr	r2, [pc, #344]	; (80052e4 <HAL_DMA_Init+0x1e4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a54      	ldr	r2, [pc, #336]	; (80052e8 <HAL_DMA_Init+0x1e8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00e      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_DMA_Init+0x1ec>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d009      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a51      	ldr	r2, [pc, #324]	; (80052f0 <HAL_DMA_Init+0x1f0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d004      	beq.n	80051b8 <HAL_DMA_Init+0xb8>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a50      	ldr	r2, [pc, #320]	; (80052f4 <HAL_DMA_Init+0x1f4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d101      	bne.n	80051bc <HAL_DMA_Init+0xbc>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <HAL_DMA_Init+0xbe>
 80051bc:	2300      	movs	r3, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 813c 	beq.w	800543c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a37      	ldr	r2, [pc, #220]	; (80052b8 <HAL_DMA_Init+0x1b8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d04a      	beq.n	8005274 <HAL_DMA_Init+0x174>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a36      	ldr	r2, [pc, #216]	; (80052bc <HAL_DMA_Init+0x1bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d045      	beq.n	8005274 <HAL_DMA_Init+0x174>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a34      	ldr	r2, [pc, #208]	; (80052c0 <HAL_DMA_Init+0x1c0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d040      	beq.n	8005274 <HAL_DMA_Init+0x174>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a33      	ldr	r2, [pc, #204]	; (80052c4 <HAL_DMA_Init+0x1c4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d03b      	beq.n	8005274 <HAL_DMA_Init+0x174>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <HAL_DMA_Init+0x1c8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d036      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a30      	ldr	r2, [pc, #192]	; (80052cc <HAL_DMA_Init+0x1cc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d031      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2e      	ldr	r2, [pc, #184]	; (80052d0 <HAL_DMA_Init+0x1d0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d02c      	beq.n	8005274 <HAL_DMA_Init+0x174>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <HAL_DMA_Init+0x1d4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d027      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <HAL_DMA_Init+0x1d8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d022      	beq.n	8005274 <HAL_DMA_Init+0x174>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <HAL_DMA_Init+0x1dc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d01d      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a28      	ldr	r2, [pc, #160]	; (80052e0 <HAL_DMA_Init+0x1e0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d018      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <HAL_DMA_Init+0x1e4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <HAL_DMA_Init+0x174>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_DMA_Init+0x1e8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a24      	ldr	r2, [pc, #144]	; (80052ec <HAL_DMA_Init+0x1ec>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_DMA_Init+0x174>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_DMA_Init+0x1f0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_DMA_Init+0x174>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_DMA_Init+0x1f4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d108      	bne.n	8005286 <HAL_DMA_Init+0x186>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e007      	b.n	8005296 <HAL_DMA_Init+0x196>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005296:	e02f      	b.n	80052f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005298:	f7fd ff80 	bl	800319c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d928      	bls.n	80052f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e244      	b.n	8005742 <HAL_DMA_Init+0x642>
 80052b8:	40020010 	.word	0x40020010
 80052bc:	40020028 	.word	0x40020028
 80052c0:	40020040 	.word	0x40020040
 80052c4:	40020058 	.word	0x40020058
 80052c8:	40020070 	.word	0x40020070
 80052cc:	40020088 	.word	0x40020088
 80052d0:	400200a0 	.word	0x400200a0
 80052d4:	400200b8 	.word	0x400200b8
 80052d8:	40020410 	.word	0x40020410
 80052dc:	40020428 	.word	0x40020428
 80052e0:	40020440 	.word	0x40020440
 80052e4:	40020458 	.word	0x40020458
 80052e8:	40020470 	.word	0x40020470
 80052ec:	40020488 	.word	0x40020488
 80052f0:	400204a0 	.word	0x400204a0
 80052f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1c8      	bne.n	8005298 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4b84      	ldr	r3, [pc, #528]	; (8005524 <HAL_DMA_Init+0x424>)
 8005312:	4013      	ands	r3, r2
 8005314:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800531e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005336:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b04      	cmp	r3, #4
 800534a:	d107      	bne.n	800535c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	4313      	orrs	r3, r2
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b28      	cmp	r3, #40	; 0x28
 8005362:	d903      	bls.n	800536c <HAL_DMA_Init+0x26c>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b2e      	cmp	r3, #46	; 0x2e
 800536a:	d91f      	bls.n	80053ac <HAL_DMA_Init+0x2ac>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b3e      	cmp	r3, #62	; 0x3e
 8005372:	d903      	bls.n	800537c <HAL_DMA_Init+0x27c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b42      	cmp	r3, #66	; 0x42
 800537a:	d917      	bls.n	80053ac <HAL_DMA_Init+0x2ac>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b46      	cmp	r3, #70	; 0x46
 8005382:	d903      	bls.n	800538c <HAL_DMA_Init+0x28c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b48      	cmp	r3, #72	; 0x48
 800538a:	d90f      	bls.n	80053ac <HAL_DMA_Init+0x2ac>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b4e      	cmp	r3, #78	; 0x4e
 8005392:	d903      	bls.n	800539c <HAL_DMA_Init+0x29c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b52      	cmp	r3, #82	; 0x52
 800539a:	d907      	bls.n	80053ac <HAL_DMA_Init+0x2ac>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b73      	cmp	r3, #115	; 0x73
 80053a2:	d905      	bls.n	80053b0 <HAL_DMA_Init+0x2b0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b77      	cmp	r3, #119	; 0x77
 80053aa:	d801      	bhi.n	80053b0 <HAL_DMA_Init+0x2b0>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <HAL_DMA_Init+0x2b2>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053bc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f023 0307 	bic.w	r3, r3, #7
 80053d4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d117      	bne.n	8005418 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00e      	beq.n	8005418 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 f9b6 	bl	800676c <DMA_CheckFifoParam>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d008      	beq.n	8005418 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e194      	b.n	8005742 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f8f1 	bl	8006608 <DMA_CalcBaseAndBitshift>
 8005426:	4603      	mov	r3, r0
 8005428:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	223f      	movs	r2, #63	; 0x3f
 8005434:	409a      	lsls	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	e0ca      	b.n	80055d2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a39      	ldr	r2, [pc, #228]	; (8005528 <HAL_DMA_Init+0x428>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Init+0x38c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a38      	ldr	r2, [pc, #224]	; (800552c <HAL_DMA_Init+0x42c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Init+0x38c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a36      	ldr	r2, [pc, #216]	; (8005530 <HAL_DMA_Init+0x430>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Init+0x38c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a35      	ldr	r2, [pc, #212]	; (8005534 <HAL_DMA_Init+0x434>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Init+0x38c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a33      	ldr	r2, [pc, #204]	; (8005538 <HAL_DMA_Init+0x438>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Init+0x38c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a32      	ldr	r2, [pc, #200]	; (800553c <HAL_DMA_Init+0x43c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Init+0x38c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a30      	ldr	r2, [pc, #192]	; (8005540 <HAL_DMA_Init+0x440>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Init+0x38c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <HAL_DMA_Init+0x444>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_DMA_Init+0x390>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <HAL_DMA_Init+0x392>
 8005490:	2300      	movs	r3, #0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8094 	beq.w	80055c0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_DMA_Init+0x428>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d021      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_DMA_Init+0x42c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d01c      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_DMA_Init+0x430>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d017      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_DMA_Init+0x434>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d012      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_DMA_Init+0x438>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00d      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_DMA_Init+0x43c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d008      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_DMA_Init+0x440>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <HAL_DMA_Init+0x3e6>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_DMA_Init+0x444>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_DMA_Init+0x448>)
 8005504:	4013      	ands	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d01d      	beq.n	800554c <HAL_DMA_Init+0x44c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d102      	bne.n	800551e <HAL_DMA_Init+0x41e>
 8005518:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800551c:	e017      	b.n	800554e <HAL_DMA_Init+0x44e>
 800551e:	2300      	movs	r3, #0
 8005520:	e015      	b.n	800554e <HAL_DMA_Init+0x44e>
 8005522:	bf00      	nop
 8005524:	fe10803f 	.word	0xfe10803f
 8005528:	58025408 	.word	0x58025408
 800552c:	5802541c 	.word	0x5802541c
 8005530:	58025430 	.word	0x58025430
 8005534:	58025444 	.word	0x58025444
 8005538:	58025458 	.word	0x58025458
 800553c:	5802546c 	.word	0x5802546c
 8005540:	58025480 	.word	0x58025480
 8005544:	58025494 	.word	0x58025494
 8005548:	fffe000f 	.word	0xfffe000f
 800554c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	68d2      	ldr	r2, [r2, #12]
 8005552:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005554:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800555c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800556c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800557c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	4b6e      	ldr	r3, [pc, #440]	; (800574c <HAL_DMA_Init+0x64c>)
 8005594:	4413      	add	r3, r2
 8005596:	4a6e      	ldr	r2, [pc, #440]	; (8005750 <HAL_DMA_Init+0x650>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	009a      	lsls	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 f82f 	bl	8006608 <DMA_CalcBaseAndBitshift>
 80055aa:	4603      	mov	r3, r0
 80055ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	2201      	movs	r2, #1
 80055b8:	409a      	lsls	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e008      	b.n	80055d2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2240      	movs	r2, #64	; 0x40
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0b7      	b.n	8005742 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5f      	ldr	r2, [pc, #380]	; (8005754 <HAL_DMA_Init+0x654>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d072      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a5d      	ldr	r2, [pc, #372]	; (8005758 <HAL_DMA_Init+0x658>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d06d      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a5c      	ldr	r2, [pc, #368]	; (800575c <HAL_DMA_Init+0x65c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d068      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a5a      	ldr	r2, [pc, #360]	; (8005760 <HAL_DMA_Init+0x660>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d063      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a59      	ldr	r2, [pc, #356]	; (8005764 <HAL_DMA_Init+0x664>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d05e      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a57      	ldr	r2, [pc, #348]	; (8005768 <HAL_DMA_Init+0x668>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d059      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a56      	ldr	r2, [pc, #344]	; (800576c <HAL_DMA_Init+0x66c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d054      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a54      	ldr	r2, [pc, #336]	; (8005770 <HAL_DMA_Init+0x670>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04f      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a53      	ldr	r2, [pc, #332]	; (8005774 <HAL_DMA_Init+0x674>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d04a      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_DMA_Init+0x678>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d045      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_DMA_Init+0x67c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d040      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4e      	ldr	r2, [pc, #312]	; (8005780 <HAL_DMA_Init+0x680>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d03b      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a4d      	ldr	r2, [pc, #308]	; (8005784 <HAL_DMA_Init+0x684>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d036      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <HAL_DMA_Init+0x688>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d031      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a4a      	ldr	r2, [pc, #296]	; (800578c <HAL_DMA_Init+0x68c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d02c      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_DMA_Init+0x690>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d027      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a47      	ldr	r2, [pc, #284]	; (8005794 <HAL_DMA_Init+0x694>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d022      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a45      	ldr	r2, [pc, #276]	; (8005798 <HAL_DMA_Init+0x698>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01d      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a44      	ldr	r2, [pc, #272]	; (800579c <HAL_DMA_Init+0x69c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d018      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <HAL_DMA_Init+0x6a0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d013      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a41      	ldr	r2, [pc, #260]	; (80057a4 <HAL_DMA_Init+0x6a4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00e      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3f      	ldr	r2, [pc, #252]	; (80057a8 <HAL_DMA_Init+0x6a8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d009      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3e      	ldr	r2, [pc, #248]	; (80057ac <HAL_DMA_Init+0x6ac>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d004      	beq.n	80056c2 <HAL_DMA_Init+0x5c2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3c      	ldr	r2, [pc, #240]	; (80057b0 <HAL_DMA_Init+0x6b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <HAL_DMA_Init+0x5c6>
 80056c2:	2301      	movs	r3, #1
 80056c4:	e000      	b.n	80056c8 <HAL_DMA_Init+0x5c8>
 80056c6:	2300      	movs	r3, #0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d032      	beq.n	8005732 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 f8c9 	bl	8006864 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d102      	bne.n	80056e0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d010      	beq.n	8005720 <HAL_DMA_Init+0x620>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d80c      	bhi.n	8005720 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 f946 	bl	8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e008      	b.n	8005732 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	a7fdabf8 	.word	0xa7fdabf8
 8005750:	cccccccd 	.word	0xcccccccd
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8
 8005794:	58025408 	.word	0x58025408
 8005798:	5802541c 	.word	0x5802541c
 800579c:	58025430 	.word	0x58025430
 80057a0:	58025444 	.word	0x58025444
 80057a4:	58025458 	.word	0x58025458
 80057a8:	5802546c 	.word	0x5802546c
 80057ac:	58025480 	.word	0x58025480
 80057b0:	58025494 	.word	0x58025494

080057b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	; 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057c0:	4b67      	ldr	r3, [pc, #412]	; (8005960 <HAL_DMA_IRQHandler+0x1ac>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a67      	ldr	r2, [pc, #412]	; (8005964 <HAL_DMA_IRQHandler+0x1b0>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	0a9b      	lsrs	r3, r3, #10
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <HAL_DMA_IRQHandler+0x1b4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d04a      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <HAL_DMA_IRQHandler+0x1b8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d045      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_DMA_IRQHandler+0x1bc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d040      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <HAL_DMA_IRQHandler+0x1c0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d03b      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a59      	ldr	r2, [pc, #356]	; (8005978 <HAL_DMA_IRQHandler+0x1c4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d036      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a57      	ldr	r2, [pc, #348]	; (800597c <HAL_DMA_IRQHandler+0x1c8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d031      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a56      	ldr	r2, [pc, #344]	; (8005980 <HAL_DMA_IRQHandler+0x1cc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d02c      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a54      	ldr	r2, [pc, #336]	; (8005984 <HAL_DMA_IRQHandler+0x1d0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d027      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a53      	ldr	r2, [pc, #332]	; (8005988 <HAL_DMA_IRQHandler+0x1d4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d022      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a51      	ldr	r2, [pc, #324]	; (800598c <HAL_DMA_IRQHandler+0x1d8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d01d      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a50      	ldr	r2, [pc, #320]	; (8005990 <HAL_DMA_IRQHandler+0x1dc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d018      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <HAL_DMA_IRQHandler+0x1e0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4d      	ldr	r2, [pc, #308]	; (8005998 <HAL_DMA_IRQHandler+0x1e4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00e      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4b      	ldr	r2, [pc, #300]	; (800599c <HAL_DMA_IRQHandler+0x1e8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <HAL_DMA_IRQHandler+0x1ec>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_DMA_IRQHandler+0xd2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a48      	ldr	r2, [pc, #288]	; (80059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_DMA_IRQHandler+0xd6>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_DMA_IRQHandler+0xd8>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 842b 	beq.w	80060e8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005896:	f003 031f 	and.w	r3, r3, #31
 800589a:	2208      	movs	r2, #8
 800589c:	409a      	lsls	r2, r3
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80a2 	beq.w	80059ec <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <HAL_DMA_IRQHandler+0x1b4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04a      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2d      	ldr	r2, [pc, #180]	; (800596c <HAL_DMA_IRQHandler+0x1b8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d045      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2b      	ldr	r2, [pc, #172]	; (8005970 <HAL_DMA_IRQHandler+0x1bc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d040      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	; (8005974 <HAL_DMA_IRQHandler+0x1c0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d03b      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a28      	ldr	r2, [pc, #160]	; (8005978 <HAL_DMA_IRQHandler+0x1c4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d036      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a27      	ldr	r2, [pc, #156]	; (800597c <HAL_DMA_IRQHandler+0x1c8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d031      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a25      	ldr	r2, [pc, #148]	; (8005980 <HAL_DMA_IRQHandler+0x1cc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02c      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a24      	ldr	r2, [pc, #144]	; (8005984 <HAL_DMA_IRQHandler+0x1d0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a22      	ldr	r2, [pc, #136]	; (8005988 <HAL_DMA_IRQHandler+0x1d4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a21      	ldr	r2, [pc, #132]	; (800598c <HAL_DMA_IRQHandler+0x1d8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_DMA_IRQHandler+0x1dc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1e      	ldr	r2, [pc, #120]	; (8005994 <HAL_DMA_IRQHandler+0x1e0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_DMA_IRQHandler+0x1e4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_DMA_IRQHandler+0x1e8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <HAL_DMA_IRQHandler+0x1ec>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_DMA_IRQHandler+0x194>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <HAL_DMA_IRQHandler+0x1f0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d12f      	bne.n	80059a8 <HAL_DMA_IRQHandler+0x1f4>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e02e      	b.n	80059bc <HAL_DMA_IRQHandler+0x208>
 800595e:	bf00      	nop
 8005960:	24000000 	.word	0x24000000
 8005964:	1b4e81b5 	.word	0x1b4e81b5
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d015      	beq.n	80059ec <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0204 	bic.w	r2, r2, #4
 80059ce:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2208      	movs	r2, #8
 80059da:	409a      	lsls	r2, r3
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	f043 0201 	orr.w	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	fa22 f303 	lsr.w	r3, r2, r3
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d06e      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a69      	ldr	r2, [pc, #420]	; (8005bac <HAL_DMA_IRQHandler+0x3f8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a67      	ldr	r2, [pc, #412]	; (8005bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a66      	ldr	r2, [pc, #408]	; (8005bb4 <HAL_DMA_IRQHandler+0x400>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a64      	ldr	r2, [pc, #400]	; (8005bb8 <HAL_DMA_IRQHandler+0x404>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a63      	ldr	r2, [pc, #396]	; (8005bbc <HAL_DMA_IRQHandler+0x408>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a61      	ldr	r2, [pc, #388]	; (8005bc0 <HAL_DMA_IRQHandler+0x40c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a60      	ldr	r2, [pc, #384]	; (8005bc4 <HAL_DMA_IRQHandler+0x410>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5e      	ldr	r2, [pc, #376]	; (8005bc8 <HAL_DMA_IRQHandler+0x414>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5d      	ldr	r2, [pc, #372]	; (8005bcc <HAL_DMA_IRQHandler+0x418>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a5b      	ldr	r2, [pc, #364]	; (8005bd0 <HAL_DMA_IRQHandler+0x41c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5a      	ldr	r2, [pc, #360]	; (8005bd4 <HAL_DMA_IRQHandler+0x420>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_DMA_IRQHandler+0x424>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a57      	ldr	r2, [pc, #348]	; (8005bdc <HAL_DMA_IRQHandler+0x428>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a55      	ldr	r2, [pc, #340]	; (8005be0 <HAL_DMA_IRQHandler+0x42c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a54      	ldr	r2, [pc, #336]	; (8005be4 <HAL_DMA_IRQHandler+0x430>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2ee>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a52      	ldr	r2, [pc, #328]	; (8005be8 <HAL_DMA_IRQHandler+0x434>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_DMA_IRQHandler+0x304>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bf14      	ite	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	2300      	moveq	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e003      	b.n	8005ac0 <HAL_DMA_IRQHandler+0x30c>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00d      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	2201      	movs	r2, #1
 8005ace:	409a      	lsls	r2, r3
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad8:	f043 0202 	orr.w	r2, r3, #2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2204      	movs	r2, #4
 8005aea:	409a      	lsls	r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 808f 	beq.w	8005c14 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a2c      	ldr	r2, [pc, #176]	; (8005bac <HAL_DMA_IRQHandler+0x3f8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04a      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2a      	ldr	r2, [pc, #168]	; (8005bb0 <HAL_DMA_IRQHandler+0x3fc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d045      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a29      	ldr	r2, [pc, #164]	; (8005bb4 <HAL_DMA_IRQHandler+0x400>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d040      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <HAL_DMA_IRQHandler+0x404>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d03b      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <HAL_DMA_IRQHandler+0x408>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d036      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_DMA_IRQHandler+0x40c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a23      	ldr	r2, [pc, #140]	; (8005bc4 <HAL_DMA_IRQHandler+0x410>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a21      	ldr	r2, [pc, #132]	; (8005bc8 <HAL_DMA_IRQHandler+0x414>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d027      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a20      	ldr	r2, [pc, #128]	; (8005bcc <HAL_DMA_IRQHandler+0x418>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_DMA_IRQHandler+0x41c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <HAL_DMA_IRQHandler+0x420>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <HAL_DMA_IRQHandler+0x424>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1a      	ldr	r2, [pc, #104]	; (8005bdc <HAL_DMA_IRQHandler+0x428>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_DMA_IRQHandler+0x42c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_DMA_IRQHandler+0x430>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_DMA_IRQHandler+0x3e2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a15      	ldr	r2, [pc, #84]	; (8005be8 <HAL_DMA_IRQHandler+0x434>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12a      	bne.n	8005bec <HAL_DMA_IRQHandler+0x438>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf14      	ite	ne
 8005ba4:	2301      	movne	r3, #1
 8005ba6:	2300      	moveq	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e023      	b.n	8005bf4 <HAL_DMA_IRQHandler+0x440>
 8005bac:	40020010 	.word	0x40020010
 8005bb0:	40020028 	.word	0x40020028
 8005bb4:	40020040 	.word	0x40020040
 8005bb8:	40020058 	.word	0x40020058
 8005bbc:	40020070 	.word	0x40020070
 8005bc0:	40020088 	.word	0x40020088
 8005bc4:	400200a0 	.word	0x400200a0
 8005bc8:	400200b8 	.word	0x400200b8
 8005bcc:	40020410 	.word	0x40020410
 8005bd0:	40020428 	.word	0x40020428
 8005bd4:	40020440 	.word	0x40020440
 8005bd8:	40020458 	.word	0x40020458
 8005bdc:	40020470 	.word	0x40020470
 8005be0:	40020488 	.word	0x40020488
 8005be4:	400204a0 	.word	0x400204a0
 8005be8:	400204b8 	.word	0x400204b8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00d      	beq.n	8005c14 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2204      	movs	r2, #4
 8005c02:	409a      	lsls	r2, r3
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 80a6 	beq.w	8005d76 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a85      	ldr	r2, [pc, #532]	; (8005e44 <HAL_DMA_IRQHandler+0x690>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d04a      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a83      	ldr	r2, [pc, #524]	; (8005e48 <HAL_DMA_IRQHandler+0x694>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d045      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a82      	ldr	r2, [pc, #520]	; (8005e4c <HAL_DMA_IRQHandler+0x698>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d040      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a80      	ldr	r2, [pc, #512]	; (8005e50 <HAL_DMA_IRQHandler+0x69c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d03b      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a7f      	ldr	r2, [pc, #508]	; (8005e54 <HAL_DMA_IRQHandler+0x6a0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d036      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a7d      	ldr	r2, [pc, #500]	; (8005e58 <HAL_DMA_IRQHandler+0x6a4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d031      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a7c      	ldr	r2, [pc, #496]	; (8005e5c <HAL_DMA_IRQHandler+0x6a8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d02c      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a7a      	ldr	r2, [pc, #488]	; (8005e60 <HAL_DMA_IRQHandler+0x6ac>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d027      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a79      	ldr	r2, [pc, #484]	; (8005e64 <HAL_DMA_IRQHandler+0x6b0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d022      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a77      	ldr	r2, [pc, #476]	; (8005e68 <HAL_DMA_IRQHandler+0x6b4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01d      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a76      	ldr	r2, [pc, #472]	; (8005e6c <HAL_DMA_IRQHandler+0x6b8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a74      	ldr	r2, [pc, #464]	; (8005e70 <HAL_DMA_IRQHandler+0x6bc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a73      	ldr	r2, [pc, #460]	; (8005e74 <HAL_DMA_IRQHandler+0x6c0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00e      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a71      	ldr	r2, [pc, #452]	; (8005e78 <HAL_DMA_IRQHandler+0x6c4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a70      	ldr	r2, [pc, #448]	; (8005e7c <HAL_DMA_IRQHandler+0x6c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_DMA_IRQHandler+0x516>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a6e      	ldr	r2, [pc, #440]	; (8005e80 <HAL_DMA_IRQHandler+0x6cc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x52c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e009      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x540>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d03e      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2210      	movs	r2, #16
 8005d02:	409a      	lsls	r2, r3
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d108      	bne.n	8005d36 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d024      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	e01f      	b.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01b      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	e016      	b.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0208 	bic.w	r2, r2, #8
 8005d64:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2220      	movs	r2, #32
 8005d80:	409a      	lsls	r2, r3
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8110 	beq.w	8005fac <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2c      	ldr	r2, [pc, #176]	; (8005e44 <HAL_DMA_IRQHandler+0x690>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2b      	ldr	r2, [pc, #172]	; (8005e48 <HAL_DMA_IRQHandler+0x694>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a29      	ldr	r2, [pc, #164]	; (8005e4c <HAL_DMA_IRQHandler+0x698>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a28      	ldr	r2, [pc, #160]	; (8005e50 <HAL_DMA_IRQHandler+0x69c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a26      	ldr	r2, [pc, #152]	; (8005e54 <HAL_DMA_IRQHandler+0x6a0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a25      	ldr	r2, [pc, #148]	; (8005e58 <HAL_DMA_IRQHandler+0x6a4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a23      	ldr	r2, [pc, #140]	; (8005e5c <HAL_DMA_IRQHandler+0x6a8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a22      	ldr	r2, [pc, #136]	; (8005e60 <HAL_DMA_IRQHandler+0x6ac>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <HAL_DMA_IRQHandler+0x6b0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <HAL_DMA_IRQHandler+0x6b4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	; (8005e6c <HAL_DMA_IRQHandler+0x6b8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a1c      	ldr	r2, [pc, #112]	; (8005e70 <HAL_DMA_IRQHandler+0x6bc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <HAL_DMA_IRQHandler+0x6c0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <HAL_DMA_IRQHandler+0x6c4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <HAL_DMA_IRQHandler+0x6c8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_IRQHandler+0x678>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a16      	ldr	r2, [pc, #88]	; (8005e80 <HAL_DMA_IRQHandler+0x6cc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d12b      	bne.n	8005e84 <HAL_DMA_IRQHandler+0x6d0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bf14      	ite	ne
 8005e3a:	2301      	movne	r3, #1
 8005e3c:	2300      	moveq	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	e02a      	b.n	8005e98 <HAL_DMA_IRQHandler+0x6e4>
 8005e42:	bf00      	nop
 8005e44:	40020010 	.word	0x40020010
 8005e48:	40020028 	.word	0x40020028
 8005e4c:	40020040 	.word	0x40020040
 8005e50:	40020058 	.word	0x40020058
 8005e54:	40020070 	.word	0x40020070
 8005e58:	40020088 	.word	0x40020088
 8005e5c:	400200a0 	.word	0x400200a0
 8005e60:	400200b8 	.word	0x400200b8
 8005e64:	40020410 	.word	0x40020410
 8005e68:	40020428 	.word	0x40020428
 8005e6c:	40020440 	.word	0x40020440
 8005e70:	40020458 	.word	0x40020458
 8005e74:	40020470 	.word	0x40020470
 8005e78:	40020488 	.word	0x40020488
 8005e7c:	400204a0 	.word	0x400204a0
 8005e80:	400204b8 	.word	0x400204b8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf14      	ite	ne
 8005e92:	2301      	movne	r3, #1
 8005e94:	2300      	moveq	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8087 	beq.w	8005fac <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	409a      	lsls	r2, r3
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d139      	bne.n	8005f2e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0216 	bic.w	r2, r2, #22
 8005ec8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ed8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <HAL_DMA_IRQHandler+0x736>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d007      	beq.n	8005efa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0208 	bic.w	r2, r2, #8
 8005ef8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efe:	f003 031f 	and.w	r3, r3, #31
 8005f02:	223f      	movs	r2, #63	; 0x3f
 8005f04:	409a      	lsls	r2, r3
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 834a 	beq.w	80065b8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
          }
          return;
 8005f2c:	e344      	b.n	80065b8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d018      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d108      	bne.n	8005f5c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d02c      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
 8005f5a:	e027      	b.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d023      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	4798      	blx	r3
 8005f6c:	e01e      	b.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10f      	bne.n	8005f9c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0210 	bic.w	r2, r2, #16
 8005f8a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8306 	beq.w	80065c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8088 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a7a      	ldr	r2, [pc, #488]	; (80061bc <HAL_DMA_IRQHandler+0xa08>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d04a      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a79      	ldr	r2, [pc, #484]	; (80061c0 <HAL_DMA_IRQHandler+0xa0c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d045      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a77      	ldr	r2, [pc, #476]	; (80061c4 <HAL_DMA_IRQHandler+0xa10>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d040      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a76      	ldr	r2, [pc, #472]	; (80061c8 <HAL_DMA_IRQHandler+0xa14>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d03b      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a74      	ldr	r2, [pc, #464]	; (80061cc <HAL_DMA_IRQHandler+0xa18>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d036      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a73      	ldr	r2, [pc, #460]	; (80061d0 <HAL_DMA_IRQHandler+0xa1c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d031      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a71      	ldr	r2, [pc, #452]	; (80061d4 <HAL_DMA_IRQHandler+0xa20>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d02c      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a70      	ldr	r2, [pc, #448]	; (80061d8 <HAL_DMA_IRQHandler+0xa24>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d027      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6e      	ldr	r2, [pc, #440]	; (80061dc <HAL_DMA_IRQHandler+0xa28>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6d      	ldr	r2, [pc, #436]	; (80061e0 <HAL_DMA_IRQHandler+0xa2c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d01d      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a6b      	ldr	r2, [pc, #428]	; (80061e4 <HAL_DMA_IRQHandler+0xa30>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a6a      	ldr	r2, [pc, #424]	; (80061e8 <HAL_DMA_IRQHandler+0xa34>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a68      	ldr	r2, [pc, #416]	; (80061ec <HAL_DMA_IRQHandler+0xa38>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a67      	ldr	r2, [pc, #412]	; (80061f0 <HAL_DMA_IRQHandler+0xa3c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a65      	ldr	r2, [pc, #404]	; (80061f4 <HAL_DMA_IRQHandler+0xa40>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_DMA_IRQHandler+0x8b8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a64      	ldr	r2, [pc, #400]	; (80061f8 <HAL_DMA_IRQHandler+0xa44>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d108      	bne.n	800607e <HAL_DMA_IRQHandler+0x8ca>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e007      	b.n	800608e <HAL_DMA_IRQHandler+0x8da>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0201 	bic.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3301      	adds	r3, #1
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	429a      	cmp	r2, r3
 8006098:	d307      	bcc.n	80060aa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f2      	bne.n	800608e <HAL_DMA_IRQHandler+0x8da>
 80060a8:	e000      	b.n	80060ac <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060aa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2203      	movs	r2, #3
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80060c2:	e003      	b.n	80060cc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8272 	beq.w	80065c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
 80060e6:	e26c      	b.n	80065c2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a43      	ldr	r2, [pc, #268]	; (80061fc <HAL_DMA_IRQHandler+0xa48>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d022      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a42      	ldr	r2, [pc, #264]	; (8006200 <HAL_DMA_IRQHandler+0xa4c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d01d      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a40      	ldr	r2, [pc, #256]	; (8006204 <HAL_DMA_IRQHandler+0xa50>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	; (8006208 <HAL_DMA_IRQHandler+0xa54>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3d      	ldr	r2, [pc, #244]	; (800620c <HAL_DMA_IRQHandler+0xa58>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a3c      	ldr	r2, [pc, #240]	; (8006210 <HAL_DMA_IRQHandler+0xa5c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_DMA_IRQHandler+0xa60>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_DMA_IRQHandler+0x984>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a39      	ldr	r2, [pc, #228]	; (8006218 <HAL_DMA_IRQHandler+0xa64>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d101      	bne.n	800613c <HAL_DMA_IRQHandler+0x988>
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <HAL_DMA_IRQHandler+0x98a>
 800613c:	2300      	movs	r3, #0
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 823f 	beq.w	80065c2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006150:	f003 031f 	and.w	r3, r3, #31
 8006154:	2204      	movs	r2, #4
 8006156:	409a      	lsls	r2, r3
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80cd 	beq.w	80062fc <HAL_DMA_IRQHandler+0xb48>
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80c7 	beq.w	80062fc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2204      	movs	r2, #4
 8006178:	409a      	lsls	r2, r3
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d049      	beq.n	800621c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8210 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a4:	e20a      	b.n	80065bc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 8206 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b8:	e200      	b.n	80065bc <HAL_DMA_IRQHandler+0xe08>
 80061ba:	bf00      	nop
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8
 80061fc:	58025408 	.word	0x58025408
 8006200:	5802541c 	.word	0x5802541c
 8006204:	58025430 	.word	0x58025430
 8006208:	58025444 	.word	0x58025444
 800620c:	58025458 	.word	0x58025458
 8006210:	5802546c 	.word	0x5802546c
 8006214:	58025480 	.word	0x58025480
 8006218:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d160      	bne.n	80062e8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7f      	ldr	r2, [pc, #508]	; (8006428 <HAL_DMA_IRQHandler+0xc74>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d04a      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a7d      	ldr	r2, [pc, #500]	; (800642c <HAL_DMA_IRQHandler+0xc78>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d045      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a7c      	ldr	r2, [pc, #496]	; (8006430 <HAL_DMA_IRQHandler+0xc7c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d040      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a7a      	ldr	r2, [pc, #488]	; (8006434 <HAL_DMA_IRQHandler+0xc80>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d03b      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a79      	ldr	r2, [pc, #484]	; (8006438 <HAL_DMA_IRQHandler+0xc84>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d036      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a77      	ldr	r2, [pc, #476]	; (800643c <HAL_DMA_IRQHandler+0xc88>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d031      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a76      	ldr	r2, [pc, #472]	; (8006440 <HAL_DMA_IRQHandler+0xc8c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d02c      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a74      	ldr	r2, [pc, #464]	; (8006444 <HAL_DMA_IRQHandler+0xc90>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d027      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a73      	ldr	r2, [pc, #460]	; (8006448 <HAL_DMA_IRQHandler+0xc94>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d022      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a71      	ldr	r2, [pc, #452]	; (800644c <HAL_DMA_IRQHandler+0xc98>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d01d      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a70      	ldr	r2, [pc, #448]	; (8006450 <HAL_DMA_IRQHandler+0xc9c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d018      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a6e      	ldr	r2, [pc, #440]	; (8006454 <HAL_DMA_IRQHandler+0xca0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a6d      	ldr	r2, [pc, #436]	; (8006458 <HAL_DMA_IRQHandler+0xca4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00e      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a6b      	ldr	r2, [pc, #428]	; (800645c <HAL_DMA_IRQHandler+0xca8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a6a      	ldr	r2, [pc, #424]	; (8006460 <HAL_DMA_IRQHandler+0xcac>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d004      	beq.n	80062c6 <HAL_DMA_IRQHandler+0xb12>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a68      	ldr	r2, [pc, #416]	; (8006464 <HAL_DMA_IRQHandler+0xcb0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d108      	bne.n	80062d8 <HAL_DMA_IRQHandler+0xb24>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0208 	bic.w	r2, r2, #8
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	e007      	b.n	80062e8 <HAL_DMA_IRQHandler+0xb34>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0204 	bic.w	r2, r2, #4
 80062e6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 8165 	beq.w	80065bc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062fa:	e15f      	b.n	80065bc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	f003 031f 	and.w	r3, r3, #31
 8006304:	2202      	movs	r2, #2
 8006306:	409a      	lsls	r2, r3
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80c5 	beq.w	800649c <HAL_DMA_IRQHandler+0xce8>
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80bf 	beq.w	800649c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2202      	movs	r2, #2
 8006328:	409a      	lsls	r2, r3
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d018      	beq.n	800636a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d109      	bne.n	8006356 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 813a 	beq.w	80065c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006354:	e134      	b.n	80065c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8130 	beq.w	80065c0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006368:	e12a      	b.n	80065c0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b00      	cmp	r3, #0
 8006372:	f040 8089 	bne.w	8006488 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2b      	ldr	r2, [pc, #172]	; (8006428 <HAL_DMA_IRQHandler+0xc74>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d04a      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <HAL_DMA_IRQHandler+0xc78>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d045      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a28      	ldr	r2, [pc, #160]	; (8006430 <HAL_DMA_IRQHandler+0xc7c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d040      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <HAL_DMA_IRQHandler+0xc80>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d03b      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a25      	ldr	r2, [pc, #148]	; (8006438 <HAL_DMA_IRQHandler+0xc84>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d036      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a23      	ldr	r2, [pc, #140]	; (800643c <HAL_DMA_IRQHandler+0xc88>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d031      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a22      	ldr	r2, [pc, #136]	; (8006440 <HAL_DMA_IRQHandler+0xc8c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d02c      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a20      	ldr	r2, [pc, #128]	; (8006444 <HAL_DMA_IRQHandler+0xc90>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d027      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <HAL_DMA_IRQHandler+0xc94>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d022      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1d      	ldr	r2, [pc, #116]	; (800644c <HAL_DMA_IRQHandler+0xc98>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d01d      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_DMA_IRQHandler+0xc9c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d018      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1a      	ldr	r2, [pc, #104]	; (8006454 <HAL_DMA_IRQHandler+0xca0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d013      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a19      	ldr	r2, [pc, #100]	; (8006458 <HAL_DMA_IRQHandler+0xca4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00e      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <HAL_DMA_IRQHandler+0xca8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a16      	ldr	r2, [pc, #88]	; (8006460 <HAL_DMA_IRQHandler+0xcac>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d004      	beq.n	8006416 <HAL_DMA_IRQHandler+0xc62>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a14      	ldr	r2, [pc, #80]	; (8006464 <HAL_DMA_IRQHandler+0xcb0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d128      	bne.n	8006468 <HAL_DMA_IRQHandler+0xcb4>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0214 	bic.w	r2, r2, #20
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	e027      	b.n	8006478 <HAL_DMA_IRQHandler+0xcc4>
 8006428:	40020010 	.word	0x40020010
 800642c:	40020028 	.word	0x40020028
 8006430:	40020040 	.word	0x40020040
 8006434:	40020058 	.word	0x40020058
 8006438:	40020070 	.word	0x40020070
 800643c:	40020088 	.word	0x40020088
 8006440:	400200a0 	.word	0x400200a0
 8006444:	400200b8 	.word	0x400200b8
 8006448:	40020410 	.word	0x40020410
 800644c:	40020428 	.word	0x40020428
 8006450:	40020440 	.word	0x40020440
 8006454:	40020458 	.word	0x40020458
 8006458:	40020470 	.word	0x40020470
 800645c:	40020488 	.word	0x40020488
 8006460:	400204a0 	.word	0x400204a0
 8006464:	400204b8 	.word	0x400204b8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f022 020a 	bic.w	r2, r2, #10
 8006476:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8097 	beq.w	80065c0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800649a:	e091      	b.n	80065c0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2208      	movs	r2, #8
 80064a6:	409a      	lsls	r2, r3
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8088 	beq.w	80065c2 <HAL_DMA_IRQHandler+0xe0e>
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f003 0308 	and.w	r3, r3, #8
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8082 	beq.w	80065c2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a41      	ldr	r2, [pc, #260]	; (80065c8 <HAL_DMA_IRQHandler+0xe14>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d04a      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3f      	ldr	r2, [pc, #252]	; (80065cc <HAL_DMA_IRQHandler+0xe18>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d045      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3e      	ldr	r2, [pc, #248]	; (80065d0 <HAL_DMA_IRQHandler+0xe1c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d040      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a3c      	ldr	r2, [pc, #240]	; (80065d4 <HAL_DMA_IRQHandler+0xe20>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d03b      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a3b      	ldr	r2, [pc, #236]	; (80065d8 <HAL_DMA_IRQHandler+0xe24>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d036      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a39      	ldr	r2, [pc, #228]	; (80065dc <HAL_DMA_IRQHandler+0xe28>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d031      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a38      	ldr	r2, [pc, #224]	; (80065e0 <HAL_DMA_IRQHandler+0xe2c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d02c      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a36      	ldr	r2, [pc, #216]	; (80065e4 <HAL_DMA_IRQHandler+0xe30>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d027      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a35      	ldr	r2, [pc, #212]	; (80065e8 <HAL_DMA_IRQHandler+0xe34>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a33      	ldr	r2, [pc, #204]	; (80065ec <HAL_DMA_IRQHandler+0xe38>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a32      	ldr	r2, [pc, #200]	; (80065f0 <HAL_DMA_IRQHandler+0xe3c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d018      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a30      	ldr	r2, [pc, #192]	; (80065f4 <HAL_DMA_IRQHandler+0xe40>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2f      	ldr	r2, [pc, #188]	; (80065f8 <HAL_DMA_IRQHandler+0xe44>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2d      	ldr	r2, [pc, #180]	; (80065fc <HAL_DMA_IRQHandler+0xe48>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2c      	ldr	r2, [pc, #176]	; (8006600 <HAL_DMA_IRQHandler+0xe4c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_DMA_IRQHandler+0xdaa>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2a      	ldr	r2, [pc, #168]	; (8006604 <HAL_DMA_IRQHandler+0xe50>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <HAL_DMA_IRQHandler+0xdbc>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 021c 	bic.w	r2, r2, #28
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	e007      	b.n	8006580 <HAL_DMA_IRQHandler+0xdcc>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 020e 	bic.w	r2, r2, #14
 800657e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2201      	movs	r2, #1
 800658a:	409a      	lsls	r2, r3
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
 80065b6:	e004      	b.n	80065c2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065b8:	bf00      	nop
 80065ba:	e002      	b.n	80065c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065c2:	3728      	adds	r7, #40	; 0x28
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40020010 	.word	0x40020010
 80065cc:	40020028 	.word	0x40020028
 80065d0:	40020040 	.word	0x40020040
 80065d4:	40020058 	.word	0x40020058
 80065d8:	40020070 	.word	0x40020070
 80065dc:	40020088 	.word	0x40020088
 80065e0:	400200a0 	.word	0x400200a0
 80065e4:	400200b8 	.word	0x400200b8
 80065e8:	40020410 	.word	0x40020410
 80065ec:	40020428 	.word	0x40020428
 80065f0:	40020440 	.word	0x40020440
 80065f4:	40020458 	.word	0x40020458
 80065f8:	40020470 	.word	0x40020470
 80065fc:	40020488 	.word	0x40020488
 8006600:	400204a0 	.word	0x400204a0
 8006604:	400204b8 	.word	0x400204b8

08006608 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a42      	ldr	r2, [pc, #264]	; (8006720 <DMA_CalcBaseAndBitshift+0x118>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d04a      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a41      	ldr	r2, [pc, #260]	; (8006724 <DMA_CalcBaseAndBitshift+0x11c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d045      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a3f      	ldr	r2, [pc, #252]	; (8006728 <DMA_CalcBaseAndBitshift+0x120>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d040      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a3e      	ldr	r2, [pc, #248]	; (800672c <DMA_CalcBaseAndBitshift+0x124>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d03b      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a3c      	ldr	r2, [pc, #240]	; (8006730 <DMA_CalcBaseAndBitshift+0x128>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d036      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a3b      	ldr	r2, [pc, #236]	; (8006734 <DMA_CalcBaseAndBitshift+0x12c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d031      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a39      	ldr	r2, [pc, #228]	; (8006738 <DMA_CalcBaseAndBitshift+0x130>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d02c      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a38      	ldr	r2, [pc, #224]	; (800673c <DMA_CalcBaseAndBitshift+0x134>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d027      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a36      	ldr	r2, [pc, #216]	; (8006740 <DMA_CalcBaseAndBitshift+0x138>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d022      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a35      	ldr	r2, [pc, #212]	; (8006744 <DMA_CalcBaseAndBitshift+0x13c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d01d      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a33      	ldr	r2, [pc, #204]	; (8006748 <DMA_CalcBaseAndBitshift+0x140>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d018      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a32      	ldr	r2, [pc, #200]	; (800674c <DMA_CalcBaseAndBitshift+0x144>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d013      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a30      	ldr	r2, [pc, #192]	; (8006750 <DMA_CalcBaseAndBitshift+0x148>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00e      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <DMA_CalcBaseAndBitshift+0x14c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d009      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <DMA_CalcBaseAndBitshift+0x150>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d004      	beq.n	80066b0 <DMA_CalcBaseAndBitshift+0xa8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2c      	ldr	r2, [pc, #176]	; (800675c <DMA_CalcBaseAndBitshift+0x154>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d101      	bne.n	80066b4 <DMA_CalcBaseAndBitshift+0xac>
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <DMA_CalcBaseAndBitshift+0xae>
 80066b4:	2300      	movs	r3, #0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d024      	beq.n	8006704 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	3b10      	subs	r3, #16
 80066c2:	4a27      	ldr	r2, [pc, #156]	; (8006760 <DMA_CalcBaseAndBitshift+0x158>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	4a24      	ldr	r2, [pc, #144]	; (8006764 <DMA_CalcBaseAndBitshift+0x15c>)
 80066d4:	5cd3      	ldrb	r3, [r2, r3]
 80066d6:	461a      	mov	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d908      	bls.n	80066f4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <DMA_CalcBaseAndBitshift+0x160>)
 80066ea:	4013      	ands	r3, r2
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	659a      	str	r2, [r3, #88]	; 0x58
 80066f2:	e00d      	b.n	8006710 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b1b      	ldr	r3, [pc, #108]	; (8006768 <DMA_CalcBaseAndBitshift+0x160>)
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6593      	str	r3, [r2, #88]	; 0x58
 8006702:	e005      	b.n	8006710 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	40020010 	.word	0x40020010
 8006724:	40020028 	.word	0x40020028
 8006728:	40020040 	.word	0x40020040
 800672c:	40020058 	.word	0x40020058
 8006730:	40020070 	.word	0x40020070
 8006734:	40020088 	.word	0x40020088
 8006738:	400200a0 	.word	0x400200a0
 800673c:	400200b8 	.word	0x400200b8
 8006740:	40020410 	.word	0x40020410
 8006744:	40020428 	.word	0x40020428
 8006748:	40020440 	.word	0x40020440
 800674c:	40020458 	.word	0x40020458
 8006750:	40020470 	.word	0x40020470
 8006754:	40020488 	.word	0x40020488
 8006758:	400204a0 	.word	0x400204a0
 800675c:	400204b8 	.word	0x400204b8
 8006760:	aaaaaaab 	.word	0xaaaaaaab
 8006764:	0801b2cc 	.word	0x0801b2cc
 8006768:	fffffc00 	.word	0xfffffc00

0800676c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d120      	bne.n	80067c2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	2b03      	cmp	r3, #3
 8006786:	d858      	bhi.n	800683a <DMA_CheckFifoParam+0xce>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <DMA_CheckFifoParam+0x24>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067b3 	.word	0x080067b3
 8006798:	080067a1 	.word	0x080067a1
 800679c:	0800683b 	.word	0x0800683b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d048      	beq.n	800683e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067b0:	e045      	b.n	800683e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067ba:	d142      	bne.n	8006842 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067c0:	e03f      	b.n	8006842 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	d123      	bne.n	8006814 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	d838      	bhi.n	8006846 <DMA_CheckFifoParam+0xda>
 80067d4:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <DMA_CheckFifoParam+0x70>)
 80067d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067da:	bf00      	nop
 80067dc:	080067ed 	.word	0x080067ed
 80067e0:	080067f3 	.word	0x080067f3
 80067e4:	080067ed 	.word	0x080067ed
 80067e8:	08006805 	.word	0x08006805
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
        break;
 80067f0:	e030      	b.n	8006854 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d025      	beq.n	800684a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006802:	e022      	b.n	800684a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800680c:	d11f      	bne.n	800684e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006812:	e01c      	b.n	800684e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	2b02      	cmp	r3, #2
 800681a:	d902      	bls.n	8006822 <DMA_CheckFifoParam+0xb6>
 800681c:	2b03      	cmp	r3, #3
 800681e:	d003      	beq.n	8006828 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006820:	e018      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
        break;
 8006826:	e015      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00e      	beq.n	8006852 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
    break;
 8006838:	e00b      	b.n	8006852 <DMA_CheckFifoParam+0xe6>
        break;
 800683a:	bf00      	nop
 800683c:	e00a      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        break;
 800683e:	bf00      	nop
 8006840:	e008      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        break;
 8006842:	bf00      	nop
 8006844:	e006      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        break;
 8006846:	bf00      	nop
 8006848:	e004      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        break;
 800684a:	bf00      	nop
 800684c:	e002      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
        break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <DMA_CheckFifoParam+0xe8>
    break;
 8006852:	bf00      	nop
    }
  }

  return status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop

08006864 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a38      	ldr	r2, [pc, #224]	; (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d022      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a36      	ldr	r2, [pc, #216]	; (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01d      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a35      	ldr	r2, [pc, #212]	; (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a33      	ldr	r2, [pc, #204]	; (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a32      	ldr	r2, [pc, #200]	; (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a30      	ldr	r2, [pc, #192]	; (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a2f      	ldr	r2, [pc, #188]	; (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01a      	beq.n	8006902 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	3b08      	subs	r3, #8
 80068d4:	4a28      	ldr	r2, [pc, #160]	; (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4b26      	ldr	r3, [pc, #152]	; (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068e2:	4413      	add	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a24      	ldr	r2, [pc, #144]	; (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068f0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	2201      	movs	r2, #1
 80068fa:	409a      	lsls	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006900:	e024      	b.n	800694c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	b2db      	uxtb	r3, r3
 8006908:	3b10      	subs	r3, #16
 800690a:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800690c:	fba2 2303 	umull	r2, r3, r2, r3
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d806      	bhi.n	800692a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a1b      	ldr	r2, [pc, #108]	; (800698c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d902      	bls.n	800692a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3308      	adds	r3, #8
 8006928:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4b18      	ldr	r3, [pc, #96]	; (8006990 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a16      	ldr	r2, [pc, #88]	; (8006994 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800693c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 031f 	and.w	r3, r3, #31
 8006944:	2201      	movs	r2, #1
 8006946:	409a      	lsls	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800694c:	bf00      	nop
 800694e:	3714      	adds	r7, #20
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	58025408 	.word	0x58025408
 800695c:	5802541c 	.word	0x5802541c
 8006960:	58025430 	.word	0x58025430
 8006964:	58025444 	.word	0x58025444
 8006968:	58025458 	.word	0x58025458
 800696c:	5802546c 	.word	0x5802546c
 8006970:	58025480 	.word	0x58025480
 8006974:	58025494 	.word	0x58025494
 8006978:	cccccccd 	.word	0xcccccccd
 800697c:	16009600 	.word	0x16009600
 8006980:	58025880 	.word	0x58025880
 8006984:	aaaaaaab 	.word	0xaaaaaaab
 8006988:	400204b8 	.word	0x400204b8
 800698c:	4002040f 	.word	0x4002040f
 8006990:	10008200 	.word	0x10008200
 8006994:	40020880 	.word	0x40020880

08006998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d04a      	beq.n	8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d847      	bhi.n	8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a25      	ldr	r2, [pc, #148]	; (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d022      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d01d      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a22      	ldr	r2, [pc, #136]	; (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d018      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a21      	ldr	r2, [pc, #132]	; (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00e      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d009      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1c      	ldr	r2, [pc, #112]	; (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d004      	beq.n	8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d101      	bne.n	8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	; (8006a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a20:	671a      	str	r2, [r3, #112]	; 0x70
 8006a22:	e009      	b.n	8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a11      	ldr	r2, [pc, #68]	; (8006a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	409a      	lsls	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	58025408 	.word	0x58025408
 8006a54:	5802541c 	.word	0x5802541c
 8006a58:	58025430 	.word	0x58025430
 8006a5c:	58025444 	.word	0x58025444
 8006a60:	58025458 	.word	0x58025458
 8006a64:	5802546c 	.word	0x5802546c
 8006a68:	58025480 	.word	0x58025480
 8006a6c:	58025494 	.word	0x58025494
 8006a70:	1600963f 	.word	0x1600963f
 8006a74:	58025940 	.word	0x58025940
 8006a78:	1000823f 	.word	0x1000823f
 8006a7c:	40020940 	.word	0x40020940

08006a80 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e0cf      	b.n	8006c32 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2223      	movs	r2, #35	; 0x23
 8006aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7fa f9df 	bl	8000e68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aaa:	4b64      	ldr	r3, [pc, #400]	; (8006c3c <HAL_ETH_Init+0x1bc>)
 8006aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ab0:	4a62      	ldr	r2, [pc, #392]	; (8006c3c <HAL_ETH_Init+0x1bc>)
 8006ab2:	f043 0302 	orr.w	r3, r3, #2
 8006ab6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006aba:	4b60      	ldr	r3, [pc, #384]	; (8006c3c <HAL_ETH_Init+0x1bc>)
 8006abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	60bb      	str	r3, [r7, #8]
 8006ac6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	7a1b      	ldrb	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f7fc fb6f 	bl	80031b4 <HAL_SYSCFG_ETHInterfaceSelect>
 8006ad6:	e003      	b.n	8006ae0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006ad8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006adc:	f7fc fb6a 	bl	80031b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006ae0:	4b57      	ldr	r3, [pc, #348]	; (8006c40 <HAL_ETH_Init+0x1c0>)
 8006ae2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006afc:	f7fc fb4e 	bl	800319c <HAL_GetTick>
 8006b00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006b02:	e011      	b.n	8006b28 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006b04:	f7fc fb4a 	bl	800319c <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006b12:	d909      	bls.n	8006b28 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2204      	movs	r2, #4
 8006b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	22e0      	movs	r2, #224	; 0xe0
 8006b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e084      	b.n	8006c32 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e4      	bne.n	8006b04 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f886 	bl	8006c4c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006b40:	f002 fa62 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 8006b44:	4603      	mov	r3, r0
 8006b46:	4a3f      	ldr	r2, [pc, #252]	; (8006c44 <HAL_ETH_Init+0x1c4>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	0c9a      	lsrs	r2, r3, #18
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3a01      	subs	r2, #1
 8006b54:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa71 	bl	8007040 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b66:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006b6a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b7a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d009      	beq.n	8006b9e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	22e0      	movs	r2, #224	; 0xe0
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e049      	b.n	8006c32 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ba6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006baa:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <HAL_ETH_Init+0x1c8>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6952      	ldr	r2, [r2, #20]
 8006bb2:	0051      	lsls	r1, r2, #1
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bbe:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fad9 	bl	800717a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fb1f 	bl	800720c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	3305      	adds	r3, #5
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	021a      	lsls	r2, r3, #8
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	4619      	mov	r1, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	3303      	adds	r3, #3
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	061a      	lsls	r2, r3, #24
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	041b      	lsls	r3, r3, #16
 8006c00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	3301      	adds	r3, #1
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006c0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006c1a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006c1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	58000400 	.word	0x58000400
 8006c44:	431bde83 	.word	0x431bde83
 8006c48:	ffff8001 	.word	0xffff8001

08006c4c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006c66:	f002 f9cf 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 8006c6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d908      	bls.n	8006c86 <HAL_ETH_SetMDIOClockRange+0x3a>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d804      	bhi.n	8006c86 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	e027      	b.n	8006cd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a18      	ldr	r2, [pc, #96]	; (8006cec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d908      	bls.n	8006ca0 <HAL_ETH_SetMDIOClockRange+0x54>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d204      	bcs.n	8006ca0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e01a      	b.n	8006cd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d303      	bcc.n	8006cb0 <HAL_ETH_SetMDIOClockRange+0x64>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4a12      	ldr	r2, [pc, #72]	; (8006cf4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d911      	bls.n	8006cd4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a10      	ldr	r2, [pc, #64]	; (8006cf4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d908      	bls.n	8006cca <HAL_ETH_SetMDIOClockRange+0x7e>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a0f      	ldr	r2, [pc, #60]	; (8006cf8 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d804      	bhi.n	8006cca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e005      	b.n	8006cd6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e000      	b.n	8006cd6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006cd4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	01312cff 	.word	0x01312cff
 8006cec:	02160ebf 	.word	0x02160ebf
 8006cf0:	03938700 	.word	0x03938700
 8006cf4:	05f5e0ff 	.word	0x05f5e0ff
 8006cf8:	08f0d17f 	.word	0x08f0d17f

08006cfc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006d0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	791b      	ldrb	r3, [r3, #4]
 8006d14:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006d16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	7b1b      	ldrb	r3, [r3, #12]
 8006d1c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006d1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	7b5b      	ldrb	r3, [r3, #13]
 8006d24:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006d26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	7b9b      	ldrb	r3, [r3, #14]
 8006d2c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	7bdb      	ldrb	r3, [r3, #15]
 8006d34:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	7c12      	ldrb	r2, [r2, #16]
 8006d3c:	2a00      	cmp	r2, #0
 8006d3e:	d102      	bne.n	8006d46 <ETH_SetMACConfig+0x4a>
 8006d40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d44:	e000      	b.n	8006d48 <ETH_SetMACConfig+0x4c>
 8006d46:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	7c52      	ldrb	r2, [r2, #17]
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d102      	bne.n	8006d58 <ETH_SetMACConfig+0x5c>
 8006d52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d56:	e000      	b.n	8006d5a <ETH_SetMACConfig+0x5e>
 8006d58:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	7c9b      	ldrb	r3, [r3, #18]
 8006d60:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d62:	431a      	orrs	r2, r3
               macconf->Speed |
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d68:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	7f1b      	ldrb	r3, [r3, #28]
 8006d74:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006d76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	7f5b      	ldrb	r3, [r3, #29]
 8006d7c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d7e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	7f92      	ldrb	r2, [r2, #30]
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d102      	bne.n	8006d8e <ETH_SetMACConfig+0x92>
 8006d88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d8c:	e000      	b.n	8006d90 <ETH_SetMACConfig+0x94>
 8006d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d90:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	7fdb      	ldrb	r3, [r3, #31]
 8006d96:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d102      	bne.n	8006daa <ETH_SetMACConfig+0xae>
 8006da4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006da8:	e000      	b.n	8006dac <ETH_SetMACConfig+0xb0>
 8006daa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006dac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006db2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006dbc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b56      	ldr	r3, [pc, #344]	; (8006f28 <ETH_SetMACConfig+0x22c>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6812      	ldr	r2, [r2, #0]
 8006dd4:	68f9      	ldr	r1, [r7, #12]
 8006dd6:	430b      	orrs	r3, r1
 8006dd8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dde:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006de6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006de8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006df0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006df2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dfa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006dfc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	d102      	bne.n	8006e0e <ETH_SetMACConfig+0x112>
 8006e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e0c:	e000      	b.n	8006e10 <ETH_SetMACConfig+0x114>
 8006e0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006e10:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	4b42      	ldr	r3, [pc, #264]	; (8006f2c <ETH_SetMACConfig+0x230>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	4b3a      	ldr	r3, [pc, #232]	; (8006f30 <ETH_SetMACConfig+0x234>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6812      	ldr	r2, [r2, #0]
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	d101      	bne.n	8006e6e <ETH_SetMACConfig+0x172>
 8006e6a:	2280      	movs	r2, #128	; 0x80
 8006e6c:	e000      	b.n	8006e70 <ETH_SetMACConfig+0x174>
 8006e6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006e70:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006e86:	4013      	ands	r3, r2
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	6812      	ldr	r2, [r2, #0]
 8006e8c:	68f9      	ldr	r1, [r7, #12]
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006ea0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eae:	f023 0103 	bic.w	r1, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006ec6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	d101      	bne.n	8006eea <ETH_SetMACConfig+0x1ee>
 8006ee6:	2240      	movs	r2, #64	; 0x40
 8006ee8:	e000      	b.n	8006eec <ETH_SetMACConfig+0x1f0>
 8006eea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006eec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ef4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006ef6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006efe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006f0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006f1c:	bf00      	nop
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	00048083 	.word	0x00048083
 8006f2c:	c0f88000 	.word	0xc0f88000
 8006f30:	fffffef0 	.word	0xfffffef0

08006f34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	4b38      	ldr	r3, [pc, #224]	; (800702c <ETH_SetDMAConfig+0xf8>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	6811      	ldr	r1, [r2, #0]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	430b      	orrs	r3, r1
 8006f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	791b      	ldrb	r3, [r3, #4]
 8006f60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	7b1b      	ldrb	r3, [r3, #12]
 8006f6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <ETH_SetDMAConfig+0xfc>)
 8006f7e:	4013      	ands	r3, r2
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	68f9      	ldr	r1, [r7, #12]
 8006f86:	430b      	orrs	r3, r1
 8006f88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	7b5b      	ldrb	r3, [r3, #13]
 8006f92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006fa8:	4b22      	ldr	r3, [pc, #136]	; (8007034 <ETH_SetDMAConfig+0x100>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	68f9      	ldr	r1, [r7, #12]
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fb8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	7d1b      	ldrb	r3, [r3, #20]
 8006fc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	7f5b      	ldrb	r3, [r3, #29]
 8006fcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fda:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006fde:	4b16      	ldr	r3, [pc, #88]	; (8007038 <ETH_SetDMAConfig+0x104>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	7f1b      	ldrb	r3, [r3, #28]
 8006ff6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007008:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800700c:	4b0b      	ldr	r3, [pc, #44]	; (800703c <ETH_SetDMAConfig+0x108>)
 800700e:	4013      	ands	r3, r2
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	68f9      	ldr	r1, [r7, #12]
 8007016:	430b      	orrs	r3, r1
 8007018:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800701c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	ffff87fd 	.word	0xffff87fd
 8007030:	ffff2ffe 	.word	0xffff2ffe
 8007034:	fffec000 	.word	0xfffec000
 8007038:	ffc0efef 	.word	0xffc0efef
 800703c:	7fc0ffff 	.word	0x7fc0ffff

08007040 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b0a4      	sub	sp, #144	; 0x90
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007048:	2301      	movs	r3, #1
 800704a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800704e:	2300      	movs	r3, #0
 8007050:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007052:	2300      	movs	r3, #0
 8007054:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007058:	2300      	movs	r3, #0
 800705a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800705e:	2301      	movs	r3, #1
 8007060:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007076:	2301      	movs	r3, #1
 8007078:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800707c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007080:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007082:	2300      	movs	r3, #0
 8007084:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007088:	2300      	movs	r3, #0
 800708a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800708c:	2300      	movs	r3, #0
 800708e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007092:	2300      	movs	r3, #0
 8007094:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007098:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800709c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80070a4:	2300      	movs	r3, #0
 80070a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80070ba:	2300      	movs	r3, #0
 80070bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80070be:	2300      	movs	r3, #0
 80070c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80070c2:	2300      	movs	r3, #0
 80070c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80070d8:	2320      	movs	r3, #32
 80070da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80070ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80070f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80070fc:	2302      	movs	r3, #2
 80070fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007102:	2300      	movs	r3, #0
 8007104:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007108:	2300      	movs	r3, #0
 800710a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800710e:	2300      	movs	r3, #0
 8007110:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800711a:	2300      	movs	r3, #0
 800711c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007128:	4619      	mov	r1, r3
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff fde6 	bl	8006cfc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007130:	2301      	movs	r3, #1
 8007132:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007134:	2301      	movs	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800713c:	2300      	movs	r3, #0
 800713e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007142:	2300      	movs	r3, #0
 8007144:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007146:	2300      	movs	r3, #0
 8007148:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800714a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800714e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007150:	2300      	movs	r3, #0
 8007152:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007154:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007158:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800715a:	2300      	movs	r3, #0
 800715c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007160:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007164:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007166:	f107 0308 	add.w	r3, r7, #8
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff fee1 	bl	8006f34 <ETH_SetDMAConfig>
}
 8007172:	bf00      	nop
 8007174:	3790      	adds	r7, #144	; 0x90
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e01d      	b.n	80071c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	68d9      	ldr	r1, [r3, #12]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	440b      	add	r3, r1
 8007198:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2200      	movs	r2, #0
 80071a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2200      	movs	r2, #0
 80071aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2200      	movs	r2, #0
 80071b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80071b2:	68b9      	ldr	r1, [r7, #8]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	3206      	adds	r2, #6
 80071ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d9de      	bls.n	8007188 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d8:	461a      	mov	r2, r3
 80071da:	2303      	movs	r3, #3
 80071dc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e023      	b.n	8007262 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6919      	ldr	r1, [r3, #16]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	440b      	add	r3, r1
 800722a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2200      	movs	r2, #0
 8007242:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2200      	movs	r2, #0
 800724e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	3212      	adds	r2, #18
 8007258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b03      	cmp	r3, #3
 8007266:	d9d8      	bls.n	800721a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728e:	461a      	mov	r2, r3
 8007290:	2303      	movs	r3, #3
 8007292:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80072ba:	bf00      	nop
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
	...

080072c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b098      	sub	sp, #96	; 0x60
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80072d0:	4a84      	ldr	r2, [pc, #528]	; (80074e4 <HAL_FDCAN_Init+0x21c>)
 80072d2:	f107 030c 	add.w	r3, r7, #12
 80072d6:	4611      	mov	r1, r2
 80072d8:	224c      	movs	r2, #76	; 0x4c
 80072da:	4618      	mov	r0, r3
 80072dc:	f013 fbbe 	bl	801aa5c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e1c6      	b.n	8007678 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a7e      	ldr	r2, [pc, #504]	; (80074e8 <HAL_FDCAN_Init+0x220>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d106      	bne.n	8007302 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80072fc:	461a      	mov	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7f9 ff3c 	bl	8001194 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0210 	bic.w	r2, r2, #16
 800732a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800732c:	f7fb ff36 	bl	800319c <HAL_GetTick>
 8007330:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007332:	e014      	b.n	800735e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007334:	f7fb ff32 	bl	800319c <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b0a      	cmp	r3, #10
 8007340:	d90d      	bls.n	800735e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007348:	f043 0201 	orr.w	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2203      	movs	r2, #3
 8007356:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e18c      	b.n	8007678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d0e3      	beq.n	8007334 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800737c:	f7fb ff0e 	bl	800319c <HAL_GetTick>
 8007380:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007382:	e014      	b.n	80073ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007384:	f7fb ff0a 	bl	800319c <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b0a      	cmp	r3, #10
 8007390:	d90d      	bls.n	80073ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007398:	f043 0201 	orr.w	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2203      	movs	r2, #3
 80073a6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e164      	b.n	8007678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0e3      	beq.n	8007384 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0202 	orr.w	r2, r2, #2
 80073ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7c1b      	ldrb	r3, [r3, #16]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d108      	bne.n	80073e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e2:	619a      	str	r2, [r3, #24]
 80073e4:	e007      	b.n	80073f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	7c5b      	ldrb	r3, [r3, #17]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d108      	bne.n	8007410 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800740c:	619a      	str	r2, [r3, #24]
 800740e:	e007      	b.n	8007420 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800741e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	7c9b      	ldrb	r3, [r3, #18]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d108      	bne.n	800743a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007436:	619a      	str	r2, [r3, #24]
 8007438:	e007      	b.n	800744a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007448:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800746e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691a      	ldr	r2, [r3, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0210 	bic.w	r2, r2, #16
 800747e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d108      	bne.n	800749a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	699a      	ldr	r2, [r3, #24]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0204 	orr.w	r2, r2, #4
 8007496:	619a      	str	r2, [r3, #24]
 8007498:	e030      	b.n	80074fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d02c      	beq.n	80074fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d020      	beq.n	80074ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f042 0210 	orr.w	r2, r2, #16
 80074c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d114      	bne.n	80074fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f042 0220 	orr.w	r2, r2, #32
 80074e0:	619a      	str	r2, [r3, #24]
 80074e2:	e00b      	b.n	80074fc <HAL_FDCAN_Init+0x234>
 80074e4:	0801ad58 	.word	0x0801ad58
 80074e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f042 0220 	orr.w	r2, r2, #32
 80074fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	3b01      	subs	r3, #1
 8007502:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	3b01      	subs	r3, #1
 800750a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800750c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007514:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	3b01      	subs	r3, #1
 800751e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007524:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007526:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007530:	d115      	bne.n	800755e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	3b01      	subs	r3, #1
 800753e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007540:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	3b01      	subs	r3, #1
 8007548:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800754a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	3b01      	subs	r3, #1
 8007554:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800755a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800755c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007584:	4413      	add	r3, r2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007592:	f023 0107 	bic.w	r1, r3, #7
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	3360      	adds	r3, #96	; 0x60
 800759e:	443b      	add	r3, r7
 80075a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d011      	beq.n	80075da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075be:	f023 0107 	bic.w	r1, r3, #7
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	3360      	adds	r3, #96	; 0x60
 80075ca:	443b      	add	r3, r7
 80075cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d012      	beq.n	8007608 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075ea:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	3360      	adds	r3, #96	; 0x60
 80075f6:	443b      	add	r3, r7
 80075f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80075fc:	011a      	lsls	r2, r3, #4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007618:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	3360      	adds	r3, #96	; 0x60
 8007624:	443b      	add	r3, r7
 8007626:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800762a:	021a      	lsls	r2, r3, #8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a11      	ldr	r2, [pc, #68]	; (8007680 <HAL_FDCAN_Init+0x3b8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d107      	bne.n	8007650 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f022 0203 	bic.w	r2, r2, #3
 800764e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 f80b 	bl	8007684 <FDCAN_CalcultateRamBlockAddresses>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007674:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007678:	4618      	mov	r0, r3
 800767a:	3760      	adds	r7, #96	; 0x60
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	4000a000 	.word	0x4000a000

08007684 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800769a:	4ba7      	ldr	r3, [pc, #668]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800769c:	4013      	ands	r3, r2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	0091      	lsls	r1, r2, #2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	6812      	ldr	r2, [r2, #0]
 80076a6:	430b      	orrs	r3, r1
 80076a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	041a      	lsls	r2, r3, #16
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	4413      	add	r3, r2
 80076d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076da:	4b97      	ldr	r3, [pc, #604]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076dc:	4013      	ands	r3, r2
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	0091      	lsls	r1, r2, #2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	430b      	orrs	r3, r1
 80076e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fc:	041a      	lsls	r2, r3, #16
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	4413      	add	r3, r2
 8007712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800771c:	4b86      	ldr	r3, [pc, #536]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800771e:	4013      	ands	r3, r2
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	0091      	lsls	r1, r2, #2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	430b      	orrs	r3, r1
 800772a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007736:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	041a      	lsls	r2, r3, #16
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007764:	4b74      	ldr	r3, [pc, #464]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007766:	4013      	ands	r3, r2
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	0091      	lsls	r1, r2, #2
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6812      	ldr	r2, [r2, #0]
 8007770:	430b      	orrs	r3, r1
 8007772:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800777e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007786:	041a      	lsls	r2, r3, #16
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800779a:	fb02 f303 	mul.w	r3, r2, r3
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80077ac:	4b62      	ldr	r3, [pc, #392]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	0091      	lsls	r1, r2, #2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80077c6:	fb02 f303 	mul.w	r3, r2, r3
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80077d8:	4b57      	ldr	r3, [pc, #348]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077da:	4013      	ands	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	0091      	lsls	r1, r2, #2
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	430b      	orrs	r3, r1
 80077e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fa:	041a      	lsls	r2, r3, #16
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	4413      	add	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800781a:	4b47      	ldr	r3, [pc, #284]	; (8007938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800781c:	4013      	ands	r3, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	0091      	lsls	r1, r2, #2
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6812      	ldr	r2, [r2, #0]
 8007826:	430b      	orrs	r3, r1
 8007828:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007834:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783c:	041a      	lsls	r2, r3, #16
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007850:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007858:	061a      	lsls	r2, r3, #24
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007868:	4b34      	ldr	r3, [pc, #208]	; (800793c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800786a:	4413      	add	r3, r2
 800786c:	009a      	lsls	r2, r3, #2
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	441a      	add	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	6879      	ldr	r1, [r7, #4]
 800789c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	441a      	add	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ca:	6879      	ldr	r1, [r7, #4]
 80078cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80078ce:	fb01 f303 	mul.w	r3, r1, r3
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	441a      	add	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	441a      	add	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80078fe:	fb01 f303 	mul.w	r3, r1, r3
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	441a      	add	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d915      	bls.n	8007960 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007934:	e006      	b.n	8007944 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007936:	bf00      	nop
 8007938:	ffff0003 	.word	0xffff0003
 800793c:	10002b00 	.word	0x10002b00
 8007940:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800794a:	f043 0220 	orr.w	r2, r3, #32
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2203      	movs	r2, #3
 8007958:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e010      	b.n	8007982 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e005      	b.n	8007974 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3304      	adds	r3, #4
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	429a      	cmp	r2, r3
 800797e:	d3f3      	bcc.n	8007968 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e033      	b.n	8007a0a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7f9 fcca 	bl	8001350 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f854 	bl	8007a70 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f822 	bl	8007a12 <FMAC_Reset>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d10c      	bne.n	80079ee <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d8:	f043 0210 	orr.w	r2, r3, #16
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	22a0      	movs	r2, #160	; 0xa0
 80079e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e008      	b.n	8007a00 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2220      	movs	r2, #32
 80079f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a1a:	f7fb fbbf 	bl	800319c <HAL_GetTick>
 8007a1e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691a      	ldr	r2, [r3, #16]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a2e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a30:	e00f      	b.n	8007a52 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007a32:	f7fb fbb3 	bl	800319c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a40:	d907      	bls.n	8007a52 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e00a      	b.n	8007a68 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e8      	bne.n	8007a32 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f807 	bl	8007a8c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f81b 	bl	8007aba <FMAC_ResetOutputStateAndDataPointers>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b089      	sub	sp, #36	; 0x24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007af6:	4b86      	ldr	r3, [pc, #536]	; (8007d10 <HAL_GPIO_Init+0x228>)
 8007af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007afa:	e18c      	b.n	8007e16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	2101      	movs	r1, #1
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	4013      	ands	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 817e 	beq.w	8007e10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d005      	beq.n	8007b2c <HAL_GPIO_Init+0x44>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d130      	bne.n	8007b8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	2203      	movs	r2, #3
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b62:	2201      	movs	r2, #1
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	f003 0201 	and.w	r2, r3, #1
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d017      	beq.n	8007bca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d123      	bne.n	8007c1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	08da      	lsrs	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3208      	adds	r2, #8
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	220f      	movs	r2, #15
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	08da      	lsrs	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3208      	adds	r2, #8
 8007c18:	69b9      	ldr	r1, [r7, #24]
 8007c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	2203      	movs	r2, #3
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f003 0203 	and.w	r2, r3, #3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80d8 	beq.w	8007e10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c60:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <HAL_GPIO_Init+0x22c>)
 8007c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c66:	4a2b      	ldr	r2, [pc, #172]	; (8007d14 <HAL_GPIO_Init+0x22c>)
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c70:	4b28      	ldr	r3, [pc, #160]	; (8007d14 <HAL_GPIO_Init+0x22c>)
 8007c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <HAL_GPIO_Init+0x230>)
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	3302      	adds	r3, #2
 8007c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	220f      	movs	r2, #15
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <HAL_GPIO_Init+0x234>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d04a      	beq.n	8007d40 <HAL_GPIO_Init+0x258>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a1c      	ldr	r2, [pc, #112]	; (8007d20 <HAL_GPIO_Init+0x238>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d02b      	beq.n	8007d0a <HAL_GPIO_Init+0x222>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	; (8007d24 <HAL_GPIO_Init+0x23c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d025      	beq.n	8007d06 <HAL_GPIO_Init+0x21e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1a      	ldr	r2, [pc, #104]	; (8007d28 <HAL_GPIO_Init+0x240>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d01f      	beq.n	8007d02 <HAL_GPIO_Init+0x21a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a19      	ldr	r2, [pc, #100]	; (8007d2c <HAL_GPIO_Init+0x244>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d019      	beq.n	8007cfe <HAL_GPIO_Init+0x216>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	; (8007d30 <HAL_GPIO_Init+0x248>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d013      	beq.n	8007cfa <HAL_GPIO_Init+0x212>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	; (8007d34 <HAL_GPIO_Init+0x24c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d00d      	beq.n	8007cf6 <HAL_GPIO_Init+0x20e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <HAL_GPIO_Init+0x250>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d007      	beq.n	8007cf2 <HAL_GPIO_Init+0x20a>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_GPIO_Init+0x254>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d101      	bne.n	8007cee <HAL_GPIO_Init+0x206>
 8007cea:	2309      	movs	r3, #9
 8007cec:	e029      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007cee:	230a      	movs	r3, #10
 8007cf0:	e027      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007cf2:	2307      	movs	r3, #7
 8007cf4:	e025      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007cf6:	2306      	movs	r3, #6
 8007cf8:	e023      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007cfa:	2305      	movs	r3, #5
 8007cfc:	e021      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007cfe:	2304      	movs	r3, #4
 8007d00:	e01f      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007d02:	2303      	movs	r3, #3
 8007d04:	e01d      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007d06:	2302      	movs	r3, #2
 8007d08:	e01b      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e019      	b.n	8007d42 <HAL_GPIO_Init+0x25a>
 8007d0e:	bf00      	nop
 8007d10:	58000080 	.word	0x58000080
 8007d14:	58024400 	.word	0x58024400
 8007d18:	58000400 	.word	0x58000400
 8007d1c:	58020000 	.word	0x58020000
 8007d20:	58020400 	.word	0x58020400
 8007d24:	58020800 	.word	0x58020800
 8007d28:	58020c00 	.word	0x58020c00
 8007d2c:	58021000 	.word	0x58021000
 8007d30:	58021400 	.word	0x58021400
 8007d34:	58021800 	.word	0x58021800
 8007d38:	58021c00 	.word	0x58021c00
 8007d3c:	58022400 	.word	0x58022400
 8007d40:	2300      	movs	r3, #0
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	f002 0203 	and.w	r2, r2, #3
 8007d48:	0092      	lsls	r2, r2, #2
 8007d4a:	4093      	lsls	r3, r2
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d52:	4938      	ldr	r1, [pc, #224]	; (8007e34 <HAL_GPIO_Init+0x34c>)
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	3302      	adds	r3, #2
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	43db      	mvns	r3, r3
 8007d6c:	69ba      	ldr	r2, [r7, #24]
 8007d6e:	4013      	ands	r3, r2
 8007d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d003      	beq.n	8007d86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	43db      	mvns	r3, r3
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	4013      	ands	r3, r2
 8007dca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	43db      	mvns	r3, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	3301      	adds	r3, #1
 8007e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f ae6b 	bne.w	8007afc <HAL_GPIO_Init+0x14>
  }
}
 8007e26:	bf00      	nop
 8007e28:	bf00      	nop
 8007e2a:	3724      	adds	r7, #36	; 0x24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	58000400 	.word	0x58000400

08007e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	807b      	strh	r3, [r7, #2]
 8007e44:	4613      	mov	r3, r2
 8007e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e48:	787b      	ldrb	r3, [r7, #1]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e4e:	887a      	ldrh	r2, [r7, #2]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e54:	e003      	b.n	8007e5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e56:	887b      	ldrh	r3, [r7, #2]
 8007e58:	041a      	lsls	r2, r3, #16
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	619a      	str	r2, [r3, #24]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	4603      	mov	r3, r0
 8007e72:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f000 f804 	bl	8007e9e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e097      	b.n	8007ff6 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d106      	bne.n	8007ee6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f7f9 fb97 	bl	8001614 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d004      	beq.n	8007f08 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f06:	d103      	bne.n	8007f10 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 031e 	bic.w	r3, r3, #30
 8007f0e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	695b      	ldr	r3, [r3, #20]
 8007f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	4b38      	ldr	r3, [pc, #224]	; (8008000 <HAL_LPTIM_Init+0x14c>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	4b37      	ldr	r3, [pc, #220]	; (8008004 <HAL_LPTIM_Init+0x150>)
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007f34:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007f3a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007f40:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007f46:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d004      	beq.n	8007f78 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f76:	d107      	bne.n	8007f88 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007f80:	4313      	orrs	r3, r2
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00a      	beq.n	8007faa <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007f9c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007fa2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a14      	ldr	r2, [pc, #80]	; (8008008 <HAL_LPTIM_Init+0x154>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d004      	beq.n	8007fc6 <HAL_LPTIM_Init+0x112>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a12      	ldr	r2, [pc, #72]	; (800800c <HAL_LPTIM_Init+0x158>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d108      	bne.n	8007fd8 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8007fd6:	e009      	b.n	8007fec <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <HAL_LPTIM_Init+0x15c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d104      	bne.n	8007fec <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fea:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	ffff1f3f 	.word	0xffff1f3f
 8008004:	ff19f1fe 	.word	0xff19f1fe
 8008008:	40002400 	.word	0x40002400
 800800c:	58002400 	.word	0x58002400
 8008010:	58002800 	.word	0x58002800

08008014 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d10d      	bne.n	8008046 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b01      	cmp	r3, #1
 8008036:	d106      	bne.n	8008046 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f882 	bl	800814a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b02      	cmp	r3, #2
 8008052:	d10d      	bne.n	8008070 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	2b02      	cmp	r3, #2
 8008060:	d106      	bne.n	8008070 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2202      	movs	r2, #2
 8008068:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f877 	bl	800815e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0304 	and.w	r3, r3, #4
 800807a:	2b04      	cmp	r3, #4
 800807c:	d10d      	bne.n	800809a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b04      	cmp	r3, #4
 800808a:	d106      	bne.n	800809a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2204      	movs	r2, #4
 8008092:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f86c 	bl	8008172 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d10d      	bne.n	80080c4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	f003 0308 	and.w	r3, r3, #8
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d106      	bne.n	80080c4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2208      	movs	r2, #8
 80080bc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f861 	bl	8008186 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d10d      	bne.n	80080ee <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d106      	bne.n	80080ee <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2210      	movs	r2, #16
 80080e6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f856 	bl	800819a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d10d      	bne.n	8008118 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b20      	cmp	r3, #32
 8008108:	d106      	bne.n	8008118 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2220      	movs	r2, #32
 8008110:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f84b 	bl	80081ae <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008122:	2b40      	cmp	r3, #64	; 0x40
 8008124:	d10d      	bne.n	8008142 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d106      	bne.n	8008142 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2240      	movs	r2, #64	; 0x40
 800813a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f840 	bl	80081c2 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008142:	bf00      	nop
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008152:	bf00      	nop
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008172:	b480      	push	{r7}
 8008174:	b083      	sub	sp, #12
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800818e:	bf00      	nop
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
	...

080081d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081e0:	4b19      	ldr	r3, [pc, #100]	; (8008248 <HAL_PWREx_ConfigSupply+0x70>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d00a      	beq.n	8008202 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081ec:	4b16      	ldr	r3, [pc, #88]	; (8008248 <HAL_PWREx_ConfigSupply+0x70>)
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d001      	beq.n	80081fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e01f      	b.n	800823e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	e01d      	b.n	800823e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008202:	4b11      	ldr	r3, [pc, #68]	; (8008248 <HAL_PWREx_ConfigSupply+0x70>)
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f023 0207 	bic.w	r2, r3, #7
 800820a:	490f      	ldr	r1, [pc, #60]	; (8008248 <HAL_PWREx_ConfigSupply+0x70>)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4313      	orrs	r3, r2
 8008210:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008212:	f7fa ffc3 	bl	800319c <HAL_GetTick>
 8008216:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008218:	e009      	b.n	800822e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800821a:	f7fa ffbf 	bl	800319c <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008228:	d901      	bls.n	800822e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e007      	b.n	800823e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800822e:	4b06      	ldr	r3, [pc, #24]	; (8008248 <HAL_PWREx_ConfigSupply+0x70>)
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	d1ee      	bne.n	800821a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	58024800 	.word	0x58024800

0800824c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08c      	sub	sp, #48	; 0x30
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e39d      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 8087 	beq.w	800837a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800826c:	4b88      	ldr	r3, [pc, #544]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008276:	4b86      	ldr	r3, [pc, #536]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	2b10      	cmp	r3, #16
 8008280:	d007      	beq.n	8008292 <HAL_RCC_OscConfig+0x46>
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	2b18      	cmp	r3, #24
 8008286:	d110      	bne.n	80082aa <HAL_RCC_OscConfig+0x5e>
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	f003 0303 	and.w	r3, r3, #3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d10b      	bne.n	80082aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008292:	4b7f      	ldr	r3, [pc, #508]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829a:	2b00      	cmp	r3, #0
 800829c:	d06c      	beq.n	8008378 <HAL_RCC_OscConfig+0x12c>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d168      	bne.n	8008378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e377      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b2:	d106      	bne.n	80082c2 <HAL_RCC_OscConfig+0x76>
 80082b4:	4b76      	ldr	r3, [pc, #472]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a75      	ldr	r2, [pc, #468]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	e02e      	b.n	8008320 <HAL_RCC_OscConfig+0xd4>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10c      	bne.n	80082e4 <HAL_RCC_OscConfig+0x98>
 80082ca:	4b71      	ldr	r3, [pc, #452]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a70      	ldr	r2, [pc, #448]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	4b6e      	ldr	r3, [pc, #440]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a6d      	ldr	r2, [pc, #436]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e01d      	b.n	8008320 <HAL_RCC_OscConfig+0xd4>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082ec:	d10c      	bne.n	8008308 <HAL_RCC_OscConfig+0xbc>
 80082ee:	4b68      	ldr	r3, [pc, #416]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a67      	ldr	r2, [pc, #412]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	4b65      	ldr	r3, [pc, #404]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a64      	ldr	r2, [pc, #400]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e00b      	b.n	8008320 <HAL_RCC_OscConfig+0xd4>
 8008308:	4b61      	ldr	r3, [pc, #388]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a60      	ldr	r2, [pc, #384]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800830e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	4b5e      	ldr	r3, [pc, #376]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5d      	ldr	r2, [pc, #372]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800831a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800831e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d013      	beq.n	8008350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008328:	f7fa ff38 	bl	800319c <HAL_GetTick>
 800832c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800832e:	e008      	b.n	8008342 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008330:	f7fa ff34 	bl	800319c <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	2b64      	cmp	r3, #100	; 0x64
 800833c:	d901      	bls.n	8008342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e32b      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008342:	4b53      	ldr	r3, [pc, #332]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f0      	beq.n	8008330 <HAL_RCC_OscConfig+0xe4>
 800834e:	e014      	b.n	800837a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008350:	f7fa ff24 	bl	800319c <HAL_GetTick>
 8008354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008358:	f7fa ff20 	bl	800319c <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b64      	cmp	r3, #100	; 0x64
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e317      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800836a:	4b49      	ldr	r3, [pc, #292]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f0      	bne.n	8008358 <HAL_RCC_OscConfig+0x10c>
 8008376:	e000      	b.n	800837a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0302 	and.w	r3, r3, #2
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 808c 	beq.w	80084a0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008388:	4b41      	ldr	r3, [pc, #260]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008390:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008392:	4b3f      	ldr	r3, [pc, #252]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_RCC_OscConfig+0x162>
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2b18      	cmp	r3, #24
 80083a2:	d137      	bne.n	8008414 <HAL_RCC_OscConfig+0x1c8>
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f003 0303 	and.w	r3, r3, #3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d132      	bne.n	8008414 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083ae:	4b38      	ldr	r3, [pc, #224]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0304 	and.w	r3, r3, #4
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <HAL_RCC_OscConfig+0x17a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e2e9      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083c6:	4b32      	ldr	r3, [pc, #200]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f023 0219 	bic.w	r2, r3, #25
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	492f      	ldr	r1, [pc, #188]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083d8:	f7fa fee0 	bl	800319c <HAL_GetTick>
 80083dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e0:	f7fa fedc 	bl	800319c <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e2d3      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083f2:	4b27      	ldr	r3, [pc, #156]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0f0      	beq.n	80083e0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	061b      	lsls	r3, r3, #24
 800840c:	4920      	ldr	r1, [pc, #128]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800840e:	4313      	orrs	r3, r2
 8008410:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008412:	e045      	b.n	80084a0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d026      	beq.n	800846a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800841c:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f023 0219 	bic.w	r2, r3, #25
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4919      	ldr	r1, [pc, #100]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800842a:	4313      	orrs	r3, r2
 800842c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842e:	f7fa feb5 	bl	800319c <HAL_GetTick>
 8008432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008436:	f7fa feb1 	bl	800319c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e2a8      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008448:	4b11      	ldr	r3, [pc, #68]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	d0f0      	beq.n	8008436 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	490b      	ldr	r1, [pc, #44]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008464:	4313      	orrs	r3, r2
 8008466:	604b      	str	r3, [r1, #4]
 8008468:	e01a      	b.n	80084a0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a08      	ldr	r2, [pc, #32]	; (8008490 <HAL_RCC_OscConfig+0x244>)
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008476:	f7fa fe91 	bl	800319c <HAL_GetTick>
 800847a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800847c:	e00a      	b.n	8008494 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800847e:	f7fa fe8d 	bl	800319c <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d903      	bls.n	8008494 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e284      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
 8008490:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008494:	4b96      	ldr	r3, [pc, #600]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0304 	and.w	r3, r3, #4
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1ee      	bne.n	800847e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d06a      	beq.n	8008582 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084ac:	4b90      	ldr	r3, [pc, #576]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084b4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084b6:	4b8e      	ldr	r3, [pc, #568]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	2b08      	cmp	r3, #8
 80084c0:	d007      	beq.n	80084d2 <HAL_RCC_OscConfig+0x286>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b18      	cmp	r3, #24
 80084c6:	d11b      	bne.n	8008500 <HAL_RCC_OscConfig+0x2b4>
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d116      	bne.n	8008500 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084d2:	4b87      	ldr	r3, [pc, #540]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_RCC_OscConfig+0x29e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d001      	beq.n	80084ea <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e257      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084ea:	4b81      	ldr	r3, [pc, #516]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	061b      	lsls	r3, r3, #24
 80084f8:	497d      	ldr	r1, [pc, #500]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80084fe:	e040      	b.n	8008582 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d023      	beq.n	8008550 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008508:	4b79      	ldr	r3, [pc, #484]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a78      	ldr	r2, [pc, #480]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800850e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008514:	f7fa fe42 	bl	800319c <HAL_GetTick>
 8008518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800851c:	f7fa fe3e 	bl	800319c <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e235      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800852e:	4b70      	ldr	r3, [pc, #448]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800853a:	4b6d      	ldr	r3, [pc, #436]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	061b      	lsls	r3, r3, #24
 8008548:	4969      	ldr	r1, [pc, #420]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800854a:	4313      	orrs	r3, r2
 800854c:	60cb      	str	r3, [r1, #12]
 800854e:	e018      	b.n	8008582 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008550:	4b67      	ldr	r3, [pc, #412]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a66      	ldr	r2, [pc, #408]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800855a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855c:	f7fa fe1e 	bl	800319c <HAL_GetTick>
 8008560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008562:	e008      	b.n	8008576 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008564:	f7fa fe1a 	bl	800319c <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e211      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008576:	4b5e      	ldr	r3, [pc, #376]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f0      	bne.n	8008564 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d036      	beq.n	80085fc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	695b      	ldr	r3, [r3, #20]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d019      	beq.n	80085ca <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008596:	4b56      	ldr	r3, [pc, #344]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800859a:	4a55      	ldr	r2, [pc, #340]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a2:	f7fa fdfb 	bl	800319c <HAL_GetTick>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085aa:	f7fa fdf7 	bl	800319c <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e1ee      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80085bc:	4b4c      	ldr	r3, [pc, #304]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80085be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0f0      	beq.n	80085aa <HAL_RCC_OscConfig+0x35e>
 80085c8:	e018      	b.n	80085fc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ca:	4b49      	ldr	r3, [pc, #292]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80085cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ce:	4a48      	ldr	r2, [pc, #288]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d6:	f7fa fde1 	bl	800319c <HAL_GetTick>
 80085da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085de:	f7fa fddd 	bl	800319c <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e1d4      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80085f0:	4b3f      	ldr	r3, [pc, #252]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80085f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0320 	and.w	r3, r3, #32
 8008604:	2b00      	cmp	r3, #0
 8008606:	d036      	beq.n	8008676 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d019      	beq.n	8008644 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008610:	4b37      	ldr	r3, [pc, #220]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a36      	ldr	r2, [pc, #216]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800861a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800861c:	f7fa fdbe 	bl	800319c <HAL_GetTick>
 8008620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008624:	f7fa fdba 	bl	800319c <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e1b1      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008636:	4b2e      	ldr	r3, [pc, #184]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0x3d8>
 8008642:	e018      	b.n	8008676 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008644:	4b2a      	ldr	r3, [pc, #168]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800864a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008650:	f7fa fda4 	bl	800319c <HAL_GetTick>
 8008654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008658:	f7fa fda0 	bl	800319c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e197      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800866a:	4b21      	ldr	r3, [pc, #132]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 8086 	beq.w	8008790 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008684:	4b1b      	ldr	r3, [pc, #108]	; (80086f4 <HAL_RCC_OscConfig+0x4a8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <HAL_RCC_OscConfig+0x4a8>)
 800868a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800868e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008690:	f7fa fd84 	bl	800319c <HAL_GetTick>
 8008694:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008698:	f7fa fd80 	bl	800319c <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	; 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e177      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086aa:	4b12      	ldr	r3, [pc, #72]	; (80086f4 <HAL_RCC_OscConfig+0x4a8>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d106      	bne.n	80086cc <HAL_RCC_OscConfig+0x480>
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	4a0b      	ldr	r2, [pc, #44]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	6713      	str	r3, [r2, #112]	; 0x70
 80086ca:	e032      	b.n	8008732 <HAL_RCC_OscConfig+0x4e6>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d111      	bne.n	80086f8 <HAL_RCC_OscConfig+0x4ac>
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d8:	4a05      	ldr	r2, [pc, #20]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086da:	f023 0301 	bic.w	r3, r3, #1
 80086de:	6713      	str	r3, [r2, #112]	; 0x70
 80086e0:	4b03      	ldr	r3, [pc, #12]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e4:	4a02      	ldr	r2, [pc, #8]	; (80086f0 <HAL_RCC_OscConfig+0x4a4>)
 80086e6:	f023 0304 	bic.w	r3, r3, #4
 80086ea:	6713      	str	r3, [r2, #112]	; 0x70
 80086ec:	e021      	b.n	8008732 <HAL_RCC_OscConfig+0x4e6>
 80086ee:	bf00      	nop
 80086f0:	58024400 	.word	0x58024400
 80086f4:	58024800 	.word	0x58024800
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	d10c      	bne.n	800871a <HAL_RCC_OscConfig+0x4ce>
 8008700:	4b83      	ldr	r3, [pc, #524]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008704:	4a82      	ldr	r2, [pc, #520]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008706:	f043 0304 	orr.w	r3, r3, #4
 800870a:	6713      	str	r3, [r2, #112]	; 0x70
 800870c:	4b80      	ldr	r3, [pc, #512]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800870e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008710:	4a7f      	ldr	r2, [pc, #508]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008712:	f043 0301 	orr.w	r3, r3, #1
 8008716:	6713      	str	r3, [r2, #112]	; 0x70
 8008718:	e00b      	b.n	8008732 <HAL_RCC_OscConfig+0x4e6>
 800871a:	4b7d      	ldr	r3, [pc, #500]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871e:	4a7c      	ldr	r2, [pc, #496]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008720:	f023 0301 	bic.w	r3, r3, #1
 8008724:	6713      	str	r3, [r2, #112]	; 0x70
 8008726:	4b7a      	ldr	r3, [pc, #488]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800872a:	4a79      	ldr	r2, [pc, #484]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800872c:	f023 0304 	bic.w	r3, r3, #4
 8008730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d015      	beq.n	8008766 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873a:	f7fa fd2f 	bl	800319c <HAL_GetTick>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008740:	e00a      	b.n	8008758 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008742:	f7fa fd2b 	bl	800319c <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e120      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008758:	4b6d      	ldr	r3, [pc, #436]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800875a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ee      	beq.n	8008742 <HAL_RCC_OscConfig+0x4f6>
 8008764:	e014      	b.n	8008790 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008766:	f7fa fd19 	bl	800319c <HAL_GetTick>
 800876a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800876c:	e00a      	b.n	8008784 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800876e:	f7fa fd15 	bl	800319c <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	f241 3288 	movw	r2, #5000	; 0x1388
 800877c:	4293      	cmp	r3, r2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e10a      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008784:	4b62      	ldr	r3, [pc, #392]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1ee      	bne.n	800876e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80ff 	beq.w	8008998 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800879a:	4b5d      	ldr	r3, [pc, #372]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a2:	2b18      	cmp	r3, #24
 80087a4:	f000 80ba 	beq.w	800891c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	f040 8095 	bne.w	80088dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087b2:	4b57      	ldr	r3, [pc, #348]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a56      	ldr	r2, [pc, #344]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80087b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087be:	f7fa fced 	bl	800319c <HAL_GetTick>
 80087c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087c4:	e008      	b.n	80087d8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c6:	f7fa fce9 	bl	800319c <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e0e0      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087d8:	4b4d      	ldr	r3, [pc, #308]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087e4:	4b4a      	ldr	r3, [pc, #296]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80087e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087e8:	4b4a      	ldr	r3, [pc, #296]	; (8008914 <HAL_RCC_OscConfig+0x6c8>)
 80087ea:	4013      	ands	r3, r2
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087f4:	0112      	lsls	r2, r2, #4
 80087f6:	430a      	orrs	r2, r1
 80087f8:	4945      	ldr	r1, [pc, #276]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	628b      	str	r3, [r1, #40]	; 0x28
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008802:	3b01      	subs	r3, #1
 8008804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	3b01      	subs	r3, #1
 800880e:	025b      	lsls	r3, r3, #9
 8008810:	b29b      	uxth	r3, r3
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	3b01      	subs	r3, #1
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008820:	431a      	orrs	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008826:	3b01      	subs	r3, #1
 8008828:	061b      	lsls	r3, r3, #24
 800882a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800882e:	4938      	ldr	r1, [pc, #224]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008830:	4313      	orrs	r3, r2
 8008832:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008838:	4a35      	ldr	r2, [pc, #212]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800883a:	f023 0301 	bic.w	r3, r3, #1
 800883e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008840:	4b33      	ldr	r3, [pc, #204]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008844:	4b34      	ldr	r3, [pc, #208]	; (8008918 <HAL_RCC_OscConfig+0x6cc>)
 8008846:	4013      	ands	r3, r2
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800884c:	00d2      	lsls	r2, r2, #3
 800884e:	4930      	ldr	r1, [pc, #192]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008850:	4313      	orrs	r3, r2
 8008852:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008854:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008858:	f023 020c 	bic.w	r2, r3, #12
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008860:	492b      	ldr	r1, [pc, #172]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008862:	4313      	orrs	r3, r2
 8008864:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008866:	4b2a      	ldr	r3, [pc, #168]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800886a:	f023 0202 	bic.w	r2, r3, #2
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008872:	4927      	ldr	r1, [pc, #156]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008874:	4313      	orrs	r3, r2
 8008876:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	4a24      	ldr	r2, [pc, #144]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800887e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008884:	4b22      	ldr	r3, [pc, #136]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a21      	ldr	r2, [pc, #132]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800888a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008890:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800889a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800889c:	4b1c      	ldr	r3, [pc, #112]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	4a1b      	ldr	r2, [pc, #108]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088a8:	4b19      	ldr	r3, [pc, #100]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a18      	ldr	r2, [pc, #96]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80088b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b4:	f7fa fc72 	bl	800319c <HAL_GetTick>
 80088b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088bc:	f7fa fc6e 	bl	800319c <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e065      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088ce:	4b10      	ldr	r3, [pc, #64]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f0      	beq.n	80088bc <HAL_RCC_OscConfig+0x670>
 80088da:	e05d      	b.n	8008998 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088dc:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a0b      	ldr	r2, [pc, #44]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 80088e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fa fc58 	bl	800319c <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fa fc54 	bl	800319c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e04b      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008902:	4b03      	ldr	r3, [pc, #12]	; (8008910 <HAL_RCC_OscConfig+0x6c4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x6a4>
 800890e:	e043      	b.n	8008998 <HAL_RCC_OscConfig+0x74c>
 8008910:	58024400 	.word	0x58024400
 8008914:	fffffc0c 	.word	0xfffffc0c
 8008918:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800891c:	4b21      	ldr	r3, [pc, #132]	; (80089a4 <HAL_RCC_OscConfig+0x758>)
 800891e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008920:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008922:	4b20      	ldr	r3, [pc, #128]	; (80089a4 <HAL_RCC_OscConfig+0x758>)
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b01      	cmp	r3, #1
 800892e:	d031      	beq.n	8008994 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	f003 0203 	and.w	r2, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800893a:	429a      	cmp	r2, r3
 800893c:	d12a      	bne.n	8008994 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	091b      	lsrs	r3, r3, #4
 8008942:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	429a      	cmp	r2, r3
 800894c:	d122      	bne.n	8008994 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008958:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800895a:	429a      	cmp	r2, r3
 800895c:	d11a      	bne.n	8008994 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800896c:	429a      	cmp	r2, r3
 800896e:	d111      	bne.n	8008994 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	0c1b      	lsrs	r3, r3, #16
 8008974:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d108      	bne.n	8008994 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	0e1b      	lsrs	r3, r3, #24
 8008986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008990:	429a      	cmp	r2, r3
 8008992:	d001      	beq.n	8008998 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3730      	adds	r7, #48	; 0x30
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400

080089a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d101      	bne.n	80089bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e19c      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089bc:	4b8a      	ldr	r3, [pc, #552]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 030f 	and.w	r3, r3, #15
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d910      	bls.n	80089ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ca:	4b87      	ldr	r3, [pc, #540]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f023 020f 	bic.w	r2, r3, #15
 80089d2:	4985      	ldr	r1, [pc, #532]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089da:	4b83      	ldr	r3, [pc, #524]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 030f 	and.w	r3, r3, #15
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d001      	beq.n	80089ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e184      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691a      	ldr	r2, [r3, #16]
 80089fc:	4b7b      	ldr	r3, [pc, #492]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d908      	bls.n	8008a1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a08:	4b78      	ldr	r3, [pc, #480]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	4975      	ldr	r1, [pc, #468]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0308 	and.w	r3, r3, #8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d010      	beq.n	8008a48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695a      	ldr	r2, [r3, #20]
 8008a2a:	4b70      	ldr	r3, [pc, #448]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d908      	bls.n	8008a48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a36:	4b6d      	ldr	r3, [pc, #436]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	496a      	ldr	r1, [pc, #424]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0310 	and.w	r3, r3, #16
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d010      	beq.n	8008a76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	699a      	ldr	r2, [r3, #24]
 8008a58:	4b64      	ldr	r3, [pc, #400]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d908      	bls.n	8008a76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a64:	4b61      	ldr	r3, [pc, #388]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	495e      	ldr	r1, [pc, #376]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0320 	and.w	r3, r3, #32
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	69da      	ldr	r2, [r3, #28]
 8008a86:	4b59      	ldr	r3, [pc, #356]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d908      	bls.n	8008aa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a92:	4b56      	ldr	r3, [pc, #344]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	4953      	ldr	r1, [pc, #332]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d010      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68da      	ldr	r2, [r3, #12]
 8008ab4:	4b4d      	ldr	r3, [pc, #308]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f003 030f 	and.w	r3, r3, #15
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d908      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ac0:	4b4a      	ldr	r3, [pc, #296]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f023 020f 	bic.w	r2, r3, #15
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	4947      	ldr	r1, [pc, #284]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d055      	beq.n	8008b8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008ade:	4b43      	ldr	r3, [pc, #268]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	4940      	ldr	r1, [pc, #256]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d107      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008af8:	4b3c      	ldr	r3, [pc, #240]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d121      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e0f6      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d107      	bne.n	8008b20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b10:	4b36      	ldr	r3, [pc, #216]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d115      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e0ea      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d107      	bne.n	8008b38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b28:	4b30      	ldr	r3, [pc, #192]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e0de      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b38:	4b2c      	ldr	r3, [pc, #176]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0d6      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f023 0207 	bic.w	r2, r3, #7
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4925      	ldr	r1, [pc, #148]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5a:	f7fa fb1f 	bl	800319c <HAL_GetTick>
 8008b5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b60:	e00a      	b.n	8008b78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b62:	f7fa fb1b 	bl	800319c <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e0be      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b78:	4b1c      	ldr	r3, [pc, #112]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d1eb      	bne.n	8008b62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d010      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f003 030f 	and.w	r3, r3, #15
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d208      	bcs.n	8008bb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ba6:	4b11      	ldr	r3, [pc, #68]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f023 020f 	bic.w	r2, r3, #15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	490e      	ldr	r1, [pc, #56]	; (8008bec <HAL_RCC_ClockConfig+0x244>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bb8:	4b0b      	ldr	r3, [pc, #44]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f003 030f 	and.w	r3, r3, #15
 8008bc0:	683a      	ldr	r2, [r7, #0]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d214      	bcs.n	8008bf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bc6:	4b08      	ldr	r3, [pc, #32]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f023 020f 	bic.w	r2, r3, #15
 8008bce:	4906      	ldr	r1, [pc, #24]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bd6:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <HAL_RCC_ClockConfig+0x240>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d005      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e086      	b.n	8008cf6 <HAL_RCC_ClockConfig+0x34e>
 8008be8:	52002000 	.word	0x52002000
 8008bec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	4b3f      	ldr	r3, [pc, #252]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d208      	bcs.n	8008c1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c0c:	4b3c      	ldr	r3, [pc, #240]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	4939      	ldr	r1, [pc, #228]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0308 	and.w	r3, r3, #8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695a      	ldr	r2, [r3, #20]
 8008c2e:	4b34      	ldr	r3, [pc, #208]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d208      	bcs.n	8008c4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c3a:	4b31      	ldr	r3, [pc, #196]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	492e      	ldr	r1, [pc, #184]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0310 	and.w	r3, r3, #16
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d010      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699a      	ldr	r2, [r3, #24]
 8008c5c:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d208      	bcs.n	8008c7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c68:	4b25      	ldr	r3, [pc, #148]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	4922      	ldr	r1, [pc, #136]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d010      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69da      	ldr	r2, [r3, #28]
 8008c8a:	4b1d      	ldr	r3, [pc, #116]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d208      	bcs.n	8008ca8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	4917      	ldr	r1, [pc, #92]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ca8:	f000 f834 	bl	8008d14 <HAL_RCC_GetSysClockFreq>
 8008cac:	4602      	mov	r2, r0
 8008cae:	4b14      	ldr	r3, [pc, #80]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	0a1b      	lsrs	r3, r3, #8
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	4912      	ldr	r1, [pc, #72]	; (8008d04 <HAL_RCC_ClockConfig+0x35c>)
 8008cba:	5ccb      	ldrb	r3, [r1, r3]
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <HAL_RCC_ClockConfig+0x358>)
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	4a0d      	ldr	r2, [pc, #52]	; (8008d04 <HAL_RCC_ClockConfig+0x35c>)
 8008cd0:	5cd3      	ldrb	r3, [r2, r3]
 8008cd2:	f003 031f 	and.w	r3, r3, #31
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cdc:	4a0a      	ldr	r2, [pc, #40]	; (8008d08 <HAL_RCC_ClockConfig+0x360>)
 8008cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	; (8008d0c <HAL_RCC_ClockConfig+0x364>)
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008ce6:	4b0a      	ldr	r3, [pc, #40]	; (8008d10 <HAL_RCC_ClockConfig+0x368>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fa fa0c 	bl	8003108 <HAL_InitTick>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	58024400 	.word	0x58024400
 8008d04:	0801b2bc 	.word	0x0801b2bc
 8008d08:	24000004 	.word	0x24000004
 8008d0c:	24000000 	.word	0x24000000
 8008d10:	24000008 	.word	0x24000008

08008d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d1a:	4bb3      	ldr	r3, [pc, #716]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d22:	2b18      	cmp	r3, #24
 8008d24:	f200 8155 	bhi.w	8008fd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008d28:	a201      	add	r2, pc, #4	; (adr r2, 8008d30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2e:	bf00      	nop
 8008d30:	08008d95 	.word	0x08008d95
 8008d34:	08008fd3 	.word	0x08008fd3
 8008d38:	08008fd3 	.word	0x08008fd3
 8008d3c:	08008fd3 	.word	0x08008fd3
 8008d40:	08008fd3 	.word	0x08008fd3
 8008d44:	08008fd3 	.word	0x08008fd3
 8008d48:	08008fd3 	.word	0x08008fd3
 8008d4c:	08008fd3 	.word	0x08008fd3
 8008d50:	08008dbb 	.word	0x08008dbb
 8008d54:	08008fd3 	.word	0x08008fd3
 8008d58:	08008fd3 	.word	0x08008fd3
 8008d5c:	08008fd3 	.word	0x08008fd3
 8008d60:	08008fd3 	.word	0x08008fd3
 8008d64:	08008fd3 	.word	0x08008fd3
 8008d68:	08008fd3 	.word	0x08008fd3
 8008d6c:	08008fd3 	.word	0x08008fd3
 8008d70:	08008dc1 	.word	0x08008dc1
 8008d74:	08008fd3 	.word	0x08008fd3
 8008d78:	08008fd3 	.word	0x08008fd3
 8008d7c:	08008fd3 	.word	0x08008fd3
 8008d80:	08008fd3 	.word	0x08008fd3
 8008d84:	08008fd3 	.word	0x08008fd3
 8008d88:	08008fd3 	.word	0x08008fd3
 8008d8c:	08008fd3 	.word	0x08008fd3
 8008d90:	08008dc7 	.word	0x08008dc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d94:	4b94      	ldr	r3, [pc, #592]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d009      	beq.n	8008db4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008da0:	4b91      	ldr	r3, [pc, #580]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	08db      	lsrs	r3, r3, #3
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	4a90      	ldr	r2, [pc, #576]	; (8008fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008dac:	fa22 f303 	lsr.w	r3, r2, r3
 8008db0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008db2:	e111      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008db4:	4b8d      	ldr	r3, [pc, #564]	; (8008fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008db6:	61bb      	str	r3, [r7, #24]
    break;
 8008db8:	e10e      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008dba:	4b8d      	ldr	r3, [pc, #564]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008dbc:	61bb      	str	r3, [r7, #24]
    break;
 8008dbe:	e10b      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008dc0:	4b8c      	ldr	r3, [pc, #560]	; (8008ff4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008dc2:	61bb      	str	r3, [r7, #24]
    break;
 8008dc4:	e108      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dc6:	4b88      	ldr	r3, [pc, #544]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008dd0:	4b85      	ldr	r3, [pc, #532]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ddc:	4b82      	ldr	r3, [pc, #520]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008de6:	4b80      	ldr	r3, [pc, #512]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dea:	08db      	lsrs	r3, r3, #3
 8008dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dfe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80e1 	beq.w	8008fcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	f000 8083 	beq.w	8008f18 <HAL_RCC_GetSysClockFreq+0x204>
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	f200 80a1 	bhi.w	8008f5c <HAL_RCC_GetSysClockFreq+0x248>
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_RCC_GetSysClockFreq+0x114>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d056      	beq.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e26:	e099      	b.n	8008f5c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e28:	4b6f      	ldr	r3, [pc, #444]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02d      	beq.n	8008e90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e34:	4b6c      	ldr	r3, [pc, #432]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0303 	and.w	r3, r3, #3
 8008e3e:	4a6b      	ldr	r2, [pc, #428]	; (8008fec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e40:	fa22 f303 	lsr.w	r3, r2, r3
 8008e44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	ee07 3a90 	vmov	s15, r3
 8008e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	ee07 3a90 	vmov	s15, r3
 8008e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e5e:	4b62      	ldr	r3, [pc, #392]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008e8e:	e087      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ffc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	4b51      	ldr	r3, [pc, #324]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eaa:	ee07 3a90 	vmov	s15, r3
 8008eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ed2:	e065      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ede:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee6:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008efa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f16:	e043      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	ee07 3a90 	vmov	s15, r3
 8008f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009004 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2a:	4b2f      	ldr	r3, [pc, #188]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f5a:	e021      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009000 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f6e:	4b1e      	ldr	r3, [pc, #120]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008ff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f9e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008fa0:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	0a5b      	lsrs	r3, r3, #9
 8008fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008faa:	3301      	adds	r3, #1
 8008fac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	ee07 3a90 	vmov	s15, r3
 8008fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008fb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fc4:	ee17 3a90 	vmov	r3, s15
 8008fc8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008fca:	e005      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61bb      	str	r3, [r7, #24]
    break;
 8008fd0:	e002      	b.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008fd2:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008fd4:	61bb      	str	r3, [r7, #24]
    break;
 8008fd6:	bf00      	nop
  }

  return sysclockfreq;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3724      	adds	r7, #36	; 0x24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	58024400 	.word	0x58024400
 8008fec:	03d09000 	.word	0x03d09000
 8008ff0:	003d0900 	.word	0x003d0900
 8008ff4:	007a1200 	.word	0x007a1200
 8008ff8:	46000000 	.word	0x46000000
 8008ffc:	4c742400 	.word	0x4c742400
 8009000:	4a742400 	.word	0x4a742400
 8009004:	4af42400 	.word	0x4af42400

08009008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800900e:	f7ff fe81 	bl	8008d14 <HAL_RCC_GetSysClockFreq>
 8009012:	4602      	mov	r2, r0
 8009014:	4b10      	ldr	r3, [pc, #64]	; (8009058 <HAL_RCC_GetHCLKFreq+0x50>)
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	0a1b      	lsrs	r3, r3, #8
 800901a:	f003 030f 	and.w	r3, r3, #15
 800901e:	490f      	ldr	r1, [pc, #60]	; (800905c <HAL_RCC_GetHCLKFreq+0x54>)
 8009020:	5ccb      	ldrb	r3, [r1, r3]
 8009022:	f003 031f 	and.w	r3, r3, #31
 8009026:	fa22 f303 	lsr.w	r3, r2, r3
 800902a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800902c:	4b0a      	ldr	r3, [pc, #40]	; (8009058 <HAL_RCC_GetHCLKFreq+0x50>)
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f003 030f 	and.w	r3, r3, #15
 8009034:	4a09      	ldr	r2, [pc, #36]	; (800905c <HAL_RCC_GetHCLKFreq+0x54>)
 8009036:	5cd3      	ldrb	r3, [r2, r3]
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	fa22 f303 	lsr.w	r3, r2, r3
 8009042:	4a07      	ldr	r2, [pc, #28]	; (8009060 <HAL_RCC_GetHCLKFreq+0x58>)
 8009044:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009046:	4a07      	ldr	r2, [pc, #28]	; (8009064 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <HAL_RCC_GetHCLKFreq+0x58>)
 800904e:	681b      	ldr	r3, [r3, #0]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	58024400 	.word	0x58024400
 800905c:	0801b2bc 	.word	0x0801b2bc
 8009060:	24000004 	.word	0x24000004
 8009064:	24000000 	.word	0x24000000

08009068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800906c:	f7ff ffcc 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 8009070:	4602      	mov	r2, r0
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	091b      	lsrs	r3, r3, #4
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800907e:	5ccb      	ldrb	r3, [r1, r3]
 8009080:	f003 031f 	and.w	r3, r3, #31
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009088:	4618      	mov	r0, r3
 800908a:	bd80      	pop	{r7, pc}
 800908c:	58024400 	.word	0x58024400
 8009090:	0801b2bc 	.word	0x0801b2bc

08009094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009098:	f7ff ffb6 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 800909c:	4602      	mov	r2, r0
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	4904      	ldr	r1, [pc, #16]	; (80090bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80090aa:	5ccb      	ldrb	r3, [r1, r3]
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	58024400 	.word	0x58024400
 80090bc:	0801b2bc 	.word	0x0801b2bc

080090c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090cc:	2300      	movs	r3, #0
 80090ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d03f      	beq.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090e4:	d02a      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80090e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80090ea:	d824      	bhi.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80090ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090f0:	d018      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090f6:	d81e      	bhi.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80090fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009100:	d007      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009102:	e018      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009104:	4ba4      	ldr	r3, [pc, #656]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4aa3      	ldr	r2, [pc, #652]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800910a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009110:	e015      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3304      	adds	r3, #4
 8009116:	2102      	movs	r1, #2
 8009118:	4618      	mov	r0, r3
 800911a:	f001 ff01 	bl	800af20 <RCCEx_PLL2_Config>
 800911e:	4603      	mov	r3, r0
 8009120:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009122:	e00c      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3324      	adds	r3, #36	; 0x24
 8009128:	2102      	movs	r1, #2
 800912a:	4618      	mov	r0, r3
 800912c:	f001 ffaa 	bl	800b084 <RCCEx_PLL3_Config>
 8009130:	4603      	mov	r3, r0
 8009132:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009134:	e003      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	75fb      	strb	r3, [r7, #23]
      break;
 800913a:	e000      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800913c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009144:	4b94      	ldr	r3, [pc, #592]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009148:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009150:	4991      	ldr	r1, [pc, #580]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009152:	4313      	orrs	r3, r2
 8009154:	650b      	str	r3, [r1, #80]	; 0x50
 8009156:	e001      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009164:	2b00      	cmp	r3, #0
 8009166:	d03d      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916c:	2b04      	cmp	r3, #4
 800916e:	d826      	bhi.n	80091be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009170:	a201      	add	r2, pc, #4	; (adr r2, 8009178 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009176:	bf00      	nop
 8009178:	0800918d 	.word	0x0800918d
 800917c:	0800919b 	.word	0x0800919b
 8009180:	080091ad 	.word	0x080091ad
 8009184:	080091c5 	.word	0x080091c5
 8009188:	080091c5 	.word	0x080091c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918c:	4b82      	ldr	r3, [pc, #520]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800918e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009190:	4a81      	ldr	r2, [pc, #516]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009198:	e015      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3304      	adds	r3, #4
 800919e:	2100      	movs	r1, #0
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 febd 	bl	800af20 <RCCEx_PLL2_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091aa:	e00c      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3324      	adds	r3, #36	; 0x24
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 ff66 	bl	800b084 <RCCEx_PLL3_Config>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091bc:	e003      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	75fb      	strb	r3, [r7, #23]
      break;
 80091c2:	e000      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80091c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d109      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091cc:	4b72      	ldr	r3, [pc, #456]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	f023 0207 	bic.w	r2, r3, #7
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d8:	496f      	ldr	r1, [pc, #444]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	650b      	str	r3, [r1, #80]	; 0x50
 80091de:	e001      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d051      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80091fa:	d036      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80091fc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009200:	d830      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009202:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009206:	d032      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009208:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800920c:	d82a      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800920e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009212:	d02e      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009218:	d824      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800921a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800921e:	d018      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009220:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009224:	d81e      	bhi.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800922a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800922e:	d007      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009230:	e018      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009232:	4b59      	ldr	r3, [pc, #356]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	4a58      	ldr	r2, [pc, #352]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800923c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800923e:	e019      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	2100      	movs	r1, #0
 8009246:	4618      	mov	r0, r3
 8009248:	f001 fe6a 	bl	800af20 <RCCEx_PLL2_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009250:	e010      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3324      	adds	r3, #36	; 0x24
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f001 ff13 	bl	800b084 <RCCEx_PLL3_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009262:	e007      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	75fb      	strb	r3, [r7, #23]
      break;
 8009268:	e004      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800926a:	bf00      	nop
 800926c:	e002      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800926e:	bf00      	nop
 8009270:	e000      	b.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800927a:	4b47      	ldr	r3, [pc, #284]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800927c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009288:	4943      	ldr	r1, [pc, #268]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800928a:	4313      	orrs	r3, r2
 800928c:	658b      	str	r3, [r1, #88]	; 0x58
 800928e:	e001      	b.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009290:	7dfb      	ldrb	r3, [r7, #23]
 8009292:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800929c:	2b00      	cmp	r3, #0
 800929e:	d051      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80092aa:	d036      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80092ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80092b0:	d830      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80092b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092b6:	d032      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80092b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092bc:	d82a      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80092be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092c2:	d02e      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80092c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092c8:	d824      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80092ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ce:	d018      	beq.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80092d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d4:	d81e      	bhi.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80092da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092de:	d007      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80092e0:	e018      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e2:	4b2d      	ldr	r3, [pc, #180]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	4a2c      	ldr	r2, [pc, #176]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80092e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80092ee:	e019      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3304      	adds	r3, #4
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f001 fe12 	bl	800af20 <RCCEx_PLL2_Config>
 80092fc:	4603      	mov	r3, r0
 80092fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009300:	e010      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	3324      	adds	r3, #36	; 0x24
 8009306:	2100      	movs	r1, #0
 8009308:	4618      	mov	r0, r3
 800930a:	f001 febb 	bl	800b084 <RCCEx_PLL3_Config>
 800930e:	4603      	mov	r3, r0
 8009310:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009312:	e007      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	75fb      	strb	r3, [r7, #23]
      break;
 8009318:	e004      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800931a:	bf00      	nop
 800931c:	e002      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009324:	7dfb      	ldrb	r3, [r7, #23]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800932c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009338:	4917      	ldr	r1, [pc, #92]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800933a:	4313      	orrs	r3, r2
 800933c:	658b      	str	r3, [r1, #88]	; 0x58
 800933e:	e001      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d035      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009354:	2b30      	cmp	r3, #48	; 0x30
 8009356:	d01c      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009358:	2b30      	cmp	r3, #48	; 0x30
 800935a:	d817      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800935c:	2b20      	cmp	r3, #32
 800935e:	d00c      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d813      	bhi.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d019      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009368:	2b10      	cmp	r3, #16
 800936a:	d10f      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936c:	4b0a      	ldr	r3, [pc, #40]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	4a09      	ldr	r2, [pc, #36]	; (8009398 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009378:	e011      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	2102      	movs	r1, #2
 8009380:	4618      	mov	r0, r3
 8009382:	f001 fdcd 	bl	800af20 <RCCEx_PLL2_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800938a:	e008      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	75fb      	strb	r3, [r7, #23]
      break;
 8009390:	e005      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009392:	bf00      	nop
 8009394:	e003      	b.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009396:	bf00      	nop
 8009398:	58024400 	.word	0x58024400
      break;
 800939c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d109      	bne.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80093a4:	4ba3      	ldr	r3, [pc, #652]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b0:	49a0      	ldr	r1, [pc, #640]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093b6:	e001      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d047      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093d0:	d030      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80093d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093d6:	d82a      	bhi.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80093d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093dc:	d02c      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80093de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093e2:	d824      	bhi.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80093e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093e8:	d018      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80093ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ee:	d81e      	bhi.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093f8:	d007      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093fa:	e018      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093fc:	4b8d      	ldr	r3, [pc, #564]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	4a8c      	ldr	r2, [pc, #560]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009408:	e017      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3304      	adds	r3, #4
 800940e:	2100      	movs	r1, #0
 8009410:	4618      	mov	r0, r3
 8009412:	f001 fd85 	bl	800af20 <RCCEx_PLL2_Config>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800941a:	e00e      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3324      	adds	r3, #36	; 0x24
 8009420:	2100      	movs	r1, #0
 8009422:	4618      	mov	r0, r3
 8009424:	f001 fe2e 	bl	800b084 <RCCEx_PLL3_Config>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800942c:	e005      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	75fb      	strb	r3, [r7, #23]
      break;
 8009432:	e002      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009434:	bf00      	nop
 8009436:	e000      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d109      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009440:	4b7c      	ldr	r3, [pc, #496]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009444:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944c:	4979      	ldr	r1, [pc, #484]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800944e:	4313      	orrs	r3, r2
 8009450:	650b      	str	r3, [r1, #80]	; 0x50
 8009452:	e001      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d049      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800946c:	d02e      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800946e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009472:	d828      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009478:	d02a      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800947a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800947e:	d822      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009484:	d026      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800948a:	d81c      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800948c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009490:	d010      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009496:	d816      	bhi.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01d      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800949c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094a0:	d111      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	3304      	adds	r3, #4
 80094a6:	2101      	movs	r1, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fd39 	bl	800af20 <RCCEx_PLL2_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094b2:	e012      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3324      	adds	r3, #36	; 0x24
 80094b8:	2101      	movs	r1, #1
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fde2 	bl	800b084 <RCCEx_PLL3_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094c4:	e009      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ca:	e006      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80094cc:	bf00      	nop
 80094ce:	e004      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80094d0:	bf00      	nop
 80094d2:	e002      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80094d4:	bf00      	nop
 80094d6:	e000      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80094d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d109      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094e0:	4b54      	ldr	r3, [pc, #336]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80094e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ec:	4951      	ldr	r1, [pc, #324]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	650b      	str	r3, [r1, #80]	; 0x50
 80094f2:	e001      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d04b      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800950a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800950e:	d02e      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009514:	d828      	bhi.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951a:	d02a      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800951c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009520:	d822      	bhi.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009522:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009526:	d026      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800952c:	d81c      	bhi.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800952e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009532:	d010      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009538:	d816      	bhi.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01d      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800953e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009542:	d111      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	3304      	adds	r3, #4
 8009548:	2101      	movs	r1, #1
 800954a:	4618      	mov	r0, r3
 800954c:	f001 fce8 	bl	800af20 <RCCEx_PLL2_Config>
 8009550:	4603      	mov	r3, r0
 8009552:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009554:	e012      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	3324      	adds	r3, #36	; 0x24
 800955a:	2101      	movs	r1, #1
 800955c:	4618      	mov	r0, r3
 800955e:	f001 fd91 	bl	800b084 <RCCEx_PLL3_Config>
 8009562:	4603      	mov	r3, r0
 8009564:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009566:	e009      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	75fb      	strb	r3, [r7, #23]
      break;
 800956c:	e006      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800956e:	bf00      	nop
 8009570:	e004      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800957a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009582:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009586:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009590:	4928      	ldr	r1, [pc, #160]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009592:	4313      	orrs	r3, r2
 8009594:	658b      	str	r3, [r1, #88]	; 0x58
 8009596:	e001      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d02f      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b0:	d00e      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80095b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b6:	d814      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d015      	beq.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80095bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095c0:	d10f      	bne.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	4a1b      	ldr	r2, [pc, #108]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095ce:	e00c      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	2101      	movs	r1, #1
 80095d6:	4618      	mov	r0, r3
 80095d8:	f001 fca2 	bl	800af20 <RCCEx_PLL2_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095e0:	e003      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	75fb      	strb	r3, [r7, #23]
      break;
 80095e6:	e000      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80095e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d109      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80095f0:	4b10      	ldr	r3, [pc, #64]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095fc:	490d      	ldr	r1, [pc, #52]	; (8009634 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80095fe:	4313      	orrs	r3, r2
 8009600:	650b      	str	r3, [r1, #80]	; 0x50
 8009602:	e001      	b.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d034      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009618:	2b03      	cmp	r3, #3
 800961a:	d81d      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800961c:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800961e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009622:	bf00      	nop
 8009624:	0800965f 	.word	0x0800965f
 8009628:	08009639 	.word	0x08009639
 800962c:	08009647 	.word	0x08009647
 8009630:	0800965f 	.word	0x0800965f
 8009634:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009638:	4bb1      	ldr	r3, [pc, #708]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	4ab0      	ldr	r2, [pc, #704]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800963e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009642:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009644:	e00c      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3304      	adds	r3, #4
 800964a:	2102      	movs	r1, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f001 fc67 	bl	800af20 <RCCEx_PLL2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009656:	e003      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
      break;
 800965c:	e000      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800965e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d109      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009666:	4ba6      	ldr	r3, [pc, #664]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966a:	f023 0203 	bic.w	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009672:	49a3      	ldr	r1, [pc, #652]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009674:	4313      	orrs	r3, r2
 8009676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009678:	e001      	b.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8086 	beq.w	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800968c:	4b9d      	ldr	r3, [pc, #628]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a9c      	ldr	r2, [pc, #624]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009698:	f7f9 fd80 	bl	800319c <HAL_GetTick>
 800969c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800969e:	e009      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a0:	f7f9 fd7c 	bl	800319c <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b64      	cmp	r3, #100	; 0x64
 80096ac:	d902      	bls.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	75fb      	strb	r3, [r7, #23]
        break;
 80096b2:	e005      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096b4:	4b93      	ldr	r3, [pc, #588]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0ef      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d166      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096c6:	4b8e      	ldr	r3, [pc, #568]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096d0:	4053      	eors	r3, r2
 80096d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d013      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096da:	4b89      	ldr	r3, [pc, #548]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096e4:	4b86      	ldr	r3, [pc, #536]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e8:	4a85      	ldr	r2, [pc, #532]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096f0:	4b83      	ldr	r3, [pc, #524]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f4:	4a82      	ldr	r2, [pc, #520]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096fc:	4a80      	ldr	r2, [pc, #512]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800970c:	d115      	bne.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970e:	f7f9 fd45 	bl	800319c <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009714:	e00b      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009716:	f7f9 fd41 	bl	800319c <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	f241 3288 	movw	r2, #5000	; 0x1388
 8009724:	4293      	cmp	r3, r2
 8009726:	d902      	bls.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	75fb      	strb	r3, [r7, #23]
            break;
 800972c:	e005      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800972e:	4b74      	ldr	r3, [pc, #464]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0ed      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d126      	bne.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800974a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800974e:	d10d      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009750:	4b6b      	ldr	r3, [pc, #428]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800975e:	0919      	lsrs	r1, r3, #4
 8009760:	4b69      	ldr	r3, [pc, #420]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009762:	400b      	ands	r3, r1
 8009764:	4966      	ldr	r1, [pc, #408]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009766:	4313      	orrs	r3, r2
 8009768:	610b      	str	r3, [r1, #16]
 800976a:	e005      	b.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800976c:	4b64      	ldr	r3, [pc, #400]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	4a63      	ldr	r2, [pc, #396]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009772:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009776:	6113      	str	r3, [r2, #16]
 8009778:	4b61      	ldr	r3, [pc, #388]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800977a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009786:	495e      	ldr	r1, [pc, #376]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009788:	4313      	orrs	r3, r2
 800978a:	670b      	str	r3, [r1, #112]	; 0x70
 800978c:	e004      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	75bb      	strb	r3, [r7, #22]
 8009792:	e001      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d07e      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097a8:	2b28      	cmp	r3, #40	; 0x28
 80097aa:	d867      	bhi.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80097ac:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	08009883 	.word	0x08009883
 80097b8:	0800987d 	.word	0x0800987d
 80097bc:	0800987d 	.word	0x0800987d
 80097c0:	0800987d 	.word	0x0800987d
 80097c4:	0800987d 	.word	0x0800987d
 80097c8:	0800987d 	.word	0x0800987d
 80097cc:	0800987d 	.word	0x0800987d
 80097d0:	0800987d 	.word	0x0800987d
 80097d4:	08009859 	.word	0x08009859
 80097d8:	0800987d 	.word	0x0800987d
 80097dc:	0800987d 	.word	0x0800987d
 80097e0:	0800987d 	.word	0x0800987d
 80097e4:	0800987d 	.word	0x0800987d
 80097e8:	0800987d 	.word	0x0800987d
 80097ec:	0800987d 	.word	0x0800987d
 80097f0:	0800987d 	.word	0x0800987d
 80097f4:	0800986b 	.word	0x0800986b
 80097f8:	0800987d 	.word	0x0800987d
 80097fc:	0800987d 	.word	0x0800987d
 8009800:	0800987d 	.word	0x0800987d
 8009804:	0800987d 	.word	0x0800987d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	0800987d 	.word	0x0800987d
 8009810:	0800987d 	.word	0x0800987d
 8009814:	08009883 	.word	0x08009883
 8009818:	0800987d 	.word	0x0800987d
 800981c:	0800987d 	.word	0x0800987d
 8009820:	0800987d 	.word	0x0800987d
 8009824:	0800987d 	.word	0x0800987d
 8009828:	0800987d 	.word	0x0800987d
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800987d 	.word	0x0800987d
 8009834:	08009883 	.word	0x08009883
 8009838:	0800987d 	.word	0x0800987d
 800983c:	0800987d 	.word	0x0800987d
 8009840:	0800987d 	.word	0x0800987d
 8009844:	0800987d 	.word	0x0800987d
 8009848:	0800987d 	.word	0x0800987d
 800984c:	0800987d 	.word	0x0800987d
 8009850:	0800987d 	.word	0x0800987d
 8009854:	08009883 	.word	0x08009883
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	2101      	movs	r1, #1
 800985e:	4618      	mov	r0, r3
 8009860:	f001 fb5e 	bl	800af20 <RCCEx_PLL2_Config>
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009868:	e00c      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	2101      	movs	r1, #1
 8009870:	4618      	mov	r0, r3
 8009872:	f001 fc07 	bl	800b084 <RCCEx_PLL3_Config>
 8009876:	4603      	mov	r3, r0
 8009878:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800987a:	e003      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	75fb      	strb	r3, [r7, #23]
      break;
 8009880:	e000      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8009882:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800988e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009896:	491a      	ldr	r1, [pc, #104]	; (8009900 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009898:	4313      	orrs	r3, r2
 800989a:	654b      	str	r3, [r1, #84]	; 0x54
 800989c:	e001      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d03e      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098b2:	2b05      	cmp	r3, #5
 80098b4:	d820      	bhi.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80098b6:	a201      	add	r2, pc, #4	; (adr r2, 80098bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80098b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098bc:	0800990d 	.word	0x0800990d
 80098c0:	080098d5 	.word	0x080098d5
 80098c4:	080098e7 	.word	0x080098e7
 80098c8:	0800990d 	.word	0x0800990d
 80098cc:	0800990d 	.word	0x0800990d
 80098d0:	0800990d 	.word	0x0800990d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	3304      	adds	r3, #4
 80098d8:	2101      	movs	r1, #1
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fb20 	bl	800af20 <RCCEx_PLL2_Config>
 80098e0:	4603      	mov	r3, r0
 80098e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098e4:	e013      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3324      	adds	r3, #36	; 0x24
 80098ea:	2101      	movs	r1, #1
 80098ec:	4618      	mov	r0, r3
 80098ee:	f001 fbc9 	bl	800b084 <RCCEx_PLL3_Config>
 80098f2:	4603      	mov	r3, r0
 80098f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80098f6:	e00a      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
      break;
 80098fc:	e007      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80098fe:	bf00      	nop
 8009900:	58024400 	.word	0x58024400
 8009904:	58024800 	.word	0x58024800
 8009908:	00ffffcf 	.word	0x00ffffcf
      break;
 800990c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d109      	bne.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009914:	4b9f      	ldr	r3, [pc, #636]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009918:	f023 0207 	bic.w	r2, r3, #7
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	499c      	ldr	r1, [pc, #624]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009922:	4313      	orrs	r3, r2
 8009924:	654b      	str	r3, [r1, #84]	; 0x54
 8009926:	e001      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0304 	and.w	r3, r3, #4
 8009934:	2b00      	cmp	r3, #0
 8009936:	d039      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993e:	2b05      	cmp	r3, #5
 8009940:	d820      	bhi.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	0800998b 	.word	0x0800998b
 800994c:	08009961 	.word	0x08009961
 8009950:	08009973 	.word	0x08009973
 8009954:	0800998b 	.word	0x0800998b
 8009958:	0800998b 	.word	0x0800998b
 800995c:	0800998b 	.word	0x0800998b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3304      	adds	r3, #4
 8009964:	2101      	movs	r1, #1
 8009966:	4618      	mov	r0, r3
 8009968:	f001 fada 	bl	800af20 <RCCEx_PLL2_Config>
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009970:	e00c      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3324      	adds	r3, #36	; 0x24
 8009976:	2101      	movs	r1, #1
 8009978:	4618      	mov	r0, r3
 800997a:	f001 fb83 	bl	800b084 <RCCEx_PLL3_Config>
 800997e:	4603      	mov	r3, r0
 8009980:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009982:	e003      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	75fb      	strb	r3, [r7, #23]
      break;
 8009988:	e000      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800998a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800998c:	7dfb      	ldrb	r3, [r7, #23]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009992:	4b80      	ldr	r3, [pc, #512]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009996:	f023 0207 	bic.w	r2, r3, #7
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099a0:	497c      	ldr	r1, [pc, #496]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	658b      	str	r3, [r1, #88]	; 0x58
 80099a6:	e001      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0320 	and.w	r3, r3, #32
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d04b      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c2:	d02e      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80099c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c8:	d828      	bhi.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ce:	d02a      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d4:	d822      	bhi.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80099d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099da:	d026      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80099dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099e0:	d81c      	bhi.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80099e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e6:	d010      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80099e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ec:	d816      	bhi.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01d      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80099f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099f6:	d111      	bne.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f001 fa8e 	bl	800af20 <RCCEx_PLL2_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009a08:	e012      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3324      	adds	r3, #36	; 0x24
 8009a0e:	2102      	movs	r1, #2
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fb37 	bl	800b084 <RCCEx_PLL3_Config>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009a1a:	e009      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a20:	e006      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009a22:	bf00      	nop
 8009a24:	e004      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8009a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a36:	4b57      	ldr	r3, [pc, #348]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a44:	4953      	ldr	r1, [pc, #332]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	654b      	str	r3, [r1, #84]	; 0x54
 8009a4a:	e001      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d04b      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a66:	d02e      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8009a68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a6c:	d828      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a72:	d02a      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a78:	d822      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a7e:	d026      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a84:	d81c      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8a:	d010      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8009a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a90:	d816      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d01d      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9a:	d111      	bne.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fa3c 	bl	800af20 <RCCEx_PLL2_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009aac:	e012      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3324      	adds	r3, #36	; 0x24
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f001 fae5 	bl	800b084 <RCCEx_PLL3_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009abe:	e009      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ac4:	e006      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009ac6:	bf00      	nop
 8009ac8:	e004      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009aca:	bf00      	nop
 8009acc:	e002      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009ace:	bf00      	nop
 8009ad0:	e000      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8009ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ada:	4b2e      	ldr	r3, [pc, #184]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ade:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ae8:	492a      	ldr	r1, [pc, #168]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	658b      	str	r3, [r1, #88]	; 0x58
 8009aee:	e001      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af0:	7dfb      	ldrb	r3, [r7, #23]
 8009af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d04d      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b0a:	d02e      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8009b0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b10:	d828      	bhi.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b16:	d02a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1c:	d822      	bhi.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009b1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b22:	d026      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009b24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b28:	d81c      	bhi.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b2e:	d010      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8009b30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b34:	d816      	bhi.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d01d      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b3e:	d111      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3304      	adds	r3, #4
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f001 f9ea 	bl	800af20 <RCCEx_PLL2_Config>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b50:	e012      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3324      	adds	r3, #36	; 0x24
 8009b56:	2102      	movs	r1, #2
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f001 fa93 	bl	800b084 <RCCEx_PLL3_Config>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b62:	e009      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	75fb      	strb	r3, [r7, #23]
      break;
 8009b68:	e006      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e004      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e002      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b72:	bf00      	nop
 8009b74:	e000      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8009b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10c      	bne.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b7e:	4b05      	ldr	r3, [pc, #20]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b8c:	4901      	ldr	r1, [pc, #4]	; (8009b94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	658b      	str	r3, [r1, #88]	; 0x58
 8009b92:	e003      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8009b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0308 	and.w	r3, r3, #8
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d018      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bb0:	d10a      	bne.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3324      	adds	r3, #36	; 0x24
 8009bb6:	2102      	movs	r1, #2
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 fa63 	bl	800b084 <RCCEx_PLL3_Config>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d001      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009bc8:	4b8a      	ldr	r3, [pc, #552]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bd4:	4987      	ldr	r1, [pc, #540]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0310 	and.w	r3, r3, #16
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d01a      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf0:	d10a      	bne.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3324      	adds	r3, #36	; 0x24
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 fa43 	bl	800b084 <RCCEx_PLL3_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c08:	4b7a      	ldr	r3, [pc, #488]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c16:	4977      	ldr	r1, [pc, #476]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d034      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c32:	d01d      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c38:	d817      	bhi.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c42:	d009      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009c44:	e011      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 f967 	bl	800af20 <RCCEx_PLL2_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c56:	e00c      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	3324      	adds	r3, #36	; 0x24
 8009c5c:	2102      	movs	r1, #2
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 fa10 	bl	800b084 <RCCEx_PLL3_Config>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6e:	e000      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c78:	4b5e      	ldr	r3, [pc, #376]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c86:	495b      	ldr	r1, [pc, #364]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	658b      	str	r3, [r1, #88]	; 0x58
 8009c8c:	e001      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d033      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ca8:	d01c      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cae:	d816      	bhi.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009cb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cb4:	d003      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cba:	d007      	beq.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009cbc:	e00f      	b.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbe:	4b4d      	ldr	r3, [pc, #308]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc2:	4a4c      	ldr	r2, [pc, #304]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cca:	e00c      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3324      	adds	r3, #36	; 0x24
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 f9d6 	bl	800b084 <RCCEx_PLL3_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cdc:	e003      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce2:	e000      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10a      	bne.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cec:	4b41      	ldr	r3, [pc, #260]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cfa:	493e      	ldr	r1, [pc, #248]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	654b      	str	r3, [r1, #84]	; 0x54
 8009d00:	e001      	b.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d029      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8009d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d1e:	d007      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009d20:	e00f      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d22:	4b34      	ldr	r3, [pc, #208]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d26:	4a33      	ldr	r2, [pc, #204]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d2e:	e00b      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	3304      	adds	r3, #4
 8009d34:	2102      	movs	r1, #2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f001 f8f2 	bl	800af20 <RCCEx_PLL2_Config>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d40:	e002      	b.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	75fb      	strb	r3, [r7, #23]
      break;
 8009d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d48:	7dfb      	ldrb	r3, [r7, #23]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d4e:	4b29      	ldr	r3, [pc, #164]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d5a:	4926      	ldr	r1, [pc, #152]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d60:	e001      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3324      	adds	r3, #36	; 0x24
 8009d76:	2102      	movs	r1, #2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f001 f983 	bl	800b084 <RCCEx_PLL3_Config>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d001      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d033      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d9c:	d017      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8009d9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009da2:	d811      	bhi.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da8:	d013      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8009daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dae:	d80b      	bhi.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d010      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8009db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009db8:	d106      	bne.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dba:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	4a0d      	ldr	r2, [pc, #52]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009dc6:	e007      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	75fb      	strb	r3, [r7, #23]
      break;
 8009dcc:	e004      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8009dd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10c      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009dde:	4b05      	ldr	r3, [pc, #20]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dea:	4902      	ldr	r1, [pc, #8]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	654b      	str	r3, [r1, #84]	; 0x54
 8009df0:	e004      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8009df2:	bf00      	nop
 8009df4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e08:	4b29      	ldr	r3, [pc, #164]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e14:	4926      	ldr	r1, [pc, #152]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d008      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e26:	4b22      	ldr	r3, [pc, #136]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e32:	491f      	ldr	r1, [pc, #124]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00d      	beq.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e44:	4b1a      	ldr	r3, [pc, #104]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	4a19      	ldr	r2, [pc, #100]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e4e:	6113      	str	r3, [r2, #16]
 8009e50:	4b17      	ldr	r3, [pc, #92]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e5a:	4915      	ldr	r1, [pc, #84]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da08      	bge.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e68:	4b11      	ldr	r3, [pc, #68]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e74:	490e      	ldr	r1, [pc, #56]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e86:	4b0a      	ldr	r3, [pc, #40]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e94:	4906      	ldr	r1, [pc, #24]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	e000      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	58024400 	.word	0x58024400

08009eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b090      	sub	sp, #64	; 0x40
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec2:	f040 8089 	bne.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8009ec6:	4b95      	ldr	r3, [pc, #596]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eca:	f003 0307 	and.w	r3, r3, #7
 8009ece:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d87d      	bhi.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef1 	.word	0x08009ef1
 8009ee0:	08009f15 	.word	0x08009f15
 8009ee4:	08009f39 	.word	0x08009f39
 8009ee8:	08009fcd 	.word	0x08009fcd
 8009eec:	08009f5d 	.word	0x08009f5d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ef0:	4b8a      	ldr	r3, [pc, #552]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009efc:	d107      	bne.n	8009f0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 feba 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f0c:	e3ef      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f12:	e3ec      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f14:	4b81      	ldr	r3, [pc, #516]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f20:	d107      	bne.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f22:	f107 0318 	add.w	r3, r7, #24
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fc00 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f30:	e3dd      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009f32:	2300      	movs	r3, #0
 8009f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f36:	e3da      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f38:	4b78      	ldr	r3, [pc, #480]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f44:	d107      	bne.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f46:	f107 030c 	add.w	r3, r7, #12
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 fd42 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009f54:	e3cb      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009f5a:	e3c8      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009f5c:	4b6f      	ldr	r3, [pc, #444]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f66:	4b6d      	ldr	r3, [pc, #436]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 0304 	and.w	r3, r3, #4
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d10c      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8009f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d109      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f78:	4b68      	ldr	r3, [pc, #416]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	08db      	lsrs	r3, r3, #3
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	4a67      	ldr	r2, [pc, #412]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8009f84:	fa22 f303 	lsr.w	r3, r2, r3
 8009f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f8a:	e01e      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f8c:	4b63      	ldr	r3, [pc, #396]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f98:	d106      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa0:	d102      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009fa2:	4b60      	ldr	r3, [pc, #384]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa6:	e010      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fa8:	4b5c      	ldr	r3, [pc, #368]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fb4:	d106      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fbc:	d102      	bne.n	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009fbe:	4b5a      	ldr	r3, [pc, #360]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc2:	e002      	b.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009fc8:	e391      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009fca:	e390      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009fcc:	4b57      	ldr	r3, [pc, #348]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd0:	e38d      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009fd6:	e38a      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fde:	f040 80a7 	bne.w	800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8009fe2:	4b4e      	ldr	r3, [pc, #312]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8009fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009fea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ff2:	d054      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ffa:	f200 808b 	bhi.w	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a004:	f000 8083 	beq.w	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a00e:	f200 8081 	bhi.w	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a018:	d02f      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a020:	d878      	bhi.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	2b00      	cmp	r3, #0
 800a026:	d004      	beq.n	800a032 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a02e:	d012      	beq.n	800a056 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800a030:	e070      	b.n	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a032:	4b3a      	ldr	r3, [pc, #232]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a03e:	d107      	bne.n	800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a044:	4618      	mov	r0, r3
 800a046:	f000 fe19 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a04e:	e34e      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a054:	e34b      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a056:	4b31      	ldr	r3, [pc, #196]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a062:	d107      	bne.n	800a074 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a064:	f107 0318 	add.w	r3, r7, #24
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 fb5f 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a072:	e33c      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a074:	2300      	movs	r3, #0
 800a076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a078:	e339      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a07a:	4b28      	ldr	r3, [pc, #160]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a088:	f107 030c 	add.w	r3, r7, #12
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fca1 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a096:	e32a      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a09c:	e327      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a09e:	4b1f      	ldr	r3, [pc, #124]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0a8:	4b1c      	ldr	r3, [pc, #112]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d10c      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800a0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a0ba:	4b18      	ldr	r3, [pc, #96]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	4a16      	ldr	r2, [pc, #88]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0cc:	e01e      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0ce:	4b13      	ldr	r3, [pc, #76]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0da:	d106      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0e2:	d102      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a0e4:	4b0f      	ldr	r3, [pc, #60]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e8:	e010      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0ea:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0f6:	d106      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fe:	d102      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a100:	4b09      	ldr	r3, [pc, #36]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a102:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a104:	e002      	b.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a10a:	e2f0      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a10c:	e2ef      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a112:	e2ec      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a118:	e2e9      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a11a:	bf00      	nop
 800a11c:	58024400 	.word	0x58024400
 800a120:	03d09000 	.word	0x03d09000
 800a124:	003d0900 	.word	0x003d0900
 800a128:	007a1200 	.word	0x007a1200
 800a12c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a136:	f040 809c 	bne.w	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a13a:	4b9d      	ldr	r3, [pc, #628]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a142:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a14a:	d054      	beq.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a152:	f200 808b 	bhi.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a15c:	f000 8083 	beq.w	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a162:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a166:	f200 8081 	bhi.w	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a170:	d02f      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a178:	d878      	bhi.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d004      	beq.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a186:	d012      	beq.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a188:	e070      	b.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a18a:	4b89      	ldr	r3, [pc, #548]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a196:	d107      	bne.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fd6d 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1a6:	e2a2      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ac:	e29f      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ae:	4b80      	ldr	r3, [pc, #512]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1ba:	d107      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1bc:	f107 0318 	add.w	r3, r7, #24
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 fab3 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a1ca:	e290      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1d0:	e28d      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1d2:	4b77      	ldr	r3, [pc, #476]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1de:	d107      	bne.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1e0:	f107 030c 	add.w	r3, r7, #12
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f000 fbf5 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1ee:	e27e      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1f4:	e27b      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a1f6:	4b6e      	ldr	r3, [pc, #440]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a200:	4b6b      	ldr	r3, [pc, #428]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b04      	cmp	r3, #4
 800a20a:	d10c      	bne.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d109      	bne.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a212:	4b67      	ldr	r3, [pc, #412]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	08db      	lsrs	r3, r3, #3
 800a218:	f003 0303 	and.w	r3, r3, #3
 800a21c:	4a65      	ldr	r2, [pc, #404]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a21e:	fa22 f303 	lsr.w	r3, r2, r3
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a224:	e01e      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a226:	4b62      	ldr	r3, [pc, #392]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a232:	d106      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800a234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a23a:	d102      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a23c:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a240:	e010      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a242:	4b5b      	ldr	r3, [pc, #364]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a24a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a24e:	d106      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800a250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a256:	d102      	bne.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a258:	4b58      	ldr	r3, [pc, #352]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a25a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a25c:	e002      	b.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a262:	e244      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a264:	e243      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a266:	4b56      	ldr	r3, [pc, #344]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a26a:	e240      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a270:	e23d      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a278:	f040 80a7 	bne.w	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a27c:	4b4c      	ldr	r3, [pc, #304]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a27e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a280:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a284:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a28c:	d055      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a294:	f200 8096 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a29e:	f000 8084 	beq.w	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2a8:	f200 808c 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b2:	d030      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ba:	f200 8083 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ca:	d012      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800a2cc:	e07a      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ce:	4b38      	ldr	r3, [pc, #224]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2da:	d107      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fccb 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a2ea:	e200      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2f0:	e1fd      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f2:	4b2f      	ldr	r3, [pc, #188]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fe:	d107      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a300:	f107 0318 	add.w	r3, r7, #24
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fa11 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a30e:	e1ee      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a314:	e1eb      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fb53 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a332:	e1dc      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a338:	e1d9      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a33a:	4b1d      	ldr	r3, [pc, #116]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a342:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a344:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d10c      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800a350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a356:	4b16      	ldr	r3, [pc, #88]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	08db      	lsrs	r3, r3, #3
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	4a14      	ldr	r2, [pc, #80]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a368:	e01e      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a36a:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a376:	d106      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37e:	d102      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a380:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a384:	e010      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a386:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a39a:	d102      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a39c:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a0:	e002      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3a6:	e1a2      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a3a8:	e1a1      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ae:	e19e      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	03d09000 	.word	0x03d09000
 800a3b8:	003d0900 	.word	0x003d0900
 800a3bc:	007a1200 	.word	0x007a1200
 800a3c0:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3c8:	e191      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a3d0:	d173      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a3d2:	4b9b      	ldr	r3, [pc, #620]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3e2:	d02f      	beq.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ea:	d863      	bhi.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f8:	d012      	beq.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800a3fa:	e05b      	b.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fc:	4b90      	ldr	r3, [pc, #576]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0318 	add.w	r3, r7, #24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f98c 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a418:	e169      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a41e:	e166      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a420:	4b87      	ldr	r3, [pc, #540]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42c:	d107      	bne.n	800a43e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a42e:	f107 030c 	add.w	r3, r7, #12
 800a432:	4618      	mov	r0, r3
 800a434:	f000 face 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a43c:	e157      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a43e:	2300      	movs	r3, #0
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a442:	e154      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a444:	4b7e      	ldr	r3, [pc, #504]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a44c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a44e:	4b7c      	ldr	r3, [pc, #496]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b04      	cmp	r3, #4
 800a458:	d10c      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800a45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a460:	4b77      	ldr	r3, [pc, #476]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	08db      	lsrs	r3, r3, #3
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	4a76      	ldr	r2, [pc, #472]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a46c:	fa22 f303 	lsr.w	r3, r2, r3
 800a470:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a472:	e01e      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a474:	4b72      	ldr	r3, [pc, #456]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a480:	d106      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a488:	d102      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a48a:	4b6f      	ldr	r3, [pc, #444]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a48e:	e010      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a490:	4b6b      	ldr	r3, [pc, #428]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a49c:	d106      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4a4:	d102      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a4a6:	4b69      	ldr	r3, [pc, #420]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4aa:	e002      	b.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a4b0:	e11d      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a4b2:	e11c      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4b8:	e119      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c0:	d133      	bne.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a4c2:	4b5f      	ldr	r3, [pc, #380]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d004      	beq.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4d8:	d012      	beq.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a4da:	e023      	b.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4dc:	4b58      	ldr	r3, [pc, #352]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4e8:	d107      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fbc4 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a4f8:	e0f9      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4fe:	e0f6      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a500:	4b4f      	ldr	r3, [pc, #316]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a50c:	d107      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a50e:	f107 0318 	add.w	r3, r7, #24
 800a512:	4618      	mov	r0, r3
 800a514:	f000 f90a 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a51c:	e0e7      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a522:	e0e4      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a528:	e0e1      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a530:	f040 808e 	bne.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a534:	4b42      	ldr	r3, [pc, #264]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a538:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a53c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a544:	d06b      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a54c:	d874      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a554:	d056      	beq.n	800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55c:	d86c      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a564:	d03b      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a56c:	d864      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a574:	d021      	beq.n	800a5ba <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a57c:	d85c      	bhi.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a58a:	d004      	beq.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800a58c:	e054      	b.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a58e:	f000 f8b7 	bl	800a700 <HAL_RCCEx_GetD3PCLK1Freq>
 800a592:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a594:	e0ab      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a596:	4b2a      	ldr	r3, [pc, #168]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5a2:	d107      	bne.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a4:	f107 0318 	add.w	r3, r7, #24
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f8bf 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a5b2:	e09c      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5b8:	e099      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ba:	4b21      	ldr	r3, [pc, #132]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5c8:	f107 030c 	add.w	r3, r7, #12
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f000 fa01 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a5d6:	e08a      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5dc:	e087      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5de:	4b18      	ldr	r3, [pc, #96]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d109      	bne.n	800a5fe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5ea:	4b15      	ldr	r3, [pc, #84]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	08db      	lsrs	r3, r3, #3
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	4a13      	ldr	r2, [pc, #76]	; (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a5fc:	e077      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a602:	e074      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a610:	d102      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a614:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a616:	e06a      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a61c:	e067      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a61e:	4b08      	ldr	r3, [pc, #32]	; (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a62a:	d102      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800a62c:	4b07      	ldr	r3, [pc, #28]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800a62e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a630:	e05d      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a636:	e05a      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a63c:	e057      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a63e:	bf00      	nop
 800a640:	58024400 	.word	0x58024400
 800a644:	03d09000 	.word	0x03d09000
 800a648:	003d0900 	.word	0x003d0900
 800a64c:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a656:	d148      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a658:	4b27      	ldr	r3, [pc, #156]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a668:	d02a      	beq.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a670:	d838      	bhi.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a67e:	d00d      	beq.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800a680:	e030      	b.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a682:	4b1d      	ldr	r3, [pc, #116]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a68a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a68e:	d102      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800a690:	4b1a      	ldr	r3, [pc, #104]	; (800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a694:	e02b      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a69a:	e028      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a69c:	4b16      	ldr	r3, [pc, #88]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6a8:	d107      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fae4 	bl	800ac7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a6b8:	e019      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6be:	e016      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6c0:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6cc:	d107      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ce:	f107 0318 	add.w	r3, r7, #24
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 f82a 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a6dc:	e007      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e2:	e004      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6e8:	e001      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3740      	adds	r7, #64	; 0x40
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	58024400 	.word	0x58024400
 800a6fc:	007a1200 	.word	0x007a1200

0800a700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a704:	f7fe fc80 	bl	8009008 <HAL_RCC_GetHCLKFreq>
 800a708:	4602      	mov	r2, r0
 800a70a:	4b06      	ldr	r3, [pc, #24]	; (800a724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	091b      	lsrs	r3, r3, #4
 800a710:	f003 0307 	and.w	r3, r3, #7
 800a714:	4904      	ldr	r1, [pc, #16]	; (800a728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a716:	5ccb      	ldrb	r3, [r1, r3]
 800a718:	f003 031f 	and.w	r3, r3, #31
 800a71c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a720:	4618      	mov	r0, r3
 800a722:	bd80      	pop	{r7, pc}
 800a724:	58024400 	.word	0x58024400
 800a728:	0801b2bc 	.word	0x0801b2bc

0800a72c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b089      	sub	sp, #36	; 0x24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a734:	4ba1      	ldr	r3, [pc, #644]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a738:	f003 0303 	and.w	r3, r3, #3
 800a73c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a73e:	4b9f      	ldr	r3, [pc, #636]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a742:	0b1b      	lsrs	r3, r3, #12
 800a744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a74a:	4b9c      	ldr	r3, [pc, #624]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74e:	091b      	lsrs	r3, r3, #4
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a756:	4b99      	ldr	r3, [pc, #612]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75a:	08db      	lsrs	r3, r3, #3
 800a75c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	fb02 f303 	mul.w	r3, r2, r3
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 8111 	beq.w	800a99c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	f000 8083 	beq.w	800a888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	2b02      	cmp	r3, #2
 800a786:	f200 80a1 	bhi.w	800a8cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d003      	beq.n	800a798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d056      	beq.n	800a844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a796:	e099      	b.n	800a8cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a798:	4b88      	ldr	r3, [pc, #544]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d02d      	beq.n	800a800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a7a4:	4b85      	ldr	r3, [pc, #532]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	08db      	lsrs	r3, r3, #3
 800a7aa:	f003 0303 	and.w	r3, r3, #3
 800a7ae:	4a84      	ldr	r2, [pc, #528]	; (800a9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	ee07 3a90 	vmov	s15, r3
 800a7bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ce:	4b7b      	ldr	r3, [pc, #492]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a7fe:	e087      	b.n	800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	ee07 3a90 	vmov	s15, r3
 800a806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a80a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a812:	4b6a      	ldr	r3, [pc, #424]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a822:	ed97 6a03 	vldr	s12, [r7, #12]
 800a826:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a83e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a842:	e065      	b.n	800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	ee07 3a90 	vmov	s15, r3
 800a84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a84e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a856:	4b59      	ldr	r3, [pc, #356]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a866:	ed97 6a03 	vldr	s12, [r7, #12]
 800a86a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a886:	e043      	b.n	800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a89a:	4b48      	ldr	r3, [pc, #288]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a2:	ee07 3a90 	vmov	s15, r3
 800a8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8ca:	e021      	b.n	800a910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	ee07 3a90 	vmov	s15, r3
 800a8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8de:	4b37      	ldr	r3, [pc, #220]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e6:	ee07 3a90 	vmov	s15, r3
 800a8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a90a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a90e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a910:	4b2a      	ldr	r3, [pc, #168]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a914:	0a5b      	lsrs	r3, r3, #9
 800a916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a91a:	ee07 3a90 	vmov	s15, r3
 800a91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a92a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a936:	ee17 2a90 	vmov	r2, s15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a93e:	4b1f      	ldr	r3, [pc, #124]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a954:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a958:	edd7 6a07 	vldr	s13, [r7, #28]
 800a95c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a964:	ee17 2a90 	vmov	r2, s15
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a96c:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a970:	0e1b      	lsrs	r3, r3, #24
 800a972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a982:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a986:	edd7 6a07 	vldr	s13, [r7, #28]
 800a98a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a992:	ee17 2a90 	vmov	r2, s15
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a99a:	e008      	b.n	800a9ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	609a      	str	r2, [r3, #8]
}
 800a9ae:	bf00      	nop
 800a9b0:	3724      	adds	r7, #36	; 0x24
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop
 800a9bc:	58024400 	.word	0x58024400
 800a9c0:	03d09000 	.word	0x03d09000
 800a9c4:	46000000 	.word	0x46000000
 800a9c8:	4c742400 	.word	0x4c742400
 800a9cc:	4a742400 	.word	0x4a742400
 800a9d0:	4af42400 	.word	0x4af42400

0800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b089      	sub	sp, #36	; 0x24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9dc:	4ba1      	ldr	r3, [pc, #644]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e0:	f003 0303 	and.w	r3, r3, #3
 800a9e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a9e6:	4b9f      	ldr	r3, [pc, #636]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ea:	0d1b      	lsrs	r3, r3, #20
 800a9ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a9f2:	4b9c      	ldr	r3, [pc, #624]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a9fe:	4b99      	ldr	r3, [pc, #612]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa02:	08db      	lsrs	r3, r3, #3
 800aa04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	fb02 f303 	mul.w	r3, r2, r3
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8111 	beq.w	800ac44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	f000 8083 	beq.w	800ab30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	f200 80a1 	bhi.w	800ab74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d003      	beq.n	800aa40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d056      	beq.n	800aaec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa3e:	e099      	b.n	800ab74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa40:	4b88      	ldr	r3, [pc, #544]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f003 0320 	and.w	r3, r3, #32
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d02d      	beq.n	800aaa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa4c:	4b85      	ldr	r3, [pc, #532]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	08db      	lsrs	r3, r3, #3
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	4a84      	ldr	r2, [pc, #528]	; (800ac68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa58:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	ee07 3a90 	vmov	s15, r3
 800aa64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa76:	4b7b      	ldr	r3, [pc, #492]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa86:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aaa6:	e087      	b.n	800abb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaba:	4b6a      	ldr	r3, [pc, #424]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aabc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aace:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaea:	e065      	b.n	800abb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafe:	4b59      	ldr	r3, [pc, #356]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2e:	e043      	b.n	800abb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab42:	4b48      	ldr	r3, [pc, #288]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab72:	e021      	b.n	800abb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab86:	4b37      	ldr	r3, [pc, #220]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800abb8:	4b2a      	ldr	r3, [pc, #168]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbc:	0a5b      	lsrs	r3, r3, #9
 800abbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abde:	ee17 2a90 	vmov	r2, s15
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800abe6:	4b1f      	ldr	r3, [pc, #124]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abea:	0c1b      	lsrs	r3, r3, #16
 800abec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf0:	ee07 3a90 	vmov	s15, r3
 800abf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac0c:	ee17 2a90 	vmov	r2, s15
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ac14:	4b13      	ldr	r3, [pc, #76]	; (800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	0e1b      	lsrs	r3, r3, #24
 800ac1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3a:	ee17 2a90 	vmov	r2, s15
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac42:	e008      	b.n	800ac56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	609a      	str	r2, [r3, #8]
}
 800ac56:	bf00      	nop
 800ac58:	3724      	adds	r7, #36	; 0x24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	58024400 	.word	0x58024400
 800ac68:	03d09000 	.word	0x03d09000
 800ac6c:	46000000 	.word	0x46000000
 800ac70:	4c742400 	.word	0x4c742400
 800ac74:	4a742400 	.word	0x4a742400
 800ac78:	4af42400 	.word	0x4af42400

0800ac7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b089      	sub	sp, #36	; 0x24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac84:	4ba0      	ldr	r3, [pc, #640]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac88:	f003 0303 	and.w	r3, r3, #3
 800ac8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ac8e:	4b9e      	ldr	r3, [pc, #632]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	091b      	lsrs	r3, r3, #4
 800ac94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac9a:	4b9b      	ldr	r3, [pc, #620]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800aca4:	4b98      	ldr	r3, [pc, #608]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca8:	08db      	lsrs	r3, r3, #3
 800acaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	fb02 f303 	mul.w	r3, r2, r3
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8111 	beq.w	800aeea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b02      	cmp	r3, #2
 800accc:	f000 8083 	beq.w	800add6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	f200 80a1 	bhi.w	800ae1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d056      	beq.n	800ad92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ace4:	e099      	b.n	800ae1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ace6:	4b88      	ldr	r3, [pc, #544]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f003 0320 	and.w	r3, r3, #32
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d02d      	beq.n	800ad4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800acf2:	4b85      	ldr	r3, [pc, #532]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	08db      	lsrs	r3, r3, #3
 800acf8:	f003 0303 	and.w	r3, r3, #3
 800acfc:	4a83      	ldr	r2, [pc, #524]	; (800af0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800acfe:	fa22 f303 	lsr.w	r3, r2, r3
 800ad02:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1c:	4b7a      	ldr	r3, [pc, #488]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad30:	eddf 5a77 	vldr	s11, [pc, #476]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad4c:	e087      	b.n	800ae5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	ee07 3a90 	vmov	s15, r3
 800ad54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800af14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad60:	4b69      	ldr	r3, [pc, #420]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad68:	ee07 3a90 	vmov	s15, r3
 800ad6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad70:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad74:	eddf 5a66 	vldr	s11, [pc, #408]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad90:	e065      	b.n	800ae5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800af18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ada0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada4:	4b58      	ldr	r3, [pc, #352]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ada6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800adb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add4:	e043      	b.n	800ae5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800af1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ade4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ade8:	4b47      	ldr	r3, [pc, #284]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae18:	e021      	b.n	800ae5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	ee07 3a90 	vmov	s15, r3
 800ae20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800af14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae2c:	4b36      	ldr	r3, [pc, #216]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae40:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800ae5e:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae62:	0a5b      	lsrs	r3, r3, #9
 800ae64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae68:	ee07 3a90 	vmov	s15, r3
 800ae6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae78:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae84:	ee17 2a90 	vmov	r2, s15
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800ae8c:	4b1e      	ldr	r3, [pc, #120]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	0c1b      	lsrs	r3, r3, #16
 800ae92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeb2:	ee17 2a90 	vmov	r2, s15
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800aeba:	4b13      	ldr	r3, [pc, #76]	; (800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aebe:	0e1b      	lsrs	r3, r3, #24
 800aec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee0:	ee17 2a90 	vmov	r2, s15
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aee8:	e008      	b.n	800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	609a      	str	r2, [r3, #8]
}
 800aefc:	bf00      	nop
 800aefe:	3724      	adds	r7, #36	; 0x24
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	58024400 	.word	0x58024400
 800af0c:	03d09000 	.word	0x03d09000
 800af10:	46000000 	.word	0x46000000
 800af14:	4c742400 	.word	0x4c742400
 800af18:	4a742400 	.word	0x4a742400
 800af1c:	4af42400 	.word	0x4af42400

0800af20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af2e:	4b53      	ldr	r3, [pc, #332]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	2b03      	cmp	r3, #3
 800af38:	d101      	bne.n	800af3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e099      	b.n	800b072 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af3e:	4b4f      	ldr	r3, [pc, #316]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a4e      	ldr	r2, [pc, #312]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af4a:	f7f8 f927 	bl	800319c <HAL_GetTick>
 800af4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af50:	e008      	b.n	800af64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800af52:	f7f8 f923 	bl	800319c <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d901      	bls.n	800af64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e086      	b.n	800b072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af64:	4b45      	ldr	r3, [pc, #276]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1f0      	bne.n	800af52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af70:	4b42      	ldr	r3, [pc, #264]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	031b      	lsls	r3, r3, #12
 800af7e:	493f      	ldr	r1, [pc, #252]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800af80:	4313      	orrs	r3, r2
 800af82:	628b      	str	r3, [r1, #40]	; 0x28
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	3b01      	subs	r3, #1
 800af8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	3b01      	subs	r3, #1
 800af94:	025b      	lsls	r3, r3, #9
 800af96:	b29b      	uxth	r3, r3
 800af98:	431a      	orrs	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	3b01      	subs	r3, #1
 800afa0:	041b      	lsls	r3, r3, #16
 800afa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800afa6:	431a      	orrs	r2, r3
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	3b01      	subs	r3, #1
 800afae:	061b      	lsls	r3, r3, #24
 800afb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800afb4:	4931      	ldr	r1, [pc, #196]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800afba:	4b30      	ldr	r3, [pc, #192]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	492d      	ldr	r1, [pc, #180]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800afcc:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	f023 0220 	bic.w	r2, r3, #32
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	4928      	ldr	r1, [pc, #160]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afda:	4313      	orrs	r3, r2
 800afdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800afde:	4b27      	ldr	r3, [pc, #156]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe2:	4a26      	ldr	r2, [pc, #152]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afe4:	f023 0310 	bic.w	r3, r3, #16
 800afe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800afea:	4b24      	ldr	r3, [pc, #144]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800afec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afee:	4b24      	ldr	r3, [pc, #144]	; (800b080 <RCCEx_PLL2_Config+0x160>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	69d2      	ldr	r2, [r2, #28]
 800aff6:	00d2      	lsls	r2, r2, #3
 800aff8:	4920      	ldr	r1, [pc, #128]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800affa:	4313      	orrs	r3, r2
 800affc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800affe:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	4a1e      	ldr	r2, [pc, #120]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b004:	f043 0310 	orr.w	r3, r3, #16
 800b008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d106      	bne.n	800b01e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b010:	4b1a      	ldr	r3, [pc, #104]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b014:	4a19      	ldr	r2, [pc, #100]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b01a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b01c:	e00f      	b.n	800b03e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d106      	bne.n	800b032 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b024:	4b15      	ldr	r3, [pc, #84]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	4a14      	ldr	r2, [pc, #80]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b02a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b02e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b030:	e005      	b.n	800b03e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b032:	4b12      	ldr	r3, [pc, #72]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	4a11      	ldr	r2, [pc, #68]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b03c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b03e:	4b0f      	ldr	r3, [pc, #60]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a0e      	ldr	r2, [pc, #56]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b044:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04a:	f7f8 f8a7 	bl	800319c <HAL_GetTick>
 800b04e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b050:	e008      	b.n	800b064 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b052:	f7f8 f8a3 	bl	800319c <HAL_GetTick>
 800b056:	4602      	mov	r2, r0
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d901      	bls.n	800b064 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b060:	2303      	movs	r3, #3
 800b062:	e006      	b.n	800b072 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b064:	4b05      	ldr	r3, [pc, #20]	; (800b07c <RCCEx_PLL2_Config+0x15c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d0f0      	beq.n	800b052 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
 800b07a:	bf00      	nop
 800b07c:	58024400 	.word	0x58024400
 800b080:	ffff0007 	.word	0xffff0007

0800b084 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b08e:	2300      	movs	r3, #0
 800b090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b092:	4b53      	ldr	r3, [pc, #332]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b096:	f003 0303 	and.w	r3, r3, #3
 800b09a:	2b03      	cmp	r3, #3
 800b09c:	d101      	bne.n	800b0a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e099      	b.n	800b1d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b0a2:	4b4f      	ldr	r3, [pc, #316]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a4e      	ldr	r2, [pc, #312]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ae:	f7f8 f875 	bl	800319c <HAL_GetTick>
 800b0b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0b4:	e008      	b.n	800b0c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b0b6:	f7f8 f871 	bl	800319c <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e086      	b.n	800b1d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0c8:	4b45      	ldr	r3, [pc, #276]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1f0      	bne.n	800b0b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0d4:	4b42      	ldr	r3, [pc, #264]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	051b      	lsls	r3, r3, #20
 800b0e2:	493f      	ldr	r1, [pc, #252]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	628b      	str	r3, [r1, #40]	; 0x28
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	025b      	lsls	r3, r3, #9
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	3b01      	subs	r3, #1
 800b104:	041b      	lsls	r3, r3, #16
 800b106:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	3b01      	subs	r3, #1
 800b112:	061b      	lsls	r3, r3, #24
 800b114:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b118:	4931      	ldr	r1, [pc, #196]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b11e:	4b30      	ldr	r3, [pc, #192]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	695b      	ldr	r3, [r3, #20]
 800b12a:	492d      	ldr	r1, [pc, #180]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b130:	4b2b      	ldr	r3, [pc, #172]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b134:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	4928      	ldr	r1, [pc, #160]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b142:	4b27      	ldr	r3, [pc, #156]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b146:	4a26      	ldr	r2, [pc, #152]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b14e:	4b24      	ldr	r3, [pc, #144]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b152:	4b24      	ldr	r3, [pc, #144]	; (800b1e4 <RCCEx_PLL3_Config+0x160>)
 800b154:	4013      	ands	r3, r2
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	69d2      	ldr	r2, [r2, #28]
 800b15a:	00d2      	lsls	r2, r2, #3
 800b15c:	4920      	ldr	r1, [pc, #128]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b15e:	4313      	orrs	r3, r2
 800b160:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b162:	4b1f      	ldr	r3, [pc, #124]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	4a1e      	ldr	r2, [pc, #120]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b174:	4b1a      	ldr	r3, [pc, #104]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b178:	4a19      	ldr	r2, [pc, #100]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b17a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b17e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b180:	e00f      	b.n	800b1a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d106      	bne.n	800b196 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b188:	4b15      	ldr	r3, [pc, #84]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	4a14      	ldr	r2, [pc, #80]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b18e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b192:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b194:	e005      	b.n	800b1a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b196:	4b12      	ldr	r3, [pc, #72]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	4a11      	ldr	r2, [pc, #68]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b19c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a0e      	ldr	r2, [pc, #56]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b1a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ae:	f7f7 fff5 	bl	800319c <HAL_GetTick>
 800b1b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1b4:	e008      	b.n	800b1c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b1b6:	f7f7 fff1 	bl	800319c <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e006      	b.n	800b1d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1c8:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <RCCEx_PLL3_Config+0x15c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0f0      	beq.n	800b1b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	58024400 	.word	0x58024400
 800b1e4:	ffff0007 	.word	0xffff0007

0800b1e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d067      	beq.n	800b2ca <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b200:	b2db      	uxtb	r3, r3
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f7f6 fbd4 	bl	80019bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2202      	movs	r2, #2
 800b218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	22ca      	movs	r2, #202	; 0xca
 800b222:	625a      	str	r2, [r3, #36]	; 0x24
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2253      	movs	r2, #83	; 0x53
 800b22a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f879 	bl	800b324 <RTC_EnterInitMode>
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d13b      	bne.n	800b2b4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6899      	ldr	r1, [r3, #8]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <HAL_RTC_Init+0xec>)
 800b248:	400b      	ands	r3, r1
 800b24a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6899      	ldr	r1, [r3, #8]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685a      	ldr	r2, [r3, #4]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	691b      	ldr	r3, [r3, #16]
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	431a      	orrs	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	0419      	lsls	r1, r3, #16
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68da      	ldr	r2, [r3, #12]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	430a      	orrs	r2, r1
 800b27a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f885 	bl	800b38c <RTC_ExitInitMode>
 800b282:	4603      	mov	r3, r0
 800b284:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d113      	bne.n	800b2b4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 0203 	bic.w	r2, r2, #3
 800b29a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	69da      	ldr	r2, [r3, #28]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	22ff      	movs	r2, #255	; 0xff
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d103      	bne.n	800b2ca <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800b2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	ff8fffbf 	.word	0xff8fffbf

0800b2d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b2ee:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800b2f0:	f7f7 ff54 	bl	800319c <HAL_GetTick>
 800b2f4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2f6:	e009      	b.n	800b30c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b2f8:	f7f7 ff50 	bl	800319c <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b306:	d901      	bls.n	800b30c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e007      	b.n	800b31c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0ee      	beq.n	800b2f8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d120      	bne.n	800b380 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f04f 32ff 	mov.w	r2, #4294967295
 800b346:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b348:	f7f7 ff28 	bl	800319c <HAL_GetTick>
 800b34c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b34e:	e00d      	b.n	800b36c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b350:	f7f7 ff24 	bl	800319c <HAL_GetTick>
 800b354:	4602      	mov	r2, r0
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	1ad3      	subs	r3, r2, r3
 800b35a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b35e:	d905      	bls.n	800b36c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800b360:	2303      	movs	r3, #3
 800b362:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2203      	movs	r2, #3
 800b368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b376:	2b00      	cmp	r3, #0
 800b378:	d102      	bne.n	800b380 <RTC_EnterInitMode+0x5c>
 800b37a:	7bfb      	ldrb	r3, [r7, #15]
 800b37c:	2b03      	cmp	r3, #3
 800b37e:	d1e7      	bne.n	800b350 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800b380:	7bfb      	ldrb	r3, [r7, #15]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3710      	adds	r7, #16
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b394:	2300      	movs	r3, #0
 800b396:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800b398:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	4a19      	ldr	r2, [pc, #100]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3a2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b3a4:	4b17      	ldr	r3, [pc, #92]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	f003 0320 	and.w	r3, r3, #32
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10c      	bne.n	800b3ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ff91 	bl	800b2d8 <HAL_RTC_WaitForSynchro>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d01e      	beq.n	800b3fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2203      	movs	r2, #3
 800b3c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	73fb      	strb	r3, [r7, #15]
 800b3c8:	e017      	b.n	800b3fa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	4a0d      	ldr	r2, [pc, #52]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b3d0:	f023 0320 	bic.w	r3, r3, #32
 800b3d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f7ff ff7e 	bl	800b2d8 <HAL_RTC_WaitForSynchro>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2203      	movs	r2, #3
 800b3e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b3ee:	4b05      	ldr	r3, [pc, #20]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	4a04      	ldr	r2, [pc, #16]	; (800b404 <RTC_ExitInitMode+0x78>)
 800b3f4:	f043 0320 	orr.w	r3, r3, #32
 800b3f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	58004000 	.word	0x58004000

0800b408 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e0f1      	b.n	800b5fe <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a78      	ldr	r2, [pc, #480]	; (800b608 <HAL_SPI_Init+0x200>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00f      	beq.n	800b44a <HAL_SPI_Init+0x42>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a77      	ldr	r2, [pc, #476]	; (800b60c <HAL_SPI_Init+0x204>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00a      	beq.n	800b44a <HAL_SPI_Init+0x42>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a75      	ldr	r2, [pc, #468]	; (800b610 <HAL_SPI_Init+0x208>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d005      	beq.n	800b44a <HAL_SPI_Init+0x42>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	2b0f      	cmp	r3, #15
 800b444:	d901      	bls.n	800b44a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b446:	2301      	movs	r3, #1
 800b448:	e0d9      	b.n	800b5fe <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8e2 	bl	800b614 <SPI_GetPacketSize>
 800b450:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a6c      	ldr	r2, [pc, #432]	; (800b608 <HAL_SPI_Init+0x200>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d00c      	beq.n	800b476 <HAL_SPI_Init+0x6e>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a6a      	ldr	r2, [pc, #424]	; (800b60c <HAL_SPI_Init+0x204>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d007      	beq.n	800b476 <HAL_SPI_Init+0x6e>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a69      	ldr	r2, [pc, #420]	; (800b610 <HAL_SPI_Init+0x208>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d002      	beq.n	800b476 <HAL_SPI_Init+0x6e>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b08      	cmp	r3, #8
 800b474:	d811      	bhi.n	800b49a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b47a:	4a63      	ldr	r2, [pc, #396]	; (800b608 <HAL_SPI_Init+0x200>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d009      	beq.n	800b494 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4a61      	ldr	r2, [pc, #388]	; (800b60c <HAL_SPI_Init+0x204>)
 800b486:	4293      	cmp	r3, r2
 800b488:	d004      	beq.n	800b494 <HAL_SPI_Init+0x8c>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a60      	ldr	r2, [pc, #384]	; (800b610 <HAL_SPI_Init+0x208>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d104      	bne.n	800b49e <HAL_SPI_Init+0x96>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2b10      	cmp	r3, #16
 800b498:	d901      	bls.n	800b49e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e0af      	b.n	800b5fe <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7f6 fb08 	bl	8001ac8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0201 	bic.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b4da:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4e4:	d119      	bne.n	800b51a <HAL_SPI_Init+0x112>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4ee:	d103      	bne.n	800b4f8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d008      	beq.n	800b50a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10c      	bne.n	800b51a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b504:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b508:	d107      	bne.n	800b51a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b518:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69da      	ldr	r2, [r3, #28]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b522:	431a      	orrs	r2, r3
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	431a      	orrs	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b52c:	ea42 0103 	orr.w	r1, r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68da      	ldr	r2, [r3, #12]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	430a      	orrs	r2, r1
 800b53a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b544:	431a      	orrs	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56e:	431a      	orrs	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b57a:	ea42 0103 	orr.w	r1, r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d113      	bne.n	800b5ba <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5a4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5b8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f022 0201 	bic.w	r2, r2, #1
 800b5c8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00a      	beq.n	800b5ec <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	430a      	orrs	r2, r1
 800b5ea:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40013000 	.word	0x40013000
 800b60c:	40003800 	.word	0x40003800
 800b610:	40003c00 	.word	0x40003c00

0800b614 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b620:	095b      	lsrs	r3, r3, #5
 800b622:	3301      	adds	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	3301      	adds	r3, #1
 800b62c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	3307      	adds	r3, #7
 800b632:	08db      	lsrs	r3, r3, #3
 800b634:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b082      	sub	sp, #8
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d101      	bne.n	800b65c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e049      	b.n	800b6f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7f7 f99d 	bl	80029b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2202      	movs	r2, #2
 800b67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3304      	adds	r3, #4
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f000 fc57 	bl	800bf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ee:	2300      	movs	r3, #0
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e049      	b.n	800b79e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7f7 f868 	bl	80027f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3304      	adds	r3, #4
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f000 fc00 	bl	800bf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d109      	bne.n	800b7cc <HAL_TIM_PWM_Start+0x24>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	bf14      	ite	ne
 800b7c4:	2301      	movne	r3, #1
 800b7c6:	2300      	moveq	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	e03c      	b.n	800b846 <HAL_TIM_PWM_Start+0x9e>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d109      	bne.n	800b7e6 <HAL_TIM_PWM_Start+0x3e>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	bf14      	ite	ne
 800b7de:	2301      	movne	r3, #1
 800b7e0:	2300      	moveq	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	e02f      	b.n	800b846 <HAL_TIM_PWM_Start+0x9e>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d109      	bne.n	800b800 <HAL_TIM_PWM_Start+0x58>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	bf14      	ite	ne
 800b7f8:	2301      	movne	r3, #1
 800b7fa:	2300      	moveq	r3, #0
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	e022      	b.n	800b846 <HAL_TIM_PWM_Start+0x9e>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b0c      	cmp	r3, #12
 800b804:	d109      	bne.n	800b81a <HAL_TIM_PWM_Start+0x72>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b01      	cmp	r3, #1
 800b810:	bf14      	ite	ne
 800b812:	2301      	movne	r3, #1
 800b814:	2300      	moveq	r3, #0
 800b816:	b2db      	uxtb	r3, r3
 800b818:	e015      	b.n	800b846 <HAL_TIM_PWM_Start+0x9e>
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b10      	cmp	r3, #16
 800b81e:	d109      	bne.n	800b834 <HAL_TIM_PWM_Start+0x8c>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b01      	cmp	r3, #1
 800b82a:	bf14      	ite	ne
 800b82c:	2301      	movne	r3, #1
 800b82e:	2300      	moveq	r3, #0
 800b830:	b2db      	uxtb	r3, r3
 800b832:	e008      	b.n	800b846 <HAL_TIM_PWM_Start+0x9e>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	bf14      	ite	ne
 800b840:	2301      	movne	r3, #1
 800b842:	2300      	moveq	r3, #0
 800b844:	b2db      	uxtb	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e0ab      	b.n	800b9a6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d104      	bne.n	800b85e <HAL_TIM_PWM_Start+0xb6>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b85c:	e023      	b.n	800b8a6 <HAL_TIM_PWM_Start+0xfe>
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2b04      	cmp	r3, #4
 800b862:	d104      	bne.n	800b86e <HAL_TIM_PWM_Start+0xc6>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b86c:	e01b      	b.n	800b8a6 <HAL_TIM_PWM_Start+0xfe>
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	2b08      	cmp	r3, #8
 800b872:	d104      	bne.n	800b87e <HAL_TIM_PWM_Start+0xd6>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2202      	movs	r2, #2
 800b878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b87c:	e013      	b.n	800b8a6 <HAL_TIM_PWM_Start+0xfe>
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	2b0c      	cmp	r3, #12
 800b882:	d104      	bne.n	800b88e <HAL_TIM_PWM_Start+0xe6>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2202      	movs	r2, #2
 800b888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b88c:	e00b      	b.n	800b8a6 <HAL_TIM_PWM_Start+0xfe>
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	2b10      	cmp	r3, #16
 800b892:	d104      	bne.n	800b89e <HAL_TIM_PWM_Start+0xf6>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2202      	movs	r2, #2
 800b898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b89c:	e003      	b.n	800b8a6 <HAL_TIM_PWM_Start+0xfe>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fff6 	bl	800c8a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a3d      	ldr	r2, [pc, #244]	; (800b9b0 <HAL_TIM_PWM_Start+0x208>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d013      	beq.n	800b8e6 <HAL_TIM_PWM_Start+0x13e>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a3c      	ldr	r2, [pc, #240]	; (800b9b4 <HAL_TIM_PWM_Start+0x20c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_TIM_PWM_Start+0x13e>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a3a      	ldr	r2, [pc, #232]	; (800b9b8 <HAL_TIM_PWM_Start+0x210>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d009      	beq.n	800b8e6 <HAL_TIM_PWM_Start+0x13e>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a39      	ldr	r2, [pc, #228]	; (800b9bc <HAL_TIM_PWM_Start+0x214>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d004      	beq.n	800b8e6 <HAL_TIM_PWM_Start+0x13e>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a37      	ldr	r2, [pc, #220]	; (800b9c0 <HAL_TIM_PWM_Start+0x218>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d101      	bne.n	800b8ea <HAL_TIM_PWM_Start+0x142>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <HAL_TIM_PWM_Start+0x144>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d007      	beq.n	800b900 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b8fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a2a      	ldr	r2, [pc, #168]	; (800b9b0 <HAL_TIM_PWM_Start+0x208>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d02c      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b912:	d027      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a2a      	ldr	r2, [pc, #168]	; (800b9c4 <HAL_TIM_PWM_Start+0x21c>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d022      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a29      	ldr	r2, [pc, #164]	; (800b9c8 <HAL_TIM_PWM_Start+0x220>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d01d      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a27      	ldr	r2, [pc, #156]	; (800b9cc <HAL_TIM_PWM_Start+0x224>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d018      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a1f      	ldr	r2, [pc, #124]	; (800b9b4 <HAL_TIM_PWM_Start+0x20c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d013      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a23      	ldr	r2, [pc, #140]	; (800b9d0 <HAL_TIM_PWM_Start+0x228>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d00e      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a1b      	ldr	r2, [pc, #108]	; (800b9b8 <HAL_TIM_PWM_Start+0x210>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d009      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a1f      	ldr	r2, [pc, #124]	; (800b9d4 <HAL_TIM_PWM_Start+0x22c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d004      	beq.n	800b964 <HAL_TIM_PWM_Start+0x1bc>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a1e      	ldr	r2, [pc, #120]	; (800b9d8 <HAL_TIM_PWM_Start+0x230>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d115      	bne.n	800b990 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	689a      	ldr	r2, [r3, #8]
 800b96a:	4b1c      	ldr	r3, [pc, #112]	; (800b9dc <HAL_TIM_PWM_Start+0x234>)
 800b96c:	4013      	ands	r3, r2
 800b96e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2b06      	cmp	r3, #6
 800b974:	d015      	beq.n	800b9a2 <HAL_TIM_PWM_Start+0x1fa>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97c:	d011      	beq.n	800b9a2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f042 0201 	orr.w	r2, r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b98e:	e008      	b.n	800b9a2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f042 0201 	orr.w	r2, r2, #1
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e000      	b.n	800b9a4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	40010000 	.word	0x40010000
 800b9b4:	40010400 	.word	0x40010400
 800b9b8:	40014000 	.word	0x40014000
 800b9bc:	40014400 	.word	0x40014400
 800b9c0:	40014800 	.word	0x40014800
 800b9c4:	40000400 	.word	0x40000400
 800b9c8:	40000800 	.word	0x40000800
 800b9cc:	40000c00 	.word	0x40000c00
 800b9d0:	40001800 	.word	0x40001800
 800b9d4:	4000e000 	.word	0x4000e000
 800b9d8:	4000e400 	.word	0x4000e400
 800b9dc:	00010007 	.word	0x00010007

0800b9e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e049      	b.n	800ba86 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d106      	bne.n	800ba0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7f7 f80c 	bl	8002a24 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4610      	mov	r0, r2
 800ba20:	f000 fa8c 	bl	800bf3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2201      	movs	r2, #1
 800ba68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e08f      	b.n	800bbc4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d106      	bne.n	800babe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f7f6 ff2f 	bl	800291c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2202      	movs	r2, #2
 800bac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6899      	ldr	r1, [r3, #8]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	4b3e      	ldr	r3, [pc, #248]	; (800bbcc <HAL_TIM_Encoder_Init+0x13c>)
 800bad2:	400b      	ands	r3, r1
 800bad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3304      	adds	r3, #4
 800bade:	4619      	mov	r1, r3
 800bae0:	4610      	mov	r0, r2
 800bae2:	f000 fa2b 	bl	800bf3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6a1b      	ldr	r3, [r3, #32]
 800bafc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	4313      	orrs	r3, r2
 800bb06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4b31      	ldr	r3, [pc, #196]	; (800bbd0 <HAL_TIM_Encoder_Init+0x140>)
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	689a      	ldr	r2, [r3, #8]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	699b      	ldr	r3, [r3, #24]
 800bb18:	021b      	lsls	r3, r3, #8
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	693a      	ldr	r2, [r7, #16]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4b2b      	ldr	r3, [pc, #172]	; (800bbd4 <HAL_TIM_Encoder_Init+0x144>)
 800bb26:	4013      	ands	r3, r2
 800bb28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	4b2a      	ldr	r3, [pc, #168]	; (800bbd8 <HAL_TIM_Encoder_Init+0x148>)
 800bb2e:	4013      	ands	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	68da      	ldr	r2, [r3, #12]
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	011a      	lsls	r2, r3, #4
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	031b      	lsls	r3, r3, #12
 800bb50:	4313      	orrs	r3, r2
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bb5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bb66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	011b      	lsls	r3, r3, #4
 800bb72:	4313      	orrs	r3, r2
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	693a      	ldr	r2, [r7, #16]
 800bb88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	fffebff8 	.word	0xfffebff8
 800bbd0:	fffffcfc 	.word	0xfffffcfc
 800bbd4:	fffff3f3 	.word	0xfffff3f3
 800bbd8:	ffff0f0f 	.word	0xffff0f0f

0800bbdc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d101      	bne.n	800bbfa <HAL_TIM_IC_ConfigChannel+0x1e>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e088      	b.n	800bd0c <HAL_TIM_IC_ConfigChannel+0x130>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d11b      	bne.n	800bc40 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	685a      	ldr	r2, [r3, #4]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f000 fd0c 	bl	800c634 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	699a      	ldr	r2, [r3, #24]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 020c 	bic.w	r2, r2, #12
 800bc2a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6999      	ldr	r1, [r3, #24]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	619a      	str	r2, [r3, #24]
 800bc3e:	e060      	b.n	800bd02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b04      	cmp	r3, #4
 800bc44:	d11c      	bne.n	800bc80 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	6819      	ldr	r1, [r3, #0]
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f000 fd6d 	bl	800c734 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	699a      	ldr	r2, [r3, #24]
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bc68:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6999      	ldr	r1, [r3, #24]
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	021a      	lsls	r2, r3, #8
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	430a      	orrs	r2, r1
 800bc7c:	619a      	str	r2, [r3, #24]
 800bc7e:	e040      	b.n	800bd02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b08      	cmp	r3, #8
 800bc84:	d11b      	bne.n	800bcbe <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6819      	ldr	r1, [r3, #0]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	685a      	ldr	r2, [r3, #4]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f000 fd8a 	bl	800c7ae <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	69da      	ldr	r2, [r3, #28]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 020c 	bic.w	r2, r2, #12
 800bca8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69d9      	ldr	r1, [r3, #28]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	430a      	orrs	r2, r1
 800bcba:	61da      	str	r2, [r3, #28]
 800bcbc:	e021      	b.n	800bd02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2b0c      	cmp	r3, #12
 800bcc2:	d11c      	bne.n	800bcfe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	6819      	ldr	r1, [r3, #0]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	f000 fda7 	bl	800c826 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	69da      	ldr	r2, [r3, #28]
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bce6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	69d9      	ldr	r1, [r3, #28]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	689b      	ldr	r3, [r3, #8]
 800bcf2:	021a      	lsls	r2, r3, #8
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	430a      	orrs	r2, r1
 800bcfa:	61da      	str	r2, [r3, #28]
 800bcfc:	e001      	b.n	800bd02 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d101      	bne.n	800bd32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd2e:	2302      	movs	r3, #2
 800bd30:	e0ff      	b.n	800bf32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b14      	cmp	r3, #20
 800bd3e:	f200 80f0 	bhi.w	800bf22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd9d 	.word	0x0800bd9d
 800bd4c:	0800bf23 	.word	0x0800bf23
 800bd50:	0800bf23 	.word	0x0800bf23
 800bd54:	0800bf23 	.word	0x0800bf23
 800bd58:	0800bddd 	.word	0x0800bddd
 800bd5c:	0800bf23 	.word	0x0800bf23
 800bd60:	0800bf23 	.word	0x0800bf23
 800bd64:	0800bf23 	.word	0x0800bf23
 800bd68:	0800be1f 	.word	0x0800be1f
 800bd6c:	0800bf23 	.word	0x0800bf23
 800bd70:	0800bf23 	.word	0x0800bf23
 800bd74:	0800bf23 	.word	0x0800bf23
 800bd78:	0800be5f 	.word	0x0800be5f
 800bd7c:	0800bf23 	.word	0x0800bf23
 800bd80:	0800bf23 	.word	0x0800bf23
 800bd84:	0800bf23 	.word	0x0800bf23
 800bd88:	0800bea1 	.word	0x0800bea1
 800bd8c:	0800bf23 	.word	0x0800bf23
 800bd90:	0800bf23 	.word	0x0800bf23
 800bd94:	0800bf23 	.word	0x0800bf23
 800bd98:	0800bee1 	.word	0x0800bee1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 f970 	bl	800c088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f042 0208 	orr.w	r2, r2, #8
 800bdb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	699a      	ldr	r2, [r3, #24]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0204 	bic.w	r2, r2, #4
 800bdc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6999      	ldr	r1, [r3, #24]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	691a      	ldr	r2, [r3, #16]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	619a      	str	r2, [r3, #24]
      break;
 800bdda:	e0a5      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68b9      	ldr	r1, [r7, #8]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f000 f9e0 	bl	800c1a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	699a      	ldr	r2, [r3, #24]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6999      	ldr	r1, [r3, #24]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	021a      	lsls	r2, r3, #8
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	619a      	str	r2, [r3, #24]
      break;
 800be1c:	e084      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68b9      	ldr	r1, [r7, #8]
 800be24:	4618      	mov	r0, r3
 800be26:	f000 fa49 	bl	800c2bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69da      	ldr	r2, [r3, #28]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f042 0208 	orr.w	r2, r2, #8
 800be38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	69da      	ldr	r2, [r3, #28]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f022 0204 	bic.w	r2, r2, #4
 800be48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	69d9      	ldr	r1, [r3, #28]
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	691a      	ldr	r2, [r3, #16]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	430a      	orrs	r2, r1
 800be5a:	61da      	str	r2, [r3, #28]
      break;
 800be5c:	e064      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68b9      	ldr	r1, [r7, #8]
 800be64:	4618      	mov	r0, r3
 800be66:	f000 fab1 	bl	800c3cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	69da      	ldr	r2, [r3, #28]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	69da      	ldr	r2, [r3, #28]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	69d9      	ldr	r1, [r3, #28]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	021a      	lsls	r2, r3, #8
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	430a      	orrs	r2, r1
 800be9c:	61da      	str	r2, [r3, #28]
      break;
 800be9e:	e043      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68b9      	ldr	r1, [r7, #8]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fafa 	bl	800c4a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f042 0208 	orr.w	r2, r2, #8
 800beba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f022 0204 	bic.w	r2, r2, #4
 800beca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	691a      	ldr	r2, [r3, #16]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	430a      	orrs	r2, r1
 800bedc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bede:	e023      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 fb3e 	bl	800c568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800befa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	021a      	lsls	r2, r3, #8
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf20:	e002      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	75fb      	strb	r3, [r7, #23]
      break;
 800bf26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop

0800bf3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a44      	ldr	r2, [pc, #272]	; (800c060 <TIM_Base_SetConfig+0x124>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d013      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf5a:	d00f      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a41      	ldr	r2, [pc, #260]	; (800c064 <TIM_Base_SetConfig+0x128>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d00b      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a40      	ldr	r2, [pc, #256]	; (800c068 <TIM_Base_SetConfig+0x12c>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d007      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a3f      	ldr	r2, [pc, #252]	; (800c06c <TIM_Base_SetConfig+0x130>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d003      	beq.n	800bf7c <TIM_Base_SetConfig+0x40>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a3e      	ldr	r2, [pc, #248]	; (800c070 <TIM_Base_SetConfig+0x134>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d108      	bne.n	800bf8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a33      	ldr	r2, [pc, #204]	; (800c060 <TIM_Base_SetConfig+0x124>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d027      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf9c:	d023      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a30      	ldr	r2, [pc, #192]	; (800c064 <TIM_Base_SetConfig+0x128>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d01f      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a2f      	ldr	r2, [pc, #188]	; (800c068 <TIM_Base_SetConfig+0x12c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d01b      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a2e      	ldr	r2, [pc, #184]	; (800c06c <TIM_Base_SetConfig+0x130>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d017      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a2d      	ldr	r2, [pc, #180]	; (800c070 <TIM_Base_SetConfig+0x134>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d013      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a2c      	ldr	r2, [pc, #176]	; (800c074 <TIM_Base_SetConfig+0x138>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d00f      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a2b      	ldr	r2, [pc, #172]	; (800c078 <TIM_Base_SetConfig+0x13c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d00b      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a2a      	ldr	r2, [pc, #168]	; (800c07c <TIM_Base_SetConfig+0x140>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d007      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a29      	ldr	r2, [pc, #164]	; (800c080 <TIM_Base_SetConfig+0x144>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d003      	beq.n	800bfe6 <TIM_Base_SetConfig+0xaa>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a28      	ldr	r2, [pc, #160]	; (800c084 <TIM_Base_SetConfig+0x148>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d108      	bne.n	800bff8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	4313      	orrs	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	689a      	ldr	r2, [r3, #8]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a10      	ldr	r2, [pc, #64]	; (800c060 <TIM_Base_SetConfig+0x124>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d00f      	beq.n	800c044 <TIM_Base_SetConfig+0x108>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a12      	ldr	r2, [pc, #72]	; (800c070 <TIM_Base_SetConfig+0x134>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d00b      	beq.n	800c044 <TIM_Base_SetConfig+0x108>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a11      	ldr	r2, [pc, #68]	; (800c074 <TIM_Base_SetConfig+0x138>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d007      	beq.n	800c044 <TIM_Base_SetConfig+0x108>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a10      	ldr	r2, [pc, #64]	; (800c078 <TIM_Base_SetConfig+0x13c>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d003      	beq.n	800c044 <TIM_Base_SetConfig+0x108>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a0f      	ldr	r2, [pc, #60]	; (800c07c <TIM_Base_SetConfig+0x140>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d103      	bne.n	800c04c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	691a      	ldr	r2, [r3, #16]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	615a      	str	r2, [r3, #20]
}
 800c052:	bf00      	nop
 800c054:	3714      	adds	r7, #20
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	40010000 	.word	0x40010000
 800c064:	40000400 	.word	0x40000400
 800c068:	40000800 	.word	0x40000800
 800c06c:	40000c00 	.word	0x40000c00
 800c070:	40010400 	.word	0x40010400
 800c074:	40014000 	.word	0x40014000
 800c078:	40014400 	.word	0x40014400
 800c07c:	40014800 	.word	0x40014800
 800c080:	4000e000 	.word	0x4000e000
 800c084:	4000e400 	.word	0x4000e400

0800c088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b37      	ldr	r3, [pc, #220]	; (800c190 <TIM_OC1_SetConfig+0x108>)
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f023 0302 	bic.w	r3, r3, #2
 800c0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a2d      	ldr	r2, [pc, #180]	; (800c194 <TIM_OC1_SetConfig+0x10c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d00f      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a2c      	ldr	r2, [pc, #176]	; (800c198 <TIM_OC1_SetConfig+0x110>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00b      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a2b      	ldr	r2, [pc, #172]	; (800c19c <TIM_OC1_SetConfig+0x114>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d007      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4a2a      	ldr	r2, [pc, #168]	; (800c1a0 <TIM_OC1_SetConfig+0x118>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d003      	beq.n	800c104 <TIM_OC1_SetConfig+0x7c>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a29      	ldr	r2, [pc, #164]	; (800c1a4 <TIM_OC1_SetConfig+0x11c>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d10c      	bne.n	800c11e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f023 0308 	bic.w	r3, r3, #8
 800c10a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	4313      	orrs	r3, r2
 800c114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	f023 0304 	bic.w	r3, r3, #4
 800c11c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a1c      	ldr	r2, [pc, #112]	; (800c194 <TIM_OC1_SetConfig+0x10c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00f      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a1b      	ldr	r2, [pc, #108]	; (800c198 <TIM_OC1_SetConfig+0x110>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d00b      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a1a      	ldr	r2, [pc, #104]	; (800c19c <TIM_OC1_SetConfig+0x114>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d007      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a19      	ldr	r2, [pc, #100]	; (800c1a0 <TIM_OC1_SetConfig+0x118>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d003      	beq.n	800c146 <TIM_OC1_SetConfig+0xbe>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a18      	ldr	r2, [pc, #96]	; (800c1a4 <TIM_OC1_SetConfig+0x11c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d111      	bne.n	800c16a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c14c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	4313      	orrs	r3, r2
 800c168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685a      	ldr	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	621a      	str	r2, [r3, #32]
}
 800c184:	bf00      	nop
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	fffeff8f 	.word	0xfffeff8f
 800c194:	40010000 	.word	0x40010000
 800c198:	40010400 	.word	0x40010400
 800c19c:	40014000 	.word	0x40014000
 800c1a0:	40014400 	.word	0x40014400
 800c1a4:	40014800 	.word	0x40014800

0800c1a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b087      	sub	sp, #28
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6a1b      	ldr	r3, [r3, #32]
 800c1b6:	f023 0210 	bic.w	r2, r3, #16
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a1b      	ldr	r3, [r3, #32]
 800c1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	4b34      	ldr	r3, [pc, #208]	; (800c2a4 <TIM_OC2_SetConfig+0xfc>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	f023 0320 	bic.w	r3, r3, #32
 800c1f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a29      	ldr	r2, [pc, #164]	; (800c2a8 <TIM_OC2_SetConfig+0x100>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d003      	beq.n	800c210 <TIM_OC2_SetConfig+0x68>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a28      	ldr	r2, [pc, #160]	; (800c2ac <TIM_OC2_SetConfig+0x104>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d10d      	bne.n	800c22c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	4313      	orrs	r3, r2
 800c222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c22a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a1e      	ldr	r2, [pc, #120]	; (800c2a8 <TIM_OC2_SetConfig+0x100>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00f      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a1d      	ldr	r2, [pc, #116]	; (800c2ac <TIM_OC2_SetConfig+0x104>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00b      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a1c      	ldr	r2, [pc, #112]	; (800c2b0 <TIM_OC2_SetConfig+0x108>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d007      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a1b      	ldr	r2, [pc, #108]	; (800c2b4 <TIM_OC2_SetConfig+0x10c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d003      	beq.n	800c254 <TIM_OC2_SetConfig+0xac>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a1a      	ldr	r2, [pc, #104]	; (800c2b8 <TIM_OC2_SetConfig+0x110>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d113      	bne.n	800c27c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c25a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	4313      	orrs	r3, r2
 800c27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	621a      	str	r2, [r3, #32]
}
 800c296:	bf00      	nop
 800c298:	371c      	adds	r7, #28
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	feff8fff 	.word	0xfeff8fff
 800c2a8:	40010000 	.word	0x40010000
 800c2ac:	40010400 	.word	0x40010400
 800c2b0:	40014000 	.word	0x40014000
 800c2b4:	40014400 	.word	0x40014400
 800c2b8:	40014800 	.word	0x40014800

0800c2bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6a1b      	ldr	r3, [r3, #32]
 800c2ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6a1b      	ldr	r3, [r3, #32]
 800c2d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	69db      	ldr	r3, [r3, #28]
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	4b33      	ldr	r3, [pc, #204]	; (800c3b4 <TIM_OC3_SetConfig+0xf8>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f023 0303 	bic.w	r3, r3, #3
 800c2f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	021b      	lsls	r3, r3, #8
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	4313      	orrs	r3, r2
 800c310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a28      	ldr	r2, [pc, #160]	; (800c3b8 <TIM_OC3_SetConfig+0xfc>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d003      	beq.n	800c322 <TIM_OC3_SetConfig+0x66>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a27      	ldr	r2, [pc, #156]	; (800c3bc <TIM_OC3_SetConfig+0x100>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d10d      	bne.n	800c33e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	021b      	lsls	r3, r3, #8
 800c330:	697a      	ldr	r2, [r7, #20]
 800c332:	4313      	orrs	r3, r2
 800c334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c33c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1d      	ldr	r2, [pc, #116]	; (800c3b8 <TIM_OC3_SetConfig+0xfc>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d00f      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a1c      	ldr	r2, [pc, #112]	; (800c3bc <TIM_OC3_SetConfig+0x100>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d00b      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a1b      	ldr	r2, [pc, #108]	; (800c3c0 <TIM_OC3_SetConfig+0x104>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d007      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	4a1a      	ldr	r2, [pc, #104]	; (800c3c4 <TIM_OC3_SetConfig+0x108>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d003      	beq.n	800c366 <TIM_OC3_SetConfig+0xaa>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	4a19      	ldr	r2, [pc, #100]	; (800c3c8 <TIM_OC3_SetConfig+0x10c>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d113      	bne.n	800c38e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	695b      	ldr	r3, [r3, #20]
 800c37a:	011b      	lsls	r3, r3, #4
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	011b      	lsls	r3, r3, #4
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	621a      	str	r2, [r3, #32]
}
 800c3a8:	bf00      	nop
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	fffeff8f 	.word	0xfffeff8f
 800c3b8:	40010000 	.word	0x40010000
 800c3bc:	40010400 	.word	0x40010400
 800c3c0:	40014000 	.word	0x40014000
 800c3c4:	40014400 	.word	0x40014400
 800c3c8:	40014800 	.word	0x40014800

0800c3cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	69db      	ldr	r3, [r3, #28]
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	4b24      	ldr	r3, [pc, #144]	; (800c488 <TIM_OC4_SetConfig+0xbc>)
 800c3f8:	4013      	ands	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	031b      	lsls	r3, r3, #12
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	4313      	orrs	r3, r2
 800c422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a19      	ldr	r2, [pc, #100]	; (800c48c <TIM_OC4_SetConfig+0xc0>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00f      	beq.n	800c44c <TIM_OC4_SetConfig+0x80>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a18      	ldr	r2, [pc, #96]	; (800c490 <TIM_OC4_SetConfig+0xc4>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00b      	beq.n	800c44c <TIM_OC4_SetConfig+0x80>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a17      	ldr	r2, [pc, #92]	; (800c494 <TIM_OC4_SetConfig+0xc8>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d007      	beq.n	800c44c <TIM_OC4_SetConfig+0x80>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a16      	ldr	r2, [pc, #88]	; (800c498 <TIM_OC4_SetConfig+0xcc>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <TIM_OC4_SetConfig+0x80>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a15      	ldr	r2, [pc, #84]	; (800c49c <TIM_OC4_SetConfig+0xd0>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d109      	bne.n	800c460 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	019b      	lsls	r3, r3, #6
 800c45a:	697a      	ldr	r2, [r7, #20]
 800c45c:	4313      	orrs	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	697a      	ldr	r2, [r7, #20]
 800c464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	685a      	ldr	r2, [r3, #4]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	621a      	str	r2, [r3, #32]
}
 800c47a:	bf00      	nop
 800c47c:	371c      	adds	r7, #28
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	feff8fff 	.word	0xfeff8fff
 800c48c:	40010000 	.word	0x40010000
 800c490:	40010400 	.word	0x40010400
 800c494:	40014000 	.word	0x40014000
 800c498:	40014400 	.word	0x40014400
 800c49c:	40014800 	.word	0x40014800

0800c4a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b087      	sub	sp, #28
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	4b21      	ldr	r3, [pc, #132]	; (800c550 <TIM_OC5_SetConfig+0xb0>)
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	041b      	lsls	r3, r3, #16
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a18      	ldr	r2, [pc, #96]	; (800c554 <TIM_OC5_SetConfig+0xb4>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00f      	beq.n	800c516 <TIM_OC5_SetConfig+0x76>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a17      	ldr	r2, [pc, #92]	; (800c558 <TIM_OC5_SetConfig+0xb8>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00b      	beq.n	800c516 <TIM_OC5_SetConfig+0x76>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a16      	ldr	r2, [pc, #88]	; (800c55c <TIM_OC5_SetConfig+0xbc>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d007      	beq.n	800c516 <TIM_OC5_SetConfig+0x76>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a15      	ldr	r2, [pc, #84]	; (800c560 <TIM_OC5_SetConfig+0xc0>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d003      	beq.n	800c516 <TIM_OC5_SetConfig+0x76>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a14      	ldr	r2, [pc, #80]	; (800c564 <TIM_OC5_SetConfig+0xc4>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d109      	bne.n	800c52a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c51c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	4313      	orrs	r3, r2
 800c528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	621a      	str	r2, [r3, #32]
}
 800c544:	bf00      	nop
 800c546:	371c      	adds	r7, #28
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	fffeff8f 	.word	0xfffeff8f
 800c554:	40010000 	.word	0x40010000
 800c558:	40010400 	.word	0x40010400
 800c55c:	40014000 	.word	0x40014000
 800c560:	40014400 	.word	0x40014400
 800c564:	40014800 	.word	0x40014800

0800c568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6a1b      	ldr	r3, [r3, #32]
 800c582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	4b22      	ldr	r3, [pc, #136]	; (800c61c <TIM_OC6_SetConfig+0xb4>)
 800c594:	4013      	ands	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	021b      	lsls	r3, r3, #8
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c5aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	689b      	ldr	r3, [r3, #8]
 800c5b0:	051b      	lsls	r3, r3, #20
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a19      	ldr	r2, [pc, #100]	; (800c620 <TIM_OC6_SetConfig+0xb8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d00f      	beq.n	800c5e0 <TIM_OC6_SetConfig+0x78>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a18      	ldr	r2, [pc, #96]	; (800c624 <TIM_OC6_SetConfig+0xbc>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00b      	beq.n	800c5e0 <TIM_OC6_SetConfig+0x78>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a17      	ldr	r2, [pc, #92]	; (800c628 <TIM_OC6_SetConfig+0xc0>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d007      	beq.n	800c5e0 <TIM_OC6_SetConfig+0x78>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a16      	ldr	r2, [pc, #88]	; (800c62c <TIM_OC6_SetConfig+0xc4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d003      	beq.n	800c5e0 <TIM_OC6_SetConfig+0x78>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a15      	ldr	r2, [pc, #84]	; (800c630 <TIM_OC6_SetConfig+0xc8>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d109      	bne.n	800c5f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	029b      	lsls	r3, r3, #10
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	621a      	str	r2, [r3, #32]
}
 800c60e:	bf00      	nop
 800c610:	371c      	adds	r7, #28
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	feff8fff 	.word	0xfeff8fff
 800c620:	40010000 	.word	0x40010000
 800c624:	40010400 	.word	0x40010400
 800c628:	40014000 	.word	0x40014000
 800c62c:	40014400 	.word	0x40014400
 800c630:	40014800 	.word	0x40014800

0800c634 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
 800c640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	f023 0201 	bic.w	r2, r3, #1
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	699b      	ldr	r3, [r3, #24]
 800c652:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	4a2c      	ldr	r2, [pc, #176]	; (800c710 <TIM_TI1_SetConfig+0xdc>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d023      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c668:	d01f      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	4a29      	ldr	r2, [pc, #164]	; (800c714 <TIM_TI1_SetConfig+0xe0>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d01b      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a28      	ldr	r2, [pc, #160]	; (800c718 <TIM_TI1_SetConfig+0xe4>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d017      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4a27      	ldr	r2, [pc, #156]	; (800c71c <TIM_TI1_SetConfig+0xe8>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d013      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a26      	ldr	r2, [pc, #152]	; (800c720 <TIM_TI1_SetConfig+0xec>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d00f      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4a25      	ldr	r2, [pc, #148]	; (800c724 <TIM_TI1_SetConfig+0xf0>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d00b      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4a24      	ldr	r2, [pc, #144]	; (800c728 <TIM_TI1_SetConfig+0xf4>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d007      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	4a23      	ldr	r2, [pc, #140]	; (800c72c <TIM_TI1_SetConfig+0xf8>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d003      	beq.n	800c6aa <TIM_TI1_SetConfig+0x76>
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	4a22      	ldr	r2, [pc, #136]	; (800c730 <TIM_TI1_SetConfig+0xfc>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d101      	bne.n	800c6ae <TIM_TI1_SetConfig+0x7a>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e000      	b.n	800c6b0 <TIM_TI1_SetConfig+0x7c>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d008      	beq.n	800c6c6 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f023 0303 	bic.w	r3, r3, #3
 800c6ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c6bc:	697a      	ldr	r2, [r7, #20]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	617b      	str	r3, [r7, #20]
 800c6c4:	e003      	b.n	800c6ce <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	f043 0301 	orr.w	r3, r3, #1
 800c6cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	011b      	lsls	r3, r3, #4
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f023 030a 	bic.w	r3, r3, #10
 800c6e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	f003 030a 	and.w	r3, r3, #10
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	621a      	str	r2, [r3, #32]
}
 800c702:	bf00      	nop
 800c704:	371c      	adds	r7, #28
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	40010000 	.word	0x40010000
 800c714:	40000400 	.word	0x40000400
 800c718:	40000800 	.word	0x40000800
 800c71c:	40000c00 	.word	0x40000c00
 800c720:	40010400 	.word	0x40010400
 800c724:	40001800 	.word	0x40001800
 800c728:	40014000 	.word	0x40014000
 800c72c:	4000e000 	.word	0x4000e000
 800c730:	4000e400 	.word	0x4000e400

0800c734 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c734:	b480      	push	{r7}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	f023 0210 	bic.w	r2, r3, #16
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	031b      	lsls	r3, r3, #12
 800c778:	b29b      	uxth	r3, r3
 800c77a:	697a      	ldr	r2, [r7, #20]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c790:	693a      	ldr	r2, [r7, #16]
 800c792:	4313      	orrs	r3, r2
 800c794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	621a      	str	r2, [r3, #32]
}
 800c7a2:	bf00      	nop
 800c7a4:	371c      	adds	r7, #28
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b087      	sub	sp, #28
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	60f8      	str	r0, [r7, #12]
 800c7b6:	60b9      	str	r1, [r7, #8]
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	f023 0303 	bic.w	r3, r3, #3
 800c7da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c7dc:	697a      	ldr	r2, [r7, #20]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	011b      	lsls	r3, r3, #4
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	697a      	ldr	r2, [r7, #20]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c7fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	697a      	ldr	r2, [r7, #20]
 800c812:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	621a      	str	r2, [r3, #32]
}
 800c81a:	bf00      	nop
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c826:	b480      	push	{r7}
 800c828:	b087      	sub	sp, #28
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	60f8      	str	r0, [r7, #12]
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
 800c832:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	6a1b      	ldr	r3, [r3, #32]
 800c838:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c852:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	021b      	lsls	r3, r3, #8
 800c858:	697a      	ldr	r2, [r7, #20]
 800c85a:	4313      	orrs	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	031b      	lsls	r3, r3, #12
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	4313      	orrs	r3, r2
 800c870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c878:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	031b      	lsls	r3, r3, #12
 800c87e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c882:	693a      	ldr	r2, [r7, #16]
 800c884:	4313      	orrs	r3, r2
 800c886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	621a      	str	r2, [r3, #32]
}
 800c894:	bf00      	nop
 800c896:	371c      	adds	r7, #28
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b087      	sub	sp, #28
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f003 031f 	and.w	r3, r3, #31
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6a1a      	ldr	r2, [r3, #32]
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	43db      	mvns	r3, r3
 800c8c2:	401a      	ands	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6a1a      	ldr	r2, [r3, #32]
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	f003 031f 	and.w	r3, r3, #31
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d8:	431a      	orrs	r2, r3
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	621a      	str	r2, [r3, #32]
}
 800c8de:	bf00      	nop
 800c8e0:	371c      	adds	r7, #28
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr
	...

0800c8ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b084      	sub	sp, #16
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d109      	bne.n	800c910 <HAL_TIMEx_PWMN_Start+0x24>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b01      	cmp	r3, #1
 800c906:	bf14      	ite	ne
 800c908:	2301      	movne	r3, #1
 800c90a:	2300      	moveq	r3, #0
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	e022      	b.n	800c956 <HAL_TIMEx_PWMN_Start+0x6a>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b04      	cmp	r3, #4
 800c914:	d109      	bne.n	800c92a <HAL_TIMEx_PWMN_Start+0x3e>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b01      	cmp	r3, #1
 800c920:	bf14      	ite	ne
 800c922:	2301      	movne	r3, #1
 800c924:	2300      	moveq	r3, #0
 800c926:	b2db      	uxtb	r3, r3
 800c928:	e015      	b.n	800c956 <HAL_TIMEx_PWMN_Start+0x6a>
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	2b08      	cmp	r3, #8
 800c92e:	d109      	bne.n	800c944 <HAL_TIMEx_PWMN_Start+0x58>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b01      	cmp	r3, #1
 800c93a:	bf14      	ite	ne
 800c93c:	2301      	movne	r3, #1
 800c93e:	2300      	moveq	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	e008      	b.n	800c956 <HAL_TIMEx_PWMN_Start+0x6a>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	bf14      	ite	ne
 800c950:	2301      	movne	r3, #1
 800c952:	2300      	moveq	r3, #0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c95a:	2301      	movs	r3, #1
 800c95c:	e07d      	b.n	800ca5a <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d104      	bne.n	800c96e <HAL_TIMEx_PWMN_Start+0x82>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2202      	movs	r2, #2
 800c968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c96c:	e013      	b.n	800c996 <HAL_TIMEx_PWMN_Start+0xaa>
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	2b04      	cmp	r3, #4
 800c972:	d104      	bne.n	800c97e <HAL_TIMEx_PWMN_Start+0x92>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c97c:	e00b      	b.n	800c996 <HAL_TIMEx_PWMN_Start+0xaa>
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	2b08      	cmp	r3, #8
 800c982:	d104      	bne.n	800c98e <HAL_TIMEx_PWMN_Start+0xa2>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2202      	movs	r2, #2
 800c988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c98c:	e003      	b.n	800c996 <HAL_TIMEx_PWMN_Start+0xaa>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2202      	movs	r2, #2
 800c992:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2204      	movs	r2, #4
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f000 f9b0 	bl	800cd04 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c9b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a2a      	ldr	r2, [pc, #168]	; (800ca64 <HAL_TIMEx_PWMN_Start+0x178>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d02c      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c6:	d027      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a26      	ldr	r2, [pc, #152]	; (800ca68 <HAL_TIMEx_PWMN_Start+0x17c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d022      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	4a25      	ldr	r2, [pc, #148]	; (800ca6c <HAL_TIMEx_PWMN_Start+0x180>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d01d      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a23      	ldr	r2, [pc, #140]	; (800ca70 <HAL_TIMEx_PWMN_Start+0x184>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d018      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a22      	ldr	r2, [pc, #136]	; (800ca74 <HAL_TIMEx_PWMN_Start+0x188>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d013      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a20      	ldr	r2, [pc, #128]	; (800ca78 <HAL_TIMEx_PWMN_Start+0x18c>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d00e      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a1f      	ldr	r2, [pc, #124]	; (800ca7c <HAL_TIMEx_PWMN_Start+0x190>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d009      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a1d      	ldr	r2, [pc, #116]	; (800ca80 <HAL_TIMEx_PWMN_Start+0x194>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d004      	beq.n	800ca18 <HAL_TIMEx_PWMN_Start+0x12c>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a1c      	ldr	r2, [pc, #112]	; (800ca84 <HAL_TIMEx_PWMN_Start+0x198>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d115      	bne.n	800ca44 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689a      	ldr	r2, [r3, #8]
 800ca1e:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ca20:	4013      	ands	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b06      	cmp	r3, #6
 800ca28:	d015      	beq.n	800ca56 <HAL_TIMEx_PWMN_Start+0x16a>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca30:	d011      	beq.n	800ca56 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f042 0201 	orr.w	r2, r2, #1
 800ca40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca42:	e008      	b.n	800ca56 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f042 0201 	orr.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	e000      	b.n	800ca58 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3710      	adds	r7, #16
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	40010000 	.word	0x40010000
 800ca68:	40000400 	.word	0x40000400
 800ca6c:	40000800 	.word	0x40000800
 800ca70:	40000c00 	.word	0x40000c00
 800ca74:	40010400 	.word	0x40010400
 800ca78:	40001800 	.word	0x40001800
 800ca7c:	40014000 	.word	0x40014000
 800ca80:	4000e000 	.word	0x4000e000
 800ca84:	4000e400 	.word	0x4000e400
 800ca88:	00010007 	.word	0x00010007

0800ca8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e077      	b.n	800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a35      	ldr	r2, [pc, #212]	; (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d004      	beq.n	800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a34      	ldr	r2, [pc, #208]	; (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d108      	bne.n	800caea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cade:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800caf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a25      	ldr	r2, [pc, #148]	; (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d02c      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb16:	d027      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a22      	ldr	r2, [pc, #136]	; (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d022      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a21      	ldr	r2, [pc, #132]	; (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d01d      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a1f      	ldr	r2, [pc, #124]	; (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d018      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	4a1a      	ldr	r2, [pc, #104]	; (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb3c:	4293      	cmp	r3, r2
 800cb3e:	d013      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a1b      	ldr	r2, [pc, #108]	; (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d00e      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a1a      	ldr	r2, [pc, #104]	; (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d009      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	4a18      	ldr	r2, [pc, #96]	; (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d004      	beq.n	800cb68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d10c      	bne.n	800cb82 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	68ba      	ldr	r2, [r7, #8]
 800cb76:	4313      	orrs	r3, r2
 800cb78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	40010000 	.word	0x40010000
 800cba4:	40010400 	.word	0x40010400
 800cba8:	40000400 	.word	0x40000400
 800cbac:	40000800 	.word	0x40000800
 800cbb0:	40000c00 	.word	0x40000c00
 800cbb4:	40001800 	.word	0x40001800
 800cbb8:	40014000 	.word	0x40014000
 800cbbc:	4000e000 	.word	0x4000e000
 800cbc0:	4000e400 	.word	0x4000e400

0800cbc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d101      	bne.n	800cbe0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbdc:	2302      	movs	r3, #2
 800cbde:	e087      	b.n	800ccf0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	695b      	ldr	r3, [r3, #20]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc46:	4313      	orrs	r3, r2
 800cc48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	041b      	lsls	r3, r3, #16
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a27      	ldr	r2, [pc, #156]	; (800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d004      	beq.n	800cc6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a25      	ldr	r2, [pc, #148]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d106      	bne.n	800cc7c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	69db      	ldr	r3, [r3, #28]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a1e      	ldr	r2, [pc, #120]	; (800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d004      	beq.n	800cc90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a1d      	ldr	r2, [pc, #116]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d126      	bne.n	800ccde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc9a:	051b      	lsls	r3, r3, #20
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a0e      	ldr	r2, [pc, #56]	; (800ccfc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ccc2:	4293      	cmp	r3, r2
 800ccc4:	d004      	beq.n	800ccd0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a0d      	ldr	r2, [pc, #52]	; (800cd00 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d106      	bne.n	800ccde <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	40010000 	.word	0x40010000
 800cd00:	40010400 	.word	0x40010400

0800cd04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	f003 031f 	and.w	r3, r3, #31
 800cd16:	2204      	movs	r2, #4
 800cd18:	fa02 f303 	lsl.w	r3, r2, r3
 800cd1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	6a1a      	ldr	r2, [r3, #32]
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	43db      	mvns	r3, r3
 800cd26:	401a      	ands	r2, r3
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6a1a      	ldr	r2, [r3, #32]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f003 031f 	and.w	r3, r3, #31
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3c:	431a      	orrs	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	621a      	str	r2, [r3, #32]
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b082      	sub	sp, #8
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e042      	b.n	800cde6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d106      	bne.n	800cd78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7f6 f8b0 	bl	8002ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2224      	movs	r2, #36	; 0x24
 800cd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f022 0201 	bic.w	r2, r2, #1
 800cd8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 f82d 	bl	800cdf0 <UART_SetConfig>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d101      	bne.n	800cda0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e022      	b.n	800cde6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fe8d 	bl	800dac8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cdbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689a      	ldr	r2, [r3, #8]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cdcc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	681a      	ldr	r2, [r3, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f042 0201 	orr.w	r2, r2, #1
 800cddc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 ff14 	bl	800dc0c <UART_CheckIdleState>
 800cde4:	4603      	mov	r3, r0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
	...

0800cdf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdf4:	b092      	sub	sp, #72	; 0x48
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	689a      	ldr	r2, [r3, #8]
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	691b      	ldr	r3, [r3, #16]
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	695b      	ldr	r3, [r3, #20]
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	4bbe      	ldr	r3, [pc, #760]	; (800d118 <UART_SetConfig+0x328>)
 800ce20:	4013      	ands	r3, r2
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	6812      	ldr	r2, [r2, #0]
 800ce26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4ab3      	ldr	r2, [pc, #716]	; (800d11c <UART_SetConfig+0x32c>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d004      	beq.n	800ce5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689a      	ldr	r2, [r3, #8]
 800ce62:	4baf      	ldr	r3, [pc, #700]	; (800d120 <UART_SetConfig+0x330>)
 800ce64:	4013      	ands	r3, r2
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	6812      	ldr	r2, [r2, #0]
 800ce6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce6c:	430b      	orrs	r3, r1
 800ce6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce76:	f023 010f 	bic.w	r1, r3, #15
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4aa6      	ldr	r2, [pc, #664]	; (800d124 <UART_SetConfig+0x334>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d177      	bne.n	800cf80 <UART_SetConfig+0x190>
 800ce90:	4ba5      	ldr	r3, [pc, #660]	; (800d128 <UART_SetConfig+0x338>)
 800ce92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce98:	2b28      	cmp	r3, #40	; 0x28
 800ce9a:	d86d      	bhi.n	800cf78 <UART_SetConfig+0x188>
 800ce9c:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <UART_SetConfig+0xb4>)
 800ce9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea2:	bf00      	nop
 800cea4:	0800cf49 	.word	0x0800cf49
 800cea8:	0800cf79 	.word	0x0800cf79
 800ceac:	0800cf79 	.word	0x0800cf79
 800ceb0:	0800cf79 	.word	0x0800cf79
 800ceb4:	0800cf79 	.word	0x0800cf79
 800ceb8:	0800cf79 	.word	0x0800cf79
 800cebc:	0800cf79 	.word	0x0800cf79
 800cec0:	0800cf79 	.word	0x0800cf79
 800cec4:	0800cf51 	.word	0x0800cf51
 800cec8:	0800cf79 	.word	0x0800cf79
 800cecc:	0800cf79 	.word	0x0800cf79
 800ced0:	0800cf79 	.word	0x0800cf79
 800ced4:	0800cf79 	.word	0x0800cf79
 800ced8:	0800cf79 	.word	0x0800cf79
 800cedc:	0800cf79 	.word	0x0800cf79
 800cee0:	0800cf79 	.word	0x0800cf79
 800cee4:	0800cf59 	.word	0x0800cf59
 800cee8:	0800cf79 	.word	0x0800cf79
 800ceec:	0800cf79 	.word	0x0800cf79
 800cef0:	0800cf79 	.word	0x0800cf79
 800cef4:	0800cf79 	.word	0x0800cf79
 800cef8:	0800cf79 	.word	0x0800cf79
 800cefc:	0800cf79 	.word	0x0800cf79
 800cf00:	0800cf79 	.word	0x0800cf79
 800cf04:	0800cf61 	.word	0x0800cf61
 800cf08:	0800cf79 	.word	0x0800cf79
 800cf0c:	0800cf79 	.word	0x0800cf79
 800cf10:	0800cf79 	.word	0x0800cf79
 800cf14:	0800cf79 	.word	0x0800cf79
 800cf18:	0800cf79 	.word	0x0800cf79
 800cf1c:	0800cf79 	.word	0x0800cf79
 800cf20:	0800cf79 	.word	0x0800cf79
 800cf24:	0800cf69 	.word	0x0800cf69
 800cf28:	0800cf79 	.word	0x0800cf79
 800cf2c:	0800cf79 	.word	0x0800cf79
 800cf30:	0800cf79 	.word	0x0800cf79
 800cf34:	0800cf79 	.word	0x0800cf79
 800cf38:	0800cf79 	.word	0x0800cf79
 800cf3c:	0800cf79 	.word	0x0800cf79
 800cf40:	0800cf79 	.word	0x0800cf79
 800cf44:	0800cf71 	.word	0x0800cf71
 800cf48:	2301      	movs	r3, #1
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4e:	e326      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf50:	2304      	movs	r3, #4
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf56:	e322      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf58:	2308      	movs	r3, #8
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5e:	e31e      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf60:	2310      	movs	r3, #16
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf66:	e31a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf68:	2320      	movs	r3, #32
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6e:	e316      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf70:	2340      	movs	r3, #64	; 0x40
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf76:	e312      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf78:	2380      	movs	r3, #128	; 0x80
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7e:	e30e      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a69      	ldr	r2, [pc, #420]	; (800d12c <UART_SetConfig+0x33c>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d130      	bne.n	800cfec <UART_SetConfig+0x1fc>
 800cf8a:	4b67      	ldr	r3, [pc, #412]	; (800d128 <UART_SetConfig+0x338>)
 800cf8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf8e:	f003 0307 	and.w	r3, r3, #7
 800cf92:	2b05      	cmp	r3, #5
 800cf94:	d826      	bhi.n	800cfe4 <UART_SetConfig+0x1f4>
 800cf96:	a201      	add	r2, pc, #4	; (adr r2, 800cf9c <UART_SetConfig+0x1ac>)
 800cf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9c:	0800cfb5 	.word	0x0800cfb5
 800cfa0:	0800cfbd 	.word	0x0800cfbd
 800cfa4:	0800cfc5 	.word	0x0800cfc5
 800cfa8:	0800cfcd 	.word	0x0800cfcd
 800cfac:	0800cfd5 	.word	0x0800cfd5
 800cfb0:	0800cfdd 	.word	0x0800cfdd
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfba:	e2f0      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfbc:	2304      	movs	r3, #4
 800cfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc2:	e2ec      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfc4:	2308      	movs	r3, #8
 800cfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfca:	e2e8      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfcc:	2310      	movs	r3, #16
 800cfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd2:	e2e4      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfd4:	2320      	movs	r3, #32
 800cfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfda:	e2e0      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfdc:	2340      	movs	r3, #64	; 0x40
 800cfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe2:	e2dc      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfe4:	2380      	movs	r3, #128	; 0x80
 800cfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfea:	e2d8      	b.n	800d59e <UART_SetConfig+0x7ae>
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4a4f      	ldr	r2, [pc, #316]	; (800d130 <UART_SetConfig+0x340>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d130      	bne.n	800d058 <UART_SetConfig+0x268>
 800cff6:	4b4c      	ldr	r3, [pc, #304]	; (800d128 <UART_SetConfig+0x338>)
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	f003 0307 	and.w	r3, r3, #7
 800cffe:	2b05      	cmp	r3, #5
 800d000:	d826      	bhi.n	800d050 <UART_SetConfig+0x260>
 800d002:	a201      	add	r2, pc, #4	; (adr r2, 800d008 <UART_SetConfig+0x218>)
 800d004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d008:	0800d021 	.word	0x0800d021
 800d00c:	0800d029 	.word	0x0800d029
 800d010:	0800d031 	.word	0x0800d031
 800d014:	0800d039 	.word	0x0800d039
 800d018:	0800d041 	.word	0x0800d041
 800d01c:	0800d049 	.word	0x0800d049
 800d020:	2300      	movs	r3, #0
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d026:	e2ba      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d028:	2304      	movs	r3, #4
 800d02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02e:	e2b6      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d030:	2308      	movs	r3, #8
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d036:	e2b2      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d038:	2310      	movs	r3, #16
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03e:	e2ae      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d040:	2320      	movs	r3, #32
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d046:	e2aa      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d048:	2340      	movs	r3, #64	; 0x40
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04e:	e2a6      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d050:	2380      	movs	r3, #128	; 0x80
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d056:	e2a2      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4a35      	ldr	r2, [pc, #212]	; (800d134 <UART_SetConfig+0x344>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d130      	bne.n	800d0c4 <UART_SetConfig+0x2d4>
 800d062:	4b31      	ldr	r3, [pc, #196]	; (800d128 <UART_SetConfig+0x338>)
 800d064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d066:	f003 0307 	and.w	r3, r3, #7
 800d06a:	2b05      	cmp	r3, #5
 800d06c:	d826      	bhi.n	800d0bc <UART_SetConfig+0x2cc>
 800d06e:	a201      	add	r2, pc, #4	; (adr r2, 800d074 <UART_SetConfig+0x284>)
 800d070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d074:	0800d08d 	.word	0x0800d08d
 800d078:	0800d095 	.word	0x0800d095
 800d07c:	0800d09d 	.word	0x0800d09d
 800d080:	0800d0a5 	.word	0x0800d0a5
 800d084:	0800d0ad 	.word	0x0800d0ad
 800d088:	0800d0b5 	.word	0x0800d0b5
 800d08c:	2300      	movs	r3, #0
 800d08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d092:	e284      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d094:	2304      	movs	r3, #4
 800d096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d09a:	e280      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d09c:	2308      	movs	r3, #8
 800d09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0a2:	e27c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d0a4:	2310      	movs	r3, #16
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0aa:	e278      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0b2:	e274      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d0b4:	2340      	movs	r3, #64	; 0x40
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0ba:	e270      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d0bc:	2380      	movs	r3, #128	; 0x80
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0c2:	e26c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a1b      	ldr	r2, [pc, #108]	; (800d138 <UART_SetConfig+0x348>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d142      	bne.n	800d154 <UART_SetConfig+0x364>
 800d0ce:	4b16      	ldr	r3, [pc, #88]	; (800d128 <UART_SetConfig+0x338>)
 800d0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	2b05      	cmp	r3, #5
 800d0d8:	d838      	bhi.n	800d14c <UART_SetConfig+0x35c>
 800d0da:	a201      	add	r2, pc, #4	; (adr r2, 800d0e0 <UART_SetConfig+0x2f0>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d0f9 	.word	0x0800d0f9
 800d0e4:	0800d101 	.word	0x0800d101
 800d0e8:	0800d109 	.word	0x0800d109
 800d0ec:	0800d111 	.word	0x0800d111
 800d0f0:	0800d13d 	.word	0x0800d13d
 800d0f4:	0800d145 	.word	0x0800d145
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d0fe:	e24e      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d100:	2304      	movs	r3, #4
 800d102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d106:	e24a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d108:	2308      	movs	r3, #8
 800d10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d10e:	e246      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d110:	2310      	movs	r3, #16
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d116:	e242      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d118:	cfff69f3 	.word	0xcfff69f3
 800d11c:	58000c00 	.word	0x58000c00
 800d120:	11fff4ff 	.word	0x11fff4ff
 800d124:	40011000 	.word	0x40011000
 800d128:	58024400 	.word	0x58024400
 800d12c:	40004400 	.word	0x40004400
 800d130:	40004800 	.word	0x40004800
 800d134:	40004c00 	.word	0x40004c00
 800d138:	40005000 	.word	0x40005000
 800d13c:	2320      	movs	r3, #32
 800d13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d142:	e22c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d144:	2340      	movs	r3, #64	; 0x40
 800d146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d14a:	e228      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d14c:	2380      	movs	r3, #128	; 0x80
 800d14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d152:	e224      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4ab1      	ldr	r2, [pc, #708]	; (800d420 <UART_SetConfig+0x630>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d176      	bne.n	800d24c <UART_SetConfig+0x45c>
 800d15e:	4bb1      	ldr	r3, [pc, #708]	; (800d424 <UART_SetConfig+0x634>)
 800d160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d166:	2b28      	cmp	r3, #40	; 0x28
 800d168:	d86c      	bhi.n	800d244 <UART_SetConfig+0x454>
 800d16a:	a201      	add	r2, pc, #4	; (adr r2, 800d170 <UART_SetConfig+0x380>)
 800d16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d170:	0800d215 	.word	0x0800d215
 800d174:	0800d245 	.word	0x0800d245
 800d178:	0800d245 	.word	0x0800d245
 800d17c:	0800d245 	.word	0x0800d245
 800d180:	0800d245 	.word	0x0800d245
 800d184:	0800d245 	.word	0x0800d245
 800d188:	0800d245 	.word	0x0800d245
 800d18c:	0800d245 	.word	0x0800d245
 800d190:	0800d21d 	.word	0x0800d21d
 800d194:	0800d245 	.word	0x0800d245
 800d198:	0800d245 	.word	0x0800d245
 800d19c:	0800d245 	.word	0x0800d245
 800d1a0:	0800d245 	.word	0x0800d245
 800d1a4:	0800d245 	.word	0x0800d245
 800d1a8:	0800d245 	.word	0x0800d245
 800d1ac:	0800d245 	.word	0x0800d245
 800d1b0:	0800d225 	.word	0x0800d225
 800d1b4:	0800d245 	.word	0x0800d245
 800d1b8:	0800d245 	.word	0x0800d245
 800d1bc:	0800d245 	.word	0x0800d245
 800d1c0:	0800d245 	.word	0x0800d245
 800d1c4:	0800d245 	.word	0x0800d245
 800d1c8:	0800d245 	.word	0x0800d245
 800d1cc:	0800d245 	.word	0x0800d245
 800d1d0:	0800d22d 	.word	0x0800d22d
 800d1d4:	0800d245 	.word	0x0800d245
 800d1d8:	0800d245 	.word	0x0800d245
 800d1dc:	0800d245 	.word	0x0800d245
 800d1e0:	0800d245 	.word	0x0800d245
 800d1e4:	0800d245 	.word	0x0800d245
 800d1e8:	0800d245 	.word	0x0800d245
 800d1ec:	0800d245 	.word	0x0800d245
 800d1f0:	0800d235 	.word	0x0800d235
 800d1f4:	0800d245 	.word	0x0800d245
 800d1f8:	0800d245 	.word	0x0800d245
 800d1fc:	0800d245 	.word	0x0800d245
 800d200:	0800d245 	.word	0x0800d245
 800d204:	0800d245 	.word	0x0800d245
 800d208:	0800d245 	.word	0x0800d245
 800d20c:	0800d245 	.word	0x0800d245
 800d210:	0800d23d 	.word	0x0800d23d
 800d214:	2301      	movs	r3, #1
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d21a:	e1c0      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d21c:	2304      	movs	r3, #4
 800d21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d222:	e1bc      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d224:	2308      	movs	r3, #8
 800d226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d22a:	e1b8      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d22c:	2310      	movs	r3, #16
 800d22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d232:	e1b4      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d234:	2320      	movs	r3, #32
 800d236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d23a:	e1b0      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d242:	e1ac      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d244:	2380      	movs	r3, #128	; 0x80
 800d246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d24a:	e1a8      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a75      	ldr	r2, [pc, #468]	; (800d428 <UART_SetConfig+0x638>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d130      	bne.n	800d2b8 <UART_SetConfig+0x4c8>
 800d256:	4b73      	ldr	r3, [pc, #460]	; (800d424 <UART_SetConfig+0x634>)
 800d258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d25a:	f003 0307 	and.w	r3, r3, #7
 800d25e:	2b05      	cmp	r3, #5
 800d260:	d826      	bhi.n	800d2b0 <UART_SetConfig+0x4c0>
 800d262:	a201      	add	r2, pc, #4	; (adr r2, 800d268 <UART_SetConfig+0x478>)
 800d264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d268:	0800d281 	.word	0x0800d281
 800d26c:	0800d289 	.word	0x0800d289
 800d270:	0800d291 	.word	0x0800d291
 800d274:	0800d299 	.word	0x0800d299
 800d278:	0800d2a1 	.word	0x0800d2a1
 800d27c:	0800d2a9 	.word	0x0800d2a9
 800d280:	2300      	movs	r3, #0
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d286:	e18a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d288:	2304      	movs	r3, #4
 800d28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d28e:	e186      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d290:	2308      	movs	r3, #8
 800d292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d296:	e182      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d298:	2310      	movs	r3, #16
 800d29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d29e:	e17e      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2a0:	2320      	movs	r3, #32
 800d2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2a6:	e17a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2a8:	2340      	movs	r3, #64	; 0x40
 800d2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ae:	e176      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2b0:	2380      	movs	r3, #128	; 0x80
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e172      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a5b      	ldr	r2, [pc, #364]	; (800d42c <UART_SetConfig+0x63c>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d130      	bne.n	800d324 <UART_SetConfig+0x534>
 800d2c2:	4b58      	ldr	r3, [pc, #352]	; (800d424 <UART_SetConfig+0x634>)
 800d2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2c6:	f003 0307 	and.w	r3, r3, #7
 800d2ca:	2b05      	cmp	r3, #5
 800d2cc:	d826      	bhi.n	800d31c <UART_SetConfig+0x52c>
 800d2ce:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <UART_SetConfig+0x4e4>)
 800d2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d4:	0800d2ed 	.word	0x0800d2ed
 800d2d8:	0800d2f5 	.word	0x0800d2f5
 800d2dc:	0800d2fd 	.word	0x0800d2fd
 800d2e0:	0800d305 	.word	0x0800d305
 800d2e4:	0800d30d 	.word	0x0800d30d
 800d2e8:	0800d315 	.word	0x0800d315
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2f2:	e154      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2f4:	2304      	movs	r3, #4
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2fa:	e150      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d2fc:	2308      	movs	r3, #8
 800d2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d302:	e14c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d304:	2310      	movs	r3, #16
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d30a:	e148      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d30c:	2320      	movs	r3, #32
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e144      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d31a:	e140      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d31c:	2380      	movs	r3, #128	; 0x80
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e13c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	4a41      	ldr	r2, [pc, #260]	; (800d430 <UART_SetConfig+0x640>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	f040 8082 	bne.w	800d434 <UART_SetConfig+0x644>
 800d330:	4b3c      	ldr	r3, [pc, #240]	; (800d424 <UART_SetConfig+0x634>)
 800d332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d338:	2b28      	cmp	r3, #40	; 0x28
 800d33a:	d86d      	bhi.n	800d418 <UART_SetConfig+0x628>
 800d33c:	a201      	add	r2, pc, #4	; (adr r2, 800d344 <UART_SetConfig+0x554>)
 800d33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d342:	bf00      	nop
 800d344:	0800d3e9 	.word	0x0800d3e9
 800d348:	0800d419 	.word	0x0800d419
 800d34c:	0800d419 	.word	0x0800d419
 800d350:	0800d419 	.word	0x0800d419
 800d354:	0800d419 	.word	0x0800d419
 800d358:	0800d419 	.word	0x0800d419
 800d35c:	0800d419 	.word	0x0800d419
 800d360:	0800d419 	.word	0x0800d419
 800d364:	0800d3f1 	.word	0x0800d3f1
 800d368:	0800d419 	.word	0x0800d419
 800d36c:	0800d419 	.word	0x0800d419
 800d370:	0800d419 	.word	0x0800d419
 800d374:	0800d419 	.word	0x0800d419
 800d378:	0800d419 	.word	0x0800d419
 800d37c:	0800d419 	.word	0x0800d419
 800d380:	0800d419 	.word	0x0800d419
 800d384:	0800d3f9 	.word	0x0800d3f9
 800d388:	0800d419 	.word	0x0800d419
 800d38c:	0800d419 	.word	0x0800d419
 800d390:	0800d419 	.word	0x0800d419
 800d394:	0800d419 	.word	0x0800d419
 800d398:	0800d419 	.word	0x0800d419
 800d39c:	0800d419 	.word	0x0800d419
 800d3a0:	0800d419 	.word	0x0800d419
 800d3a4:	0800d401 	.word	0x0800d401
 800d3a8:	0800d419 	.word	0x0800d419
 800d3ac:	0800d419 	.word	0x0800d419
 800d3b0:	0800d419 	.word	0x0800d419
 800d3b4:	0800d419 	.word	0x0800d419
 800d3b8:	0800d419 	.word	0x0800d419
 800d3bc:	0800d419 	.word	0x0800d419
 800d3c0:	0800d419 	.word	0x0800d419
 800d3c4:	0800d409 	.word	0x0800d409
 800d3c8:	0800d419 	.word	0x0800d419
 800d3cc:	0800d419 	.word	0x0800d419
 800d3d0:	0800d419 	.word	0x0800d419
 800d3d4:	0800d419 	.word	0x0800d419
 800d3d8:	0800d419 	.word	0x0800d419
 800d3dc:	0800d419 	.word	0x0800d419
 800d3e0:	0800d419 	.word	0x0800d419
 800d3e4:	0800d411 	.word	0x0800d411
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e0d6      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d3f0:	2304      	movs	r3, #4
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e0d2      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d3f8:	2308      	movs	r3, #8
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e0ce      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d400:	2310      	movs	r3, #16
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d406:	e0ca      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d408:	2320      	movs	r3, #32
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40e:	e0c6      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d410:	2340      	movs	r3, #64	; 0x40
 800d412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d416:	e0c2      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d418:	2380      	movs	r3, #128	; 0x80
 800d41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41e:	e0be      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d420:	40011400 	.word	0x40011400
 800d424:	58024400 	.word	0x58024400
 800d428:	40007800 	.word	0x40007800
 800d42c:	40007c00 	.word	0x40007c00
 800d430:	40011800 	.word	0x40011800
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4aad      	ldr	r2, [pc, #692]	; (800d6f0 <UART_SetConfig+0x900>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d176      	bne.n	800d52c <UART_SetConfig+0x73c>
 800d43e:	4bad      	ldr	r3, [pc, #692]	; (800d6f4 <UART_SetConfig+0x904>)
 800d440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d446:	2b28      	cmp	r3, #40	; 0x28
 800d448:	d86c      	bhi.n	800d524 <UART_SetConfig+0x734>
 800d44a:	a201      	add	r2, pc, #4	; (adr r2, 800d450 <UART_SetConfig+0x660>)
 800d44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d450:	0800d4f5 	.word	0x0800d4f5
 800d454:	0800d525 	.word	0x0800d525
 800d458:	0800d525 	.word	0x0800d525
 800d45c:	0800d525 	.word	0x0800d525
 800d460:	0800d525 	.word	0x0800d525
 800d464:	0800d525 	.word	0x0800d525
 800d468:	0800d525 	.word	0x0800d525
 800d46c:	0800d525 	.word	0x0800d525
 800d470:	0800d4fd 	.word	0x0800d4fd
 800d474:	0800d525 	.word	0x0800d525
 800d478:	0800d525 	.word	0x0800d525
 800d47c:	0800d525 	.word	0x0800d525
 800d480:	0800d525 	.word	0x0800d525
 800d484:	0800d525 	.word	0x0800d525
 800d488:	0800d525 	.word	0x0800d525
 800d48c:	0800d525 	.word	0x0800d525
 800d490:	0800d505 	.word	0x0800d505
 800d494:	0800d525 	.word	0x0800d525
 800d498:	0800d525 	.word	0x0800d525
 800d49c:	0800d525 	.word	0x0800d525
 800d4a0:	0800d525 	.word	0x0800d525
 800d4a4:	0800d525 	.word	0x0800d525
 800d4a8:	0800d525 	.word	0x0800d525
 800d4ac:	0800d525 	.word	0x0800d525
 800d4b0:	0800d50d 	.word	0x0800d50d
 800d4b4:	0800d525 	.word	0x0800d525
 800d4b8:	0800d525 	.word	0x0800d525
 800d4bc:	0800d525 	.word	0x0800d525
 800d4c0:	0800d525 	.word	0x0800d525
 800d4c4:	0800d525 	.word	0x0800d525
 800d4c8:	0800d525 	.word	0x0800d525
 800d4cc:	0800d525 	.word	0x0800d525
 800d4d0:	0800d515 	.word	0x0800d515
 800d4d4:	0800d525 	.word	0x0800d525
 800d4d8:	0800d525 	.word	0x0800d525
 800d4dc:	0800d525 	.word	0x0800d525
 800d4e0:	0800d525 	.word	0x0800d525
 800d4e4:	0800d525 	.word	0x0800d525
 800d4e8:	0800d525 	.word	0x0800d525
 800d4ec:	0800d525 	.word	0x0800d525
 800d4f0:	0800d51d 	.word	0x0800d51d
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4fa:	e050      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d502:	e04c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d504:	2308      	movs	r3, #8
 800d506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d50a:	e048      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d50c:	2310      	movs	r3, #16
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d512:	e044      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d514:	2320      	movs	r3, #32
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e040      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d51c:	2340      	movs	r3, #64	; 0x40
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e03c      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d524:	2380      	movs	r3, #128	; 0x80
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e038      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a71      	ldr	r2, [pc, #452]	; (800d6f8 <UART_SetConfig+0x908>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d130      	bne.n	800d598 <UART_SetConfig+0x7a8>
 800d536:	4b6f      	ldr	r3, [pc, #444]	; (800d6f4 <UART_SetConfig+0x904>)
 800d538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d53a:	f003 0307 	and.w	r3, r3, #7
 800d53e:	2b05      	cmp	r3, #5
 800d540:	d826      	bhi.n	800d590 <UART_SetConfig+0x7a0>
 800d542:	a201      	add	r2, pc, #4	; (adr r2, 800d548 <UART_SetConfig+0x758>)
 800d544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d548:	0800d561 	.word	0x0800d561
 800d54c:	0800d569 	.word	0x0800d569
 800d550:	0800d571 	.word	0x0800d571
 800d554:	0800d579 	.word	0x0800d579
 800d558:	0800d581 	.word	0x0800d581
 800d55c:	0800d589 	.word	0x0800d589
 800d560:	2302      	movs	r3, #2
 800d562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d566:	e01a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d568:	2304      	movs	r3, #4
 800d56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d56e:	e016      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d570:	2308      	movs	r3, #8
 800d572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d576:	e012      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d578:	2310      	movs	r3, #16
 800d57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57e:	e00e      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d580:	2320      	movs	r3, #32
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d586:	e00a      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d588:	2340      	movs	r3, #64	; 0x40
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58e:	e006      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d590:	2380      	movs	r3, #128	; 0x80
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d596:	e002      	b.n	800d59e <UART_SetConfig+0x7ae>
 800d598:	2380      	movs	r3, #128	; 0x80
 800d59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a55      	ldr	r2, [pc, #340]	; (800d6f8 <UART_SetConfig+0x908>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	f040 80f8 	bne.w	800d79a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d5aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d5ae:	2b20      	cmp	r3, #32
 800d5b0:	dc46      	bgt.n	800d640 <UART_SetConfig+0x850>
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	db75      	blt.n	800d6a2 <UART_SetConfig+0x8b2>
 800d5b6:	3b02      	subs	r3, #2
 800d5b8:	2b1e      	cmp	r3, #30
 800d5ba:	d872      	bhi.n	800d6a2 <UART_SetConfig+0x8b2>
 800d5bc:	a201      	add	r2, pc, #4	; (adr r2, 800d5c4 <UART_SetConfig+0x7d4>)
 800d5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5c2:	bf00      	nop
 800d5c4:	0800d647 	.word	0x0800d647
 800d5c8:	0800d6a3 	.word	0x0800d6a3
 800d5cc:	0800d64f 	.word	0x0800d64f
 800d5d0:	0800d6a3 	.word	0x0800d6a3
 800d5d4:	0800d6a3 	.word	0x0800d6a3
 800d5d8:	0800d6a3 	.word	0x0800d6a3
 800d5dc:	0800d65f 	.word	0x0800d65f
 800d5e0:	0800d6a3 	.word	0x0800d6a3
 800d5e4:	0800d6a3 	.word	0x0800d6a3
 800d5e8:	0800d6a3 	.word	0x0800d6a3
 800d5ec:	0800d6a3 	.word	0x0800d6a3
 800d5f0:	0800d6a3 	.word	0x0800d6a3
 800d5f4:	0800d6a3 	.word	0x0800d6a3
 800d5f8:	0800d6a3 	.word	0x0800d6a3
 800d5fc:	0800d66f 	.word	0x0800d66f
 800d600:	0800d6a3 	.word	0x0800d6a3
 800d604:	0800d6a3 	.word	0x0800d6a3
 800d608:	0800d6a3 	.word	0x0800d6a3
 800d60c:	0800d6a3 	.word	0x0800d6a3
 800d610:	0800d6a3 	.word	0x0800d6a3
 800d614:	0800d6a3 	.word	0x0800d6a3
 800d618:	0800d6a3 	.word	0x0800d6a3
 800d61c:	0800d6a3 	.word	0x0800d6a3
 800d620:	0800d6a3 	.word	0x0800d6a3
 800d624:	0800d6a3 	.word	0x0800d6a3
 800d628:	0800d6a3 	.word	0x0800d6a3
 800d62c:	0800d6a3 	.word	0x0800d6a3
 800d630:	0800d6a3 	.word	0x0800d6a3
 800d634:	0800d6a3 	.word	0x0800d6a3
 800d638:	0800d6a3 	.word	0x0800d6a3
 800d63c:	0800d695 	.word	0x0800d695
 800d640:	2b40      	cmp	r3, #64	; 0x40
 800d642:	d02a      	beq.n	800d69a <UART_SetConfig+0x8aa>
 800d644:	e02d      	b.n	800d6a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d646:	f7fd f85b 	bl	800a700 <HAL_RCCEx_GetD3PCLK1Freq>
 800d64a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d64c:	e02f      	b.n	800d6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d64e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d652:	4618      	mov	r0, r3
 800d654:	f7fd f86a 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d65c:	e027      	b.n	800d6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d65e:	f107 0318 	add.w	r3, r7, #24
 800d662:	4618      	mov	r0, r3
 800d664:	f7fd f9b6 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d66c:	e01f      	b.n	800d6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d66e:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <UART_SetConfig+0x904>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d009      	beq.n	800d68e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d67a:	4b1e      	ldr	r3, [pc, #120]	; (800d6f4 <UART_SetConfig+0x904>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	08db      	lsrs	r3, r3, #3
 800d680:	f003 0303 	and.w	r3, r3, #3
 800d684:	4a1d      	ldr	r2, [pc, #116]	; (800d6fc <UART_SetConfig+0x90c>)
 800d686:	fa22 f303 	lsr.w	r3, r2, r3
 800d68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d68c:	e00f      	b.n	800d6ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d68e:	4b1b      	ldr	r3, [pc, #108]	; (800d6fc <UART_SetConfig+0x90c>)
 800d690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d692:	e00c      	b.n	800d6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d694:	4b1a      	ldr	r3, [pc, #104]	; (800d700 <UART_SetConfig+0x910>)
 800d696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d698:	e009      	b.n	800d6ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d69a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d6a0:	e005      	b.n	800d6ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d6ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 81ee 	beq.w	800da92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ba:	4a12      	ldr	r2, [pc, #72]	; (800d704 <UART_SetConfig+0x914>)
 800d6bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d305      	bcc.n	800d6e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6e2:	429a      	cmp	r2, r3
 800d6e4:	d910      	bls.n	800d708 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d6ec:	e1d1      	b.n	800da92 <UART_SetConfig+0xca2>
 800d6ee:	bf00      	nop
 800d6f0:	40011c00 	.word	0x40011c00
 800d6f4:	58024400 	.word	0x58024400
 800d6f8:	58000c00 	.word	0x58000c00
 800d6fc:	03d09000 	.word	0x03d09000
 800d700:	003d0900 	.word	0x003d0900
 800d704:	0801b2d4 	.word	0x0801b2d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70a:	2200      	movs	r2, #0
 800d70c:	60bb      	str	r3, [r7, #8]
 800d70e:	60fa      	str	r2, [r7, #12]
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	4ac0      	ldr	r2, [pc, #768]	; (800da18 <UART_SetConfig+0xc28>)
 800d716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	2200      	movs	r2, #0
 800d71e:	603b      	str	r3, [r7, #0]
 800d720:	607a      	str	r2, [r7, #4]
 800d722:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d72a:	f7f2 fdf1 	bl	8000310 <__aeabi_uldivmod>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4610      	mov	r0, r2
 800d734:	4619      	mov	r1, r3
 800d736:	f04f 0200 	mov.w	r2, #0
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	020b      	lsls	r3, r1, #8
 800d740:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d744:	0202      	lsls	r2, r0, #8
 800d746:	6979      	ldr	r1, [r7, #20]
 800d748:	6849      	ldr	r1, [r1, #4]
 800d74a:	0849      	lsrs	r1, r1, #1
 800d74c:	2000      	movs	r0, #0
 800d74e:	460c      	mov	r4, r1
 800d750:	4605      	mov	r5, r0
 800d752:	eb12 0804 	adds.w	r8, r2, r4
 800d756:	eb43 0905 	adc.w	r9, r3, r5
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	469a      	mov	sl, r3
 800d762:	4693      	mov	fp, r2
 800d764:	4652      	mov	r2, sl
 800d766:	465b      	mov	r3, fp
 800d768:	4640      	mov	r0, r8
 800d76a:	4649      	mov	r1, r9
 800d76c:	f7f2 fdd0 	bl	8000310 <__aeabi_uldivmod>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4613      	mov	r3, r2
 800d776:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d77e:	d308      	bcc.n	800d792 <UART_SetConfig+0x9a2>
 800d780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d786:	d204      	bcs.n	800d792 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d78e:	60da      	str	r2, [r3, #12]
 800d790:	e17f      	b.n	800da92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d792:	2301      	movs	r3, #1
 800d794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d798:	e17b      	b.n	800da92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7a2:	f040 80bd 	bne.w	800d920 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d7a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7aa:	2b20      	cmp	r3, #32
 800d7ac:	dc48      	bgt.n	800d840 <UART_SetConfig+0xa50>
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	db7b      	blt.n	800d8aa <UART_SetConfig+0xaba>
 800d7b2:	2b20      	cmp	r3, #32
 800d7b4:	d879      	bhi.n	800d8aa <UART_SetConfig+0xaba>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <UART_SetConfig+0x9cc>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d847 	.word	0x0800d847
 800d7c0:	0800d84f 	.word	0x0800d84f
 800d7c4:	0800d8ab 	.word	0x0800d8ab
 800d7c8:	0800d8ab 	.word	0x0800d8ab
 800d7cc:	0800d857 	.word	0x0800d857
 800d7d0:	0800d8ab 	.word	0x0800d8ab
 800d7d4:	0800d8ab 	.word	0x0800d8ab
 800d7d8:	0800d8ab 	.word	0x0800d8ab
 800d7dc:	0800d867 	.word	0x0800d867
 800d7e0:	0800d8ab 	.word	0x0800d8ab
 800d7e4:	0800d8ab 	.word	0x0800d8ab
 800d7e8:	0800d8ab 	.word	0x0800d8ab
 800d7ec:	0800d8ab 	.word	0x0800d8ab
 800d7f0:	0800d8ab 	.word	0x0800d8ab
 800d7f4:	0800d8ab 	.word	0x0800d8ab
 800d7f8:	0800d8ab 	.word	0x0800d8ab
 800d7fc:	0800d877 	.word	0x0800d877
 800d800:	0800d8ab 	.word	0x0800d8ab
 800d804:	0800d8ab 	.word	0x0800d8ab
 800d808:	0800d8ab 	.word	0x0800d8ab
 800d80c:	0800d8ab 	.word	0x0800d8ab
 800d810:	0800d8ab 	.word	0x0800d8ab
 800d814:	0800d8ab 	.word	0x0800d8ab
 800d818:	0800d8ab 	.word	0x0800d8ab
 800d81c:	0800d8ab 	.word	0x0800d8ab
 800d820:	0800d8ab 	.word	0x0800d8ab
 800d824:	0800d8ab 	.word	0x0800d8ab
 800d828:	0800d8ab 	.word	0x0800d8ab
 800d82c:	0800d8ab 	.word	0x0800d8ab
 800d830:	0800d8ab 	.word	0x0800d8ab
 800d834:	0800d8ab 	.word	0x0800d8ab
 800d838:	0800d8ab 	.word	0x0800d8ab
 800d83c:	0800d89d 	.word	0x0800d89d
 800d840:	2b40      	cmp	r3, #64	; 0x40
 800d842:	d02e      	beq.n	800d8a2 <UART_SetConfig+0xab2>
 800d844:	e031      	b.n	800d8aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d846:	f7fb fc0f 	bl	8009068 <HAL_RCC_GetPCLK1Freq>
 800d84a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d84c:	e033      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d84e:	f7fb fc21 	bl	8009094 <HAL_RCC_GetPCLK2Freq>
 800d852:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d854:	e02f      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7fc ff66 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d864:	e027      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d866:	f107 0318 	add.w	r3, r7, #24
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fd f8b2 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d874:	e01f      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d876:	4b69      	ldr	r3, [pc, #420]	; (800da1c <UART_SetConfig+0xc2c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f003 0320 	and.w	r3, r3, #32
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d009      	beq.n	800d896 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d882:	4b66      	ldr	r3, [pc, #408]	; (800da1c <UART_SetConfig+0xc2c>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	08db      	lsrs	r3, r3, #3
 800d888:	f003 0303 	and.w	r3, r3, #3
 800d88c:	4a64      	ldr	r2, [pc, #400]	; (800da20 <UART_SetConfig+0xc30>)
 800d88e:	fa22 f303 	lsr.w	r3, r2, r3
 800d892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d894:	e00f      	b.n	800d8b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d896:	4b62      	ldr	r3, [pc, #392]	; (800da20 <UART_SetConfig+0xc30>)
 800d898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d89a:	e00c      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d89c:	4b61      	ldr	r3, [pc, #388]	; (800da24 <UART_SetConfig+0xc34>)
 800d89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8a0:	e009      	b.n	800d8b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d8a8:	e005      	b.n	800d8b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d8b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d8b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 80ea 	beq.w	800da92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c2:	4a55      	ldr	r2, [pc, #340]	; (800da18 <UART_SetConfig+0xc28>)
 800d8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8d0:	005a      	lsls	r2, r3, #1
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	085b      	lsrs	r3, r3, #1
 800d8d8:	441a      	add	r2, r3
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e6:	2b0f      	cmp	r3, #15
 800d8e8:	d916      	bls.n	800d918 <UART_SetConfig+0xb28>
 800d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8f0:	d212      	bcs.n	800d918 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	f023 030f 	bic.w	r3, r3, #15
 800d8fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fe:	085b      	lsrs	r3, r3, #1
 800d900:	b29b      	uxth	r3, r3
 800d902:	f003 0307 	and.w	r3, r3, #7
 800d906:	b29a      	uxth	r2, r3
 800d908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d90a:	4313      	orrs	r3, r2
 800d90c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d914:	60da      	str	r2, [r3, #12]
 800d916:	e0bc      	b.n	800da92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d91e:	e0b8      	b.n	800da92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d920:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d924:	2b20      	cmp	r3, #32
 800d926:	dc4b      	bgt.n	800d9c0 <UART_SetConfig+0xbd0>
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f2c0 8087 	blt.w	800da3c <UART_SetConfig+0xc4c>
 800d92e:	2b20      	cmp	r3, #32
 800d930:	f200 8084 	bhi.w	800da3c <UART_SetConfig+0xc4c>
 800d934:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <UART_SetConfig+0xb4c>)
 800d936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93a:	bf00      	nop
 800d93c:	0800d9c7 	.word	0x0800d9c7
 800d940:	0800d9cf 	.word	0x0800d9cf
 800d944:	0800da3d 	.word	0x0800da3d
 800d948:	0800da3d 	.word	0x0800da3d
 800d94c:	0800d9d7 	.word	0x0800d9d7
 800d950:	0800da3d 	.word	0x0800da3d
 800d954:	0800da3d 	.word	0x0800da3d
 800d958:	0800da3d 	.word	0x0800da3d
 800d95c:	0800d9e7 	.word	0x0800d9e7
 800d960:	0800da3d 	.word	0x0800da3d
 800d964:	0800da3d 	.word	0x0800da3d
 800d968:	0800da3d 	.word	0x0800da3d
 800d96c:	0800da3d 	.word	0x0800da3d
 800d970:	0800da3d 	.word	0x0800da3d
 800d974:	0800da3d 	.word	0x0800da3d
 800d978:	0800da3d 	.word	0x0800da3d
 800d97c:	0800d9f7 	.word	0x0800d9f7
 800d980:	0800da3d 	.word	0x0800da3d
 800d984:	0800da3d 	.word	0x0800da3d
 800d988:	0800da3d 	.word	0x0800da3d
 800d98c:	0800da3d 	.word	0x0800da3d
 800d990:	0800da3d 	.word	0x0800da3d
 800d994:	0800da3d 	.word	0x0800da3d
 800d998:	0800da3d 	.word	0x0800da3d
 800d99c:	0800da3d 	.word	0x0800da3d
 800d9a0:	0800da3d 	.word	0x0800da3d
 800d9a4:	0800da3d 	.word	0x0800da3d
 800d9a8:	0800da3d 	.word	0x0800da3d
 800d9ac:	0800da3d 	.word	0x0800da3d
 800d9b0:	0800da3d 	.word	0x0800da3d
 800d9b4:	0800da3d 	.word	0x0800da3d
 800d9b8:	0800da3d 	.word	0x0800da3d
 800d9bc:	0800da2f 	.word	0x0800da2f
 800d9c0:	2b40      	cmp	r3, #64	; 0x40
 800d9c2:	d037      	beq.n	800da34 <UART_SetConfig+0xc44>
 800d9c4:	e03a      	b.n	800da3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9c6:	f7fb fb4f 	bl	8009068 <HAL_RCC_GetPCLK1Freq>
 800d9ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9cc:	e03c      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9ce:	f7fb fb61 	bl	8009094 <HAL_RCC_GetPCLK2Freq>
 800d9d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9d4:	e038      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f7fc fea6 	bl	800a72c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9e4:	e030      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9e6:	f107 0318 	add.w	r3, r7, #24
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fc fff2 	bl	800a9d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9f4:	e028      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9f6:	4b09      	ldr	r3, [pc, #36]	; (800da1c <UART_SetConfig+0xc2c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f003 0320 	and.w	r3, r3, #32
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d012      	beq.n	800da28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800da02:	4b06      	ldr	r3, [pc, #24]	; (800da1c <UART_SetConfig+0xc2c>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	08db      	lsrs	r3, r3, #3
 800da08:	f003 0303 	and.w	r3, r3, #3
 800da0c:	4a04      	ldr	r2, [pc, #16]	; (800da20 <UART_SetConfig+0xc30>)
 800da0e:	fa22 f303 	lsr.w	r3, r2, r3
 800da12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da14:	e018      	b.n	800da48 <UART_SetConfig+0xc58>
 800da16:	bf00      	nop
 800da18:	0801b2d4 	.word	0x0801b2d4
 800da1c:	58024400 	.word	0x58024400
 800da20:	03d09000 	.word	0x03d09000
 800da24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800da28:	4b24      	ldr	r3, [pc, #144]	; (800dabc <UART_SetConfig+0xccc>)
 800da2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da2c:	e00c      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800da2e:	4b24      	ldr	r3, [pc, #144]	; (800dac0 <UART_SetConfig+0xcd0>)
 800da30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da32:	e009      	b.n	800da48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da3a:	e005      	b.n	800da48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800da3c:	2300      	movs	r3, #0
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da46:	bf00      	nop
    }

    if (pclk != 0U)
 800da48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d021      	beq.n	800da92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da52:	4a1c      	ldr	r2, [pc, #112]	; (800dac4 <UART_SetConfig+0xcd4>)
 800da54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da58:	461a      	mov	r2, r3
 800da5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	085b      	lsrs	r3, r3, #1
 800da66:	441a      	add	r2, r3
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800da70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	2b0f      	cmp	r3, #15
 800da76:	d909      	bls.n	800da8c <UART_SetConfig+0xc9c>
 800da78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da7e:	d205      	bcs.n	800da8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da82:	b29a      	uxth	r2, r3
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	60da      	str	r2, [r3, #12]
 800da8a:	e002      	b.n	800da92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2201      	movs	r2, #1
 800da96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	2200      	movs	r2, #0
 800daa6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2200      	movs	r2, #0
 800daac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800daae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3748      	adds	r7, #72	; 0x48
 800dab6:	46bd      	mov	sp, r7
 800dab8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dabc:	03d09000 	.word	0x03d09000
 800dac0:	003d0900 	.word	0x003d0900
 800dac4:	0801b2d4 	.word	0x0801b2d4

0800dac8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dac8:	b480      	push	{r7}
 800daca:	b083      	sub	sp, #12
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad4:	f003 0301 	and.w	r3, r3, #1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00a      	beq.n	800daf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	430a      	orrs	r2, r1
 800daf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf6:	f003 0302 	and.w	r3, r3, #2
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d00a      	beq.n	800db14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	430a      	orrs	r2, r1
 800db12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00a      	beq.n	800db36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	430a      	orrs	r2, r1
 800db34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	f003 0308 	and.w	r3, r3, #8
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00a      	beq.n	800db58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	430a      	orrs	r2, r1
 800db56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d00a      	beq.n	800db7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	689b      	ldr	r3, [r3, #8]
 800db6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	430a      	orrs	r2, r1
 800db78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7e:	f003 0320 	and.w	r3, r3, #32
 800db82:	2b00      	cmp	r3, #0
 800db84:	d00a      	beq.n	800db9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	430a      	orrs	r2, r1
 800db9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d01a      	beq.n	800dbde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	685b      	ldr	r3, [r3, #4]
 800dbae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	430a      	orrs	r2, r1
 800dbbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbc6:	d10a      	bne.n	800dbde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	430a      	orrs	r2, r1
 800dbdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00a      	beq.n	800dc00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	430a      	orrs	r2, r1
 800dbfe:	605a      	str	r2, [r3, #4]
  }
}
 800dc00:	bf00      	nop
 800dc02:	370c      	adds	r7, #12
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af02      	add	r7, sp, #8
 800dc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc1c:	f7f5 fabe 	bl	800319c <HAL_GetTick>
 800dc20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 0308 	and.w	r3, r3, #8
 800dc2c:	2b08      	cmp	r3, #8
 800dc2e:	d10e      	bne.n	800dc4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 f82f 	bl	800dca2 <UART_WaitOnFlagUntilTimeout>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	e025      	b.n	800dc9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b04      	cmp	r3, #4
 800dc5a:	d10e      	bne.n	800dc7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f819 	bl	800dca2 <UART_WaitOnFlagUntilTimeout>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc76:	2303      	movs	r3, #3
 800dc78:	e00f      	b.n	800dc9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2220      	movs	r2, #32
 800dc86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc98:	2300      	movs	r3, #0
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b09c      	sub	sp, #112	; 0x70
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	60f8      	str	r0, [r7, #12]
 800dcaa:	60b9      	str	r1, [r7, #8]
 800dcac:	603b      	str	r3, [r7, #0]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dcb2:	e0a9      	b.n	800de08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dcb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcba:	f000 80a5 	beq.w	800de08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcbe:	f7f5 fa6d 	bl	800319c <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d302      	bcc.n	800dcd4 <UART_WaitOnFlagUntilTimeout+0x32>
 800dcce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d140      	bne.n	800dd56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcdc:	e853 3f00 	ldrex	r3, [r3]
 800dce0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dce8:	667b      	str	r3, [r7, #100]	; 0x64
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	461a      	mov	r2, r3
 800dcf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dcfa:	e841 2300 	strex	r3, r2, [r1]
 800dcfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dd00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1e6      	bne.n	800dcd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd10:	e853 3f00 	ldrex	r3, [r3]
 800dd14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	f023 0301 	bic.w	r3, r3, #1
 800dd1c:	663b      	str	r3, [r7, #96]	; 0x60
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	3308      	adds	r3, #8
 800dd24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd26:	64ba      	str	r2, [r7, #72]	; 0x48
 800dd28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd2e:	e841 2300 	strex	r3, r2, [r1]
 800dd32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e5      	bne.n	800dd06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2220      	movs	r2, #32
 800dd46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dd52:	2303      	movs	r3, #3
 800dd54:	e069      	b.n	800de2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0304 	and.w	r3, r3, #4
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d051      	beq.n	800de08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd72:	d149      	bne.n	800de08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	e853 3f00 	ldrex	r3, [r3]
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dd92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dda0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dda2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dda4:	e841 2300 	strex	r3, r2, [r1]
 800dda8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1e6      	bne.n	800dd7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	e853 3f00 	ldrex	r3, [r3]
 800ddbe:	613b      	str	r3, [r7, #16]
   return(result);
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	f023 0301 	bic.w	r3, r3, #1
 800ddc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	3308      	adds	r3, #8
 800ddce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ddd0:	623a      	str	r2, [r7, #32]
 800ddd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddd4:	69f9      	ldr	r1, [r7, #28]
 800ddd6:	6a3a      	ldr	r2, [r7, #32]
 800ddd8:	e841 2300 	strex	r3, r2, [r1]
 800dddc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d1e5      	bne.n	800ddb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2220      	movs	r2, #32
 800dde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2220      	movs	r2, #32
 800ddf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2220      	movs	r2, #32
 800ddf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de04:	2303      	movs	r3, #3
 800de06:	e010      	b.n	800de2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	69da      	ldr	r2, [r3, #28]
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	4013      	ands	r3, r2
 800de12:	68ba      	ldr	r2, [r7, #8]
 800de14:	429a      	cmp	r2, r3
 800de16:	bf0c      	ite	eq
 800de18:	2301      	moveq	r3, #1
 800de1a:	2300      	movne	r3, #0
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	461a      	mov	r2, r3
 800de20:	79fb      	ldrb	r3, [r7, #7]
 800de22:	429a      	cmp	r2, r3
 800de24:	f43f af46 	beq.w	800dcb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3770      	adds	r7, #112	; 0x70
 800de2e:	46bd      	mov	sp, r7
 800de30:	bd80      	pop	{r7, pc}

0800de32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800de32:	b480      	push	{r7}
 800de34:	b085      	sub	sp, #20
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de40:	2b01      	cmp	r3, #1
 800de42:	d101      	bne.n	800de48 <HAL_UARTEx_DisableFifoMode+0x16>
 800de44:	2302      	movs	r3, #2
 800de46:	e027      	b.n	800de98 <HAL_UARTEx_DisableFifoMode+0x66>
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2201      	movs	r2, #1
 800de4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2224      	movs	r2, #36	; 0x24
 800de54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f022 0201 	bic.w	r2, r2, #1
 800de6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800de76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2220      	movs	r2, #32
 800de8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d101      	bne.n	800debc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800deb8:	2302      	movs	r3, #2
 800deba:	e02d      	b.n	800df18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2224      	movs	r2, #36	; 0x24
 800dec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f022 0201 	bic.w	r2, r2, #1
 800dee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	683a      	ldr	r2, [r7, #0]
 800def4:	430a      	orrs	r2, r1
 800def6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f84f 	bl	800df9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2220      	movs	r2, #32
 800df0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2200      	movs	r2, #0
 800df12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3710      	adds	r7, #16
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df30:	2b01      	cmp	r3, #1
 800df32:	d101      	bne.n	800df38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800df34:	2302      	movs	r3, #2
 800df36:	e02d      	b.n	800df94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2201      	movs	r2, #1
 800df3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2224      	movs	r2, #36	; 0x24
 800df44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0201 	bic.w	r2, r2, #1
 800df5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f811 	bl	800df9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2220      	movs	r2, #32
 800df86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d108      	bne.n	800dfbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dfbc:	e031      	b.n	800e022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dfbe:	2310      	movs	r3, #16
 800dfc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dfc2:	2310      	movs	r3, #16
 800dfc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	0e5b      	lsrs	r3, r3, #25
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	f003 0307 	and.w	r3, r3, #7
 800dfd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	0f5b      	lsrs	r3, r3, #29
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f003 0307 	and.w	r3, r3, #7
 800dfe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dfe6:	7bbb      	ldrb	r3, [r7, #14]
 800dfe8:	7b3a      	ldrb	r2, [r7, #12]
 800dfea:	4911      	ldr	r1, [pc, #68]	; (800e030 <UARTEx_SetNbDataToProcess+0x94>)
 800dfec:	5c8a      	ldrb	r2, [r1, r2]
 800dfee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dff2:	7b3a      	ldrb	r2, [r7, #12]
 800dff4:	490f      	ldr	r1, [pc, #60]	; (800e034 <UARTEx_SetNbDataToProcess+0x98>)
 800dff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	7b7a      	ldrb	r2, [r7, #13]
 800e008:	4909      	ldr	r1, [pc, #36]	; (800e030 <UARTEx_SetNbDataToProcess+0x94>)
 800e00a:	5c8a      	ldrb	r2, [r1, r2]
 800e00c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e010:	7b7a      	ldrb	r2, [r7, #13]
 800e012:	4908      	ldr	r1, [pc, #32]	; (800e034 <UARTEx_SetNbDataToProcess+0x98>)
 800e014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e016:	fb93 f3f2 	sdiv	r3, r3, r2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e022:	bf00      	nop
 800e024:	3714      	adds	r7, #20
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr
 800e02e:	bf00      	nop
 800e030:	0801b2ec 	.word	0x0801b2ec
 800e034:	0801b2f4 	.word	0x0801b2f4

0800e038 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	2300      	movs	r3, #0
 800e03e:	4618      	mov	r0, r3
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d201      	bcs.n	800e07a <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	e000      	b.n	800e07c <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800e07a:	687b      	ldr	r3, [r7, #4]
    }
 800e07c:	4618      	mov	r0, r3
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <_ZN3PinC1Ev>:
 *      Author: stefan
 */

#include "PinModel/Pin.hpp"

Pin::Pin(){}
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2200      	movs	r2, #0
 800e094:	719a      	strb	r2, [r3, #6]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4618      	mov	r0, r3
 800e09a:	370c      	adds	r7, #12
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>:

Pin::Pin(GPIO_TypeDef* port, GPIO_Pin gpio_pin) : port(port), gpio_pin(gpio_pin){}
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	80fb      	strh	r3, [r7, #6]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	68ba      	ldr	r2, [r7, #8]
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	88fa      	ldrh	r2, [r7, #6]
 800e0bc:	809a      	strh	r2, [r3, #4]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	719a      	strb	r2, [r3, #6]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <_ZN3Pin8inscribeERS_14Operation_Mode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, Operation_Mode mode){
 800e0d2:	b480      	push	{r7}
 800e0d4:	b083      	sub	sp, #12
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
 800e0da:	460b      	mov	r3, r1
 800e0dc:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != Operation_Mode::NOT_USED){
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	799b      	ldrb	r3, [r3, #6]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d103      	bne.n	800e0ee <_ZN3Pin8inscribeERS_14Operation_Mode+0x1c>
		return;
	}
	pin.mode = mode;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	78fa      	ldrb	r2, [r7, #3]
 800e0ea:	719a      	strb	r2, [r3, #6]
 800e0ec:	e000      	b.n	800e0f0 <_ZN3Pin8inscribeERS_14Operation_Mode+0x1e>
		return;
 800e0ee:	bf00      	nop
}
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr

0800e0fa <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800e0fa:	b580      	push	{r7, lr}
 800e0fc:	b082      	sub	sp, #8
 800e0fe:	af00      	add	r7, sp, #0
 800e100:	6078      	str	r0, [r7, #4]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 f84c 	bl	800e1a0 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4618      	mov	r0, r3
 800e10c:	3708      	adds	r7, #8
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800e112:	b480      	push	{r7}
 800e114:	b083      	sub	sp, #12
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4618      	mov	r0, r3
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 800e128:	b5b0      	push	{r4, r5, r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	1d38      	adds	r0, r7, #4
 800e132:	e880 0006 	stmia.w	r0, {r1, r2}
 800e136:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6839      	ldr	r1, [r7, #0]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 f846 	bl	800e1ce <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 800e142:	1d3b      	adds	r3, r7, #4
 800e144:	4618      	mov	r0, r3
 800e146:	f000 f86a 	bl	800e21e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800e14a:	4604      	mov	r4, r0
 800e14c:	1d3b      	adds	r3, r7, #4
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f871 	bl	800e236 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 800e154:	4602      	mov	r2, r0
 800e156:	462b      	mov	r3, r5
 800e158:	4621      	mov	r1, r4
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f000 f891 	bl	800e282 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	4618      	mov	r0, r3
 800e164:	3718      	adds	r7, #24
 800e166:	46bd      	mov	sp, r7
 800e168:	bdb0      	pop	{r4, r5, r7, pc}

0800e16a <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800e16a:	b5b0      	push	{r4, r5, r7, lr}
 800e16c:	b082      	sub	sp, #8
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681c      	ldr	r4, [r3, #0]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 f8b9 	bl	800e2f4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e182:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e184:	461a      	mov	r2, r3
 800e186:	4629      	mov	r1, r5
 800e188:	4620      	mov	r0, r4
 800e18a:	f000 f8be 	bl	800e30a <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4618      	mov	r0, r3
 800e192:	f000 f82b 	bl	800e1ec <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bdb0      	pop	{r4, r5, r7, pc}

0800e1a0 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	370c      	adds	r7, #12
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr

0800e1b6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b082      	sub	sp, #8
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff ffa7 	bl	800e112 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800e1ce:	b580      	push	{r7, lr}
 800e1d0:	b082      	sub	sp, #8
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	6078      	str	r0, [r7, #4]
 800e1d6:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f000 f8a2 	bl	800e326 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689a      	ldr	r2, [r3, #8]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800e204:	461a      	mov	r2, r3
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 f89f 	bl	800e34a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff ffd1 	bl	800e1b6 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	4618      	mov	r0, r3
 800e218:	3708      	adds	r7, #8
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800e21e:	b480      	push	{r7}
 800e220:	b083      	sub	sp, #12
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4618      	mov	r0, r3
 800e22c:	370c      	adds	r7, #12
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr

0800e236 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800e236:	b590      	push	{r4, r7, lr}
 800e238:	b083      	sub	sp, #12
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f7ff ffed 	bl	800e21e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800e244:	4604      	mov	r4, r0
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f892 	bl	800e370 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 800e24c:	4603      	mov	r3, r0
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4423      	add	r3, r4
 800e252:	4618      	mov	r0, r3
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	bd90      	pop	{r4, r7, pc}

0800e25a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800e25a:	b5b0      	push	{r4, r5, r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800e264:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800e266:	1d3b      	adds	r3, r7, #4
 800e268:	4618      	mov	r0, r3
 800e26a:	f000 f88d 	bl	800e388 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 800e26e:	462a      	mov	r2, r5
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	4620      	mov	r0, r4
 800e274:	f000 f892 	bl	800e39c <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 800e278:	4603      	mov	r3, r0
    }
 800e27a:	4618      	mov	r0, r3
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bdb0      	pop	{r4, r5, r7, pc}

0800e282 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800e282:	b590      	push	{r4, r7, lr}
 800e284:	b087      	sub	sp, #28
 800e286:	af00      	add	r7, sp, #0
 800e288:	60f8      	str	r0, [r7, #12]
 800e28a:	60b9      	str	r1, [r7, #8]
 800e28c:	607a      	str	r2, [r7, #4]
 800e28e:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 800e290:	6879      	ldr	r1, [r7, #4]
 800e292:	68b8      	ldr	r0, [r7, #8]
 800e294:	f7ff ffe1 	bl	800e25a <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 800e298:	4603      	mov	r3, r0
 800e29a:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800e29c:	68fc      	ldr	r4, [r7, #12]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f827 	bl	800e2f4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6978      	ldr	r0, [r7, #20]
 800e2ac:	f000 f886 	bl	800e3bc <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f000 f8a9 	bl	800e40c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	441a      	add	r2, r3
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f000 f80d 	bl	800e2f4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800e2da:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800e2dc:	4622      	mov	r2, r4
 800e2de:	6879      	ldr	r1, [r7, #4]
 800e2e0:	68b8      	ldr	r0, [r7, #8]
 800e2e2:	f000 f8a7 	bl	800e434 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 800e2e6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	605a      	str	r2, [r3, #4]
	}
 800e2ec:	bf00      	nop
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd90      	pop	{r4, r7, pc}

0800e2f4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	370c      	adds	r7, #12
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	60f8      	str	r0, [r7, #12]
 800e312:	60b9      	str	r1, [r7, #8]
 800e314:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800e316:	68b9      	ldr	r1, [r7, #8]
 800e318:	68f8      	ldr	r0, [r7, #12]
 800e31a:	f000 f89c 	bl	800e456 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 800e31e:	bf00      	nop
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800e326:	b580      	push	{r7, lr}
 800e328:	b082      	sub	sp, #8
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f8a5 	bl	800e482 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 f8af 	bl	800e49e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	4618      	mov	r0, r3
 800e344:	3708      	adds	r7, #8
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	60f8      	str	r0, [r7, #12]
 800e352:	60b9      	str	r1, [r7, #8]
 800e354:	607a      	str	r2, [r7, #4]
	if (__p)
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d005      	beq.n	800e368 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	68b9      	ldr	r1, [r7, #8]
 800e362:	4618      	mov	r0, r3
 800e364:	f000 f8af 	bl	800e4c6 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 800e368:	bf00      	nop
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	4618      	mov	r0, r3
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800e390:	4618      	mov	r0, r3
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	1ad3      	subs	r3, r2, r3
 800e3ae:	109b      	asrs	r3, r3, #2
    }
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3714      	adds	r7, #20
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800e3bc:	b590      	push	{r4, r7, lr}
 800e3be:	b085      	sub	sp, #20
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800e3c6:	f107 030c 	add.w	r3, r7, #12
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f858 	bl	800e482 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800e3d2:	f107 030c 	add.w	r3, r7, #12
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f000 f8a0 	bl	800e51c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	bf8c      	ite	hi
 800e3e4:	2301      	movhi	r3, #1
 800e3e6:	2300      	movls	r3, #0
 800e3e8:	b2dc      	uxtb	r4, r3
 800e3ea:	f107 030c 	add.w	r3, r7, #12
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fe8f 	bl	800e112 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800e3f4:	2c00      	cmp	r4, #0
 800e3f6:	d002      	beq.n	800e3fe <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 800e3f8:	4803      	ldr	r0, [pc, #12]	; (800e408 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 800e3fa:	f00c fa9c 	bl	801a936 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800e3fe:	687b      	ldr	r3, [r7, #4]
      }
 800e400:	4618      	mov	r0, r3
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	bd90      	pop	{r4, r7, pc}
 800e408:	0801ada4 	.word	0x0801ada4

0800e40c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d006      	beq.n	800e42a <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	4618      	mov	r0, r3
 800e422:	f000 f895 	bl	800e550 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 800e426:	4603      	mov	r3, r0
 800e428:	e000      	b.n	800e42c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 800e42a:	2300      	movs	r3, #0
      }
 800e42c:	4618      	mov	r0, r3
 800e42e:	3708      	adds	r7, #8
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
 800e440:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	68b9      	ldr	r1, [r7, #8]
 800e446:	68f8      	ldr	r0, [r7, #12]
 800e448:	f000 f8a2 	bl	800e590 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 800e44c:	4603      	mov	r3, r0
 800e44e:	4618      	mov	r0, r3
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e456:	b580      	push	{r7, lr}
 800e458:	b082      	sub	sp, #8
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800e460:	f7ff fdea 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d004      	beq.n	800e474 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f8a1 	bl	800e5b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 800e472:	e003      	b.n	800e47c <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f8b4 	bl	800e5e4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800e482:	b580      	push	{r7, lr}
 800e484:	b082      	sub	sp, #8
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
 800e48a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800e48c:	6839      	ldr	r1, [r7, #0]
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f8b3 	bl	800e5fa <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800e49e:	b480      	push	{r7}
 800e4a0:	b083      	sub	sp, #12
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	605a      	str	r2, [r3, #4]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	609a      	str	r2, [r3, #8]
	{ }
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr

0800e4c6 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b088      	sub	sp, #32
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	60f8      	str	r0, [r7, #12]
 800e4ce:	60b9      	str	r1, [r7, #8]
 800e4d0:	607a      	str	r2, [r7, #4]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	61fb      	str	r3, [r7, #28]
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	61bb      	str	r3, [r7, #24]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800e4de:	f7ff fdab 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d003      	beq.n	800e4f0 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 800e4e8:	69b8      	ldr	r0, [r7, #24]
 800e4ea:	f00c f959 	bl	801a7a0 <_ZdlPv>
	    return;
 800e4ee:	e005      	b.n	800e4fc <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	69b9      	ldr	r1, [r7, #24]
 800e4f4:	69f8      	ldr	r0, [r7, #28]
 800e4f6:	f000 f8c2 	bl	800e67e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	3720      	adds	r7, #32
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800e50c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800e524:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e528:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff ffea 	bl	800e504 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 800e530:	4603      	mov	r3, r0
 800e532:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800e534:	f107 0208 	add.w	r2, r7, #8
 800e538:	f107 030c 	add.w	r3, r7, #12
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f7ff fd8e 	bl	800e060 <_ZSt3minIjERKT_S2_S2_>
 800e544:	4603      	mov	r3, r0
 800e546:	681b      	ldr	r3, [r3, #0]
      }
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800e562:	f7ff fd69 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d006      	beq.n	800e57a <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4618      	mov	r0, r3
 800e572:	f00c f919 	bl	801a7a8 <_Znwj>
 800e576:	4603      	mov	r3, r0
 800e578:	e006      	b.n	800e588 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800e57a:	2200      	movs	r2, #0
 800e57c:	68b9      	ldr	r1, [r7, #8]
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f000 f88c 	bl	800e69c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 800e584:	4603      	mov	r3, r0
 800e586:	bf00      	nop
      { return __a.allocate(__n); }
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e590:	b580      	push	{r7, lr}
 800e592:	b086      	sub	sp, #24
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800e59c:	2301      	movs	r3, #1
 800e59e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	68b9      	ldr	r1, [r7, #8]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f000 f834 	bl	800e612 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 800e5aa:	4603      	mov	r3, r0
    }
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3718      	adds	r7, #24
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d00a      	beq.n	800e5dc <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 f843 	bl	800e652 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 f84a 	bl	800e668 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3304      	adds	r3, #4
 800e5d8:	607b      	str	r3, [r7, #4]
 800e5da:	e7f0      	b.n	800e5be <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 800e5dc:	bf00      	nop
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
 800e5ee:	bf00      	nop
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e5fa:	b480      	push	{r7}
 800e5fc:	b083      	sub	sp, #12
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
 800e602:	6039      	str	r1, [r7, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4618      	mov	r0, r3
 800e608:	370c      	adds	r7, #12
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e612:	b580      	push	{r7, lr}
 800e614:	b086      	sub	sp, #24
 800e616:	af00      	add	r7, sp, #0
 800e618:	60f8      	str	r0, [r7, #12]
 800e61a:	60b9      	str	r1, [r7, #8]
 800e61c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	429a      	cmp	r2, r3
 800e628:	d00e      	beq.n	800e648 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800e62a:	6978      	ldr	r0, [r7, #20]
 800e62c:	f000 f811 	bl	800e652 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800e630:	4603      	mov	r3, r0
 800e632:	68f9      	ldr	r1, [r7, #12]
 800e634:	4618      	mov	r0, r3
 800e636:	f000 f850 	bl	800e6da <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3304      	adds	r3, #4
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	3304      	adds	r3, #4
 800e644:	617b      	str	r3, [r7, #20]
 800e646:	e7ec      	b.n	800e622 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 800e648:	697b      	ldr	r3, [r7, #20]
	}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3718      	adds	r7, #24
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}

0800e652 <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e652:	b480      	push	{r7}
 800e654:	b083      	sub	sp, #12
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4618      	mov	r0, r3
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f847 	bl	800e704 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 800e676:	bf00      	nop
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800e67e:	b580      	push	{r7, lr}
 800e680:	b084      	sub	sp, #16
 800e682:	af00      	add	r7, sp, #0
 800e684:	60f8      	str	r0, [r7, #12]
 800e686:	60b9      	str	r1, [r7, #8]
 800e688:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	4619      	mov	r1, r3
 800e690:	68b8      	ldr	r0, [r7, #8]
 800e692:	f00c f887 	bl	801a7a4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800e6a8:	68f8      	ldr	r0, [r7, #12]
 800e6aa:	f000 f835 	bl	800e718 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	bf8c      	ite	hi
 800e6b6:	2301      	movhi	r3, #1
 800e6b8:	2300      	movls	r3, #0
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e6c0:	f00c f936 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f00c f86d 	bl	801a7a8 <_Znwj>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	bf00      	nop
      }
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3710      	adds	r7, #16
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800e6da:	b590      	push	{r4, r7, lr}
 800e6dc:	b083      	sub	sp, #12
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800e6e4:	6838      	ldr	r0, [r7, #0]
 800e6e6:	f000 f823 	bl	800e730 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	2004      	movs	r0, #4
 800e6f2:	f7ff fca9 	bl	800e048 <_ZnwjPv>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	bd90      	pop	{r4, r7, pc}

0800e704 <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 800e704:	b480      	push	{r7}
 800e706:	b083      	sub	sp, #12
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
    }
 800e70c:	bf00      	nop
 800e70e:	370c      	adds	r7, #12
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800e720:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800e724:	4618      	mov	r0, r3
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4618      	mov	r0, r3
 800e73c:	370c      	adds	r7, #12
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
	...

0800e748 <_Z41__static_initialization_and_destruction_0ii>:

		default:
			break;
		}
	}
}
 800e748:	b580      	push	{r7, lr}
 800e74a:	b0f4      	sub	sp, #464	; 0x1d0
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e752:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e756:	6018      	str	r0, [r3, #0]
 800e758:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e75c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e760:	6019      	str	r1, [r3, #0]
 800e762:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e766:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	f040 832c 	bne.w	800edca <_Z41__static_initialization_and_destruction_0ii+0x682>
 800e772:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800e776:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e780:	4293      	cmp	r3, r2
 800e782:	f040 8322 	bne.w	800edca <_Z41__static_initialization_and_destruction_0ii+0x682>
Pin PE2(GPIOE,GPIO_Pin::PIN_2);
 800e786:	2204      	movs	r2, #4
 800e788:	49ba      	ldr	r1, [pc, #744]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e78a:	48bb      	ldr	r0, [pc, #748]	; (800ea78 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800e78c:	f7ff fc8a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE3(GPIOE,GPIO_Pin::PIN_3);
 800e790:	2208      	movs	r2, #8
 800e792:	49b8      	ldr	r1, [pc, #736]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e794:	48b9      	ldr	r0, [pc, #740]	; (800ea7c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800e796:	f7ff fc85 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE4(GPIOE,GPIO_Pin::PIN_4);
 800e79a:	2210      	movs	r2, #16
 800e79c:	49b5      	ldr	r1, [pc, #724]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e79e:	48b8      	ldr	r0, [pc, #736]	; (800ea80 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800e7a0:	f7ff fc80 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE5(GPIOE,GPIO_Pin::PIN_5);
 800e7a4:	2220      	movs	r2, #32
 800e7a6:	49b3      	ldr	r1, [pc, #716]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e7a8:	48b6      	ldr	r0, [pc, #728]	; (800ea84 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800e7aa:	f7ff fc7b 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE6(GPIOE,GPIO_Pin::PIN_6);
 800e7ae:	2240      	movs	r2, #64	; 0x40
 800e7b0:	49b0      	ldr	r1, [pc, #704]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e7b2:	48b5      	ldr	r0, [pc, #724]	; (800ea88 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800e7b4:	f7ff fc76 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC13(GPIOC,GPIO_Pin::PIN_13);
 800e7b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e7bc:	49b3      	ldr	r1, [pc, #716]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e7be:	48b4      	ldr	r0, [pc, #720]	; (800ea90 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800e7c0:	f7ff fc70 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC14(GPIOC,GPIO_Pin::PIN_14);
 800e7c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e7c8:	49b0      	ldr	r1, [pc, #704]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e7ca:	48b2      	ldr	r0, [pc, #712]	; (800ea94 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800e7cc:	f7ff fc6a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC15(GPIOC,GPIO_Pin::PIN_15);
 800e7d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e7d4:	49ad      	ldr	r1, [pc, #692]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e7d6:	48b0      	ldr	r0, [pc, #704]	; (800ea98 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800e7d8:	f7ff fc64 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF0(GPIOF,GPIO_Pin::PIN_0);
 800e7dc:	2201      	movs	r2, #1
 800e7de:	49af      	ldr	r1, [pc, #700]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e7e0:	48af      	ldr	r0, [pc, #700]	; (800eaa0 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800e7e2:	f7ff fc5f 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF1(GPIOF,GPIO_Pin::PIN_1);
 800e7e6:	2202      	movs	r2, #2
 800e7e8:	49ac      	ldr	r1, [pc, #688]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e7ea:	48ae      	ldr	r0, [pc, #696]	; (800eaa4 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800e7ec:	f7ff fc5a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF2(GPIOF,GPIO_Pin::PIN_2);
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	49aa      	ldr	r1, [pc, #680]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e7f4:	48ac      	ldr	r0, [pc, #688]	; (800eaa8 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800e7f6:	f7ff fc55 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF3(GPIOF,GPIO_Pin::PIN_3);
 800e7fa:	2208      	movs	r2, #8
 800e7fc:	49a7      	ldr	r1, [pc, #668]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e7fe:	48ab      	ldr	r0, [pc, #684]	; (800eaac <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800e800:	f7ff fc50 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF4(GPIOF,GPIO_Pin::PIN_4);
 800e804:	2210      	movs	r2, #16
 800e806:	49a5      	ldr	r1, [pc, #660]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e808:	48a9      	ldr	r0, [pc, #676]	; (800eab0 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800e80a:	f7ff fc4b 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF5(GPIOF,GPIO_Pin::PIN_5);
 800e80e:	2220      	movs	r2, #32
 800e810:	49a2      	ldr	r1, [pc, #648]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e812:	48a8      	ldr	r0, [pc, #672]	; (800eab4 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800e814:	f7ff fc46 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF6(GPIOF,GPIO_Pin::PIN_6);
 800e818:	2240      	movs	r2, #64	; 0x40
 800e81a:	49a0      	ldr	r1, [pc, #640]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e81c:	48a6      	ldr	r0, [pc, #664]	; (800eab8 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800e81e:	f7ff fc41 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF7(GPIOF,GPIO_Pin::PIN_7);
 800e822:	2280      	movs	r2, #128	; 0x80
 800e824:	499d      	ldr	r1, [pc, #628]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e826:	48a5      	ldr	r0, [pc, #660]	; (800eabc <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800e828:	f7ff fc3c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF8(GPIOF,GPIO_Pin::PIN_8);
 800e82c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e830:	499a      	ldr	r1, [pc, #616]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e832:	48a3      	ldr	r0, [pc, #652]	; (800eac0 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800e834:	f7ff fc36 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF9(GPIOF,GPIO_Pin::PIN_9);
 800e838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e83c:	4997      	ldr	r1, [pc, #604]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e83e:	48a1      	ldr	r0, [pc, #644]	; (800eac4 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800e840:	f7ff fc30 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF10(GPIOF,GPIO_Pin::PIN_10);
 800e844:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e848:	4994      	ldr	r1, [pc, #592]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e84a:	489f      	ldr	r0, [pc, #636]	; (800eac8 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800e84c:	f7ff fc2a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH0(GPIOH,GPIO_Pin::PIN_0);
 800e850:	2201      	movs	r2, #1
 800e852:	499e      	ldr	r1, [pc, #632]	; (800eacc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e854:	489e      	ldr	r0, [pc, #632]	; (800ead0 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800e856:	f7ff fc25 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH1(GPIOH,GPIO_Pin::PIN_1);
 800e85a:	2202      	movs	r2, #2
 800e85c:	499b      	ldr	r1, [pc, #620]	; (800eacc <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800e85e:	489d      	ldr	r0, [pc, #628]	; (800ead4 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800e860:	f7ff fc20 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC0(GPIOC,GPIO_Pin::PIN_0);
 800e864:	2201      	movs	r2, #1
 800e866:	4989      	ldr	r1, [pc, #548]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e868:	489b      	ldr	r0, [pc, #620]	; (800ead8 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800e86a:	f7ff fc1b 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC1(GPIOC,GPIO_Pin::PIN_1);
 800e86e:	2202      	movs	r2, #2
 800e870:	4986      	ldr	r1, [pc, #536]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e872:	489a      	ldr	r0, [pc, #616]	; (800eadc <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800e874:	f7ff fc16 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC2(GPIOC,GPIO_Pin::PIN_2);
 800e878:	2204      	movs	r2, #4
 800e87a:	4984      	ldr	r1, [pc, #528]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e87c:	4898      	ldr	r0, [pc, #608]	; (800eae0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800e87e:	f7ff fc11 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC3(GPIOC,GPIO_Pin::PIN_3);
 800e882:	2208      	movs	r2, #8
 800e884:	4981      	ldr	r1, [pc, #516]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e886:	4897      	ldr	r0, [pc, #604]	; (800eae4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800e888:	f7ff fc0c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA0(GPIOA,GPIO_Pin::PIN_0);
 800e88c:	2201      	movs	r2, #1
 800e88e:	4996      	ldr	r1, [pc, #600]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e890:	4896      	ldr	r0, [pc, #600]	; (800eaec <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800e892:	f7ff fc07 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA1(GPIOA,GPIO_Pin::PIN_1);
 800e896:	2202      	movs	r2, #2
 800e898:	4993      	ldr	r1, [pc, #588]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e89a:	4895      	ldr	r0, [pc, #596]	; (800eaf0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800e89c:	f7ff fc02 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA2(GPIOA,GPIO_Pin::PIN_2);
 800e8a0:	2204      	movs	r2, #4
 800e8a2:	4991      	ldr	r1, [pc, #580]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8a4:	4893      	ldr	r0, [pc, #588]	; (800eaf4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800e8a6:	f7ff fbfd 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA3(GPIOA,GPIO_Pin::PIN_3);
 800e8aa:	2208      	movs	r2, #8
 800e8ac:	498e      	ldr	r1, [pc, #568]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8ae:	4892      	ldr	r0, [pc, #584]	; (800eaf8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800e8b0:	f7ff fbf8 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA4(GPIOA,GPIO_Pin::PIN_4);
 800e8b4:	2210      	movs	r2, #16
 800e8b6:	498c      	ldr	r1, [pc, #560]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8b8:	4890      	ldr	r0, [pc, #576]	; (800eafc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800e8ba:	f7ff fbf3 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA5(GPIOA,GPIO_Pin::PIN_5);
 800e8be:	2220      	movs	r2, #32
 800e8c0:	4989      	ldr	r1, [pc, #548]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8c2:	488f      	ldr	r0, [pc, #572]	; (800eb00 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800e8c4:	f7ff fbee 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA6(GPIOA,GPIO_Pin::PIN_6);
 800e8c8:	2240      	movs	r2, #64	; 0x40
 800e8ca:	4987      	ldr	r1, [pc, #540]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8cc:	488d      	ldr	r0, [pc, #564]	; (800eb04 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800e8ce:	f7ff fbe9 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA7(GPIOA,GPIO_Pin::PIN_7);
 800e8d2:	2280      	movs	r2, #128	; 0x80
 800e8d4:	4984      	ldr	r1, [pc, #528]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800e8d6:	488c      	ldr	r0, [pc, #560]	; (800eb08 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800e8d8:	f7ff fbe4 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC4(GPIOC,GPIO_Pin::PIN_4);
 800e8dc:	2210      	movs	r2, #16
 800e8de:	496b      	ldr	r1, [pc, #428]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e8e0:	488a      	ldr	r0, [pc, #552]	; (800eb0c <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800e8e2:	f7ff fbdf 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC5(GPIOC,GPIO_Pin::PIN_5);
 800e8e6:	2220      	movs	r2, #32
 800e8e8:	4968      	ldr	r1, [pc, #416]	; (800ea8c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800e8ea:	4889      	ldr	r0, [pc, #548]	; (800eb10 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800e8ec:	f7ff fbda 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB0(GPIOB,GPIO_Pin::PIN_0);
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	4988      	ldr	r1, [pc, #544]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e8f4:	4888      	ldr	r0, [pc, #544]	; (800eb18 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800e8f6:	f7ff fbd5 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB1(GPIOB,GPIO_Pin::PIN_1);
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	4985      	ldr	r1, [pc, #532]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e8fe:	4887      	ldr	r0, [pc, #540]	; (800eb1c <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800e900:	f7ff fbd0 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB2(GPIOB,GPIO_Pin::PIN_2);
 800e904:	2204      	movs	r2, #4
 800e906:	4983      	ldr	r1, [pc, #524]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e908:	4885      	ldr	r0, [pc, #532]	; (800eb20 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800e90a:	f7ff fbcb 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF11(GPIOF,GPIO_Pin::PIN_11);
 800e90e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e912:	4962      	ldr	r1, [pc, #392]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e914:	4883      	ldr	r0, [pc, #524]	; (800eb24 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800e916:	f7ff fbc5 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF12(GPIOF,GPIO_Pin::PIN_12);
 800e91a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e91e:	495f      	ldr	r1, [pc, #380]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e920:	4881      	ldr	r0, [pc, #516]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800e922:	f7ff fbbf 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF13(GPIOF,GPIO_Pin::PIN_13);
 800e926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e92a:	495c      	ldr	r1, [pc, #368]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e92c:	487f      	ldr	r0, [pc, #508]	; (800eb2c <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800e92e:	f7ff fbb9 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF14(GPIOF,GPIO_Pin::PIN_14);
 800e932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e936:	4959      	ldr	r1, [pc, #356]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e938:	487d      	ldr	r0, [pc, #500]	; (800eb30 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800e93a:	f7ff fbb3 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF15(GPIOF,GPIO_Pin::PIN_15);
 800e93e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e942:	4956      	ldr	r1, [pc, #344]	; (800ea9c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800e944:	487b      	ldr	r0, [pc, #492]	; (800eb34 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800e946:	f7ff fbad 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG0(GPIOG,GPIO_Pin::PIN_0);
 800e94a:	2201      	movs	r2, #1
 800e94c:	497a      	ldr	r1, [pc, #488]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800e94e:	487b      	ldr	r0, [pc, #492]	; (800eb3c <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800e950:	f7ff fba8 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG1(GPIOG,GPIO_Pin::PIN_1);
 800e954:	2202      	movs	r2, #2
 800e956:	4978      	ldr	r1, [pc, #480]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800e958:	4879      	ldr	r0, [pc, #484]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800e95a:	f7ff fba3 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE7(GPIOE,GPIO_Pin::PIN_7);
 800e95e:	2280      	movs	r2, #128	; 0x80
 800e960:	4944      	ldr	r1, [pc, #272]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e962:	4878      	ldr	r0, [pc, #480]	; (800eb44 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800e964:	f7ff fb9e 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE8(GPIOE,GPIO_Pin::PIN_8);
 800e968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e96c:	4941      	ldr	r1, [pc, #260]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e96e:	4876      	ldr	r0, [pc, #472]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800e970:	f7ff fb98 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE9(GPIOE,GPIO_Pin::PIN_9);
 800e974:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e978:	493e      	ldr	r1, [pc, #248]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e97a:	4874      	ldr	r0, [pc, #464]	; (800eb4c <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800e97c:	f7ff fb92 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE10(GPIOE,GPIO_Pin::PIN_10);
 800e980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e984:	493b      	ldr	r1, [pc, #236]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e986:	4872      	ldr	r0, [pc, #456]	; (800eb50 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800e988:	f7ff fb8c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE11(GPIOE,GPIO_Pin::PIN_11);
 800e98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e990:	4938      	ldr	r1, [pc, #224]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e992:	4870      	ldr	r0, [pc, #448]	; (800eb54 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800e994:	f7ff fb86 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE12(GPIOE,GPIO_Pin::PIN_12);
 800e998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e99c:	4935      	ldr	r1, [pc, #212]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e99e:	486e      	ldr	r0, [pc, #440]	; (800eb58 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800e9a0:	f7ff fb80 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE13(GPIOE,GPIO_Pin::PIN_13);
 800e9a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9a8:	4932      	ldr	r1, [pc, #200]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e9aa:	486c      	ldr	r0, [pc, #432]	; (800eb5c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800e9ac:	f7ff fb7a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE14(GPIOE,GPIO_Pin::PIN_14);
 800e9b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e9b4:	492f      	ldr	r1, [pc, #188]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e9b6:	486a      	ldr	r0, [pc, #424]	; (800eb60 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800e9b8:	f7ff fb74 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE15(GPIOE,GPIO_Pin::PIN_15);
 800e9bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e9c0:	492c      	ldr	r1, [pc, #176]	; (800ea74 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800e9c2:	4868      	ldr	r0, [pc, #416]	; (800eb64 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800e9c4:	f7ff fb6e 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB10(GPIOB,GPIO_Pin::PIN_10);
 800e9c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9cc:	4951      	ldr	r1, [pc, #324]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9ce:	4866      	ldr	r0, [pc, #408]	; (800eb68 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800e9d0:	f7ff fb68 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB11(GPIOB,GPIO_Pin::PIN_11);
 800e9d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9d8:	494e      	ldr	r1, [pc, #312]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9da:	4864      	ldr	r0, [pc, #400]	; (800eb6c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800e9dc:	f7ff fb62 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB12(GPIOB,GPIO_Pin::PIN_12);
 800e9e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9e4:	494b      	ldr	r1, [pc, #300]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9e6:	4862      	ldr	r0, [pc, #392]	; (800eb70 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800e9e8:	f7ff fb5c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB13(GPIOB,GPIO_Pin::PIN_13);
 800e9ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9f0:	4948      	ldr	r1, [pc, #288]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9f2:	4860      	ldr	r0, [pc, #384]	; (800eb74 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800e9f4:	f7ff fb56 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB14(GPIOB,GPIO_Pin::PIN_14);
 800e9f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e9fc:	4945      	ldr	r1, [pc, #276]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800e9fe:	485e      	ldr	r0, [pc, #376]	; (800eb78 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800ea00:	f7ff fb50 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB15(GPIOB,GPIO_Pin::PIN_15);
 800ea04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ea08:	4942      	ldr	r1, [pc, #264]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800ea0a:	485c      	ldr	r0, [pc, #368]	; (800eb7c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800ea0c:	f7ff fb4a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD8(GPIOD,GPIO_Pin::PIN_8);
 800ea10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ea14:	495a      	ldr	r1, [pc, #360]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea16:	485b      	ldr	r0, [pc, #364]	; (800eb84 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 800ea18:	f7ff fb44 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD9(GPIOD,GPIO_Pin::PIN_9);
 800ea1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea20:	4957      	ldr	r1, [pc, #348]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea22:	4859      	ldr	r0, [pc, #356]	; (800eb88 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800ea24:	f7ff fb3e 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD10(GPIOD,GPIO_Pin::PIN_10);
 800ea28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ea2c:	4954      	ldr	r1, [pc, #336]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea2e:	4857      	ldr	r0, [pc, #348]	; (800eb8c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 800ea30:	f7ff fb38 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD11(GPIOD,GPIO_Pin::PIN_11);
 800ea34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea38:	4951      	ldr	r1, [pc, #324]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea3a:	4855      	ldr	r0, [pc, #340]	; (800eb90 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800ea3c:	f7ff fb32 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD12(GPIOD,GPIO_Pin::PIN_12);
 800ea40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ea44:	494e      	ldr	r1, [pc, #312]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea46:	4853      	ldr	r0, [pc, #332]	; (800eb94 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 800ea48:	f7ff fb2c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD13(GPIOD,GPIO_Pin::PIN_13);
 800ea4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ea50:	494b      	ldr	r1, [pc, #300]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea52:	4851      	ldr	r0, [pc, #324]	; (800eb98 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 800ea54:	f7ff fb26 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD14(GPIOD,GPIO_Pin::PIN_14);
 800ea58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ea5c:	4948      	ldr	r1, [pc, #288]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea5e:	484f      	ldr	r0, [pc, #316]	; (800eb9c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 800ea60:	f7ff fb20 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD15(GPIOD,GPIO_Pin::PIN_15);
 800ea64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ea68:	4945      	ldr	r1, [pc, #276]	; (800eb80 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800ea6a:	484d      	ldr	r0, [pc, #308]	; (800eba0 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 800ea6c:	f7ff fb1a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
 800ea70:	e098      	b.n	800eba4 <_Z41__static_initialization_and_destruction_0ii+0x45c>
 800ea72:	bf00      	nop
 800ea74:	58021000 	.word	0x58021000
 800ea78:	24000c14 	.word	0x24000c14
 800ea7c:	24000c1c 	.word	0x24000c1c
 800ea80:	24000c24 	.word	0x24000c24
 800ea84:	24000c2c 	.word	0x24000c2c
 800ea88:	24000c34 	.word	0x24000c34
 800ea8c:	58020800 	.word	0x58020800
 800ea90:	24000c3c 	.word	0x24000c3c
 800ea94:	24000c44 	.word	0x24000c44
 800ea98:	24000c4c 	.word	0x24000c4c
 800ea9c:	58021400 	.word	0x58021400
 800eaa0:	24000c54 	.word	0x24000c54
 800eaa4:	24000c5c 	.word	0x24000c5c
 800eaa8:	24000c64 	.word	0x24000c64
 800eaac:	24000c6c 	.word	0x24000c6c
 800eab0:	24000c74 	.word	0x24000c74
 800eab4:	24000c7c 	.word	0x24000c7c
 800eab8:	24000c84 	.word	0x24000c84
 800eabc:	24000c8c 	.word	0x24000c8c
 800eac0:	24000c94 	.word	0x24000c94
 800eac4:	24000c9c 	.word	0x24000c9c
 800eac8:	24000ca4 	.word	0x24000ca4
 800eacc:	58021c00 	.word	0x58021c00
 800ead0:	24000cac 	.word	0x24000cac
 800ead4:	24000cb4 	.word	0x24000cb4
 800ead8:	24000cbc 	.word	0x24000cbc
 800eadc:	24000cc4 	.word	0x24000cc4
 800eae0:	24000ccc 	.word	0x24000ccc
 800eae4:	24000cd4 	.word	0x24000cd4
 800eae8:	58020000 	.word	0x58020000
 800eaec:	24000cdc 	.word	0x24000cdc
 800eaf0:	24000ce4 	.word	0x24000ce4
 800eaf4:	24000cec 	.word	0x24000cec
 800eaf8:	24000cf4 	.word	0x24000cf4
 800eafc:	24000cfc 	.word	0x24000cfc
 800eb00:	24000d04 	.word	0x24000d04
 800eb04:	24000d0c 	.word	0x24000d0c
 800eb08:	24000d14 	.word	0x24000d14
 800eb0c:	24000d1c 	.word	0x24000d1c
 800eb10:	24000d24 	.word	0x24000d24
 800eb14:	58020400 	.word	0x58020400
 800eb18:	24000d2c 	.word	0x24000d2c
 800eb1c:	24000d34 	.word	0x24000d34
 800eb20:	24000d3c 	.word	0x24000d3c
 800eb24:	24000d44 	.word	0x24000d44
 800eb28:	24000d4c 	.word	0x24000d4c
 800eb2c:	24000d54 	.word	0x24000d54
 800eb30:	24000d5c 	.word	0x24000d5c
 800eb34:	24000d64 	.word	0x24000d64
 800eb38:	58021800 	.word	0x58021800
 800eb3c:	24000d6c 	.word	0x24000d6c
 800eb40:	24000d74 	.word	0x24000d74
 800eb44:	24000d7c 	.word	0x24000d7c
 800eb48:	24000d84 	.word	0x24000d84
 800eb4c:	24000d8c 	.word	0x24000d8c
 800eb50:	24000d94 	.word	0x24000d94
 800eb54:	24000d9c 	.word	0x24000d9c
 800eb58:	24000da4 	.word	0x24000da4
 800eb5c:	24000dac 	.word	0x24000dac
 800eb60:	24000db4 	.word	0x24000db4
 800eb64:	24000dbc 	.word	0x24000dbc
 800eb68:	24000dc4 	.word	0x24000dc4
 800eb6c:	24000dcc 	.word	0x24000dcc
 800eb70:	24000dd4 	.word	0x24000dd4
 800eb74:	24000ddc 	.word	0x24000ddc
 800eb78:	24000de4 	.word	0x24000de4
 800eb7c:	24000dec 	.word	0x24000dec
 800eb80:	58020c00 	.word	0x58020c00
 800eb84:	24000df4 	.word	0x24000df4
 800eb88:	24000dfc 	.word	0x24000dfc
 800eb8c:	24000e04 	.word	0x24000e04
 800eb90:	24000e0c 	.word	0x24000e0c
 800eb94:	24000e14 	.word	0x24000e14
 800eb98:	24000e1c 	.word	0x24000e1c
 800eb9c:	24000e24 	.word	0x24000e24
 800eba0:	24000e2c 	.word	0x24000e2c
Pin PG2(GPIOG,GPIO_Pin::PIN_2);
 800eba4:	2204      	movs	r2, #4
 800eba6:	4995      	ldr	r1, [pc, #596]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800eba8:	4895      	ldr	r0, [pc, #596]	; (800ee00 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800ebaa:	f7ff fa7b 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG3(GPIOG,GPIO_Pin::PIN_3);
 800ebae:	2208      	movs	r2, #8
 800ebb0:	4992      	ldr	r1, [pc, #584]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebb2:	4894      	ldr	r0, [pc, #592]	; (800ee04 <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800ebb4:	f7ff fa76 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG4(GPIOG,GPIO_Pin::PIN_4);
 800ebb8:	2210      	movs	r2, #16
 800ebba:	4990      	ldr	r1, [pc, #576]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebbc:	4892      	ldr	r0, [pc, #584]	; (800ee08 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800ebbe:	f7ff fa71 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG5(GPIOG,GPIO_Pin::PIN_5);
 800ebc2:	2220      	movs	r2, #32
 800ebc4:	498d      	ldr	r1, [pc, #564]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebc6:	4891      	ldr	r0, [pc, #580]	; (800ee0c <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800ebc8:	f7ff fa6c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG6(GPIOG,GPIO_Pin::PIN_6);
 800ebcc:	2240      	movs	r2, #64	; 0x40
 800ebce:	498b      	ldr	r1, [pc, #556]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebd0:	488f      	ldr	r0, [pc, #572]	; (800ee10 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800ebd2:	f7ff fa67 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG7(GPIOG,GPIO_Pin::PIN_7);
 800ebd6:	2280      	movs	r2, #128	; 0x80
 800ebd8:	4988      	ldr	r1, [pc, #544]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebda:	488e      	ldr	r0, [pc, #568]	; (800ee14 <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800ebdc:	f7ff fa62 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG8(GPIOG,GPIO_Pin::PIN_8);
 800ebe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebe4:	4985      	ldr	r1, [pc, #532]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ebe6:	488c      	ldr	r0, [pc, #560]	; (800ee18 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800ebe8:	f7ff fa5c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC6(GPIOC,GPIO_Pin::PIN_6);
 800ebec:	2240      	movs	r2, #64	; 0x40
 800ebee:	498b      	ldr	r1, [pc, #556]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ebf0:	488b      	ldr	r0, [pc, #556]	; (800ee20 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 800ebf2:	f7ff fa57 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC7(GPIOC,GPIO_Pin::PIN_7);
 800ebf6:	2280      	movs	r2, #128	; 0x80
 800ebf8:	4988      	ldr	r1, [pc, #544]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ebfa:	488a      	ldr	r0, [pc, #552]	; (800ee24 <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800ebfc:	f7ff fa52 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC8(GPIOC,GPIO_Pin::PIN_8);
 800ec00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec04:	4985      	ldr	r1, [pc, #532]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ec06:	4888      	ldr	r0, [pc, #544]	; (800ee28 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 800ec08:	f7ff fa4c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC9(GPIOC,GPIO_Pin::PIN_9);
 800ec0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec10:	4982      	ldr	r1, [pc, #520]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ec12:	4886      	ldr	r0, [pc, #536]	; (800ee2c <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 800ec14:	f7ff fa46 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA8(GPIOA,GPIO_Pin::PIN_8);
 800ec18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec1c:	4984      	ldr	r1, [pc, #528]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ec1e:	4885      	ldr	r0, [pc, #532]	; (800ee34 <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 800ec20:	f7ff fa40 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA9(GPIOA,GPIO_Pin::PIN_9);
 800ec24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec28:	4981      	ldr	r1, [pc, #516]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ec2a:	4883      	ldr	r0, [pc, #524]	; (800ee38 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800ec2c:	f7ff fa3a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA10(GPIOA,GPIO_Pin::PIN_10);
 800ec30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ec34:	497e      	ldr	r1, [pc, #504]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ec36:	4881      	ldr	r0, [pc, #516]	; (800ee3c <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 800ec38:	f7ff fa34 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA11(GPIOA,GPIO_Pin::PIN_11);
 800ec3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec40:	497b      	ldr	r1, [pc, #492]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ec42:	487f      	ldr	r0, [pc, #508]	; (800ee40 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 800ec44:	f7ff fa2e 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA12(GPIOA,GPIO_Pin::PIN_12);
 800ec48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec4c:	4978      	ldr	r1, [pc, #480]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800ec4e:	487d      	ldr	r0, [pc, #500]	; (800ee44 <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800ec50:	f7ff fa28 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC10(GPIOC,GPIO_Pin::PIN_10);
 800ec54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ec58:	4970      	ldr	r1, [pc, #448]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ec5a:	487b      	ldr	r0, [pc, #492]	; (800ee48 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 800ec5c:	f7ff fa22 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC11(GPIOC,GPIO_Pin::PIN_11);
 800ec60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec64:	496d      	ldr	r1, [pc, #436]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ec66:	4879      	ldr	r0, [pc, #484]	; (800ee4c <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800ec68:	f7ff fa1c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC12(GPIOC,GPIO_Pin::PIN_12);
 800ec6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ec70:	496a      	ldr	r1, [pc, #424]	; (800ee1c <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800ec72:	4877      	ldr	r0, [pc, #476]	; (800ee50 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800ec74:	f7ff fa16 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD0(GPIOD,GPIO_Pin::PIN_0);
 800ec78:	2201      	movs	r2, #1
 800ec7a:	4976      	ldr	r1, [pc, #472]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ec7c:	4876      	ldr	r0, [pc, #472]	; (800ee58 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 800ec7e:	f7ff fa11 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD1(GPIOD,GPIO_Pin::PIN_1);
 800ec82:	2202      	movs	r2, #2
 800ec84:	4973      	ldr	r1, [pc, #460]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ec86:	4875      	ldr	r0, [pc, #468]	; (800ee5c <_Z41__static_initialization_and_destruction_0ii+0x714>)
 800ec88:	f7ff fa0c 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD2(GPIOD,GPIO_Pin::PIN_2);
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	4971      	ldr	r1, [pc, #452]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ec90:	4873      	ldr	r0, [pc, #460]	; (800ee60 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 800ec92:	f7ff fa07 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD3(GPIOD,GPIO_Pin::PIN_3);
 800ec96:	2208      	movs	r2, #8
 800ec98:	496e      	ldr	r1, [pc, #440]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ec9a:	4872      	ldr	r0, [pc, #456]	; (800ee64 <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 800ec9c:	f7ff fa02 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD4(GPIOD,GPIO_Pin::PIN_4);
 800eca0:	2210      	movs	r2, #16
 800eca2:	496c      	ldr	r1, [pc, #432]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800eca4:	4870      	ldr	r0, [pc, #448]	; (800ee68 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 800eca6:	f7ff f9fd 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD5(GPIOD,GPIO_Pin::PIN_5);
 800ecaa:	2220      	movs	r2, #32
 800ecac:	4969      	ldr	r1, [pc, #420]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ecae:	486f      	ldr	r0, [pc, #444]	; (800ee6c <_Z41__static_initialization_and_destruction_0ii+0x724>)
 800ecb0:	f7ff f9f8 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD6(GPIOD,GPIO_Pin::PIN_6);
 800ecb4:	2240      	movs	r2, #64	; 0x40
 800ecb6:	4967      	ldr	r1, [pc, #412]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ecb8:	486d      	ldr	r0, [pc, #436]	; (800ee70 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800ecba:	f7ff f9f3 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD7(GPIOD,GPIO_Pin::PIN_7);
 800ecbe:	2280      	movs	r2, #128	; 0x80
 800ecc0:	4964      	ldr	r1, [pc, #400]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800ecc2:	486c      	ldr	r0, [pc, #432]	; (800ee74 <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 800ecc4:	f7ff f9ee 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG9(GPIOG,GPIO_Pin::PIN_9);
 800ecc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eccc:	494b      	ldr	r1, [pc, #300]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ecce:	486a      	ldr	r0, [pc, #424]	; (800ee78 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 800ecd0:	f7ff f9e8 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG10(GPIOG,GPIO_Pin::PIN_10);
 800ecd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ecd8:	4948      	ldr	r1, [pc, #288]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ecda:	4868      	ldr	r0, [pc, #416]	; (800ee7c <_Z41__static_initialization_and_destruction_0ii+0x734>)
 800ecdc:	f7ff f9e2 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG11(GPIOG,GPIO_Pin::PIN_11);
 800ece0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ece4:	4945      	ldr	r1, [pc, #276]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ece6:	4866      	ldr	r0, [pc, #408]	; (800ee80 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 800ece8:	f7ff f9dc 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG12(GPIOG,GPIO_Pin::PIN_12);
 800ecec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ecf0:	4942      	ldr	r1, [pc, #264]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ecf2:	4864      	ldr	r0, [pc, #400]	; (800ee84 <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 800ecf4:	f7ff f9d6 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG13(GPIOG,GPIO_Pin::PIN_13);
 800ecf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ecfc:	493f      	ldr	r1, [pc, #252]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ecfe:	4862      	ldr	r0, [pc, #392]	; (800ee88 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 800ed00:	f7ff f9d0 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG14(GPIOG,GPIO_Pin::PIN_14);
 800ed04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ed08:	493c      	ldr	r1, [pc, #240]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ed0a:	4860      	ldr	r0, [pc, #384]	; (800ee8c <_Z41__static_initialization_and_destruction_0ii+0x744>)
 800ed0c:	f7ff f9ca 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG15(GPIOG,GPIO_Pin::PIN_15);
 800ed10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ed14:	4939      	ldr	r1, [pc, #228]	; (800edfc <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800ed16:	485e      	ldr	r0, [pc, #376]	; (800ee90 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 800ed18:	f7ff f9c4 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB4(GPIOB,GPIO_Pin::PIN_4);
 800ed1c:	2210      	movs	r2, #16
 800ed1e:	495d      	ldr	r1, [pc, #372]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed20:	485d      	ldr	r0, [pc, #372]	; (800ee98 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 800ed22:	f7ff f9bf 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB5(GPIOB,GPIO_Pin::PIN_5);
 800ed26:	2220      	movs	r2, #32
 800ed28:	495a      	ldr	r1, [pc, #360]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed2a:	485c      	ldr	r0, [pc, #368]	; (800ee9c <_Z41__static_initialization_and_destruction_0ii+0x754>)
 800ed2c:	f7ff f9ba 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB6(GPIOB,GPIO_Pin::PIN_6);
 800ed30:	2240      	movs	r2, #64	; 0x40
 800ed32:	4958      	ldr	r1, [pc, #352]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed34:	485a      	ldr	r0, [pc, #360]	; (800eea0 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 800ed36:	f7ff f9b5 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB7(GPIOB,GPIO_Pin::PIN_7);
 800ed3a:	2280      	movs	r2, #128	; 0x80
 800ed3c:	4955      	ldr	r1, [pc, #340]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed3e:	4859      	ldr	r0, [pc, #356]	; (800eea4 <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 800ed40:	f7ff f9b0 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB8(GPIOB,GPIO_Pin::PIN_8);
 800ed44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed48:	4952      	ldr	r1, [pc, #328]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed4a:	4857      	ldr	r0, [pc, #348]	; (800eea8 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 800ed4c:	f7ff f9aa 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB9(GPIOB,GPIO_Pin::PIN_9);
 800ed50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed54:	494f      	ldr	r1, [pc, #316]	; (800ee94 <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800ed56:	4855      	ldr	r0, [pc, #340]	; (800eeac <_Z41__static_initialization_and_destruction_0ii+0x764>)
 800ed58:	f7ff f9a4 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE0(GPIOE,GPIO_Pin::PIN_0);
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	4954      	ldr	r1, [pc, #336]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800ed60:	4854      	ldr	r0, [pc, #336]	; (800eeb4 <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 800ed62:	f7ff f99f 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE1(GPIOE,GPIO_Pin::PIN_1);
 800ed66:	2202      	movs	r2, #2
 800ed68:	4951      	ldr	r1, [pc, #324]	; (800eeb0 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800ed6a:	4853      	ldr	r0, [pc, #332]	; (800eeb8 <_Z41__static_initialization_and_destruction_0ii+0x770>)
 800ed6c:	f7ff f99a 	bl	800e0a4 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 800ed70:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ed74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ed78:	4a50      	ldr	r2, [pc, #320]	; (800eebc <_Z41__static_initialization_and_destruction_0ii+0x774>)
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	4611      	mov	r1, r2
 800ed7e:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800ed82:	461a      	mov	r2, r3
 800ed84:	f00b fe6a 	bl	801aa5c <memcpy>
 800ed88:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ed8c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ed90:	f107 0214 	add.w	r2, r7, #20
 800ed94:	601a      	str	r2, [r3, #0]
 800ed96:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ed9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800ed9e:	226e      	movs	r2, #110	; 0x6e
 800eda0:	605a      	str	r2, [r3, #4]
 800eda2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff f9a7 	bl	800e0fa <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 800edac:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800edb0:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800edb4:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800edb8:	ca06      	ldmia	r2, {r1, r2}
 800edba:	4841      	ldr	r0, [pc, #260]	; (800eec0 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800edbc:	f7ff f9b4 	bl	800e128 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 800edc0:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7ff f9a4 	bl	800e112 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800edca:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800edce:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10b      	bne.n	800edf0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800edd8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800eddc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d102      	bne.n	800edf0 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800edea:	4835      	ldr	r0, [pc, #212]	; (800eec0 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800edec:	f7ff f9bd 	bl	800e16a <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 800edf0:	bf00      	nop
 800edf2:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	58021800 	.word	0x58021800
 800ee00:	24000e34 	.word	0x24000e34
 800ee04:	24000e3c 	.word	0x24000e3c
 800ee08:	24000e44 	.word	0x24000e44
 800ee0c:	24000e4c 	.word	0x24000e4c
 800ee10:	24000e54 	.word	0x24000e54
 800ee14:	24000e5c 	.word	0x24000e5c
 800ee18:	24000e64 	.word	0x24000e64
 800ee1c:	58020800 	.word	0x58020800
 800ee20:	24000e6c 	.word	0x24000e6c
 800ee24:	24000e74 	.word	0x24000e74
 800ee28:	24000e7c 	.word	0x24000e7c
 800ee2c:	24000e84 	.word	0x24000e84
 800ee30:	58020000 	.word	0x58020000
 800ee34:	24000e8c 	.word	0x24000e8c
 800ee38:	24000e94 	.word	0x24000e94
 800ee3c:	24000e9c 	.word	0x24000e9c
 800ee40:	24000ea4 	.word	0x24000ea4
 800ee44:	24000eac 	.word	0x24000eac
 800ee48:	24000eb4 	.word	0x24000eb4
 800ee4c:	24000ebc 	.word	0x24000ebc
 800ee50:	24000ec4 	.word	0x24000ec4
 800ee54:	58020c00 	.word	0x58020c00
 800ee58:	24000ecc 	.word	0x24000ecc
 800ee5c:	24000ed4 	.word	0x24000ed4
 800ee60:	24000edc 	.word	0x24000edc
 800ee64:	24000ee4 	.word	0x24000ee4
 800ee68:	24000eec 	.word	0x24000eec
 800ee6c:	24000ef4 	.word	0x24000ef4
 800ee70:	24000efc 	.word	0x24000efc
 800ee74:	24000f04 	.word	0x24000f04
 800ee78:	24000f0c 	.word	0x24000f0c
 800ee7c:	24000f14 	.word	0x24000f14
 800ee80:	24000f1c 	.word	0x24000f1c
 800ee84:	24000f24 	.word	0x24000f24
 800ee88:	24000f2c 	.word	0x24000f2c
 800ee8c:	24000f34 	.word	0x24000f34
 800ee90:	24000f3c 	.word	0x24000f3c
 800ee94:	58020400 	.word	0x58020400
 800ee98:	24000f44 	.word	0x24000f44
 800ee9c:	24000f4c 	.word	0x24000f4c
 800eea0:	24000f54 	.word	0x24000f54
 800eea4:	24000f5c 	.word	0x24000f5c
 800eea8:	24000f64 	.word	0x24000f64
 800eeac:	24000f6c 	.word	0x24000f6c
 800eeb0:	58021000 	.word	0x58021000
 800eeb4:	24000f74 	.word	0x24000f74
 800eeb8:	24000f7c 	.word	0x24000f7c
 800eebc:	0801add8 	.word	0x0801add8
 800eec0:	24000f84 	.word	0x24000f84

0800eec4 <_GLOBAL__sub_I__ZN3PinC2Ev>:
 800eec4:	b580      	push	{r7, lr}
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eecc:	2001      	movs	r0, #1
 800eece:	f7ff fc3b 	bl	800e748 <_Z41__static_initialization_and_destruction_0ii>
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <_GLOBAL__sub_D__ZN3PinC2Ev>:
 800eed4:	b580      	push	{r7, lr}
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eedc:	2000      	movs	r0, #0
 800eede:	f7ff fc33 	bl	800e748 <_Z41__static_initialization_and_destruction_0ii>
 800eee2:	bd80      	pop	{r7, pc}

0800eee4 <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 800eee4:	b580      	push	{r7, lr}
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	f00b fd76 	bl	801a9d8 <abort>

0800eeec <_ZN11PwmInstanceC1E3Pin>:
 *      Author: aleja
 */

#include "Actuator/PWM/PWM.hpp"

PwmInstance::PwmInstance(Pin pin) : pin(pin) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	1d3b      	adds	r3, r7, #4
 800eef6:	e883 0006 	stmia.w	r3, {r1, r2}
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	3304      	adds	r3, #4
 800eefe:	1d3a      	adds	r2, r7, #4
 800ef00:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ef04:	e883 0003 	stmia.w	r3, {r0, r1}
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	330c      	adds	r3, #12
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff f8bb 	bl	800e088 <_ZN3PinC1Ev>
	optional<uint8_t> try_id = PWM::inscribe(pin);
 800ef12:	1d3b      	adds	r3, r7, #4
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 f955 	bl	800f1c4 <_ZN3PWM8inscribeER3Pin>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	82bb      	strh	r3, [r7, #20]
	if (not try_id) {
 800ef1e:	f107 0314 	add.w	r3, r7, #20
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 f82c 	bl	800ef80 <_ZNKSt8optionalIhEcvbEv>
		//TODO: error handler
	}

	id = try_id.value();
 800ef28:	f107 0314 	add.w	r3, r7, #20
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f000 f83f 	bl	800efb0 <_ZNRSt8optionalIhE5valueEv>
 800ef32:	4603      	mov	r3, r0
 800ef34:	781a      	ldrb	r2, [r3, #0]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	701a      	strb	r2, [r3, #0]
}
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <_ZN11PwmInstance7turn_onEv>:
	}

	id = try_id.value();
}

void PwmInstance::turn_on() {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	PWM::turn_on(id);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f000 f985 	bl	800f260 <_ZN3PWM7turn_onEh>
}
 800ef56:	bf00      	nop
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <_ZN11PwmInstance14set_duty_cycleEh>:

void PwmInstance::turn_off() {
	PWM::turn_off(id);
}

void PwmInstance::set_duty_cycle(uint8_t duty_cycle) {
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b082      	sub	sp, #8
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]
 800ef66:	460b      	mov	r3, r1
 800ef68:	70fb      	strb	r3, [r7, #3]
	PWM::set_duty_cycle(id, duty_cycle);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	78fa      	ldrb	r2, [r7, #3]
 800ef70:	4611      	mov	r1, r2
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 fa08 	bl	800f388 <_ZN3PWM14set_duty_cycleEhh>
}
 800ef78:	bf00      	nop
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <_ZNKSt8optionalIhEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b082      	sub	sp, #8
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 f805 	bl	800ef98 <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800ef98:	b480      	push	{r7}
 800ef9a:	b083      	sub	sp, #12
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	785b      	ldrb	r3, [r3, #1]
 800efa4:	4618      	mov	r0, r3
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <_ZNRSt8optionalIhE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff ffed 	bl	800ef98 <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 800efbe:	4603      	mov	r3, r0
	  ? this->_M_get()
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d004      	beq.n	800efce <_ZNRSt8optionalIhE5valueEv+0x1e>
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 f808 	bl	800efda <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 800efca:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800efcc:	e001      	b.n	800efd2 <_ZNRSt8optionalIhE5valueEv+0x22>
 800efce:	f7ff ff89 	bl	800eee4 <_ZSt27__throw_bad_optional_accessv>
      }
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f000 f805 	bl	800eff4 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 800efea:	4603      	mov	r3, r0
      }
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4618      	mov	r0, r3
 800f000:	370c      	adds	r7, #12
 800f002:	46bd      	mov	sp, r7
 800f004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f008:	4770      	bx	lr

0800f00a <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 800f00a:	b480      	push	{r7}
 800f00c:	b083      	sub	sp, #12
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	6039      	str	r1, [r7, #0]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4618      	mov	r0, r3
 800f018:	370c      	adds	r7, #12
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 800f022:	b480      	push	{r7}
 800f024:	b083      	sub	sp, #12
 800f026:	af00      	add	r7, sp, #0
 800f028:	7138      	strb	r0, [r7, #4]
 800f02a:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 800f02c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	bf0c      	ite	eq
 800f034:	2301      	moveq	r3, #1
 800f036:	2300      	movne	r3, #0
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	4618      	mov	r0, r3
 800f03c:	370c      	adds	r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr

0800f046 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 800f046:	b480      	push	{r7}
 800f048:	b083      	sub	sp, #12
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	7138      	strb	r0, [r7, #4]
 800f04e:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 800f050:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800f054:	b2db      	uxtb	r3, r3
 800f056:	09db      	lsrs	r3, r3, #7
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	4618      	mov	r0, r3
 800f05c:	370c      	adds	r7, #12
 800f05e:	46bd      	mov	sp, r7
 800f060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f064:	4770      	bx	lr

0800f066 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800f066:	b580      	push	{r7, lr}
 800f068:	b082      	sub	sp, #8
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800f074:	6878      	ldr	r0, [r7, #4]
 800f076:	f000 f805 	bl	800f084 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4618      	mov	r0, r3
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2200      	movs	r2, #0
 800f090:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800f092:	687a      	ldr	r2, [r7, #4]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	611a      	str	r2, [r3, #16]
    }
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d109      	bne.n	800f0da <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	889a      	ldrh	r2, [r3, #4]
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	889b      	ldrh	r3, [r3, #4]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	bf34      	ite	cc
 800f0d2:	2301      	movcc	r3, #1
 800f0d4:	2300      	movcs	r3, #0
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	e008      	b.n	800f0ec <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	bf34      	ite	cc
 800f0e6:	2301      	movcc	r3, #1
 800f0e8:	2300      	movcs	r3, #0
 800f0ea:	b2db      	uxtb	r3, r3
	}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 fa78 	bl	800f5f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4618      	mov	r0, r3
 800f10a:	3708      	adds	r7, #8
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 fa56 	bl	800f5cc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}

0800f12a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b082      	sub	sp, #8
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	f7ff ffeb 	bl	800f110 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fa5c 	bl	800f60c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800f15e:	b580      	push	{r7, lr}
 800f160:	b082      	sub	sp, #8
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fa7a 	bl	800f660 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEED1Ev>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4618      	mov	r0, r3
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800f176:	b580      	push	{r7, lr}
 800f178:	b082      	sub	sp, #8
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4618      	mov	r0, r3
 800f182:	f000 fa58 	bl	800f636 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEC1Ev>:
      map() = default;
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff ffeb 	bl	800f176 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEED1Ev>:
      ~map() = default;
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b082      	sub	sp, #8
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f000 fa5e 	bl	800f676 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <_ZN3PWM8inscribeER3Pin>:
forward_list<uint8_t> PWM::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t,Pin> PWM::service_ids = {};
map<uint8_t,Pin> PWM::service_ids_negated = {};
map<uint8_t,pair<Pin, Pin>> PWM::service_ids_dual = {};

optional<uint8_t> PWM::inscribe(Pin& pin){
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
	if (not PWM::pin_timer_map.contains(pin)) {
 800f1cc:	6879      	ldr	r1, [r7, #4]
 800f1ce:	4821      	ldr	r0, [pc, #132]	; (800f254 <_ZN3PWM8inscribeER3Pin+0x90>)
 800f1d0:	f000 fa66 	bl	800f6a0 <_ZNKSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE8containsERS5_>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	f083 0301 	eor.w	r3, r3, #1
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d008      	beq.n	800f1f2 <_ZN3PWM8inscribeER3Pin+0x2e>
		return nullopt; //TODO: error handler
 800f1e0:	f107 0310 	add.w	r3, r7, #16
 800f1e4:	4621      	mov	r1, r4
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 fab1 	bl	800f74e <_ZNSt8optionalIhEC1ESt9nullopt_t>
 800f1ec:	8a3b      	ldrh	r3, [r7, #16]
 800f1ee:	81bb      	strh	r3, [r7, #12]
 800f1f0:	e024      	b.n	800f23c <_ZN3PWM8inscribeER3Pin+0x78>
	}

	Pin::inscribe(pin, ALTERNATIVE);
 800f1f2:	2104      	movs	r1, #4
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f7fe ff6c 	bl	800e0d2 <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = PWM::id_manager.front();
 800f1fa:	4817      	ldr	r0, [pc, #92]	; (800f258 <_ZN3PWM8inscribeER3Pin+0x94>)
 800f1fc:	f000 fab5 	bl	800f76a <_ZNSt12forward_listIhSaIhEE5frontEv>
 800f200:	4603      	mov	r3, r0
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	72fb      	strb	r3, [r7, #11]
	PWM::service_ids[id] = pin;
 800f206:	f107 030b 	add.w	r3, r7, #11
 800f20a:	4619      	mov	r1, r3
 800f20c:	4813      	ldr	r0, [pc, #76]	; (800f25c <_ZN3PWM8inscribeER3Pin+0x98>)
 800f20e:	f000 fabb 	bl	800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f212:	4603      	mov	r3, r0
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	6811      	ldr	r1, [r2, #0]
 800f218:	6019      	str	r1, [r3, #0]
 800f21a:	8891      	ldrh	r1, [r2, #4]
 800f21c:	7992      	ldrb	r2, [r2, #6]
 800f21e:	8099      	strh	r1, [r3, #4]
 800f220:	719a      	strb	r2, [r3, #6]
	PWM::id_manager.pop_front();
 800f222:	480d      	ldr	r0, [pc, #52]	; (800f258 <_ZN3PWM8inscribeER3Pin+0x94>)
 800f224:	f000 fb0c 	bl	800f840 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>
	return id;
 800f228:	f107 020b 	add.w	r2, r7, #11
 800f22c:	f107 0314 	add.w	r3, r7, #20
 800f230:	4611      	mov	r1, r2
 800f232:	4618      	mov	r0, r3
 800f234:	f000 fb12 	bl	800f85c <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 800f238:	8abb      	ldrh	r3, [r7, #20]
 800f23a:	81bb      	strh	r3, [r7, #12]
}
 800f23c:	2300      	movs	r3, #0
 800f23e:	7b3a      	ldrb	r2, [r7, #12]
 800f240:	f362 0307 	bfi	r3, r2, #0, #8
 800f244:	7b7a      	ldrb	r2, [r7, #13]
 800f246:	f362 230f 	bfi	r3, r2, #8, #8
 800f24a:	4618      	mov	r0, r3
 800f24c:	371c      	adds	r7, #28
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd90      	pop	{r4, r7, pc}
 800f252:	bf00      	nop
 800f254:	24000ff4 	.word	0x24000ff4
 800f258:	24000f90 	.word	0x24000f90
 800f25c:	24000f94 	.word	0x24000f94

0800f260 <_ZN3PWM7turn_onEh>:
	PWM::service_ids_dual[id] = {pin, pin_negated};
	PWM::id_manager.pop_front();
	return id;
}

void PWM::turn_on(uint8_t id){
 800f260:	b590      	push	{r4, r7, lr}
 800f262:	b091      	sub	sp, #68	; 0x44
 800f264:	af00      	add	r7, sp, #0
 800f266:	4603      	mov	r3, r0
 800f268:	71fb      	strb	r3, [r7, #7]
	if (PWM::service_ids.contains(id)) {
 800f26a:	1dfb      	adds	r3, r7, #7
 800f26c:	4619      	mov	r1, r3
 800f26e:	483f      	ldr	r0, [pc, #252]	; (800f36c <_ZN3PWM7turn_onEh+0x10c>)
 800f270:	f000 fb82 	bl	800f978 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d01f      	beq.n	800f2ba <_ZN3PWM7turn_onEh+0x5a>
		Pin pin = PWM::service_ids[id];
 800f27a:	1dfb      	adds	r3, r7, #7
 800f27c:	4619      	mov	r1, r3
 800f27e:	483b      	ldr	r0, [pc, #236]	; (800f36c <_ZN3PWM7turn_onEh+0x10c>)
 800f280:	f000 fa82 	bl	800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f284:	4602      	mov	r2, r0
 800f286:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f28a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f28e:	e883 0003 	stmia.w	r3, {r0, r1}
		TimerChannel tim_ch = PWM::pin_timer_map[pin];
 800f292:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f296:	4619      	mov	r1, r3
 800f298:	4835      	ldr	r0, [pc, #212]	; (800f370 <_ZN3PWM7turn_onEh+0x110>)
 800f29a:	f000 fb8f 	bl	800f9bc <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2a8:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_TIM_PWM_Start(tim_ch.timer, tim_ch.channel);
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fc fa78 	bl	800b7a8 <HAL_TIM_PWM_Start>
	}

	else {
		//TODO: error handler
	}
}
 800f2b8:	e053      	b.n	800f362 <_ZN3PWM7turn_onEh+0x102>
	else if(PWM::service_ids_negated.contains(id)) {
 800f2ba:	1dfb      	adds	r3, r7, #7
 800f2bc:	4619      	mov	r1, r3
 800f2be:	482d      	ldr	r0, [pc, #180]	; (800f374 <_ZN3PWM7turn_onEh+0x114>)
 800f2c0:	f000 fb5a 	bl	800f978 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d01f      	beq.n	800f30a <_ZN3PWM7turn_onEh+0xaa>
		Pin pin = PWM::service_ids_negated[id];
 800f2ca:	1dfb      	adds	r3, r7, #7
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	4829      	ldr	r0, [pc, #164]	; (800f374 <_ZN3PWM7turn_onEh+0x114>)
 800f2d0:	f000 fa5a 	bl	800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f2d4:	4602      	mov	r2, r0
 800f2d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2de:	e883 0003 	stmia.w	r3, {r0, r1}
		TimerChannel tim_ch = PWM::pin_timer_map_negated[pin];
 800f2e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4823      	ldr	r0, [pc, #140]	; (800f378 <_ZN3PWM7turn_onEh+0x118>)
 800f2ea:	f000 fb67 	bl	800f9bc <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	f107 0320 	add.w	r3, r7, #32
 800f2f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f2f8:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_TIMEx_PWMN_Start(tim_ch.timer, tim_ch.channel);
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f300:	4611      	mov	r1, r2
 800f302:	4618      	mov	r0, r3
 800f304:	f7fd faf2 	bl	800c8ec <HAL_TIMEx_PWMN_Start>
}
 800f308:	e02b      	b.n	800f362 <_ZN3PWM7turn_onEh+0x102>
	else if(PWM::service_ids_dual.contains(id)) {
 800f30a:	1dfb      	adds	r3, r7, #7
 800f30c:	4619      	mov	r1, r3
 800f30e:	481b      	ldr	r0, [pc, #108]	; (800f37c <_ZN3PWM7turn_onEh+0x11c>)
 800f310:	f000 fbb0 	bl	800fa74 <_ZNKSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE8containsERS5_>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d023      	beq.n	800f362 <_ZN3PWM7turn_onEh+0x102>
		pair<Pin, Pin> pin_pair = PWM::service_ids_dual[id];
 800f31a:	1dfb      	adds	r3, r7, #7
 800f31c:	4619      	mov	r1, r3
 800f31e:	4817      	ldr	r0, [pc, #92]	; (800f37c <_ZN3PWM7turn_onEh+0x11c>)
 800f320:	f000 face 	bl	800f8c0 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_>
 800f324:	4603      	mov	r3, r0
 800f326:	f107 0410 	add.w	r4, r7, #16
 800f32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		TimerChannel tim_ch = PWM::pin_timer_map_dual[pin_pair];
 800f330:	f107 0310 	add.w	r3, r7, #16
 800f334:	4619      	mov	r1, r3
 800f336:	4812      	ldr	r0, [pc, #72]	; (800f380 <_ZN3PWM7turn_onEh+0x120>)
 800f338:	f000 fbbe 	bl	800fab8 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_>
 800f33c:	4602      	mov	r2, r0
 800f33e:	f107 0308 	add.w	r3, r7, #8
 800f342:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f346:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_TIM_PWM_Start(tim_ch.timer, tim_ch.channel);
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	68fa      	ldr	r2, [r7, #12]
 800f34e:	4611      	mov	r1, r2
 800f350:	4618      	mov	r0, r3
 800f352:	f7fc fa29 	bl	800b7a8 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(tim_ch.timer, tim_ch.channel);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4611      	mov	r1, r2
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd fac5 	bl	800c8ec <HAL_TIMEx_PWMN_Start>
}
 800f362:	bf00      	nop
 800f364:	3744      	adds	r7, #68	; 0x44
 800f366:	46bd      	mov	sp, r7
 800f368:	bd90      	pop	{r4, r7, pc}
 800f36a:	bf00      	nop
 800f36c:	24000f94 	.word	0x24000f94
 800f370:	24000ff4 	.word	0x24000ff4
 800f374:	24000fac 	.word	0x24000fac
 800f378:	2400100c 	.word	0x2400100c
 800f37c:	24000fc4 	.word	0x24000fc4
 800f380:	24001024 	.word	0x24001024
 800f384:	00000000 	.word	0x00000000

0800f388 <_ZN3PWM14set_duty_cycleEhh>:
	else {
		//TODO: Error handler
	}
}

void PWM::set_duty_cycle(uint8_t id, uint8_t duty_cycle) {
 800f388:	b590      	push	{r4, r7, lr}
 800f38a:	b08f      	sub	sp, #60	; 0x3c
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	4603      	mov	r3, r0
 800f390:	460a      	mov	r2, r1
 800f392:	71fb      	strb	r3, [r7, #7]
 800f394:	4613      	mov	r3, r2
 800f396:	71bb      	strb	r3, [r7, #6]
	if (not (duty_cycle >= 0 && duty_cycle <= 100)) {
 800f398:	79bb      	ldrb	r3, [r7, #6]
 800f39a:	2b64      	cmp	r3, #100	; 0x64
 800f39c:	f200 80ae 	bhi.w	800f4fc <_ZN3PWM14set_duty_cycleEhh+0x174>
		//TODO: error handler
		return;
	}

	TimerChannel tim_ch;
	if (PWM::service_ids.contains(id)) {
 800f3a0:	1dfb      	adds	r3, r7, #7
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	485a      	ldr	r0, [pc, #360]	; (800f510 <_ZN3PWM14set_duty_cycleEhh+0x188>)
 800f3a6:	f000 fae7 	bl	800f978 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d019      	beq.n	800f3e4 <_ZN3PWM14set_duty_cycleEhh+0x5c>
		Pin pin = PWM::service_ids[id];
 800f3b0:	1dfb      	adds	r3, r7, #7
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	4856      	ldr	r0, [pc, #344]	; (800f510 <_ZN3PWM14set_duty_cycleEhh+0x188>)
 800f3b6:	f000 f9e7 	bl	800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3c4:	e883 0003 	stmia.w	r3, {r0, r1}
		tim_ch = PWM::pin_timer_map[pin];
 800f3c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	4851      	ldr	r0, [pc, #324]	; (800f514 <_ZN3PWM14set_duty_cycleEhh+0x18c>)
 800f3d0:	f000 faf4 	bl	800f9bc <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3de:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3e2:	e041      	b.n	800f468 <_ZN3PWM14set_duty_cycleEhh+0xe0>
	}

	else if (PWM::service_ids_negated.contains(id)) {
 800f3e4:	1dfb      	adds	r3, r7, #7
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	484b      	ldr	r0, [pc, #300]	; (800f518 <_ZN3PWM14set_duty_cycleEhh+0x190>)
 800f3ea:	f000 fac5 	bl	800f978 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d019      	beq.n	800f428 <_ZN3PWM14set_duty_cycleEhh+0xa0>
		Pin pin = PWM::service_ids_negated[id];
 800f3f4:	1dfb      	adds	r3, r7, #7
 800f3f6:	4619      	mov	r1, r3
 800f3f8:	4847      	ldr	r0, [pc, #284]	; (800f518 <_ZN3PWM14set_duty_cycleEhh+0x190>)
 800f3fa:	f000 f9c5 	bl	800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 800f3fe:	4602      	mov	r2, r0
 800f400:	f107 031c 	add.w	r3, r7, #28
 800f404:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f408:	e883 0003 	stmia.w	r3, {r0, r1}
		tim_ch = PWM::pin_timer_map_negated[pin];
 800f40c:	f107 031c 	add.w	r3, r7, #28
 800f410:	4619      	mov	r1, r3
 800f412:	4842      	ldr	r0, [pc, #264]	; (800f51c <_ZN3PWM14set_duty_cycleEhh+0x194>)
 800f414:	f000 fad2 	bl	800f9bc <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_>
 800f418:	4602      	mov	r2, r0
 800f41a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f41e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f422:	e883 0003 	stmia.w	r3, {r0, r1}
 800f426:	e01f      	b.n	800f468 <_ZN3PWM14set_duty_cycleEhh+0xe0>
	}

	else if (PWM::service_ids_dual.contains(id)) {
 800f428:	1dfb      	adds	r3, r7, #7
 800f42a:	4619      	mov	r1, r3
 800f42c:	483c      	ldr	r0, [pc, #240]	; (800f520 <_ZN3PWM14set_duty_cycleEhh+0x198>)
 800f42e:	f000 fb21 	bl	800fa74 <_ZNKSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE8containsERS5_>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d063      	beq.n	800f500 <_ZN3PWM14set_duty_cycleEhh+0x178>
		pair<Pin, Pin> pin_pair = PWM::service_ids_dual[id];
 800f438:	1dfb      	adds	r3, r7, #7
 800f43a:	4619      	mov	r1, r3
 800f43c:	4838      	ldr	r0, [pc, #224]	; (800f520 <_ZN3PWM14set_duty_cycleEhh+0x198>)
 800f43e:	f000 fa3f 	bl	800f8c0 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_>
 800f442:	4603      	mov	r3, r0
 800f444:	f107 040c 	add.w	r4, r7, #12
 800f448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f44a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		tim_ch = PWM::pin_timer_map_dual[pin_pair];
 800f44e:	f107 030c 	add.w	r3, r7, #12
 800f452:	4619      	mov	r1, r3
 800f454:	4833      	ldr	r0, [pc, #204]	; (800f524 <_ZN3PWM14set_duty_cycleEhh+0x19c>)
 800f456:	f000 fb2f 	bl	800fab8 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_>
 800f45a:	4602      	mov	r2, r0
 800f45c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f460:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f464:	e883 0003 	stmia.w	r3, {r0, r1}
	}
	else {
		//TODO: error handler
		return;
	}
	uint16_t raw_duty = round(__HAL_TIM_GET_AUTORELOAD(tim_ch.timer) / 100.0 * duty_cycle);
 800f468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46e:	ee07 3a90 	vmov	s15, r3
 800f472:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f476:	ed9f 5b24 	vldr	d5, [pc, #144]	; 800f508 <_ZN3PWM14set_duty_cycleEhh+0x180>
 800f47a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800f47e:	79bb      	ldrb	r3, [r7, #6]
 800f480:	ee07 3a90 	vmov	s15, r3
 800f484:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f488:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f48c:	eeb0 0b47 	vmov.f64	d0, d7
 800f490:	f00b fa5c 	bl	801a94c <round>
 800f494:	eeb0 7b40 	vmov.f64	d7, d0
 800f498:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800f49c:	ee17 3a90 	vmov	r3, s15
 800f4a0:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COMPARE(tim_ch.timer, tim_ch.channel, raw_duty);
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d104      	bne.n	800f4b2 <_ZN3PWM14set_duty_cycleEhh+0x12a>
 800f4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4ae:	635a      	str	r2, [r3, #52]	; 0x34
 800f4b0:	e027      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
 800f4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	d104      	bne.n	800f4c2 <_ZN3PWM14set_duty_cycleEhh+0x13a>
 800f4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4be:	639a      	str	r2, [r3, #56]	; 0x38
 800f4c0:	e01f      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c4:	2b08      	cmp	r3, #8
 800f4c6:	d104      	bne.n	800f4d2 <_ZN3PWM14set_duty_cycleEhh+0x14a>
 800f4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4ce:	63da      	str	r2, [r3, #60]	; 0x3c
 800f4d0:	e017      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	2b0c      	cmp	r3, #12
 800f4d6:	d104      	bne.n	800f4e2 <_ZN3PWM14set_duty_cycleEhh+0x15a>
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4de:	641a      	str	r2, [r3, #64]	; 0x40
 800f4e0:	e00f      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
 800f4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e4:	2b10      	cmp	r3, #16
 800f4e6:	d104      	bne.n	800f4f2 <_ZN3PWM14set_duty_cycleEhh+0x16a>
 800f4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4ee:	659a      	str	r2, [r3, #88]	; 0x58
 800f4f0:	e007      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
 800f4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4f8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f4fa:	e002      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
		return;
 800f4fc:	bf00      	nop
 800f4fe:	e000      	b.n	800f502 <_ZN3PWM14set_duty_cycleEhh+0x17a>
		return;
 800f500:	bf00      	nop
}
 800f502:	373c      	adds	r7, #60	; 0x3c
 800f504:	46bd      	mov	sp, r7
 800f506:	bd90      	pop	{r4, r7, pc}
 800f508:	00000000 	.word	0x00000000
 800f50c:	40590000 	.word	0x40590000
 800f510:	24000f94 	.word	0x24000f94
 800f514:	24000ff4 	.word	0x24000ff4
 800f518:	24000fac 	.word	0x24000fac
 800f51c:	2400100c 	.word	0x2400100c
 800f520:	24000fc4 	.word	0x24000fc4
 800f524:	24001024 	.word	0x24001024

0800f528 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800f528:	b580      	push	{r7, lr}
 800f52a:	b082      	sub	sp, #8
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fb1d 	bl	800fb70 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4618      	mov	r0, r3
 800f53a:	3708      	adds	r7, #8
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}

0800f540 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4618      	mov	r0, r3
 800f54c:	370c      	adds	r7, #12
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr

0800f556 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  @param  __al  An allocator object.
       *
       *  Create a %forward_list consisting of copies of the elements
       *  in the initializer_list @a __il.  This is linear in __il.size().
       */
      forward_list(std::initializer_list<_Tp> __il,
 800f556:	b590      	push	{r4, r7, lr}
 800f558:	b087      	sub	sp, #28
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	60f8      	str	r0, [r7, #12]
 800f55e:	1d38      	adds	r0, r7, #4
 800f560:	e880 0006 	stmia.w	r0, {r1, r2}
 800f564:	603b      	str	r3, [r7, #0]
		   const _Alloc& __al = _Alloc())
      : _Base(_Node_alloc_type(__al))
 800f566:	68fc      	ldr	r4, [r7, #12]
 800f568:	f107 0314 	add.w	r3, r7, #20
 800f56c:	6839      	ldr	r1, [r7, #0]
 800f56e:	4618      	mov	r0, r3
 800f570:	f000 fb09 	bl	800fb86 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>
 800f574:	f107 0314 	add.w	r3, r7, #20
 800f578:	4619      	mov	r1, r3
 800f57a:	4620      	mov	r0, r4
 800f57c:	f000 fb27 	bl	800fbce <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>
 800f580:	f107 0314 	add.w	r3, r7, #20
 800f584:	4618      	mov	r0, r3
 800f586:	f000 fb0b 	bl	800fba0 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
      { _M_range_initialize(__il.begin(), __il.end()); }
 800f58a:	1d3b      	adds	r3, r7, #4
 800f58c:	4618      	mov	r0, r3
 800f58e:	f000 fb44 	bl	800fc1a <_ZNKSt16initializer_listIhE5beginEv>
 800f592:	4604      	mov	r4, r0
 800f594:	1d3b      	adds	r3, r7, #4
 800f596:	4618      	mov	r0, r3
 800f598:	f000 fb4b 	bl	800fc32 <_ZNKSt16initializer_listIhE3endEv>
 800f59c:	4603      	mov	r3, r0
 800f59e:	461a      	mov	r2, r3
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	68f8      	ldr	r0, [r7, #12]
 800f5a4:	f000 fb56 	bl	800fc54 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	371c      	adds	r7, #28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd90      	pop	{r4, r7, pc}

0800f5b2 <_ZNSt12forward_listIhSaIhEED1Ev>:

      /**
       *  @brief  The forward_list dtor.
       */
      ~forward_list() noexcept
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b082      	sub	sp, #8
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
      { }
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f000 fb19 	bl	800fbf4 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b082      	sub	sp, #8
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 fb5c 	bl	800fc92 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f000 fb64 	bl	800fcaa <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	3304      	adds	r3, #4
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff fd3d 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>:
 800f5f6:	b480      	push	{r7}
 800f5f8:	b083      	sub	sp, #12
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4618      	mov	r0, r3
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 fb72 	bl	800fcfe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fb4e 	bl	800fcc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4618      	mov	r0, r3
 800f628:	f7ff fd66 	bl	800f0f8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4618      	mov	r0, r3
 800f630:	3708      	adds	r7, #8
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800f636:	b580      	push	{r7, lr}
 800f638:	b082      	sub	sp, #8
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 fb69 	bl	800fd16 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEEC1Ev>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f000 fb2f 	bl	800fcaa <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	3304      	adds	r3, #4
 800f650:	4618      	mov	r0, r3
 800f652:	f7ff fd08 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEED1Ev>:
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	4618      	mov	r0, r3
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr

0800f676 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800f676:	b580      	push	{r7, lr}
 800f678:	b082      	sub	sp, #8
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 fb74 	bl	800fd6c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 800f684:	4603      	mov	r3, r0
 800f686:	4619      	mov	r1, r3
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fb50 	bl	800fd2e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4618      	mov	r0, r3
 800f692:	f7ff fd64 	bl	800f15e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4618      	mov	r0, r3
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <_ZNKSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE8containsERS5_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b084      	sub	sp, #16
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f000 fb68 	bl	800fd84 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4findERS2_>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	60bb      	str	r3, [r7, #8]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 fb9e 	bl	800fdfc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	f107 020c 	add.w	r2, r7, #12
 800f6c8:	f107 0308 	add.w	r3, r7, #8
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f000 fba5 	bl	800fe1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	f083 0301 	eor.w	r3, r3, #1
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	4618      	mov	r0, r3
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	4618      	mov	r0, r3
 800f706:	f7ff ffed 	bl	800f6e4 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2200      	movs	r2, #0
 800f70e:	705a      	strb	r2, [r3, #1]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4618      	mov	r0, r3
 800f714:	3708      	adds	r7, #8
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}

0800f71a <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 800f71a:	b580      	push	{r7, lr}
 800f71c:	b082      	sub	sp, #8
 800f71e:	af00      	add	r7, sp, #0
 800f720:	6078      	str	r0, [r7, #4]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff ffe8 	bl	800f6fa <_ZNSt22_Optional_payload_baseIhEC1Ev>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	4618      	mov	r0, r3
 800f72e:	3708      	adds	r7, #8
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4618      	mov	r0, r3
 800f740:	f7ff ffeb 	bl	800f71a <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	4618      	mov	r0, r3
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <_ZNSt8optionalIhEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	7039      	strb	r1, [r7, #0]
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff ffea 	bl	800f734 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4618      	mov	r0, r3
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <_ZNSt12forward_listIhSaIhEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %forward_list.
       */
      reference
      front()
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
      {
	_Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	60fb      	str	r3, [r7, #12]
	return *__front->_M_valptr();
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f000 fb64 	bl	800fe46 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 800f77e:	4603      	mov	r3, r0
      }
 800f780:	4618      	mov	r0, r3
 800f782:	3710      	adds	r7, #16
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 800f788:	b590      	push	{r4, r7, lr}
 800f78a:	b08b      	sub	sp, #44	; 0x2c
 800f78c:	af02      	add	r7, sp, #8
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fb64 	bl	800fe62 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 800f79a:	4603      	mov	r3, r0
 800f79c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fb6e 	bl	800fe80 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	60fb      	str	r3, [r7, #12]
 800f7a8:	f107 020c 	add.w	r2, r7, #12
 800f7ac:	f107 0308 	add.w	r3, r7, #8
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f000 fb71 	bl	800fe9a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d112      	bne.n	800f7e4 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 fb7f 	bl	800fec2 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 800f7c4:	f107 0308 	add.w	r3, r7, #8
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f000 fb87 	bl	800fedc <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	461a      	mov	r2, r3
 800f7d2:	f107 0310 	add.w	r3, r7, #16
 800f7d6:	6839      	ldr	r1, [r7, #0]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fb8d 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d001      	beq.n	800f7e8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e000      	b.n	800f7ea <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d01b      	beq.n	800f826 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f7ee:	687c      	ldr	r4, [r7, #4]
 800f7f0:	f107 0208 	add.w	r2, r7, #8
 800f7f4:	f107 0314 	add.w	r3, r7, #20
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f000 fba0 	bl	800ff40 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 800f800:	f107 0318 	add.w	r3, r7, #24
 800f804:	6839      	ldr	r1, [r7, #0]
 800f806:	4618      	mov	r0, r3
 800f808:	f000 fb8b 	bl	800ff22 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f80c:	f107 0218 	add.w	r2, r7, #24
 800f810:	f107 031c 	add.w	r3, r7, #28
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	4613      	mov	r3, r2
 800f818:	4a08      	ldr	r2, [pc, #32]	; (800f83c <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 800f81a:	6979      	ldr	r1, [r7, #20]
 800f81c:	4620      	mov	r0, r4
 800f81e:	f000 fb9f 	bl	800ff60 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 800f822:	4603      	mov	r3, r0
 800f824:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800f826:	f107 0308 	add.w	r3, r7, #8
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 fb56 	bl	800fedc <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 800f830:	4603      	mov	r3, r0
 800f832:	3304      	adds	r3, #4
      }
 800f834:	4618      	mov	r0, r3
 800f836:	3724      	adds	r7, #36	; 0x24
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd90      	pop	{r4, r7, pc}
 800f83c:	0801b300 	.word	0x0801b300

0800f840 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front()
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
      { this->_M_erase_after(&this->_M_impl._M_head); }
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	4611      	mov	r1, r2
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 fbc4 	bl	800ffdc <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>
 800f854:	bf00      	nop
 800f856:	3708      	adds	r7, #8
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
	optional(_Up&& __t)
 800f85c:	b5b0      	push	{r4, r5, r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800f866:	687c      	ldr	r4, [r7, #4]
 800f868:	6838      	ldr	r0, [r7, #0]
 800f86a:	f000 fbd9 	bl	8010020 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800f86e:	4603      	mov	r3, r0
 800f870:	461a      	mov	r2, r3
 800f872:	4629      	mov	r1, r5
 800f874:	4620      	mov	r0, r4
 800f876:	f000 fbef 	bl	8010058 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	4618      	mov	r0, r3
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bdb0      	pop	{r4, r5, r7, pc}

0800f884 <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800f890:	68b8      	ldr	r0, [r7, #8]
 800f892:	f000 fbf6 	bl	8010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800f896:	4602      	mov	r2, r0
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f89e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f000 fbed 	bl	8010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f8b2:	e883 0003 	stmia.w	r3, {r0, r1}
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_>:
      operator[](const key_type& __k)
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b08b      	sub	sp, #44	; 0x2c
 800f8c4:	af02      	add	r7, sp, #8
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 fbe3 	bl	8010098 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE11lower_boundERS5_>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fbed 	bl	80100b6 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE3endEv>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	60fb      	str	r3, [r7, #12]
 800f8e0:	f107 020c 	add.w	r2, r7, #12
 800f8e4:	f107 0308 	add.w	r3, r7, #8
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fbf0 	bl	80100d0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEES7_>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d112      	bne.n	800f91c <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_+0x5c>
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fbfe 	bl	80100f8 <_ZNKSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE8key_compEv>
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	4618      	mov	r0, r3
 800f902:	f000 fc06 	bl	8010112 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEdeEv>
 800f906:	4603      	mov	r3, r0
 800f908:	461a      	mov	r2, r3
 800f90a:	f107 0310 	add.w	r3, r7, #16
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	4618      	mov	r0, r3
 800f912:	f000 faf1 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_+0x60>
 800f91c:	2301      	movs	r3, #1
 800f91e:	e000      	b.n	800f922 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_+0x62>
 800f920:	2300      	movs	r3, #0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d01b      	beq.n	800f95e <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f926:	687c      	ldr	r4, [r7, #4]
 800f928:	f107 0208 	add.w	r2, r7, #8
 800f92c:	f107 0314 	add.w	r3, r7, #20
 800f930:	4611      	mov	r1, r2
 800f932:	4618      	mov	r0, r3
 800f934:	f000 fbfb 	bl	801012e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 800f938:	f107 0318 	add.w	r3, r7, #24
 800f93c:	6839      	ldr	r1, [r7, #0]
 800f93e:	4618      	mov	r0, r3
 800f940:	f000 faef 	bl	800ff22 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800f944:	f107 0218 	add.w	r2, r7, #24
 800f948:	f107 031c 	add.w	r3, r7, #28
 800f94c:	9300      	str	r3, [sp, #0]
 800f94e:	4613      	mov	r3, r2
 800f950:	4a08      	ldr	r2, [pc, #32]	; (800f974 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEixERS5_+0xb4>)
 800f952:	6979      	ldr	r1, [r7, #20]
 800f954:	4620      	mov	r0, r4
 800f956:	f000 fbfa 	bl	801014e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 800f95a:	4603      	mov	r3, r0
 800f95c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800f95e:	f107 0308 	add.w	r3, r7, #8
 800f962:	4618      	mov	r0, r3
 800f964:	f000 fbd5 	bl	8010112 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEdeEv>
 800f968:	4603      	mov	r3, r0
 800f96a:	3304      	adds	r3, #4
      }
 800f96c:	4618      	mov	r0, r3
 800f96e:	3724      	adds	r7, #36	; 0x24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd90      	pop	{r4, r7, pc}
 800f974:	0801b300 	.word	0x0801b300

0800f978 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>:
      contains(const key_type& __x) const
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f000 fc1f 	bl	80101ca <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>
 800f98c:	4603      	mov	r3, r0
 800f98e:	60bb      	str	r3, [r7, #8]
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	4618      	mov	r0, r3
 800f994:	f000 fc55 	bl	8010242 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 800f998:	4603      	mov	r3, r0
 800f99a:	60fb      	str	r3, [r7, #12]
 800f99c:	f107 020c 	add.w	r2, r7, #12
 800f9a0:	f107 0308 	add.w	r3, r7, #8
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f000 fc5c 	bl	8010264 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	f083 0301 	eor.w	r3, r3, #1
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_>:
      operator[](const key_type& __k)
 800f9bc:	b590      	push	{r4, r7, lr}
 800f9be:	b08b      	sub	sp, #44	; 0x2c
 800f9c0:	af02      	add	r7, sp, #8
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800f9c6:	6839      	ldr	r1, [r7, #0]
 800f9c8:	6878      	ldr	r0, [r7, #4]
 800f9ca:	f000 fc5f 	bl	801028c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE11lower_boundERS5_>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 fc69 	bl	80102aa <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE3endEv>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	f107 020c 	add.w	r2, r7, #12
 800f9e0:	f107 0308 	add.w	r3, r7, #8
 800f9e4:	4611      	mov	r1, r2
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 fc6c 	bl	80102c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d112      	bne.n	800fa18 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_+0x5c>
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fc7a 	bl	80102ec <_ZNKSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE8key_compEv>
 800f9f8:	f107 0308 	add.w	r3, r7, #8
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 fc82 	bl	8010306 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEdeEv>
 800fa02:	4603      	mov	r3, r0
 800fa04:	461a      	mov	r2, r3
 800fa06:	f107 0310 	add.w	r3, r7, #16
 800fa0a:	6839      	ldr	r1, [r7, #0]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f000 fc88 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 800fa12:	4603      	mov	r3, r0
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d001      	beq.n	800fa1c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_+0x60>
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e000      	b.n	800fa1e <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_+0x62>
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d01b      	beq.n	800fa5a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800fa22:	687c      	ldr	r4, [r7, #4]
 800fa24:	f107 0208 	add.w	r2, r7, #8
 800fa28:	f107 0314 	add.w	r3, r7, #20
 800fa2c:	4611      	mov	r1, r2
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f000 fc95 	bl	801035e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 800fa34:	f107 0318 	add.w	r3, r7, #24
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 fc80 	bl	8010340 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800fa40:	f107 0218 	add.w	r2, r7, #24
 800fa44:	f107 031c 	add.w	r3, r7, #28
 800fa48:	9300      	str	r3, [sp, #0]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	4a08      	ldr	r2, [pc, #32]	; (800fa70 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEixERS5_+0xb4>)
 800fa4e:	6979      	ldr	r1, [r7, #20]
 800fa50:	4620      	mov	r0, r4
 800fa52:	f000 fc94 	bl	801037e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 800fa56:	4603      	mov	r3, r0
 800fa58:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f000 fc51 	bl	8010306 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEdeEv>
 800fa64:	4603      	mov	r3, r0
 800fa66:	3308      	adds	r3, #8
      }
 800fa68:	4618      	mov	r0, r3
 800fa6a:	3724      	adds	r7, #36	; 0x24
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd90      	pop	{r4, r7, pc}
 800fa70:	0801b300 	.word	0x0801b300

0800fa74 <_ZNKSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE8containsERS5_>:
      contains(const key_type& __x) const
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 fcb9 	bl	80103fa <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	60bb      	str	r3, [r7, #8]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f000 fcef 	bl	8010472 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 800fa94:	4603      	mov	r3, r0
 800fa96:	60fb      	str	r3, [r7, #12]
 800fa98:	f107 020c 	add.w	r2, r7, #12
 800fa9c:	f107 0308 	add.w	r3, r7, #8
 800faa0:	4611      	mov	r1, r2
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 fcf6 	bl	8010494 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEES7_>
 800faa8:	4603      	mov	r3, r0
 800faaa:	f083 0301 	eor.w	r3, r3, #1
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	4618      	mov	r0, r3
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_>:
      operator[](const key_type& __k)
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b08b      	sub	sp, #44	; 0x2c
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800fac2:	6839      	ldr	r1, [r7, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 fcf9 	bl	80104bc <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE11lower_boundERS6_>
 800faca:	4603      	mov	r3, r0
 800facc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 fd03 	bl	80104da <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE3endEv>
 800fad4:	4603      	mov	r3, r0
 800fad6:	60fb      	str	r3, [r7, #12]
 800fad8:	f107 020c 	add.w	r2, r7, #12
 800fadc:	f107 0308 	add.w	r3, r7, #8
 800fae0:	4611      	mov	r1, r2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 fd06 	bl	80104f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d112      	bne.n	800fb14 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_+0x5c>
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 fd14 	bl	801051c <_ZNKSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE8key_compEv>
 800faf4:	f107 0308 	add.w	r3, r7, #8
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 fd1c 	bl	8010536 <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEdeEv>
 800fafe:	4603      	mov	r3, r0
 800fb00:	461a      	mov	r2, r3
 800fb02:	f107 0310 	add.w	r3, r7, #16
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f000 fd3f 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_+0x60>
 800fb14:	2301      	movs	r3, #1
 800fb16:	e000      	b.n	800fb1a <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_+0x62>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d01b      	beq.n	800fb56 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800fb1e:	687c      	ldr	r4, [r7, #4]
 800fb20:	f107 0208 	add.w	r2, r7, #8
 800fb24:	f107 0314 	add.w	r3, r7, #20
 800fb28:	4611      	mov	r1, r2
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f000 fd57 	bl	80105de <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 800fb30:	f107 0318 	add.w	r3, r7, #24
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	4618      	mov	r0, r3
 800fb38:	f000 fd42 	bl	80105c0 <_ZNSt5tupleIJRKSt4pairI3PinS1_EEEC1ILb1ELb1EEES4_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800fb3c:	f107 0218 	add.w	r2, r7, #24
 800fb40:	f107 031c 	add.w	r3, r7, #28
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	4613      	mov	r3, r2
 800fb48:	4a08      	ldr	r2, [pc, #32]	; (800fb6c <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEixERS6_+0xb4>)
 800fb4a:	6979      	ldr	r1, [r7, #20]
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 fd56 	bl	80105fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800fb52:	4603      	mov	r3, r0
 800fb54:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800fb56:	f107 0308 	add.w	r3, r7, #8
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f000 fceb 	bl	8010536 <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEdeEv>
 800fb60:	4603      	mov	r3, r0
 800fb62:	3310      	adds	r3, #16
      }
 800fb64:	4618      	mov	r0, r3
 800fb66:	3724      	adds	r7, #36	; 0x24
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd90      	pop	{r4, r7, pc}
 800fb6c:	0801b300 	.word	0x0801b300

0800fb70 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800fb70:	b480      	push	{r7}
 800fb72:	b083      	sub	sp, #12
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b082      	sub	sp, #8
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	6039      	str	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fd72 	bl	801067a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}

0800fba0 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	370c      	adds	r7, #12
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>:
      struct _Fwd_list_impl
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b082      	sub	sp, #8
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7ff ffee 	bl	800fba0 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>:
      _Fwd_list_base(_Node_alloc_type&& __a)
 800fbce:	b590      	push	{r4, r7, lr}
 800fbd0:	b083      	sub	sp, #12
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	6078      	str	r0, [r7, #4]
 800fbd6:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a)) { }
 800fbd8:	687c      	ldr	r4, [r7, #4]
 800fbda:	6838      	ldr	r0, [r7, #0]
 800fbdc:	f000 fd58 	bl	8010690 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 fd6c 	bl	80106c2 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd90      	pop	{r4, r7, pc}

0800fbf4 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>:
      ~_Fwd_list_base()
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
      { _M_erase_after(&_M_impl._M_head, nullptr); }
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	4619      	mov	r1, r3
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fd76 	bl	80106f4 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7ff ffd3 	bl	800fbb6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4618      	mov	r0, r3
 800fc14:	3708      	adds	r7, #8
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}

0800fc1a <_ZNKSt16initializer_listIhE5beginEv>:
      begin() const noexcept { return _M_array; }
 800fc1a:	b480      	push	{r7}
 800fc1c:	b083      	sub	sp, #12
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	6078      	str	r0, [r7, #4]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4618      	mov	r0, r3
 800fc28:	370c      	adds	r7, #12
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <_ZNKSt16initializer_listIhE3endEv>:
      end() const noexcept { return begin() + size(); }
 800fc32:	b590      	push	{r4, r7, lr}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff ffed 	bl	800fc1a <_ZNKSt16initializer_listIhE5beginEv>
 800fc40:	4604      	mov	r4, r0
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 fd81 	bl	801074a <_ZNKSt16initializer_listIhE4sizeEv>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4423      	add	r3, r4
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd90      	pop	{r4, r7, pc}

0800fc54 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>:

  // Called by the range constructor to implement [23.3.4.2]/9
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      forward_list<_Tp, _Alloc>::
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b086      	sub	sp, #24
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
      _M_range_initialize(_InputIterator __first, _InputIterator __last)
      {
	_Node_base* __to = &this->_M_impl._M_head;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d00e      	beq.n	800fc8a <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x36>
	  {
	    __to->_M_next = this->_M_create_node(*__first);
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	68b9      	ldr	r1, [r7, #8]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f000 fd83 	bl	801077c <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 800fc76:	4602      	mov	r2, r0
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	601a      	str	r2, [r3, #0]
	    __to = __to->_M_next;
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	3301      	adds	r3, #1
 800fc86:	60bb      	str	r3, [r7, #8]
 800fc88:	e7ec      	b.n	800fc64 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x10>
	  }
      }
 800fc8a:	bf00      	nop
 800fc8c:	3718      	adds	r7, #24
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b082      	sub	sp, #8
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fd96 	bl	80107cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4618      	mov	r0, r3
 800fca4:	3708      	adds	r7, #8
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 800fcaa:	b480      	push	{r7}
 800fcac:	b083      	sub	sp, #12
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
      { }
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d012      	beq.n	800fcf6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800fcd0:	6838      	ldr	r0, [r7, #0]
 800fcd2:	f000 fd86 	bl	80107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff fff0 	bl	800fcc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800fce0:	6838      	ldr	r0, [r7, #0]
 800fce2:	f000 fd8a 	bl	80107fa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800fce6:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800fce8:	6839      	ldr	r1, [r7, #0]
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 fd91 	bl	8010812 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800fcf4:	e7e9      	b.n	800fcca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 800fcf6:	bf00      	nop
 800fcf8:	3710      	adds	r7, #16
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800fcfe:	b480      	push	{r7}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	689b      	ldr	r3, [r3, #8]
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	370c      	adds	r7, #12
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr

0800fd16 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEEEC1Ev>:
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b082      	sub	sp, #8
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	6078      	str	r0, [r7, #4]
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fd88 	bl	8010834 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEEC1Ev>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b084      	sub	sp, #16
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
 800fd36:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d012      	beq.n	800fd64 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800fd3e:	6838      	ldr	r0, [r7, #0]
 800fd40:	f000 fd83 	bl	801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800fd44:	4603      	mov	r3, r0
 800fd46:	4619      	mov	r1, r3
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f7ff fff0 	bl	800fd2e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800fd4e:	6838      	ldr	r0, [r7, #0]
 800fd50:	f000 fd87 	bl	8010862 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800fd54:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 fd8e 	bl	801087a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800fd62:	e7e9      	b.n	800fd38 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800fd64:	bf00      	nop
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4findERS2_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800fd84:	b590      	push	{r4, r7, lr}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
 800fd8c:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 fd84 	bl	801089c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 800fd94:	4604      	mov	r4, r0
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 fd8c 	bl	80108b4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	683b      	ldr	r3, [r7, #0]
 800fda0:	4621      	mov	r1, r4
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 fd92 	bl	80108cc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 f825 	bl	800fdfc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	f107 020c 	add.w	r2, r7, #12
 800fdba:	f107 0308 	add.w	r3, r7, #8
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f000 f82c 	bl	800fe1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 800fdc6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10d      	bne.n	800fde8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4findERS2_+0x64>
	      || _M_impl._M_key_compare(__k,
 800fdcc:	687c      	ldr	r4, [r7, #4]
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f000 fdac 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	461a      	mov	r2, r3
 800fdda:	6839      	ldr	r1, [r7, #0]
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 faa0 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d004      	beq.n	800fdf2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4findERS2_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f807 	bl	800fdfc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	e000      	b.n	800fdf4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4findERS2_+0x70>
 800fdf2:	68bb      	ldr	r3, [r7, #8]
    }
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd90      	pop	{r4, r7, pc}

0800fdfc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	1d1a      	adds	r2, r3, #4
 800fe08:	f107 030c 	add.w	r3, r7, #12
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f000 fd99 	bl	8010946 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1EPKSt18_Rb_tree_node_base>
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fe1e:	b480      	push	{r7}
 800fe20:	b083      	sub	sp, #12
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
 800fe26:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	bf0c      	ite	eq
 800fe34:	2301      	moveq	r3, #1
 800fe36:	2300      	movne	r3, #0
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	370c      	adds	r7, #12
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>:
      _M_valptr() noexcept
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b082      	sub	sp, #8
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3304      	adds	r3, #4
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 fd86 	bl	8010964 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b082      	sub	sp, #8
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
 800fe6a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6839      	ldr	r1, [r7, #0]
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 fd83 	bl	801097c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 800fe76:	4603      	mov	r3, r0
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3708      	adds	r7, #8
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 fd8d 	bl	80109aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 800fe90:	4603      	mov	r3, r0
 800fe92:	4618      	mov	r0, r3
 800fe94:	3708      	adds	r7, #8
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}

0800fe9a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800fe9a:	b480      	push	{r7}
 800fe9c:	b083      	sub	sp, #12
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
 800fea2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681a      	ldr	r2, [r3, #0]
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	429a      	cmp	r2, r3
 800feae:	bf0c      	ite	eq
 800feb0:	2301      	moveq	r3, #1
 800feb2:	2300      	movne	r3, #0
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	4618      	mov	r0, r3
 800feb8:	370c      	adds	r7, #12
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 800fec2:	b590      	push	{r4, r7, lr}
 800fec4:	b083      	sub	sp, #12
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4618      	mov	r0, r3
 800fece:	f000 fd7d 	bl	80109cc <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 800fed2:	bf00      	nop
 800fed4:	4620      	mov	r0, r4
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd90      	pop	{r4, r7, pc}

0800fedc <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	4618      	mov	r0, r3
 800feea:	f000 fd7a 	bl	80109e2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 800feee:	4603      	mov	r3, r0
 800fef0:	4618      	mov	r0, r3
 800fef2:	3708      	adds	r7, #8
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <_ZNKSt4lessIhEclERKhS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	781a      	ldrb	r2, [r3, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	bf34      	ite	cc
 800ff10:	2301      	movcc	r3, #1
 800ff12:	2300      	movcs	r3, #0
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	4618      	mov	r0, r3
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b082      	sub	sp, #8
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
 800ff2a:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	6839      	ldr	r1, [r7, #0]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f000 fd64 	bl	80109fe <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800ff60:	b5b0      	push	{r4, r5, r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 fd54 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800ff74:	4604      	mov	r4, r0
 800ff76:	6838      	ldr	r0, [r7, #0]
 800ff78:	f000 fd5b 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff80:	f000 fd62 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ff84:	4603      	mov	r3, r0
 800ff86:	462a      	mov	r2, r5
 800ff88:	4621      	mov	r1, r4
 800ff8a:	68f8      	ldr	r0, [r7, #12]
 800ff8c:	f000 fd67 	bl	8010a5e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800ff90:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800ff92:	69f8      	ldr	r0, [r7, #28]
 800ff94:	f000 fea9 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	f107 0010 	add.w	r0, r7, #16
 800ff9e:	68ba      	ldr	r2, [r7, #8]
 800ffa0:	68f9      	ldr	r1, [r7, #12]
 800ffa2:	f000 fd7f 	bl	8010aa4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d007      	beq.n	800ffbc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 800ffac:	6939      	ldr	r1, [r7, #16]
 800ffae:	697a      	ldr	r2, [r7, #20]
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	f000 feac 	bl	8010d10 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	e00b      	b.n	800ffd4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 800ffbc:	69f9      	ldr	r1, [r7, #28]
 800ffbe:	68f8      	ldr	r0, [r7, #12]
 800ffc0:	f000 fc27 	bl	8010812 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	f107 0318 	add.w	r3, r7, #24
 800ffca:	4611      	mov	r1, r2
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f000 fedc 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 800ffd2:	69bb      	ldr	r3, [r7, #24]
      }
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3720      	adds	r7, #32
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bdb0      	pop	{r4, r5, r7, pc}

0800ffdc <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>:
    _Fwd_list_base<_Tp, _Alloc>::
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	60fb      	str	r3, [r7, #12]
      __pos->_M_next = __curr->_M_next;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	601a      	str	r2, [r3, #0]
      _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 fed7 	bl	8010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 800fffa:	4604      	mov	r4, r0
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f7ff ff22 	bl	800fe46 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8010002:	4603      	mov	r3, r0
 8010004:	4619      	mov	r1, r3
 8010006:	4620      	mov	r0, r4
 8010008:	f000 fed9 	bl	8010dbe <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
      _M_put_node(__curr);
 801000c:	68f9      	ldr	r1, [r7, #12]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 feed 	bl	8010dee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      return __pos->_M_next;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
    }
 8010018:	4618      	mov	r0, r3
 801001a:	3714      	adds	r7, #20
 801001c:	46bd      	mov	sp, r7
 801001e:	bd90      	pop	{r4, r7, pc}

08010020 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	370c      	adds	r7, #12
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010036:	b590      	push	{r4, r7, lr}
 8010038:	b085      	sub	sp, #20
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	7239      	strb	r1, [r7, #8]
 8010040:	607a      	str	r2, [r7, #4]
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4621      	mov	r1, r4
 8010048:	4618      	mov	r0, r3
 801004a:	f000 fef8 	bl	8010e3e <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	4618      	mov	r0, r3
 8010052:	3714      	adds	r7, #20
 8010054:	46bd      	mov	sp, r7
 8010056:	bd90      	pop	{r4, r7, pc}

08010058 <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010058:	b5b0      	push	{r4, r5, r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	7239      	strb	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8010064:	68fc      	ldr	r4, [r7, #12]
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff ffda 	bl	8010020 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801006c:	4603      	mov	r3, r0
 801006e:	461a      	mov	r2, r3
 8010070:	4629      	mov	r1, r5
 8010072:	4620      	mov	r0, r4
 8010074:	f7ff ffdf 	bl	8010036 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	4618      	mov	r0, r3
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bdb0      	pop	{r4, r5, r7, pc}

08010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f000 feed 	bl	8010e86 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 80100ac:	4603      	mov	r3, r0
 80100ae:	4618      	mov	r0, r3
 80100b0:	3708      	adds	r7, #8
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}

080100b6 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80100b6:	b580      	push	{r7, lr}
 80100b8:	b082      	sub	sp, #8
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	4618      	mov	r0, r3
 80100c2:	f000 fef7 	bl	8010eb4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 80100c6:	4603      	mov	r3, r0
 80100c8:	4618      	mov	r0, r3
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	bf0c      	ite	eq
 80100e6:	2301      	moveq	r3, #1
 80100e8:	2300      	movne	r3, #0
 80100ea:	b2db      	uxtb	r3, r3
 80100ec:	4618      	mov	r0, r3
 80100ee:	370c      	adds	r7, #12
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr

080100f8 <_ZNKSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEE8key_compEv>:
      key_comp() const
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	4618      	mov	r0, r3
 8010104:	f000 fee7 	bl	8010ed6 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 8010108:	bf00      	nop
 801010a:	4620      	mov	r0, r4
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	bd90      	pop	{r4, r7, pc}

08010112 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010112:	b580      	push	{r7, lr}
 8010114:	b082      	sub	sp, #8
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4618      	mov	r0, r3
 8010120:	f000 fee4 	bl	8010eec <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>
 8010124:	4603      	mov	r3, r0
 8010126:	4618      	mov	r0, r3
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801012e:	b480      	push	{r7}
 8010130:	b083      	sub	sp, #12
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	681a      	ldr	r2, [r3, #0]
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801014e:	b5b0      	push	{r4, r5, r7, lr}
 8010150:	b088      	sub	sp, #32
 8010152:	af00      	add	r7, sp, #0
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	607a      	str	r2, [r7, #4]
 801015a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fc5d 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010162:	4604      	mov	r4, r0
 8010164:	6838      	ldr	r0, [r7, #0]
 8010166:	f000 fc64 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801016a:	4605      	mov	r5, r0
 801016c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801016e:	f000 fc6b 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010172:	4603      	mov	r3, r0
 8010174:	462a      	mov	r2, r5
 8010176:	4621      	mov	r1, r4
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f000 fec5 	bl	8010f08 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 801017e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010180:	69f8      	ldr	r0, [r7, #28]
 8010182:	f001 f807 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010186:	4603      	mov	r3, r0
 8010188:	f107 0010 	add.w	r0, r7, #16
 801018c:	68ba      	ldr	r2, [r7, #8]
 801018e:	68f9      	ldr	r1, [r7, #12]
 8010190:	f000 fedd 	bl	8010f4e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d007      	beq.n	80101aa <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801019a:	6939      	ldr	r1, [r7, #16]
 801019c:	697a      	ldr	r2, [r7, #20]
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f001 f80a 	bl	80111ba <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80101a6:	4603      	mov	r3, r0
 80101a8:	e00b      	b.n	80101c2 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 80101aa:	69f9      	ldr	r1, [r7, #28]
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f000 fb64 	bl	801087a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	f107 0318 	add.w	r3, r7, #24
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 f83a 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 80101c0:	69bb      	ldr	r3, [r7, #24]
      }
 80101c2:	4618      	mov	r0, r3
 80101c4:	3720      	adds	r7, #32
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bdb0      	pop	{r4, r5, r7, pc}

080101ca <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80101ca:	b590      	push	{r4, r7, lr}
 80101cc:	b085      	sub	sp, #20
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
 80101d2:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f001 f83c 	bl	8011252 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 80101da:	4604      	mov	r4, r0
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f001 f844 	bl	801126a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 80101e2:	4602      	mov	r2, r0
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	4621      	mov	r1, r4
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f001 f84a 	bl	8011282 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 80101ee:	4603      	mov	r3, r0
 80101f0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 f825 	bl	8010242 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 80101f8:	4603      	mov	r3, r0
 80101fa:	60fb      	str	r3, [r7, #12]
 80101fc:	f107 020c 	add.w	r2, r7, #12
 8010200:	f107 0308 	add.w	r3, r7, #8
 8010204:	4611      	mov	r1, r2
 8010206:	4618      	mov	r0, r3
 8010208:	f000 f82c 	bl	8010264 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>
 801020c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801020e:	2b00      	cmp	r3, #0
 8010210:	d10d      	bne.n	801022e <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8010212:	687c      	ldr	r4, [r7, #4]
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	4618      	mov	r0, r3
 8010218:	f001 f864 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801021c:	4603      	mov	r3, r0
 801021e:	461a      	mov	r2, r3
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	4620      	mov	r0, r4
 8010224:	f7ff fe68 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d004      	beq.n	8010238 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 f807 	bl	8010242 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8010234:	4603      	mov	r3, r0
 8010236:	e000      	b.n	801023a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x70>
 8010238:	68bb      	ldr	r3, [r7, #8]
    }
 801023a:	4618      	mov	r0, r3
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	bd90      	pop	{r4, r7, pc}

08010242 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010242:	b580      	push	{r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	1d1a      	adds	r2, r3, #4
 801024e:	f107 030c 	add.w	r3, r7, #12
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f001 f851 	bl	80112fc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	4618      	mov	r0, r3
 801025e:	3710      	adds	r7, #16
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	429a      	cmp	r2, r3
 8010278:	bf0c      	ite	eq
 801027a:	2301      	moveq	r3, #1
 801027c:	2300      	movne	r3, #0
 801027e:	b2db      	uxtb	r3, r3
 8010280:	4618      	mov	r0, r3
 8010282:	370c      	adds	r7, #12
 8010284:	46bd      	mov	sp, r7
 8010286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028a:	4770      	bx	lr

0801028c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6839      	ldr	r1, [r7, #0]
 801029a:	4618      	mov	r0, r3
 801029c:	f001 f83d 	bl	801131a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11lower_boundERS2_>
 80102a0:	4603      	mov	r3, r0
 80102a2:	4618      	mov	r0, r3
 80102a4:	3708      	adds	r7, #8
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b082      	sub	sp, #8
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	4618      	mov	r0, r3
 80102b6:	f001 f847 	bl	8011348 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 80102ba:	4603      	mov	r3, r0
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	683b      	ldr	r3, [r7, #0]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	bf0c      	ite	eq
 80102da:	2301      	moveq	r3, #1
 80102dc:	2300      	movne	r3, #0
 80102de:	b2db      	uxtb	r3, r3
 80102e0:	4618      	mov	r0, r3
 80102e2:	370c      	adds	r7, #12
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <_ZNKSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEE8key_compEv>:
      key_comp() const
 80102ec:	b590      	push	{r4, r7, lr}
 80102ee:	b083      	sub	sp, #12
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f001 f837 	bl	801136a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8key_compEv>
 80102fc:	bf00      	nop
 80102fe:	4620      	mov	r0, r4
 8010300:	370c      	adds	r7, #12
 8010302:	46bd      	mov	sp, r7
 8010304:	bd90      	pop	{r4, r7, pc}

08010306 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010306:	b580      	push	{r7, lr}
 8010308:	b082      	sub	sp, #8
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	4618      	mov	r0, r3
 8010314:	f001 f834 	bl	8011380 <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8010318:	4603      	mov	r3, r0
 801031a:	4618      	mov	r0, r3
 801031c:	3708      	adds	r7, #8
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8010322:	b580      	push	{r7, lr}
 8010324:	b084      	sub	sp, #16
 8010326:	af00      	add	r7, sp, #0
 8010328:	60f8      	str	r0, [r7, #12]
 801032a:	60b9      	str	r1, [r7, #8]
 801032c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	68b8      	ldr	r0, [r7, #8]
 8010332:	f7fe febd 	bl	800f0b0 <_ZNK3PinltERKS_>
 8010336:	4603      	mov	r3, r0
 8010338:	4618      	mov	r0, r3
 801033a:	3710      	adds	r7, #16
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}

08010340 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>:
	tuple(const _Elements&... __elements)
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6839      	ldr	r1, [r7, #0]
 801034e:	4618      	mov	r0, r3
 8010350:	f001 f824 	bl	801139c <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	4618      	mov	r0, r3
 8010358:	3708      	adds	r7, #8
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}

0801035e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801035e:	b480      	push	{r7}
 8010360:	b083      	sub	sp, #12
 8010362:	af00      	add	r7, sp, #0
 8010364:	6078      	str	r0, [r7, #4]
 8010366:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801037e:	b5b0      	push	{r4, r5, r7, lr}
 8010380:	b088      	sub	sp, #32
 8010382:	af00      	add	r7, sp, #0
 8010384:	60f8      	str	r0, [r7, #12]
 8010386:	60b9      	str	r1, [r7, #8]
 8010388:	607a      	str	r2, [r7, #4]
 801038a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f000 fb45 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010392:	4604      	mov	r4, r0
 8010394:	6838      	ldr	r0, [r7, #0]
 8010396:	f001 f810 	bl	80113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801039a:	4605      	mov	r5, r0
 801039c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801039e:	f000 fb53 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80103a2:	4603      	mov	r3, r0
 80103a4:	462a      	mov	r2, r5
 80103a6:	4621      	mov	r1, r4
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f001 f811 	bl	80113d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80103ae:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80103b0:	69f8      	ldr	r0, [r7, #28]
 80103b2:	f001 f953 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80103b6:	4603      	mov	r3, r0
 80103b8:	f107 0010 	add.w	r0, r7, #16
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	68f9      	ldr	r1, [r7, #12]
 80103c0:	f001 f829 	bl	8011416 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>
	    if (__res.second)
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d007      	beq.n	80103da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80103ca:	6939      	ldr	r1, [r7, #16]
 80103cc:	697a      	ldr	r2, [r7, #20]
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f001 f956 	bl	8011682 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80103d6:	4603      	mov	r3, r0
 80103d8:	e00b      	b.n	80103f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 80103da:	69f9      	ldr	r1, [r7, #28]
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f001 f98d 	bl	80116fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 80103e2:	693a      	ldr	r2, [r7, #16]
 80103e4:	f107 0318 	add.w	r3, r7, #24
 80103e8:	4611      	mov	r1, r2
 80103ea:	4618      	mov	r0, r3
 80103ec:	f001 f997 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80103f0:	69bb      	ldr	r3, [r7, #24]
      }
 80103f2:	4618      	mov	r0, r3
 80103f4:	3720      	adds	r7, #32
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bdb0      	pop	{r4, r5, r7, pc}

080103fa <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80103fa:	b590      	push	{r4, r7, lr}
 80103fc:	b085      	sub	sp, #20
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f001 f999 	bl	801173c <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801040a:	4604      	mov	r4, r0
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f001 f9a1 	bl	8011754 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8010412:	4602      	mov	r2, r0
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	4621      	mov	r1, r4
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f001 f9a7 	bl	801176c <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 801041e:	4603      	mov	r3, r0
 8010420:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 f825 	bl	8010472 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8010428:	4603      	mov	r3, r0
 801042a:	60fb      	str	r3, [r7, #12]
 801042c:	f107 020c 	add.w	r2, r7, #12
 8010430:	f107 0308 	add.w	r3, r7, #8
 8010434:	4611      	mov	r1, r2
 8010436:	4618      	mov	r0, r3
 8010438:	f000 f82c 	bl	8010494 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEES7_>
 801043c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10d      	bne.n	801045e <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 8010442:	687c      	ldr	r4, [r7, #4]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	4618      	mov	r0, r3
 8010448:	f001 f9c1 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801044c:	4603      	mov	r3, r0
 801044e:	461a      	mov	r2, r3
 8010450:	6839      	ldr	r1, [r7, #0]
 8010452:	4620      	mov	r0, r4
 8010454:	f7ff fd50 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d004      	beq.n	8010468 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f000 f807 	bl	8010472 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8010464:	4603      	mov	r3, r0
 8010466:	e000      	b.n	801046a <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 8010468:	68bb      	ldr	r3, [r7, #8]
    }
 801046a:	4618      	mov	r0, r3
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	bd90      	pop	{r4, r7, pc}

08010472 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010472:	b580      	push	{r7, lr}
 8010474:	b084      	sub	sp, #16
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	1d1a      	adds	r2, r3, #4
 801047e:	f107 030c 	add.w	r3, r7, #12
 8010482:	4611      	mov	r1, r2
 8010484:	4618      	mov	r0, r3
 8010486:	f001 f9ae 	bl	80117e6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPKSt18_Rb_tree_node_base>
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	4618      	mov	r0, r3
 801048e:	3710      	adds	r7, #16
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	bf0c      	ite	eq
 80104aa:	2301      	moveq	r3, #1
 80104ac:	2300      	movne	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	4618      	mov	r0, r3
 80104b2:	370c      	adds	r7, #12
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr

080104bc <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6839      	ldr	r1, [r7, #0]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f001 f99a 	bl	8011804 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11lower_boundERS3_>
 80104d0:	4603      	mov	r3, r0
 80104d2:	4618      	mov	r0, r3
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}

080104da <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80104da:	b580      	push	{r7, lr}
 80104dc:	b082      	sub	sp, #8
 80104de:	af00      	add	r7, sp, #0
 80104e0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f001 f9a4 	bl	8011832 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>
 80104ea:	4603      	mov	r3, r0
 80104ec:	4618      	mov	r0, r3
 80104ee:	3708      	adds	r7, #8
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681a      	ldr	r2, [r3, #0]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	429a      	cmp	r2, r3
 8010508:	bf0c      	ite	eq
 801050a:	2301      	moveq	r3, #1
 801050c:	2300      	movne	r3, #0
 801050e:	b2db      	uxtb	r3, r3
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <_ZNKSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEE8key_compEv>:
      key_comp() const
 801051c:	b590      	push	{r4, r7, lr}
 801051e:	b083      	sub	sp, #12
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4618      	mov	r0, r3
 8010528:	f001 f994 	bl	8011854 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8key_compEv>
 801052c:	bf00      	nop
 801052e:	4620      	mov	r0, r4
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	bd90      	pop	{r4, r7, pc}

08010536 <_ZNKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010536:	b580      	push	{r7, lr}
 8010538:	b082      	sub	sp, #8
 801053a:	af00      	add	r7, sp, #0
 801053c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4618      	mov	r0, r3
 8010544:	f001 f991 	bl	801186a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8010548:	4603      	mov	r3, r0
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	60f8      	str	r0, [r7, #12]
 801055a:	60b9      	str	r1, [r7, #8]
 801055c:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 801055e:	6879      	ldr	r1, [r7, #4]
 8010560:	68b8      	ldr	r0, [r7, #8]
 8010562:	f7fe fda5 	bl	800f0b0 <_ZNK3PinltERKS_>
 8010566:	4603      	mov	r3, r0
 8010568:	2b00      	cmp	r3, #0
 801056a:	d001      	beq.n	8010570 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 801056c:	23ff      	movs	r3, #255	; 0xff
 801056e:	e009      	b.n	8010584 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8010570:	68b9      	ldr	r1, [r7, #8]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fe fd9c 	bl	800f0b0 <_ZNK3PinltERKS_>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d001      	beq.n	8010582 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 8010582:	2300      	movs	r3, #0
	    }
	}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 801058c:	b590      	push	{r4, r7, lr}
 801058e:	b087      	sub	sp, #28
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8010598:	6879      	ldr	r1, [r7, #4]
 801059a:	68b8      	ldr	r0, [r7, #8]
 801059c:	f001 f974 	bl	8011888 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 80105a0:	4604      	mov	r4, r0
 80105a2:	f107 0314 	add.w	r3, r7, #20
 80105a6:	2100      	movs	r1, #0
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe fd2e 	bl	800f00a <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80105ae:	7d39      	ldrb	r1, [r7, #20]
 80105b0:	4620      	mov	r0, r4
 80105b2:	f7fe fd48 	bl	800f046 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 80105b6:	4603      	mov	r3, r0
 80105b8:	4618      	mov	r0, r3
 80105ba:	371c      	adds	r7, #28
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd90      	pop	{r4, r7, pc}

080105c0 <_ZNSt5tupleIJRKSt4pairI3PinS1_EEEC1ILb1ELb1EEES4_>:
	tuple(const _Elements&... __elements)
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b082      	sub	sp, #8
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6839      	ldr	r1, [r7, #0]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f001 f98a 	bl	80118e8 <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEEC1ES4_>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4618      	mov	r0, r3
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}

080105de <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80105de:	b480      	push	{r7}
 80105e0:	b083      	sub	sp, #12
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	6078      	str	r0, [r7, #4]
 80105e6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	601a      	str	r2, [r3, #0]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80105fe:	b5b0      	push	{r4, r5, r7, lr}
 8010600:	b088      	sub	sp, #32
 8010602:	af00      	add	r7, sp, #0
 8010604:	60f8      	str	r0, [r7, #12]
 8010606:	60b9      	str	r1, [r7, #8]
 8010608:	607a      	str	r2, [r7, #4]
 801060a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fa05 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010612:	4604      	mov	r4, r0
 8010614:	6838      	ldr	r0, [r7, #0]
 8010616:	f001 f976 	bl	8011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801061a:	4605      	mov	r5, r0
 801061c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801061e:	f000 fa13 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010622:	4603      	mov	r3, r0
 8010624:	462a      	mov	r2, r5
 8010626:	4621      	mov	r1, r4
 8010628:	68f8      	ldr	r0, [r7, #12]
 801062a:	f001 f977 	bl	801191c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801062e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010630:	69f8      	ldr	r0, [r7, #28]
 8010632:	f001 fab9 	bl	8011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8010636:	4603      	mov	r3, r0
 8010638:	f107 0010 	add.w	r0, r7, #16
 801063c:	68ba      	ldr	r2, [r7, #8]
 801063e:	68f9      	ldr	r1, [r7, #12]
 8010640:	f001 f98f 	bl	8011962 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>
	    if (__res.second)
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d007      	beq.n	801065a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801064a:	6939      	ldr	r1, [r7, #16]
 801064c:	697a      	ldr	r2, [r7, #20]
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f001 fabc 	bl	8011bce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8010656:	4603      	mov	r3, r0
 8010658:	e00b      	b.n	8010672 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 801065a:	69f9      	ldr	r1, [r7, #28]
 801065c:	68f8      	ldr	r0, [r7, #12]
 801065e:	f001 faf3 	bl	8011c48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	f107 0318 	add.w	r3, r7, #24
 8010668:	4611      	mov	r1, r2
 801066a:	4618      	mov	r0, r3
 801066c:	f001 fafd 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8010670:	69bb      	ldr	r3, [r7, #24]
      }
 8010672:	4618      	mov	r0, r3
 8010674:	3720      	adds	r7, #32
 8010676:	46bd      	mov	sp, r7
 8010678:	bdb0      	pop	{r4, r5, r7, pc}

0801067a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>:
 801067a:	b480      	push	{r7}
 801067c:	b083      	sub	sp, #12
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr

08010690 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	4618      	mov	r0, r3
 801069c:	370c      	adds	r7, #12
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr

080106a6 <_ZNSt19_Fwd_list_node_baseC1Ev>:
    _Fwd_list_node_base() = default;
 80106a6:	b480      	push	{r7}
 80106a8:	b083      	sub	sp, #12
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr

080106c2 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>:
	_Fwd_list_impl(_Node_alloc_type&& __a)
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a)), _M_head()
 80106cc:	6838      	ldr	r0, [r7, #0]
 80106ce:	f7ff ffdf 	bl	8010690 <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80106d2:	4603      	mov	r3, r0
 80106d4:	4619      	mov	r1, r3
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f001 fad6 	bl	8011c88 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2200      	movs	r2, #0
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7ff ffde 	bl	80106a6 <_ZNSt19_Fwd_list_node_baseC1Ev>
	{ }
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4618      	mov	r0, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>:
    _Fwd_list_base<_Tp, _Alloc>::
 80106f4:	b590      	push	{r4, r7, lr}
 80106f6:	b087      	sub	sp, #28
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	60f8      	str	r0, [r7, #12]
 80106fc:	60b9      	str	r1, [r7, #8]
 80106fe:	607a      	str	r2, [r7, #4]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	617b      	str	r3, [r7, #20]
      while (__curr != __last)
 8010706:	697a      	ldr	r2, [r7, #20]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	429a      	cmp	r2, r3
 801070c:	d015      	beq.n	801073a <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x46>
	  _Node* __temp = __curr;
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	613b      	str	r3, [r7, #16]
	  __curr = static_cast<_Node*>(__curr->_M_next);
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	617b      	str	r3, [r7, #20]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f000 fb45 	bl	8010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 801071e:	4604      	mov	r4, r0
 8010720:	6938      	ldr	r0, [r7, #16]
 8010722:	f7ff fb90 	bl	800fe46 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8010726:	4603      	mov	r3, r0
 8010728:	4619      	mov	r1, r3
 801072a:	4620      	mov	r0, r4
 801072c:	f000 fb47 	bl	8010dbe <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__temp);
 8010730:	6939      	ldr	r1, [r7, #16]
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 fb5b 	bl	8010dee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      while (__curr != __last)
 8010738:	e7e5      	b.n	8010706 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x12>
      __pos->_M_next = __last;
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	601a      	str	r2, [r3, #0]
      return __last;
 8010740:	687b      	ldr	r3, [r7, #4]
    }
 8010742:	4618      	mov	r0, r3
 8010744:	371c      	adds	r7, #28
 8010746:	46bd      	mov	sp, r7
 8010748:	bd90      	pop	{r4, r7, pc}

0801074a <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 801074a:	b480      	push	{r7}
 801074c:	b083      	sub	sp, #12
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr

08010762 <_ZNSt14_Fwd_list_nodeIhEC1Ev>:
      _Fwd_list_node() = default;
 8010762:	b580      	push	{r7, lr}
 8010764:	b082      	sub	sp, #8
 8010766:	af00      	add	r7, sp, #0
 8010768:	6078      	str	r0, [r7, #4]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4618      	mov	r0, r3
 801076e:	f7ff ff9a 	bl	80106a6 <_ZNSt19_Fwd_list_node_baseC1Ev>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4618      	mov	r0, r3
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 801077c:	b5b0      	push	{r4, r5, r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f001 fa8c 	bl	8011ca4 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 801078c:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	4619      	mov	r1, r3
 8010792:	2008      	movs	r0, #8
 8010794:	f7fd fc58 	bl	800e048 <_ZnwjPv>
 8010798:	4603      	mov	r3, r0
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff ffe1 	bl	8010762 <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f000 fb01 	bl	8010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80107a6:	4604      	mov	r4, r0
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f7ff fb4c 	bl	800fe46 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 80107ae:	4605      	mov	r5, r0
 80107b0:	6838      	ldr	r0, [r7, #0]
 80107b2:	f001 fa8c 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80107b6:	4603      	mov	r3, r0
 80107b8:	461a      	mov	r2, r3
 80107ba:	4629      	mov	r1, r5
 80107bc:	4620      	mov	r0, r4
 80107be:	f001 faa7 	bl	8011d10 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>
	  return __node;
 80107c2:	68fb      	ldr	r3, [r7, #12]
	}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bdb0      	pop	{r4, r5, r7, pc}

080107cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4618      	mov	r0, r3
 80107d8:	370c      	adds	r7, #12
 80107da:	46bd      	mov	sp, r7
 80107dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e0:	4770      	bx	lr

080107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80107e2:	b480      	push	{r7}
 80107e4:	b083      	sub	sp, #12
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	4618      	mov	r0, r3
 80107f0:	370c      	adds	r7, #12
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr

080107fa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	4618      	mov	r0, r3
 8010808:	370c      	adds	r7, #12
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8010812:	b580      	push	{r7, lr}
 8010814:	b082      	sub	sp, #8
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801081c:	6839      	ldr	r1, [r7, #0]
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f001 fa88 	bl	8011d34 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8010824:	6839      	ldr	r1, [r7, #0]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f001 fa99 	bl	8011d5e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 801082c:	bf00      	nop
 801082e:	3708      	adds	r7, #8
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEEC1Ev>:
 8010834:	b480      	push	{r7}
 8010836:	b083      	sub	sp, #12
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	4618      	mov	r0, r3
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801084a:	b480      	push	{r7}
 801084c:	b083      	sub	sp, #12
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68db      	ldr	r3, [r3, #12]
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr

08010862 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010862:	b480      	push	{r7}
 8010864:	b083      	sub	sp, #12
 8010866:	af00      	add	r7, sp, #0
 8010868:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	689b      	ldr	r3, [r3, #8]
 801086e:	4618      	mov	r0, r3
 8010870:	370c      	adds	r7, #12
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr

0801087a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801087a:	b580      	push	{r7, lr}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8010884:	6839      	ldr	r1, [r7, #0]
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f001 fa7b 	bl	8011d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f001 fa8c 	bl	8011dac <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	689b      	ldr	r3, [r3, #8]
      }
 80108a8:	4618      	mov	r0, r3
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	3304      	adds	r3, #4
 80108c0:	4618      	mov	r0, r3
 80108c2:	370c      	adds	r7, #12
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80108cc:	b590      	push	{r4, r7, lr}
 80108ce:	b087      	sub	sp, #28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	607a      	str	r2, [r7, #4]
 80108d8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d01b      	beq.n	8010918 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80108e0:	68fc      	ldr	r4, [r7, #12]
 80108e2:	68b8      	ldr	r0, [r7, #8]
 80108e4:	f000 feba 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80108e8:	4603      	mov	r3, r0
 80108ea:	683a      	ldr	r2, [r7, #0]
 80108ec:	4619      	mov	r1, r3
 80108ee:	4620      	mov	r0, r4
 80108f0:	f7ff fd17 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80108f4:	4603      	mov	r3, r0
 80108f6:	f083 0301 	eor.w	r3, r3, #1
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d006      	beq.n	801090e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	607b      	str	r3, [r7, #4]
 8010904:	68b8      	ldr	r0, [r7, #8]
 8010906:	f001 fa63 	bl	8011dd0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801090a:	60b8      	str	r0, [r7, #8]
 801090c:	e7e5      	b.n	80108da <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 801090e:	68b8      	ldr	r0, [r7, #8]
 8010910:	f001 fa6a 	bl	8011de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8010914:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8010916:	e7e0      	b.n	80108da <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS2_+0xe>
      return const_iterator(__y);
 8010918:	f107 0314 	add.w	r3, r7, #20
 801091c:	6879      	ldr	r1, [r7, #4]
 801091e:	4618      	mov	r0, r3
 8010920:	f000 f811 	bl	8010946 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1EPKSt18_Rb_tree_node_base>
 8010924:	697b      	ldr	r3, [r7, #20]
    }
 8010926:	4618      	mov	r0, r3
 8010928:	371c      	adds	r7, #28
 801092a:	46bd      	mov	sp, r7
 801092c:	bd90      	pop	{r4, r7, pc}

0801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801092e:	b580      	push	{r7, lr}
 8010930:	b082      	sub	sp, #8
 8010932:	af00      	add	r7, sp, #0
 8010934:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f000 fe90 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801093c:	4603      	mov	r3, r0
 801093e:	4618      	mov	r0, r3
 8010940:	3708      	adds	r7, #8
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010946:	b480      	push	{r7}
 8010948:	b083      	sub	sp, #12
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
 801094e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	683a      	ldr	r2, [r7, #0]
 8010954:	601a      	str	r2, [r3, #0]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4618      	mov	r0, r3
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f001 fa47 	bl	8011e00 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>
 8010972:	4603      	mov	r3, r0
 8010974:	4618      	mov	r0, r3
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}

0801097c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801097c:	b590      	push	{r4, r7, lr}
 801097e:	b083      	sub	sp, #12
 8010980:	af00      	add	r7, sp, #0
 8010982:	6078      	str	r0, [r7, #4]
 8010984:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7ff f9b9 	bl	800fcfe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801098c:	4604      	mov	r4, r0
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f001 fa41 	bl	8011e16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010994:	4602      	mov	r2, r0
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	4621      	mov	r1, r4
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f001 fa47 	bl	8011e2e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 80109a0:	4603      	mov	r3, r0
 80109a2:	4618      	mov	r0, r3
 80109a4:	370c      	adds	r7, #12
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd90      	pop	{r4, r7, pc}

080109aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	1d1a      	adds	r2, r3, #4
 80109b6:	f107 030c 	add.w	r3, r7, #12
 80109ba:	4611      	mov	r1, r2
 80109bc:	4618      	mov	r0, r3
 80109be:	f000 f9e4 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3710      	adds	r7, #16
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 80109cc:	b480      	push	{r7}
 80109ce:	b083      	sub	sp, #12
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80109d4:	bf00      	nop
 80109d6:	4618      	mov	r0, r3
 80109d8:	370c      	adds	r7, #12
 80109da:	46bd      	mov	sp, r7
 80109dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e0:	4770      	bx	lr

080109e2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr()
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b082      	sub	sp, #8
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3310      	adds	r3, #16
 80109ee:	4618      	mov	r0, r3
 80109f0:	f001 fa4e 	bl	8011e90 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 80109f4:	4603      	mov	r3, r0
 80109f6:	4618      	mov	r0, r3
 80109f8:	3708      	adds	r7, #8
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}

080109fe <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80109fe:	b580      	push	{r7, lr}
 8010a00:	b082      	sub	sp, #8
 8010a02:	af00      	add	r7, sp, #0
 8010a04:	6078      	str	r0, [r7, #4]
 8010a06:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6839      	ldr	r1, [r7, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f001 fa4b 	bl	8011ea8 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4618      	mov	r0, r3
 8010a28:	370c      	adds	r7, #12
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a30:	4770      	bx	lr

08010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a32:	b480      	push	{r7}
 8010a34:	b083      	sub	sp, #12
 8010a36:	af00      	add	r7, sp, #0
 8010a38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	370c      	adds	r7, #12
 8010a40:	46bd      	mov	sp, r7
 8010a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a46:	4770      	bx	lr

08010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010a5e:	b5b0      	push	{r4, r5, r7, lr}
 8010a60:	b088      	sub	sp, #32
 8010a62:	af02      	add	r7, sp, #8
 8010a64:	60f8      	str	r0, [r7, #12]
 8010a66:	60b9      	str	r1, [r7, #8]
 8010a68:	607a      	str	r2, [r7, #4]
 8010a6a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f001 fa2a 	bl	8011ec6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 8010a72:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010a74:	68b8      	ldr	r0, [r7, #8]
 8010a76:	f7ff ffd1 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010a7a:	4604      	mov	r4, r0
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f7ff ffd8 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010a82:	4605      	mov	r5, r0
 8010a84:	6838      	ldr	r0, [r7, #0]
 8010a86:	f7ff ffdf 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	9300      	str	r3, [sp, #0]
 8010a8e:	462b      	mov	r3, r5
 8010a90:	4622      	mov	r2, r4
 8010a92:	6979      	ldr	r1, [r7, #20]
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f001 fa27 	bl	8011ee8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8010a9a:	697b      	ldr	r3, [r7, #20]
	}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3718      	adds	r7, #24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bdb0      	pop	{r4, r5, r7, pc}

08010aa4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010aa4:	b590      	push	{r4, r7, lr}
 8010aa6:	b08d      	sub	sp, #52	; 0x34
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
 8010ab0:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8010ab2:	1d3b      	adds	r3, r7, #4
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f001 fa44 	bl	8011f42 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>
 8010aba:	4603      	mov	r3, r0
 8010abc:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8010abe:	69bc      	ldr	r4, [r7, #24]
 8010ac0:	68b8      	ldr	r0, [r7, #8]
 8010ac2:	f001 f9a8 	bl	8011e16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	429c      	cmp	r4, r3
 8010aca:	bf0c      	ite	eq
 8010acc:	2301      	moveq	r3, #1
 8010ace:	2300      	movne	r3, #0
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d030      	beq.n	8010b38 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 8010ad6:	68b8      	ldr	r0, [r7, #8]
 8010ad8:	f001 fa44 	bl	8011f64 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 8010adc:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d013      	beq.n	8010b0a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8010ae2:	68bc      	ldr	r4, [r7, #8]
 8010ae4:	68b8      	ldr	r0, [r7, #8]
 8010ae6:	f001 fa49 	bl	8011f7c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010aea:	4603      	mov	r3, r0
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fbf8 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010af4:	4603      	mov	r3, r0
 8010af6:	683a      	ldr	r2, [r7, #0]
 8010af8:	4619      	mov	r1, r3
 8010afa:	4620      	mov	r0, r4
 8010afc:	f7ff f9fc 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d001      	beq.n	8010b0a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e000      	b.n	8010b0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 8010b0a:	2300      	movs	r3, #0
	  if (size() > 0
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d00c      	beq.n	8010b2a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8010b10:	2300      	movs	r3, #0
 8010b12:	61fb      	str	r3, [r7, #28]
 8010b14:	68b8      	ldr	r0, [r7, #8]
 8010b16:	f001 fa31 	bl	8011f7c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010b1a:	4602      	mov	r2, r0
 8010b1c:	f107 031c 	add.w	r3, r7, #28
 8010b20:	4619      	mov	r1, r3
 8010b22:	68f8      	ldr	r0, [r7, #12]
 8010b24:	f001 fa36 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010b28:	e0db      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	683a      	ldr	r2, [r7, #0]
 8010b2e:	68b9      	ldr	r1, [r7, #8]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f001 fa45 	bl	8011fc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010b36:	e0d4      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8010b38:	68bc      	ldr	r4, [r7, #8]
 8010b3a:	69bb      	ldr	r3, [r7, #24]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f000 fbd1 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010b42:	4603      	mov	r3, r0
 8010b44:	461a      	mov	r2, r3
 8010b46:	6839      	ldr	r1, [r7, #0]
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f7ff f9d5 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d057      	beq.n	8010c04 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8010b58:	69bc      	ldr	r4, [r7, #24]
 8010b5a:	68b8      	ldr	r0, [r7, #8]
 8010b5c:	f001 fab5 	bl	80120ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010b60:	4603      	mov	r3, r0
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	429c      	cmp	r4, r3
 8010b66:	bf0c      	ite	eq
 8010b68:	2301      	moveq	r3, #1
 8010b6a:	2300      	movne	r3, #0
 8010b6c:	b2db      	uxtb	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00d      	beq.n	8010b8e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8010b72:	68b8      	ldr	r0, [r7, #8]
 8010b74:	f001 faa9 	bl	80120ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010b78:	4604      	mov	r4, r0
 8010b7a:	68b8      	ldr	r0, [r7, #8]
 8010b7c:	f001 faa5 	bl	80120ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8010b80:	4603      	mov	r3, r0
 8010b82:	461a      	mov	r2, r3
 8010b84:	4621      	mov	r1, r4
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f001 faab 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010b8c:	e0a9      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8010b8e:	68bc      	ldr	r4, [r7, #8]
 8010b90:	f107 0314 	add.w	r3, r7, #20
 8010b94:	4618      	mov	r0, r3
 8010b96:	f001 fabd 	bl	8012114 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f000 fba0 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	683a      	ldr	r2, [r7, #0]
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4620      	mov	r0, r4
 8010bac:	f7ff f9a4 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d01f      	beq.n	8010bf6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f7ff fe12 	bl	80107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	bf0c      	ite	eq
 8010bc4:	2301      	moveq	r3, #1
 8010bc6:	2300      	movne	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d00a      	beq.n	8010be4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8010bce:	2300      	movs	r3, #0
 8010bd0:	623b      	str	r3, [r7, #32]
 8010bd2:	f107 0214 	add.w	r2, r7, #20
 8010bd6:	f107 0320 	add.w	r3, r7, #32
 8010bda:	4619      	mov	r1, r3
 8010bdc:	68f8      	ldr	r0, [r7, #12]
 8010bde:	f001 f9d9 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010be2:	e07e      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8010be4:	f107 0218 	add.w	r2, r7, #24
 8010be8:	f107 0318 	add.w	r3, r7, #24
 8010bec:	4619      	mov	r1, r3
 8010bee:	68f8      	ldr	r0, [r7, #12]
 8010bf0:	f001 fa77 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010bf4:	e075      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	683a      	ldr	r2, [r7, #0]
 8010bfa:	68b9      	ldr	r1, [r7, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f001 f9df 	bl	8011fc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010c02:	e06e      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8010c04:	68bc      	ldr	r4, [r7, #8]
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f000 fb6b 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	683a      	ldr	r2, [r7, #0]
 8010c12:	4619      	mov	r1, r3
 8010c14:	4620      	mov	r0, r4
 8010c16:	f7ff f96f 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d056      	beq.n	8010cce <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 8010c20:	69bb      	ldr	r3, [r7, #24]
 8010c22:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8010c24:	69bc      	ldr	r4, [r7, #24]
 8010c26:	68b8      	ldr	r0, [r7, #8]
 8010c28:	f001 f9a8 	bl	8011f7c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	429c      	cmp	r4, r3
 8010c32:	bf0c      	ite	eq
 8010c34:	2301      	moveq	r3, #1
 8010c36:	2300      	movne	r3, #0
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00c      	beq.n	8010c58 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8010c3e:	2300      	movs	r3, #0
 8010c40:	627b      	str	r3, [r7, #36]	; 0x24
 8010c42:	68b8      	ldr	r0, [r7, #8]
 8010c44:	f001 f99a 	bl	8011f7c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8010c48:	4602      	mov	r2, r0
 8010c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c4e:	4619      	mov	r1, r3
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f001 f99f 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010c56:	e044      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8010c58:	68bc      	ldr	r4, [r7, #8]
 8010c5a:	f107 0310 	add.w	r3, r7, #16
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f001 fa69 	bl	8012136 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>
 8010c64:	4603      	mov	r3, r0
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 fb3b 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	461a      	mov	r2, r3
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	4620      	mov	r0, r4
 8010c76:	f7ff f93f 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d01f      	beq.n	8010cc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7ff fdad 	bl	80107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bf0c      	ite	eq
 8010c8e:	2301      	moveq	r3, #1
 8010c90:	2300      	movne	r3, #0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d00a      	beq.n	8010cae <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8010c98:	2300      	movs	r3, #0
 8010c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c9c:	f107 0218 	add.w	r2, r7, #24
 8010ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	68f8      	ldr	r0, [r7, #12]
 8010ca8:	f001 f974 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010cac:	e019      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8010cae:	f107 0210 	add.w	r2, r7, #16
 8010cb2:	f107 0310 	add.w	r3, r7, #16
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f001 fa12 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8010cbe:	e010      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 f97a 	bl	8011fc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8010ccc:	e009      	b.n	8010ce2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8010cce:	2300      	movs	r3, #0
 8010cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cd2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010cd6:	f107 0318 	add.w	r3, r7, #24
 8010cda:	4619      	mov	r1, r3
 8010cdc:	68f8      	ldr	r0, [r7, #12]
 8010cde:	f001 fa3b 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8010ce2:	68f8      	ldr	r0, [r7, #12]
 8010ce4:	3734      	adds	r7, #52	; 0x34
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd90      	pop	{r4, r7, pc}

08010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b084      	sub	sp, #16
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 fa46 	bl	8012184 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	f107 030c 	add.w	r3, r7, #12
 8010cfe:	4611      	mov	r1, r2
 8010d00:	4618      	mov	r0, r3
 8010d02:	f001 fa4d 	bl	80121a0 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>
 8010d06:	4603      	mov	r3, r0
      }
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010d10:	b5b0      	push	{r4, r5, r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d117      	bne.n	8010d54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f001 f876 	bl	8011e16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d010      	beq.n	8010d54 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8010d32:	68fc      	ldr	r4, [r7, #12]
 8010d34:	6838      	ldr	r0, [r7, #0]
 8010d36:	f7ff ffd8 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8010d3a:	4605      	mov	r5, r0
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 fad1 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010d42:	4603      	mov	r3, r0
 8010d44:	461a      	mov	r2, r3
 8010d46:	4629      	mov	r1, r5
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f7ff f8d5 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8010d54:	2301      	movs	r3, #1
 8010d56:	e000      	b.n	8010d5a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8010d58:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8010d5a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8010d60:	7df8      	ldrb	r0, [r7, #23]
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	6839      	ldr	r1, [r7, #0]
 8010d66:	f009 fd88 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	695b      	ldr	r3, [r3, #20]
 8010d6e:	1c5a      	adds	r2, r3, #1
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8010d74:	f107 0310 	add.w	r3, r7, #16
 8010d78:	6839      	ldr	r1, [r7, #0]
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f000 f805 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8010d80:	693b      	ldr	r3, [r7, #16]
    }
 8010d82:	4618      	mov	r0, r3
 8010d84:	3718      	adds	r7, #24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bdb0      	pop	{r4, r5, r7, pc}

08010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8010d8a:	b480      	push	{r7}
 8010d8c:	b083      	sub	sp, #12
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	6078      	str	r0, [r7, #4]
 8010d92:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	683a      	ldr	r2, [r7, #0]
 8010d98:	601a      	str	r2, [r3, #0]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr

08010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() noexcept
 8010da8:	b480      	push	{r7}
 8010daa:	b083      	sub	sp, #12
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4618      	mov	r0, r3
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b082      	sub	sp, #8
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8010dc8:	6838      	ldr	r0, [r7, #0]
 8010dca:	f001 f9f5 	bl	80121b8 <_ZSt10destroy_atIhEvPT_>
	}
 8010dce:	bf00      	nop
 8010dd0:	3708      	adds	r7, #8
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b082      	sub	sp, #8
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f001 f9f4 	bl	80121cc <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 8010de4:	4603      	mov	r3, r0
 8010de6:	4618      	mov	r0, r3
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>:
      _M_put_node(_Node* __p)
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b084      	sub	sp, #16
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	6078      	str	r0, [r7, #4]
 8010df6:	6039      	str	r1, [r7, #0]
	auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);
 8010df8:	6838      	ldr	r0, [r7, #0]
 8010dfa:	f7ff ffec 	bl	8010dd6 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>
 8010dfe:	60f8      	str	r0, [r7, #12]
	_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7ff ffd1 	bl	8010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8010e06:	4603      	mov	r3, r0
 8010e08:	2201      	movs	r2, #1
 8010e0a:	68f9      	ldr	r1, [r7, #12]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f001 f9e9 	bl	80121e4 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>
      }
 8010e12:	bf00      	nop
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}

08010e1a <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8010e1a:	b580      	push	{r7, lr}
 8010e1c:	b084      	sub	sp, #16
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	60f8      	str	r0, [r7, #12]
 8010e22:	7239      	strb	r1, [r7, #8]
 8010e24:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff f8fa 	bl	8010020 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e2c:	4603      	mov	r3, r0
 8010e2e:	781a      	ldrb	r2, [r3, #0]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	701a      	strb	r2, [r3, #0]
	    { }
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	4618      	mov	r0, r3
 8010e38:	3710      	adds	r7, #16
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8010e3e:	b5b0      	push	{r4, r5, r7, lr}
 8010e40:	b084      	sub	sp, #16
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	60f8      	str	r0, [r7, #12]
 8010e46:	7239      	strb	r1, [r7, #8]
 8010e48:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8010e4a:	68fc      	ldr	r4, [r7, #12]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f7ff f8e7 	bl	8010020 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8010e52:	4603      	mov	r3, r0
 8010e54:	461a      	mov	r2, r3
 8010e56:	4629      	mov	r1, r5
 8010e58:	4620      	mov	r0, r4
 8010e5a:	f7ff ffde 	bl	8010e1a <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	2201      	movs	r2, #1
 8010e62:	705a      	strb	r2, [r3, #1]
	{ }
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	4618      	mov	r0, r3
 8010e68:	3710      	adds	r7, #16
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bdb0      	pop	{r4, r5, r7, pc}

08010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8010e6e:	b580      	push	{r7, lr}
 8010e70:	b082      	sub	sp, #8
 8010e72:	af00      	add	r7, sp, #0
 8010e74:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f000 fe96 	bl	8011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}

08010e86 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8010e86:	b590      	push	{r4, r7, lr}
 8010e88:	b083      	sub	sp, #12
 8010e8a:	af00      	add	r7, sp, #0
 8010e8c:	6078      	str	r0, [r7, #4]
 8010e8e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7fe ff6b 	bl	800fd6c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8010e96:	4604      	mov	r4, r0
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f001 f9c2 	bl	8012222 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	4621      	mov	r1, r4
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f001 f9c8 	bl	801223a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	4618      	mov	r0, r3
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}

08010eb4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	1d1a      	adds	r2, r3, #4
 8010ec0:	f107 030c 	add.w	r3, r7, #12
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 f9b4 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8010ede:	bf00      	nop
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>:
      _M_valptr()
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	3310      	adds	r3, #16
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f001 f9cf 	bl	801229c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>
 8010efe:	4603      	mov	r3, r0
 8010f00:	4618      	mov	r0, r3
 8010f02:	3708      	adds	r7, #8
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8010f08:	b5b0      	push	{r4, r5, r7, lr}
 8010f0a:	b088      	sub	sp, #32
 8010f0c:	af02      	add	r7, sp, #8
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
 8010f14:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8010f16:	68f8      	ldr	r0, [r7, #12]
 8010f18:	f001 f9cc 	bl	80122b4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 8010f1c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8010f1e:	68b8      	ldr	r0, [r7, #8]
 8010f20:	f7ff fd7c 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010f24:	4604      	mov	r4, r0
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f7ff fd83 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	6838      	ldr	r0, [r7, #0]
 8010f30:	f7ff fd8a 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010f34:	4603      	mov	r3, r0
 8010f36:	9300      	str	r3, [sp, #0]
 8010f38:	462b      	mov	r3, r5
 8010f3a:	4622      	mov	r2, r4
 8010f3c:	6979      	ldr	r1, [r7, #20]
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f001 f9c9 	bl	80122d6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8010f44:	697b      	ldr	r3, [r7, #20]
	}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3718      	adds	r7, #24
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bdb0      	pop	{r4, r5, r7, pc}

08010f4e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010f4e:	b590      	push	{r4, r7, lr}
 8010f50:	b08d      	sub	sp, #52	; 0x34
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	60f8      	str	r0, [r7, #12]
 8010f56:	60b9      	str	r1, [r7, #8]
 8010f58:	607a      	str	r2, [r7, #4]
 8010f5a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8010f5c:	1d3b      	adds	r3, r7, #4
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f001 f9e6 	bl	8012330 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEE13_M_const_castEv>
 8010f64:	4603      	mov	r3, r0
 8010f66:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8010f68:	69bc      	ldr	r4, [r7, #24]
 8010f6a:	68b8      	ldr	r0, [r7, #8]
 8010f6c:	f001 f959 	bl	8012222 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8010f70:	4603      	mov	r3, r0
 8010f72:	429c      	cmp	r4, r3
 8010f74:	bf0c      	ite	eq
 8010f76:	2301      	moveq	r3, #1
 8010f78:	2300      	movne	r3, #0
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d030      	beq.n	8010fe2 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8010f80:	68b8      	ldr	r0, [r7, #8]
 8010f82:	f001 f9e6 	bl	8012352 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 8010f86:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d013      	beq.n	8010fb4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8010f8c:	68bc      	ldr	r4, [r7, #8]
 8010f8e:	68b8      	ldr	r0, [r7, #8]
 8010f90:	f001 f9eb 	bl	801236a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8010f94:	4603      	mov	r3, r0
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f000 fc18 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	683a      	ldr	r2, [r7, #0]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f7fe ffa7 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d001      	beq.n	8010fb4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	e000      	b.n	8010fb6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8010fb4:	2300      	movs	r3, #0
	  if (size() > 0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00c      	beq.n	8010fd4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8010fba:	2300      	movs	r3, #0
 8010fbc:	61fb      	str	r3, [r7, #28]
 8010fbe:	68b8      	ldr	r0, [r7, #8]
 8010fc0:	f001 f9d3 	bl	801236a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	f107 031c 	add.w	r3, r7, #28
 8010fca:	4619      	mov	r1, r3
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f000 ffe1 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8010fd2:	e0db      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	683a      	ldr	r2, [r7, #0]
 8010fd8:	68b9      	ldr	r1, [r7, #8]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f001 f9d1 	bl	8012382 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8010fe0:	e0d4      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8010fe2:	68bc      	ldr	r4, [r7, #8]
 8010fe4:	69bb      	ldr	r3, [r7, #24]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f000 fbf1 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010fec:	4603      	mov	r3, r0
 8010fee:	461a      	mov	r2, r3
 8010ff0:	6839      	ldr	r1, [r7, #0]
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7fe ff80 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d057      	beq.n	80110ae <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8010ffe:	69bb      	ldr	r3, [r7, #24]
 8011000:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8011002:	69bc      	ldr	r4, [r7, #24]
 8011004:	68b8      	ldr	r0, [r7, #8]
 8011006:	f001 fa41 	bl	801248c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801100a:	4603      	mov	r3, r0
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	429c      	cmp	r4, r3
 8011010:	bf0c      	ite	eq
 8011012:	2301      	moveq	r3, #1
 8011014:	2300      	movne	r3, #0
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	d00d      	beq.n	8011038 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801101c:	68b8      	ldr	r0, [r7, #8]
 801101e:	f001 fa35 	bl	801248c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8011022:	4604      	mov	r4, r0
 8011024:	68b8      	ldr	r0, [r7, #8]
 8011026:	f001 fa31 	bl	801248c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801102a:	4603      	mov	r3, r0
 801102c:	461a      	mov	r2, r3
 801102e:	4621      	mov	r1, r4
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f001 f856 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011036:	e0a9      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011038:	68bc      	ldr	r4, [r7, #8]
 801103a:	f107 0314 	add.w	r3, r7, #20
 801103e:	4618      	mov	r0, r3
 8011040:	f001 fa30 	bl	80124a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEmmEv>
 8011044:	4603      	mov	r3, r0
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4618      	mov	r0, r3
 801104a:	f000 fbc0 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801104e:	4603      	mov	r3, r0
 8011050:	683a      	ldr	r2, [r7, #0]
 8011052:	4619      	mov	r1, r3
 8011054:	4620      	mov	r0, r4
 8011056:	f7fe ff4f 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 801105a:	4603      	mov	r3, r0
 801105c:	2b00      	cmp	r3, #0
 801105e:	d01f      	beq.n	80110a0 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff fbf1 	bl	801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	bf0c      	ite	eq
 801106e:	2301      	moveq	r3, #1
 8011070:	2300      	movne	r3, #0
 8011072:	b2db      	uxtb	r3, r3
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00a      	beq.n	801108e <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8011078:	2300      	movs	r3, #0
 801107a:	623b      	str	r3, [r7, #32]
 801107c:	f107 0214 	add.w	r2, r7, #20
 8011080:	f107 0320 	add.w	r3, r7, #32
 8011084:	4619      	mov	r1, r3
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f000 ff84 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801108c:	e07e      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801108e:	f107 0218 	add.w	r2, r7, #24
 8011092:	f107 0318 	add.w	r3, r7, #24
 8011096:	4619      	mov	r1, r3
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f001 f822 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801109e:	e075      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	68b9      	ldr	r1, [r7, #8]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f001 f96b 	bl	8012382 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 80110ac:	e06e      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80110ae:	68bc      	ldr	r4, [r7, #8]
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 fb8b 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80110b8:	4603      	mov	r3, r0
 80110ba:	683a      	ldr	r2, [r7, #0]
 80110bc:	4619      	mov	r1, r3
 80110be:	4620      	mov	r0, r4
 80110c0:	f7fe ff1a 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 80110c4:	4603      	mov	r3, r0
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d056      	beq.n	8011178 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 80110ca:	69bb      	ldr	r3, [r7, #24]
 80110cc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80110ce:	69bc      	ldr	r4, [r7, #24]
 80110d0:	68b8      	ldr	r0, [r7, #8]
 80110d2:	f001 f94a 	bl	801236a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80110d6:	4603      	mov	r3, r0
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	429c      	cmp	r4, r3
 80110dc:	bf0c      	ite	eq
 80110de:	2301      	moveq	r3, #1
 80110e0:	2300      	movne	r3, #0
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d00c      	beq.n	8011102 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80110e8:	2300      	movs	r3, #0
 80110ea:	627b      	str	r3, [r7, #36]	; 0x24
 80110ec:	68b8      	ldr	r0, [r7, #8]
 80110ee:	f001 f93c 	bl	801236a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80110f2:	4602      	mov	r2, r0
 80110f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80110f8:	4619      	mov	r1, r3
 80110fa:	68f8      	ldr	r0, [r7, #12]
 80110fc:	f000 ff4a 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011100:	e044      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8011102:	68bc      	ldr	r4, [r7, #8]
 8011104:	f107 0310 	add.w	r3, r7, #16
 8011108:	4618      	mov	r0, r3
 801110a:	f001 f9dc 	bl	80124c6 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEppEv>
 801110e:	4603      	mov	r3, r0
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4618      	mov	r0, r3
 8011114:	f000 fb5b 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011118:	4603      	mov	r3, r0
 801111a:	461a      	mov	r2, r3
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	4620      	mov	r0, r4
 8011120:	f7fe feea 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d01f      	beq.n	801116a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff fb8c 	bl	801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	bf0c      	ite	eq
 8011138:	2301      	moveq	r3, #1
 801113a:	2300      	movne	r3, #0
 801113c:	b2db      	uxtb	r3, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00a      	beq.n	8011158 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8011142:	2300      	movs	r3, #0
 8011144:	62bb      	str	r3, [r7, #40]	; 0x28
 8011146:	f107 0218 	add.w	r2, r7, #24
 801114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801114e:	4619      	mov	r1, r3
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f000 ff1f 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011156:	e019      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011158:	f107 0210 	add.w	r2, r7, #16
 801115c:	f107 0310 	add.w	r3, r7, #16
 8011160:	4619      	mov	r1, r3
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f000 ffbd 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011168:	e010      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	683a      	ldr	r2, [r7, #0]
 801116e:	68b9      	ldr	r1, [r7, #8]
 8011170:	4618      	mov	r0, r3
 8011172:	f001 f906 	bl	8012382 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011176:	e009      	b.n	801118c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8011178:	2300      	movs	r3, #0
 801117a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801117c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011180:	f107 0318 	add.w	r3, r7, #24
 8011184:	4619      	mov	r1, r3
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f000 ffe6 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801118c:	68f8      	ldr	r0, [r7, #12]
 801118e:	3734      	adds	r7, #52	; 0x34
 8011190:	46bd      	mov	sp, r7
 8011192:	bd90      	pop	{r4, r7, pc}

08011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f001 f9a3 	bl	80124e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>
 80111a2:	4602      	mov	r2, r0
 80111a4:	f107 030c 	add.w	r3, r7, #12
 80111a8:	4611      	mov	r1, r2
 80111aa:	4618      	mov	r0, r3
 80111ac:	f001 f9aa 	bl	8012504 <_ZNKSt10_Select1stISt4pairIKhS0_I3PinS2_EEEclERKS4_>
 80111b0:	4603      	mov	r3, r0
      }
 80111b2:	4618      	mov	r0, r3
 80111b4:	3710      	adds	r7, #16
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80111ba:	b5b0      	push	{r4, r5, r7, lr}
 80111bc:	b086      	sub	sp, #24
 80111be:	af00      	add	r7, sp, #0
 80111c0:	60f8      	str	r0, [r7, #12]
 80111c2:	60b9      	str	r1, [r7, #8]
 80111c4:	607a      	str	r2, [r7, #4]
 80111c6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d117      	bne.n	80111fe <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80111ce:	68f8      	ldr	r0, [r7, #12]
 80111d0:	f001 f827 	bl	8012222 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80111d4:	4602      	mov	r2, r0
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4293      	cmp	r3, r2
 80111da:	d010      	beq.n	80111fe <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80111dc:	68fc      	ldr	r4, [r7, #12]
 80111de:	6838      	ldr	r0, [r7, #0]
 80111e0:	f7ff ffd8 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80111e4:	4605      	mov	r5, r0
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 faf1 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	4629      	mov	r1, r5
 80111f2:	4620      	mov	r0, r4
 80111f4:	f7fe fe80 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d001      	beq.n	8011202 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80111fe:	2301      	movs	r3, #1
 8011200:	e000      	b.n	8011204 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8011202:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011204:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801120a:	7df8      	ldrb	r0, [r7, #23]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	6839      	ldr	r1, [r7, #0]
 8011210:	f009 fb33 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	695b      	ldr	r3, [r3, #20]
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801121e:	f107 0310 	add.w	r3, r7, #16
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	4618      	mov	r0, r3
 8011226:	f000 f805 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 801122a:	693b      	ldr	r3, [r7, #16]
    }
 801122c:	4618      	mov	r0, r3
 801122e:	3718      	adds	r7, #24
 8011230:	46bd      	mov	sp, r7
 8011232:	bdb0      	pop	{r4, r5, r7, pc}

08011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	601a      	str	r2, [r3, #0]
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	689b      	ldr	r3, [r3, #8]
      }
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3304      	adds	r3, #4
 8011276:	4618      	mov	r0, r3
 8011278:	370c      	adds	r7, #12
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr

08011282 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011282:	b590      	push	{r4, r7, lr}
 8011284:	b087      	sub	sp, #28
 8011286:	af00      	add	r7, sp, #0
 8011288:	60f8      	str	r0, [r7, #12]
 801128a:	60b9      	str	r1, [r7, #8]
 801128c:	607a      	str	r2, [r7, #4]
 801128e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d01b      	beq.n	80112ce <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011296:	68fc      	ldr	r4, [r7, #12]
 8011298:	68b8      	ldr	r0, [r7, #8]
 801129a:	f7ff fd26 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801129e:	4603      	mov	r3, r0
 80112a0:	683a      	ldr	r2, [r7, #0]
 80112a2:	4619      	mov	r1, r3
 80112a4:	4620      	mov	r0, r4
 80112a6:	f7fe fe27 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 80112aa:	4603      	mov	r3, r0
 80112ac:	f083 0301 	eor.w	r3, r3, #1
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d006      	beq.n	80112c4 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	607b      	str	r3, [r7, #4]
 80112ba:	68b8      	ldr	r0, [r7, #8]
 80112bc:	f001 f92e 	bl	801251c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80112c0:	60b8      	str	r0, [r7, #8]
 80112c2:	e7e5      	b.n	8011290 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80112c4:	68b8      	ldr	r0, [r7, #8]
 80112c6:	f001 f935 	bl	8012534 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80112ca:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80112cc:	e7e0      	b.n	8011290 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80112ce:	f107 0314 	add.w	r3, r7, #20
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f000 f811 	bl	80112fc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>
 80112da:	697b      	ldr	r3, [r7, #20]
    }
 80112dc:	4618      	mov	r0, r3
 80112de:	371c      	adds	r7, #28
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd90      	pop	{r4, r7, pc}

080112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b082      	sub	sp, #8
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7ff fcfc 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4618      	mov	r0, r3
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80112fc:	b480      	push	{r7}
 80112fe:	b083      	sub	sp, #12
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	683a      	ldr	r2, [r7, #0]
 801130a:	601a      	str	r2, [r3, #0]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	4618      	mov	r0, r3
 8011310:	370c      	adds	r7, #12
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr

0801131a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 801131a:	b590      	push	{r4, r7, lr}
 801131c:	b083      	sub	sp, #12
 801131e:	af00      	add	r7, sp, #0
 8011320:	6078      	str	r0, [r7, #4]
 8011322:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f001 f911 	bl	801254c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 801132a:	4604      	mov	r4, r0
 801132c:	6878      	ldr	r0, [r7, #4]
 801132e:	f001 f919 	bl	8012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8011332:	4602      	mov	r2, r0
 8011334:	683b      	ldr	r3, [r7, #0]
 8011336:	4621      	mov	r1, r4
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f001 f91f 	bl	801257c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_>
 801133e:	4603      	mov	r3, r0
 8011340:	4618      	mov	r0, r3
 8011342:	370c      	adds	r7, #12
 8011344:	46bd      	mov	sp, r7
 8011346:	bd90      	pop	{r4, r7, pc}

08011348 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	1d1a      	adds	r2, r3, #4
 8011354:	f107 030c 	add.w	r3, r7, #12
 8011358:	4611      	mov	r1, r2
 801135a:	4618      	mov	r0, r3
 801135c:	f000 f9df 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8key_compEv>:
      key_comp() const
 801136a:	b480      	push	{r7}
 801136c:	b083      	sub	sp, #12
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8011372:	bf00      	nop
 8011374:	4618      	mov	r0, r3
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr

08011380 <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	3310      	adds	r3, #16
 801138c:	4618      	mov	r0, r3
 801138e:	f001 f926 	bl	80125de <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 8011392:	4603      	mov	r3, r0
 8011394:	4618      	mov	r0, r3
 8011396:	3708      	adds	r7, #8
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>:
      constexpr _Tuple_impl(const _Head& __head)
 801139c:	b580      	push	{r7, lr}
 801139e:	b082      	sub	sp, #8
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f001 f923 	bl	80125f6 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4618      	mov	r0, r3
 80113b4:	3708      	adds	r7, #8
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80113ba:	b480      	push	{r7}
 80113bc:	b083      	sub	sp, #12
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	4618      	mov	r0, r3
 80113c6:	370c      	adds	r7, #12
 80113c8:	46bd      	mov	sp, r7
 80113ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ce:	4770      	bx	lr

080113d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80113d0:	b5b0      	push	{r4, r5, r7, lr}
 80113d2:	b088      	sub	sp, #32
 80113d4:	af02      	add	r7, sp, #8
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f001 f918 	bl	8012614 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>
 80113e4:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80113e6:	68b8      	ldr	r0, [r7, #8]
 80113e8:	f7ff fb18 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80113ec:	4604      	mov	r4, r0
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff ffe3 	bl	80113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80113f4:	4605      	mov	r5, r0
 80113f6:	6838      	ldr	r0, [r7, #0]
 80113f8:	f7ff fb26 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80113fc:	4603      	mov	r3, r0
 80113fe:	9300      	str	r3, [sp, #0]
 8011400:	462b      	mov	r3, r5
 8011402:	4622      	mov	r2, r4
 8011404:	6979      	ldr	r1, [r7, #20]
 8011406:	68f8      	ldr	r0, [r7, #12]
 8011408:	f001 f915 	bl	8012636 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 801140c:	697b      	ldr	r3, [r7, #20]
	}
 801140e:	4618      	mov	r0, r3
 8011410:	3718      	adds	r7, #24
 8011412:	46bd      	mov	sp, r7
 8011414:	bdb0      	pop	{r4, r5, r7, pc}

08011416 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011416:	b590      	push	{r4, r7, lr}
 8011418:	b08d      	sub	sp, #52	; 0x34
 801141a:	af00      	add	r7, sp, #0
 801141c:	60f8      	str	r0, [r7, #12]
 801141e:	60b9      	str	r1, [r7, #8]
 8011420:	607a      	str	r2, [r7, #4]
 8011422:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8011424:	1d3b      	adds	r3, r7, #4
 8011426:	4618      	mov	r0, r3
 8011428:	f001 f932 	bl	8012690 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>
 801142c:	4603      	mov	r3, r0
 801142e:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8011430:	69bc      	ldr	r4, [r7, #24]
 8011432:	68b8      	ldr	r0, [r7, #8]
 8011434:	f001 f896 	bl	8012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8011438:	4603      	mov	r3, r0
 801143a:	429c      	cmp	r4, r3
 801143c:	bf0c      	ite	eq
 801143e:	2301      	moveq	r3, #1
 8011440:	2300      	movne	r3, #0
 8011442:	b2db      	uxtb	r3, r3
 8011444:	2b00      	cmp	r3, #0
 8011446:	d030      	beq.n	80114aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x94>
	  if (size() > 0
 8011448:	68b8      	ldr	r0, [r7, #8]
 801144a:	f001 f932 	bl	80126b2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>
 801144e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8011450:	2b00      	cmp	r3, #0
 8011452:	d013      	beq.n	801147c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 8011454:	68bc      	ldr	r4, [r7, #8]
 8011456:	68b8      	ldr	r0, [r7, #8]
 8011458:	f001 f937 	bl	80126ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 801145c:	4603      	mov	r3, r0
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff fa64 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011466:	4603      	mov	r3, r0
 8011468:	683a      	ldr	r2, [r7, #0]
 801146a:	4619      	mov	r1, r3
 801146c:	4620      	mov	r0, r4
 801146e:	f7fe ff58 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011472:	4603      	mov	r3, r0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d001      	beq.n	801147c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x68>
 801147c:	2300      	movs	r3, #0
	  if (size() > 0
 801147e:	2b00      	cmp	r3, #0
 8011480:	d00c      	beq.n	801149c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8011482:	2300      	movs	r3, #0
 8011484:	61fb      	str	r3, [r7, #28]
 8011486:	68b8      	ldr	r0, [r7, #8]
 8011488:	f001 f91f 	bl	80126ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 801148c:	4602      	mov	r2, r0
 801148e:	f107 031c 	add.w	r3, r7, #28
 8011492:	4619      	mov	r1, r3
 8011494:	68f8      	ldr	r0, [r7, #12]
 8011496:	f000 fd7d 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801149a:	e0db      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	68b9      	ldr	r1, [r7, #8]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f001 f91d 	bl	80126e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 80114a8:	e0d4      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80114aa:	68bc      	ldr	r4, [r7, #8]
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7ff fa3d 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80114b4:	4603      	mov	r3, r0
 80114b6:	461a      	mov	r2, r3
 80114b8:	6839      	ldr	r1, [r7, #0]
 80114ba:	4620      	mov	r0, r4
 80114bc:	f7fe ff31 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d057      	beq.n	8011576 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x160>
	  iterator __before = __pos;
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80114ca:	69bc      	ldr	r4, [r7, #24]
 80114cc:	68b8      	ldr	r0, [r7, #8]
 80114ce:	f001 f98d 	bl	80127ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 80114d2:	4603      	mov	r3, r0
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	429c      	cmp	r4, r3
 80114d8:	bf0c      	ite	eq
 80114da:	2301      	moveq	r3, #1
 80114dc:	2300      	movne	r3, #0
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00d      	beq.n	8011500 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80114e4:	68b8      	ldr	r0, [r7, #8]
 80114e6:	f001 f981 	bl	80127ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 80114ea:	4604      	mov	r4, r0
 80114ec:	68b8      	ldr	r0, [r7, #8]
 80114ee:	f001 f97d 	bl	80127ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 80114f2:	4603      	mov	r3, r0
 80114f4:	461a      	mov	r2, r3
 80114f6:	4621      	mov	r1, r4
 80114f8:	68f8      	ldr	r0, [r7, #12]
 80114fa:	f000 fdf2 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80114fe:	e0a9      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011500:	68bc      	ldr	r4, [r7, #8]
 8011502:	f107 0314 	add.w	r3, r7, #20
 8011506:	4618      	mov	r0, r3
 8011508:	f001 f97c 	bl	8012804 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
 801150c:	4603      	mov	r3, r0
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff fa0c 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011516:	4603      	mov	r3, r0
 8011518:	683a      	ldr	r2, [r7, #0]
 801151a:	4619      	mov	r1, r3
 801151c:	4620      	mov	r0, r4
 801151e:	f7fe ff00 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d01f      	beq.n	8011568 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	4618      	mov	r0, r3
 801152c:	f001 f97b 	bl	8012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	bf0c      	ite	eq
 8011536:	2301      	moveq	r3, #1
 8011538:	2300      	movne	r3, #0
 801153a:	b2db      	uxtb	r3, r3
 801153c:	2b00      	cmp	r3, #0
 801153e:	d00a      	beq.n	8011556 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8011540:	2300      	movs	r3, #0
 8011542:	623b      	str	r3, [r7, #32]
 8011544:	f107 0214 	add.w	r2, r7, #20
 8011548:	f107 0320 	add.w	r3, r7, #32
 801154c:	4619      	mov	r1, r3
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f000 fd20 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011554:	e07e      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011556:	f107 0218 	add.w	r2, r7, #24
 801155a:	f107 0318 	add.w	r3, r7, #24
 801155e:	4619      	mov	r1, r3
 8011560:	68f8      	ldr	r0, [r7, #12]
 8011562:	f000 fdbe 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011566:	e075      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	683a      	ldr	r2, [r7, #0]
 801156c:	68b9      	ldr	r1, [r7, #8]
 801156e:	4618      	mov	r0, r3
 8011570:	f001 f8b7 	bl	80126e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 8011574:	e06e      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011576:	68bc      	ldr	r4, [r7, #8]
 8011578:	69bb      	ldr	r3, [r7, #24]
 801157a:	4618      	mov	r0, r3
 801157c:	f7ff f9d7 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011580:	4603      	mov	r3, r0
 8011582:	683a      	ldr	r2, [r7, #0]
 8011584:	4619      	mov	r1, r3
 8011586:	4620      	mov	r0, r4
 8011588:	f7fe fecb 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d056      	beq.n	8011640 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x22a>
	  iterator __after = __pos;
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011596:	69bc      	ldr	r4, [r7, #24]
 8011598:	68b8      	ldr	r0, [r7, #8]
 801159a:	f001 f896 	bl	80126ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 801159e:	4603      	mov	r3, r0
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	429c      	cmp	r4, r3
 80115a4:	bf0c      	ite	eq
 80115a6:	2301      	moveq	r3, #1
 80115a8:	2300      	movne	r3, #0
 80115aa:	b2db      	uxtb	r3, r3
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d00c      	beq.n	80115ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80115b0:	2300      	movs	r3, #0
 80115b2:	627b      	str	r3, [r7, #36]	; 0x24
 80115b4:	68b8      	ldr	r0, [r7, #8]
 80115b6:	f001 f888 	bl	80126ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80115ba:	4602      	mov	r2, r0
 80115bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115c0:	4619      	mov	r1, r3
 80115c2:	68f8      	ldr	r0, [r7, #12]
 80115c4:	f000 fce6 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80115c8:	e044      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80115ca:	68bc      	ldr	r4, [r7, #8]
 80115cc:	f107 0310 	add.w	r3, r7, #16
 80115d0:	4618      	mov	r0, r3
 80115d2:	f001 f934 	bl	801283e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>
 80115d6:	4603      	mov	r3, r0
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4618      	mov	r0, r3
 80115dc:	f7ff f9a7 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80115e0:	4603      	mov	r3, r0
 80115e2:	461a      	mov	r2, r3
 80115e4:	6839      	ldr	r1, [r7, #0]
 80115e6:	4620      	mov	r0, r4
 80115e8:	f7fe fe9b 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80115ec:	4603      	mov	r3, r0
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d01f      	beq.n	8011632 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f001 f916 	bl	8012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80115fa:	4603      	mov	r3, r0
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	bf0c      	ite	eq
 8011600:	2301      	moveq	r3, #1
 8011602:	2300      	movne	r3, #0
 8011604:	b2db      	uxtb	r3, r3
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00a      	beq.n	8011620 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 801160a:	2300      	movs	r3, #0
 801160c:	62bb      	str	r3, [r7, #40]	; 0x28
 801160e:	f107 0218 	add.w	r2, r7, #24
 8011612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011616:	4619      	mov	r1, r3
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	f000 fcbb 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801161e:	e019      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011620:	f107 0210 	add.w	r2, r7, #16
 8011624:	f107 0310 	add.w	r3, r7, #16
 8011628:	4619      	mov	r1, r3
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f000 fd59 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011630:	e010      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	683a      	ldr	r2, [r7, #0]
 8011636:	68b9      	ldr	r1, [r7, #8]
 8011638:	4618      	mov	r0, r3
 801163a:	f001 f852 	bl	80126e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 801163e:	e009      	b.n	8011654 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8011640:	2300      	movs	r3, #0
 8011642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011644:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011648:	f107 0318 	add.w	r3, r7, #24
 801164c:	4619      	mov	r1, r3
 801164e:	68f8      	ldr	r0, [r7, #12]
 8011650:	f000 fd82 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	3734      	adds	r7, #52	; 0x34
 8011658:	46bd      	mov	sp, r7
 801165a:	bd90      	pop	{r4, r7, pc}

0801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f001 f8fb 	bl	8012860 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 801166a:	4602      	mov	r2, r0
 801166c:	f107 030c 	add.w	r3, r7, #12
 8011670:	4611      	mov	r1, r2
 8011672:	4618      	mov	r0, r3
 8011674:	f001 f902 	bl	801287c <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8011678:	4603      	mov	r3, r0
      }
 801167a:	4618      	mov	r0, r3
 801167c:	3710      	adds	r7, #16
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}

08011682 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011682:	b5b0      	push	{r4, r5, r7, lr}
 8011684:	b086      	sub	sp, #24
 8011686:	af00      	add	r7, sp, #0
 8011688:	60f8      	str	r0, [r7, #12]
 801168a:	60b9      	str	r1, [r7, #8]
 801168c:	607a      	str	r2, [r7, #4]
 801168e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d117      	bne.n	80116c6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f000 ff64 	bl	8012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 801169c:	4602      	mov	r2, r0
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4293      	cmp	r3, r2
 80116a2:	d010      	beq.n	80116c6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80116a4:	68fc      	ldr	r4, [r7, #12]
 80116a6:	6838      	ldr	r0, [r7, #0]
 80116a8:	f7ff ffd8 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80116ac:	4605      	mov	r5, r0
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f7ff f93d 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80116b4:	4603      	mov	r3, r0
 80116b6:	461a      	mov	r2, r3
 80116b8:	4629      	mov	r1, r5
 80116ba:	4620      	mov	r0, r4
 80116bc:	f7fe fe31 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d001      	beq.n	80116ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80116c6:	2301      	movs	r3, #1
 80116c8:	e000      	b.n	80116cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 80116ca:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80116cc:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80116d2:	7df8      	ldrb	r0, [r7, #23]
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	f009 f8cf 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	695b      	ldr	r3, [r3, #20]
 80116e0:	1c5a      	adds	r2, r3, #1
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80116e6:	f107 0310 	add.w	r3, r7, #16
 80116ea:	6839      	ldr	r1, [r7, #0]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f000 f816 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80116f2:	693b      	ldr	r3, [r7, #16]
    }
 80116f4:	4618      	mov	r0, r3
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bdb0      	pop	{r4, r5, r7, pc}

080116fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f001 f8c3 	bl	8012894 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801170e:	6839      	ldr	r1, [r7, #0]
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f001 f8d4 	bl	80128be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8011716:	bf00      	nop
 8011718:	3708      	adds	r7, #8
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801171e:	b480      	push	{r7}
 8011720:	b083      	sub	sp, #12
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	683a      	ldr	r2, [r7, #0]
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	689b      	ldr	r3, [r3, #8]
      }
 8011748:	4618      	mov	r0, r3
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	3304      	adds	r3, #4
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801176c:	b590      	push	{r4, r7, lr}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d01b      	beq.n	80117b8 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011780:	68fc      	ldr	r4, [r7, #12]
 8011782:	68b8      	ldr	r0, [r7, #8]
 8011784:	f7ff fd06 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011788:	4603      	mov	r3, r0
 801178a:	683a      	ldr	r2, [r7, #0]
 801178c:	4619      	mov	r1, r3
 801178e:	4620      	mov	r0, r4
 8011790:	f7fe fbb2 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8011794:	4603      	mov	r3, r0
 8011796:	f083 0301 	eor.w	r3, r3, #1
 801179a:	b2db      	uxtb	r3, r3
 801179c:	2b00      	cmp	r3, #0
 801179e:	d006      	beq.n	80117ae <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	607b      	str	r3, [r7, #4]
 80117a4:	68b8      	ldr	r0, [r7, #8]
 80117a6:	f001 f89c 	bl	80128e2 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80117aa:	60b8      	str	r0, [r7, #8]
 80117ac:	e7e5      	b.n	801177a <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80117ae:	68b8      	ldr	r0, [r7, #8]
 80117b0:	f001 f8a3 	bl	80128fa <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80117b4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80117b6:	e7e0      	b.n	801177a <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80117b8:	f107 0314 	add.w	r3, r7, #20
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	f000 f811 	bl	80117e6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPKSt18_Rb_tree_node_base>
 80117c4:	697b      	ldr	r3, [r7, #20]
    }
 80117c6:	4618      	mov	r0, r3
 80117c8:	371c      	adds	r7, #28
 80117ca:	46bd      	mov	sp, r7
 80117cc:	bd90      	pop	{r4, r7, pc}

080117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80117ce:	b580      	push	{r7, lr}
 80117d0:	b082      	sub	sp, #8
 80117d2:	af00      	add	r7, sp, #0
 80117d4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fcdc 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80117dc:	4603      	mov	r3, r0
 80117de:	4618      	mov	r0, r3
 80117e0:	3708      	adds	r7, #8
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80117e6:	b480      	push	{r7}
 80117e8:	b083      	sub	sp, #12
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
 80117ee:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	4618      	mov	r0, r3
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr

08011804 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8011804:	b590      	push	{r4, r7, lr}
 8011806:	b083      	sub	sp, #12
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f001 f87f 	bl	8012912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 8011814:	4604      	mov	r4, r0
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f001 f887 	bl	801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 801181c:	4602      	mov	r2, r0
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	4621      	mov	r1, r4
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f001 f88d 	bl	8012942 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 8011828:	4603      	mov	r3, r0
 801182a:	4618      	mov	r0, r3
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	bd90      	pop	{r4, r7, pc}

08011832 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011832:	b580      	push	{r7, lr}
 8011834:	b084      	sub	sp, #16
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	1d1a      	adds	r2, r3, #4
 801183e:	f107 030c 	add.w	r3, r7, #12
 8011842:	4611      	mov	r1, r2
 8011844:	4618      	mov	r0, r3
 8011846:	f000 fa10 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	4618      	mov	r0, r3
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8key_compEv>:
      key_comp() const
 8011854:	b480      	push	{r7}
 8011856:	b083      	sub	sp, #12
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801185c:	bf00      	nop
 801185e:	4618      	mov	r0, r3
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr

0801186a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	3310      	adds	r3, #16
 8011876:	4618      	mov	r0, r3
 8011878:	f001 f894 	bl	80129a4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 801187c:	4603      	mov	r3, r0
 801187e:	4618      	mov	r0, r3
 8011880:	3708      	adds	r7, #8
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
	...

08011888 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]
 8011890:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	683a      	ldr	r2, [r7, #0]
 8011896:	4619      	mov	r1, r3
 8011898:	4812      	ldr	r0, [pc, #72]	; (80118e4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 801189a:	f7fe fe5a 	bl	8010552 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 801189e:	4603      	mov	r3, r0
 80118a0:	723b      	strb	r3, [r7, #8]
 80118a2:	f107 030c 	add.w	r3, r7, #12
 80118a6:	2100      	movs	r1, #0
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7fd fbae 	bl	800f00a <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 80118ae:	7b39      	ldrb	r1, [r7, #12]
 80118b0:	7a38      	ldrb	r0, [r7, #8]
 80118b2:	f7fd fbb6 	bl	800f022 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 80118b6:	4603      	mov	r3, r0
 80118b8:	f083 0301 	eor.w	r3, r3, #1
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 80118c2:	7a3b      	ldrb	r3, [r7, #8]
 80118c4:	e00a      	b.n	80118dc <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f103 0108 	add.w	r1, r3, #8
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	3308      	adds	r3, #8
 80118d0:	461a      	mov	r2, r3
 80118d2:	4804      	ldr	r0, [pc, #16]	; (80118e4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 80118d4:	f7fe fe3d 	bl	8010552 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 80118d8:	4603      	mov	r3, r0
 80118da:	bf00      	nop
    }
 80118dc:	4618      	mov	r0, r3
 80118de:	3710      	adds	r7, #16
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	0801b2fc 	.word	0x0801b2fc

080118e8 <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEEC1ES4_>:
      constexpr _Tuple_impl(const _Head& __head)
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6839      	ldr	r1, [r7, #0]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f001 f860 	bl	80129bc <_ZNSt10_Head_baseILj0ERKSt4pairI3PinS1_ELb0EEC1ES4_>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4618      	mov	r0, r3
 8011900:	3708      	adds	r7, #8
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011906:	b480      	push	{r7}
 8011908:	b083      	sub	sp, #12
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801191c:	b5b0      	push	{r4, r5, r7, lr}
 801191e:	b088      	sub	sp, #32
 8011920:	af02      	add	r7, sp, #8
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
 8011928:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f001 f855 	bl	80129da <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>
 8011930:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8011932:	68b8      	ldr	r0, [r7, #8]
 8011934:	f7ff f872 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011938:	4604      	mov	r4, r0
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f7ff ffe3 	bl	8011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8011940:	4605      	mov	r5, r0
 8011942:	6838      	ldr	r0, [r7, #0]
 8011944:	f7ff f880 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011948:	4603      	mov	r3, r0
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	462b      	mov	r3, r5
 801194e:	4622      	mov	r2, r4
 8011950:	6979      	ldr	r1, [r7, #20]
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	f001 f852 	bl	80129fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8011958:	697b      	ldr	r3, [r7, #20]
	}
 801195a:	4618      	mov	r0, r3
 801195c:	3718      	adds	r7, #24
 801195e:	46bd      	mov	sp, r7
 8011960:	bdb0      	pop	{r4, r5, r7, pc}

08011962 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011962:	b590      	push	{r4, r7, lr}
 8011964:	b08d      	sub	sp, #52	; 0x34
 8011966:	af00      	add	r7, sp, #0
 8011968:	60f8      	str	r0, [r7, #12]
 801196a:	60b9      	str	r1, [r7, #8]
 801196c:	607a      	str	r2, [r7, #4]
 801196e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8011970:	1d3b      	adds	r3, r7, #4
 8011972:	4618      	mov	r0, r3
 8011974:	f001 f86f 	bl	8012a56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>
 8011978:	4603      	mov	r3, r0
 801197a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801197c:	69bc      	ldr	r4, [r7, #24]
 801197e:	68b8      	ldr	r0, [r7, #8]
 8011980:	f000 ffd3 	bl	801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8011984:	4603      	mov	r3, r0
 8011986:	429c      	cmp	r4, r3
 8011988:	bf0c      	ite	eq
 801198a:	2301      	moveq	r3, #1
 801198c:	2300      	movne	r3, #0
 801198e:	b2db      	uxtb	r3, r3
 8011990:	2b00      	cmp	r3, #0
 8011992:	d030      	beq.n	80119f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x94>
	  if (size() > 0
 8011994:	68b8      	ldr	r0, [r7, #8]
 8011996:	f001 f86f 	bl	8012a78 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>
 801199a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801199c:	2b00      	cmp	r3, #0
 801199e:	d013      	beq.n	80119c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 80119a0:	68bc      	ldr	r4, [r7, #8]
 80119a2:	68b8      	ldr	r0, [r7, #8]
 80119a4:	f001 f874 	bl	8012a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 80119a8:	4603      	mov	r3, r0
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f7ff fa5e 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80119b2:	4603      	mov	r3, r0
 80119b4:	683a      	ldr	r2, [r7, #0]
 80119b6:	4619      	mov	r1, r3
 80119b8:	4620      	mov	r0, r4
 80119ba:	f7fe fde7 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d001      	beq.n	80119c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 80119c4:	2301      	movs	r3, #1
 80119c6:	e000      	b.n	80119ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x68>
 80119c8:	2300      	movs	r3, #0
	  if (size() > 0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00c      	beq.n	80119e8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 80119ce:	2300      	movs	r3, #0
 80119d0:	61fb      	str	r3, [r7, #28]
 80119d2:	68b8      	ldr	r0, [r7, #8]
 80119d4:	f001 f85c 	bl	8012a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 80119d8:	4602      	mov	r2, r0
 80119da:	f107 031c 	add.w	r3, r7, #28
 80119de:	4619      	mov	r1, r3
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f000 fad7 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80119e6:	e0db      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	68b9      	ldr	r1, [r7, #8]
 80119ee:	4618      	mov	r0, r3
 80119f0:	f001 f85a 	bl	8012aa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 80119f4:	e0d4      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80119f6:	68bc      	ldr	r4, [r7, #8]
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7ff fa37 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011a00:	4603      	mov	r3, r0
 8011a02:	461a      	mov	r2, r3
 8011a04:	6839      	ldr	r1, [r7, #0]
 8011a06:	4620      	mov	r0, r4
 8011a08:	f7fe fdc0 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d057      	beq.n	8011ac2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	  iterator __before = __pos;
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8011a16:	69bc      	ldr	r4, [r7, #24]
 8011a18:	68b8      	ldr	r0, [r7, #8]
 8011a1a:	f001 f8ca 	bl	8012bb2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	429c      	cmp	r4, r3
 8011a24:	bf0c      	ite	eq
 8011a26:	2301      	moveq	r3, #1
 8011a28:	2300      	movne	r3, #0
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00d      	beq.n	8011a4c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8011a30:	68b8      	ldr	r0, [r7, #8]
 8011a32:	f001 f8be 	bl	8012bb2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8011a36:	4604      	mov	r4, r0
 8011a38:	68b8      	ldr	r0, [r7, #8]
 8011a3a:	f001 f8ba 	bl	8012bb2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	461a      	mov	r2, r3
 8011a42:	4621      	mov	r1, r4
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 fb4c 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011a4a:	e0a9      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011a4c:	68bc      	ldr	r4, [r7, #8]
 8011a4e:	f107 0314 	add.w	r3, r7, #20
 8011a52:	4618      	mov	r0, r3
 8011a54:	f001 f8b9 	bl	8012bca <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff fa06 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011a62:	4603      	mov	r3, r0
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	4619      	mov	r1, r3
 8011a68:	4620      	mov	r0, r4
 8011a6a:	f7fe fd8f 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01f      	beq.n	8011ab4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	4618      	mov	r0, r3
 8011a78:	f001 f8b8 	bl	8012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	bf0c      	ite	eq
 8011a82:	2301      	moveq	r3, #1
 8011a84:	2300      	movne	r3, #0
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d00a      	beq.n	8011aa2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	623b      	str	r3, [r7, #32]
 8011a90:	f107 0214 	add.w	r2, r7, #20
 8011a94:	f107 0320 	add.w	r3, r7, #32
 8011a98:	4619      	mov	r1, r3
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f000 fa7a 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011aa0:	e07e      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011aa2:	f107 0218 	add.w	r2, r7, #24
 8011aa6:	f107 0318 	add.w	r3, r7, #24
 8011aaa:	4619      	mov	r1, r3
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f000 fb18 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011ab2:	e075      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	683a      	ldr	r2, [r7, #0]
 8011ab8:	68b9      	ldr	r1, [r7, #8]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f000 fff4 	bl	8012aa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8011ac0:	e06e      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011ac2:	68bc      	ldr	r4, [r7, #8]
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7ff f9d1 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011acc:	4603      	mov	r3, r0
 8011ace:	683a      	ldr	r2, [r7, #0]
 8011ad0:	4619      	mov	r1, r3
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f7fe fd5a 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d056      	beq.n	8011b8c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x22a>
	  iterator __after = __pos;
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011ae2:	69bc      	ldr	r4, [r7, #24]
 8011ae4:	68b8      	ldr	r0, [r7, #8]
 8011ae6:	f000 ffd3 	bl	8012a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8011aea:	4603      	mov	r3, r0
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	429c      	cmp	r4, r3
 8011af0:	bf0c      	ite	eq
 8011af2:	2301      	moveq	r3, #1
 8011af4:	2300      	movne	r3, #0
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00c      	beq.n	8011b16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8011afc:	2300      	movs	r3, #0
 8011afe:	627b      	str	r3, [r7, #36]	; 0x24
 8011b00:	68b8      	ldr	r0, [r7, #8]
 8011b02:	f000 ffc5 	bl	8012a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8011b06:	4602      	mov	r2, r0
 8011b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f000 fa40 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011b14:	e044      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8011b16:	68bc      	ldr	r4, [r7, #8]
 8011b18:	f107 0310 	add.w	r3, r7, #16
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f001 f871 	bl	8012c04 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>
 8011b22:	4603      	mov	r3, r0
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff f9a1 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	461a      	mov	r2, r3
 8011b30:	6839      	ldr	r1, [r7, #0]
 8011b32:	4620      	mov	r0, r4
 8011b34:	f7fe fd2a 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d01f      	beq.n	8011b7e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f001 f853 	bl	8012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	bf0c      	ite	eq
 8011b4c:	2301      	moveq	r3, #1
 8011b4e:	2300      	movne	r3, #0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d00a      	beq.n	8011b6c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8011b56:	2300      	movs	r3, #0
 8011b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b5a:	f107 0218 	add.w	r2, r7, #24
 8011b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b62:	4619      	mov	r1, r3
 8011b64:	68f8      	ldr	r0, [r7, #12]
 8011b66:	f000 fa15 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011b6a:	e019      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011b6c:	f107 0210 	add.w	r2, r7, #16
 8011b70:	f107 0310 	add.w	r3, r7, #16
 8011b74:	4619      	mov	r1, r3
 8011b76:	68f8      	ldr	r0, [r7, #12]
 8011b78:	f000 fab3 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011b7c:	e010      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	683a      	ldr	r2, [r7, #0]
 8011b82:	68b9      	ldr	r1, [r7, #8]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f000 ff8f 	bl	8012aa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8011b8a:	e009      	b.n	8011ba0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b90:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011b94:	f107 0318 	add.w	r3, r7, #24
 8011b98:	4619      	mov	r1, r3
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f000 fadc 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011ba0:	68f8      	ldr	r0, [r7, #12]
 8011ba2:	3734      	adds	r7, #52	; 0x34
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd90      	pop	{r4, r7, pc}

08011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f001 f838 	bl	8012c26 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	f107 030c 	add.w	r3, r7, #12
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f001 f83f 	bl	8012c42 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8011bc4:	4603      	mov	r3, r0
      }
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}

08011bce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011bce:	b5b0      	push	{r4, r5, r7, lr}
 8011bd0:	b086      	sub	sp, #24
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	60f8      	str	r0, [r7, #12]
 8011bd6:	60b9      	str	r1, [r7, #8]
 8011bd8:	607a      	str	r2, [r7, #4]
 8011bda:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d117      	bne.n	8011c12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f000 fea1 	bl	801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8011be8:	4602      	mov	r2, r0
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	4293      	cmp	r3, r2
 8011bee:	d010      	beq.n	8011c12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8011bf0:	68fc      	ldr	r4, [r7, #12]
 8011bf2:	6838      	ldr	r0, [r7, #0]
 8011bf4:	f7ff ffd8 	bl	8011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8011bf8:	4605      	mov	r5, r0
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f7ff f937 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011c00:	4603      	mov	r3, r0
 8011c02:	461a      	mov	r2, r3
 8011c04:	4629      	mov	r1, r5
 8011c06:	4620      	mov	r0, r4
 8011c08:	f7fe fcc0 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d001      	beq.n	8011c16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 8011c12:	2301      	movs	r3, #1
 8011c14:	e000      	b.n	8011c18 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8011c16:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011c18:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011c1e:	7df8      	ldrb	r0, [r7, #23]
 8011c20:	687a      	ldr	r2, [r7, #4]
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	f008 fe29 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	695b      	ldr	r3, [r3, #20]
 8011c2c:	1c5a      	adds	r2, r3, #1
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011c32:	f107 0310 	add.w	r3, r7, #16
 8011c36:	6839      	ldr	r1, [r7, #0]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f000 f816 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8011c3e:	693b      	ldr	r3, [r7, #16]
    }
 8011c40:	4618      	mov	r0, r3
 8011c42:	3718      	adds	r7, #24
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bdb0      	pop	{r4, r5, r7, pc}

08011c48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	b082      	sub	sp, #8
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8011c52:	6839      	ldr	r1, [r7, #0]
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f001 f800 	bl	8012c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8011c5a:	6839      	ldr	r1, [r7, #0]
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f001 f811 	bl	8012c84 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011c6a:	b480      	push	{r7}
 8011c6c:	b083      	sub	sp, #12
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
 8011c72:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	683a      	ldr	r2, [r7, #0]
 8011c78:	601a      	str	r2, [r3, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8011c92:	6839      	ldr	r1, [r7, #0]
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f001 f807 	bl	8012ca8 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3708      	adds	r7, #8
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>:
      _M_get_node()
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b084      	sub	sp, #16
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
	auto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7ff f87b 	bl	8010da8 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2101      	movs	r1, #1
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f001 f802 	bl	8012cc0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>
 8011cbc:	60f8      	str	r0, [r7, #12]
	return std::__to_address(__ptr);
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f001 f81e 	bl	8012d00 <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>
 8011cc4:	4603      	mov	r3, r0
      }
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}

08011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011cce:	b480      	push	{r7}
 8011cd0:	b083      	sub	sp, #12
 8011cd2:	af00      	add	r7, sp, #0
 8011cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	370c      	adds	r7, #12
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr

08011ce4 <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011ce4:	b590      	push	{r4, r7, lr}
 8011ce6:	b083      	sub	sp, #12
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011cee:	6838      	ldr	r0, [r7, #0]
 8011cf0:	f7ff ffed 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	781c      	ldrb	r4, [r3, #0]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	2001      	movs	r0, #1
 8011cfe:	f7fc f9a3 	bl	800e048 <_ZnwjPv>
 8011d02:	4603      	mov	r3, r0
 8011d04:	4622      	mov	r2, r4
 8011d06:	701a      	strb	r2, [r3, #0]
 8011d08:	4618      	mov	r0, r3
 8011d0a:	370c      	adds	r7, #12
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd90      	pop	{r4, r7, pc}

08011d10 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b084      	sub	sp, #16
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f7ff ffd6 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011d22:	4603      	mov	r3, r0
 8011d24:	4619      	mov	r1, r3
 8011d26:	68b8      	ldr	r0, [r7, #8]
 8011d28:	f7ff ffdc 	bl	8011ce4 <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011d2c:	bf00      	nop
 8011d2e:	3710      	adds	r7, #16
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011d34:	b590      	push	{r4, r7, lr}
 8011d36:	b083      	sub	sp, #12
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 ffe9 	bl	8012d16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011d44:	4604      	mov	r4, r0
 8011d46:	6838      	ldr	r0, [r7, #0]
 8011d48:	f7fe fe4b 	bl	80109e2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4620      	mov	r0, r4
 8011d52:	f000 ffeb 	bl	8012d2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>
      }
 8011d56:	bf00      	nop
 8011d58:	370c      	adds	r7, #12
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd90      	pop	{r4, r7, pc}

08011d5e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b082      	sub	sp, #8
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 ffd4 	bl	8012d16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2201      	movs	r2, #1
 8011d72:	6839      	ldr	r1, [r7, #0]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f000 ffe5 	bl	8012d44 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>
 8011d7a:	bf00      	nop
 8011d7c:	3708      	adds	r7, #8
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011d82:	b590      	push	{r4, r7, lr}
 8011d84:	b083      	sub	sp, #12
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f000 fff8 	bl	8012d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8011d92:	4604      	mov	r4, r0
 8011d94:	6838      	ldr	r0, [r7, #0]
 8011d96:	f7ff f8a9 	bl	8010eec <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fffa 	bl	8012d98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE7destroyIS5_EEvRS7_PT_>
      }
 8011da4:	bf00      	nop
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd90      	pop	{r4, r7, pc}

08011dac <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f000 ffe3 	bl	8012d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	6839      	ldr	r1, [r7, #0]
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f000 fff4 	bl	8012db0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j>
 8011dc8:	bf00      	nop
 8011dca:	3708      	adds	r7, #8
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	370c      	adds	r7, #12
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	68db      	ldr	r3, [r3, #12]
 8011df4:	4618      	mov	r0, r3
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>:
      _M_addr() noexcept
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8011e08:	687b      	ldr	r3, [r7, #4]
      }
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	370c      	adds	r7, #12
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr

08011e16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8011e16:	b480      	push	{r7}
 8011e18:	b083      	sub	sp, #12
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	3304      	adds	r3, #4
 8011e22:	4618      	mov	r0, r3
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011e2e:	b590      	push	{r4, r7, lr}
 8011e30:	b087      	sub	sp, #28
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	60f8      	str	r0, [r7, #12]
 8011e36:	60b9      	str	r1, [r7, #8]
 8011e38:	607a      	str	r2, [r7, #4]
 8011e3a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d01b      	beq.n	8011e7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011e42:	68fc      	ldr	r4, [r7, #12]
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	f7fe ff50 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	4619      	mov	r1, r3
 8011e50:	4620      	mov	r0, r4
 8011e52:	f7fe f851 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8011e56:	4603      	mov	r3, r0
 8011e58:	f083 0301 	eor.w	r3, r3, #1
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d006      	beq.n	8011e70 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	607b      	str	r3, [r7, #4]
 8011e66:	68b8      	ldr	r0, [r7, #8]
 8011e68:	f7fe fcc7 	bl	80107fa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8011e6c:	60b8      	str	r0, [r7, #8]
 8011e6e:	e7e5      	b.n	8011e3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8011e70:	68b8      	ldr	r0, [r7, #8]
 8011e72:	f7fe fcb6 	bl	80107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011e76:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011e78:	e7e0      	b.n	8011e3c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8011e7a:	f107 0314 	add.w	r3, r7, #20
 8011e7e:	6879      	ldr	r1, [r7, #4]
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fe ff82 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8011e86:	697b      	ldr	r3, [r7, #20]
    }
 8011e88:	4618      	mov	r0, r3
 8011e8a:	371c      	adds	r7, #28
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd90      	pop	{r4, r7, pc}

08011e90 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() noexcept
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b082      	sub	sp, #8
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f000 ffa8 	bl	8012dee <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3708      	adds	r7, #8
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
 8011eb0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	683a      	ldr	r2, [r7, #0]
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	370c      	adds	r7, #12
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr

08011ec6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b082      	sub	sp, #8
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f000 ff21 	bl	8012d16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2101      	movs	r1, #1
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f000 ff93 	bl	8012e04 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3708      	adds	r7, #8
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}

08011ee8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8011ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011eec:	b086      	sub	sp, #24
 8011eee:	af02      	add	r7, sp, #8
 8011ef0:	60f8      	str	r0, [r7, #12]
 8011ef2:	60b9      	str	r1, [r7, #8]
 8011ef4:	607a      	str	r2, [r7, #4]
 8011ef6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	4619      	mov	r1, r3
 8011efc:	201c      	movs	r0, #28
 8011efe:	f7fc f8a3 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8011f02:	68f8      	ldr	r0, [r7, #12]
 8011f04:	f000 ff07 	bl	8012d16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8011f08:	4604      	mov	r4, r0
 8011f0a:	68b8      	ldr	r0, [r7, #8]
 8011f0c:	f7fe fd69 	bl	80109e2 <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8011f10:	4605      	mov	r5, r0
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7fe fd82 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011f18:	4606      	mov	r6, r0
 8011f1a:	6838      	ldr	r0, [r7, #0]
 8011f1c:	f7fe fd89 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011f20:	4680      	mov	r8, r0
 8011f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f24:	f7fe fd90 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	9300      	str	r3, [sp, #0]
 8011f2c:	4643      	mov	r3, r8
 8011f2e:	4632      	mov	r2, r6
 8011f30:	4629      	mov	r1, r5
 8011f32:	4620      	mov	r0, r4
 8011f34:	f000 ffc3 	bl	8012ebe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8011f38:	bf00      	nop
 8011f3a:	3710      	adds	r7, #16
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f42 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b084      	sub	sp, #16
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	f107 030c 	add.w	r3, r7, #12
 8011f52:	4611      	mov	r1, r2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fe ff18 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	695b      	ldr	r3, [r3, #20]
 8011f70:	4618      	mov	r0, r3
 8011f72:	370c      	adds	r7, #12
 8011f74:	46bd      	mov	sp, r7
 8011f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7a:	4770      	bx	lr

08011f7c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8011f7c:	b480      	push	{r7}
 8011f7e:	b083      	sub	sp, #12
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	3310      	adds	r3, #16
 8011f88:	4618      	mov	r0, r3
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:
       constexpr pair(const _T1& __x, _U2&& __y)
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	601a      	str	r2, [r3, #0]
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 ffa4 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	605a      	str	r2, [r3, #4]
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011fc0:	b590      	push	{r4, r7, lr}
 8011fc2:	b08b      	sub	sp, #44	; 0x2c
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8011fcc:	68b8      	ldr	r0, [r7, #8]
 8011fce:	f7fd fe96 	bl	800fcfe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8011fd6:	68b8      	ldr	r0, [r7, #8]
 8011fd8:	f7ff ff1d 	bl	8011e16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d020      	beq.n	801202e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8011fec:	69bb      	ldr	r3, [r7, #24]
 8011fee:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8011ff0:	68bc      	ldr	r4, [r7, #8]
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fe78 	bl	8010cea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	461a      	mov	r2, r3
 8011ffe:	6879      	ldr	r1, [r7, #4]
 8012000:	4620      	mov	r0, r4
 8012002:	f7fd ff79 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8012006:	4603      	mov	r3, r0
 8012008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801200c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012010:	2b00      	cmp	r3, #0
 8012012:	d005      	beq.n	8012020 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	4618      	mov	r0, r3
 8012018:	f7fe fbef 	bl	80107fa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801201c:	4603      	mov	r3, r0
 801201e:	e004      	b.n	801202a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	4618      	mov	r0, r3
 8012024:	f7fe fbdd 	bl	80107e2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012028:	4603      	mov	r3, r0
 801202a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801202c:	e7db      	b.n	8011fe6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801202e:	697a      	ldr	r2, [r7, #20]
 8012030:	f107 0310 	add.w	r3, r7, #16
 8012034:	4611      	mov	r1, r2
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fea7 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801203c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012040:	2b00      	cmp	r3, #0
 8012042:	d01d      	beq.n	8012080 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8012044:	68b8      	ldr	r0, [r7, #8]
 8012046:	f000 ff61 	bl	8012f0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 801204a:	4603      	mov	r3, r0
 801204c:	61fb      	str	r3, [r7, #28]
 801204e:	f107 021c 	add.w	r2, r7, #28
 8012052:	f107 0310 	add.w	r3, r7, #16
 8012056:	4611      	mov	r1, r2
 8012058:	4618      	mov	r0, r3
 801205a:	f7fd ff1e 	bl	800fe9a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d008      	beq.n	8012076 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8012064:	f107 0214 	add.w	r2, r7, #20
 8012068:	f107 0318 	add.w	r3, r7, #24
 801206c:	4619      	mov	r1, r3
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f000 ff5d 	bl	8012f2e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 8012074:	e025      	b.n	80120c2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8012076:	f107 0310 	add.w	r3, r7, #16
 801207a:	4618      	mov	r0, r3
 801207c:	f000 f84a 	bl	8012114 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012080:	68bc      	ldr	r4, [r7, #8]
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	4618      	mov	r0, r3
 8012086:	f7ff f92d 	bl	80112e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801208a:	4603      	mov	r3, r0
 801208c:	687a      	ldr	r2, [r7, #4]
 801208e:	4619      	mov	r1, r3
 8012090:	4620      	mov	r0, r4
 8012092:	f7fd ff31 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d008      	beq.n	80120ae <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801209c:	f107 0214 	add.w	r2, r7, #20
 80120a0:	f107 0318 	add.w	r3, r7, #24
 80120a4:	4619      	mov	r1, r3
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f000 ff41 	bl	8012f2e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 80120ac:	e009      	b.n	80120c2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80120ae:	2300      	movs	r3, #0
 80120b0:	623b      	str	r3, [r7, #32]
 80120b2:	f107 0220 	add.w	r2, r7, #32
 80120b6:	f107 0310 	add.w	r3, r7, #16
 80120ba:	4619      	mov	r1, r3
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f000 f84b 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	372c      	adds	r7, #44	; 0x2c
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd90      	pop	{r4, r7, pc}

080120ca <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80120ca:	b480      	push	{r7}
 80120cc:	b083      	sub	sp, #12
 80120ce:	af00      	add	r7, sp, #0
 80120d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	330c      	adds	r3, #12
 80120d6:	4618      	mov	r0, r3
 80120d8:	370c      	adds	r7, #12
 80120da:	46bd      	mov	sp, r7
 80120dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e0:	4770      	bx	lr

080120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80120e2:	b580      	push	{r7, lr}
 80120e4:	b084      	sub	sp, #16
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	60f8      	str	r0, [r7, #12]
 80120ea:	60b9      	str	r1, [r7, #8]
 80120ec:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80120ee:	68b8      	ldr	r0, [r7, #8]
 80120f0:	f000 ff01 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80120f4:	4603      	mov	r3, r0
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	601a      	str	r2, [r3, #0]
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f000 fefa 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8012102:	4603      	mov	r3, r0
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	605a      	str	r2, [r3, #4]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	4618      	mov	r0, r3
 8012122:	f008 fba8 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8012126:	4602      	mov	r2, r0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	601a      	str	r2, [r3, #0]
	return *this;
 801212c:	687b      	ldr	r3, [r7, #4]
      }
 801212e:	4618      	mov	r0, r3
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012136:	b580      	push	{r7, lr}
 8012138:	b082      	sub	sp, #8
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4618      	mov	r0, r3
 8012144:	f008 fb95 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8012148:	4602      	mov	r2, r0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	601a      	str	r2, [r3, #0]
	return *this;
 801214e:	687b      	ldr	r3, [r7, #4]
      }
 8012150:	4618      	mov	r0, r3
 8012152:	3708      	adds	r7, #8
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}

08012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	60f8      	str	r0, [r7, #12]
 8012160:	60b9      	str	r1, [r7, #8]
 8012162:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8012164:	68b8      	ldr	r0, [r7, #8]
 8012166:	f000 fec6 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801216a:	4603      	mov	r3, r0
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	601a      	str	r2, [r3, #0]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	605a      	str	r2, [r3, #4]
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	4618      	mov	r0, r3
 801217e:	3710      	adds	r7, #16
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}

08012184 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr() const
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	3310      	adds	r3, #16
 8012190:	4618      	mov	r0, r3
 8012192:	f000 fee5 	bl	8012f60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 8012196:	4603      	mov	r3, r0
 8012198:	4618      	mov	r0, r3
 801219a:	3708      	adds	r7, #8
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}

080121a0 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80121a0:	b480      	push	{r7}
 80121a2:	b083      	sub	sp, #12
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	4618      	mov	r0, r3
 80121ae:	370c      	adds	r7, #12
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <_ZSt10destroy_atIhEvPT_>:
    destroy_at(_Tp* __location)
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    }
 80121c0:	bf00      	nop
 80121c2:	370c      	adds	r7, #12
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 fecf 	bl	8012f78 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 80121da:	4603      	mov	r3, r0
 80121dc:	4618      	mov	r0, r3
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b088      	sub	sp, #32
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	61fb      	str	r3, [r7, #28]
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	61bb      	str	r3, [r7, #24]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80121fc:	f7fb ff1c 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d003      	beq.n	801220e <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8012206:	69b8      	ldr	r0, [r7, #24]
 8012208:	f008 faca 	bl	801a7a0 <_ZdlPv>
	    return;
 801220c:	e005      	b.n	801221a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	69b9      	ldr	r1, [r7, #24]
 8012212:	69f8      	ldr	r0, [r7, #28]
 8012214:	f001 f9cb 	bl	80135ae <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8012218:	bf00      	nop
 801221a:	bf00      	nop
 801221c:	3720      	adds	r7, #32
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}

08012222 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012222:	b480      	push	{r7}
 8012224:	b083      	sub	sp, #12
 8012226:	af00      	add	r7, sp, #0
 8012228:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	3304      	adds	r3, #4
 801222e:	4618      	mov	r0, r3
 8012230:	370c      	adds	r7, #12
 8012232:	46bd      	mov	sp, r7
 8012234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012238:	4770      	bx	lr

0801223a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801223a:	b590      	push	{r4, r7, lr}
 801223c:	b087      	sub	sp, #28
 801223e:	af00      	add	r7, sp, #0
 8012240:	60f8      	str	r0, [r7, #12]
 8012242:	60b9      	str	r1, [r7, #8]
 8012244:	607a      	str	r2, [r7, #4]
 8012246:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012248:	68bb      	ldr	r3, [r7, #8]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d01b      	beq.n	8012286 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801224e:	68fc      	ldr	r4, [r7, #12]
 8012250:	68b8      	ldr	r0, [r7, #8]
 8012252:	f7fe ff9f 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012256:	4603      	mov	r3, r0
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	4619      	mov	r1, r3
 801225c:	4620      	mov	r0, r4
 801225e:	f7fd fe4b 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8012262:	4603      	mov	r3, r0
 8012264:	f083 0301 	eor.w	r3, r3, #1
 8012268:	b2db      	uxtb	r3, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	d006      	beq.n	801227c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801226e:	68bb      	ldr	r3, [r7, #8]
 8012270:	607b      	str	r3, [r7, #4]
 8012272:	68b8      	ldr	r0, [r7, #8]
 8012274:	f7fe faf5 	bl	8010862 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012278:	60b8      	str	r0, [r7, #8]
 801227a:	e7e5      	b.n	8012248 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801227c:	68b8      	ldr	r0, [r7, #8]
 801227e:	f7fe fae4 	bl	801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012282:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012284:	e7e0      	b.n	8012248 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8012286:	f107 0314 	add.w	r3, r7, #20
 801228a:	6879      	ldr	r1, [r7, #4]
 801228c:	4618      	mov	r0, r3
 801228e:	f7fe ffd1 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 8012292:	697b      	ldr	r3, [r7, #20]
    }
 8012294:	4618      	mov	r0, r3
 8012296:	371c      	adds	r7, #28
 8012298:	46bd      	mov	sp, r7
 801229a:	bd90      	pop	{r4, r7, pc}

0801229c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>:
      _M_ptr() noexcept
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 fe72 	bl	8012f8e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>
 80122aa:	4603      	mov	r3, r0
 80122ac:	4618      	mov	r0, r3
 80122ae:	3708      	adds	r7, #8
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 fd60 	bl	8012d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2101      	movs	r1, #1
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 fe6c 	bl	8012fa4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE8allocateERS7_j>
 80122cc:	4603      	mov	r3, r0
 80122ce:	4618      	mov	r0, r3
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}

080122d6 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80122d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122da:	b086      	sub	sp, #24
 80122dc:	af02      	add	r7, sp, #8
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
 80122e4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	4619      	mov	r1, r3
 80122ea:	2024      	movs	r0, #36	; 0x24
 80122ec:	f7fb feac 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80122f0:	68f8      	ldr	r0, [r7, #12]
 80122f2:	f000 fd46 	bl	8012d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80122f6:	4604      	mov	r4, r0
 80122f8:	68b8      	ldr	r0, [r7, #8]
 80122fa:	f7fe fdf7 	bl	8010eec <_ZNSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>
 80122fe:	4605      	mov	r5, r0
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7fe fb8b 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012306:	4606      	mov	r6, r0
 8012308:	6838      	ldr	r0, [r7, #0]
 801230a:	f7fe fb92 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801230e:	4680      	mov	r8, r0
 8012310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012312:	f7fe fb99 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012316:	4603      	mov	r3, r0
 8012318:	9300      	str	r3, [sp, #0]
 801231a:	4643      	mov	r3, r8
 801231c:	4632      	mov	r2, r6
 801231e:	4629      	mov	r1, r5
 8012320:	4620      	mov	r0, r4
 8012322:	f000 fe8c 	bl	801303e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8012326:	bf00      	nop
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012330 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhS0_I3PinS2_EEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	f107 030c 	add.w	r3, r7, #12
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7fe ff76 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	4618      	mov	r0, r3
 801234c:	3710      	adds	r7, #16
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <_ZNKSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012352:	b480      	push	{r7}
 8012354:	b083      	sub	sp, #12
 8012356:	af00      	add	r7, sp, #0
 8012358:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	695b      	ldr	r3, [r3, #20]
 801235e:	4618      	mov	r0, r3
 8012360:	370c      	adds	r7, #12
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr

0801236a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801236a:	b480      	push	{r7}
 801236c:	b083      	sub	sp, #12
 801236e:	af00      	add	r7, sp, #0
 8012370:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	3310      	adds	r3, #16
 8012376:	4618      	mov	r0, r3
 8012378:	370c      	adds	r7, #12
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012382:	b590      	push	{r4, r7, lr}
 8012384:	b08b      	sub	sp, #44	; 0x2c
 8012386:	af00      	add	r7, sp, #0
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	60b9      	str	r1, [r7, #8]
 801238c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801238e:	68b8      	ldr	r0, [r7, #8]
 8012390:	f7fd fcec 	bl	800fd6c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8012394:	4603      	mov	r3, r0
 8012396:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8012398:	68b8      	ldr	r0, [r7, #8]
 801239a:	f7ff ff42 	bl	8012222 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801239e:	4603      	mov	r3, r0
 80123a0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80123a2:	2301      	movs	r3, #1
 80123a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d020      	beq.n	80123f0 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80123ae:	69bb      	ldr	r3, [r7, #24]
 80123b0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80123b2:	68bc      	ldr	r4, [r7, #8]
 80123b4:	69bb      	ldr	r3, [r7, #24]
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fe feec 	bl	8011194 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80123bc:	4603      	mov	r3, r0
 80123be:	461a      	mov	r2, r3
 80123c0:	6879      	ldr	r1, [r7, #4]
 80123c2:	4620      	mov	r0, r4
 80123c4:	f7fd fd98 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 80123c8:	4603      	mov	r3, r0
 80123ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80123ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d005      	beq.n	80123e2 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fe fa42 	bl	8010862 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80123de:	4603      	mov	r3, r0
 80123e0:	e004      	b.n	80123ec <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fe fa30 	bl	801084a <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80123ea:	4603      	mov	r3, r0
 80123ec:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80123ee:	e7db      	b.n	80123a8 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80123f0:	697a      	ldr	r2, [r7, #20]
 80123f2:	f107 0310 	add.w	r3, r7, #16
 80123f6:	4611      	mov	r1, r2
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fe ff1b 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80123fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012402:	2b00      	cmp	r3, #0
 8012404:	d01d      	beq.n	8012442 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8012406:	68b8      	ldr	r0, [r7, #8]
 8012408:	f000 fe35 	bl	8013076 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 801240c:	4603      	mov	r3, r0
 801240e:	61fb      	str	r3, [r7, #28]
 8012410:	f107 021c 	add.w	r2, r7, #28
 8012414:	f107 0310 	add.w	r3, r7, #16
 8012418:	4611      	mov	r1, r2
 801241a:	4618      	mov	r0, r3
 801241c:	f7fd fe58 	bl	80100d0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEES7_>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d008      	beq.n	8012438 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8012426:	f107 0214 	add.w	r2, r7, #20
 801242a:	f107 0318 	add.w	r3, r7, #24
 801242e:	4619      	mov	r1, r3
 8012430:	68f8      	ldr	r0, [r7, #12]
 8012432:	f000 fe31 	bl	8013098 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhS_I3PinS6_EEERS1_Lb1EEEOT_OT0_>
 8012436:	e025      	b.n	8012484 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8012438:	f107 0310 	add.w	r3, r7, #16
 801243c:	4618      	mov	r0, r3
 801243e:	f000 f831 	bl	80124a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012442:	68bc      	ldr	r4, [r7, #8]
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	4618      	mov	r0, r3
 8012448:	f7ff f9c1 	bl	80117ce <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801244c:	4603      	mov	r3, r0
 801244e:	687a      	ldr	r2, [r7, #4]
 8012450:	4619      	mov	r1, r3
 8012452:	4620      	mov	r0, r4
 8012454:	f7fd fd50 	bl	800fef8 <_ZNKSt4lessIhEclERKhS2_>
 8012458:	4603      	mov	r3, r0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d008      	beq.n	8012470 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801245e:	f107 0214 	add.w	r2, r7, #20
 8012462:	f107 0318 	add.w	r3, r7, #24
 8012466:	4619      	mov	r1, r3
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f000 fe15 	bl	8013098 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhS_I3PinS6_EEERS1_Lb1EEEOT_OT0_>
 801246e:	e009      	b.n	8012484 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8012470:	2300      	movs	r3, #0
 8012472:	623b      	str	r3, [r7, #32]
 8012474:	f107 0220 	add.w	r2, r7, #32
 8012478:	f107 0310 	add.w	r3, r7, #16
 801247c:	4619      	mov	r1, r3
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f7ff fe6a 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	372c      	adds	r7, #44	; 0x2c
 8012488:	46bd      	mov	sp, r7
 801248a:	bd90      	pop	{r4, r7, pc}

0801248c <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801248c:	b480      	push	{r7}
 801248e:	b083      	sub	sp, #12
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	330c      	adds	r3, #12
 8012498:	4618      	mov	r0, r3
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f008 f9e0 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80124b6:	4602      	mov	r2, r0
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	601a      	str	r2, [r3, #0]
	return *this;
 80124bc:	687b      	ldr	r3, [r7, #4]
      }
 80124be:	4618      	mov	r0, r3
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}

080124c6 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80124c6:	b580      	push	{r7, lr}
 80124c8:	b082      	sub	sp, #8
 80124ca:	af00      	add	r7, sp, #0
 80124cc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f008 f9cd 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80124d8:	4602      	mov	r2, r0
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	601a      	str	r2, [r3, #0]
	return *this;
 80124de:	687b      	ldr	r3, [r7, #4]
      }
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKhS0_I3PinS2_EEE9_M_valptrEv>:
      _M_valptr() const
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b082      	sub	sp, #8
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3310      	adds	r3, #16
 80124f4:	4618      	mov	r0, r3
 80124f6:	f000 fde8 	bl	80130ca <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>
 80124fa:	4603      	mov	r3, r0
 80124fc:	4618      	mov	r0, r3
 80124fe:	3708      	adds	r7, #8
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <_ZNKSt10_Select1stISt4pairIKhS0_I3PinS2_EEEclERKS4_>:
      operator()(const _Pair& __x) const
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	4618      	mov	r0, r3
 8012512:	370c      	adds	r7, #12
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr

0801251c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr

08012534 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012534:	b480      	push	{r7}
 8012536:	b083      	sub	sp, #12
 8012538:	af00      	add	r7, sp, #0
 801253a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr

0801254c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801254c:	b480      	push	{r7}
 801254e:	b083      	sub	sp, #12
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	4618      	mov	r0, r3
 801255a:	370c      	adds	r7, #12
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr

08012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012564:	b480      	push	{r7}
 8012566:	b083      	sub	sp, #12
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	3304      	adds	r3, #4
 8012570:	4618      	mov	r0, r3
 8012572:	370c      	adds	r7, #12
 8012574:	46bd      	mov	sp, r7
 8012576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257a:	4770      	bx	lr

0801257c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801257c:	b590      	push	{r4, r7, lr}
 801257e:	b087      	sub	sp, #28
 8012580:	af00      	add	r7, sp, #0
 8012582:	60f8      	str	r0, [r7, #12]
 8012584:	60b9      	str	r1, [r7, #8]
 8012586:	607a      	str	r2, [r7, #4]
 8012588:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d01b      	beq.n	80125c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012590:	68fc      	ldr	r4, [r7, #12]
 8012592:	68b8      	ldr	r0, [r7, #8]
 8012594:	f7ff f862 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012598:	4603      	mov	r3, r0
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	4619      	mov	r1, r3
 801259e:	4620      	mov	r0, r4
 80125a0:	f7fd febf 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80125a4:	4603      	mov	r3, r0
 80125a6:	f083 0301 	eor.w	r3, r3, #1
 80125aa:	b2db      	uxtb	r3, r3
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d006      	beq.n	80125be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	607b      	str	r3, [r7, #4]
 80125b4:	68b8      	ldr	r0, [r7, #8]
 80125b6:	f000 fd94 	bl	80130e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80125ba:	60b8      	str	r0, [r7, #8]
 80125bc:	e7e5      	b.n	801258a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80125be:	68b8      	ldr	r0, [r7, #8]
 80125c0:	f000 f931 	bl	8012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80125c4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80125c6:	e7e0      	b.n	801258a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 80125c8:	f107 0314 	add.w	r3, r7, #20
 80125cc:	6879      	ldr	r1, [r7, #4]
 80125ce:	4618      	mov	r0, r3
 80125d0:	f7ff f8a5 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80125d4:	697b      	ldr	r3, [r7, #20]
    }
 80125d6:	4618      	mov	r0, r3
 80125d8:	371c      	adds	r7, #28
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd90      	pop	{r4, r7, pc}

080125de <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 80125de:	b580      	push	{r7, lr}
 80125e0:	b082      	sub	sp, #8
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 fd87 	bl	80130fa <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 80125ec:	4603      	mov	r3, r0
 80125ee:	4618      	mov	r0, r3
 80125f0:	3708      	adds	r7, #8
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 80125f6:	b480      	push	{r7}
 80125f8:	b083      	sub	sp, #12
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
 80125fe:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4618      	mov	r0, r3
 801260a:	370c      	adds	r7, #12
 801260c:	46bd      	mov	sp, r7
 801260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012612:	4770      	bx	lr

08012614 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f000 fd77 	bl	8013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8012622:	4603      	mov	r3, r0
 8012624:	2101      	movs	r1, #1
 8012626:	4618      	mov	r0, r3
 8012628:	f000 fd7d 	bl	8013126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>
 801262c:	4603      	mov	r3, r0
 801262e:	4618      	mov	r0, r3
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}

08012636 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263a:	b086      	sub	sp, #24
 801263c:	af02      	add	r7, sp, #8
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	607a      	str	r2, [r7, #4]
 8012644:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	4619      	mov	r1, r3
 801264a:	2020      	movs	r0, #32
 801264c:	f7fb fcfc 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012650:	68f8      	ldr	r0, [r7, #12]
 8012652:	f000 fd5d 	bl	8013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8012656:	4604      	mov	r4, r0
 8012658:	68b8      	ldr	r0, [r7, #8]
 801265a:	f7fe fe91 	bl	8011380 <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 801265e:	4605      	mov	r5, r0
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7fe f9db 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012666:	4606      	mov	r6, r0
 8012668:	6838      	ldr	r0, [r7, #0]
 801266a:	f7fe fea6 	bl	80113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801266e:	4680      	mov	r8, r0
 8012670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012672:	f7fe f9e9 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012676:	4603      	mov	r3, r0
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	4643      	mov	r3, r8
 801267c:	4632      	mov	r2, r6
 801267e:	4629      	mov	r1, r5
 8012680:	4620      	mov	r0, r4
 8012682:	f000 fdaa 	bl	80131da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8012686:	bf00      	nop
 8012688:	3710      	adds	r7, #16
 801268a:	46bd      	mov	sp, r7
 801268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012690 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	f107 030c 	add.w	r3, r7, #12
 80126a0:	4611      	mov	r1, r2
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7ff f83b 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	4618      	mov	r0, r3
 80126ac:	3710      	adds	r7, #16
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}

080126b2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80126b2:	b480      	push	{r7}
 80126b4:	b083      	sub	sp, #12
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	695b      	ldr	r3, [r3, #20]
 80126be:	4618      	mov	r0, r3
 80126c0:	370c      	adds	r7, #12
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr

080126ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80126ca:	b480      	push	{r7}
 80126cc:	b083      	sub	sp, #12
 80126ce:	af00      	add	r7, sp, #0
 80126d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	3310      	adds	r3, #16
 80126d6:	4618      	mov	r0, r3
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80126e2:	b590      	push	{r4, r7, lr}
 80126e4:	b08b      	sub	sp, #44	; 0x2c
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	60f8      	str	r0, [r7, #12]
 80126ea:	60b9      	str	r1, [r7, #8]
 80126ec:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80126ee:	68b8      	ldr	r0, [r7, #8]
 80126f0:	f7ff ff2c 	bl	801254c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 80126f4:	4603      	mov	r3, r0
 80126f6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80126f8:	68b8      	ldr	r0, [r7, #8]
 80126fa:	f7ff ff33 	bl	8012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 80126fe:	4603      	mov	r3, r0
 8012700:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012702:	2301      	movs	r3, #1
 8012704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8012708:	69bb      	ldr	r3, [r7, #24]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d020      	beq.n	8012750 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012712:	68bc      	ldr	r4, [r7, #8]
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe ffa0 	bl	801165c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801271c:	4603      	mov	r3, r0
 801271e:	461a      	mov	r2, r3
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	4620      	mov	r0, r4
 8012724:	f7fd fdfd 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012728:	4603      	mov	r3, r0
 801272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801272e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012732:	2b00      	cmp	r3, #0
 8012734:	d005      	beq.n	8012742 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x60>
 8012736:	69bb      	ldr	r3, [r7, #24]
 8012738:	4618      	mov	r0, r3
 801273a:	f000 fcd2 	bl	80130e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801273e:	4603      	mov	r3, r0
 8012740:	e004      	b.n	801274c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6a>
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	4618      	mov	r0, r3
 8012746:	f000 f86e 	bl	8012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801274a:	4603      	mov	r3, r0
 801274c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801274e:	e7db      	b.n	8012708 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8012750:	697a      	ldr	r2, [r7, #20]
 8012752:	f107 0310 	add.w	r3, r7, #16
 8012756:	4611      	mov	r1, r2
 8012758:	4618      	mov	r0, r3
 801275a:	f7fe ffe0 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801275e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012762:	2b00      	cmp	r3, #0
 8012764:	d01d      	beq.n	80127a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8012766:	68b8      	ldr	r0, [r7, #8]
 8012768:	f000 fd53 	bl	8013212 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>
 801276c:	4603      	mov	r3, r0
 801276e:	61fb      	str	r3, [r7, #28]
 8012770:	f107 021c 	add.w	r2, r7, #28
 8012774:	f107 0310 	add.w	r3, r7, #16
 8012778:	4611      	mov	r1, r2
 801277a:	4618      	mov	r0, r3
 801277c:	f7fd fda2 	bl	80102c4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 8012780:	4603      	mov	r3, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d008      	beq.n	8012798 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8012786:	f107 0214 	add.w	r2, r7, #20
 801278a:	f107 0318 	add.w	r3, r7, #24
 801278e:	4619      	mov	r1, r3
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f000 fd4f 	bl	8013234 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8012796:	e025      	b.n	80127e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8012798:	f107 0310 	add.w	r3, r7, #16
 801279c:	4618      	mov	r0, r3
 801279e:	f000 f831 	bl	8012804 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80127a2:	68bc      	ldr	r4, [r7, #8]
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fe f8c1 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127ac:	4603      	mov	r3, r0
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4619      	mov	r1, r3
 80127b2:	4620      	mov	r0, r4
 80127b4:	f7fd fdb5 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d008      	beq.n	80127d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 80127be:	f107 0214 	add.w	r2, r7, #20
 80127c2:	f107 0318 	add.w	r3, r7, #24
 80127c6:	4619      	mov	r1, r3
 80127c8:	68f8      	ldr	r0, [r7, #12]
 80127ca:	f000 fd33 	bl	8013234 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 80127ce:	e009      	b.n	80127e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80127d0:	2300      	movs	r3, #0
 80127d2:	623b      	str	r3, [r7, #32]
 80127d4:	f107 0220 	add.w	r2, r7, #32
 80127d8:	f107 0310 	add.w	r3, r7, #16
 80127dc:	4619      	mov	r1, r3
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f7ff fcba 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	372c      	adds	r7, #44	; 0x2c
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd90      	pop	{r4, r7, pc}

080127ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80127ec:	b480      	push	{r7}
 80127ee:	b083      	sub	sp, #12
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	330c      	adds	r3, #12
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4618      	mov	r0, r3
 8012812:	f008 f830 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8012816:	4602      	mov	r2, r0
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	601a      	str	r2, [r3, #0]
	return *this;
 801281c:	687b      	ldr	r3, [r7, #4]
      }
 801281e:	4618      	mov	r0, r3
 8012820:	3708      	adds	r7, #8
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012826:	b480      	push	{r7}
 8012828:	b083      	sub	sp, #12
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	4618      	mov	r0, r3
 8012834:	370c      	adds	r7, #12
 8012836:	46bd      	mov	sp, r7
 8012838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801283c:	4770      	bx	lr

0801283e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801283e:	b580      	push	{r7, lr}
 8012840:	b082      	sub	sp, #8
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4618      	mov	r0, r3
 801284c:	f008 f811 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8012850:	4602      	mov	r2, r0
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	601a      	str	r2, [r3, #0]
	return *this;
 8012856:	687b      	ldr	r3, [r7, #4]
      }
 8012858:	4618      	mov	r0, r3
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3310      	adds	r3, #16
 801286c:	4618      	mov	r0, r3
 801286e:	f000 fcfa 	bl	8013266 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 8012872:	4603      	mov	r3, r0
 8012874:	4618      	mov	r0, r3
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>:
      operator()(const _Pair& __x) const
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	4618      	mov	r0, r3
 801288a:	370c      	adds	r7, #12
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr

08012894 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012894:	b590      	push	{r4, r7, lr}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 fc36 	bl	8013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 80128a4:	4604      	mov	r4, r0
 80128a6:	6838      	ldr	r0, [r7, #0]
 80128a8:	f7fe fd6a 	bl	8011380 <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 80128ac:	4603      	mov	r3, r0
 80128ae:	4619      	mov	r1, r3
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fce4 	bl	801327e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>
      }
 80128b6:	bf00      	nop
 80128b8:	370c      	adds	r7, #12
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd90      	pop	{r4, r7, pc}

080128be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80128be:	b580      	push	{r7, lr}
 80128c0:	b082      	sub	sp, #8
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
 80128c6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f000 fc21 	bl	8013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 80128ce:	4603      	mov	r3, r0
 80128d0:	2201      	movs	r2, #1
 80128d2:	6839      	ldr	r1, [r7, #0]
 80128d4:	4618      	mov	r0, r3
 80128d6:	f000 fcde 	bl	8013296 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>
 80128da:	bf00      	nop
 80128dc:	3708      	adds	r7, #8
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}

080128e2 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128e2:	b480      	push	{r7}
 80128e4:	b083      	sub	sp, #12
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	4618      	mov	r0, r3
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f8:	4770      	bx	lr

080128fa <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128fa:	b480      	push	{r7}
 80128fc:	b083      	sub	sp, #12
 80128fe:	af00      	add	r7, sp, #0
 8012900:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	68db      	ldr	r3, [r3, #12]
 8012906:	4618      	mov	r0, r3
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr

08012912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8012912:	b480      	push	{r7}
 8012914:	b083      	sub	sp, #12
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	4618      	mov	r0, r3
 8012920:	370c      	adds	r7, #12
 8012922:	46bd      	mov	sp, r7
 8012924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012928:	4770      	bx	lr

0801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801292a:	b480      	push	{r7}
 801292c:	b083      	sub	sp, #12
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3304      	adds	r3, #4
 8012936:	4618      	mov	r0, r3
 8012938:	370c      	adds	r7, #12
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr

08012942 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012942:	b590      	push	{r4, r7, lr}
 8012944:	b087      	sub	sp, #28
 8012946:	af00      	add	r7, sp, #0
 8012948:	60f8      	str	r0, [r7, #12]
 801294a:	60b9      	str	r1, [r7, #8]
 801294c:	607a      	str	r2, [r7, #4]
 801294e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d01b      	beq.n	801298e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012956:	68fc      	ldr	r4, [r7, #12]
 8012958:	68b8      	ldr	r0, [r7, #8]
 801295a:	f7ff f925 	bl	8011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801295e:	4603      	mov	r3, r0
 8012960:	683a      	ldr	r2, [r7, #0]
 8012962:	4619      	mov	r1, r3
 8012964:	4620      	mov	r0, r4
 8012966:	f7fd fe11 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801296a:	4603      	mov	r3, r0
 801296c:	f083 0301 	eor.w	r3, r3, #1
 8012970:	b2db      	uxtb	r3, r3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d006      	beq.n	8012984 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012976:	68bb      	ldr	r3, [r7, #8]
 8012978:	607b      	str	r3, [r7, #4]
 801297a:	68b8      	ldr	r0, [r7, #8]
 801297c:	f000 fcaa 	bl	80132d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012980:	60b8      	str	r0, [r7, #8]
 8012982:	e7e5      	b.n	8012950 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8012984:	68b8      	ldr	r0, [r7, #8]
 8012986:	f000 f931 	bl	8012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 801298a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801298c:	e7e0      	b.n	8012950 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 801298e:	f107 0314 	add.w	r3, r7, #20
 8012992:	6879      	ldr	r1, [r7, #4]
 8012994:	4618      	mov	r0, r3
 8012996:	f7ff f968 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801299a:	697b      	ldr	r3, [r7, #20]
    }
 801299c:	4618      	mov	r0, r3
 801299e:	371c      	adds	r7, #28
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd90      	pop	{r4, r7, pc}

080129a4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b082      	sub	sp, #8
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80129ac:	6878      	ldr	r0, [r7, #4]
 80129ae:	f000 fc9d 	bl	80132ec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 80129b2:	4603      	mov	r3, r0
 80129b4:	4618      	mov	r0, r3
 80129b6:	3708      	adds	r7, #8
 80129b8:	46bd      	mov	sp, r7
 80129ba:	bd80      	pop	{r7, pc}

080129bc <_ZNSt10_Head_baseILj0ERKSt4pairI3PinS1_ELb0EEC1ES4_>:
      constexpr _Head_base(const _Head& __h)
 80129bc:	b480      	push	{r7}
 80129be:	b083      	sub	sp, #12
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	683a      	ldr	r2, [r7, #0]
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4618      	mov	r0, r3
 80129d0:	370c      	adds	r7, #12
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr

080129da <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 80129da:	b580      	push	{r7, lr}
 80129dc:	b082      	sub	sp, #8
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 fc8d 	bl	8013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 80129e8:	4603      	mov	r3, r0
 80129ea:	2101      	movs	r1, #1
 80129ec:	4618      	mov	r0, r3
 80129ee:	f000 fc93 	bl	8013318 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>
 80129f2:	4603      	mov	r3, r0
 80129f4:	4618      	mov	r0, r3
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}

080129fc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80129fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a00:	b086      	sub	sp, #24
 8012a02:	af02      	add	r7, sp, #8
 8012a04:	60f8      	str	r0, [r7, #12]
 8012a06:	60b9      	str	r1, [r7, #8]
 8012a08:	607a      	str	r2, [r7, #4]
 8012a0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	2028      	movs	r0, #40	; 0x28
 8012a12:	f7fb fb19 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012a16:	68f8      	ldr	r0, [r7, #12]
 8012a18:	f000 fc73 	bl	8013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012a1c:	4604      	mov	r4, r0
 8012a1e:	68b8      	ldr	r0, [r7, #8]
 8012a20:	f7fe ff23 	bl	801186a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8012a24:	4605      	mov	r5, r0
 8012a26:	6878      	ldr	r0, [r7, #4]
 8012a28:	f7fd fff8 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	6838      	ldr	r0, [r7, #0]
 8012a30:	f7fe ff69 	bl	8011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8012a34:	4680      	mov	r8, r0
 8012a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a38:	f7fe f806 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	4643      	mov	r3, r8
 8012a42:	4632      	mov	r2, r6
 8012a44:	4629      	mov	r1, r5
 8012a46:	4620      	mov	r0, r4
 8012a48:	f000 fcc3 	bl	80133d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8012a4c:	bf00      	nop
 8012a4e:	3710      	adds	r7, #16
 8012a50:	46bd      	mov	sp, r7
 8012a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b084      	sub	sp, #16
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	f107 030c 	add.w	r3, r7, #12
 8012a66:	4611      	mov	r1, r2
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7ff f8fe 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	4618      	mov	r0, r3
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	695b      	ldr	r3, [r3, #20]
 8012a84:	4618      	mov	r0, r3
 8012a86:	370c      	adds	r7, #12
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8e:	4770      	bx	lr

08012a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8012a90:	b480      	push	{r7}
 8012a92:	b083      	sub	sp, #12
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	3310      	adds	r3, #16
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	370c      	adds	r7, #12
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b08b      	sub	sp, #44	; 0x2c
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8012ab4:	68b8      	ldr	r0, [r7, #8]
 8012ab6:	f7ff ff2c 	bl	8012912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 8012aba:	4603      	mov	r3, r0
 8012abc:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8012abe:	68b8      	ldr	r0, [r7, #8]
 8012ac0:	f7ff ff33 	bl	801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012ac8:	2301      	movs	r3, #1
 8012aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d020      	beq.n	8012b16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8012ad4:	69bb      	ldr	r3, [r7, #24]
 8012ad6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012ad8:	68bc      	ldr	r4, [r7, #8]
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7ff f863 	bl	8011ba8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	6879      	ldr	r1, [r7, #4]
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f7fd fd4f 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8012aee:	4603      	mov	r3, r0
 8012af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8012af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d005      	beq.n	8012b08 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x60>
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 fbe8 	bl	80132d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012b04:	4603      	mov	r3, r0
 8012b06:	e004      	b.n	8012b12 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6a>
 8012b08:	69bb      	ldr	r3, [r7, #24]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f000 f86e 	bl	8012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012b10:	4603      	mov	r3, r0
 8012b12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8012b14:	e7db      	b.n	8012ace <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8012b16:	697a      	ldr	r2, [r7, #20]
 8012b18:	f107 0310 	add.w	r3, r7, #16
 8012b1c:	4611      	mov	r1, r2
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7ff f8a3 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8012b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d01d      	beq.n	8012b68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8012b2c:	68b8      	ldr	r0, [r7, #8]
 8012b2e:	f000 fc6c 	bl	801340a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>
 8012b32:	4603      	mov	r3, r0
 8012b34:	61fb      	str	r3, [r7, #28]
 8012b36:	f107 021c 	add.w	r2, r7, #28
 8012b3a:	f107 0310 	add.w	r3, r7, #16
 8012b3e:	4611      	mov	r1, r2
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fd fcd7 	bl	80104f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d008      	beq.n	8012b5e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8012b4c:	f107 0214 	add.w	r2, r7, #20
 8012b50:	f107 0318 	add.w	r3, r7, #24
 8012b54:	4619      	mov	r1, r3
 8012b56:	68f8      	ldr	r0, [r7, #12]
 8012b58:	f000 fc68 	bl	801342c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8012b5c:	e025      	b.n	8012baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8012b5e:	f107 0310 	add.w	r3, r7, #16
 8012b62:	4618      	mov	r0, r3
 8012b64:	f000 f831 	bl	8012bca <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012b68:	68bc      	ldr	r4, [r7, #8]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7fe f97e 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012b72:	4603      	mov	r3, r0
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	4619      	mov	r1, r3
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f7fd fd07 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d008      	beq.n	8012b96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8012b84:	f107 0214 	add.w	r2, r7, #20
 8012b88:	f107 0318 	add.w	r3, r7, #24
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	68f8      	ldr	r0, [r7, #12]
 8012b90:	f000 fc4c 	bl	801342c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8012b94:	e009      	b.n	8012baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8012b96:	2300      	movs	r3, #0
 8012b98:	623b      	str	r3, [r7, #32]
 8012b9a:	f107 0220 	add.w	r2, r7, #32
 8012b9e:	f107 0310 	add.w	r3, r7, #16
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	f7ff fad7 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	372c      	adds	r7, #44	; 0x2c
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd90      	pop	{r4, r7, pc}

08012bb2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8012bb2:	b480      	push	{r7}
 8012bb4:	b083      	sub	sp, #12
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	330c      	adds	r3, #12
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	370c      	adds	r7, #12
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc8:	4770      	bx	lr

08012bca <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012bca:	b580      	push	{r7, lr}
 8012bcc:	b082      	sub	sp, #8
 8012bce:	af00      	add	r7, sp, #0
 8012bd0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f007 fe4d 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8012bdc:	4602      	mov	r2, r0
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	601a      	str	r2, [r3, #0]
	return *this;
 8012be2:	687b      	ldr	r3, [r7, #4]
      }
 8012be4:	4618      	mov	r0, r3
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f007 fe2e 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8012c16:	4602      	mov	r2, r0
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	601a      	str	r2, [r3, #0]
	return *this;
 8012c1c:	687b      	ldr	r3, [r7, #4]
      }
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3708      	adds	r7, #8
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}

08012c26 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 8012c26:	b580      	push	{r7, lr}
 8012c28:	b082      	sub	sp, #8
 8012c2a:	af00      	add	r7, sp, #0
 8012c2c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	3310      	adds	r3, #16
 8012c32:	4618      	mov	r0, r3
 8012c34:	f000 fc13 	bl	801345e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3708      	adds	r7, #8
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}

08012c42 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>:
      operator()(const _Pair& __x) const
 8012c42:	b480      	push	{r7}
 8012c44:	b083      	sub	sp, #12
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
 8012c4a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	370c      	adds	r7, #12
 8012c52:	46bd      	mov	sp, r7
 8012c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c58:	4770      	bx	lr

08012c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012c5a:	b590      	push	{r4, r7, lr}
 8012c5c:	b083      	sub	sp, #12
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
 8012c62:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 fb4c 	bl	8013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012c6a:	4604      	mov	r4, r0
 8012c6c:	6838      	ldr	r0, [r7, #0]
 8012c6e:	f7fe fdfc 	bl	801186a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8012c72:	4603      	mov	r3, r0
 8012c74:	4619      	mov	r1, r3
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 fbfd 	bl	8013476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>
      }
 8012c7c:	bf00      	nop
 8012c7e:	370c      	adds	r7, #12
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd90      	pop	{r4, r7, pc}

08012c84 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8012c8e:	6878      	ldr	r0, [r7, #4]
 8012c90:	f000 fb37 	bl	8013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012c94:	4603      	mov	r3, r0
 8012c96:	2201      	movs	r2, #1
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f000 fbf7 	bl	801348e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>
 8012ca0:	bf00      	nop
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	6039      	str	r1, [r7, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
 8012cc6:	6078      	str	r0, [r7, #4]
 8012cc8:	6039      	str	r1, [r7, #0]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	60fb      	str	r3, [r7, #12]
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012cd2:	f7fb f9b1 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d006      	beq.n	8012cea <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f007 fd61 	bl	801a7a8 <_Znwj>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	e006      	b.n	8012cf8 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012cea:	2200      	movs	r2, #0
 8012cec:	68b9      	ldr	r1, [r7, #8]
 8012cee:	68f8      	ldr	r0, [r7, #12]
 8012cf0:	f000 fd87 	bl	8013802 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	bf00      	nop
      { return __a.allocate(__n); }
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	3710      	adds	r7, #16
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8012d08:	687b      	ldr	r3, [r7, #4]
    }
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8012d16:	b480      	push	{r7}
 8012d18:	b083      	sub	sp, #12
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b082      	sub	sp, #8
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012d36:	6838      	ldr	r0, [r7, #0]
 8012d38:	f000 fbc8 	bl	80134cc <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>
	}
 8012d3c:	bf00      	nop
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b088      	sub	sp, #32
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	61fb      	str	r3, [r7, #28]
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	61bb      	str	r3, [r7, #24]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012d5c:	f7fb f96c 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d003      	beq.n	8012d6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8012d66:	69b8      	ldr	r0, [r7, #24]
 8012d68:	f007 fd1a 	bl	801a7a0 <_ZdlPv>
	    return;
 8012d6c:	e005      	b.n	8012d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012d6e:	697a      	ldr	r2, [r7, #20]
 8012d70:	69b9      	ldr	r1, [r7, #24]
 8012d72:	69f8      	ldr	r0, [r7, #28]
 8012d74:	f000 fd64 	bl	8013840 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8012d78:	bf00      	nop
 8012d7a:	bf00      	nop
 8012d7c:	3720      	adds	r7, #32
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}

08012d82 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8012d82:	b480      	push	{r7}
 8012d84:	b083      	sub	sp, #12
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012da2:	6838      	ldr	r0, [r7, #0]
 8012da4:	f000 fb9c 	bl	80134e0 <_ZSt10destroy_atISt4pairIKhS0_I3PinS2_EEEvPT_>
	}
 8012da8:	bf00      	nop
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b088      	sub	sp, #32
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	60f8      	str	r0, [r7, #12]
 8012db8:	60b9      	str	r1, [r7, #8]
 8012dba:	607a      	str	r2, [r7, #4]
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	61fb      	str	r3, [r7, #28]
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	61bb      	str	r3, [r7, #24]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012dc8:	f7fb f936 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d003      	beq.n	8012dda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8012dd2:	69b8      	ldr	r0, [r7, #24]
 8012dd4:	f007 fce4 	bl	801a7a0 <_ZdlPv>
	    return;
 8012dd8:	e005      	b.n	8012de6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012dda:	697a      	ldr	r2, [r7, #20]
 8012ddc:	69b9      	ldr	r1, [r7, #24]
 8012dde:	69f8      	ldr	r0, [r7, #28]
 8012de0:	f000 fd40 	bl	8013864 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8012de4:	bf00      	nop
 8012de6:	bf00      	nop
 8012de8:	3720      	adds	r7, #32
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}

08012dee <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() noexcept
 8012dee:	b480      	push	{r7}
 8012df0:	b083      	sub	sp, #12
 8012df2:	af00      	add	r7, sp, #0
 8012df4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	60fb      	str	r3, [r7, #12]
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012e16:	f7fb f90f 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d009      	beq.n	8012e34 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	4613      	mov	r3, r2
 8012e24:	00db      	lsls	r3, r3, #3
 8012e26:	1a9b      	subs	r3, r3, r2
 8012e28:	009b      	lsls	r3, r3, #2
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f007 fcbc 	bl	801a7a8 <_Znwj>
 8012e30:	4603      	mov	r3, r0
 8012e32:	e006      	b.n	8012e42 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012e34:	2200      	movs	r2, #0
 8012e36:	68b9      	ldr	r1, [r7, #8]
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f000 fd25 	bl	8013888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	bf00      	nop
      { return __a.allocate(__n); }
 8012e42:	4618      	mov	r0, r3
 8012e44:	3710      	adds	r7, #16
 8012e46:	46bd      	mov	sp, r7
 8012e48:	bd80      	pop	{r7, pc}

08012e4a <_ZNSt5tupleIJRKhEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8012e4a:	b580      	push	{r7, lr}
 8012e4c:	b082      	sub	sp, #8
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
 8012e52:	6039      	str	r1, [r7, #0]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	683a      	ldr	r2, [r7, #0]
 8012e58:	4611      	mov	r1, r2
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f000 fb4a 	bl	80134f4 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4618      	mov	r0, r3
 8012e64:	3708      	adds	r7, #8
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012e6a:	b5b0      	push	{r4, r5, r7, lr}
 8012e6c:	b088      	sub	sp, #32
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	60f8      	str	r0, [r7, #12]
 8012e72:	60b9      	str	r1, [r7, #8]
 8012e74:	607a      	str	r2, [r7, #4]
 8012e76:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012e78:	68b8      	ldr	r0, [r7, #8]
 8012e7a:	f7fd fdcf 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f7fd fdd7 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012e84:	4602      	mov	r2, r0
 8012e86:	f107 0318 	add.w	r3, r7, #24
 8012e8a:	4611      	mov	r1, r2
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7ff ffdc 	bl	8012e4a <_ZNSt5tupleIJRKhEEC1EOS2_>
 8012e92:	f107 0418 	add.w	r4, r7, #24
 8012e96:	6838      	ldr	r0, [r7, #0]
 8012e98:	f7fd fdd6 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	200c      	movs	r0, #12
 8012ea2:	f7fb f8d1 	bl	800e048 <_ZnwjPv>
 8012ea6:	4605      	mov	r5, r0
 8012ea8:	7f3b      	ldrb	r3, [r7, #28]
 8012eaa:	4622      	mov	r2, r4
 8012eac:	7d39      	ldrb	r1, [r7, #20]
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f000 fb53 	bl	801355a <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8012eb4:	462b      	mov	r3, r5
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bdb0      	pop	{r4, r5, r7, pc}

08012ebe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012ebe:	b5b0      	push	{r4, r5, r7, lr}
 8012ec0:	b084      	sub	sp, #16
 8012ec2:	af00      	add	r7, sp, #0
 8012ec4:	60f8      	str	r0, [r7, #12]
 8012ec6:	60b9      	str	r1, [r7, #8]
 8012ec8:	607a      	str	r2, [r7, #4]
 8012eca:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7fd fda5 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	6838      	ldr	r0, [r7, #0]
 8012ed6:	f7fd fdac 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012eda:	4605      	mov	r5, r0
 8012edc:	6a38      	ldr	r0, [r7, #32]
 8012ede:	f7fd fdb3 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	462a      	mov	r2, r5
 8012ee6:	4621      	mov	r1, r4
 8012ee8:	68b8      	ldr	r0, [r7, #8]
 8012eea:	f7ff ffbe 	bl	8012e6a <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8012eee:	bf00      	nop
 8012ef0:	3710      	adds	r7, #16
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bdb0      	pop	{r4, r5, r7, pc}

08012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012ef6:	b480      	push	{r7}
 8012ef8:	b083      	sub	sp, #12
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4618      	mov	r0, r3
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	68da      	ldr	r2, [r3, #12]
 8012f18:	f107 030c 	add.w	r3, r7, #12
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fd ff33 	bl	8010d8a <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	4618      	mov	r0, r3
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8012f2e:	b580      	push	{r7, lr}
 8012f30:	b084      	sub	sp, #16
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	60f8      	str	r0, [r7, #12]
 8012f36:	60b9      	str	r1, [r7, #8]
 8012f38:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012f3a:	68b8      	ldr	r0, [r7, #8]
 8012f3c:	f000 fb21 	bl	8013582 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8012f40:	4603      	mov	r3, r0
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	601a      	str	r2, [r3, #0]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff ffd4 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	681a      	ldr	r2, [r3, #0]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	605a      	str	r2, [r3, #4]
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b082      	sub	sp, #8
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 fb15 	bl	8013598 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	4618      	mov	r0, r3
 8012f72:	3708      	adds	r7, #8
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}

08012f78 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	4618      	mov	r0, r3
 8012f84:	370c      	adds	r7, #12
 8012f86:	46bd      	mov	sp, r7
 8012f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8c:	4770      	bx	lr

08012f8e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>:
      _M_addr() noexcept
 8012f8e:	b480      	push	{r7}
 8012f90:	b083      	sub	sp, #12
 8012f92:	af00      	add	r7, sp, #0
 8012f94:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	4618      	mov	r0, r3
 8012f9a:	370c      	adds	r7, #12
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa2:	4770      	bx	lr

08012fa4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b084      	sub	sp, #16
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	60fb      	str	r3, [r7, #12]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012fb6:	f7fb f83f 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d009      	beq.n	8012fd4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012fc0:	68ba      	ldr	r2, [r7, #8]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	00db      	lsls	r3, r3, #3
 8012fc6:	4413      	add	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f007 fbec 	bl	801a7a8 <_Znwj>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	e006      	b.n	8012fe2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	68b9      	ldr	r1, [r7, #8]
 8012fd8:	68f8      	ldr	r0, [r7, #12]
 8012fda:	f000 fc91 	bl	8013900 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE8allocateEjPKv>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	bf00      	nop
      { return __a.allocate(__n); }
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3710      	adds	r7, #16
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <_ZSt12construct_atISt4pairIKhS0_I3PinS2_EEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012fea:	b5b0      	push	{r4, r5, r7, lr}
 8012fec:	b088      	sub	sp, #32
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	60f8      	str	r0, [r7, #12]
 8012ff2:	60b9      	str	r1, [r7, #8]
 8012ff4:	607a      	str	r2, [r7, #4]
 8012ff6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012ff8:	68b8      	ldr	r0, [r7, #8]
 8012ffa:	f7fd fd0f 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f7fd fd17 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013004:	4602      	mov	r2, r0
 8013006:	f107 0318 	add.w	r3, r7, #24
 801300a:	4611      	mov	r1, r2
 801300c:	4618      	mov	r0, r3
 801300e:	f7ff ff1c 	bl	8012e4a <_ZNSt5tupleIJRKhEEC1EOS2_>
 8013012:	f107 0418 	add.w	r4, r7, #24
 8013016:	6838      	ldr	r0, [r7, #0]
 8013018:	f7fd fd16 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	4619      	mov	r1, r3
 8013020:	2014      	movs	r0, #20
 8013022:	f7fb f811 	bl	800e048 <_ZnwjPv>
 8013026:	4605      	mov	r5, r0
 8013028:	7f3b      	ldrb	r3, [r7, #28]
 801302a:	4622      	mov	r2, r4
 801302c:	7d39      	ldrb	r1, [r7, #20]
 801302e:	4628      	mov	r0, r5
 8013030:	f000 fae8 	bl	8013604 <_ZNSt4pairIKhS_I3PinS1_EEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8013034:	462b      	mov	r3, r5
 8013036:	4618      	mov	r0, r3
 8013038:	3720      	adds	r7, #32
 801303a:	46bd      	mov	sp, r7
 801303c:	bdb0      	pop	{r4, r5, r7, pc}

0801303e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801303e:	b5b0      	push	{r4, r5, r7, lr}
 8013040:	b084      	sub	sp, #16
 8013042:	af00      	add	r7, sp, #0
 8013044:	60f8      	str	r0, [r7, #12]
 8013046:	60b9      	str	r1, [r7, #8]
 8013048:	607a      	str	r2, [r7, #4]
 801304a:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f7fd fce5 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013052:	4604      	mov	r4, r0
 8013054:	6838      	ldr	r0, [r7, #0]
 8013056:	f7fd fcec 	bl	8010a32 <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801305a:	4605      	mov	r5, r0
 801305c:	6a38      	ldr	r0, [r7, #32]
 801305e:	f7fd fcf3 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013062:	4603      	mov	r3, r0
 8013064:	462a      	mov	r2, r5
 8013066:	4621      	mov	r1, r4
 8013068:	68b8      	ldr	r0, [r7, #8]
 801306a:	f7ff ffbe 	bl	8012fea <_ZSt12construct_atISt4pairIKhS0_I3PinS2_EEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801306e:	bf00      	nop
 8013070:	3710      	adds	r7, #16
 8013072:	46bd      	mov	sp, r7
 8013074:	bdb0      	pop	{r4, r5, r7, pc}

08013076 <_ZNSt8_Rb_treeIhSt4pairIKhS0_I3PinS2_EESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8013076:	b580      	push	{r7, lr}
 8013078:	b084      	sub	sp, #16
 801307a:	af00      	add	r7, sp, #0
 801307c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	68da      	ldr	r2, [r3, #12]
 8013082:	f107 030c 	add.w	r3, r7, #12
 8013086:	4611      	mov	r1, r2
 8013088:	4618      	mov	r0, r3
 801308a:	f7fe f8d3 	bl	8011234 <_ZNSt17_Rb_tree_iteratorISt4pairIKhS0_I3PinS2_EEEC1EPSt18_Rb_tree_node_base>
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	4618      	mov	r0, r3
 8013092:	3710      	adds	r7, #16
 8013094:	46bd      	mov	sp, r7
 8013096:	bd80      	pop	{r7, pc}

08013098 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhS_I3PinS6_EEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80130a4:	68b8      	ldr	r0, [r7, #8]
 80130a6:	f000 fac1 	bl	801362c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80130aa:	4603      	mov	r3, r0
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	601a      	str	r2, [r3, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f7ff ff1f 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80130b8:	4603      	mov	r3, r0
 80130ba:	681a      	ldr	r2, [r3, #0]
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	605a      	str	r2, [r3, #4]
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	4618      	mov	r0, r3
 80130c4:	3710      	adds	r7, #16
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}

080130ca <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80130ca:	b580      	push	{r7, lr}
 80130cc:	b082      	sub	sp, #8
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 fab5 	bl	8013642 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>
 80130d8:	4603      	mov	r3, r0
 80130da:	4618      	mov	r0, r3
 80130dc:	3708      	adds	r7, #8
 80130de:	46bd      	mov	sp, r7
 80130e0:	bd80      	pop	{r7, pc}

080130e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80130e2:	b480      	push	{r7}
 80130e4:	b083      	sub	sp, #12
 80130e6:	af00      	add	r7, sp, #0
 80130e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	689b      	ldr	r3, [r3, #8]
 80130ee:	4618      	mov	r0, r3
 80130f0:	370c      	adds	r7, #12
 80130f2:	46bd      	mov	sp, r7
 80130f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f8:	4770      	bx	lr

080130fa <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 80130fa:	b480      	push	{r7}
 80130fc:	b083      	sub	sp, #12
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4618      	mov	r0, r3
 8013106:	370c      	adds	r7, #12
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8013110:	b480      	push	{r7}
 8013112:	b083      	sub	sp, #12
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4618      	mov	r0, r3
 801311c:	370c      	adds	r7, #12
 801311e:	46bd      	mov	sp, r7
 8013120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013124:	4770      	bx	lr

08013126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8013126:	b580      	push	{r7, lr}
 8013128:	b084      	sub	sp, #16
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
 801312e:	6039      	str	r1, [r7, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	60fb      	str	r3, [r7, #12]
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013138:	f7fa ff7e 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d006      	beq.n	8013150 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	015b      	lsls	r3, r3, #5
 8013146:	4618      	mov	r0, r3
 8013148:	f007 fb2e 	bl	801a7a8 <_Znwj>
 801314c:	4603      	mov	r3, r0
 801314e:	e006      	b.n	801315e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013150:	2200      	movs	r2, #0
 8013152:	68b9      	ldr	r1, [r7, #8]
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f000 fc07 	bl	8013968 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>
 801315a:	4603      	mov	r3, r0
 801315c:	bf00      	nop
      { return __a.allocate(__n); }
 801315e:	4618      	mov	r0, r3
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZNSt5tupleIJRK3PinEEC1EOS3_>:
 8013166:	b580      	push	{r7, lr}
 8013168:	b082      	sub	sp, #8
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	683a      	ldr	r2, [r7, #0]
 8013174:	4611      	mov	r1, r2
 8013176:	4618      	mov	r0, r3
 8013178:	f000 fa6e 	bl	8013658 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	4618      	mov	r0, r3
 8013180:	3708      	adds	r7, #8
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}

08013186 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013186:	b5b0      	push	{r4, r5, r7, lr}
 8013188:	b088      	sub	sp, #32
 801318a:	af00      	add	r7, sp, #0
 801318c:	60f8      	str	r0, [r7, #12]
 801318e:	60b9      	str	r1, [r7, #8]
 8013190:	607a      	str	r2, [r7, #4]
 8013192:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013194:	68b8      	ldr	r0, [r7, #8]
 8013196:	f7fd fc41 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7fe f90d 	bl	80113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80131a0:	4602      	mov	r2, r0
 80131a2:	f107 0318 	add.w	r3, r7, #24
 80131a6:	4611      	mov	r1, r2
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7ff ffdc 	bl	8013166 <_ZNSt5tupleIJRK3PinEEC1EOS3_>
 80131ae:	f107 0418 	add.w	r4, r7, #24
 80131b2:	6838      	ldr	r0, [r7, #0]
 80131b4:	f7fd fc48 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	4619      	mov	r1, r3
 80131bc:	2010      	movs	r0, #16
 80131be:	f7fa ff43 	bl	800e048 <_ZnwjPv>
 80131c2:	4605      	mov	r5, r0
 80131c4:	7f3b      	ldrb	r3, [r7, #28]
 80131c6:	4622      	mov	r2, r4
 80131c8:	7d39      	ldrb	r1, [r7, #20]
 80131ca:	4628      	mov	r0, r5
 80131cc:	f000 fa7a 	bl	80136c4 <_ZNSt4pairIK3Pin12TimerChannelEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80131d0:	462b      	mov	r3, r5
 80131d2:	4618      	mov	r0, r3
 80131d4:	3720      	adds	r7, #32
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bdb0      	pop	{r4, r5, r7, pc}

080131da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80131da:	b5b0      	push	{r4, r5, r7, lr}
 80131dc:	b084      	sub	sp, #16
 80131de:	af00      	add	r7, sp, #0
 80131e0:	60f8      	str	r0, [r7, #12]
 80131e2:	60b9      	str	r1, [r7, #8]
 80131e4:	607a      	str	r2, [r7, #4]
 80131e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7fd fc17 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80131ee:	4604      	mov	r4, r0
 80131f0:	6838      	ldr	r0, [r7, #0]
 80131f2:	f7fe f8e2 	bl	80113ba <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80131f6:	4605      	mov	r5, r0
 80131f8:	6a38      	ldr	r0, [r7, #32]
 80131fa:	f7fd fc25 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80131fe:	4603      	mov	r3, r0
 8013200:	462a      	mov	r2, r5
 8013202:	4621      	mov	r1, r4
 8013204:	68b8      	ldr	r0, [r7, #8]
 8013206:	f7ff ffbe 	bl	8013186 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801320a:	bf00      	nop
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bdb0      	pop	{r4, r5, r7, pc}

08013212 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8013212:	b580      	push	{r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	68da      	ldr	r2, [r3, #12]
 801321e:	f107 030c 	add.w	r3, r7, #12
 8013222:	4611      	mov	r1, r2
 8013224:	4618      	mov	r0, r3
 8013226:	f7fe fa7a 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013240:	68b8      	ldr	r0, [r7, #8]
 8013242:	f000 fa53 	bl	80136ec <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8013246:	4603      	mov	r3, r0
 8013248:	681a      	ldr	r2, [r3, #0]
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f7ff fe51 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013254:	4603      	mov	r3, r0
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	605a      	str	r2, [r3, #4]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	4618      	mov	r0, r3
 8013260:	3710      	adds	r7, #16
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801326e:	6878      	ldr	r0, [r7, #4]
 8013270:	f000 fa47 	bl	8013702 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 8013274:	4603      	mov	r3, r0
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801327e:	b580      	push	{r7, lr}
 8013280:	b082      	sub	sp, #8
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8013288:	6838      	ldr	r0, [r7, #0]
 801328a:	f000 fa45 	bl	8013718 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>
	}
 801328e:	bf00      	nop
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}

08013296 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013296:	b580      	push	{r7, lr}
 8013298:	b088      	sub	sp, #32
 801329a:	af00      	add	r7, sp, #0
 801329c:	60f8      	str	r0, [r7, #12]
 801329e:	60b9      	str	r1, [r7, #8]
 80132a0:	607a      	str	r2, [r7, #4]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	61fb      	str	r3, [r7, #28]
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	61bb      	str	r3, [r7, #24]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80132ae:	f7fa fec3 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80132b2:	4603      	mov	r3, r0
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d003      	beq.n	80132c0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80132b8:	69b8      	ldr	r0, [r7, #24]
 80132ba:	f007 fa71 	bl	801a7a0 <_ZdlPv>
	    return;
 80132be:	e005      	b.n	80132cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80132c0:	697a      	ldr	r2, [r7, #20]
 80132c2:	69b9      	ldr	r1, [r7, #24]
 80132c4:	69f8      	ldr	r0, [r7, #28]
 80132c6:	f000 fb93 	bl	80139f0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80132ca:	bf00      	nop
 80132cc:	bf00      	nop
 80132ce:	3720      	adds	r7, #32
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80132d4:	b480      	push	{r7}
 80132d6:	b083      	sub	sp, #12
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	689b      	ldr	r3, [r3, #8]
 80132e0:	4618      	mov	r0, r3
 80132e2:	370c      	adds	r7, #12
 80132e4:	46bd      	mov	sp, r7
 80132e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ea:	4770      	bx	lr

080132ec <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	4618      	mov	r0, r3
 80132f8:	370c      	adds	r7, #12
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr

08013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8013302:	b480      	push	{r7}
 8013304:	b083      	sub	sp, #12
 8013306:	af00      	add	r7, sp, #0
 8013308:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	4618      	mov	r0, r3
 801330e:	370c      	adds	r7, #12
 8013310:	46bd      	mov	sp, r7
 8013312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013316:	4770      	bx	lr

08013318 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	683b      	ldr	r3, [r7, #0]
 8013328:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801332a:	f7fa fe85 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d009      	beq.n	8013348 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013334:	68ba      	ldr	r2, [r7, #8]
 8013336:	4613      	mov	r3, r2
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	4413      	add	r3, r2
 801333c:	00db      	lsls	r3, r3, #3
 801333e:	4618      	mov	r0, r3
 8013340:	f007 fa32 	bl	801a7a8 <_Znwj>
 8013344:	4603      	mov	r3, r0
 8013346:	e006      	b.n	8013356 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013348:	2200      	movs	r2, #0
 801334a:	68b9      	ldr	r1, [r7, #8]
 801334c:	68f8      	ldr	r0, [r7, #12]
 801334e:	f000 fb5e 	bl	8013a0e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>
 8013352:	4603      	mov	r3, r0
 8013354:	bf00      	nop
      { return __a.allocate(__n); }
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <_ZNSt5tupleIJRKSt4pairI3PinS1_EEEC1EOS5_>:
 801335e:	b580      	push	{r7, lr}
 8013360:	b082      	sub	sp, #8
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
 8013366:	6039      	str	r1, [r7, #0]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	683a      	ldr	r2, [r7, #0]
 801336c:	4611      	mov	r1, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f000 f9dc 	bl	801372c <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEEC1EOS5_>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}

0801337e <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801337e:	b5b0      	push	{r4, r5, r7, lr}
 8013380:	b088      	sub	sp, #32
 8013382:	af00      	add	r7, sp, #0
 8013384:	60f8      	str	r0, [r7, #12]
 8013386:	60b9      	str	r1, [r7, #8]
 8013388:	607a      	str	r2, [r7, #4]
 801338a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801338c:	68b8      	ldr	r0, [r7, #8]
 801338e:	f7fd fb45 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013392:	6878      	ldr	r0, [r7, #4]
 8013394:	f7fe fab7 	bl	8011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8013398:	4602      	mov	r2, r0
 801339a:	f107 0318 	add.w	r3, r7, #24
 801339e:	4611      	mov	r1, r2
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7ff ffdc 	bl	801335e <_ZNSt5tupleIJRKSt4pairI3PinS1_EEEC1EOS5_>
 80133a6:	f107 0418 	add.w	r4, r7, #24
 80133aa:	6838      	ldr	r0, [r7, #0]
 80133ac:	f7fd fb4c 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	4619      	mov	r1, r3
 80133b4:	2018      	movs	r0, #24
 80133b6:	f7fa fe47 	bl	800e048 <_ZnwjPv>
 80133ba:	4605      	mov	r5, r0
 80133bc:	7f3b      	ldrb	r3, [r7, #28]
 80133be:	4622      	mov	r2, r4
 80133c0:	7d39      	ldrb	r1, [r7, #20]
 80133c2:	4628      	mov	r0, r5
 80133c4:	f000 f9e9 	bl	801379a <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 80133c8:	462b      	mov	r3, r5
 80133ca:	4618      	mov	r0, r3
 80133cc:	3720      	adds	r7, #32
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bdb0      	pop	{r4, r5, r7, pc}

080133d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80133d2:	b5b0      	push	{r4, r5, r7, lr}
 80133d4:	b084      	sub	sp, #16
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	60f8      	str	r0, [r7, #12]
 80133da:	60b9      	str	r1, [r7, #8]
 80133dc:	607a      	str	r2, [r7, #4]
 80133de:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7fd fb1b 	bl	8010a1c <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80133e6:	4604      	mov	r4, r0
 80133e8:	6838      	ldr	r0, [r7, #0]
 80133ea:	f7fe fa8c 	bl	8011906 <_ZSt7forwardISt5tupleIJRKSt4pairI3PinS2_EEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80133ee:	4605      	mov	r5, r0
 80133f0:	6a38      	ldr	r0, [r7, #32]
 80133f2:	f7fd fb29 	bl	8010a48 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80133f6:	4603      	mov	r3, r0
 80133f8:	462a      	mov	r2, r5
 80133fa:	4621      	mov	r1, r4
 80133fc:	68b8      	ldr	r0, [r7, #8]
 80133fe:	f7ff ffbe 	bl	801337e <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 8013402:	bf00      	nop
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bdb0      	pop	{r4, r5, r7, pc}

0801340a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801340a:	b580      	push	{r7, lr}
 801340c:	b084      	sub	sp, #16
 801340e:	af00      	add	r7, sp, #0
 8013410:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	68da      	ldr	r2, [r3, #12]
 8013416:	f107 030c 	add.w	r3, r7, #12
 801341a:	4611      	mov	r1, r2
 801341c:	4618      	mov	r0, r3
 801341e:	f7fe fc24 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	4618      	mov	r0, r3
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801342c:	b580      	push	{r7, lr}
 801342e:	b084      	sub	sp, #16
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013438:	68b8      	ldr	r0, [r7, #8]
 801343a:	f000 f9c2 	bl	80137c2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>
 801343e:	4603      	mov	r3, r0
 8013440:	681a      	ldr	r2, [r3, #0]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	601a      	str	r2, [r3, #0]
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f7ff fd55 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801344c:	4603      	mov	r3, r0
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	605a      	str	r2, [r3, #4]
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}

0801345e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801345e:	b580      	push	{r7, lr}
 8013460:	b082      	sub	sp, #8
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 f9b6 	bl	80137d8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 801346c:	4603      	mov	r3, r0
 801346e:	4618      	mov	r0, r3
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}

08013476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8013476:	b580      	push	{r7, lr}
 8013478:	b082      	sub	sp, #8
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8013480:	6838      	ldr	r0, [r7, #0]
 8013482:	f000 f9b4 	bl	80137ee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>
	}
 8013486:	bf00      	nop
 8013488:	3708      	adds	r7, #8
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}

0801348e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801348e:	b580      	push	{r7, lr}
 8013490:	b088      	sub	sp, #32
 8013492:	af00      	add	r7, sp, #0
 8013494:	60f8      	str	r0, [r7, #12]
 8013496:	60b9      	str	r1, [r7, #8]
 8013498:	607a      	str	r2, [r7, #4]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	61fb      	str	r3, [r7, #28]
 801349e:	68bb      	ldr	r3, [r7, #8]
 80134a0:	61bb      	str	r3, [r7, #24]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80134a6:	f7fa fdc7 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d003      	beq.n	80134b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 80134b0:	69b8      	ldr	r0, [r7, #24]
 80134b2:	f007 f975 	bl	801a7a0 <_ZdlPv>
	    return;
 80134b6:	e005      	b.n	80134c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80134b8:	697a      	ldr	r2, [r7, #20]
 80134ba:	69b9      	ldr	r1, [r7, #24]
 80134bc:	69f8      	ldr	r0, [r7, #28]
 80134be:	f000 faed 	bl	8013a9c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 80134c2:	bf00      	nop
 80134c4:	bf00      	nop
 80134c6:	3720      	adds	r7, #32
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>:
    destroy_at(_Tp* __location)
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
    }
 80134d4:	bf00      	nop
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134de:	4770      	bx	lr

080134e0 <_ZSt10destroy_atISt4pairIKhS0_I3PinS2_EEEvPT_>:
    destroy_at(_Tp* __location)
 80134e0:	b480      	push	{r7}
 80134e2:	b083      	sub	sp, #12
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
    }
 80134e8:	bf00      	nop
 80134ea:	370c      	adds	r7, #12
 80134ec:	46bd      	mov	sp, r7
 80134ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f2:	4770      	bx	lr

080134f4 <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80134f4:	b590      	push	{r4, r7, lr}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
 80134fc:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80134fe:	687c      	ldr	r4, [r7, #4]
 8013500:	6838      	ldr	r0, [r7, #0]
 8013502:	f000 f9e3 	bl	80138cc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 8013506:	4603      	mov	r3, r0
 8013508:	4618      	mov	r0, r3
 801350a:	f7fe fbe0 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801350e:	4603      	mov	r3, r0
 8013510:	4619      	mov	r1, r3
 8013512:	4620      	mov	r0, r4
 8013514:	f7fe fcc8 	bl	8011ea8 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	4618      	mov	r0, r3
 801351c:	370c      	adds	r7, #12
 801351e:	46bd      	mov	sp, r7
 8013520:	bd90      	pop	{r4, r7, pc}

08013522 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8013522:	b580      	push	{r7, lr}
 8013524:	b084      	sub	sp, #16
 8013526:	af00      	add	r7, sp, #0
 8013528:	60f8      	str	r0, [r7, #12]
 801352a:	60b9      	str	r1, [r7, #8]
 801352c:	607a      	str	r2, [r7, #4]
 801352e:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013530:	68b8      	ldr	r0, [r7, #8]
 8013532:	f000 f9d8 	bl	80138e6 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013536:	4603      	mov	r3, r0
 8013538:	4618      	mov	r0, r3
 801353a:	f7fe fbc8 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801353e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013540:	781a      	ldrb	r2, [r3, #0]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	701a      	strb	r2, [r3, #0]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	3304      	adds	r3, #4
 801354a:	4618      	mov	r0, r3
 801354c:	f7fa fd9c 	bl	800e088 <_ZN3PinC1Ev>
      { }
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4618      	mov	r0, r3
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}

0801355a <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801355a:	b5b0      	push	{r4, r5, r7, lr}
 801355c:	b086      	sub	sp, #24
 801355e:	af02      	add	r7, sp, #8
 8013560:	60f8      	str	r0, [r7, #12]
 8013562:	7239      	strb	r1, [r7, #8]
 8013564:	607a      	str	r2, [r7, #4]
 8013566:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013568:	463a      	mov	r2, r7
 801356a:	f88d 4000 	strb.w	r4, [sp]
 801356e:	462b      	mov	r3, r5
 8013570:	6879      	ldr	r1, [r7, #4]
 8013572:	68f8      	ldr	r0, [r7, #12]
 8013574:	f7ff ffd5 	bl	8013522 <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	4618      	mov	r0, r3
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bdb0      	pop	{r4, r5, r7, pc}

08013582 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013582:	b480      	push	{r7}
 8013584:	b083      	sub	sp, #12
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	4618      	mov	r0, r3
 801358e:	370c      	adds	r7, #12
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr

08013598 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() const noexcept
 8013598:	b480      	push	{r7}
 801359a:	b083      	sub	sp, #12
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	4618      	mov	r0, r3
 80135a4:	370c      	adds	r7, #12
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b084      	sub	sp, #16
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	60f8      	str	r0, [r7, #12]
 80135b6:	60b9      	str	r1, [r7, #8]
 80135b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	00db      	lsls	r3, r3, #3
 80135be:	4619      	mov	r1, r3
 80135c0:	68b8      	ldr	r0, [r7, #8]
 80135c2:	f007 f8ef 	bl	801a7a4 <_ZdlPvj>
      }
 80135c6:	3710      	adds	r7, #16
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <_ZNSt4pairIKhS_I3PinS1_EEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
 80135d8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80135da:	68b8      	ldr	r0, [r7, #8]
 80135dc:	f000 f983 	bl	80138e6 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80135e0:	4603      	mov	r3, r0
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fe fb73 	bl	8011cce <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80135e8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80135ea:	781a      	ldrb	r2, [r3, #0]
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	701a      	strb	r2, [r3, #0]
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	3304      	adds	r3, #4
 80135f4:	4618      	mov	r0, r3
 80135f6:	f000 f9a5 	bl	8013944 <_ZNSt4pairI3PinS0_EC1IS0_S0_Lb1EEEv>
      { }
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	4618      	mov	r0, r3
 80135fe:	3710      	adds	r7, #16
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <_ZNSt4pairIKhS_I3PinS1_EEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013604:	b5b0      	push	{r4, r5, r7, lr}
 8013606:	b086      	sub	sp, #24
 8013608:	af02      	add	r7, sp, #8
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	7239      	strb	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
 8013610:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013612:	463a      	mov	r2, r7
 8013614:	f88d 4000 	strb.w	r4, [sp]
 8013618:	462b      	mov	r3, r5
 801361a:	6879      	ldr	r1, [r7, #4]
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f7ff ffd5 	bl	80135cc <_ZNSt4pairIKhS_I3PinS1_EEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	4618      	mov	r0, r3
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bdb0      	pop	{r4, r5, r7, pc}

0801362c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhS1_I3PinS3_EEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801362c:	b480      	push	{r7}
 801362e:	b083      	sub	sp, #12
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4618      	mov	r0, r3
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhS1_I3PinS3_EEE7_M_addrEv>:
      _M_addr() const noexcept
 8013642:	b480      	push	{r7}
 8013644:	b083      	sub	sp, #12
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	370c      	adds	r7, #12
 8013650:	46bd      	mov	sp, r7
 8013652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013656:	4770      	bx	lr

08013658 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013658:	b590      	push	{r4, r7, lr}
 801365a:	b083      	sub	sp, #12
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013662:	687c      	ldr	r4, [r7, #4]
 8013664:	6838      	ldr	r0, [r7, #0]
 8013666:	f000 f99e 	bl	80139a6 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 801366a:	4603      	mov	r3, r0
 801366c:	4618      	mov	r0, r3
 801366e:	f000 f9a7 	bl	80139c0 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 8013672:	4603      	mov	r3, r0
 8013674:	4619      	mov	r1, r3
 8013676:	4620      	mov	r0, r4
 8013678:	f7fe ffbd 	bl	80125f6 <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	4618      	mov	r0, r3
 8013680:	370c      	adds	r7, #12
 8013682:	46bd      	mov	sp, r7
 8013684:	bd90      	pop	{r4, r7, pc}

08013686 <_ZNSt4pairIK3Pin12TimerChannelEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013686:	b580      	push	{r7, lr}
 8013688:	b084      	sub	sp, #16
 801368a:	af00      	add	r7, sp, #0
 801368c:	60f8      	str	r0, [r7, #12]
 801368e:	60b9      	str	r1, [r7, #8]
 8013690:	607a      	str	r2, [r7, #4]
 8013692:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013694:	68b8      	ldr	r0, [r7, #8]
 8013696:	f000 f99e 	bl	80139d6 <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 801369a:	4603      	mov	r3, r0
 801369c:	4618      	mov	r0, r3
 801369e:	f000 f98f 	bl	80139c0 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 80136a2:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80136aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	2200      	movs	r2, #0
 80136b2:	609a      	str	r2, [r3, #8]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2200      	movs	r2, #0
 80136b8:	60da      	str	r2, [r3, #12]
      { }
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	4618      	mov	r0, r3
 80136be:	3710      	adds	r7, #16
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <_ZNSt4pairIK3Pin12TimerChannelEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 80136c4:	b5b0      	push	{r4, r5, r7, lr}
 80136c6:	b086      	sub	sp, #24
 80136c8:	af02      	add	r7, sp, #8
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	7239      	strb	r1, [r7, #8]
 80136ce:	607a      	str	r2, [r7, #4]
 80136d0:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80136d2:	463a      	mov	r2, r7
 80136d4:	f88d 4000 	strb.w	r4, [sp]
 80136d8:	462b      	mov	r3, r5
 80136da:	6879      	ldr	r1, [r7, #4]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f7ff ffd2 	bl	8013686 <_ZNSt4pairIK3Pin12TimerChannelEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	4618      	mov	r0, r3
 80136e6:	3710      	adds	r7, #16
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bdb0      	pop	{r4, r5, r7, pc}

080136ec <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80136ec:	b480      	push	{r7}
 80136ee:	b083      	sub	sp, #12
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	4618      	mov	r0, r3
 80136f8:	370c      	adds	r7, #12
 80136fa:	46bd      	mov	sp, r7
 80136fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013700:	4770      	bx	lr

08013702 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 8013702:	b480      	push	{r7}
 8013704:	b083      	sub	sp, #12
 8013706:	af00      	add	r7, sp, #0
 8013708:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4618      	mov	r0, r3
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
    }
 8013720:	bf00      	nop
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr

0801372c <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEEC1EOS5_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b083      	sub	sp, #12
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013736:	687c      	ldr	r4, [r7, #4]
 8013738:	6838      	ldr	r0, [r7, #0]
 801373a:	f000 f98a 	bl	8013a52 <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEE7_M_headERS5_>
 801373e:	4603      	mov	r3, r0
 8013740:	4618      	mov	r0, r3
 8013742:	f000 f993 	bl	8013a6c <_ZSt7forwardIRKSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS5_E4typeE>
 8013746:	4603      	mov	r3, r0
 8013748:	4619      	mov	r1, r3
 801374a:	4620      	mov	r0, r4
 801374c:	f7ff f936 	bl	80129bc <_ZNSt10_Head_baseILj0ERKSt4pairI3PinS1_ELb0EEC1ES4_>
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4618      	mov	r0, r3
 8013754:	370c      	adds	r7, #12
 8013756:	46bd      	mov	sp, r7
 8013758:	bd90      	pop	{r4, r7, pc}

0801375a <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801375a:	b590      	push	{r4, r7, lr}
 801375c:	b085      	sub	sp, #20
 801375e:	af00      	add	r7, sp, #0
 8013760:	60f8      	str	r0, [r7, #12]
 8013762:	60b9      	str	r1, [r7, #8]
 8013764:	607a      	str	r2, [r7, #4]
 8013766:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013768:	68b8      	ldr	r0, [r7, #8]
 801376a:	f000 f98a 	bl	8013a82 <_ZSt3getILj0EJRKSt4pairI3PinS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>
 801376e:	4603      	mov	r3, r0
 8013770:	4618      	mov	r0, r3
 8013772:	f000 f97b 	bl	8013a6c <_ZSt7forwardIRKSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS5_E4typeE>
 8013776:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	461c      	mov	r4, r3
 801377c:	4613      	mov	r3, r2
 801377e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2200      	movs	r2, #0
 8013788:	611a      	str	r2, [r3, #16]
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2200      	movs	r2, #0
 801378e:	615a      	str	r2, [r3, #20]
      { }
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	4618      	mov	r0, r3
 8013794:	3714      	adds	r7, #20
 8013796:	46bd      	mov	sp, r7
 8013798:	bd90      	pop	{r4, r7, pc}

0801379a <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 801379a:	b5b0      	push	{r4, r5, r7, lr}
 801379c:	b086      	sub	sp, #24
 801379e:	af02      	add	r7, sp, #8
 80137a0:	60f8      	str	r0, [r7, #12]
 80137a2:	7239      	strb	r1, [r7, #8]
 80137a4:	607a      	str	r2, [r7, #4]
 80137a6:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80137a8:	463a      	mov	r2, r7
 80137aa:	f88d 4000 	strb.w	r4, [sp]
 80137ae:	462b      	mov	r3, r5
 80137b0:	6879      	ldr	r1, [r7, #4]
 80137b2:	68f8      	ldr	r0, [r7, #12]
 80137b4:	f7ff ffd1 	bl	801375a <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bdb0      	pop	{r4, r5, r7, pc}

080137c2 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80137c2:	b480      	push	{r7}
 80137c4:	b083      	sub	sp, #12
 80137c6:	af00      	add	r7, sp, #0
 80137c8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4618      	mov	r0, r3
 80137ce:	370c      	adds	r7, #12
 80137d0:	46bd      	mov	sp, r7
 80137d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d6:	4770      	bx	lr

080137d8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	4618      	mov	r0, r3
 80137e4:	370c      	adds	r7, #12
 80137e6:	46bd      	mov	sp, r7
 80137e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ec:	4770      	bx	lr

080137ee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 80137ee:	b480      	push	{r7}
 80137f0:	b083      	sub	sp, #12
 80137f2:	af00      	add	r7, sp, #0
 80137f4:	6078      	str	r0, [r7, #4]
    }
 80137f6:	bf00      	nop
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr

08013802 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013802:	b580      	push	{r7, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	af00      	add	r7, sp, #0
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	60b9      	str	r1, [r7, #8]
 801380c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801380e:	68f8      	ldr	r0, [r7, #12]
 8013810:	f000 f956 	bl	8013ac0 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>
 8013814:	4602      	mov	r2, r0
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	4293      	cmp	r3, r2
 801381a:	bf8c      	ite	hi
 801381c:	2301      	movhi	r3, #1
 801381e:	2300      	movls	r3, #0
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	d001      	beq.n	801382a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013826:	f007 f883 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	00db      	lsls	r3, r3, #3
 801382e:	4618      	mov	r0, r3
 8013830:	f006 ffba 	bl	801a7a8 <_Znwj>
 8013834:	4603      	mov	r3, r0
 8013836:	bf00      	nop
      }
 8013838:	4618      	mov	r0, r3
 801383a:	3710      	adds	r7, #16
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 8013840:	b580      	push	{r7, lr}
 8013842:	b084      	sub	sp, #16
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	4613      	mov	r3, r2
 8013850:	00db      	lsls	r3, r3, #3
 8013852:	1a9b      	subs	r3, r3, r2
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	4619      	mov	r1, r3
 8013858:	68b8      	ldr	r0, [r7, #8]
 801385a:	f006 ffa3 	bl	801a7a4 <_ZdlPvj>
      }
 801385e:	3710      	adds	r7, #16
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	60f8      	str	r0, [r7, #12]
 801386c:	60b9      	str	r1, [r7, #8]
 801386e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013870:	687a      	ldr	r2, [r7, #4]
 8013872:	4613      	mov	r3, r2
 8013874:	00db      	lsls	r3, r3, #3
 8013876:	4413      	add	r3, r2
 8013878:	009b      	lsls	r3, r3, #2
 801387a:	4619      	mov	r1, r3
 801387c:	68b8      	ldr	r0, [r7, #8]
 801387e:	f006 ff91 	bl	801a7a4 <_ZdlPvj>
      }
 8013882:	3710      	adds	r7, #16
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	60f8      	str	r0, [r7, #12]
 8013890:	60b9      	str	r1, [r7, #8]
 8013892:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f000 f91f 	bl	8013ad8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>
 801389a:	4602      	mov	r2, r0
 801389c:	68bb      	ldr	r3, [r7, #8]
 801389e:	4293      	cmp	r3, r2
 80138a0:	bf8c      	ite	hi
 80138a2:	2301      	movhi	r3, #1
 80138a4:	2300      	movls	r3, #0
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d001      	beq.n	80138b0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80138ac:	f007 f840 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	4613      	mov	r3, r2
 80138b4:	00db      	lsls	r3, r3, #3
 80138b6:	1a9b      	subs	r3, r3, r2
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	4618      	mov	r0, r3
 80138bc:	f006 ff74 	bl	801a7a8 <_Znwj>
 80138c0:	4603      	mov	r3, r0
 80138c2:	bf00      	nop
      }
 80138c4:	4618      	mov	r0, r3
 80138c6:	3710      	adds	r7, #16
 80138c8:	46bd      	mov	sp, r7
 80138ca:	bd80      	pop	{r7, pc}

080138cc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 f90c 	bl	8013af4 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 80138dc:	4603      	mov	r3, r0
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}

080138e6 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b082      	sub	sp, #8
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	4618      	mov	r0, r3
 80138f2:	f000 f90b 	bl	8013b0c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 80138f6:	4603      	mov	r3, r0
 80138f8:	4618      	mov	r0, r3
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f000 f909 	bl	8013b24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE11_M_max_sizeEv>
 8013912:	4602      	mov	r2, r0
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	4293      	cmp	r3, r2
 8013918:	bf8c      	ite	hi
 801391a:	2301      	movhi	r3, #1
 801391c:	2300      	movls	r3, #0
 801391e:	b2db      	uxtb	r3, r3
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013924:	f007 f804 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013928:	68ba      	ldr	r2, [r7, #8]
 801392a:	4613      	mov	r3, r2
 801392c:	00db      	lsls	r3, r3, #3
 801392e:	4413      	add	r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	4618      	mov	r0, r3
 8013934:	f006 ff38 	bl	801a7a8 <_Znwj>
 8013938:	4603      	mov	r3, r0
 801393a:	bf00      	nop
      }
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}

08013944 <_ZNSt4pairI3PinS0_EC1IS0_S0_Lb1EEEv>:
      _GLIBCXX_CONSTEXPR pair()
 8013944:	b580      	push	{r7, lr}
 8013946:	b082      	sub	sp, #8
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
      : first(), second() { }
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	f7fa fb9a 	bl	800e088 <_ZN3PinC1Ev>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	3308      	adds	r3, #8
 8013958:	4618      	mov	r0, r3
 801395a:	f7fa fb95 	bl	800e088 <_ZN3PinC1Ev>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	4618      	mov	r0, r3
 8013962:	3708      	adds	r7, #8
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}

08013968 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013974:	68f8      	ldr	r0, [r7, #12]
 8013976:	f000 f8e3 	bl	8013b40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>
 801397a:	4602      	mov	r2, r0
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	4293      	cmp	r3, r2
 8013980:	bf8c      	ite	hi
 8013982:	2301      	movhi	r3, #1
 8013984:	2300      	movls	r3, #0
 8013986:	b2db      	uxtb	r3, r3
 8013988:	2b00      	cmp	r3, #0
 801398a:	d001      	beq.n	8013990 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801398c:	f006 ffd0 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013990:	68bb      	ldr	r3, [r7, #8]
 8013992:	015b      	lsls	r3, r3, #5
 8013994:	4618      	mov	r0, r3
 8013996:	f006 ff07 	bl	801a7a8 <_Znwj>
 801399a:	4603      	mov	r3, r0
 801399c:	bf00      	nop
      }
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 f8d1 	bl	8013b58 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>
 80139b6:	4603      	mov	r3, r0
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	4618      	mov	r0, r3
 80139cc:	370c      	adds	r7, #12
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr

080139d6 <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b082      	sub	sp, #8
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4618      	mov	r0, r3
 80139e2:	f000 f8c5 	bl	8013b70 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80139e6:	4603      	mov	r3, r0
 80139e8:	4618      	mov	r0, r3
 80139ea:	3708      	adds	r7, #8
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b084      	sub	sp, #16
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	015b      	lsls	r3, r3, #5
 8013a00:	4619      	mov	r1, r3
 8013a02:	68b8      	ldr	r0, [r7, #8]
 8013a04:	f006 fece 	bl	801a7a4 <_ZdlPvj>
      }
 8013a08:	3710      	adds	r7, #16
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}

08013a0e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013a0e:	b580      	push	{r7, lr}
 8013a10:	b084      	sub	sp, #16
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	60f8      	str	r0, [r7, #12]
 8013a16:	60b9      	str	r1, [r7, #8]
 8013a18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013a1a:	68f8      	ldr	r0, [r7, #12]
 8013a1c:	f000 f8b4 	bl	8013b88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>
 8013a20:	4602      	mov	r2, r0
 8013a22:	68bb      	ldr	r3, [r7, #8]
 8013a24:	4293      	cmp	r3, r2
 8013a26:	bf8c      	ite	hi
 8013a28:	2301      	movhi	r3, #1
 8013a2a:	2300      	movls	r3, #0
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013a32:	f006 ff7d 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013a36:	68ba      	ldr	r2, [r7, #8]
 8013a38:	4613      	mov	r3, r2
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	4413      	add	r3, r2
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	4618      	mov	r0, r3
 8013a42:	f006 feb1 	bl	801a7a8 <_Znwj>
 8013a46:	4603      	mov	r3, r0
 8013a48:	bf00      	nop
      }
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3710      	adds	r7, #16
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}

08013a52 <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEE7_M_headERS5_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b082      	sub	sp, #8
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f000 f8a1 	bl	8013ba4 <_ZNSt10_Head_baseILj0ERKSt4pairI3PinS1_ELb0EE7_M_headERS5_>
 8013a62:	4603      	mov	r3, r0
 8013a64:	4618      	mov	r0, r3
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <_ZSt7forwardIRKSt4pairI3PinS1_EEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013a6c:	b480      	push	{r7}
 8013a6e:	b083      	sub	sp, #12
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	4618      	mov	r0, r3
 8013a78:	370c      	adds	r7, #12
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <_ZSt3getILj0EJRKSt4pairI3PinS1_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS9_>:
    get(tuple<_Elements...>& __t) noexcept
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b082      	sub	sp, #8
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f000 f895 	bl	8013bbc <_ZSt12__get_helperILj0ERKSt4pairI3PinS1_EJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>
 8013a92:	4603      	mov	r3, r0
 8013a94:	4618      	mov	r0, r3
 8013a96:	3708      	adds	r7, #8
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd80      	pop	{r7, pc}

08013a9c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	4613      	mov	r3, r2
 8013aac:	009b      	lsls	r3, r3, #2
 8013aae:	4413      	add	r3, r2
 8013ab0:	00db      	lsls	r3, r3, #3
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	68b8      	ldr	r0, [r7, #8]
 8013ab6:	f006 fe75 	bl	801a7a4 <_ZdlPvj>
      }
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013ac8:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8013acc:	4618      	mov	r0, r3
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013ae0:	4b03      	ldr	r3, [pc, #12]	; (8013af0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv+0x18>)
      }
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	370c      	adds	r7, #12
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop
 8013af0:	04924924 	.word	0x04924924

08013af4 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	4618      	mov	r0, r3
 8013b02:	370c      	adds	r7, #12
 8013b04:	46bd      	mov	sp, r7
 8013b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0a:	4770      	bx	lr

08013b0c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f7ff fed9 	bl	80138cc <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b2c:	4b03      	ldr	r3, [pc, #12]	; (8013b3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhS2_I3PinS4_EEEE11_M_max_sizeEv+0x18>)
      }
 8013b2e:	4618      	mov	r0, r3
 8013b30:	370c      	adds	r7, #12
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop
 8013b3c:	038e38e3 	.word	0x038e38e3

08013b40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b40:	b480      	push	{r7}
 8013b42:	b083      	sub	sp, #12
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b48:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	370c      	adds	r7, #12
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr

08013b58 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013b58:	b480      	push	{r7}
 8013b5a:	b083      	sub	sp, #12
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	4618      	mov	r0, r3
 8013b66:	370c      	adds	r7, #12
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b082      	sub	sp, #8
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f7ff ff14 	bl	80139a6 <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	4618      	mov	r0, r3
 8013b82:	3708      	adds	r7, #8
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b90:	4b03      	ldr	r3, [pc, #12]	; (8013ba0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv+0x18>)
      }
 8013b92:	4618      	mov	r0, r3
 8013b94:	370c      	adds	r7, #12
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	03333333 	.word	0x03333333

08013ba4 <_ZNSt10_Head_baseILj0ERKSt4pairI3PinS1_ELb0EE7_M_headERS5_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013ba4:	b480      	push	{r7}
 8013ba6:	b083      	sub	sp, #12
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <_ZSt12__get_helperILj0ERKSt4pairI3PinS1_EJEERT0_RSt11_Tuple_implIXT_EJS5_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff ff44 	bl	8013a52 <_ZNSt11_Tuple_implILj0EJRKSt4pairI3PinS1_EEE7_M_headERS5_>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3708      	adds	r7, #8
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <_Z41__static_initialization_and_destruction_0ii>:
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b0c6      	sub	sp, #280	; 0x118
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bde:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013be2:	6018      	str	r0, [r3, #0]
 8013be4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013be8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013bec:	6019      	str	r1, [r3, #0]
 8013bee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013bf2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d15a      	bne.n	8013cb2 <_Z41__static_initialization_and_destruction_0ii+0xde>
 8013bfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d151      	bne.n	8013cb2 <_Z41__static_initialization_and_destruction_0ii+0xde>
forward_list<uint8_t> PWM::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8013c0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013c16:	4a37      	ldr	r2, [pc, #220]	; (8013cf4 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8013c18:	4618      	mov	r0, r3
 8013c1a:	4611      	mov	r1, r2
 8013c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013c20:	461a      	mov	r2, r3
 8013c22:	f006 ff1b 	bl	801aa5c <memcpy>
 8013c26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013c2e:	f107 0214 	add.w	r2, r7, #20
 8013c32:	601a      	str	r2, [r3, #0]
 8013c34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c38:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8013c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c40:	605a      	str	r2, [r3, #4]
 8013c42:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fb fc6e 	bl	800f528 <_ZNSaIhEC1Ev>
 8013c4c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013c50:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013c54:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8013c58:	ca06      	ldmia	r2, {r1, r2}
 8013c5a:	4827      	ldr	r0, [pc, #156]	; (8013cf8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8013c5c:	f7fb fc7b 	bl	800f556 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8013c60:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fb fc6b 	bl	800f540 <_ZNSaIhED1Ev>
map<uint8_t,Pin> PWM::service_ids = {};
 8013c6a:	4b24      	ldr	r3, [pc, #144]	; (8013cfc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	2300      	movs	r3, #0
 8013c70:	6013      	str	r3, [r2, #0]
 8013c72:	6053      	str	r3, [r2, #4]
 8013c74:	6093      	str	r3, [r2, #8]
 8013c76:	60d3      	str	r3, [r2, #12]
 8013c78:	6113      	str	r3, [r2, #16]
 8013c7a:	6153      	str	r3, [r2, #20]
 8013c7c:	481f      	ldr	r0, [pc, #124]	; (8013cfc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8013c7e:	f7fb fa54 	bl	800f12a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
map<uint8_t,Pin> PWM::service_ids_negated = {};
 8013c82:	4b1f      	ldr	r3, [pc, #124]	; (8013d00 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8013c84:	461a      	mov	r2, r3
 8013c86:	2300      	movs	r3, #0
 8013c88:	6013      	str	r3, [r2, #0]
 8013c8a:	6053      	str	r3, [r2, #4]
 8013c8c:	6093      	str	r3, [r2, #8]
 8013c8e:	60d3      	str	r3, [r2, #12]
 8013c90:	6113      	str	r3, [r2, #16]
 8013c92:	6153      	str	r3, [r2, #20]
 8013c94:	481a      	ldr	r0, [pc, #104]	; (8013d00 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8013c96:	f7fb fa48 	bl	800f12a <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
map<uint8_t,pair<Pin, Pin>> PWM::service_ids_dual = {};
 8013c9a:	4b1a      	ldr	r3, [pc, #104]	; (8013d04 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8013c9c:	461a      	mov	r2, r3
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	6013      	str	r3, [r2, #0]
 8013ca2:	6053      	str	r3, [r2, #4]
 8013ca4:	6093      	str	r3, [r2, #8]
 8013ca6:	60d3      	str	r3, [r2, #12]
 8013ca8:	6113      	str	r3, [r2, #16]
 8013caa:	6153      	str	r3, [r2, #20]
 8013cac:	4815      	ldr	r0, [pc, #84]	; (8013d04 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8013cae:	f7fb fa6f 	bl	800f190 <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEEC1Ev>
 8013cb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cb6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d114      	bne.n	8013cea <_Z41__static_initialization_and_destruction_0ii+0x116>
 8013cc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013cc4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cce:	4293      	cmp	r3, r2
 8013cd0:	d10b      	bne.n	8013cea <_Z41__static_initialization_and_destruction_0ii+0x116>
 8013cd2:	480c      	ldr	r0, [pc, #48]	; (8013d04 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8013cd4:	f7fb fa69 	bl	800f1aa <_ZNSt3mapIhSt4pairI3PinS1_ESt4lessIhESaIS0_IKhS2_EEED1Ev>
map<uint8_t,Pin> PWM::service_ids_negated = {};
 8013cd8:	4809      	ldr	r0, [pc, #36]	; (8013d00 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8013cda:	f7fb fa33 	bl	800f144 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
map<uint8_t,Pin> PWM::service_ids = {};
 8013cde:	4807      	ldr	r0, [pc, #28]	; (8013cfc <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8013ce0:	f7fb fa30 	bl	800f144 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
forward_list<uint8_t> PWM::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8013ce4:	4804      	ldr	r0, [pc, #16]	; (8013cf8 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8013ce6:	f7fb fc64 	bl	800f5b2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8013cea:	bf00      	nop
 8013cec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	0801af90 	.word	0x0801af90
 8013cf8:	24000f90 	.word	0x24000f90
 8013cfc:	24000f94 	.word	0x24000f94
 8013d00:	24000fac 	.word	0x24000fac
 8013d04:	24000fc4 	.word	0x24000fc4

08013d08 <_GLOBAL__sub_I__ZN3PWM10id_managerE>:
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013d10:	2001      	movs	r0, #1
 8013d12:	f7ff ff5f 	bl	8013bd4 <_Z41__static_initialization_and_destruction_0ii>
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <_GLOBAL__sub_D__ZN3PWM10id_managerE>:
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	af00      	add	r7, sp, #0
 8013d1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013d20:	2000      	movs	r0, #0
 8013d22:	f7ff ff57 	bl	8013bd4 <_Z41__static_initialization_and_destruction_0ii>
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8013d28:	b480      	push	{r7}
 8013d2a:	b083      	sub	sp, #12
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2200      	movs	r2, #0
 8013d34:	609a      	str	r2, [r3, #8]
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	370c      	adds	r7, #12
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr

08013d44 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d005      	beq.n	8013d60 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	6879      	ldr	r1, [r7, #4]
 8013d5c:	2203      	movs	r2, #3
 8013d5e:	4798      	blx	r3
    }
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	4618      	mov	r0, r3
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8013d6a:	b480      	push	{r7}
 8013d6c:	b083      	sub	sp, #12
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	6078      	str	r0, [r7, #4]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	bf0c      	ite	eq
 8013d7a:	2301      	moveq	r3, #1
 8013d7c:	2300      	movne	r3, #0
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	4618      	mov	r0, r3
 8013d82:	370c      	adds	r7, #12
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6878      	ldr	r0, [r7, #4]
 8013d96:	f000 f927 	bl	8013fe8 <_ZNSaImED1Ev>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	3708      	adds	r7, #8
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}

08013da4 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      _Vector_base() = default;
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f000 f90a 	bl	8013fc8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	4618      	mov	r0, r3
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}

08013dbe <_ZNSt6vectorImSaImEEC1Ev>:
      vector() = default;
 8013dbe:	b580      	push	{r7, lr}
 8013dc0:	b082      	sub	sp, #8
 8013dc2:	af00      	add	r7, sp, #0
 8013dc4:	6078      	str	r0, [r7, #4]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4618      	mov	r0, r3
 8013dca:	f7ff ffeb 	bl	8013da4 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>:
public:
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_HandleTypeDef* handle, uint16_t period) : handle(handle), period(period) {};
 8013dd8:	b480      	push	{r7}
 8013dda:	b085      	sub	sp, #20
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	4613      	mov	r3, r2
 8013de4:	80fb      	strh	r3, [r7, #6]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	68ba      	ldr	r2, [r7, #8]
 8013dea:	601a      	str	r2, [r3, #0]
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	88fa      	ldrh	r2, [r7, #6]
 8013df0:	809a      	strh	r2, [r3, #4]
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	4618      	mov	r0, r3
 8013df6:	3714      	adds	r7, #20
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfe:	4770      	bx	lr

08013e00 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b082      	sub	sp, #8
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ff ff9a 	bl	8013d44 <_ZNSt14_Function_baseD1Ev>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	f000 f995 	bl	8014154 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	60b9      	str	r1, [r7, #8]
 8013e3e:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8013e40:	68b8      	ldr	r0, [r7, #8]
 8013e42:	f7fc f91e 	bl	8010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8013e46:	4602      	mov	r2, r0
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	3308      	adds	r3, #8
 8013e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013e5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	4618      	mov	r0, r3
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>:
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b082      	sub	sp, #8
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f000 f9c9 	bl	801420c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3708      	adds	r7, #8
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f000 f9e7 	bl	8014260 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	4618      	mov	r0, r3
 8013e96:	3708      	adds	r7, #8
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f000 f9c5 	bl	8014236 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>:
      map() = default;
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b082      	sub	sp, #8
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7ff ffeb 	bl	8013e9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>:
      ~map() = default;
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b082      	sub	sp, #8
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	4618      	mov	r0, r3
 8013edc:	f000 fa37 	bl	801434e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 8013eea:	b580      	push	{r7, lr}
 8013eec:	b082      	sub	sp, #8
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f000 fab4 	bl	8014462 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	4618      	mov	r0, r3
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <_ZN3ADC8InitDataD1Ev>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	330c      	adds	r3, #12
 8013f10:	4618      	mov	r0, r3
 8013f12:	f000 f88d 	bl	8014030 <_ZNSt6vectorImSaImEED1Ev>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}

08013f20 <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	3310      	adds	r3, #16
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	f7ff ffe9 	bl	8013f04 <_ZN3ADC8InitDataD1Ev>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 8013f3c:	b580      	push	{r7, lr}
 8013f3e:	b082      	sub	sp, #8
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	4618      	mov	r0, r3
 8013f48:	f000 fb10 	bl	801456c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3708      	adds	r7, #8
 8013f52:	46bd      	mov	sp, r7
 8013f54:	bd80      	pop	{r7, pc}

08013f56 <_ZN17ExternalInterrupt8InstanceC1Ev>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 8013f56:	b580      	push	{r7, lr}
 8013f58:	b082      	sub	sp, #8
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2100      	movs	r1, #0
 8013f62:	4618      	mov	r0, r3
 8013f64:	f000 f87f 	bl	8014066 <_ZNSt8functionIFvvEEC1EDn>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2201      	movs	r2, #1
 8013f6c:	741a      	strb	r2, [r3, #16]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	4618      	mov	r0, r3
 8013f72:	3708      	adds	r7, #8
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <_ZN17ExternalInterrupt8InstanceD1Ev>:
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7ff ff3c 	bl	8013e00 <_ZNSt8functionIFvvEED1Ev>
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3708      	adds	r7, #8
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	bd80      	pop	{r7, pc}

08013f92 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 8013f92:	b580      	push	{r7, lr}
 8013f94:	b082      	sub	sp, #8
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	6078      	str	r0, [r7, #4]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	3304      	adds	r3, #4
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7ff ffea 	bl	8013f78 <_ZN17ExternalInterrupt8InstanceD1Ev>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3708      	adds	r7, #8
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}

08013fae <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
 8013fae:	b580      	push	{r7, lr}
 8013fb0:	b082      	sub	sp, #8
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f000 fb7a 	bl	80146b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	3708      	adds	r7, #8
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd80      	pop	{r7, pc}

08013fc8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f000 fb83 	bl	80146dc <_ZNSaImEC1Ev>
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f000 fb8b 	bl	80146f4 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	370c      	adds	r7, #12
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffc:	4770      	bx	lr

08013ffe <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b082      	sub	sp, #8
 8014002:	af00      	add	r7, sp, #0
 8014004:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	689a      	ldr	r2, [r3, #8]
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8014016:	461a      	mov	r2, r3
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f000 fb7f 	bl	801471c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff feb3 	bl	8013d8c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	4618      	mov	r0, r3
 801402a:	3708      	adds	r7, #8
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8014030:	b5b0      	push	{r4, r5, r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681c      	ldr	r4, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4618      	mov	r0, r3
 8014044:	f000 fb7d 	bl	8014742 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8014048:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801404a:	461a      	mov	r2, r3
 801404c:	4629      	mov	r1, r5
 801404e:	4620      	mov	r0, r4
 8014050:	f000 fb82 	bl	8014758 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	4618      	mov	r0, r3
 8014058:	f7ff ffd1 	bl	8013ffe <_ZNSt12_Vector_baseImSaImEED1Ev>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	4618      	mov	r0, r3
 8014060:	3708      	adds	r7, #8
 8014062:	46bd      	mov	sp, r7
 8014064:	bdb0      	pop	{r4, r5, r7, pc}

08014066 <_ZNSt8functionIFvvEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 8014066:	b580      	push	{r7, lr}
 8014068:	b082      	sub	sp, #8
 801406a:	af00      	add	r7, sp, #0
 801406c:	6078      	str	r0, [r7, #4]
 801406e:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	4618      	mov	r0, r3
 8014074:	f7ff fe58 	bl	8013d28 <_ZNSt14_Function_baseC1Ev>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	4618      	mov	r0, r3
 801407c:	3708      	adds	r7, #8
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8014082:	b490      	push	{r4, r7}
 8014084:	b084      	sub	sp, #16
 8014086:	af00      	add	r7, sp, #0
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 801408e:	68fa      	ldr	r2, [r7, #12]
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	4614      	mov	r4, r2
 8014094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	611a      	str	r2, [r3, #16]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bc90      	pop	{r4, r7}
 80140ac:	4770      	bx	lr

080140ae <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80140ae:	b580      	push	{r7, lr}
 80140b0:	b082      	sub	sp, #8
 80140b2:	af00      	add	r7, sp, #0
 80140b4:	6078      	str	r0, [r7, #4]
 80140b6:	6878      	ldr	r0, [r7, #4]
 80140b8:	f000 fb5c 	bl	8014774 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	4618      	mov	r0, r3
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}

080140c6 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80140c6:	b480      	push	{r7}
 80140c8:	b083      	sub	sp, #12
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	6078      	str	r0, [r7, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	4618      	mov	r0, r3
 80140d2:	370c      	adds	r7, #12
 80140d4:	46bd      	mov	sp, r7
 80140d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140da:	4770      	bx	lr

080140dc <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 80140dc:	b5b0      	push	{r4, r5, r7, lr}
 80140de:	b086      	sub	sp, #24
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	1d38      	adds	r0, r7, #4
 80140e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80140ea:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80140ec:	68fc      	ldr	r4, [r7, #12]
 80140ee:	f107 0314 	add.w	r3, r7, #20
 80140f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80140f4:	4618      	mov	r0, r3
 80140f6:	f000 fb48 	bl	801478a <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>
 80140fa:	f107 0314 	add.w	r3, r7, #20
 80140fe:	461a      	mov	r2, r3
 8014100:	6839      	ldr	r1, [r7, #0]
 8014102:	4620      	mov	r0, r4
 8014104:	f000 fb4f 	bl	80147a6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 8014108:	f107 0314 	add.w	r3, r7, #20
 801410c:	4618      	mov	r0, r3
 801410e:	f7ff ffda 	bl	80140c6 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8014112:	68fc      	ldr	r4, [r7, #12]
 8014114:	1d3b      	adds	r3, r7, #4
 8014116:	4618      	mov	r0, r3
 8014118:	f000 fb63 	bl	80147e2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 801411c:	4605      	mov	r5, r0
 801411e:	1d3b      	adds	r3, r7, #4
 8014120:	4618      	mov	r0, r3
 8014122:	f000 fb6a 	bl	80147fa <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>
 8014126:	4603      	mov	r3, r0
 8014128:	461a      	mov	r2, r3
 801412a:	4629      	mov	r1, r5
 801412c:	4620      	mov	r0, r4
 801412e:	f000 fb79 	bl	8014824 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	4618      	mov	r0, r3
 8014136:	3718      	adds	r7, #24
 8014138:	46bd      	mov	sp, r7
 801413a:	bdb0      	pop	{r4, r5, r7, pc}

0801413c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 fb99 	bl	801487c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	4618      	mov	r0, r3
 801414e:	3708      	adds	r7, #8
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}

08014154 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fbb7 	bl	80148d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8014162:	4603      	mov	r3, r0
 8014164:	4619      	mov	r1, r3
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 fb93 	bl	8014892 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff ffe4 	bl	801413c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	4618      	mov	r0, r3
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801417e:	b580      	push	{r7, lr}
 8014180:	b082      	sub	sp, #8
 8014182:	af00      	add	r7, sp, #0
 8014184:	6078      	str	r0, [r7, #4]
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 fbae 	bl	80148e8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	4618      	mov	r0, r3
 8014190:	3708      	adds	r7, #8
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}

08014196 <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014196:	b480      	push	{r7}
 8014198:	b083      	sub	sp, #12
 801419a:	af00      	add	r7, sp, #0
 801419c:	6078      	str	r0, [r7, #4]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	4618      	mov	r0, r3
 80141a2:	370c      	adds	r7, #12
 80141a4:	46bd      	mov	sp, r7
 80141a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141aa:	4770      	bx	lr

080141ac <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 80141ac:	b5b0      	push	{r4, r5, r7, lr}
 80141ae:	b086      	sub	sp, #24
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	1d38      	adds	r0, r7, #4
 80141b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80141ba:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80141bc:	68fc      	ldr	r4, [r7, #12]
 80141be:	f107 0314 	add.w	r3, r7, #20
 80141c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80141c4:	4618      	mov	r0, r3
 80141c6:	f000 fb9a 	bl	80148fe <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>
 80141ca:	f107 0314 	add.w	r3, r7, #20
 80141ce:	461a      	mov	r2, r3
 80141d0:	6839      	ldr	r1, [r7, #0]
 80141d2:	4620      	mov	r0, r4
 80141d4:	f000 fba1 	bl	801491a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>
 80141d8:	f107 0314 	add.w	r3, r7, #20
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ff ffda 	bl	8014196 <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80141e2:	68fc      	ldr	r4, [r7, #12]
 80141e4:	1d3b      	adds	r3, r7, #4
 80141e6:	4618      	mov	r0, r3
 80141e8:	f000 fbb5 	bl	8014956 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 80141ec:	4605      	mov	r5, r0
 80141ee:	1d3b      	adds	r3, r7, #4
 80141f0:	4618      	mov	r0, r3
 80141f2:	f000 fbbc 	bl	801496e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>
 80141f6:	4603      	mov	r3, r0
 80141f8:	461a      	mov	r2, r3
 80141fa:	4629      	mov	r1, r5
 80141fc:	4620      	mov	r0, r4
 80141fe:	f000 fbc8 	bl	8014992 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	4618      	mov	r0, r3
 8014206:	3718      	adds	r7, #24
 8014208:	46bd      	mov	sp, r7
 801420a:	bdb0      	pop	{r4, r5, r7, pc}

0801420c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f7fe f999 	bl	801254c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 801421a:	4603      	mov	r3, r0
 801421c:	4619      	mov	r1, r3
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fbe3 	bl	80149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	4618      	mov	r0, r3
 8014228:	f7ff fe2c 	bl	8013e84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	4618      	mov	r0, r3
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}

08014236 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8014236:	b580      	push	{r7, lr}
 8014238:	b082      	sub	sp, #8
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f000 fbf2 	bl	8014a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	4618      	mov	r0, r3
 8014248:	f000 fbfa 	bl	8014a40 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	3304      	adds	r3, #4
 8014250:	4618      	mov	r0, r3
 8014252:	f7fa ff08 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	4618      	mov	r0, r3
 801425a:	3708      	adds	r7, #8
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>:
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	4618      	mov	r0, r3
 801426c:	370c      	adds	r7, #12
 801426e:	46bd      	mov	sp, r7
 8014270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014274:	4770      	bx	lr

08014276 <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8014276:	b490      	push	{r4, r7}
 8014278:	b084      	sub	sp, #16
 801427a:	af00      	add	r7, sp, #0
 801427c:	60f8      	str	r0, [r7, #12]
 801427e:	60b9      	str	r1, [r7, #8]
 8014280:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8014282:	68fa      	ldr	r2, [r7, #12]
 8014284:	68bb      	ldr	r3, [r7, #8]
 8014286:	4614      	mov	r4, r2
 8014288:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801428a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	3310      	adds	r3, #16
 8014294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014298:	e883 0003 	stmia.w	r3, {r0, r1}
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	4618      	mov	r0, r3
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bc90      	pop	{r4, r7}
 80142a6:	4770      	bx	lr

080142a8 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 fbd0 	bl	8014a56 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4618      	mov	r0, r3
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	4618      	mov	r0, r3
 80142cc:	370c      	adds	r7, #12
 80142ce:	46bd      	mov	sp, r7
 80142d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d4:	4770      	bx	lr

080142d6 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>:
      map(initializer_list<value_type> __l,
 80142d6:	b5b0      	push	{r4, r5, r7, lr}
 80142d8:	b086      	sub	sp, #24
 80142da:	af00      	add	r7, sp, #0
 80142dc:	60f8      	str	r0, [r7, #12]
 80142de:	1d38      	adds	r0, r7, #4
 80142e0:	e880 0006 	stmia.w	r0, {r1, r2}
 80142e4:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80142e6:	68fc      	ldr	r4, [r7, #12]
 80142e8:	f107 0314 	add.w	r3, r7, #20
 80142ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142ee:	4618      	mov	r0, r3
 80142f0:	f000 fbbc 	bl	8014a6c <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>
 80142f4:	f107 0314 	add.w	r3, r7, #20
 80142f8:	461a      	mov	r2, r3
 80142fa:	6839      	ldr	r1, [r7, #0]
 80142fc:	4620      	mov	r0, r4
 80142fe:	f000 fbc3 	bl	8014a88 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>
 8014302:	f107 0314 	add.w	r3, r7, #20
 8014306:	4618      	mov	r0, r3
 8014308:	f7ff ffda 	bl	80142c0 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 801430c:	68fc      	ldr	r4, [r7, #12]
 801430e:	1d3b      	adds	r3, r7, #4
 8014310:	4618      	mov	r0, r3
 8014312:	f000 fbd7 	bl	8014ac4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 8014316:	4605      	mov	r5, r0
 8014318:	1d3b      	adds	r3, r7, #4
 801431a:	4618      	mov	r0, r3
 801431c:	f000 fbde 	bl	8014adc <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>
 8014320:	4603      	mov	r3, r0
 8014322:	461a      	mov	r2, r3
 8014324:	4629      	mov	r1, r5
 8014326:	4620      	mov	r0, r4
 8014328:	f000 fbed 	bl	8014b06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	4618      	mov	r0, r3
 8014330:	3718      	adds	r7, #24
 8014332:	46bd      	mov	sp, r7
 8014334:	bdb0      	pop	{r4, r5, r7, pc}

08014336 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8014336:	b580      	push	{r7, lr}
 8014338:	b082      	sub	sp, #8
 801433a:	af00      	add	r7, sp, #0
 801433c:	6078      	str	r0, [r7, #4]
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 fc0d 	bl	8014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	3708      	adds	r7, #8
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}

0801434e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801434e:	b580      	push	{r7, lr}
 8014350:	b082      	sub	sp, #8
 8014352:	af00      	add	r7, sp, #0
 8014354:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f7fe fadb 	bl	8012912 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 801435c:	4603      	mov	r3, r0
 801435e:	4619      	mov	r1, r3
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 fc07 	bl	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4618      	mov	r0, r3
 801436a:	f7ff ffe4 	bl	8014336 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4618      	mov	r0, r3
 8014372:	3708      	adds	r7, #8
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8014378:	b5b0      	push	{r4, r5, r7, lr}
 801437a:	b084      	sub	sp, #16
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8014384:	68b8      	ldr	r0, [r7, #8]
 8014386:	f7fb fe7c 	bl	8010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 801438a:	4602      	mov	r2, r0
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014392:	e883 0003 	stmia.w	r3, {r0, r1}
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fc0b 	bl	8014bb2 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 801439c:	4602      	mov	r2, r0
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f103 0408 	add.w	r4, r3, #8
 80143a4:	4615      	mov	r5, r2
 80143a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80143ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	4618      	mov	r0, r3
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bdb0      	pop	{r4, r5, r7, pc}

080143bc <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80143bc:	b580      	push	{r7, lr}
 80143be:	b082      	sub	sp, #8
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fbff 	bl	8014bc8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	4618      	mov	r0, r3
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	4618      	mov	r0, r3
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 80143ea:	b5b0      	push	{r4, r5, r7, lr}
 80143ec:	b086      	sub	sp, #24
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	60f8      	str	r0, [r7, #12]
 80143f2:	1d38      	adds	r0, r7, #4
 80143f4:	e880 0006 	stmia.w	r0, {r1, r2}
 80143f8:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80143fa:	68fc      	ldr	r4, [r7, #12]
 80143fc:	f107 0314 	add.w	r3, r7, #20
 8014400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014402:	4618      	mov	r0, r3
 8014404:	f000 fbeb 	bl	8014bde <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>
 8014408:	f107 0314 	add.w	r3, r7, #20
 801440c:	461a      	mov	r2, r3
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	4620      	mov	r0, r4
 8014412:	f000 fbf2 	bl	8014bfa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8014416:	f107 0314 	add.w	r3, r7, #20
 801441a:	4618      	mov	r0, r3
 801441c:	f7ff ffda 	bl	80143d4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8014420:	68fc      	ldr	r4, [r7, #12]
 8014422:	1d3b      	adds	r3, r7, #4
 8014424:	4618      	mov	r0, r3
 8014426:	f000 fc06 	bl	8014c36 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 801442a:	4605      	mov	r5, r0
 801442c:	1d3b      	adds	r3, r7, #4
 801442e:	4618      	mov	r0, r3
 8014430:	f000 fc0d 	bl	8014c4e <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 8014434:	4603      	mov	r3, r0
 8014436:	461a      	mov	r2, r3
 8014438:	4629      	mov	r1, r5
 801443a:	4620      	mov	r0, r4
 801443c:	f000 fc1c 	bl	8014c78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	4618      	mov	r0, r3
 8014444:	3718      	adds	r7, #24
 8014446:	46bd      	mov	sp, r7
 8014448:	bdb0      	pop	{r4, r5, r7, pc}

0801444a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801444a:	b580      	push	{r7, lr}
 801444c:	b082      	sub	sp, #8
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 fc3c 	bl	8014cd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}

08014462 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8014462:	b580      	push	{r7, lr}
 8014464:	b082      	sub	sp, #8
 8014466:	af00      	add	r7, sp, #0
 8014468:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 fc5a 	bl	8014d24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8014470:	4603      	mov	r3, r0
 8014472:	4619      	mov	r1, r3
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f000 fc36 	bl	8014ce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4618      	mov	r0, r3
 801447e:	f7ff ffe4 	bl	801444a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	4618      	mov	r0, r3
 8014486:	3708      	adds	r7, #8
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8014498:	68b8      	ldr	r0, [r7, #8]
 801449a:	f7fb fdf2 	bl	8010082 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 801449e:	4602      	mov	r2, r0
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80144a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f000 fc46 	bl	8014d3c <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80144b0:	4602      	mov	r2, r0
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	3308      	adds	r3, #8
 80144b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80144b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	4618      	mov	r0, r3
 80144c0:	3710      	adds	r7, #16
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}

080144c6 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80144c6:	b580      	push	{r7, lr}
 80144c8:	b082      	sub	sp, #8
 80144ca:	af00      	add	r7, sp, #0
 80144cc:	6078      	str	r0, [r7, #4]
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f000 fc3f 	bl	8014d52 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	4618      	mov	r0, r3
 80144d8:	3708      	adds	r7, #8
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}

080144de <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80144de:	b480      	push	{r7}
 80144e0:	b083      	sub	sp, #12
 80144e2:	af00      	add	r7, sp, #0
 80144e4:	6078      	str	r0, [r7, #4]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	4618      	mov	r0, r3
 80144ea:	370c      	adds	r7, #12
 80144ec:	46bd      	mov	sp, r7
 80144ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f2:	4770      	bx	lr

080144f4 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 80144f4:	b5b0      	push	{r4, r5, r7, lr}
 80144f6:	b086      	sub	sp, #24
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	1d38      	adds	r0, r7, #4
 80144fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8014502:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8014504:	68fc      	ldr	r4, [r7, #12]
 8014506:	f107 0314 	add.w	r3, r7, #20
 801450a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801450c:	4618      	mov	r0, r3
 801450e:	f000 fc2b 	bl	8014d68 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>
 8014512:	f107 0314 	add.w	r3, r7, #20
 8014516:	461a      	mov	r2, r3
 8014518:	6839      	ldr	r1, [r7, #0]
 801451a:	4620      	mov	r0, r4
 801451c:	f000 fc32 	bl	8014d84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8014520:	f107 0314 	add.w	r3, r7, #20
 8014524:	4618      	mov	r0, r3
 8014526:	f7ff ffda 	bl	80144de <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 801452a:	68fc      	ldr	r4, [r7, #12]
 801452c:	1d3b      	adds	r3, r7, #4
 801452e:	4618      	mov	r0, r3
 8014530:	f000 fc46 	bl	8014dc0 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8014534:	4605      	mov	r5, r0
 8014536:	1d3b      	adds	r3, r7, #4
 8014538:	4618      	mov	r0, r3
 801453a:	f000 fc4d 	bl	8014dd8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 801453e:	4603      	mov	r3, r0
 8014540:	461a      	mov	r2, r3
 8014542:	4629      	mov	r1, r5
 8014544:	4620      	mov	r0, r4
 8014546:	f000 fc5c 	bl	8014e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	4618      	mov	r0, r3
 801454e:	3718      	adds	r7, #24
 8014550:	46bd      	mov	sp, r7
 8014552:	bdb0      	pop	{r4, r5, r7, pc}

08014554 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 fc7c 	bl	8014e5a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	4618      	mov	r0, r3
 8014566:	3708      	adds	r7, #8
 8014568:	46bd      	mov	sp, r7
 801456a:	bd80      	pop	{r7, pc}

0801456c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f000 fc9a 	bl	8014eae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 801457a:	4603      	mov	r3, r0
 801457c:	4619      	mov	r1, r3
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f000 fc76 	bl	8014e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	4618      	mov	r0, r3
 8014588:	f7ff ffe4 	bl	8014554 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	3708      	adds	r7, #8
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}

08014596 <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014596:	b480      	push	{r7}
 8014598:	b083      	sub	sp, #12
 801459a:	af00      	add	r7, sp, #0
 801459c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	4618      	mov	r0, r3
 80145a2:	370c      	adds	r7, #12
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr

080145ac <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b082      	sub	sp, #8
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	6039      	str	r1, [r7, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	683a      	ldr	r2, [r7, #0]
 80145ba:	4611      	mov	r1, r2
 80145bc:	4618      	mov	r0, r3
 80145be:	f000 fc8d 	bl	8014edc <_ZNSt8functionIFvvEEC1EOS1_>
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	7c1a      	ldrb	r2, [r3, #16]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	741a      	strb	r2, [r3, #16]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	4618      	mov	r0, r3
 80145ce:	3708      	adds	r7, #8
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80145d4:	b590      	push	{r4, r7, lr}
 80145d6:	b085      	sub	sp, #20
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80145e0:	68b8      	ldr	r0, [r7, #8]
 80145e2:	f7ff ffd8 	bl	8014596 <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80145e6:	4603      	mov	r3, r0
 80145e8:	881a      	ldrh	r2, [r3, #0]
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	801a      	strh	r2, [r3, #0]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	1d1c      	adds	r4, r3, #4
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 fc67 	bl	8014ec6 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80145f8:	4603      	mov	r3, r0
 80145fa:	4619      	mov	r1, r3
 80145fc:	4620      	mov	r0, r4
 80145fe:	f7ff ffd5 	bl	80145ac <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	4618      	mov	r0, r3
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	bd90      	pop	{r4, r7, pc}

0801460c <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f000 fc73 	bl	8014f00 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	4618      	mov	r0, r3
 8014630:	370c      	adds	r7, #12
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr

0801463a <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 801463a:	b5b0      	push	{r4, r5, r7, lr}
 801463c:	b086      	sub	sp, #24
 801463e:	af00      	add	r7, sp, #0
 8014640:	60f8      	str	r0, [r7, #12]
 8014642:	1d38      	adds	r0, r7, #4
 8014644:	e880 0006 	stmia.w	r0, {r1, r2}
 8014648:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801464a:	68fc      	ldr	r4, [r7, #12]
 801464c:	f107 0314 	add.w	r3, r7, #20
 8014650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014652:	4618      	mov	r0, r3
 8014654:	f000 fc5f 	bl	8014f16 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>
 8014658:	f107 0314 	add.w	r3, r7, #20
 801465c:	461a      	mov	r2, r3
 801465e:	6839      	ldr	r1, [r7, #0]
 8014660:	4620      	mov	r0, r4
 8014662:	f000 fc66 	bl	8014f32 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>
 8014666:	f107 0314 	add.w	r3, r7, #20
 801466a:	4618      	mov	r0, r3
 801466c:	f7ff ffda 	bl	8014624 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8014670:	68fc      	ldr	r4, [r7, #12]
 8014672:	1d3b      	adds	r3, r7, #4
 8014674:	4618      	mov	r0, r3
 8014676:	f000 fc7a 	bl	8014f6e <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 801467a:	4605      	mov	r5, r0
 801467c:	1d3b      	adds	r3, r7, #4
 801467e:	4618      	mov	r0, r3
 8014680:	f000 fc81 	bl	8014f86 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 8014684:	4603      	mov	r3, r0
 8014686:	461a      	mov	r2, r3
 8014688:	4629      	mov	r1, r5
 801468a:	4620      	mov	r0, r4
 801468c:	f000 fc90 	bl	8014fb0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	4618      	mov	r0, r3
 8014694:	3718      	adds	r7, #24
 8014696:	46bd      	mov	sp, r7
 8014698:	bdb0      	pop	{r4, r5, r7, pc}

0801469a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801469a:	b580      	push	{r7, lr}
 801469c:	b082      	sub	sp, #8
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f000 fcb0 	bl	8015008 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b082      	sub	sp, #8
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fcce 	bl	801505c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80146c0:	4603      	mov	r3, r0
 80146c2:	4619      	mov	r1, r3
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f000 fcaa 	bl	801501e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7ff ffe4 	bl	801469a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	4618      	mov	r0, r3
 80146d6:	3708      	adds	r7, #8
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 fcc5 	bl	8015074 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80146f4:	b480      	push	{r7}
 80146f6:	b083      	sub	sp, #12
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2200      	movs	r2, #0
 8014700:	601a      	str	r2, [r3, #0]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	2200      	movs	r2, #0
 8014706:	605a      	str	r2, [r3, #4]
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2200      	movs	r2, #0
 801470c:	609a      	str	r2, [r3, #8]
	{ }
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	4618      	mov	r0, r3
 8014712:	370c      	adds	r7, #12
 8014714:	46bd      	mov	sp, r7
 8014716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471a:	4770      	bx	lr

0801471c <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 801471c:	b580      	push	{r7, lr}
 801471e:	b084      	sub	sp, #16
 8014720:	af00      	add	r7, sp, #0
 8014722:	60f8      	str	r0, [r7, #12]
 8014724:	60b9      	str	r1, [r7, #8]
 8014726:	607a      	str	r2, [r7, #4]
	if (__p)
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d005      	beq.n	801473a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	687a      	ldr	r2, [r7, #4]
 8014732:	68b9      	ldr	r1, [r7, #8]
 8014734:	4618      	mov	r0, r3
 8014736:	f000 fca8 	bl	801508a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 801473a:	bf00      	nop
 801473c:	3710      	adds	r7, #16
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	370c      	adds	r7, #12
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr

08014758 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8014758:	b580      	push	{r7, lr}
 801475a:	b084      	sub	sp, #16
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8014764:	68b9      	ldr	r1, [r7, #8]
 8014766:	68f8      	ldr	r0, [r7, #12]
 8014768:	f000 fcae 	bl	80150c8 <_ZSt8_DestroyIPmEvT_S1_>
    }
 801476c:	bf00      	nop
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	4618      	mov	r0, r3
 8014780:	370c      	adds	r7, #12
 8014782:	46bd      	mov	sp, r7
 8014784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014788:	4770      	bx	lr

0801478a <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
 8014792:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014794:	6839      	ldr	r1, [r7, #0]
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 fcac 	bl	80150f4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	4618      	mov	r0, r3
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}

080147a6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 80147a6:	b590      	push	{r4, r7, lr}
 80147a8:	b087      	sub	sp, #28
 80147aa:	af00      	add	r7, sp, #0
 80147ac:	60f8      	str	r0, [r7, #12]
 80147ae:	60b9      	str	r1, [r7, #8]
 80147b0:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80147b2:	68fc      	ldr	r4, [r7, #12]
 80147b4:	f107 0314 	add.w	r3, r7, #20
 80147b8:	6879      	ldr	r1, [r7, #4]
 80147ba:	4618      	mov	r0, r3
 80147bc:	f000 fca6 	bl	801510c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>
 80147c0:	f107 0314 	add.w	r3, r7, #20
 80147c4:	461a      	mov	r2, r3
 80147c6:	68b9      	ldr	r1, [r7, #8]
 80147c8:	4620      	mov	r0, r4
 80147ca:	f000 fcac 	bl	8015126 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 80147ce:	f107 0314 	add.w	r3, r7, #20
 80147d2:	4618      	mov	r0, r3
 80147d4:	f000 f852 	bl	801487c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	4618      	mov	r0, r3
 80147dc:	371c      	adds	r7, #28
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd90      	pop	{r4, r7, pc}

080147e2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80147e2:	b480      	push	{r7}
 80147e4:	b083      	sub	sp, #12
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4618      	mov	r0, r3
 80147f0:	370c      	adds	r7, #12
 80147f2:	46bd      	mov	sp, r7
 80147f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147f8:	4770      	bx	lr

080147fa <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80147fa:	b590      	push	{r4, r7, lr}
 80147fc:	b083      	sub	sp, #12
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7ff ffed 	bl	80147e2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 8014808:	4604      	mov	r4, r0
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fca8 	bl	8015160 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>
 8014810:	4602      	mov	r2, r0
 8014812:	4613      	mov	r3, r2
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	4413      	add	r3, r2
 8014818:	009b      	lsls	r3, r3, #2
 801481a:	4423      	add	r3, r4
 801481c:	4618      	mov	r0, r3
 801481e:	370c      	adds	r7, #12
 8014820:	46bd      	mov	sp, r7
 8014822:	bd90      	pop	{r4, r7, pc}

08014824 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014824:	b580      	push	{r7, lr}
 8014826:	b088      	sub	sp, #32
 8014828:	af00      	add	r7, sp, #0
 801482a:	60f8      	str	r0, [r7, #12]
 801482c:	60b9      	str	r1, [r7, #8]
 801482e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014830:	f107 0314 	add.w	r3, r7, #20
 8014834:	68f9      	ldr	r1, [r7, #12]
 8014836:	4618      	mov	r0, r3
 8014838:	f000 fc9e 	bl	8015178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 801483c:	68ba      	ldr	r2, [r7, #8]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	429a      	cmp	r2, r3
 8014842:	d017      	beq.n	8014874 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014844:	68f8      	ldr	r0, [r7, #12]
 8014846:	f000 fca6 	bl	8015196 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 801484a:	4603      	mov	r3, r0
 801484c:	61fb      	str	r3, [r7, #28]
 801484e:	f107 021c 	add.w	r2, r7, #28
 8014852:	f107 0318 	add.w	r3, r7, #24
 8014856:	4611      	mov	r1, r2
 8014858:	4618      	mov	r0, r3
 801485a:	f000 fcad 	bl	80151b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 801485e:	f107 0314 	add.w	r3, r7, #20
 8014862:	68ba      	ldr	r2, [r7, #8]
 8014864:	69b9      	ldr	r1, [r7, #24]
 8014866:	68f8      	ldr	r0, [r7, #12]
 8014868:	f000 fcb6 	bl	80151d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	3314      	adds	r3, #20
 8014870:	60bb      	str	r3, [r7, #8]
 8014872:	e7e3      	b.n	801483c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 8014874:	bf00      	nop
 8014876:	3720      	adds	r7, #32
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801487c:	b480      	push	{r7}
 801487e:	b083      	sub	sp, #12
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4618      	mov	r0, r3
 8014888:	370c      	adds	r7, #12
 801488a:	46bd      	mov	sp, r7
 801488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014890:	4770      	bx	lr

08014892 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014892:	b580      	push	{r7, lr}
 8014894:	b084      	sub	sp, #16
 8014896:	af00      	add	r7, sp, #0
 8014898:	6078      	str	r0, [r7, #4]
 801489a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d012      	beq.n	80148c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 80148a2:	6838      	ldr	r0, [r7, #0]
 80148a4:	f000 fccb 	bl	801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80148a8:	4603      	mov	r3, r0
 80148aa:	4619      	mov	r1, r3
 80148ac:	6878      	ldr	r0, [r7, #4]
 80148ae:	f7ff fff0 	bl	8014892 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 80148b2:	6838      	ldr	r0, [r7, #0]
 80148b4:	f000 fccf 	bl	8015256 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80148b8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80148ba:	6839      	ldr	r1, [r7, #0]
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f000 fcd6 	bl	801526e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80148c6:	e7e9      	b.n	801489c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 80148c8:	bf00      	nop
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80148d0:	b480      	push	{r7}
 80148d2:	b083      	sub	sp, #12
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	689b      	ldr	r3, [r3, #8]
 80148dc:	4618      	mov	r0, r3
 80148de:	370c      	adds	r7, #12
 80148e0:	46bd      	mov	sp, r7
 80148e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e6:	4770      	bx	lr

080148e8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>:
 80148e8:	b480      	push	{r7}
 80148ea:	b083      	sub	sp, #12
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	4618      	mov	r0, r3
 80148f4:	370c      	adds	r7, #12
 80148f6:	46bd      	mov	sp, r7
 80148f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148fc:	4770      	bx	lr

080148fe <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80148fe:	b580      	push	{r7, lr}
 8014900:	b082      	sub	sp, #8
 8014902:	af00      	add	r7, sp, #0
 8014904:	6078      	str	r0, [r7, #4]
 8014906:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014908:	6839      	ldr	r1, [r7, #0]
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f000 fcc0 	bl	8015290 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	4618      	mov	r0, r3
 8014914:	3708      	adds	r7, #8
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 801491a:	b590      	push	{r4, r7, lr}
 801491c:	b087      	sub	sp, #28
 801491e:	af00      	add	r7, sp, #0
 8014920:	60f8      	str	r0, [r7, #12]
 8014922:	60b9      	str	r1, [r7, #8]
 8014924:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014926:	68fc      	ldr	r4, [r7, #12]
 8014928:	f107 0314 	add.w	r3, r7, #20
 801492c:	6879      	ldr	r1, [r7, #4]
 801492e:	4618      	mov	r0, r3
 8014930:	f000 fcba 	bl	80152a8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>
 8014934:	f107 0314 	add.w	r3, r7, #20
 8014938:	461a      	mov	r2, r3
 801493a:	68b9      	ldr	r1, [r7, #8]
 801493c:	4620      	mov	r0, r4
 801493e:	f000 fcc0 	bl	80152c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8014942:	f107 0314 	add.w	r3, r7, #20
 8014946:	4618      	mov	r0, r3
 8014948:	f7ff fc8a 	bl	8014260 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	4618      	mov	r0, r3
 8014950:	371c      	adds	r7, #28
 8014952:	46bd      	mov	sp, r7
 8014954:	bd90      	pop	{r4, r7, pc}

08014956 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014956:	b480      	push	{r7}
 8014958:	b083      	sub	sp, #12
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	4618      	mov	r0, r3
 8014964:	370c      	adds	r7, #12
 8014966:	46bd      	mov	sp, r7
 8014968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801496c:	4770      	bx	lr

0801496e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 801496e:	b590      	push	{r4, r7, lr}
 8014970:	b083      	sub	sp, #12
 8014972:	af00      	add	r7, sp, #0
 8014974:	6078      	str	r0, [r7, #4]
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7ff ffed 	bl	8014956 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 801497c:	4604      	mov	r4, r0
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 fcbc 	bl	80152fc <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>
 8014984:	4603      	mov	r3, r0
 8014986:	011b      	lsls	r3, r3, #4
 8014988:	4423      	add	r3, r4
 801498a:	4618      	mov	r0, r3
 801498c:	370c      	adds	r7, #12
 801498e:	46bd      	mov	sp, r7
 8014990:	bd90      	pop	{r4, r7, pc}

08014992 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014992:	b580      	push	{r7, lr}
 8014994:	b088      	sub	sp, #32
 8014996:	af00      	add	r7, sp, #0
 8014998:	60f8      	str	r0, [r7, #12]
 801499a:	60b9      	str	r1, [r7, #8]
 801499c:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 801499e:	f107 0314 	add.w	r3, r7, #20
 80149a2:	68f9      	ldr	r1, [r7, #12]
 80149a4:	4618      	mov	r0, r3
 80149a6:	f000 fcb5 	bl	8015314 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 80149aa:	68ba      	ldr	r2, [r7, #8]
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	429a      	cmp	r2, r3
 80149b0:	d017      	beq.n	80149e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f7fc fcc8 	bl	8011348 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 80149b8:	4603      	mov	r3, r0
 80149ba:	61fb      	str	r3, [r7, #28]
 80149bc:	f107 021c 	add.w	r2, r7, #28
 80149c0:	f107 0318 	add.w	r3, r7, #24
 80149c4:	4611      	mov	r1, r2
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fb fcc9 	bl	801035e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 80149cc:	f107 0314 	add.w	r3, r7, #20
 80149d0:	68ba      	ldr	r2, [r7, #8]
 80149d2:	69b9      	ldr	r1, [r7, #24]
 80149d4:	68f8      	ldr	r0, [r7, #12]
 80149d6:	f000 fcac 	bl	8015332 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	3310      	adds	r3, #16
 80149de:	60bb      	str	r3, [r7, #8]
 80149e0:	e7e3      	b.n	80149aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 80149e2:	bf00      	nop
 80149e4:	3720      	adds	r7, #32
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}

080149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b084      	sub	sp, #16
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d012      	beq.n	8014a20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	f7fd ff13 	bl	8012826 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014a00:	4603      	mov	r3, r0
 8014a02:	4619      	mov	r1, r3
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f7ff fff0 	bl	80149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8014a0a:	6838      	ldr	r0, [r7, #0]
 8014a0c:	f7fe fb69 	bl	80130e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014a10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7fc fe71 	bl	80116fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014a1e:	e7e9      	b.n	80149f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8014a20:	bf00      	nop
 8014a22:	3710      	adds	r7, #16
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f000 fcb1 	bl	8015398 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3708      	adds	r7, #8
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}

08014a40 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
      { }
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	370c      	adds	r7, #12
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>:
 8014a56:	b480      	push	{r7}
 8014a58:	b083      	sub	sp, #12
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4618      	mov	r0, r3
 8014a62:	370c      	adds	r7, #12
 8014a64:	46bd      	mov	sp, r7
 8014a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6a:	4770      	bx	lr

08014a6c <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 fc98 	bl	80153ae <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b087      	sub	sp, #28
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014a94:	68fc      	ldr	r4, [r7, #12]
 8014a96:	f107 0314 	add.w	r3, r7, #20
 8014a9a:	6879      	ldr	r1, [r7, #4]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 fc92 	bl	80153c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>
 8014aa2:	f107 0314 	add.w	r3, r7, #20
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	68b9      	ldr	r1, [r7, #8]
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f000 fc98 	bl	80153e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8014ab0:	f107 0314 	add.w	r3, r7, #20
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f000 f852 	bl	8014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	4618      	mov	r0, r3
 8014abe:	371c      	adds	r7, #28
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd90      	pop	{r4, r7, pc}

08014ac4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014ac4:	b480      	push	{r7}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b083      	sub	sp, #12
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f7ff ffed 	bl	8014ac4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 8014aea:	4604      	mov	r4, r0
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fc94 	bl	801541a <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>
 8014af2:	4602      	mov	r2, r0
 8014af4:	4613      	mov	r3, r2
 8014af6:	005b      	lsls	r3, r3, #1
 8014af8:	4413      	add	r3, r2
 8014afa:	00db      	lsls	r3, r3, #3
 8014afc:	4423      	add	r3, r4
 8014afe:	4618      	mov	r0, r3
 8014b00:	370c      	adds	r7, #12
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd90      	pop	{r4, r7, pc}

08014b06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014b06:	b580      	push	{r7, lr}
 8014b08:	b088      	sub	sp, #32
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	60f8      	str	r0, [r7, #12]
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014b12:	f107 0314 	add.w	r3, r7, #20
 8014b16:	68f9      	ldr	r1, [r7, #12]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f000 fc8a 	bl	8015432 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d017      	beq.n	8014b56 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	f7fc fe83 	bl	8011832 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	61fb      	str	r3, [r7, #28]
 8014b30:	f107 021c 	add.w	r2, r7, #28
 8014b34:	f107 0318 	add.w	r3, r7, #24
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fb fd4f 	bl	80105de <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8014b40:	f107 0314 	add.w	r3, r7, #20
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	69b9      	ldr	r1, [r7, #24]
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 fc81 	bl	8015450 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	3318      	adds	r3, #24
 8014b52:	60bb      	str	r3, [r7, #8]
 8014b54:	e7e3      	b.n	8014b1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8014b56:	bf00      	nop
 8014b58:	3720      	adds	r7, #32
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014b5e:	b480      	push	{r7}
 8014b60:	b083      	sub	sp, #12
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d012      	beq.n	8014baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8014b84:	6838      	ldr	r0, [r7, #0]
 8014b86:	f7fe f831 	bl	8012bec <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f7ff fff0 	bl	8014b74 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014b94:	6838      	ldr	r0, [r7, #0]
 8014b96:	f7fe fb9d 	bl	80132d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014b9a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014b9c:	6839      	ldr	r1, [r7, #0]
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7fd f852 	bl	8011c48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014ba8:	e7e9      	b.n	8014b7e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014baa:	bf00      	nop
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014bb2:	b480      	push	{r7}
 8014bb4:	b083      	sub	sp, #12
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	370c      	adds	r7, #12
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bdc:	4770      	bx	lr

08014bde <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014bde:	b580      	push	{r7, lr}
 8014be0:	b082      	sub	sp, #8
 8014be2:	af00      	add	r7, sp, #0
 8014be4:	6078      	str	r0, [r7, #4]
 8014be6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014be8:	6839      	ldr	r1, [r7, #0]
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 fc63 	bl	80154b6 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}

08014bfa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8014bfa:	b590      	push	{r4, r7, lr}
 8014bfc:	b087      	sub	sp, #28
 8014bfe:	af00      	add	r7, sp, #0
 8014c00:	60f8      	str	r0, [r7, #12]
 8014c02:	60b9      	str	r1, [r7, #8]
 8014c04:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014c06:	68fc      	ldr	r4, [r7, #12]
 8014c08:	f107 0314 	add.w	r3, r7, #20
 8014c0c:	6879      	ldr	r1, [r7, #4]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f000 fc5d 	bl	80154ce <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>
 8014c14:	f107 0314 	add.w	r3, r7, #20
 8014c18:	461a      	mov	r2, r3
 8014c1a:	68b9      	ldr	r1, [r7, #8]
 8014c1c:	4620      	mov	r0, r4
 8014c1e:	f000 fc63 	bl	80154e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8014c22:	f107 0314 	add.w	r3, r7, #20
 8014c26:	4618      	mov	r0, r3
 8014c28:	f000 f852 	bl	8014cd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	371c      	adds	r7, #28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd90      	pop	{r4, r7, pc}

08014c36 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014c36:	b480      	push	{r7}
 8014c38:	b083      	sub	sp, #12
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4618      	mov	r0, r3
 8014c44:	370c      	adds	r7, #12
 8014c46:	46bd      	mov	sp, r7
 8014c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4c:	4770      	bx	lr

08014c4e <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014c4e:	b590      	push	{r4, r7, lr}
 8014c50:	b083      	sub	sp, #12
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6078      	str	r0, [r7, #4]
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f7ff ffed 	bl	8014c36 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8014c5c:	4604      	mov	r4, r0
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f000 fc5f 	bl	8015522 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 8014c64:	4602      	mov	r2, r0
 8014c66:	4613      	mov	r3, r2
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	4423      	add	r3, r4
 8014c70:	4618      	mov	r0, r3
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd90      	pop	{r4, r7, pc}

08014c78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b088      	sub	sp, #32
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014c84:	f107 0314 	add.w	r3, r7, #20
 8014c88:	68f9      	ldr	r1, [r7, #12]
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f000 fc55 	bl	801553a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d017      	beq.n	8014cc8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	f000 fc5d 	bl	8015558 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	61fb      	str	r3, [r7, #28]
 8014ca2:	f107 021c 	add.w	r2, r7, #28
 8014ca6:	f107 0318 	add.w	r3, r7, #24
 8014caa:	4611      	mov	r1, r2
 8014cac:	4618      	mov	r0, r3
 8014cae:	f000 fc64 	bl	801557a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8014cb2:	f107 0314 	add.w	r3, r7, #20
 8014cb6:	68ba      	ldr	r2, [r7, #8]
 8014cb8:	69b9      	ldr	r1, [r7, #24]
 8014cba:	68f8      	ldr	r0, [r7, #12]
 8014cbc:	f000 fc6d 	bl	801559a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	3328      	adds	r3, #40	; 0x28
 8014cc4:	60bb      	str	r3, [r7, #8]
 8014cc6:	e7e3      	b.n	8014c90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8014cc8:	bf00      	nop
 8014cca:	3720      	adds	r7, #32
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}

08014cd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014cd0:	b480      	push	{r7}
 8014cd2:	b083      	sub	sp, #12
 8014cd4:	af00      	add	r7, sp, #0
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	370c      	adds	r7, #12
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce4:	4770      	bx	lr

08014ce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014ce6:	b580      	push	{r7, lr}
 8014ce8:	b084      	sub	sp, #16
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d012      	beq.n	8014d1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8014cf6:	6838      	ldr	r0, [r7, #0]
 8014cf8:	f000 fc82 	bl	8015600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	4619      	mov	r1, r3
 8014d00:	6878      	ldr	r0, [r7, #4]
 8014d02:	f7ff fff0 	bl	8014ce6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014d06:	6838      	ldr	r0, [r7, #0]
 8014d08:	f000 fc86 	bl	8015618 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014d0c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014d0e:	6839      	ldr	r1, [r7, #0]
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f000 fc8d 	bl	8015630 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014d1a:	e7e9      	b.n	8014cf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014d1c:	bf00      	nop
 8014d1e:	3710      	adds	r7, #16
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	689b      	ldr	r3, [r3, #8]
 8014d30:	4618      	mov	r0, r3
 8014d32:	370c      	adds	r7, #12
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr

08014d3c <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014d3c:	b480      	push	{r7}
 8014d3e:	b083      	sub	sp, #12
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	4618      	mov	r0, r3
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr

08014d52 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
 8014d52:	b480      	push	{r7}
 8014d54:	b083      	sub	sp, #12
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	370c      	adds	r7, #12
 8014d60:	46bd      	mov	sp, r7
 8014d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d66:	4770      	bx	lr

08014d68 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014d72:	6839      	ldr	r1, [r7, #0]
 8014d74:	6878      	ldr	r0, [r7, #4]
 8014d76:	f000 fc6c 	bl	8015652 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3708      	adds	r7, #8
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8014d84:	b590      	push	{r4, r7, lr}
 8014d86:	b087      	sub	sp, #28
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014d90:	68fc      	ldr	r4, [r7, #12]
 8014d92:	f107 0314 	add.w	r3, r7, #20
 8014d96:	6879      	ldr	r1, [r7, #4]
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f000 fc66 	bl	801566a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>
 8014d9e:	f107 0314 	add.w	r3, r7, #20
 8014da2:	461a      	mov	r2, r3
 8014da4:	68b9      	ldr	r1, [r7, #8]
 8014da6:	4620      	mov	r0, r4
 8014da8:	f000 fc6c 	bl	8015684 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8014dac:	f107 0314 	add.w	r3, r7, #20
 8014db0:	4618      	mov	r0, r3
 8014db2:	f000 f852 	bl	8014e5a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	4618      	mov	r0, r3
 8014dba:	371c      	adds	r7, #28
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd90      	pop	{r4, r7, pc}

08014dc0 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4618      	mov	r0, r3
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014dd8:	b590      	push	{r4, r7, lr}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f7ff ffed 	bl	8014dc0 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8014de6:	4604      	mov	r4, r0
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f000 fc68 	bl	80156be <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 8014dee:	4602      	mov	r2, r0
 8014df0:	4613      	mov	r3, r2
 8014df2:	009b      	lsls	r3, r3, #2
 8014df4:	4413      	add	r3, r2
 8014df6:	009b      	lsls	r3, r3, #2
 8014df8:	4423      	add	r3, r4
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	370c      	adds	r7, #12
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd90      	pop	{r4, r7, pc}

08014e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014e02:	b580      	push	{r7, lr}
 8014e04:	b088      	sub	sp, #32
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	60f8      	str	r0, [r7, #12]
 8014e0a:	60b9      	str	r1, [r7, #8]
 8014e0c:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014e0e:	f107 0314 	add.w	r3, r7, #20
 8014e12:	68f9      	ldr	r1, [r7, #12]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f000 fc5e 	bl	80156d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8014e1a:	68ba      	ldr	r2, [r7, #8]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d017      	beq.n	8014e52 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014e22:	68f8      	ldr	r0, [r7, #12]
 8014e24:	f000 fc66 	bl	80156f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8014e28:	4603      	mov	r3, r0
 8014e2a:	61fb      	str	r3, [r7, #28]
 8014e2c:	f107 021c 	add.w	r2, r7, #28
 8014e30:	f107 0318 	add.w	r3, r7, #24
 8014e34:	4611      	mov	r1, r2
 8014e36:	4618      	mov	r0, r3
 8014e38:	f000 fc6d 	bl	8015716 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8014e3c:	f107 0314 	add.w	r3, r7, #20
 8014e40:	68ba      	ldr	r2, [r7, #8]
 8014e42:	69b9      	ldr	r1, [r7, #24]
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f000 fc76 	bl	8015736 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	3314      	adds	r3, #20
 8014e4e:	60bb      	str	r3, [r7, #8]
 8014e50:	e7e3      	b.n	8014e1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8014e52:	bf00      	nop
 8014e54:	3720      	adds	r7, #32
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}

08014e5a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014e5a:	b480      	push	{r7}
 8014e5c:	b083      	sub	sp, #12
 8014e5e:	af00      	add	r7, sp, #0
 8014e60:	6078      	str	r0, [r7, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4618      	mov	r0, r3
 8014e66:	370c      	adds	r7, #12
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6e:	4770      	bx	lr

08014e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b084      	sub	sp, #16
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d012      	beq.n	8014ea6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8014e80:	6838      	ldr	r0, [r7, #0]
 8014e82:	f000 fc8b 	bl	801579c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014e86:	4603      	mov	r3, r0
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f7ff fff0 	bl	8014e70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014e90:	6838      	ldr	r0, [r7, #0]
 8014e92:	f000 fc8f 	bl	80157b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014e96:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014e98:	6839      	ldr	r1, [r7, #0]
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f000 fc96 	bl	80157cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014ea4:	e7e9      	b.n	8014e7a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014ea6:	bf00      	nop
 8014ea8:	3710      	adds	r7, #16
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8014eae:	b480      	push	{r7}
 8014eb0:	b083      	sub	sp, #12
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	689b      	ldr	r3, [r3, #8]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	370c      	adds	r7, #12
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec4:	4770      	bx	lr

08014ec6 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014ec6:	b480      	push	{r7}
 8014ec8:	b083      	sub	sp, #12
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	370c      	adds	r7, #12
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <_ZNSt8functionIFvvEEC1EOS1_>:
       *  @param __x A %function object rvalue with identical call signature.
       *
       *  The newly-created %function contains the target of @a __x
       *  (if it has one).
       */
      function(function&& __x) noexcept : _Function_base()
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b082      	sub	sp, #8
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7fe ff1d 	bl	8013d28 <_ZNSt14_Function_baseC1Ev>
      {
	__x.swap(*this);
 8014eee:	6879      	ldr	r1, [r7, #4]
 8014ef0:	6838      	ldr	r0, [r7, #0]
 8014ef2:	f000 fc7c 	bl	80157ee <_ZNSt8functionIFvvEE4swapERS1_>
      }
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3708      	adds	r7, #8
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	370c      	adds	r7, #12
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f14:	4770      	bx	lr

08014f16 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014f16:	b580      	push	{r7, lr}
 8014f18:	b082      	sub	sp, #8
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
 8014f1e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014f20:	6839      	ldr	r1, [r7, #0]
 8014f22:	6878      	ldr	r0, [r7, #4]
 8014f24:	f000 fc84 	bl	8015830 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 8014f32:	b590      	push	{r4, r7, lr}
 8014f34:	b087      	sub	sp, #28
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	60f8      	str	r0, [r7, #12]
 8014f3a:	60b9      	str	r1, [r7, #8]
 8014f3c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014f3e:	68fc      	ldr	r4, [r7, #12]
 8014f40:	f107 0314 	add.w	r3, r7, #20
 8014f44:	6879      	ldr	r1, [r7, #4]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f000 fc7e 	bl	8015848 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>
 8014f4c:	f107 0314 	add.w	r3, r7, #20
 8014f50:	461a      	mov	r2, r3
 8014f52:	68b9      	ldr	r1, [r7, #8]
 8014f54:	4620      	mov	r0, r4
 8014f56:	f000 fc84 	bl	8015862 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8014f5a:	f107 0314 	add.w	r3, r7, #20
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f000 f852 	bl	8015008 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	4618      	mov	r0, r3
 8014f68:	371c      	adds	r7, #28
 8014f6a:	46bd      	mov	sp, r7
 8014f6c:	bd90      	pop	{r4, r7, pc}

08014f6e <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	681b      	ldr	r3, [r3, #0]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	370c      	adds	r7, #12
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f84:	4770      	bx	lr

08014f86 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014f86:	b590      	push	{r4, r7, lr}
 8014f88:	b083      	sub	sp, #12
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	6078      	str	r0, [r7, #4]
 8014f8e:	6878      	ldr	r0, [r7, #4]
 8014f90:	f7ff ffed 	bl	8014f6e <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 8014f94:	4604      	mov	r4, r0
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f000 fc80 	bl	801589c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	4613      	mov	r3, r2
 8014fa0:	005b      	lsls	r3, r3, #1
 8014fa2:	4413      	add	r3, r2
 8014fa4:	00db      	lsls	r3, r3, #3
 8014fa6:	4423      	add	r3, r4
 8014fa8:	4618      	mov	r0, r3
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd90      	pop	{r4, r7, pc}

08014fb0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b088      	sub	sp, #32
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	60f8      	str	r0, [r7, #12]
 8014fb8:	60b9      	str	r1, [r7, #8]
 8014fba:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014fbc:	f107 0314 	add.w	r3, r7, #20
 8014fc0:	68f9      	ldr	r1, [r7, #12]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f000 fc76 	bl	80158b4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 8014fc8:	68ba      	ldr	r2, [r7, #8]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d017      	beq.n	8015000 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014fd0:	68f8      	ldr	r0, [r7, #12]
 8014fd2:	f000 fc7e 	bl	80158d2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	61fb      	str	r3, [r7, #28]
 8014fda:	f107 021c 	add.w	r2, r7, #28
 8014fde:	f107 0318 	add.w	r3, r7, #24
 8014fe2:	4611      	mov	r1, r2
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f000 fc85 	bl	80158f4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 8014fea:	f107 0314 	add.w	r3, r7, #20
 8014fee:	68ba      	ldr	r2, [r7, #8]
 8014ff0:	69b9      	ldr	r1, [r7, #24]
 8014ff2:	68f8      	ldr	r0, [r7, #12]
 8014ff4:	f000 fc8e 	bl	8015914 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	3318      	adds	r3, #24
 8014ffc:	60bb      	str	r3, [r7, #8]
 8014ffe:	e7e3      	b.n	8014fc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 8015000:	bf00      	nop
 8015002:	3720      	adds	r7, #32
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8015008:	b480      	push	{r7}
 801500a:	b083      	sub	sp, #12
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	4618      	mov	r0, r3
 8015014:	370c      	adds	r7, #12
 8015016:	46bd      	mov	sp, r7
 8015018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801501c:	4770      	bx	lr

0801501e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801501e:	b580      	push	{r7, lr}
 8015020:	b084      	sub	sp, #16
 8015022:	af00      	add	r7, sp, #0
 8015024:	6078      	str	r0, [r7, #4]
 8015026:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8015028:	683b      	ldr	r3, [r7, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d012      	beq.n	8015054 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 801502e:	6838      	ldr	r0, [r7, #0]
 8015030:	f000 fca3 	bl	801597a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015034:	4603      	mov	r3, r0
 8015036:	4619      	mov	r1, r3
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f7ff fff0 	bl	801501e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 801503e:	6838      	ldr	r0, [r7, #0]
 8015040:	f000 fca7 	bl	8015992 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8015044:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8015046:	6839      	ldr	r1, [r7, #0]
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f000 fcae 	bl	80159aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8015052:	e7e9      	b.n	8015028 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8015054:	bf00      	nop
 8015056:	3710      	adds	r7, #16
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	689b      	ldr	r3, [r3, #8]
 8015068:	4618      	mov	r0, r3
 801506a:	370c      	adds	r7, #12
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4618      	mov	r0, r3
 8015080:	370c      	adds	r7, #12
 8015082:	46bd      	mov	sp, r7
 8015084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015088:	4770      	bx	lr

0801508a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801508a:	b580      	push	{r7, lr}
 801508c:	b088      	sub	sp, #32
 801508e:	af00      	add	r7, sp, #0
 8015090:	60f8      	str	r0, [r7, #12]
 8015092:	60b9      	str	r1, [r7, #8]
 8015094:	607a      	str	r2, [r7, #4]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	61fb      	str	r3, [r7, #28]
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	61bb      	str	r3, [r7, #24]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80150a2:	f7f8 ffc9 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80150a6:	4603      	mov	r3, r0
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d003      	beq.n	80150b4 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 80150ac:	69b8      	ldr	r0, [r7, #24]
 80150ae:	f005 fb77 	bl	801a7a0 <_ZdlPv>
	    return;
 80150b2:	e005      	b.n	80150c0 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80150b4:	697a      	ldr	r2, [r7, #20]
 80150b6:	69b9      	ldr	r1, [r7, #24]
 80150b8:	69f8      	ldr	r0, [r7, #28]
 80150ba:	f001 fd8c 	bl	8016bd6 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 80150be:	bf00      	nop
 80150c0:	bf00      	nop
 80150c2:	3720      	adds	r7, #32
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
 80150d0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80150d2:	f7f8 ffb1 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d004      	beq.n	80150e6 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80150dc:	6839      	ldr	r1, [r7, #0]
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f000 fc74 	bl	80159cc <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 80150e4:	e003      	b.n	80150ee <_ZSt8_DestroyIPmEvT_S1_+0x26>
	__destroy(__first, __last);
 80150e6:	6839      	ldr	r1, [r7, #0]
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f000 fc87 	bl	80159fc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 80150ee:	3708      	adds	r7, #8
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}

080150f4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80150f4:	b480      	push	{r7}
 80150f6:	b083      	sub	sp, #12
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	6039      	str	r1, [r7, #0]
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	4618      	mov	r0, r3
 8015102:	370c      	adds	r7, #12
 8015104:	46bd      	mov	sp, r7
 8015106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510a:	4770      	bx	lr

0801510c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f000 fc7b 	bl	8015a12 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	4618      	mov	r0, r3
 8015120:	3708      	adds	r7, #8
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}

08015126 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8015126:	b580      	push	{r7, lr}
 8015128:	b084      	sub	sp, #16
 801512a:	af00      	add	r7, sp, #0
 801512c:	60f8      	str	r0, [r7, #12]
 801512e:	60b9      	str	r1, [r7, #8]
 8015130:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f000 fc78 	bl	8015a28 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>
 8015138:	4603      	mov	r3, r0
 801513a:	4619      	mov	r1, r3
 801513c:	68f8      	ldr	r0, [r7, #12]
 801513e:	f000 fc7e 	bl	8015a3e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	68b9      	ldr	r1, [r7, #8]
 8015146:	4618      	mov	r0, r3
 8015148:	f000 fc87 	bl	8015a5a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	3304      	adds	r3, #4
 8015150:	4618      	mov	r0, r3
 8015152:	f7f9 ff88 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	4618      	mov	r0, r3
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}

08015160 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8015160:	b480      	push	{r7}
 8015162:	b083      	sub	sp, #12
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	4618      	mov	r0, r3
 801516e:	370c      	adds	r7, #12
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr

08015178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 8015178:	b480      	push	{r7}
 801517a:	b083      	sub	sp, #12
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	683a      	ldr	r2, [r7, #0]
 8015186:	601a      	str	r2, [r3, #0]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	4618      	mov	r0, r3
 801518c:	370c      	adds	r7, #12
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015196:	b580      	push	{r7, lr}
 8015198:	b084      	sub	sp, #16
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	1d1a      	adds	r2, r3, #4
 80151a2:	f107 030c 	add.w	r3, r7, #12
 80151a6:	4611      	mov	r1, r2
 80151a8:	4618      	mov	r0, r3
 80151aa:	f000 fc62 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	4618      	mov	r0, r3
 80151b2:	3710      	adds	r7, #16
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}

080151b8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80151b8:	b480      	push	{r7}
 80151ba:	b083      	sub	sp, #12
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	681a      	ldr	r2, [r3, #0]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	601a      	str	r2, [r3, #0]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	4618      	mov	r0, r3
 80151ce:	370c      	adds	r7, #12
 80151d0:	46bd      	mov	sp, r7
 80151d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d6:	4770      	bx	lr

080151d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80151d8:	b5b0      	push	{r4, r5, r7, lr}
 80151da:	b08a      	sub	sp, #40	; 0x28
 80151dc:	af02      	add	r7, sp, #8
 80151de:	60f8      	str	r0, [r7, #12]
 80151e0:	60b9      	str	r1, [r7, #8]
 80151e2:	607a      	str	r2, [r7, #4]
 80151e4:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80151e6:	f107 0318 	add.w	r3, r7, #24
 80151ea:	6879      	ldr	r1, [r7, #4]
 80151ec:	4618      	mov	r0, r3
 80151ee:	f000 fd72 	bl	8015cd6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 80151f2:	4603      	mov	r3, r0
 80151f4:	f107 0010 	add.w	r0, r7, #16
 80151f8:	68ba      	ldr	r2, [r7, #8]
 80151fa:	68f9      	ldr	r1, [r7, #12]
 80151fc:	f000 fc48 	bl	8015a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00f      	beq.n	8015226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015206:	693c      	ldr	r4, [r7, #16]
 8015208:	697d      	ldr	r5, [r7, #20]
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f000 fd6f 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8015210:	4602      	mov	r2, r0
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	9300      	str	r3, [sp, #0]
 8015216:	4613      	mov	r3, r2
 8015218:	462a      	mov	r2, r5
 801521a:	4621      	mov	r1, r4
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f000 fd71 	bl	8015d04 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 8015222:	4603      	mov	r3, r0
			  __node_gen);
 8015224:	e007      	b.n	8015236 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015226:	693a      	ldr	r2, [r7, #16]
 8015228:	f107 031c 	add.w	r3, r7, #28
 801522c:	4611      	mov	r1, r2
 801522e:	4618      	mov	r0, r3
 8015230:	f000 fc1f 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8015234:	69fb      	ldr	r3, [r7, #28]
    }
 8015236:	4618      	mov	r0, r3
 8015238:	3720      	adds	r7, #32
 801523a:	46bd      	mov	sp, r7
 801523c:	bdb0      	pop	{r4, r5, r7, pc}

0801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801523e:	b480      	push	{r7}
 8015240:	b083      	sub	sp, #12
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	68db      	ldr	r3, [r3, #12]
 801524a:	4618      	mov	r0, r3
 801524c:	370c      	adds	r7, #12
 801524e:	46bd      	mov	sp, r7
 8015250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015254:	4770      	bx	lr

08015256 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015256:	b480      	push	{r7}
 8015258:	b083      	sub	sp, #12
 801525a:	af00      	add	r7, sp, #0
 801525c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	689b      	ldr	r3, [r3, #8]
 8015262:	4618      	mov	r0, r3
 8015264:	370c      	adds	r7, #12
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801526e:	b580      	push	{r7, lr}
 8015270:	b082      	sub	sp, #8
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
 8015276:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8015278:	6839      	ldr	r1, [r7, #0]
 801527a:	6878      	ldr	r0, [r7, #4]
 801527c:	f000 fd8b 	bl	8015d96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8015280:	6839      	ldr	r1, [r7, #0]
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 fd9c 	bl	8015dc0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8015288:	bf00      	nop
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>:
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
 8015298:	6039      	str	r1, [r7, #0]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4618      	mov	r0, r3
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>:
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	6039      	str	r1, [r7, #0]
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f000 f870 	bl	8015398 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4618      	mov	r0, r3
 80152bc:	3708      	adds	r7, #8
 80152be:	46bd      	mov	sp, r7
 80152c0:	bd80      	pop	{r7, pc}

080152c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80152c2:	b580      	push	{r7, lr}
 80152c4:	b084      	sub	sp, #16
 80152c6:	af00      	add	r7, sp, #0
 80152c8:	60f8      	str	r0, [r7, #12]
 80152ca:	60b9      	str	r1, [r7, #8]
 80152cc:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f000 fd88 	bl	8015de4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>
 80152d4:	4603      	mov	r3, r0
 80152d6:	4619      	mov	r1, r3
 80152d8:	68f8      	ldr	r0, [r7, #12]
 80152da:	f000 fd8e 	bl	8015dfa <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	68b9      	ldr	r1, [r7, #8]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 fd97 	bl	8015e16 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	3304      	adds	r3, #4
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f9 feba 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	4618      	mov	r0, r3
 80152f6:	3710      	adds	r7, #16
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}

080152fc <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>:
 80152fc:	b480      	push	{r7}
 80152fe:	b083      	sub	sp, #12
 8015300:	af00      	add	r7, sp, #0
 8015302:	6078      	str	r0, [r7, #4]
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	4618      	mov	r0, r3
 801530a:	370c      	adds	r7, #12
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 8015314:	b480      	push	{r7}
 8015316:	b083      	sub	sp, #12
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	683a      	ldr	r2, [r7, #0]
 8015322:	601a      	str	r2, [r3, #0]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	4618      	mov	r0, r3
 8015328:	370c      	adds	r7, #12
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr

08015332 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015332:	b5b0      	push	{r4, r5, r7, lr}
 8015334:	b08a      	sub	sp, #40	; 0x28
 8015336:	af02      	add	r7, sp, #8
 8015338:	60f8      	str	r0, [r7, #12]
 801533a:	60b9      	str	r1, [r7, #8]
 801533c:	607a      	str	r2, [r7, #4]
 801533e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015340:	f107 0318 	add.w	r3, r7, #24
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	4618      	mov	r0, r3
 8015348:	f7fd fa98 	bl	801287c <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 801534c:	4603      	mov	r3, r0
 801534e:	f107 0010 	add.w	r0, r7, #16
 8015352:	68ba      	ldr	r2, [r7, #8]
 8015354:	68f9      	ldr	r1, [r7, #12]
 8015356:	f7fc f85e 	bl	8011416 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>
      if (__res.second)
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d00f      	beq.n	8015380 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015360:	693c      	ldr	r4, [r7, #16]
 8015362:	697d      	ldr	r5, [r7, #20]
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 fd62 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 801536a:	4602      	mov	r2, r0
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	4613      	mov	r3, r2
 8015372:	462a      	mov	r2, r5
 8015374:	4621      	mov	r1, r4
 8015376:	68f8      	ldr	r0, [r7, #12]
 8015378:	f000 fd64 	bl	8015e44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 801537c:	4603      	mov	r3, r0
			  __node_gen);
 801537e:	e007      	b.n	8015390 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015380:	693a      	ldr	r2, [r7, #16]
 8015382:	f107 031c 	add.w	r3, r7, #28
 8015386:	4611      	mov	r1, r2
 8015388:	4618      	mov	r0, r3
 801538a:	f7fc f9c8 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801538e:	69fb      	ldr	r3, [r7, #28]
    }
 8015390:	4618      	mov	r0, r3
 8015392:	3720      	adds	r7, #32
 8015394:	46bd      	mov	sp, r7
 8015396:	bdb0      	pop	{r4, r5, r7, pc}

08015398 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	4618      	mov	r0, r3
 80153a4:	370c      	adds	r7, #12
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr

080153ae <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80153ae:	b480      	push	{r7}
 80153b0:	b083      	sub	sp, #12
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
 80153b6:	6039      	str	r1, [r7, #0]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	4618      	mov	r0, r3
 80153bc:	370c      	adds	r7, #12
 80153be:	46bd      	mov	sp, r7
 80153c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c4:	4770      	bx	lr

080153c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>:
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
 80153ce:	6039      	str	r1, [r7, #0]
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f000 fd80 	bl	8015ed6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4618      	mov	r0, r3
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}

080153e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f000 fd7d 	bl	8015eec <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>
 80153f2:	4603      	mov	r3, r0
 80153f4:	4619      	mov	r1, r3
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f000 fd83 	bl	8015f02 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	68b9      	ldr	r1, [r7, #8]
 8015400:	4618      	mov	r0, r3
 8015402:	f000 fb2a 	bl	8015a5a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	3304      	adds	r3, #4
 801540a:	4618      	mov	r0, r3
 801540c:	f7f9 fe2b 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}

0801541a <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>:
 801541a:	b480      	push	{r7}
 801541c:	b083      	sub	sp, #12
 801541e:	af00      	add	r7, sp, #0
 8015420:	6078      	str	r0, [r7, #4]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	4618      	mov	r0, r3
 8015428:	370c      	adds	r7, #12
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr

08015432 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8015432:	b480      	push	{r7}
 8015434:	b083      	sub	sp, #12
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	683a      	ldr	r2, [r7, #0]
 8015440:	601a      	str	r2, [r3, #0]
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4618      	mov	r0, r3
 8015446:	370c      	adds	r7, #12
 8015448:	46bd      	mov	sp, r7
 801544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544e:	4770      	bx	lr

08015450 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015450:	b5b0      	push	{r4, r5, r7, lr}
 8015452:	b08a      	sub	sp, #40	; 0x28
 8015454:	af02      	add	r7, sp, #8
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 801545e:	f107 0318 	add.w	r3, r7, #24
 8015462:	6879      	ldr	r1, [r7, #4]
 8015464:	4618      	mov	r0, r3
 8015466:	f7fd fbec 	bl	8012c42 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 801546a:	4603      	mov	r3, r0
 801546c:	f107 0010 	add.w	r0, r7, #16
 8015470:	68ba      	ldr	r2, [r7, #8]
 8015472:	68f9      	ldr	r1, [r7, #12]
 8015474:	f7fc fa75 	bl	8011962 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>
      if (__res.second)
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d00f      	beq.n	801549e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 801547e:	693c      	ldr	r4, [r7, #16]
 8015480:	697d      	ldr	r5, [r7, #20]
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 fd4b 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8015488:	4602      	mov	r2, r0
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	4613      	mov	r3, r2
 8015490:	462a      	mov	r2, r5
 8015492:	4621      	mov	r1, r4
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f000 fd4d 	bl	8015f34 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 801549a:	4603      	mov	r3, r0
			  __node_gen);
 801549c:	e007      	b.n	80154ae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 801549e:	693a      	ldr	r2, [r7, #16]
 80154a0:	f107 031c 	add.w	r3, r7, #28
 80154a4:	4611      	mov	r1, r2
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fc fbdf 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80154ac:	69fb      	ldr	r3, [r7, #28]
    }
 80154ae:	4618      	mov	r0, r3
 80154b0:	3720      	adds	r7, #32
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bdb0      	pop	{r4, r5, r7, pc}

080154b6 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>:
 80154b6:	b480      	push	{r7}
 80154b8:	b083      	sub	sp, #12
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
 80154be:	6039      	str	r1, [r7, #0]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	4618      	mov	r0, r3
 80154c4:	370c      	adds	r7, #12
 80154c6:	46bd      	mov	sp, r7
 80154c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154cc:	4770      	bx	lr

080154ce <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>:
 80154ce:	b580      	push	{r7, lr}
 80154d0:	b082      	sub	sp, #8
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
 80154d6:	6039      	str	r1, [r7, #0]
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f000 fd74 	bl	8015fc6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	4618      	mov	r0, r3
 80154e2:	3708      	adds	r7, #8
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b084      	sub	sp, #16
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80154f4:	6878      	ldr	r0, [r7, #4]
 80154f6:	f000 fd71 	bl	8015fdc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 80154fa:	4603      	mov	r3, r0
 80154fc:	4619      	mov	r1, r3
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	f000 fd77 	bl	8015ff2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	68b9      	ldr	r1, [r7, #8]
 8015508:	4618      	mov	r0, r3
 801550a:	f000 fc84 	bl	8015e16 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	3304      	adds	r3, #4
 8015512:	4618      	mov	r0, r3
 8015514:	f7f9 fda7 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	4618      	mov	r0, r3
 801551c:	3710      	adds	r7, #16
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}

08015522 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 8015522:	b480      	push	{r7}
 8015524:	b083      	sub	sp, #12
 8015526:	af00      	add	r7, sp, #0
 8015528:	6078      	str	r0, [r7, #4]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	4618      	mov	r0, r3
 8015530:	370c      	adds	r7, #12
 8015532:	46bd      	mov	sp, r7
 8015534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015538:	4770      	bx	lr

0801553a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 801553a:	b480      	push	{r7}
 801553c:	b083      	sub	sp, #12
 801553e:	af00      	add	r7, sp, #0
 8015540:	6078      	str	r0, [r7, #4]
 8015542:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	683a      	ldr	r2, [r7, #0]
 8015548:	601a      	str	r2, [r3, #0]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	4618      	mov	r0, r3
 801554e:	370c      	adds	r7, #12
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr

08015558 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	1d1a      	adds	r2, r3, #4
 8015564:	f107 030c 	add.w	r3, r7, #12
 8015568:	4611      	mov	r1, r2
 801556a:	4618      	mov	r0, r3
 801556c:	f000 fd4f 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	4618      	mov	r0, r3
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}

0801557a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801557a:	b480      	push	{r7}
 801557c:	b083      	sub	sp, #12
 801557e:	af00      	add	r7, sp, #0
 8015580:	6078      	str	r0, [r7, #4]
 8015582:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	601a      	str	r2, [r3, #0]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	4618      	mov	r0, r3
 8015590:	370c      	adds	r7, #12
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr

0801559a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801559a:	b5b0      	push	{r4, r5, r7, lr}
 801559c:	b08a      	sub	sp, #40	; 0x28
 801559e:	af02      	add	r7, sp, #8
 80155a0:	60f8      	str	r0, [r7, #12]
 80155a2:	60b9      	str	r1, [r7, #8]
 80155a4:	607a      	str	r2, [r7, #4]
 80155a6:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80155a8:	f107 0318 	add.w	r3, r7, #24
 80155ac:	6879      	ldr	r1, [r7, #4]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 fe5f 	bl	8016272 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 80155b4:	4603      	mov	r3, r0
 80155b6:	f107 0010 	add.w	r0, r7, #16
 80155ba:	68ba      	ldr	r2, [r7, #8]
 80155bc:	68f9      	ldr	r1, [r7, #12]
 80155be:	f000 fd35 	bl	801602c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d00f      	beq.n	80155e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80155c8:	693c      	ldr	r4, [r7, #16]
 80155ca:	697d      	ldr	r5, [r7, #20]
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f000 fe5c 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80155d2:	4602      	mov	r2, r0
 80155d4:	683b      	ldr	r3, [r7, #0]
 80155d6:	9300      	str	r3, [sp, #0]
 80155d8:	4613      	mov	r3, r2
 80155da:	462a      	mov	r2, r5
 80155dc:	4621      	mov	r1, r4
 80155de:	68f8      	ldr	r0, [r7, #12]
 80155e0:	f000 fe5e 	bl	80162a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80155e4:	4603      	mov	r3, r0
			  __node_gen);
 80155e6:	e007      	b.n	80155f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80155e8:	693a      	ldr	r2, [r7, #16]
 80155ea:	f107 031c 	add.w	r3, r7, #28
 80155ee:	4611      	mov	r1, r2
 80155f0:	4618      	mov	r0, r3
 80155f2:	f000 fd0c 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80155f6:	69fb      	ldr	r3, [r7, #28]
    }
 80155f8:	4618      	mov	r0, r3
 80155fa:	3720      	adds	r7, #32
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bdb0      	pop	{r4, r5, r7, pc}

08015600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015600:	b480      	push	{r7}
 8015602:	b083      	sub	sp, #12
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	4618      	mov	r0, r3
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr

08015618 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	4618      	mov	r0, r3
 8015626:	370c      	adds	r7, #12
 8015628:	46bd      	mov	sp, r7
 801562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562e:	4770      	bx	lr

08015630 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801563a:	6839      	ldr	r1, [r7, #0]
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 fe78 	bl	8016332 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8015642:	6839      	ldr	r1, [r7, #0]
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f000 fe89 	bl	801635c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 801564a:	bf00      	nop
 801564c:	3708      	adds	r7, #8
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>:
 8015652:	b480      	push	{r7}
 8015654:	b083      	sub	sp, #12
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
 801565a:	6039      	str	r1, [r7, #0]
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	370c      	adds	r7, #12
 8015662:	46bd      	mov	sp, r7
 8015664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015668:	4770      	bx	lr

0801566a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>:
 801566a:	b580      	push	{r7, lr}
 801566c:	b082      	sub	sp, #8
 801566e:	af00      	add	r7, sp, #0
 8015670:	6078      	str	r0, [r7, #4]
 8015672:	6039      	str	r1, [r7, #0]
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f000 fe83 	bl	8016380 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	3708      	adds	r7, #8
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}

08015684 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8015684:	b580      	push	{r7, lr}
 8015686:	b084      	sub	sp, #16
 8015688:	af00      	add	r7, sp, #0
 801568a:	60f8      	str	r0, [r7, #12]
 801568c:	60b9      	str	r1, [r7, #8]
 801568e:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f000 fe80 	bl	8016396 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015696:	4603      	mov	r3, r0
 8015698:	4619      	mov	r1, r3
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f000 fe86 	bl	80163ac <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	68b9      	ldr	r1, [r7, #8]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f000 fbb6 	bl	8015e16 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	3304      	adds	r3, #4
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7f9 fcd9 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	4618      	mov	r0, r3
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}

080156be <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 80156be:	b480      	push	{r7}
 80156c0:	b083      	sub	sp, #12
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	4618      	mov	r0, r3
 80156cc:	370c      	adds	r7, #12
 80156ce:	46bd      	mov	sp, r7
 80156d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d4:	4770      	bx	lr

080156d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 80156d6:	b480      	push	{r7}
 80156d8:	b083      	sub	sp, #12
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	683a      	ldr	r2, [r7, #0]
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	4618      	mov	r0, r3
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b084      	sub	sp, #16
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	1d1a      	adds	r2, r3, #4
 8015700:	f107 030c 	add.w	r3, r7, #12
 8015704:	4611      	mov	r1, r2
 8015706:	4618      	mov	r0, r3
 8015708:	f000 fe5e 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	4618      	mov	r0, r3
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}

08015716 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8015716:	b480      	push	{r7}
 8015718:	b083      	sub	sp, #12
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	601a      	str	r2, [r3, #0]
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4618      	mov	r0, r3
 801572c:	370c      	adds	r7, #12
 801572e:	46bd      	mov	sp, r7
 8015730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015734:	4770      	bx	lr

08015736 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015736:	b5b0      	push	{r4, r5, r7, lr}
 8015738:	b08a      	sub	sp, #40	; 0x28
 801573a:	af02      	add	r7, sp, #8
 801573c:	60f8      	str	r0, [r7, #12]
 801573e:	60b9      	str	r1, [r7, #8]
 8015740:	607a      	str	r2, [r7, #4]
 8015742:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015744:	f107 0318 	add.w	r3, r7, #24
 8015748:	6879      	ldr	r1, [r7, #4]
 801574a:	4618      	mov	r0, r3
 801574c:	f000 ff6e 	bl	801662c <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8015750:	4603      	mov	r3, r0
 8015752:	f107 0010 	add.w	r0, r7, #16
 8015756:	68ba      	ldr	r2, [r7, #8]
 8015758:	68f9      	ldr	r1, [r7, #12]
 801575a:	f000 fe44 	bl	80163e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d00f      	beq.n	8015784 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015764:	693c      	ldr	r4, [r7, #16]
 8015766:	697d      	ldr	r5, [r7, #20]
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 ff6b 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801576e:	4602      	mov	r2, r0
 8015770:	683b      	ldr	r3, [r7, #0]
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	4613      	mov	r3, r2
 8015776:	462a      	mov	r2, r5
 8015778:	4621      	mov	r1, r4
 801577a:	68f8      	ldr	r0, [r7, #12]
 801577c:	f000 ff6d 	bl	801665a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8015780:	4603      	mov	r3, r0
			  __node_gen);
 8015782:	e007      	b.n	8015794 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015784:	693a      	ldr	r2, [r7, #16]
 8015786:	f107 031c 	add.w	r3, r7, #28
 801578a:	4611      	mov	r1, r2
 801578c:	4618      	mov	r0, r3
 801578e:	f000 fe1b 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015792:	69fb      	ldr	r3, [r7, #28]
    }
 8015794:	4618      	mov	r0, r3
 8015796:	3720      	adds	r7, #32
 8015798:	46bd      	mov	sp, r7
 801579a:	bdb0      	pop	{r4, r5, r7, pc}

0801579c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801579c:	b480      	push	{r7}
 801579e:	b083      	sub	sp, #12
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	68db      	ldr	r3, [r3, #12]
 80157a8:	4618      	mov	r0, r3
 80157aa:	370c      	adds	r7, #12
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	689b      	ldr	r3, [r3, #8]
 80157c0:	4618      	mov	r0, r3
 80157c2:	370c      	adds	r7, #12
 80157c4:	46bd      	mov	sp, r7
 80157c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ca:	4770      	bx	lr

080157cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80157d6:	6839      	ldr	r1, [r7, #0]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 ff87 	bl	80166ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 80157de:	6839      	ldr	r1, [r7, #0]
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f000 ff98 	bl	8016716 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 80157e6:	bf00      	nop
 80157e8:	3708      	adds	r7, #8
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}

080157ee <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 80157ee:	b580      	push	{r7, lr}
 80157f0:	b082      	sub	sp, #8
 80157f2:	af00      	add	r7, sp, #0
 80157f4:	6078      	str	r0, [r7, #4]
 80157f6:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	4611      	mov	r1, r2
 80157fe:	4618      	mov	r0, r3
 8015800:	f000 ff9b 	bl	801673a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f103 0208 	add.w	r2, r3, #8
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	3308      	adds	r3, #8
 801580e:	4619      	mov	r1, r3
 8015810:	4610      	mov	r0, r2
 8015812:	f000 ffb9 	bl	8016788 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	f103 020c 	add.w	r2, r3, #12
 801581c:	683b      	ldr	r3, [r7, #0]
 801581e:	330c      	adds	r3, #12
 8015820:	4619      	mov	r1, r3
 8015822:	4610      	mov	r0, r2
 8015824:	f000 ffcf 	bl	80167c6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8015828:	bf00      	nop
 801582a:	3708      	adds	r7, #8
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>:
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	4618      	mov	r0, r3
 801583e:	370c      	adds	r7, #12
 8015840:	46bd      	mov	sp, r7
 8015842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015846:	4770      	bx	lr

08015848 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>:
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	6039      	str	r1, [r7, #0]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 ffd6 	bl	8016804 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	4618      	mov	r0, r3
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}

08015862 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8015862:	b580      	push	{r7, lr}
 8015864:	b084      	sub	sp, #16
 8015866:	af00      	add	r7, sp, #0
 8015868:	60f8      	str	r0, [r7, #12]
 801586a:	60b9      	str	r1, [r7, #8]
 801586c:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f000 ffd3 	bl	801681a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>
 8015874:	4603      	mov	r3, r0
 8015876:	4619      	mov	r1, r3
 8015878:	68f8      	ldr	r0, [r7, #12]
 801587a:	f000 ffd9 	bl	8016830 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	68b9      	ldr	r1, [r7, #8]
 8015882:	4618      	mov	r0, r3
 8015884:	f000 ffe2 	bl	801684c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3304      	adds	r3, #4
 801588c:	4618      	mov	r0, r3
 801588e:	f7f9 fbea 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	4618      	mov	r0, r3
 8015896:	3710      	adds	r7, #16
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}

0801589c <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	4618      	mov	r0, r3
 80158aa:	370c      	adds	r7, #12
 80158ac:	46bd      	mov	sp, r7
 80158ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b2:	4770      	bx	lr

080158b4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 80158b4:	b480      	push	{r7}
 80158b6:	b083      	sub	sp, #12
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	683a      	ldr	r2, [r7, #0]
 80158c2:	601a      	str	r2, [r3, #0]
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	4618      	mov	r0, r3
 80158c8:	370c      	adds	r7, #12
 80158ca:	46bd      	mov	sp, r7
 80158cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d0:	4770      	bx	lr

080158d2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80158d2:	b580      	push	{r7, lr}
 80158d4:	b084      	sub	sp, #16
 80158d6:	af00      	add	r7, sp, #0
 80158d8:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	1d1a      	adds	r2, r3, #4
 80158de:	f107 030c 	add.w	r3, r7, #12
 80158e2:	4611      	mov	r1, r2
 80158e4:	4618      	mov	r0, r3
 80158e6:	f000 ffbd 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	4618      	mov	r0, r3
 80158ee:	3710      	adds	r7, #16
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80158f4:	b480      	push	{r7}
 80158f6:	b083      	sub	sp, #12
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	601a      	str	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4618      	mov	r0, r3
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015914:	b5b0      	push	{r4, r5, r7, lr}
 8015916:	b08a      	sub	sp, #40	; 0x28
 8015918:	af02      	add	r7, sp, #8
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
 8015920:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015922:	f107 0318 	add.w	r3, r7, #24
 8015926:	6879      	ldr	r1, [r7, #4]
 8015928:	4618      	mov	r0, r3
 801592a:	f001 f8cd 	bl	8016ac8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 801592e:	4603      	mov	r3, r0
 8015930:	f107 0010 	add.w	r0, r7, #16
 8015934:	68ba      	ldr	r2, [r7, #8]
 8015936:	68f9      	ldr	r1, [r7, #12]
 8015938:	f000 ffa3 	bl	8016882 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d00f      	beq.n	8015962 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015942:	693c      	ldr	r4, [r7, #16]
 8015944:	697d      	ldr	r5, [r7, #20]
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f001 f8ca 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801594c:	4602      	mov	r2, r0
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	4613      	mov	r3, r2
 8015954:	462a      	mov	r2, r5
 8015956:	4621      	mov	r1, r4
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f001 f8cc 	bl	8016af6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 801595e:	4603      	mov	r3, r0
			  __node_gen);
 8015960:	e007      	b.n	8015972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015962:	693a      	ldr	r2, [r7, #16]
 8015964:	f107 031c 	add.w	r3, r7, #28
 8015968:	4611      	mov	r1, r2
 801596a:	4618      	mov	r0, r3
 801596c:	f000 ff7a 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015970:	69fb      	ldr	r3, [r7, #28]
    }
 8015972:	4618      	mov	r0, r3
 8015974:	3720      	adds	r7, #32
 8015976:	46bd      	mov	sp, r7
 8015978:	bdb0      	pop	{r4, r5, r7, pc}

0801597a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801597a:	b480      	push	{r7}
 801597c:	b083      	sub	sp, #12
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	4618      	mov	r0, r3
 8015988:	370c      	adds	r7, #12
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr

08015992 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015992:	b480      	push	{r7}
 8015994:	b083      	sub	sp, #12
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	689b      	ldr	r3, [r3, #8]
 801599e:	4618      	mov	r0, r3
 80159a0:	370c      	adds	r7, #12
 80159a2:	46bd      	mov	sp, r7
 80159a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a8:	4770      	bx	lr

080159aa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80159aa:	b580      	push	{r7, lr}
 80159ac:	b082      	sub	sp, #8
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	6078      	str	r0, [r7, #4]
 80159b2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80159b4:	6839      	ldr	r1, [r7, #0]
 80159b6:	6878      	ldr	r0, [r7, #4]
 80159b8:	f001 f8e6 	bl	8016b88 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f001 f8f7 	bl	8016bb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80159c4:	bf00      	nop
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80159d6:	687a      	ldr	r2, [r7, #4]
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d00a      	beq.n	80159f4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f001 f908 	bl	8016bf4 <_ZSt11__addressofImEPT_RS0_>
 80159e4:	4603      	mov	r3, r0
 80159e6:	4618      	mov	r0, r3
 80159e8:	f001 f90f 	bl	8016c0a <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	3304      	adds	r3, #4
 80159f0:	607b      	str	r3, [r7, #4]
 80159f2:	e7f0      	b.n	80159d6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 80159f4:	bf00      	nop
 80159f6:	3708      	adds	r7, #8
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	bf00      	nop
 8015a08:	370c      	adds	r7, #12
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a10:	4770      	bx	lr

08015a12 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8015a12:	b480      	push	{r7}
 8015a14:	b083      	sub	sp, #12
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	370c      	adds	r7, #12
 8015a20:	46bd      	mov	sp, r7
 8015a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a26:	4770      	bx	lr

08015a28 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8015a28:	b480      	push	{r7}
 8015a2a:	b083      	sub	sp, #12
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	4618      	mov	r0, r3
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr

08015a3e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015a3e:	b580      	push	{r7, lr}
 8015a40:	b082      	sub	sp, #8
 8015a42:	af00      	add	r7, sp, #0
 8015a44:	6078      	str	r0, [r7, #4]
 8015a46:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015a48:	6839      	ldr	r1, [r7, #0]
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f001 f8e8 	bl	8016c20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	4618      	mov	r0, r3
 8015a54:	3708      	adds	r7, #8
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bd80      	pop	{r7, pc}

08015a5a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8015a5a:	b480      	push	{r7}
 8015a5c:	b083      	sub	sp, #12
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	6078      	str	r0, [r7, #4]
 8015a62:	6039      	str	r1, [r7, #0]
      { }
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	4618      	mov	r0, r3
 8015a68:	370c      	adds	r7, #12
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a70:	4770      	bx	lr

08015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015a72:	b480      	push	{r7}
 8015a74:	b083      	sub	sp, #12
 8015a76:	af00      	add	r7, sp, #0
 8015a78:	6078      	str	r0, [r7, #4]
 8015a7a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	683a      	ldr	r2, [r7, #0]
 8015a80:	601a      	str	r2, [r3, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	4618      	mov	r0, r3
 8015a86:	370c      	adds	r7, #12
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8e:	4770      	bx	lr

08015a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015a90:	b590      	push	{r4, r7, lr}
 8015a92:	b08d      	sub	sp, #52	; 0x34
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8015a9e:	1d3b      	adds	r3, r7, #4
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f001 f8c9 	bl	8016c38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8015aaa:	69bc      	ldr	r4, [r7, #24]
 8015aac:	68b8      	ldr	r0, [r7, #8]
 8015aae:	f001 f8d4 	bl	8016c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	429c      	cmp	r4, r3
 8015ab6:	bf0c      	ite	eq
 8015ab8:	2301      	moveq	r3, #1
 8015aba:	2300      	movne	r3, #0
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d030      	beq.n	8015b24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8015ac2:	68b8      	ldr	r0, [r7, #8]
 8015ac4:	f001 f8d5 	bl	8016c72 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 8015ac8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d013      	beq.n	8015af6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8015ace:	68bc      	ldr	r4, [r7, #8]
 8015ad0:	68b8      	ldr	r0, [r7, #8]
 8015ad2:	f001 f8da 	bl	8016c8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f001 f8e1 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	4619      	mov	r1, r3
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f7fa fd50 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015aec:	4603      	mov	r3, r0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d001      	beq.n	8015af6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e000      	b.n	8015af8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8015af6:	2300      	movs	r3, #0
	  if (size() > 0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d00c      	beq.n	8015b16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8015afc:	2300      	movs	r3, #0
 8015afe:	61fb      	str	r3, [r7, #28]
 8015b00:	68b8      	ldr	r0, [r7, #8]
 8015b02:	f001 f8c2 	bl	8016c8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8015b06:	4602      	mov	r2, r0
 8015b08:	f107 031c 	add.w	r3, r7, #28
 8015b0c:	4619      	mov	r1, r3
 8015b0e:	68f8      	ldr	r0, [r7, #12]
 8015b10:	f7fc fa40 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015b14:	e0db      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	683a      	ldr	r2, [r7, #0]
 8015b1a:	68b9      	ldr	r1, [r7, #8]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f001 f8cc 	bl	8016cba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8015b22:	e0d4      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8015b24:	68bc      	ldr	r4, [r7, #8]
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f001 f8ba 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	461a      	mov	r2, r3
 8015b32:	6839      	ldr	r1, [r7, #0]
 8015b34:	4620      	mov	r0, r4
 8015b36:	f7fa fd29 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d057      	beq.n	8015bf0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8015b40:	69bb      	ldr	r3, [r7, #24]
 8015b42:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8015b44:	69bc      	ldr	r4, [r7, #24]
 8015b46:	68b8      	ldr	r0, [r7, #8]
 8015b48:	f001 f93c 	bl	8016dc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	429c      	cmp	r4, r3
 8015b52:	bf0c      	ite	eq
 8015b54:	2301      	moveq	r3, #1
 8015b56:	2300      	movne	r3, #0
 8015b58:	b2db      	uxtb	r3, r3
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d00d      	beq.n	8015b7a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8015b5e:	68b8      	ldr	r0, [r7, #8]
 8015b60:	f001 f930 	bl	8016dc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8015b64:	4604      	mov	r4, r0
 8015b66:	68b8      	ldr	r0, [r7, #8]
 8015b68:	f001 f92c 	bl	8016dc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	461a      	mov	r2, r3
 8015b70:	4621      	mov	r1, r4
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	f7fc fab5 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015b78:	e0a9      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8015b7a:	68bc      	ldr	r4, [r7, #8]
 8015b7c:	f107 0314 	add.w	r3, r7, #20
 8015b80:	4618      	mov	r0, r3
 8015b82:	f001 f92b 	bl	8016ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
 8015b86:	4603      	mov	r3, r0
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f001 f889 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015b90:	4603      	mov	r3, r0
 8015b92:	683a      	ldr	r2, [r7, #0]
 8015b94:	4619      	mov	r1, r3
 8015b96:	4620      	mov	r0, r4
 8015b98:	f7fa fcf8 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d01f      	beq.n	8015be2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7ff fb4a 	bl	801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	bf0c      	ite	eq
 8015bb0:	2301      	moveq	r3, #1
 8015bb2:	2300      	movne	r3, #0
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d00a      	beq.n	8015bd0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8015bba:	2300      	movs	r3, #0
 8015bbc:	623b      	str	r3, [r7, #32]
 8015bbe:	f107 0214 	add.w	r2, r7, #20
 8015bc2:	f107 0320 	add.w	r3, r7, #32
 8015bc6:	4619      	mov	r1, r3
 8015bc8:	68f8      	ldr	r0, [r7, #12]
 8015bca:	f7fc f9e3 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015bce:	e07e      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8015bd0:	f107 0218 	add.w	r2, r7, #24
 8015bd4:	f107 0318 	add.w	r3, r7, #24
 8015bd8:	4619      	mov	r1, r3
 8015bda:	68f8      	ldr	r0, [r7, #12]
 8015bdc:	f7fc fa81 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015be0:	e075      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	683a      	ldr	r2, [r7, #0]
 8015be6:	68b9      	ldr	r1, [r7, #8]
 8015be8:	4618      	mov	r0, r3
 8015bea:	f001 f866 	bl	8016cba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8015bee:	e06e      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8015bf0:	68bc      	ldr	r4, [r7, #8]
 8015bf2:	69bb      	ldr	r3, [r7, #24]
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f001 f854 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	683a      	ldr	r2, [r7, #0]
 8015bfe:	4619      	mov	r1, r3
 8015c00:	4620      	mov	r0, r4
 8015c02:	f7fa fcc3 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015c06:	4603      	mov	r3, r0
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d056      	beq.n	8015cba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8015c0c:	69bb      	ldr	r3, [r7, #24]
 8015c0e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8015c10:	69bc      	ldr	r4, [r7, #24]
 8015c12:	68b8      	ldr	r0, [r7, #8]
 8015c14:	f001 f839 	bl	8016c8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	429c      	cmp	r4, r3
 8015c1e:	bf0c      	ite	eq
 8015c20:	2301      	moveq	r3, #1
 8015c22:	2300      	movne	r3, #0
 8015c24:	b2db      	uxtb	r3, r3
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d00c      	beq.n	8015c44 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8015c2e:	68b8      	ldr	r0, [r7, #8]
 8015c30:	f001 f82b 	bl	8016c8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8015c34:	4602      	mov	r2, r0
 8015c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	68f8      	ldr	r0, [r7, #12]
 8015c3e:	f7fc f9a9 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015c42:	e044      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8015c44:	68bc      	ldr	r4, [r7, #8]
 8015c46:	f107 0310 	add.w	r3, r7, #16
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f001 f8d7 	bl	8016dfe <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>
 8015c50:	4603      	mov	r3, r0
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f001 f824 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	6839      	ldr	r1, [r7, #0]
 8015c60:	4620      	mov	r0, r4
 8015c62:	f7fa fc93 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015c66:	4603      	mov	r3, r0
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d01f      	beq.n	8015cac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8015c6c:	69bb      	ldr	r3, [r7, #24]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff fae5 	bl	801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	bf0c      	ite	eq
 8015c7a:	2301      	moveq	r3, #1
 8015c7c:	2300      	movne	r3, #0
 8015c7e:	b2db      	uxtb	r3, r3
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d00a      	beq.n	8015c9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8015c84:	2300      	movs	r3, #0
 8015c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c88:	f107 0218 	add.w	r2, r7, #24
 8015c8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015c90:	4619      	mov	r1, r3
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f7fc f97e 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015c98:	e019      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8015c9a:	f107 0210 	add.w	r2, r7, #16
 8015c9e:	f107 0310 	add.w	r3, r7, #16
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f7fc fa1c 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015caa:	e010      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	683a      	ldr	r2, [r7, #0]
 8015cb0:	68b9      	ldr	r1, [r7, #8]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f001 f801 	bl	8016cba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8015cb8:	e009      	b.n	8015cce <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8015cba:	2300      	movs	r3, #0
 8015cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cbe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015cc2:	f107 0318 	add.w	r3, r7, #24
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	68f8      	ldr	r0, [r7, #12]
 8015cca:	f7fc fa45 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015cce:	68f8      	ldr	r0, [r7, #12]
 8015cd0:	3734      	adds	r7, #52	; 0x34
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd90      	pop	{r4, r7, pc}

08015cd6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>:
      operator()(const _Pair& __x) const
 8015cd6:	b480      	push	{r7}
 8015cd8:	b083      	sub	sp, #12
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	370c      	adds	r7, #12
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cec:	4770      	bx	lr

08015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015cee:	b480      	push	{r7}
 8015cf0:	b083      	sub	sp, #12
 8015cf2:	af00      	add	r7, sp, #0
 8015cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015d04:	b5b0      	push	{r4, r5, r7, lr}
 8015d06:	b088      	sub	sp, #32
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	60f8      	str	r0, [r7, #12]
 8015d0c:	60b9      	str	r1, [r7, #8]
 8015d0e:	607a      	str	r2, [r7, #4]
 8015d10:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d11a      	bne.n	8015d4e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015d18:	68f8      	ldr	r0, [r7, #12]
 8015d1a:	f000 ff9e 	bl	8016c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d013      	beq.n	8015d4e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015d26:	68fc      	ldr	r4, [r7, #12]
 8015d28:	f107 0310 	add.w	r3, r7, #16
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7ff ffd1 	bl	8015cd6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8015d34:	4605      	mov	r5, r0
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f000 ffb3 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	461a      	mov	r2, r3
 8015d40:	4629      	mov	r1, r5
 8015d42:	4620      	mov	r0, r4
 8015d44:	f7fa fc22 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d001      	beq.n	8015d52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e000      	b.n	8015d54 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8015d52:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015d54:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015d56:	6838      	ldr	r0, [r7, #0]
 8015d58:	f7ff ffc9 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	4619      	mov	r1, r3
 8015d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d62:	f001 f85d 	bl	8016e20 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 8015d66:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015d6c:	7ff8      	ldrb	r0, [r7, #31]
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	69b9      	ldr	r1, [r7, #24]
 8015d72:	f004 fd82 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	695b      	ldr	r3, [r3, #20]
 8015d7a:	1c5a      	adds	r2, r3, #1
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8015d80:	f107 0314 	add.w	r3, r7, #20
 8015d84:	69b9      	ldr	r1, [r7, #24]
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7ff fe73 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8015d8c:	697b      	ldr	r3, [r7, #20]
      }
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3720      	adds	r7, #32
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bdb0      	pop	{r4, r5, r7, pc}

08015d96 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015d96:	b590      	push	{r4, r7, lr}
 8015d98:	b083      	sub	sp, #12
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6078      	str	r0, [r7, #4]
 8015d9e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f001 f851 	bl	8016e48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8015da6:	4604      	mov	r4, r0
 8015da8:	6838      	ldr	r0, [r7, #0]
 8015daa:	f001 f858 	bl	8016e5e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8015dae:	4603      	mov	r3, r0
 8015db0:	4619      	mov	r1, r3
 8015db2:	4620      	mov	r0, r4
 8015db4:	f001 f861 	bl	8016e7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>
      }
 8015db8:	bf00      	nop
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd90      	pop	{r4, r7, pc}

08015dc0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f001 f83c 	bl	8016e48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2201      	movs	r2, #1
 8015dd4:	6839      	ldr	r1, [r7, #0]
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f001 f85b 	bl	8016e92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>
 8015ddc:	bf00      	nop
 8015dde:	3708      	adds	r7, #8
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}

08015de4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	4618      	mov	r0, r3
 8015df0:	370c      	adds	r7, #12
 8015df2:	46bd      	mov	sp, r7
 8015df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df8:	4770      	bx	lr

08015dfa <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015dfa:	b580      	push	{r7, lr}
 8015dfc:	b082      	sub	sp, #8
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	6078      	str	r0, [r7, #4]
 8015e02:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015e04:	6839      	ldr	r1, [r7, #0]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f001 f862 	bl	8016ed0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3708      	adds	r7, #8
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}

08015e16 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8015e16:	b480      	push	{r7}
 8015e18:	b083      	sub	sp, #12
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	6078      	str	r0, [r7, #4]
 8015e1e:	6039      	str	r1, [r7, #0]
      { }
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	4618      	mov	r0, r3
 8015e24:	370c      	adds	r7, #12
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr

08015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015e2e:	b480      	push	{r7}
 8015e30:	b083      	sub	sp, #12
 8015e32:	af00      	add	r7, sp, #0
 8015e34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	4618      	mov	r0, r3
 8015e3a:	370c      	adds	r7, #12
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e42:	4770      	bx	lr

08015e44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015e44:	b5b0      	push	{r4, r5, r7, lr}
 8015e46:	b088      	sub	sp, #32
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	60f8      	str	r0, [r7, #12]
 8015e4c:	60b9      	str	r1, [r7, #8]
 8015e4e:	607a      	str	r2, [r7, #4]
 8015e50:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015e52:	68bb      	ldr	r3, [r7, #8]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d11a      	bne.n	8015e8e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015e58:	68f8      	ldr	r0, [r7, #12]
 8015e5a:	f7fc fb83 	bl	8012564 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	4293      	cmp	r3, r2
 8015e64:	d013      	beq.n	8015e8e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015e66:	68fc      	ldr	r4, [r7, #12]
 8015e68:	f107 0310 	add.w	r3, r7, #16
 8015e6c:	6839      	ldr	r1, [r7, #0]
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7fc fd04 	bl	801287c <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8015e74:	4605      	mov	r5, r0
 8015e76:	6878      	ldr	r0, [r7, #4]
 8015e78:	f7fa fd59 	bl	801092e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	461a      	mov	r2, r3
 8015e80:	4629      	mov	r1, r5
 8015e82:	4620      	mov	r0, r4
 8015e84:	f7fa fa4d 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d001      	beq.n	8015e92 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e000      	b.n	8015e94 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8015e92:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015e94:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015e96:	6838      	ldr	r0, [r7, #0]
 8015e98:	f7ff ffc9 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ea2:	f001 f821 	bl	8016ee8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8015ea6:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015eac:	7ff8      	ldrb	r0, [r7, #31]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	69b9      	ldr	r1, [r7, #24]
 8015eb2:	f004 fce2 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	695b      	ldr	r3, [r3, #20]
 8015eba:	1c5a      	adds	r2, r3, #1
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8015ec0:	f107 0314 	add.w	r3, r7, #20
 8015ec4:	69b9      	ldr	r1, [r7, #24]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fb fc29 	bl	801171e <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015ecc:	697b      	ldr	r3, [r7, #20]
      }
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3720      	adds	r7, #32
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bdb0      	pop	{r4, r5, r7, pc}

08015ed6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>:
 8015ed6:	b480      	push	{r7}
 8015ed8:	b083      	sub	sp, #12
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	6078      	str	r0, [r7, #4]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	370c      	adds	r7, #12
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	370c      	adds	r7, #12
 8015efa:	46bd      	mov	sp, r7
 8015efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f00:	4770      	bx	lr

08015f02 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015f02:	b580      	push	{r7, lr}
 8015f04:	b082      	sub	sp, #8
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	6078      	str	r0, [r7, #4]
 8015f0a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015f0c:	6839      	ldr	r1, [r7, #0]
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fffe 	bl	8016f10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	4618      	mov	r0, r3
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015f1e:	b480      	push	{r7}
 8015f20:	b083      	sub	sp, #12
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	370c      	adds	r7, #12
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015f34:	b5b0      	push	{r4, r5, r7, lr}
 8015f36:	b088      	sub	sp, #32
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	60b9      	str	r1, [r7, #8]
 8015f3e:	607a      	str	r2, [r7, #4]
 8015f40:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d11a      	bne.n	8015f7e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7fc fcee 	bl	801292a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	4293      	cmp	r3, r2
 8015f54:	d013      	beq.n	8015f7e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015f56:	68fc      	ldr	r4, [r7, #12]
 8015f58:	f107 0310 	add.w	r3, r7, #16
 8015f5c:	6839      	ldr	r1, [r7, #0]
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7fc fe6f 	bl	8012c42 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8015f64:	4605      	mov	r5, r0
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f7fa ff81 	bl	8010e6e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	461a      	mov	r2, r3
 8015f70:	4629      	mov	r1, r5
 8015f72:	4620      	mov	r0, r4
 8015f74:	f7fa fb0a 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d001      	beq.n	8015f82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8015f7e:	2301      	movs	r3, #1
 8015f80:	e000      	b.n	8015f84 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8015f82:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015f84:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015f86:	6838      	ldr	r0, [r7, #0]
 8015f88:	f7ff ffc9 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	4619      	mov	r1, r3
 8015f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f92:	f000 ffc9 	bl	8016f28 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8015f96:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015f9c:	7ff8      	ldrb	r0, [r7, #31]
 8015f9e:	687a      	ldr	r2, [r7, #4]
 8015fa0:	69b9      	ldr	r1, [r7, #24]
 8015fa2:	f004 fc6a 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	695b      	ldr	r3, [r3, #20]
 8015faa:	1c5a      	adds	r2, r3, #1
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8015fb0:	f107 0314 	add.w	r3, r7, #20
 8015fb4:	69b9      	ldr	r1, [r7, #24]
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7fb fe57 	bl	8011c6a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015fbc:	697b      	ldr	r3, [r7, #20]
      }
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3720      	adds	r7, #32
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bdb0      	pop	{r4, r5, r7, pc}

08015fc6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 8015fc6:	b480      	push	{r7}
 8015fc8:	b083      	sub	sp, #12
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	370c      	adds	r7, #12
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	370c      	adds	r7, #12
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr

08015ff2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015ff2:	b580      	push	{r7, lr}
 8015ff4:	b082      	sub	sp, #8
 8015ff6:	af00      	add	r7, sp, #0
 8015ff8:	6078      	str	r0, [r7, #4]
 8015ffa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015ffc:	6839      	ldr	r1, [r7, #0]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 ffa6 	bl	8016f50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	4618      	mov	r0, r3
 8016008:	3708      	adds	r7, #8
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}

0801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801600e:	b480      	push	{r7}
 8016010:	b083      	sub	sp, #12
 8016012:	af00      	add	r7, sp, #0
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	683a      	ldr	r2, [r7, #0]
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	4618      	mov	r0, r3
 8016022:	370c      	adds	r7, #12
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr

0801602c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801602c:	b590      	push	{r4, r7, lr}
 801602e:	b08d      	sub	sp, #52	; 0x34
 8016030:	af00      	add	r7, sp, #0
 8016032:	60f8      	str	r0, [r7, #12]
 8016034:	60b9      	str	r1, [r7, #8]
 8016036:	607a      	str	r2, [r7, #4]
 8016038:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801603a:	1d3b      	adds	r3, r7, #4
 801603c:	4618      	mov	r0, r3
 801603e:	f000 ff93 	bl	8016f68 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 8016042:	4603      	mov	r3, r0
 8016044:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8016046:	69bc      	ldr	r4, [r7, #24]
 8016048:	68b8      	ldr	r0, [r7, #8]
 801604a:	f000 ff9e 	bl	8016f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801604e:	4603      	mov	r3, r0
 8016050:	429c      	cmp	r4, r3
 8016052:	bf0c      	ite	eq
 8016054:	2301      	moveq	r3, #1
 8016056:	2300      	movne	r3, #0
 8016058:	b2db      	uxtb	r3, r3
 801605a:	2b00      	cmp	r3, #0
 801605c:	d030      	beq.n	80160c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 801605e:	68b8      	ldr	r0, [r7, #8]
 8016060:	f000 ff9f 	bl	8016fa2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8016064:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8016066:	2b00      	cmp	r3, #0
 8016068:	d013      	beq.n	8016092 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 801606a:	68bc      	ldr	r4, [r7, #8]
 801606c:	68b8      	ldr	r0, [r7, #8]
 801606e:	f000 ffa4 	bl	8016fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8016072:	4603      	mov	r3, r0
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	4618      	mov	r0, r3
 8016078:	f000 ffab 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801607c:	4603      	mov	r3, r0
 801607e:	683a      	ldr	r2, [r7, #0]
 8016080:	4619      	mov	r1, r3
 8016082:	4620      	mov	r0, r4
 8016084:	f7fa f94d 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	d001      	beq.n	8016092 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 801608e:	2301      	movs	r3, #1
 8016090:	e000      	b.n	8016094 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8016092:	2300      	movs	r3, #0
	  if (size() > 0
 8016094:	2b00      	cmp	r3, #0
 8016096:	d00c      	beq.n	80160b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8016098:	2300      	movs	r3, #0
 801609a:	61fb      	str	r3, [r7, #28]
 801609c:	68b8      	ldr	r0, [r7, #8]
 801609e:	f000 ff8c 	bl	8016fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80160a2:	4602      	mov	r2, r0
 80160a4:	f107 031c 	add.w	r3, r7, #28
 80160a8:	4619      	mov	r1, r3
 80160aa:	68f8      	ldr	r0, [r7, #12]
 80160ac:	f7fb ff72 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80160b0:	e0db      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	683a      	ldr	r2, [r7, #0]
 80160b6:	68b9      	ldr	r1, [r7, #8]
 80160b8:	4618      	mov	r0, r3
 80160ba:	f000 ff96 	bl	8016fea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80160be:	e0d4      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80160c0:	68bc      	ldr	r4, [r7, #8]
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	4618      	mov	r0, r3
 80160c6:	f000 ff84 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80160ca:	4603      	mov	r3, r0
 80160cc:	461a      	mov	r2, r3
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	4620      	mov	r0, r4
 80160d2:	f7fa f926 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80160d6:	4603      	mov	r3, r0
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d057      	beq.n	801618c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 80160dc:	69bb      	ldr	r3, [r7, #24]
 80160de:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80160e0:	69bc      	ldr	r4, [r7, #24]
 80160e2:	68b8      	ldr	r0, [r7, #8]
 80160e4:	f001 f806 	bl	80170f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80160e8:	4603      	mov	r3, r0
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	429c      	cmp	r4, r3
 80160ee:	bf0c      	ite	eq
 80160f0:	2301      	moveq	r3, #1
 80160f2:	2300      	movne	r3, #0
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d00d      	beq.n	8016116 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80160fa:	68b8      	ldr	r0, [r7, #8]
 80160fc:	f000 fffa 	bl	80170f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8016100:	4604      	mov	r4, r0
 8016102:	68b8      	ldr	r0, [r7, #8]
 8016104:	f000 fff6 	bl	80170f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8016108:	4603      	mov	r3, r0
 801610a:	461a      	mov	r2, r3
 801610c:	4621      	mov	r1, r4
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f7fb ffe7 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016114:	e0a9      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8016116:	68bc      	ldr	r4, [r7, #8]
 8016118:	f107 0314 	add.w	r3, r7, #20
 801611c:	4618      	mov	r0, r3
 801611e:	f000 fff5 	bl	801710c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 8016122:	4603      	mov	r3, r0
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	4618      	mov	r0, r3
 8016128:	f000 ff53 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801612c:	4603      	mov	r3, r0
 801612e:	683a      	ldr	r2, [r7, #0]
 8016130:	4619      	mov	r1, r3
 8016132:	4620      	mov	r0, r4
 8016134:	f7fa f8f5 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d01f      	beq.n	801617e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	4618      	mov	r0, r3
 8016142:	f7ff fa5d 	bl	8015600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016146:	4603      	mov	r3, r0
 8016148:	2b00      	cmp	r3, #0
 801614a:	bf0c      	ite	eq
 801614c:	2301      	moveq	r3, #1
 801614e:	2300      	movne	r3, #0
 8016150:	b2db      	uxtb	r3, r3
 8016152:	2b00      	cmp	r3, #0
 8016154:	d00a      	beq.n	801616c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8016156:	2300      	movs	r3, #0
 8016158:	623b      	str	r3, [r7, #32]
 801615a:	f107 0214 	add.w	r2, r7, #20
 801615e:	f107 0320 	add.w	r3, r7, #32
 8016162:	4619      	mov	r1, r3
 8016164:	68f8      	ldr	r0, [r7, #12]
 8016166:	f7fb ff15 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801616a:	e07e      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801616c:	f107 0218 	add.w	r2, r7, #24
 8016170:	f107 0318 	add.w	r3, r7, #24
 8016174:	4619      	mov	r1, r3
 8016176:	68f8      	ldr	r0, [r7, #12]
 8016178:	f7fb ffb3 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801617c:	e075      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	683a      	ldr	r2, [r7, #0]
 8016182:	68b9      	ldr	r1, [r7, #8]
 8016184:	4618      	mov	r0, r3
 8016186:	f000 ff30 	bl	8016fea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 801618a:	e06e      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801618c:	68bc      	ldr	r4, [r7, #8]
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	4618      	mov	r0, r3
 8016192:	f000 ff1e 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016196:	4603      	mov	r3, r0
 8016198:	683a      	ldr	r2, [r7, #0]
 801619a:	4619      	mov	r1, r3
 801619c:	4620      	mov	r0, r4
 801619e:	f7fa f8c0 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d056      	beq.n	8016256 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80161ac:	69bc      	ldr	r4, [r7, #24]
 80161ae:	68b8      	ldr	r0, [r7, #8]
 80161b0:	f000 ff03 	bl	8016fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80161b4:	4603      	mov	r3, r0
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	429c      	cmp	r4, r3
 80161ba:	bf0c      	ite	eq
 80161bc:	2301      	moveq	r3, #1
 80161be:	2300      	movne	r3, #0
 80161c0:	b2db      	uxtb	r3, r3
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d00c      	beq.n	80161e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80161c6:	2300      	movs	r3, #0
 80161c8:	627b      	str	r3, [r7, #36]	; 0x24
 80161ca:	68b8      	ldr	r0, [r7, #8]
 80161cc:	f000 fef5 	bl	8016fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80161d0:	4602      	mov	r2, r0
 80161d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80161d6:	4619      	mov	r1, r3
 80161d8:	68f8      	ldr	r0, [r7, #12]
 80161da:	f7fb fedb 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80161de:	e044      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80161e0:	68bc      	ldr	r4, [r7, #8]
 80161e2:	f107 0310 	add.w	r3, r7, #16
 80161e6:	4618      	mov	r0, r3
 80161e8:	f000 ffa1 	bl	801712e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 80161ec:	4603      	mov	r3, r0
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	4618      	mov	r0, r3
 80161f2:	f000 feee 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80161f6:	4603      	mov	r3, r0
 80161f8:	461a      	mov	r2, r3
 80161fa:	6839      	ldr	r1, [r7, #0]
 80161fc:	4620      	mov	r0, r4
 80161fe:	f7fa f890 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016202:	4603      	mov	r3, r0
 8016204:	2b00      	cmp	r3, #0
 8016206:	d01f      	beq.n	8016248 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8016208:	69bb      	ldr	r3, [r7, #24]
 801620a:	4618      	mov	r0, r3
 801620c:	f7ff f9f8 	bl	8015600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016210:	4603      	mov	r3, r0
 8016212:	2b00      	cmp	r3, #0
 8016214:	bf0c      	ite	eq
 8016216:	2301      	moveq	r3, #1
 8016218:	2300      	movne	r3, #0
 801621a:	b2db      	uxtb	r3, r3
 801621c:	2b00      	cmp	r3, #0
 801621e:	d00a      	beq.n	8016236 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8016220:	2300      	movs	r3, #0
 8016222:	62bb      	str	r3, [r7, #40]	; 0x28
 8016224:	f107 0218 	add.w	r2, r7, #24
 8016228:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801622c:	4619      	mov	r1, r3
 801622e:	68f8      	ldr	r0, [r7, #12]
 8016230:	f7fb feb0 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016234:	e019      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8016236:	f107 0210 	add.w	r2, r7, #16
 801623a:	f107 0310 	add.w	r3, r7, #16
 801623e:	4619      	mov	r1, r3
 8016240:	68f8      	ldr	r0, [r7, #12]
 8016242:	f7fb ff4e 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016246:	e010      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	683a      	ldr	r2, [r7, #0]
 801624c:	68b9      	ldr	r1, [r7, #8]
 801624e:	4618      	mov	r0, r3
 8016250:	f000 fecb 	bl	8016fea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8016254:	e009      	b.n	801626a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8016256:	2300      	movs	r3, #0
 8016258:	62fb      	str	r3, [r7, #44]	; 0x2c
 801625a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801625e:	f107 0318 	add.w	r3, r7, #24
 8016262:	4619      	mov	r1, r3
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7fb ff77 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801626a:	68f8      	ldr	r0, [r7, #12]
 801626c:	3734      	adds	r7, #52	; 0x34
 801626e:	46bd      	mov	sp, r7
 8016270:	bd90      	pop	{r4, r7, pc}

08016272 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8016272:	b480      	push	{r7}
 8016274:	b083      	sub	sp, #12
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
 801627a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	4618      	mov	r0, r3
 8016280:	370c      	adds	r7, #12
 8016282:	46bd      	mov	sp, r7
 8016284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016288:	4770      	bx	lr

0801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801628a:	b480      	push	{r7}
 801628c:	b083      	sub	sp, #12
 801628e:	af00      	add	r7, sp, #0
 8016290:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	4618      	mov	r0, r3
 8016296:	370c      	adds	r7, #12
 8016298:	46bd      	mov	sp, r7
 801629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801629e:	4770      	bx	lr

080162a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80162a0:	b5b0      	push	{r4, r5, r7, lr}
 80162a2:	b088      	sub	sp, #32
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	60f8      	str	r0, [r7, #12]
 80162a8:	60b9      	str	r1, [r7, #8]
 80162aa:	607a      	str	r2, [r7, #4]
 80162ac:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d11a      	bne.n	80162ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80162b4:	68f8      	ldr	r0, [r7, #12]
 80162b6:	f000 fe68 	bl	8016f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80162ba:	4602      	mov	r2, r0
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	4293      	cmp	r3, r2
 80162c0:	d013      	beq.n	80162ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80162c2:	68fc      	ldr	r4, [r7, #12]
 80162c4:	f107 0310 	add.w	r3, r7, #16
 80162c8:	6839      	ldr	r1, [r7, #0]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7ff ffd1 	bl	8016272 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 80162d0:	4605      	mov	r5, r0
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 fe7d 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80162d8:	4603      	mov	r3, r0
 80162da:	461a      	mov	r2, r3
 80162dc:	4629      	mov	r1, r5
 80162de:	4620      	mov	r0, r4
 80162e0:	f7fa f81f 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80162e4:	4603      	mov	r3, r0
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d001      	beq.n	80162ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 80162ea:	2301      	movs	r3, #1
 80162ec:	e000      	b.n	80162f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 80162ee:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80162f0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80162f2:	6838      	ldr	r0, [r7, #0]
 80162f4:	f7ff ffc9 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80162f8:	4603      	mov	r3, r0
 80162fa:	4619      	mov	r1, r3
 80162fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162fe:	f000 ff27 	bl	8017150 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8016302:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8016308:	7ff8      	ldrb	r0, [r7, #31]
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	69b9      	ldr	r1, [r7, #24]
 801630e:	f004 fab4 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	695b      	ldr	r3, [r3, #20]
 8016316:	1c5a      	adds	r2, r3, #1
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 801631c:	f107 0314 	add.w	r3, r7, #20
 8016320:	69b9      	ldr	r1, [r7, #24]
 8016322:	4618      	mov	r0, r3
 8016324:	f7ff fe73 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016328:	697b      	ldr	r3, [r7, #20]
      }
 801632a:	4618      	mov	r0, r3
 801632c:	3720      	adds	r7, #32
 801632e:	46bd      	mov	sp, r7
 8016330:	bdb0      	pop	{r4, r5, r7, pc}

08016332 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016332:	b590      	push	{r4, r7, lr}
 8016334:	b083      	sub	sp, #12
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
 801633a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 ff1b 	bl	8017178 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016342:	4604      	mov	r4, r0
 8016344:	6838      	ldr	r0, [r7, #0]
 8016346:	f000 ff22 	bl	801718e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 801634a:	4603      	mov	r3, r0
 801634c:	4619      	mov	r1, r3
 801634e:	4620      	mov	r0, r4
 8016350:	f000 ff2b 	bl	80171aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8016354:	bf00      	nop
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	bd90      	pop	{r4, r7, pc}

0801635c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f000 ff06 	bl	8017178 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 801636c:	4603      	mov	r3, r0
 801636e:	2201      	movs	r2, #1
 8016370:	6839      	ldr	r1, [r7, #0]
 8016372:	4618      	mov	r0, r3
 8016374:	f000 ff25 	bl	80171c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 8016378:	bf00      	nop
 801637a:	3708      	adds	r7, #8
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 8016380:	b480      	push	{r7}
 8016382:	b083      	sub	sp, #12
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	4618      	mov	r0, r3
 801638c:	370c      	adds	r7, #12
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr

08016396 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8016396:	b480      	push	{r7}
 8016398:	b083      	sub	sp, #12
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	4618      	mov	r0, r3
 80163a2:	370c      	adds	r7, #12
 80163a4:	46bd      	mov	sp, r7
 80163a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163aa:	4770      	bx	lr

080163ac <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b082      	sub	sp, #8
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80163b6:	6839      	ldr	r1, [r7, #0]
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f000 ff21 	bl	8017200 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	4618      	mov	r0, r3
 80163c2:	3708      	adds	r7, #8
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80163c8:	b480      	push	{r7}
 80163ca:	b083      	sub	sp, #12
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
 80163d0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	683a      	ldr	r2, [r7, #0]
 80163d6:	601a      	str	r2, [r3, #0]
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	4618      	mov	r0, r3
 80163dc:	370c      	adds	r7, #12
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr

080163e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80163e6:	b590      	push	{r4, r7, lr}
 80163e8:	b08d      	sub	sp, #52	; 0x34
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	60f8      	str	r0, [r7, #12]
 80163ee:	60b9      	str	r1, [r7, #8]
 80163f0:	607a      	str	r2, [r7, #4]
 80163f2:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80163f4:	1d3b      	adds	r3, r7, #4
 80163f6:	4618      	mov	r0, r3
 80163f8:	f000 ff0e 	bl	8017218 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 80163fc:	4603      	mov	r3, r0
 80163fe:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8016400:	69bc      	ldr	r4, [r7, #24]
 8016402:	68b8      	ldr	r0, [r7, #8]
 8016404:	f000 ff19 	bl	801723a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8016408:	4603      	mov	r3, r0
 801640a:	429c      	cmp	r4, r3
 801640c:	bf0c      	ite	eq
 801640e:	2301      	moveq	r3, #1
 8016410:	2300      	movne	r3, #0
 8016412:	b2db      	uxtb	r3, r3
 8016414:	2b00      	cmp	r3, #0
 8016416:	d030      	beq.n	801647a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8016418:	68b8      	ldr	r0, [r7, #8]
 801641a:	f000 ff1a 	bl	8017252 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 801641e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8016420:	2b00      	cmp	r3, #0
 8016422:	d013      	beq.n	801644c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8016424:	68bc      	ldr	r4, [r7, #8]
 8016426:	68b8      	ldr	r0, [r7, #8]
 8016428:	f000 ff1f 	bl	801726a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 801642c:	4603      	mov	r3, r0
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4618      	mov	r0, r3
 8016432:	f000 ff26 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016436:	4603      	mov	r3, r0
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	4619      	mov	r1, r3
 801643c:	4620      	mov	r0, r4
 801643e:	f7f9 ff70 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d001      	beq.n	801644c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8016448:	2301      	movs	r3, #1
 801644a:	e000      	b.n	801644e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 801644c:	2300      	movs	r3, #0
	  if (size() > 0
 801644e:	2b00      	cmp	r3, #0
 8016450:	d00c      	beq.n	801646c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8016452:	2300      	movs	r3, #0
 8016454:	61fb      	str	r3, [r7, #28]
 8016456:	68b8      	ldr	r0, [r7, #8]
 8016458:	f000 ff07 	bl	801726a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 801645c:	4602      	mov	r2, r0
 801645e:	f107 031c 	add.w	r3, r7, #28
 8016462:	4619      	mov	r1, r3
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f7fb fd95 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801646a:	e0db      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	683a      	ldr	r2, [r7, #0]
 8016470:	68b9      	ldr	r1, [r7, #8]
 8016472:	4618      	mov	r0, r3
 8016474:	f000 ff11 	bl	801729a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8016478:	e0d4      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801647a:	68bc      	ldr	r4, [r7, #8]
 801647c:	69bb      	ldr	r3, [r7, #24]
 801647e:	4618      	mov	r0, r3
 8016480:	f000 feff 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016484:	4603      	mov	r3, r0
 8016486:	461a      	mov	r2, r3
 8016488:	6839      	ldr	r1, [r7, #0]
 801648a:	4620      	mov	r0, r4
 801648c:	f7f9 ff49 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016490:	4603      	mov	r3, r0
 8016492:	2b00      	cmp	r3, #0
 8016494:	d057      	beq.n	8016546 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8016496:	69bb      	ldr	r3, [r7, #24]
 8016498:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801649a:	69bc      	ldr	r4, [r7, #24]
 801649c:	68b8      	ldr	r0, [r7, #8]
 801649e:	f000 ff81 	bl	80173a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80164a2:	4603      	mov	r3, r0
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	429c      	cmp	r4, r3
 80164a8:	bf0c      	ite	eq
 80164aa:	2301      	moveq	r3, #1
 80164ac:	2300      	movne	r3, #0
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d00d      	beq.n	80164d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80164b4:	68b8      	ldr	r0, [r7, #8]
 80164b6:	f000 ff75 	bl	80173a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80164ba:	4604      	mov	r4, r0
 80164bc:	68b8      	ldr	r0, [r7, #8]
 80164be:	f000 ff71 	bl	80173a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 80164c2:	4603      	mov	r3, r0
 80164c4:	461a      	mov	r2, r3
 80164c6:	4621      	mov	r1, r4
 80164c8:	68f8      	ldr	r0, [r7, #12]
 80164ca:	f7fb fe0a 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80164ce:	e0a9      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80164d0:	68bc      	ldr	r4, [r7, #8]
 80164d2:	f107 0314 	add.w	r3, r7, #20
 80164d6:	4618      	mov	r0, r3
 80164d8:	f000 ff70 	bl	80173bc <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 80164dc:	4603      	mov	r3, r0
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4618      	mov	r0, r3
 80164e2:	f000 fece 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80164e6:	4603      	mov	r3, r0
 80164e8:	683a      	ldr	r2, [r7, #0]
 80164ea:	4619      	mov	r1, r3
 80164ec:	4620      	mov	r0, r4
 80164ee:	f7f9 ff18 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d01f      	beq.n	8016538 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7ff f94e 	bl	801579c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016500:	4603      	mov	r3, r0
 8016502:	2b00      	cmp	r3, #0
 8016504:	bf0c      	ite	eq
 8016506:	2301      	moveq	r3, #1
 8016508:	2300      	movne	r3, #0
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b00      	cmp	r3, #0
 801650e:	d00a      	beq.n	8016526 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8016510:	2300      	movs	r3, #0
 8016512:	623b      	str	r3, [r7, #32]
 8016514:	f107 0214 	add.w	r2, r7, #20
 8016518:	f107 0320 	add.w	r3, r7, #32
 801651c:	4619      	mov	r1, r3
 801651e:	68f8      	ldr	r0, [r7, #12]
 8016520:	f7fb fd38 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016524:	e07e      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8016526:	f107 0218 	add.w	r2, r7, #24
 801652a:	f107 0318 	add.w	r3, r7, #24
 801652e:	4619      	mov	r1, r3
 8016530:	68f8      	ldr	r0, [r7, #12]
 8016532:	f7fb fdd6 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016536:	e075      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	683a      	ldr	r2, [r7, #0]
 801653c:	68b9      	ldr	r1, [r7, #8]
 801653e:	4618      	mov	r0, r3
 8016540:	f000 feab 	bl	801729a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8016544:	e06e      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8016546:	68bc      	ldr	r4, [r7, #8]
 8016548:	69bb      	ldr	r3, [r7, #24]
 801654a:	4618      	mov	r0, r3
 801654c:	f000 fe99 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016550:	4603      	mov	r3, r0
 8016552:	683a      	ldr	r2, [r7, #0]
 8016554:	4619      	mov	r1, r3
 8016556:	4620      	mov	r0, r4
 8016558:	f7f9 fee3 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801655c:	4603      	mov	r3, r0
 801655e:	2b00      	cmp	r3, #0
 8016560:	d056      	beq.n	8016610 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8016566:	69bc      	ldr	r4, [r7, #24]
 8016568:	68b8      	ldr	r0, [r7, #8]
 801656a:	f000 fe7e 	bl	801726a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 801656e:	4603      	mov	r3, r0
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	429c      	cmp	r4, r3
 8016574:	bf0c      	ite	eq
 8016576:	2301      	moveq	r3, #1
 8016578:	2300      	movne	r3, #0
 801657a:	b2db      	uxtb	r3, r3
 801657c:	2b00      	cmp	r3, #0
 801657e:	d00c      	beq.n	801659a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8016580:	2300      	movs	r3, #0
 8016582:	627b      	str	r3, [r7, #36]	; 0x24
 8016584:	68b8      	ldr	r0, [r7, #8]
 8016586:	f000 fe70 	bl	801726a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 801658a:	4602      	mov	r2, r0
 801658c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016590:	4619      	mov	r1, r3
 8016592:	68f8      	ldr	r0, [r7, #12]
 8016594:	f7fb fcfe 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016598:	e044      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801659a:	68bc      	ldr	r4, [r7, #8]
 801659c:	f107 0310 	add.w	r3, r7, #16
 80165a0:	4618      	mov	r0, r3
 80165a2:	f000 ff1c 	bl	80173de <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 80165a6:	4603      	mov	r3, r0
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f000 fe69 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80165b0:	4603      	mov	r3, r0
 80165b2:	461a      	mov	r2, r3
 80165b4:	6839      	ldr	r1, [r7, #0]
 80165b6:	4620      	mov	r0, r4
 80165b8:	f7f9 feb3 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80165bc:	4603      	mov	r3, r0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d01f      	beq.n	8016602 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7ff f8e9 	bl	801579c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	bf0c      	ite	eq
 80165d0:	2301      	moveq	r3, #1
 80165d2:	2300      	movne	r3, #0
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d00a      	beq.n	80165f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 80165da:	2300      	movs	r3, #0
 80165dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80165de:	f107 0218 	add.w	r2, r7, #24
 80165e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80165e6:	4619      	mov	r1, r3
 80165e8:	68f8      	ldr	r0, [r7, #12]
 80165ea:	f7fb fcd3 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80165ee:	e019      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80165f0:	f107 0210 	add.w	r2, r7, #16
 80165f4:	f107 0310 	add.w	r3, r7, #16
 80165f8:	4619      	mov	r1, r3
 80165fa:	68f8      	ldr	r0, [r7, #12]
 80165fc:	f7fb fd71 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016600:	e010      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	683a      	ldr	r2, [r7, #0]
 8016606:	68b9      	ldr	r1, [r7, #8]
 8016608:	4618      	mov	r0, r3
 801660a:	f000 fe46 	bl	801729a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 801660e:	e009      	b.n	8016624 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8016610:	2300      	movs	r3, #0
 8016612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016614:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016618:	f107 0318 	add.w	r3, r7, #24
 801661c:	4619      	mov	r1, r3
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f7fb fd9a 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	3734      	adds	r7, #52	; 0x34
 8016628:	46bd      	mov	sp, r7
 801662a:	bd90      	pop	{r4, r7, pc}

0801662c <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 801662c:	b480      	push	{r7}
 801662e:	b083      	sub	sp, #12
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	4618      	mov	r0, r3
 801663a:	370c      	adds	r7, #12
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4618      	mov	r0, r3
 8016650:	370c      	adds	r7, #12
 8016652:	46bd      	mov	sp, r7
 8016654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016658:	4770      	bx	lr

0801665a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801665a:	b5b0      	push	{r4, r5, r7, lr}
 801665c:	b088      	sub	sp, #32
 801665e:	af00      	add	r7, sp, #0
 8016660:	60f8      	str	r0, [r7, #12]
 8016662:	60b9      	str	r1, [r7, #8]
 8016664:	607a      	str	r2, [r7, #4]
 8016666:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d11a      	bne.n	80166a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 801666e:	68f8      	ldr	r0, [r7, #12]
 8016670:	f000 fde3 	bl	801723a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8016674:	4602      	mov	r2, r0
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4293      	cmp	r3, r2
 801667a:	d013      	beq.n	80166a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 801667c:	68fc      	ldr	r4, [r7, #12]
 801667e:	f107 0310 	add.w	r3, r7, #16
 8016682:	6839      	ldr	r1, [r7, #0]
 8016684:	4618      	mov	r0, r3
 8016686:	f7ff ffd1 	bl	801662c <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 801668a:	4605      	mov	r5, r0
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f000 fdf8 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016692:	4603      	mov	r3, r0
 8016694:	461a      	mov	r2, r3
 8016696:	4629      	mov	r1, r5
 8016698:	4620      	mov	r0, r4
 801669a:	f7f9 fe42 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d001      	beq.n	80166a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 80166a4:	2301      	movs	r3, #1
 80166a6:	e000      	b.n	80166aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 80166a8:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80166aa:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80166ac:	6838      	ldr	r0, [r7, #0]
 80166ae:	f7ff ffc9 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80166b2:	4603      	mov	r3, r0
 80166b4:	4619      	mov	r1, r3
 80166b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166b8:	f000 fea2 	bl	8017400 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80166bc:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80166c2:	7ff8      	ldrb	r0, [r7, #31]
 80166c4:	687a      	ldr	r2, [r7, #4]
 80166c6:	69b9      	ldr	r1, [r7, #24]
 80166c8:	f004 f8d7 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	695b      	ldr	r3, [r3, #20]
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80166d6:	f107 0314 	add.w	r3, r7, #20
 80166da:	69b9      	ldr	r1, [r7, #24]
 80166dc:	4618      	mov	r0, r3
 80166de:	f7ff fe73 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80166e2:	697b      	ldr	r3, [r7, #20]
      }
 80166e4:	4618      	mov	r0, r3
 80166e6:	3720      	adds	r7, #32
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bdb0      	pop	{r4, r5, r7, pc}

080166ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80166ec:	b590      	push	{r4, r7, lr}
 80166ee:	b083      	sub	sp, #12
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
 80166f4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f000 fe96 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80166fc:	4604      	mov	r4, r0
 80166fe:	6838      	ldr	r0, [r7, #0]
 8016700:	f000 fe9d 	bl	801743e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8016704:	4603      	mov	r3, r0
 8016706:	4619      	mov	r1, r3
 8016708:	4620      	mov	r0, r4
 801670a:	f000 fea6 	bl	801745a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 801670e:	bf00      	nop
 8016710:	370c      	adds	r7, #12
 8016712:	46bd      	mov	sp, r7
 8016714:	bd90      	pop	{r4, r7, pc}

08016716 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016716:	b580      	push	{r7, lr}
 8016718:	b082      	sub	sp, #8
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f000 fe81 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016726:	4603      	mov	r3, r0
 8016728:	2201      	movs	r2, #1
 801672a:	6839      	ldr	r1, [r7, #0]
 801672c:	4618      	mov	r0, r3
 801672e:	f000 fea0 	bl	8017472 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 8016732:	bf00      	nop
 8016734:	3708      	adds	r7, #8
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}

0801673a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801673a:	b580      	push	{r7, lr}
 801673c:	b084      	sub	sp, #16
 801673e:	af00      	add	r7, sp, #0
 8016740:	6078      	str	r0, [r7, #4]
 8016742:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f000 feb3 	bl	80174b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801674a:	4602      	mov	r2, r0
 801674c:	f107 0308 	add.w	r3, r7, #8
 8016750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016754:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8016758:	6838      	ldr	r0, [r7, #0]
 801675a:	f000 fea9 	bl	80174b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801675e:	4602      	mov	r2, r0
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016766:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801676a:	f107 0308 	add.w	r3, r7, #8
 801676e:	4618      	mov	r0, r3
 8016770:	f000 fe9e 	bl	80174b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8016774:	4602      	mov	r2, r0
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	e892 0003 	ldmia.w	r2, {r0, r1}
 801677c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8016780:	bf00      	nop
 8016782:	3710      	adds	r7, #16
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}

08016788 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8016788:	b580      	push	{r7, lr}
 801678a:	b084      	sub	sp, #16
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fe97 	bl	80174c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8016798:	4603      	mov	r3, r0
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801679e:	6838      	ldr	r0, [r7, #0]
 80167a0:	f000 fe91 	bl	80174c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80167a4:	4603      	mov	r3, r0
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80167ac:	f107 030c 	add.w	r3, r7, #12
 80167b0:	4618      	mov	r0, r3
 80167b2:	f000 fe88 	bl	80174c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80167b6:	4603      	mov	r3, r0
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	683b      	ldr	r3, [r7, #0]
 80167bc:	601a      	str	r2, [r3, #0]
    }
 80167be:	bf00      	nop
 80167c0:	3710      	adds	r7, #16
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b084      	sub	sp, #16
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
 80167ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f000 fe83 	bl	80174dc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80167d6:	4603      	mov	r3, r0
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80167dc:	6838      	ldr	r0, [r7, #0]
 80167de:	f000 fe7d 	bl	80174dc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80167e2:	4603      	mov	r3, r0
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80167ea:	f107 030c 	add.w	r3, r7, #12
 80167ee:	4618      	mov	r0, r3
 80167f0:	f000 fe74 	bl	80174dc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80167f4:	4603      	mov	r3, r0
 80167f6:	681a      	ldr	r2, [r3, #0]
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	601a      	str	r2, [r3, #0]
    }
 80167fc:	bf00      	nop
 80167fe:	3710      	adds	r7, #16
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	4618      	mov	r0, r3
 8016810:	370c      	adds	r7, #12
 8016812:	46bd      	mov	sp, r7
 8016814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016818:	4770      	bx	lr

0801681a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 801681a:	b480      	push	{r7}
 801681c:	b083      	sub	sp, #12
 801681e:	af00      	add	r7, sp, #0
 8016820:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	4618      	mov	r0, r3
 8016826:	370c      	adds	r7, #12
 8016828:	46bd      	mov	sp, r7
 801682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682e:	4770      	bx	lr

08016830 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8016830:	b580      	push	{r7, lr}
 8016832:	b082      	sub	sp, #8
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801683a:	6839      	ldr	r1, [r7, #0]
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f000 fe58 	bl	80174f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	4618      	mov	r0, r3
 8016846:	3708      	adds	r7, #8
 8016848:	46bd      	mov	sp, r7
 801684a:	bd80      	pop	{r7, pc}

0801684c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	6039      	str	r1, [r7, #0]
      { }
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
 801686c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	683a      	ldr	r2, [r7, #0]
 8016872:	601a      	str	r2, [r3, #0]
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	4618      	mov	r0, r3
 8016878:	370c      	adds	r7, #12
 801687a:	46bd      	mov	sp, r7
 801687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016880:	4770      	bx	lr

08016882 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016882:	b590      	push	{r4, r7, lr}
 8016884:	b08d      	sub	sp, #52	; 0x34
 8016886:	af00      	add	r7, sp, #0
 8016888:	60f8      	str	r0, [r7, #12]
 801688a:	60b9      	str	r1, [r7, #8]
 801688c:	607a      	str	r2, [r7, #4]
 801688e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8016890:	1d3b      	adds	r3, r7, #4
 8016892:	4618      	mov	r0, r3
 8016894:	f000 fe39 	bl	801750a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 8016898:	4603      	mov	r3, r0
 801689a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801689c:	69bc      	ldr	r4, [r7, #24]
 801689e:	68b8      	ldr	r0, [r7, #8]
 80168a0:	f000 fe44 	bl	801752c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80168a4:	4603      	mov	r3, r0
 80168a6:	429c      	cmp	r4, r3
 80168a8:	bf0c      	ite	eq
 80168aa:	2301      	moveq	r3, #1
 80168ac:	2300      	movne	r3, #0
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d030      	beq.n	8016916 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 80168b4:	68b8      	ldr	r0, [r7, #8]
 80168b6:	f000 fe45 	bl	8017544 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 80168ba:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d013      	beq.n	80168e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80168c0:	68bc      	ldr	r4, [r7, #8]
 80168c2:	68b8      	ldr	r0, [r7, #8]
 80168c4:	f000 fe4a 	bl	801755c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80168c8:	4603      	mov	r3, r0
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4618      	mov	r0, r3
 80168ce:	f000 fe51 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80168d2:	4603      	mov	r3, r0
 80168d4:	683a      	ldr	r2, [r7, #0]
 80168d6:	4619      	mov	r1, r3
 80168d8:	4620      	mov	r0, r4
 80168da:	f000 fe57 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 80168de:	4603      	mov	r3, r0
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d001      	beq.n	80168e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80168e4:	2301      	movs	r3, #1
 80168e6:	e000      	b.n	80168ea <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 80168e8:	2300      	movs	r3, #0
	  if (size() > 0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00c      	beq.n	8016908 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80168ee:	2300      	movs	r3, #0
 80168f0:	61fb      	str	r3, [r7, #28]
 80168f2:	68b8      	ldr	r0, [r7, #8]
 80168f4:	f000 fe32 	bl	801755c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80168f8:	4602      	mov	r2, r0
 80168fa:	f107 031c 	add.w	r3, r7, #28
 80168fe:	4619      	mov	r1, r3
 8016900:	68f8      	ldr	r0, [r7, #12]
 8016902:	f7fb fb47 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016906:	e0db      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	683a      	ldr	r2, [r7, #0]
 801690c:	68b9      	ldr	r1, [r7, #8]
 801690e:	4618      	mov	r0, r3
 8016910:	f000 fe51 	bl	80175b6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016914:	e0d4      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8016916:	68bc      	ldr	r4, [r7, #8]
 8016918:	69bb      	ldr	r3, [r7, #24]
 801691a:	4618      	mov	r0, r3
 801691c:	f000 fe2a 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016920:	4603      	mov	r3, r0
 8016922:	461a      	mov	r2, r3
 8016924:	6839      	ldr	r1, [r7, #0]
 8016926:	4620      	mov	r0, r4
 8016928:	f000 fe30 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 801692c:	4603      	mov	r3, r0
 801692e:	2b00      	cmp	r3, #0
 8016930:	d057      	beq.n	80169e2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8016932:	69bb      	ldr	r3, [r7, #24]
 8016934:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8016936:	69bc      	ldr	r4, [r7, #24]
 8016938:	68b8      	ldr	r0, [r7, #8]
 801693a:	f000 fec1 	bl	80176c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 801693e:	4603      	mov	r3, r0
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	429c      	cmp	r4, r3
 8016944:	bf0c      	ite	eq
 8016946:	2301      	moveq	r3, #1
 8016948:	2300      	movne	r3, #0
 801694a:	b2db      	uxtb	r3, r3
 801694c:	2b00      	cmp	r3, #0
 801694e:	d00d      	beq.n	801696c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8016950:	68b8      	ldr	r0, [r7, #8]
 8016952:	f000 feb5 	bl	80176c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8016956:	4604      	mov	r4, r0
 8016958:	68b8      	ldr	r0, [r7, #8]
 801695a:	f000 feb1 	bl	80176c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 801695e:	4603      	mov	r3, r0
 8016960:	461a      	mov	r2, r3
 8016962:	4621      	mov	r1, r4
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f7fb fbbc 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801696a:	e0a9      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801696c:	68bc      	ldr	r4, [r7, #8]
 801696e:	f107 0314 	add.w	r3, r7, #20
 8016972:	4618      	mov	r0, r3
 8016974:	f000 feb0 	bl	80176d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 8016978:	4603      	mov	r3, r0
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4618      	mov	r0, r3
 801697e:	f000 fdf9 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016982:	4603      	mov	r3, r0
 8016984:	683a      	ldr	r2, [r7, #0]
 8016986:	4619      	mov	r1, r3
 8016988:	4620      	mov	r0, r4
 801698a:	f000 fdff 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 801698e:	4603      	mov	r3, r0
 8016990:	2b00      	cmp	r3, #0
 8016992:	d01f      	beq.n	80169d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	4618      	mov	r0, r3
 8016998:	f7fe ffef 	bl	801597a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801699c:	4603      	mov	r3, r0
 801699e:	2b00      	cmp	r3, #0
 80169a0:	bf0c      	ite	eq
 80169a2:	2301      	moveq	r3, #1
 80169a4:	2300      	movne	r3, #0
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d00a      	beq.n	80169c2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80169ac:	2300      	movs	r3, #0
 80169ae:	623b      	str	r3, [r7, #32]
 80169b0:	f107 0214 	add.w	r2, r7, #20
 80169b4:	f107 0320 	add.w	r3, r7, #32
 80169b8:	4619      	mov	r1, r3
 80169ba:	68f8      	ldr	r0, [r7, #12]
 80169bc:	f7fb faea 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80169c0:	e07e      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80169c2:	f107 0218 	add.w	r2, r7, #24
 80169c6:	f107 0318 	add.w	r3, r7, #24
 80169ca:	4619      	mov	r1, r3
 80169cc:	68f8      	ldr	r0, [r7, #12]
 80169ce:	f7fb fb88 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80169d2:	e075      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	683a      	ldr	r2, [r7, #0]
 80169d8:	68b9      	ldr	r1, [r7, #8]
 80169da:	4618      	mov	r0, r3
 80169dc:	f000 fdeb 	bl	80175b6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80169e0:	e06e      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80169e2:	68bc      	ldr	r4, [r7, #8]
 80169e4:	69bb      	ldr	r3, [r7, #24]
 80169e6:	4618      	mov	r0, r3
 80169e8:	f000 fdc4 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80169ec:	4603      	mov	r3, r0
 80169ee:	683a      	ldr	r2, [r7, #0]
 80169f0:	4619      	mov	r1, r3
 80169f2:	4620      	mov	r0, r4
 80169f4:	f000 fdca 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 80169f8:	4603      	mov	r3, r0
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d056      	beq.n	8016aac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 80169fe:	69bb      	ldr	r3, [r7, #24]
 8016a00:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8016a02:	69bc      	ldr	r4, [r7, #24]
 8016a04:	68b8      	ldr	r0, [r7, #8]
 8016a06:	f000 fda9 	bl	801755c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	429c      	cmp	r4, r3
 8016a10:	bf0c      	ite	eq
 8016a12:	2301      	moveq	r3, #1
 8016a14:	2300      	movne	r3, #0
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d00c      	beq.n	8016a36 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a20:	68b8      	ldr	r0, [r7, #8]
 8016a22:	f000 fd9b 	bl	801755c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016a26:	4602      	mov	r2, r0
 8016a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	68f8      	ldr	r0, [r7, #12]
 8016a30:	f7fb fab0 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016a34:	e044      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8016a36:	68bc      	ldr	r4, [r7, #8]
 8016a38:	f107 0310 	add.w	r3, r7, #16
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	f000 fe5c 	bl	80176fa <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 8016a42:	4603      	mov	r3, r0
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4618      	mov	r0, r3
 8016a48:	f000 fd94 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	461a      	mov	r2, r3
 8016a50:	6839      	ldr	r1, [r7, #0]
 8016a52:	4620      	mov	r0, r4
 8016a54:	f000 fd9a 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d01f      	beq.n	8016a9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8016a5e:	69bb      	ldr	r3, [r7, #24]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7fe ff8a 	bl	801597a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016a66:	4603      	mov	r3, r0
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	bf0c      	ite	eq
 8016a6c:	2301      	moveq	r3, #1
 8016a6e:	2300      	movne	r3, #0
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00a      	beq.n	8016a8c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8016a76:	2300      	movs	r3, #0
 8016a78:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a7a:	f107 0218 	add.w	r2, r7, #24
 8016a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a82:	4619      	mov	r1, r3
 8016a84:	68f8      	ldr	r0, [r7, #12]
 8016a86:	f7fb fa85 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016a8a:	e019      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8016a8c:	f107 0210 	add.w	r2, r7, #16
 8016a90:	f107 0310 	add.w	r3, r7, #16
 8016a94:	4619      	mov	r1, r3
 8016a96:	68f8      	ldr	r0, [r7, #12]
 8016a98:	f7fb fb23 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016a9c:	e010      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	683a      	ldr	r2, [r7, #0]
 8016aa2:	68b9      	ldr	r1, [r7, #8]
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f000 fd86 	bl	80175b6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016aaa:	e009      	b.n	8016ac0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8016aac:	2300      	movs	r3, #0
 8016aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016ab0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016ab4:	f107 0318 	add.w	r3, r7, #24
 8016ab8:	4619      	mov	r1, r3
 8016aba:	68f8      	ldr	r0, [r7, #12]
 8016abc:	f7fb fb4c 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016ac0:	68f8      	ldr	r0, [r7, #12]
 8016ac2:	3734      	adds	r7, #52	; 0x34
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd90      	pop	{r4, r7, pc}

08016ac8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8016ad2:	683b      	ldr	r3, [r7, #0]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	370c      	adds	r7, #12
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ade:	4770      	bx	lr

08016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	4618      	mov	r0, r3
 8016aec:	370c      	adds	r7, #12
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr

08016af6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016af6:	b5b0      	push	{r4, r5, r7, lr}
 8016af8:	b088      	sub	sp, #32
 8016afa:	af00      	add	r7, sp, #0
 8016afc:	60f8      	str	r0, [r7, #12]
 8016afe:	60b9      	str	r1, [r7, #8]
 8016b00:	607a      	str	r2, [r7, #4]
 8016b02:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016b04:	68bb      	ldr	r3, [r7, #8]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d11a      	bne.n	8016b40 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016b0a:	68f8      	ldr	r0, [r7, #12]
 8016b0c:	f000 fd0e 	bl	801752c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8016b10:	4602      	mov	r2, r0
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4293      	cmp	r3, r2
 8016b16:	d013      	beq.n	8016b40 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016b18:	68fc      	ldr	r4, [r7, #12]
 8016b1a:	f107 0310 	add.w	r3, r7, #16
 8016b1e:	6839      	ldr	r1, [r7, #0]
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7ff ffd1 	bl	8016ac8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8016b26:	4605      	mov	r5, r0
 8016b28:	6878      	ldr	r0, [r7, #4]
 8016b2a:	f000 fd23 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016b2e:	4603      	mov	r3, r0
 8016b30:	461a      	mov	r2, r3
 8016b32:	4629      	mov	r1, r5
 8016b34:	4620      	mov	r0, r4
 8016b36:	f000 fd29 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d001      	beq.n	8016b44 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8016b40:	2301      	movs	r3, #1
 8016b42:	e000      	b.n	8016b46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8016b44:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016b46:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8016b48:	6838      	ldr	r0, [r7, #0]
 8016b4a:	f7ff ffc9 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016b4e:	4603      	mov	r3, r0
 8016b50:	4619      	mov	r1, r3
 8016b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b54:	f000 fde2 	bl	801771c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8016b58:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8016b5e:	7ff8      	ldrb	r0, [r7, #31]
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	69b9      	ldr	r1, [r7, #24]
 8016b64:	f003 fe89 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	695b      	ldr	r3, [r3, #20]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8016b72:	f107 0314 	add.w	r3, r7, #20
 8016b76:	69b9      	ldr	r1, [r7, #24]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7ff fe73 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016b7e:	697b      	ldr	r3, [r7, #20]
      }
 8016b80:	4618      	mov	r0, r3
 8016b82:	3720      	adds	r7, #32
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bdb0      	pop	{r4, r5, r7, pc}

08016b88 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016b88:	b590      	push	{r4, r7, lr}
 8016b8a:	b083      	sub	sp, #12
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8016b92:	6878      	ldr	r0, [r7, #4]
 8016b94:	f000 fdd6 	bl	8017744 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8016b98:	4604      	mov	r4, r0
 8016b9a:	6838      	ldr	r0, [r7, #0]
 8016b9c:	f000 fddd 	bl	801775a <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	4619      	mov	r1, r3
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	f000 fde6 	bl	8017776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8016baa:	bf00      	nop
 8016bac:	370c      	adds	r7, #12
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd90      	pop	{r4, r7, pc}

08016bb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016bb2:	b580      	push	{r7, lr}
 8016bb4:	b082      	sub	sp, #8
 8016bb6:	af00      	add	r7, sp, #0
 8016bb8:	6078      	str	r0, [r7, #4]
 8016bba:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f000 fdc1 	bl	8017744 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	2201      	movs	r2, #1
 8016bc6:	6839      	ldr	r1, [r7, #0]
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f000 fde0 	bl	801778e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 8016bce:	bf00      	nop
 8016bd0:	3708      	adds	r7, #8
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b084      	sub	sp, #16
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	60f8      	str	r0, [r7, #12]
 8016bde:	60b9      	str	r1, [r7, #8]
 8016be0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	009b      	lsls	r3, r3, #2
 8016be6:	4619      	mov	r1, r3
 8016be8:	68b8      	ldr	r0, [r7, #8]
 8016bea:	f003 fddb 	bl	801a7a4 <_ZdlPvj>
      }
 8016bee:	3710      	adds	r7, #16
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}

08016bf4 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8016bf4:	b480      	push	{r7}
 8016bf6:	b083      	sub	sp, #12
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	4618      	mov	r0, r3
 8016c00:	370c      	adds	r7, #12
 8016c02:	46bd      	mov	sp, r7
 8016c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c08:	4770      	bx	lr

08016c0a <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b082      	sub	sp, #8
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8016c12:	6878      	ldr	r0, [r7, #4]
 8016c14:	f000 fdda 	bl	80177cc <_ZSt10destroy_atImEvPT_>
    }
 8016c18:	bf00      	nop
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}

08016c20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8016c20:	b480      	push	{r7}
 8016c22:	b083      	sub	sp, #12
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	370c      	adds	r7, #12
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr

08016c38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b084      	sub	sp, #16
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681a      	ldr	r2, [r3, #0]
 8016c44:	f107 030c 	add.w	r3, r7, #12
 8016c48:	4611      	mov	r1, r2
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fe ff11 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	4618      	mov	r0, r3
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}

08016c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8016c5a:	b480      	push	{r7}
 8016c5c:	b083      	sub	sp, #12
 8016c5e:	af00      	add	r7, sp, #0
 8016c60:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	3304      	adds	r3, #4
 8016c66:	4618      	mov	r0, r3
 8016c68:	370c      	adds	r7, #12
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c70:	4770      	bx	lr

08016c72 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016c72:	b480      	push	{r7}
 8016c74:	b083      	sub	sp, #12
 8016c76:	af00      	add	r7, sp, #0
 8016c78:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	695b      	ldr	r3, [r3, #20]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	370c      	adds	r7, #12
 8016c82:	46bd      	mov	sp, r7
 8016c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c88:	4770      	bx	lr

08016c8a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8016c8a:	b480      	push	{r7}
 8016c8c:	b083      	sub	sp, #12
 8016c8e:	af00      	add	r7, sp, #0
 8016c90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	3310      	adds	r3, #16
 8016c96:	4618      	mov	r0, r3
 8016c98:	370c      	adds	r7, #12
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca0:	4770      	bx	lr

08016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8016ca2:	b580      	push	{r7, lr}
 8016ca4:	b082      	sub	sp, #8
 8016ca6:	af00      	add	r7, sp, #0
 8016ca8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 fd98 	bl	80177e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3708      	adds	r7, #8
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}

08016cba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016cba:	b590      	push	{r4, r7, lr}
 8016cbc:	b08b      	sub	sp, #44	; 0x2c
 8016cbe:	af00      	add	r7, sp, #0
 8016cc0:	60f8      	str	r0, [r7, #12]
 8016cc2:	60b9      	str	r1, [r7, #8]
 8016cc4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8016cc6:	68b8      	ldr	r0, [r7, #8]
 8016cc8:	f7fd fe02 	bl	80148d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8016cd0:	68b8      	ldr	r0, [r7, #8]
 8016cd2:	f7ff ffc2 	bl	8016c5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8016cda:	2301      	movs	r3, #1
 8016cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8016ce0:	69bb      	ldr	r3, [r7, #24]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d020      	beq.n	8016d28 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8016ce6:	69bb      	ldr	r3, [r7, #24]
 8016ce8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8016cea:	68bc      	ldr	r4, [r7, #8]
 8016cec:	69bb      	ldr	r3, [r7, #24]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f000 fd76 	bl	80177e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	6879      	ldr	r1, [r7, #4]
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f7f9 fc46 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8016d00:	4603      	mov	r3, r0
 8016d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8016d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d005      	beq.n	8016d1a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 8016d0e:	69bb      	ldr	r3, [r7, #24]
 8016d10:	4618      	mov	r0, r3
 8016d12:	f7fe faa0 	bl	8015256 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8016d16:	4603      	mov	r3, r0
 8016d18:	e004      	b.n	8016d24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 8016d1a:	69bb      	ldr	r3, [r7, #24]
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7fe fa8e 	bl	801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016d22:	4603      	mov	r3, r0
 8016d24:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8016d26:	e7db      	b.n	8016ce0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8016d28:	697a      	ldr	r2, [r7, #20]
 8016d2a:	f107 0310 	add.w	r3, r7, #16
 8016d2e:	4611      	mov	r1, r2
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7fe fe9e 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8016d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d01d      	beq.n	8016d7a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8016d3e:	68b8      	ldr	r0, [r7, #8]
 8016d40:	f000 fd61 	bl	8017806 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 8016d44:	4603      	mov	r3, r0
 8016d46:	61fb      	str	r3, [r7, #28]
 8016d48:	f107 021c 	add.w	r2, r7, #28
 8016d4c:	f107 0310 	add.w	r3, r7, #16
 8016d50:	4611      	mov	r1, r2
 8016d52:	4618      	mov	r0, r3
 8016d54:	f000 fd68 	bl	8017828 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>
 8016d58:	4603      	mov	r3, r0
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d008      	beq.n	8016d70 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8016d5e:	f107 0214 	add.w	r2, r7, #20
 8016d62:	f107 0318 	add.w	r3, r7, #24
 8016d66:	4619      	mov	r1, r3
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f000 fd71 	bl	8017850 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 8016d6e:	e025      	b.n	8016dbc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8016d70:	f107 0310 	add.w	r3, r7, #16
 8016d74:	4618      	mov	r0, r3
 8016d76:	f000 f831 	bl	8016ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8016d7a:	68bc      	ldr	r4, [r7, #8]
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	4618      	mov	r0, r3
 8016d80:	f7ff ff8f 	bl	8016ca2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016d84:	4603      	mov	r3, r0
 8016d86:	687a      	ldr	r2, [r7, #4]
 8016d88:	4619      	mov	r1, r3
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7f9 fbfe 	bl	801058c <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8016d90:	4603      	mov	r3, r0
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d008      	beq.n	8016da8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8016d96:	f107 0214 	add.w	r2, r7, #20
 8016d9a:	f107 0318 	add.w	r3, r7, #24
 8016d9e:	4619      	mov	r1, r3
 8016da0:	68f8      	ldr	r0, [r7, #12]
 8016da2:	f000 fd55 	bl	8017850 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 8016da6:	e009      	b.n	8016dbc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8016da8:	2300      	movs	r3, #0
 8016daa:	623b      	str	r3, [r7, #32]
 8016dac:	f107 0220 	add.w	r2, r7, #32
 8016db0:	f107 0310 	add.w	r3, r7, #16
 8016db4:	4619      	mov	r1, r3
 8016db6:	68f8      	ldr	r0, [r7, #12]
 8016db8:	f7fb f9ce 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016dbc:	68f8      	ldr	r0, [r7, #12]
 8016dbe:	372c      	adds	r7, #44	; 0x2c
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd90      	pop	{r4, r7, pc}

08016dc4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8016dc4:	b480      	push	{r7}
 8016dc6:	b083      	sub	sp, #12
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	330c      	adds	r3, #12
 8016dd0:	4618      	mov	r0, r3
 8016dd2:	370c      	adds	r7, #12
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dda:	4770      	bx	lr

08016ddc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4618      	mov	r0, r3
 8016dea:	f003 fd44 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8016dee:	4602      	mov	r2, r0
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	601a      	str	r2, [r3, #0]
	return *this;
 8016df4:	687b      	ldr	r3, [r7, #4]
      }
 8016df6:	4618      	mov	r0, r3
 8016df8:	3708      	adds	r7, #8
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}

08016dfe <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8016dfe:	b580      	push	{r7, lr}
 8016e00:	b082      	sub	sp, #8
 8016e02:	af00      	add	r7, sp, #0
 8016e04:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f003 fd31 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8016e10:	4602      	mov	r2, r0
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	601a      	str	r2, [r3, #0]
	return *this;
 8016e16:	687b      	ldr	r3, [r7, #4]
      }
 8016e18:	4618      	mov	r0, r3
 8016e1a:	3708      	adds	r7, #8
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}

08016e20 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 8016e20:	b590      	push	{r4, r7, lr}
 8016e22:	b083      	sub	sp, #12
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
 8016e28:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681c      	ldr	r4, [r3, #0]
 8016e2e:	6838      	ldr	r0, [r7, #0]
 8016e30:	f7fe ff5d 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8016e34:	4603      	mov	r3, r0
 8016e36:	4619      	mov	r1, r3
 8016e38:	4620      	mov	r0, r4
 8016e3a:	f000 fd22 	bl	8017882 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	4618      	mov	r0, r3
 8016e42:	370c      	adds	r7, #12
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd90      	pop	{r4, r7, pc}

08016e48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	4618      	mov	r0, r3
 8016e54:	370c      	adds	r7, #12
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr

08016e5e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr()
 8016e5e:	b580      	push	{r7, lr}
 8016e60:	b082      	sub	sp, #8
 8016e62:	af00      	add	r7, sp, #0
 8016e64:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	3310      	adds	r3, #16
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f000 fd20 	bl	80178b0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 8016e70:	4603      	mov	r3, r0
 8016e72:	4618      	mov	r0, r3
 8016e74:	3708      	adds	r7, #8
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8016e7a:	b580      	push	{r7, lr}
 8016e7c:	b082      	sub	sp, #8
 8016e7e:	af00      	add	r7, sp, #0
 8016e80:	6078      	str	r0, [r7, #4]
 8016e82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8016e84:	6838      	ldr	r0, [r7, #0]
 8016e86:	f000 fd1f 	bl	80178c8 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>
	}
 8016e8a:	bf00      	nop
 8016e8c:	3708      	adds	r7, #8
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}

08016e92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016e92:	b580      	push	{r7, lr}
 8016e94:	b088      	sub	sp, #32
 8016e96:	af00      	add	r7, sp, #0
 8016e98:	60f8      	str	r0, [r7, #12]
 8016e9a:	60b9      	str	r1, [r7, #8]
 8016e9c:	607a      	str	r2, [r7, #4]
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	61fb      	str	r3, [r7, #28]
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	61bb      	str	r3, [r7, #24]
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8016eaa:	f7f7 f8c5 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d003      	beq.n	8016ebc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8016eb4:	69b8      	ldr	r0, [r7, #24]
 8016eb6:	f003 fc73 	bl	801a7a0 <_ZdlPv>
	    return;
 8016eba:	e005      	b.n	8016ec8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8016ebc:	697a      	ldr	r2, [r7, #20]
 8016ebe:	69b9      	ldr	r1, [r7, #24]
 8016ec0:	69f8      	ldr	r0, [r7, #28]
 8016ec2:	f000 ff09 	bl	8017cd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8016ec6:	bf00      	nop
 8016ec8:	bf00      	nop
 8016eca:	3720      	adds	r7, #32
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>:
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	6039      	str	r1, [r7, #0]
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	4618      	mov	r0, r3
 8016ede:	370c      	adds	r7, #12
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee6:	4770      	bx	lr

08016ee8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 8016ee8:	b590      	push	{r4, r7, lr}
 8016eea:	b083      	sub	sp, #12
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
 8016ef0:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681c      	ldr	r4, [r3, #0]
 8016ef6:	6838      	ldr	r0, [r7, #0]
 8016ef8:	f7fe ff99 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016efc:	4603      	mov	r3, r0
 8016efe:	4619      	mov	r1, r3
 8016f00:	4620      	mov	r0, r4
 8016f02:	f000 fceb 	bl	80178dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8016f06:	4603      	mov	r3, r0
 8016f08:	4618      	mov	r0, r3
 8016f0a:	370c      	adds	r7, #12
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd90      	pop	{r4, r7, pc}

08016f10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>:
 8016f10:	b480      	push	{r7}
 8016f12:	b083      	sub	sp, #12
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
 8016f18:	6039      	str	r1, [r7, #0]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	370c      	adds	r7, #12
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8016f28:	b590      	push	{r4, r7, lr}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681c      	ldr	r4, [r3, #0]
 8016f36:	6838      	ldr	r0, [r7, #0]
 8016f38:	f7fe fff1 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	4619      	mov	r1, r3
 8016f40:	4620      	mov	r0, r4
 8016f42:	f000 fce2 	bl	801790a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8016f46:	4603      	mov	r3, r0
 8016f48:	4618      	mov	r0, r3
 8016f4a:	370c      	adds	r7, #12
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	bd90      	pop	{r4, r7, pc}

08016f50 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>:
 8016f50:	b480      	push	{r7}
 8016f52:	b083      	sub	sp, #12
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	370c      	adds	r7, #12
 8016f60:	46bd      	mov	sp, r7
 8016f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f66:	4770      	bx	lr

08016f68 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681a      	ldr	r2, [r3, #0]
 8016f74:	f107 030c 	add.w	r3, r7, #12
 8016f78:	4611      	mov	r1, r2
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	f7ff f847 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	4618      	mov	r0, r3
 8016f84:	3710      	adds	r7, #16
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}

08016f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8016f8a:	b480      	push	{r7}
 8016f8c:	b083      	sub	sp, #12
 8016f8e:	af00      	add	r7, sp, #0
 8016f90:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	3304      	adds	r3, #4
 8016f96:	4618      	mov	r0, r3
 8016f98:	370c      	adds	r7, #12
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa0:	4770      	bx	lr

08016fa2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016fa2:	b480      	push	{r7}
 8016fa4:	b083      	sub	sp, #12
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	695b      	ldr	r3, [r3, #20]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	370c      	adds	r7, #12
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb8:	4770      	bx	lr

08016fba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8016fba:	b480      	push	{r7}
 8016fbc:	b083      	sub	sp, #12
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	3310      	adds	r3, #16
 8016fc6:	4618      	mov	r0, r3
 8016fc8:	370c      	adds	r7, #12
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd0:	4770      	bx	lr

08016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8016fd2:	b580      	push	{r7, lr}
 8016fd4:	b082      	sub	sp, #8
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016fda:	6878      	ldr	r0, [r7, #4]
 8016fdc:	f000 fcac 	bl	8017938 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}

08016fea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016fea:	b590      	push	{r4, r7, lr}
 8016fec:	b08b      	sub	sp, #44	; 0x2c
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	60f8      	str	r0, [r7, #12]
 8016ff2:	60b9      	str	r1, [r7, #8]
 8016ff4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8016ff6:	68b8      	ldr	r0, [r7, #8]
 8016ff8:	f7fd fe94 	bl	8014d24 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f7ff ffc2 	bl	8016f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8017006:	4603      	mov	r3, r0
 8017008:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801700a:	2301      	movs	r3, #1
 801700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d020      	beq.n	8017058 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8017016:	69bb      	ldr	r3, [r7, #24]
 8017018:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801701a:	68bc      	ldr	r4, [r7, #8]
 801701c:	69bb      	ldr	r3, [r7, #24]
 801701e:	4618      	mov	r0, r3
 8017020:	f000 fc8a 	bl	8017938 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8017024:	4603      	mov	r3, r0
 8017026:	461a      	mov	r2, r3
 8017028:	6879      	ldr	r1, [r7, #4]
 801702a:	4620      	mov	r0, r4
 801702c:	f7f9 f979 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8017030:	4603      	mov	r3, r0
 8017032:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8017036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801703a:	2b00      	cmp	r3, #0
 801703c:	d005      	beq.n	801704a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 801703e:	69bb      	ldr	r3, [r7, #24]
 8017040:	4618      	mov	r0, r3
 8017042:	f7fe fae9 	bl	8015618 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017046:	4603      	mov	r3, r0
 8017048:	e004      	b.n	8017054 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 801704a:	69bb      	ldr	r3, [r7, #24]
 801704c:	4618      	mov	r0, r3
 801704e:	f7fe fad7 	bl	8015600 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017052:	4603      	mov	r3, r0
 8017054:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017056:	e7db      	b.n	8017010 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8017058:	697a      	ldr	r2, [r7, #20]
 801705a:	f107 0310 	add.w	r3, r7, #16
 801705e:	4611      	mov	r1, r2
 8017060:	4618      	mov	r0, r3
 8017062:	f7fe ffd4 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801706a:	2b00      	cmp	r3, #0
 801706c:	d01d      	beq.n	80170aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 801706e:	68b8      	ldr	r0, [r7, #8]
 8017070:	f000 fc75 	bl	801795e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8017074:	4603      	mov	r3, r0
 8017076:	61fb      	str	r3, [r7, #28]
 8017078:	f107 021c 	add.w	r2, r7, #28
 801707c:	f107 0310 	add.w	r3, r7, #16
 8017080:	4611      	mov	r1, r2
 8017082:	4618      	mov	r0, r3
 8017084:	f000 fc7c 	bl	8017980 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d008      	beq.n	80170a0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 801708e:	f107 0214 	add.w	r2, r7, #20
 8017092:	f107 0318 	add.w	r3, r7, #24
 8017096:	4619      	mov	r1, r3
 8017098:	68f8      	ldr	r0, [r7, #12]
 801709a:	f000 fc85 	bl	80179a8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 801709e:	e025      	b.n	80170ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80170a0:	f107 0310 	add.w	r3, r7, #16
 80170a4:	4618      	mov	r0, r3
 80170a6:	f000 f831 	bl	801710c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80170aa:	68bc      	ldr	r4, [r7, #8]
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7ff ff8f 	bl	8016fd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80170b4:	4603      	mov	r3, r0
 80170b6:	687a      	ldr	r2, [r7, #4]
 80170b8:	4619      	mov	r1, r3
 80170ba:	4620      	mov	r0, r4
 80170bc:	f7f9 f931 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80170c0:	4603      	mov	r3, r0
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d008      	beq.n	80170d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 80170c6:	f107 0214 	add.w	r2, r7, #20
 80170ca:	f107 0318 	add.w	r3, r7, #24
 80170ce:	4619      	mov	r1, r3
 80170d0:	68f8      	ldr	r0, [r7, #12]
 80170d2:	f000 fc69 	bl	80179a8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 80170d6:	e009      	b.n	80170ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80170d8:	2300      	movs	r3, #0
 80170da:	623b      	str	r3, [r7, #32]
 80170dc:	f107 0220 	add.w	r2, r7, #32
 80170e0:	f107 0310 	add.w	r3, r7, #16
 80170e4:	4619      	mov	r1, r3
 80170e6:	68f8      	ldr	r0, [r7, #12]
 80170e8:	f7fb f836 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80170ec:	68f8      	ldr	r0, [r7, #12]
 80170ee:	372c      	adds	r7, #44	; 0x2c
 80170f0:	46bd      	mov	sp, r7
 80170f2:	bd90      	pop	{r4, r7, pc}

080170f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80170f4:	b480      	push	{r7}
 80170f6:	b083      	sub	sp, #12
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	330c      	adds	r3, #12
 8017100:	4618      	mov	r0, r3
 8017102:	370c      	adds	r7, #12
 8017104:	46bd      	mov	sp, r7
 8017106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710a:	4770      	bx	lr

0801710c <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801710c:	b580      	push	{r7, lr}
 801710e:	b082      	sub	sp, #8
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4618      	mov	r0, r3
 801711a:	f003 fbac 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801711e:	4602      	mov	r2, r0
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	601a      	str	r2, [r3, #0]
	return *this;
 8017124:	687b      	ldr	r3, [r7, #4]
      }
 8017126:	4618      	mov	r0, r3
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}

0801712e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801712e:	b580      	push	{r7, lr}
 8017130:	b082      	sub	sp, #8
 8017132:	af00      	add	r7, sp, #0
 8017134:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	4618      	mov	r0, r3
 801713c:	f003 fb99 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8017140:	4602      	mov	r2, r0
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	601a      	str	r2, [r3, #0]
	return *this;
 8017146:	687b      	ldr	r3, [r7, #4]
      }
 8017148:	4618      	mov	r0, r3
 801714a:	3708      	adds	r7, #8
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8017150:	b590      	push	{r4, r7, lr}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681c      	ldr	r4, [r3, #0]
 801715e:	6838      	ldr	r0, [r7, #0]
 8017160:	f7ff f893 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017164:	4603      	mov	r3, r0
 8017166:	4619      	mov	r1, r3
 8017168:	4620      	mov	r0, r4
 801716a:	f000 fc36 	bl	80179da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801716e:	4603      	mov	r3, r0
 8017170:	4618      	mov	r0, r3
 8017172:	370c      	adds	r7, #12
 8017174:	46bd      	mov	sp, r7
 8017176:	bd90      	pop	{r4, r7, pc}

08017178 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017178:	b480      	push	{r7}
 801717a:	b083      	sub	sp, #12
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	4618      	mov	r0, r3
 8017184:	370c      	adds	r7, #12
 8017186:	46bd      	mov	sp, r7
 8017188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718c:	4770      	bx	lr

0801718e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801718e:	b580      	push	{r7, lr}
 8017190:	b082      	sub	sp, #8
 8017192:	af00      	add	r7, sp, #0
 8017194:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	3310      	adds	r3, #16
 801719a:	4618      	mov	r0, r3
 801719c:	f000 fc34 	bl	8017a08 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 80171a0:	4603      	mov	r3, r0
 80171a2:	4618      	mov	r0, r3
 80171a4:	3708      	adds	r7, #8
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80171aa:	b580      	push	{r7, lr}
 80171ac:	b082      	sub	sp, #8
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	6078      	str	r0, [r7, #4]
 80171b2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80171b4:	6838      	ldr	r0, [r7, #0]
 80171b6:	f000 fc33 	bl	8017a20 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 80171ba:	bf00      	nop
 80171bc:	3708      	adds	r7, #8
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80171c2:	b580      	push	{r7, lr}
 80171c4:	b088      	sub	sp, #32
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	60f8      	str	r0, [r7, #12]
 80171ca:	60b9      	str	r1, [r7, #8]
 80171cc:	607a      	str	r2, [r7, #4]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	61fb      	str	r3, [r7, #28]
 80171d2:	68bb      	ldr	r3, [r7, #8]
 80171d4:	61bb      	str	r3, [r7, #24]
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80171da:	f7f6 ff2d 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d003      	beq.n	80171ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 80171e4:	69b8      	ldr	r0, [r7, #24]
 80171e6:	f003 fadb 	bl	801a7a0 <_ZdlPv>
	    return;
 80171ea:	e005      	b.n	80171f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80171ec:	697a      	ldr	r2, [r7, #20]
 80171ee:	69b9      	ldr	r1, [r7, #24]
 80171f0:	69f8      	ldr	r0, [r7, #28]
 80171f2:	f000 fe18 	bl	8017e26 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 80171f6:	bf00      	nop
 80171f8:	bf00      	nop
 80171fa:	3720      	adds	r7, #32
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}

08017200 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>:
 8017200:	b480      	push	{r7}
 8017202:	b083      	sub	sp, #12
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
 8017208:	6039      	str	r1, [r7, #0]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4618      	mov	r0, r3
 801720e:	370c      	adds	r7, #12
 8017210:	46bd      	mov	sp, r7
 8017212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017216:	4770      	bx	lr

08017218 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8017218:	b580      	push	{r7, lr}
 801721a:	b084      	sub	sp, #16
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	681a      	ldr	r2, [r3, #0]
 8017224:	f107 030c 	add.w	r3, r7, #12
 8017228:	4611      	mov	r1, r2
 801722a:	4618      	mov	r0, r3
 801722c:	f7ff f8cc 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	4618      	mov	r0, r3
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}

0801723a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801723a:	b480      	push	{r7}
 801723c:	b083      	sub	sp, #12
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	3304      	adds	r3, #4
 8017246:	4618      	mov	r0, r3
 8017248:	370c      	adds	r7, #12
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr

08017252 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017252:	b480      	push	{r7}
 8017254:	b083      	sub	sp, #12
 8017256:	af00      	add	r7, sp, #0
 8017258:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	695b      	ldr	r3, [r3, #20]
 801725e:	4618      	mov	r0, r3
 8017260:	370c      	adds	r7, #12
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr

0801726a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801726a:	b480      	push	{r7}
 801726c:	b083      	sub	sp, #12
 801726e:	af00      	add	r7, sp, #0
 8017270:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	3310      	adds	r3, #16
 8017276:	4618      	mov	r0, r3
 8017278:	370c      	adds	r7, #12
 801727a:	46bd      	mov	sp, r7
 801727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017280:	4770      	bx	lr

08017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8017282:	b580      	push	{r7, lr}
 8017284:	b082      	sub	sp, #8
 8017286:	af00      	add	r7, sp, #0
 8017288:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f000 fbd2 	bl	8017a34 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8017290:	4603      	mov	r3, r0
 8017292:	4618      	mov	r0, r3
 8017294:	3708      	adds	r7, #8
 8017296:	46bd      	mov	sp, r7
 8017298:	bd80      	pop	{r7, pc}

0801729a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801729a:	b590      	push	{r4, r7, lr}
 801729c:	b08b      	sub	sp, #44	; 0x2c
 801729e:	af00      	add	r7, sp, #0
 80172a0:	60f8      	str	r0, [r7, #12]
 80172a2:	60b9      	str	r1, [r7, #8]
 80172a4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80172a6:	68b8      	ldr	r0, [r7, #8]
 80172a8:	f7fd fe01 	bl	8014eae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80172ac:	4603      	mov	r3, r0
 80172ae:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80172b0:	68b8      	ldr	r0, [r7, #8]
 80172b2:	f7ff ffc2 	bl	801723a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80172b6:	4603      	mov	r3, r0
 80172b8:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80172ba:	2301      	movs	r3, #1
 80172bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80172c0:	69bb      	ldr	r3, [r7, #24]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d020      	beq.n	8017308 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80172c6:	69bb      	ldr	r3, [r7, #24]
 80172c8:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80172ca:	68bc      	ldr	r4, [r7, #8]
 80172cc:	69bb      	ldr	r3, [r7, #24]
 80172ce:	4618      	mov	r0, r3
 80172d0:	f000 fbb0 	bl	8017a34 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80172d4:	4603      	mov	r3, r0
 80172d6:	461a      	mov	r2, r3
 80172d8:	6879      	ldr	r1, [r7, #4]
 80172da:	4620      	mov	r0, r4
 80172dc:	f7f9 f821 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80172e0:	4603      	mov	r3, r0
 80172e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80172e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d005      	beq.n	80172fa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 80172ee:	69bb      	ldr	r3, [r7, #24]
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7fe fa5f 	bl	80157b4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80172f6:	4603      	mov	r3, r0
 80172f8:	e004      	b.n	8017304 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7fe fa4d 	bl	801579c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017302:	4603      	mov	r3, r0
 8017304:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017306:	e7db      	b.n	80172c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8017308:	697a      	ldr	r2, [r7, #20]
 801730a:	f107 0310 	add.w	r3, r7, #16
 801730e:	4611      	mov	r1, r2
 8017310:	4618      	mov	r0, r3
 8017312:	f7ff f859 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801731a:	2b00      	cmp	r3, #0
 801731c:	d01d      	beq.n	801735a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 801731e:	68b8      	ldr	r0, [r7, #8]
 8017320:	f000 fb9b 	bl	8017a5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8017324:	4603      	mov	r3, r0
 8017326:	61fb      	str	r3, [r7, #28]
 8017328:	f107 021c 	add.w	r2, r7, #28
 801732c:	f107 0310 	add.w	r3, r7, #16
 8017330:	4611      	mov	r1, r2
 8017332:	4618      	mov	r0, r3
 8017334:	f000 fba2 	bl	8017a7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8017338:	4603      	mov	r3, r0
 801733a:	2b00      	cmp	r3, #0
 801733c:	d008      	beq.n	8017350 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 801733e:	f107 0214 	add.w	r2, r7, #20
 8017342:	f107 0318 	add.w	r3, r7, #24
 8017346:	4619      	mov	r1, r3
 8017348:	68f8      	ldr	r0, [r7, #12]
 801734a:	f000 fbab 	bl	8017aa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 801734e:	e025      	b.n	801739c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8017350:	f107 0310 	add.w	r3, r7, #16
 8017354:	4618      	mov	r0, r3
 8017356:	f000 f831 	bl	80173bc <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801735a:	68bc      	ldr	r4, [r7, #8]
 801735c:	693b      	ldr	r3, [r7, #16]
 801735e:	4618      	mov	r0, r3
 8017360:	f7ff ff8f 	bl	8017282 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8017364:	4603      	mov	r3, r0
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	4619      	mov	r1, r3
 801736a:	4620      	mov	r0, r4
 801736c:	f7f8 ffd9 	bl	8010322 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8017370:	4603      	mov	r3, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d008      	beq.n	8017388 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8017376:	f107 0214 	add.w	r2, r7, #20
 801737a:	f107 0318 	add.w	r3, r7, #24
 801737e:	4619      	mov	r1, r3
 8017380:	68f8      	ldr	r0, [r7, #12]
 8017382:	f000 fb8f 	bl	8017aa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8017386:	e009      	b.n	801739c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8017388:	2300      	movs	r3, #0
 801738a:	623b      	str	r3, [r7, #32]
 801738c:	f107 0220 	add.w	r2, r7, #32
 8017390:	f107 0310 	add.w	r3, r7, #16
 8017394:	4619      	mov	r1, r3
 8017396:	68f8      	ldr	r0, [r7, #12]
 8017398:	f7fa fede 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801739c:	68f8      	ldr	r0, [r7, #12]
 801739e:	372c      	adds	r7, #44	; 0x2c
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd90      	pop	{r4, r7, pc}

080173a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80173a4:	b480      	push	{r7}
 80173a6:	b083      	sub	sp, #12
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	330c      	adds	r3, #12
 80173b0:	4618      	mov	r0, r3
 80173b2:	370c      	adds	r7, #12
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr

080173bc <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80173bc:	b580      	push	{r7, lr}
 80173be:	b082      	sub	sp, #8
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	4618      	mov	r0, r3
 80173ca:	f003 fa54 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80173ce:	4602      	mov	r2, r0
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	601a      	str	r2, [r3, #0]
	return *this;
 80173d4:	687b      	ldr	r3, [r7, #4]
      }
 80173d6:	4618      	mov	r0, r3
 80173d8:	3708      	adds	r7, #8
 80173da:	46bd      	mov	sp, r7
 80173dc:	bd80      	pop	{r7, pc}

080173de <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80173de:	b580      	push	{r7, lr}
 80173e0:	b082      	sub	sp, #8
 80173e2:	af00      	add	r7, sp, #0
 80173e4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f003 fa41 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80173f0:	4602      	mov	r2, r0
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	601a      	str	r2, [r3, #0]
	return *this;
 80173f6:	687b      	ldr	r3, [r7, #4]
      }
 80173f8:	4618      	mov	r0, r3
 80173fa:	3708      	adds	r7, #8
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}

08017400 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8017400:	b590      	push	{r4, r7, lr}
 8017402:	b083      	sub	sp, #12
 8017404:	af00      	add	r7, sp, #0
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	681c      	ldr	r4, [r3, #0]
 801740e:	6838      	ldr	r0, [r7, #0]
 8017410:	f7ff f918 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017414:	4603      	mov	r3, r0
 8017416:	4619      	mov	r1, r3
 8017418:	4620      	mov	r0, r4
 801741a:	f000 fb5c 	bl	8017ad6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801741e:	4603      	mov	r3, r0
 8017420:	4618      	mov	r0, r3
 8017422:	370c      	adds	r7, #12
 8017424:	46bd      	mov	sp, r7
 8017426:	bd90      	pop	{r4, r7, pc}

08017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr

0801743e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801743e:	b580      	push	{r7, lr}
 8017440:	b082      	sub	sp, #8
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	3310      	adds	r3, #16
 801744a:	4618      	mov	r0, r3
 801744c:	f000 fb5a 	bl	8017b04 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8017450:	4603      	mov	r3, r0
 8017452:	4618      	mov	r0, r3
 8017454:	3708      	adds	r7, #8
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}

0801745a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801745a:	b580      	push	{r7, lr}
 801745c:	b082      	sub	sp, #8
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
 8017462:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017464:	6838      	ldr	r0, [r7, #0]
 8017466:	f000 fb59 	bl	8017b1c <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 801746a:	bf00      	nop
 801746c:	3708      	adds	r7, #8
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017472:	b580      	push	{r7, lr}
 8017474:	b088      	sub	sp, #32
 8017476:	af00      	add	r7, sp, #0
 8017478:	60f8      	str	r0, [r7, #12]
 801747a:	60b9      	str	r1, [r7, #8]
 801747c:	607a      	str	r2, [r7, #4]
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	61fb      	str	r3, [r7, #28]
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	61bb      	str	r3, [r7, #24]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801748a:	f7f6 fdd5 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d003      	beq.n	801749c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8017494:	69b8      	ldr	r0, [r7, #24]
 8017496:	f003 f983 	bl	801a7a0 <_ZdlPv>
	    return;
 801749a:	e005      	b.n	80174a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801749c:	697a      	ldr	r2, [r7, #20]
 801749e:	69b9      	ldr	r1, [r7, #24]
 80174a0:	69f8      	ldr	r0, [r7, #28]
 80174a2:	f000 fd27 	bl	8017ef4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 80174a6:	bf00      	nop
 80174a8:	bf00      	nop
 80174aa:	3720      	adds	r7, #32
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}

080174b0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80174b0:	b480      	push	{r7}
 80174b2:	b083      	sub	sp, #12
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	4618      	mov	r0, r3
 80174bc:	370c      	adds	r7, #12
 80174be:	46bd      	mov	sp, r7
 80174c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c4:	4770      	bx	lr

080174c6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80174c6:	b480      	push	{r7}
 80174c8:	b083      	sub	sp, #12
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	4618      	mov	r0, r3
 80174d2:	370c      	adds	r7, #12
 80174d4:	46bd      	mov	sp, r7
 80174d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174da:	4770      	bx	lr

080174dc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80174dc:	b480      	push	{r7}
 80174de:	b083      	sub	sp, #12
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	4618      	mov	r0, r3
 80174e8:	370c      	adds	r7, #12
 80174ea:	46bd      	mov	sp, r7
 80174ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f0:	4770      	bx	lr

080174f2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>:
 80174f2:	b480      	push	{r7}
 80174f4:	b083      	sub	sp, #12
 80174f6:	af00      	add	r7, sp, #0
 80174f8:	6078      	str	r0, [r7, #4]
 80174fa:	6039      	str	r1, [r7, #0]
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	4618      	mov	r0, r3
 8017500:	370c      	adds	r7, #12
 8017502:	46bd      	mov	sp, r7
 8017504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017508:	4770      	bx	lr

0801750a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801750a:	b580      	push	{r7, lr}
 801750c:	b084      	sub	sp, #16
 801750e:	af00      	add	r7, sp, #0
 8017510:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	681a      	ldr	r2, [r3, #0]
 8017516:	f107 030c 	add.w	r3, r7, #12
 801751a:	4611      	mov	r1, r2
 801751c:	4618      	mov	r0, r3
 801751e:	f7ff f9a1 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	4618      	mov	r0, r3
 8017526:	3710      	adds	r7, #16
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}

0801752c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801752c:	b480      	push	{r7}
 801752e:	b083      	sub	sp, #12
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	3304      	adds	r3, #4
 8017538:	4618      	mov	r0, r3
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr

08017544 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017544:	b480      	push	{r7}
 8017546:	b083      	sub	sp, #12
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	695b      	ldr	r3, [r3, #20]
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801755c:	b480      	push	{r7}
 801755e:	b083      	sub	sp, #12
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	3310      	adds	r3, #16
 8017568:	4618      	mov	r0, r3
 801756a:	370c      	adds	r7, #12
 801756c:	46bd      	mov	sp, r7
 801756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017572:	4770      	bx	lr

08017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8017574:	b580      	push	{r7, lr}
 8017576:	b082      	sub	sp, #8
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f000 fad7 	bl	8017b30 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8017582:	4603      	mov	r3, r0
 8017584:	4618      	mov	r0, r3
 8017586:	3708      	adds	r7, #8
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 801758c:	b480      	push	{r7}
 801758e:	b085      	sub	sp, #20
 8017590:	af00      	add	r7, sp, #0
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8017598:	68bb      	ldr	r3, [r7, #8]
 801759a:	881a      	ldrh	r2, [r3, #0]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	881b      	ldrh	r3, [r3, #0]
 80175a0:	429a      	cmp	r2, r3
 80175a2:	bf34      	ite	cc
 80175a4:	2301      	movcc	r3, #1
 80175a6:	2300      	movcs	r3, #0
 80175a8:	b2db      	uxtb	r3, r3
 80175aa:	4618      	mov	r0, r3
 80175ac:	3714      	adds	r7, #20
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr

080175b6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80175b6:	b590      	push	{r4, r7, lr}
 80175b8:	b08b      	sub	sp, #44	; 0x2c
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	60f8      	str	r0, [r7, #12]
 80175be:	60b9      	str	r1, [r7, #8]
 80175c0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80175c2:	68b8      	ldr	r0, [r7, #8]
 80175c4:	f7fd fd4a 	bl	801505c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80175c8:	4603      	mov	r3, r0
 80175ca:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80175cc:	68b8      	ldr	r0, [r7, #8]
 80175ce:	f7ff ffad 	bl	801752c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80175d2:	4603      	mov	r3, r0
 80175d4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80175d6:	2301      	movs	r3, #1
 80175d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80175dc:	69bb      	ldr	r3, [r7, #24]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d020      	beq.n	8017624 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80175e2:	69bb      	ldr	r3, [r7, #24]
 80175e4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80175e6:	68bc      	ldr	r4, [r7, #8]
 80175e8:	69bb      	ldr	r3, [r7, #24]
 80175ea:	4618      	mov	r0, r3
 80175ec:	f000 faa0 	bl	8017b30 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80175f0:	4603      	mov	r3, r0
 80175f2:	461a      	mov	r2, r3
 80175f4:	6879      	ldr	r1, [r7, #4]
 80175f6:	4620      	mov	r0, r4
 80175f8:	f7ff ffc8 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 80175fc:	4603      	mov	r3, r0
 80175fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8017602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017606:	2b00      	cmp	r3, #0
 8017608:	d005      	beq.n	8017616 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	4618      	mov	r0, r3
 801760e:	f7fe f9c0 	bl	8015992 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017612:	4603      	mov	r3, r0
 8017614:	e004      	b.n	8017620 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	4618      	mov	r0, r3
 801761a:	f7fe f9ae 	bl	801597a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801761e:	4603      	mov	r3, r0
 8017620:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017622:	e7db      	b.n	80175dc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	f107 0310 	add.w	r3, r7, #16
 801762a:	4611      	mov	r1, r2
 801762c:	4618      	mov	r0, r3
 801762e:	f7ff f919 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017636:	2b00      	cmp	r3, #0
 8017638:	d01d      	beq.n	8017676 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801763a:	68b8      	ldr	r0, [r7, #8]
 801763c:	f000 fa8b 	bl	8017b56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8017640:	4603      	mov	r3, r0
 8017642:	61fb      	str	r3, [r7, #28]
 8017644:	f107 021c 	add.w	r2, r7, #28
 8017648:	f107 0310 	add.w	r3, r7, #16
 801764c:	4611      	mov	r1, r2
 801764e:	4618      	mov	r0, r3
 8017650:	f000 fa92 	bl	8017b78 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d008      	beq.n	801766c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801765a:	f107 0214 	add.w	r2, r7, #20
 801765e:	f107 0318 	add.w	r3, r7, #24
 8017662:	4619      	mov	r1, r3
 8017664:	68f8      	ldr	r0, [r7, #12]
 8017666:	f000 fa9b 	bl	8017ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 801766a:	e025      	b.n	80176b8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801766c:	f107 0310 	add.w	r3, r7, #16
 8017670:	4618      	mov	r0, r3
 8017672:	f000 f831 	bl	80176d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8017676:	68bc      	ldr	r4, [r7, #8]
 8017678:	693b      	ldr	r3, [r7, #16]
 801767a:	4618      	mov	r0, r3
 801767c:	f7ff ff7a 	bl	8017574 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8017680:	4603      	mov	r3, r0
 8017682:	687a      	ldr	r2, [r7, #4]
 8017684:	4619      	mov	r1, r3
 8017686:	4620      	mov	r0, r4
 8017688:	f7ff ff80 	bl	801758c <_ZNKSt4lessItEclERKtS2_>
 801768c:	4603      	mov	r3, r0
 801768e:	2b00      	cmp	r3, #0
 8017690:	d008      	beq.n	80176a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8017692:	f107 0214 	add.w	r2, r7, #20
 8017696:	f107 0318 	add.w	r3, r7, #24
 801769a:	4619      	mov	r1, r3
 801769c:	68f8      	ldr	r0, [r7, #12]
 801769e:	f000 fa7f 	bl	8017ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 80176a2:	e009      	b.n	80176b8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80176a4:	2300      	movs	r3, #0
 80176a6:	623b      	str	r3, [r7, #32]
 80176a8:	f107 0220 	add.w	r2, r7, #32
 80176ac:	f107 0310 	add.w	r3, r7, #16
 80176b0:	4619      	mov	r1, r3
 80176b2:	68f8      	ldr	r0, [r7, #12]
 80176b4:	f7fa fd50 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80176b8:	68f8      	ldr	r0, [r7, #12]
 80176ba:	372c      	adds	r7, #44	; 0x2c
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd90      	pop	{r4, r7, pc}

080176c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	330c      	adds	r3, #12
 80176cc:	4618      	mov	r0, r3
 80176ce:	370c      	adds	r7, #12
 80176d0:	46bd      	mov	sp, r7
 80176d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d6:	4770      	bx	lr

080176d8 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80176d8:	b580      	push	{r7, lr}
 80176da:	b082      	sub	sp, #8
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	4618      	mov	r0, r3
 80176e6:	f003 f8c6 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80176ea:	4602      	mov	r2, r0
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	601a      	str	r2, [r3, #0]
	return *this;
 80176f0:	687b      	ldr	r3, [r7, #4]
      }
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}

080176fa <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80176fa:	b580      	push	{r7, lr}
 80176fc:	b082      	sub	sp, #8
 80176fe:	af00      	add	r7, sp, #0
 8017700:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	4618      	mov	r0, r3
 8017708:	f003 f8b3 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801770c:	4602      	mov	r2, r0
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	601a      	str	r2, [r3, #0]
	return *this;
 8017712:	687b      	ldr	r3, [r7, #4]
      }
 8017714:	4618      	mov	r0, r3
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 801771c:	b590      	push	{r4, r7, lr}
 801771e:	b083      	sub	sp, #12
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
 8017724:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	681c      	ldr	r4, [r3, #0]
 801772a:	6838      	ldr	r0, [r7, #0]
 801772c:	f7ff f9d8 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017730:	4603      	mov	r3, r0
 8017732:	4619      	mov	r1, r3
 8017734:	4620      	mov	r0, r4
 8017736:	f000 fa4c 	bl	8017bd2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 801773a:	4603      	mov	r3, r0
 801773c:	4618      	mov	r0, r3
 801773e:	370c      	adds	r7, #12
 8017740:	46bd      	mov	sp, r7
 8017742:	bd90      	pop	{r4, r7, pc}

08017744 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017744:	b480      	push	{r7}
 8017746:	b083      	sub	sp, #12
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	4618      	mov	r0, r3
 8017750:	370c      	adds	r7, #12
 8017752:	46bd      	mov	sp, r7
 8017754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017758:	4770      	bx	lr

0801775a <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801775a:	b580      	push	{r7, lr}
 801775c:	b082      	sub	sp, #8
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	3310      	adds	r3, #16
 8017766:	4618      	mov	r0, r3
 8017768:	f000 fa4a 	bl	8017c00 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 801776c:	4603      	mov	r3, r0
 801776e:	4618      	mov	r0, r3
 8017770:	3708      	adds	r7, #8
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}

08017776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017776:	b580      	push	{r7, lr}
 8017778:	b082      	sub	sp, #8
 801777a:	af00      	add	r7, sp, #0
 801777c:	6078      	str	r0, [r7, #4]
 801777e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017780:	6838      	ldr	r0, [r7, #0]
 8017782:	f000 fa49 	bl	8017c18 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 8017786:	bf00      	nop
 8017788:	3708      	adds	r7, #8
 801778a:	46bd      	mov	sp, r7
 801778c:	bd80      	pop	{r7, pc}

0801778e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801778e:	b580      	push	{r7, lr}
 8017790:	b088      	sub	sp, #32
 8017792:	af00      	add	r7, sp, #0
 8017794:	60f8      	str	r0, [r7, #12]
 8017796:	60b9      	str	r1, [r7, #8]
 8017798:	607a      	str	r2, [r7, #4]
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	61fb      	str	r3, [r7, #28]
 801779e:	68bb      	ldr	r3, [r7, #8]
 80177a0:	61bb      	str	r3, [r7, #24]
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80177a6:	f7f6 fc47 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80177aa:	4603      	mov	r3, r0
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d003      	beq.n	80177b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80177b0:	69b8      	ldr	r0, [r7, #24]
 80177b2:	f002 fff5 	bl	801a7a0 <_ZdlPv>
	    return;
 80177b6:	e005      	b.n	80177c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80177b8:	697a      	ldr	r2, [r7, #20]
 80177ba:	69b9      	ldr	r1, [r7, #24]
 80177bc:	69f8      	ldr	r0, [r7, #28]
 80177be:	f000 fc00 	bl	8017fc2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80177c2:	bf00      	nop
 80177c4:	bf00      	nop
 80177c6:	3720      	adds	r7, #32
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 80177cc:	b480      	push	{r7}
 80177ce:	b083      	sub	sp, #12
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
    }
 80177d4:	bf00      	nop
 80177d6:	370c      	adds	r7, #12
 80177d8:	46bd      	mov	sp, r7
 80177da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177de:	4770      	bx	lr

080177e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f000 fa20 	bl	8017c2e <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 80177ee:	4602      	mov	r2, r0
 80177f0:	f107 030c 	add.w	r3, r7, #12
 80177f4:	4611      	mov	r1, r2
 80177f6:	4618      	mov	r0, r3
 80177f8:	f7fe fa6d 	bl	8015cd6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 80177fc:	4603      	mov	r3, r0
      }
 80177fe:	4618      	mov	r0, r3
 8017800:	3710      	adds	r7, #16
 8017802:	46bd      	mov	sp, r7
 8017804:	bd80      	pop	{r7, pc}

08017806 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017806:	b580      	push	{r7, lr}
 8017808:	b084      	sub	sp, #16
 801780a:	af00      	add	r7, sp, #0
 801780c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	68da      	ldr	r2, [r3, #12]
 8017812:	f107 030c 	add.w	r3, r7, #12
 8017816:	4611      	mov	r1, r2
 8017818:	4618      	mov	r0, r3
 801781a:	f7fe f92a 	bl	8015a72 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	4618      	mov	r0, r3
 8017822:	3710      	adds	r7, #16
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017828:	b480      	push	{r7}
 801782a:	b083      	sub	sp, #12
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
 8017830:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681a      	ldr	r2, [r3, #0]
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	429a      	cmp	r2, r3
 801783c:	bf0c      	ite	eq
 801783e:	2301      	moveq	r3, #1
 8017840:	2300      	movne	r3, #0
 8017842:	b2db      	uxtb	r3, r3
 8017844:	4618      	mov	r0, r3
 8017846:	370c      	adds	r7, #12
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr

08017850 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017850:	b580      	push	{r7, lr}
 8017852:	b084      	sub	sp, #16
 8017854:	af00      	add	r7, sp, #0
 8017856:	60f8      	str	r0, [r7, #12]
 8017858:	60b9      	str	r1, [r7, #8]
 801785a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801785c:	68b8      	ldr	r0, [r7, #8]
 801785e:	f000 f9f4 	bl	8017c4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>
 8017862:	4603      	mov	r3, r0
 8017864:	681a      	ldr	r2, [r3, #0]
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	601a      	str	r2, [r3, #0]
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7fb fb43 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017870:	4603      	mov	r3, r0
 8017872:	681a      	ldr	r2, [r3, #0]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	605a      	str	r2, [r3, #4]
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017882:	b580      	push	{r7, lr}
 8017884:	b084      	sub	sp, #16
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
 801788a:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801788c:	6878      	ldr	r0, [r7, #4]
 801788e:	f000 f9e7 	bl	8017c60 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 8017892:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017894:	6838      	ldr	r0, [r7, #0]
 8017896:	f7fe fa2a 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 801789a:	4603      	mov	r3, r0
 801789c:	461a      	mov	r2, r3
 801789e:	68f9      	ldr	r1, [r7, #12]
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f000 f9ee 	bl	8017c82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80178a6:	68fb      	ldr	r3, [r7, #12]
	}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3710      	adds	r7, #16
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() noexcept
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80178b8:	6878      	ldr	r0, [r7, #4]
 80178ba:	f000 fa02 	bl	8017cc2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 80178be:	4603      	mov	r3, r0
 80178c0:	4618      	mov	r0, r3
 80178c2:	3708      	adds	r7, #8
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}

080178c8 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>:
    destroy_at(_Tp* __location)
 80178c8:	b480      	push	{r7}
 80178ca:	b083      	sub	sp, #12
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
    }
 80178d0:	bf00      	nop
 80178d2:	370c      	adds	r7, #12
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr

080178dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f7fa fe94 	bl	8012614 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>
 80178ec:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80178ee:	6838      	ldr	r0, [r7, #0]
 80178f0:	f7fe fa9d 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80178f4:	4603      	mov	r3, r0
 80178f6:	461a      	mov	r2, r3
 80178f8:	68f9      	ldr	r1, [r7, #12]
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f000 f9fe 	bl	8017cfc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8017900:	68fb      	ldr	r3, [r7, #12]
	}
 8017902:	4618      	mov	r0, r3
 8017904:	3710      	adds	r7, #16
 8017906:	46bd      	mov	sp, r7
 8017908:	bd80      	pop	{r7, pc}

0801790a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801790a:	b580      	push	{r7, lr}
 801790c:	b084      	sub	sp, #16
 801790e:	af00      	add	r7, sp, #0
 8017910:	6078      	str	r0, [r7, #4]
 8017912:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	f7fb f860 	bl	80129da <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>
 801791a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801791c:	6838      	ldr	r0, [r7, #0]
 801791e:	f7fe fafe 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017922:	4603      	mov	r3, r0
 8017924:	461a      	mov	r2, r3
 8017926:	68f9      	ldr	r1, [r7, #12]
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f000 fa07 	bl	8017d3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 801792e:	68fb      	ldr	r3, [r7, #12]
	}
 8017930:	4618      	mov	r0, r3
 8017932:	3710      	adds	r7, #16
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}

08017938 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8017938:	b580      	push	{r7, lr}
 801793a:	b084      	sub	sp, #16
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f000 fa1b 	bl	8017d7c <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8017946:	4602      	mov	r2, r0
 8017948:	f107 030c 	add.w	r3, r7, #12
 801794c:	4611      	mov	r1, r2
 801794e:	4618      	mov	r0, r3
 8017950:	f7fe fc8f 	bl	8016272 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8017954:	4603      	mov	r3, r0
      }
 8017956:	4618      	mov	r0, r3
 8017958:	3710      	adds	r7, #16
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}

0801795e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801795e:	b580      	push	{r7, lr}
 8017960:	b084      	sub	sp, #16
 8017962:	af00      	add	r7, sp, #0
 8017964:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	68da      	ldr	r2, [r3, #12]
 801796a:	f107 030c 	add.w	r3, r7, #12
 801796e:	4611      	mov	r1, r2
 8017970:	4618      	mov	r0, r3
 8017972:	f7fe fb4c 	bl	801600e <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	4618      	mov	r0, r3
 801797a:	3710      	adds	r7, #16
 801797c:	46bd      	mov	sp, r7
 801797e:	bd80      	pop	{r7, pc}

08017980 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017980:	b480      	push	{r7}
 8017982:	b083      	sub	sp, #12
 8017984:	af00      	add	r7, sp, #0
 8017986:	6078      	str	r0, [r7, #4]
 8017988:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	681a      	ldr	r2, [r3, #0]
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	429a      	cmp	r2, r3
 8017994:	bf0c      	ite	eq
 8017996:	2301      	moveq	r3, #1
 8017998:	2300      	movne	r3, #0
 801799a:	b2db      	uxtb	r3, r3
 801799c:	4618      	mov	r0, r3
 801799e:	370c      	adds	r7, #12
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr

080179a8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b084      	sub	sp, #16
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80179b4:	68b8      	ldr	r0, [r7, #8]
 80179b6:	f000 f9ef 	bl	8017d98 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 80179ba:	4603      	mov	r3, r0
 80179bc:	681a      	ldr	r2, [r3, #0]
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	601a      	str	r2, [r3, #0]
 80179c2:	6878      	ldr	r0, [r7, #4]
 80179c4:	f7fb fa97 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80179c8:	4603      	mov	r3, r0
 80179ca:	681a      	ldr	r2, [r3, #0]
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	605a      	str	r2, [r3, #4]
 80179d0:	68fb      	ldr	r3, [r7, #12]
 80179d2:	4618      	mov	r0, r3
 80179d4:	3710      	adds	r7, #16
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}

080179da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80179da:	b580      	push	{r7, lr}
 80179dc:	b084      	sub	sp, #16
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
 80179e2:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f000 f9e2 	bl	8017dae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 80179ea:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80179ec:	6838      	ldr	r0, [r7, #0]
 80179ee:	f7fe fc4c 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80179f2:	4603      	mov	r3, r0
 80179f4:	461a      	mov	r2, r3
 80179f6:	68f9      	ldr	r1, [r7, #12]
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f000 f9e9 	bl	8017dd0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80179fe:	68fb      	ldr	r3, [r7, #12]
	}
 8017a00:	4618      	mov	r0, r3
 8017a02:	3710      	adds	r7, #16
 8017a04:	46bd      	mov	sp, r7
 8017a06:	bd80      	pop	{r7, pc}

08017a08 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b082      	sub	sp, #8
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017a10:	6878      	ldr	r0, [r7, #4]
 8017a12:	f000 f9fd 	bl	8017e10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8017a16:	4603      	mov	r3, r0
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3708      	adds	r7, #8
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}

08017a20 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017a20:	b480      	push	{r7}
 8017a22:	b083      	sub	sp, #12
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
    }
 8017a28:	bf00      	nop
 8017a2a:	370c      	adds	r7, #12
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a32:	4770      	bx	lr

08017a34 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b084      	sub	sp, #16
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f000 fa04 	bl	8017e4a <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8017a42:	4602      	mov	r2, r0
 8017a44:	f107 030c 	add.w	r3, r7, #12
 8017a48:	4611      	mov	r1, r2
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7fe fdee 	bl	801662c <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8017a50:	4603      	mov	r3, r0
      }
 8017a52:	4618      	mov	r0, r3
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}

08017a5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017a5a:	b580      	push	{r7, lr}
 8017a5c:	b084      	sub	sp, #16
 8017a5e:	af00      	add	r7, sp, #0
 8017a60:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	68da      	ldr	r2, [r3, #12]
 8017a66:	f107 030c 	add.w	r3, r7, #12
 8017a6a:	4611      	mov	r1, r2
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7fe fcab 	bl	80163c8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	4618      	mov	r0, r3
 8017a76:	3710      	adds	r7, #16
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017a7c:	b480      	push	{r7}
 8017a7e:	b083      	sub	sp, #12
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	683b      	ldr	r3, [r7, #0]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	bf0c      	ite	eq
 8017a92:	2301      	moveq	r3, #1
 8017a94:	2300      	movne	r3, #0
 8017a96:	b2db      	uxtb	r3, r3
 8017a98:	4618      	mov	r0, r3
 8017a9a:	370c      	adds	r7, #12
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa2:	4770      	bx	lr

08017aa4 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017ab0:	68b8      	ldr	r0, [r7, #8]
 8017ab2:	f000 f9d8 	bl	8017e66 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	681a      	ldr	r2, [r3, #0]
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	601a      	str	r2, [r3, #0]
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7fb fa19 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	681a      	ldr	r2, [r3, #0]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	605a      	str	r2, [r3, #4]
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3710      	adds	r7, #16
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}

08017ad6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017ad6:	b580      	push	{r7, lr}
 8017ad8:	b084      	sub	sp, #16
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	6078      	str	r0, [r7, #4]
 8017ade:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017ae0:	6878      	ldr	r0, [r7, #4]
 8017ae2:	f000 f9cb 	bl	8017e7c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8017ae6:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017ae8:	6838      	ldr	r0, [r7, #0]
 8017aea:	f7fe fdab 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017aee:	4603      	mov	r3, r0
 8017af0:	461a      	mov	r2, r3
 8017af2:	68f9      	ldr	r1, [r7, #12]
 8017af4:	6878      	ldr	r0, [r7, #4]
 8017af6:	f000 f9d2 	bl	8017e9e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8017afa:	68fb      	ldr	r3, [r7, #12]
	}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3710      	adds	r7, #16
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017b0c:	6878      	ldr	r0, [r7, #4]
 8017b0e:	f000 f9e6 	bl	8017ede <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8017b12:	4603      	mov	r3, r0
 8017b14:	4618      	mov	r0, r3
 8017b16:	3708      	adds	r7, #8
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd80      	pop	{r7, pc}

08017b1c <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017b1c:	b480      	push	{r7}
 8017b1e:	b083      	sub	sp, #12
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	6078      	str	r0, [r7, #4]
    }
 8017b24:	bf00      	nop
 8017b26:	370c      	adds	r7, #12
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017b38:	6878      	ldr	r0, [r7, #4]
 8017b3a:	f000 f9ed 	bl	8017f18 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8017b3e:	4602      	mov	r2, r0
 8017b40:	f107 030c 	add.w	r3, r7, #12
 8017b44:	4611      	mov	r1, r2
 8017b46:	4618      	mov	r0, r3
 8017b48:	f7fe ffbe 	bl	8016ac8 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8017b4c:	4603      	mov	r3, r0
      }
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3710      	adds	r7, #16
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}

08017b56 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017b56:	b580      	push	{r7, lr}
 8017b58:	b084      	sub	sp, #16
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	68da      	ldr	r2, [r3, #12]
 8017b62:	f107 030c 	add.w	r3, r7, #12
 8017b66:	4611      	mov	r1, r2
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7fe fe7b 	bl	8016864 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	4618      	mov	r0, r3
 8017b72:	3710      	adds	r7, #16
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017b78:	b480      	push	{r7}
 8017b7a:	b083      	sub	sp, #12
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681a      	ldr	r2, [r3, #0]
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	429a      	cmp	r2, r3
 8017b8c:	bf0c      	ite	eq
 8017b8e:	2301      	moveq	r3, #1
 8017b90:	2300      	movne	r3, #0
 8017b92:	b2db      	uxtb	r3, r3
 8017b94:	4618      	mov	r0, r3
 8017b96:	370c      	adds	r7, #12
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9e:	4770      	bx	lr

08017ba0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b084      	sub	sp, #16
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017bac:	68b8      	ldr	r0, [r7, #8]
 8017bae:	f000 f9c1 	bl	8017f34 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	681a      	ldr	r2, [r3, #0]
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	601a      	str	r2, [r3, #0]
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f7fb f99b 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017bc0:	4603      	mov	r3, r0
 8017bc2:	681a      	ldr	r2, [r3, #0]
 8017bc4:	68fb      	ldr	r3, [r7, #12]
 8017bc6:	605a      	str	r2, [r3, #4]
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	4618      	mov	r0, r3
 8017bcc:	3710      	adds	r7, #16
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	bd80      	pop	{r7, pc}

08017bd2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017bd2:	b580      	push	{r7, lr}
 8017bd4:	b084      	sub	sp, #16
 8017bd6:	af00      	add	r7, sp, #0
 8017bd8:	6078      	str	r0, [r7, #4]
 8017bda:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017bdc:	6878      	ldr	r0, [r7, #4]
 8017bde:	f000 f9b4 	bl	8017f4a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8017be2:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017be4:	6838      	ldr	r0, [r7, #0]
 8017be6:	f7fe ff7b 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017bea:	4603      	mov	r3, r0
 8017bec:	461a      	mov	r2, r3
 8017bee:	68f9      	ldr	r1, [r7, #12]
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f000 f9bb 	bl	8017f6c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8017bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3710      	adds	r7, #16
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017c08:	6878      	ldr	r0, [r7, #4]
 8017c0a:	f000 f9cf 	bl	8017fac <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	4618      	mov	r0, r3
 8017c12:	3708      	adds	r7, #8
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}

08017c18 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f7fc f9b6 	bl	8013f92 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 8017c26:	bf00      	nop
 8017c28:	3708      	adds	r7, #8
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}

08017c2e <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr() const
 8017c2e:	b580      	push	{r7, lr}
 8017c30:	b082      	sub	sp, #8
 8017c32:	af00      	add	r7, sp, #0
 8017c34:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	3310      	adds	r3, #16
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f000 f9d3 	bl	8017fe6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 8017c40:	4603      	mov	r3, r0
 8017c42:	4618      	mov	r0, r3
 8017c44:	3708      	adds	r7, #8
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}

08017c4a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017c4a:	b480      	push	{r7}
 8017c4c:	b083      	sub	sp, #12
 8017c4e:	af00      	add	r7, sp, #0
 8017c50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	4618      	mov	r0, r3
 8017c56:	370c      	adds	r7, #12
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5e:	4770      	bx	lr

08017c60 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b082      	sub	sp, #8
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8017c68:	6878      	ldr	r0, [r7, #4]
 8017c6a:	f7ff f8ed 	bl	8016e48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8017c6e:	4603      	mov	r3, r0
 8017c70:	2101      	movs	r1, #1
 8017c72:	4618      	mov	r0, r3
 8017c74:	f000 f9c3 	bl	8017ffe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	4618      	mov	r0, r3
 8017c7c:	3708      	adds	r7, #8
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}

08017c82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017c82:	b5b0      	push	{r4, r5, r7, lr}
 8017c84:	b084      	sub	sp, #16
 8017c86:	af00      	add	r7, sp, #0
 8017c88:	60f8      	str	r0, [r7, #12]
 8017c8a:	60b9      	str	r1, [r7, #8]
 8017c8c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017c8e:	68bb      	ldr	r3, [r7, #8]
 8017c90:	4619      	mov	r1, r3
 8017c92:	2024      	movs	r0, #36	; 0x24
 8017c94:	f7f6 f9d8 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017c98:	68f8      	ldr	r0, [r7, #12]
 8017c9a:	f7ff f8d5 	bl	8016e48 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	68b8      	ldr	r0, [r7, #8]
 8017ca2:	f7ff f8dc 	bl	8016e5e <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8017ca6:	4605      	mov	r5, r0
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7fe f820 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	461a      	mov	r2, r3
 8017cb2:	4629      	mov	r1, r5
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f000 f9de 	bl	8018076 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 8017cba:	bf00      	nop
 8017cbc:	3710      	adds	r7, #16
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bdb0      	pop	{r4, r5, r7, pc}

08017cc2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() noexcept
 8017cc2:	b480      	push	{r7}
 8017cc4:	b083      	sub	sp, #12
 8017cc6:	af00      	add	r7, sp, #0
 8017cc8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	370c      	adds	r7, #12
 8017cd0:	46bd      	mov	sp, r7
 8017cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd6:	4770      	bx	lr

08017cd8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b084      	sub	sp, #16
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	60f8      	str	r0, [r7, #12]
 8017ce0:	60b9      	str	r1, [r7, #8]
 8017ce2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8017ce4:	687a      	ldr	r2, [r7, #4]
 8017ce6:	4613      	mov	r3, r2
 8017ce8:	00db      	lsls	r3, r3, #3
 8017cea:	4413      	add	r3, r2
 8017cec:	009b      	lsls	r3, r3, #2
 8017cee:	4619      	mov	r1, r3
 8017cf0:	68b8      	ldr	r0, [r7, #8]
 8017cf2:	f002 fd57 	bl	801a7a4 <_ZdlPvj>
      }
 8017cf6:	3710      	adds	r7, #16
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017cfc:	b5b0      	push	{r4, r5, r7, lr}
 8017cfe:	b084      	sub	sp, #16
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017d08:	68bb      	ldr	r3, [r7, #8]
 8017d0a:	4619      	mov	r1, r3
 8017d0c:	2020      	movs	r0, #32
 8017d0e:	f7f6 f99b 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017d12:	68f8      	ldr	r0, [r7, #12]
 8017d14:	f7fb f9fc 	bl	8013110 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8017d18:	4604      	mov	r4, r0
 8017d1a:	68b8      	ldr	r0, [r7, #8]
 8017d1c:	f7f9 fb30 	bl	8011380 <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8017d20:	4605      	mov	r5, r0
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f7fe f883 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	4629      	mov	r1, r5
 8017d2e:	4620      	mov	r0, r4
 8017d30:	f000 f9cc 	bl	80180cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8017d34:	bf00      	nop
 8017d36:	3710      	adds	r7, #16
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bdb0      	pop	{r4, r5, r7, pc}

08017d3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017d3c:	b5b0      	push	{r4, r5, r7, lr}
 8017d3e:	b084      	sub	sp, #16
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	60f8      	str	r0, [r7, #12]
 8017d44:	60b9      	str	r1, [r7, #8]
 8017d46:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	4619      	mov	r1, r3
 8017d4c:	2028      	movs	r0, #40	; 0x28
 8017d4e:	f7f6 f97b 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017d52:	68f8      	ldr	r0, [r7, #12]
 8017d54:	f7fb fad5 	bl	8013302 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8017d58:	4604      	mov	r4, r0
 8017d5a:	68b8      	ldr	r0, [r7, #8]
 8017d5c:	f7f9 fd85 	bl	801186a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8017d60:	4605      	mov	r5, r0
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f7fe f8db 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	4629      	mov	r1, r5
 8017d6e:	4620      	mov	r0, r4
 8017d70:	f000 f9d9 	bl	8018126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8017d74:	bf00      	nop
 8017d76:	3710      	adds	r7, #16
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bdb0      	pop	{r4, r5, r7, pc}

08017d7c <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b082      	sub	sp, #8
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	3310      	adds	r3, #16
 8017d88:	4618      	mov	r0, r3
 8017d8a:	f000 f9de 	bl	801814a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	4618      	mov	r0, r3
 8017d92:	3708      	adds	r7, #8
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017d98:	b480      	push	{r7}
 8017d9a:	b083      	sub	sp, #12
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	4618      	mov	r0, r3
 8017da4:	370c      	adds	r7, #12
 8017da6:	46bd      	mov	sp, r7
 8017da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dac:	4770      	bx	lr

08017dae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8017dae:	b580      	push	{r7, lr}
 8017db0:	b082      	sub	sp, #8
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7ff f9de 	bl	8017178 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	2101      	movs	r1, #1
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f000 f9ce 	bl	8018162 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	4618      	mov	r0, r3
 8017dca:	3708      	adds	r7, #8
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	bd80      	pop	{r7, pc}

08017dd0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017dd0:	b5b0      	push	{r4, r5, r7, lr}
 8017dd2:	b084      	sub	sp, #16
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	4619      	mov	r1, r3
 8017de0:	2038      	movs	r0, #56	; 0x38
 8017de2:	f7f6 f931 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f7ff f9c6 	bl	8017178 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8017dec:	4604      	mov	r4, r0
 8017dee:	68b8      	ldr	r0, [r7, #8]
 8017df0:	f7ff f9cd 	bl	801718e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8017df4:	4605      	mov	r5, r0
 8017df6:	6878      	ldr	r0, [r7, #4]
 8017df8:	f7fe fa47 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	461a      	mov	r2, r3
 8017e00:	4629      	mov	r1, r5
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 f9ed 	bl	80181e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8017e08:	bf00      	nop
 8017e0a:	3710      	adds	r7, #16
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bdb0      	pop	{r4, r5, r7, pc}

08017e10 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	370c      	adds	r7, #12
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e24:	4770      	bx	lr

08017e26 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8017e26:	b580      	push	{r7, lr}
 8017e28:	b084      	sub	sp, #16
 8017e2a:	af00      	add	r7, sp, #0
 8017e2c:	60f8      	str	r0, [r7, #12]
 8017e2e:	60b9      	str	r1, [r7, #8]
 8017e30:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8017e32:	687a      	ldr	r2, [r7, #4]
 8017e34:	4613      	mov	r3, r2
 8017e36:	00db      	lsls	r3, r3, #3
 8017e38:	1a9b      	subs	r3, r3, r2
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	68b8      	ldr	r0, [r7, #8]
 8017e40:	f002 fcb0 	bl	801a7a4 <_ZdlPvj>
      }
 8017e44:	3710      	adds	r7, #16
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}

08017e4a <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8017e4a:	b580      	push	{r7, lr}
 8017e4c:	b082      	sub	sp, #8
 8017e4e:	af00      	add	r7, sp, #0
 8017e50:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	3310      	adds	r3, #16
 8017e56:	4618      	mov	r0, r3
 8017e58:	f000 f9d5 	bl	8018206 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	4618      	mov	r0, r3
 8017e60:	3708      	adds	r7, #8
 8017e62:	46bd      	mov	sp, r7
 8017e64:	bd80      	pop	{r7, pc}

08017e66 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017e66:	b480      	push	{r7}
 8017e68:	b083      	sub	sp, #12
 8017e6a:	af00      	add	r7, sp, #0
 8017e6c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	4618      	mov	r0, r3
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b082      	sub	sp, #8
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8017e84:	6878      	ldr	r0, [r7, #4]
 8017e86:	f7ff facf 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2101      	movs	r1, #1
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f000 f9c5 	bl	801821e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 8017e94:	4603      	mov	r3, r0
 8017e96:	4618      	mov	r0, r3
 8017e98:	3708      	adds	r7, #8
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}

08017e9e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017e9e:	b5b0      	push	{r4, r5, r7, lr}
 8017ea0:	b084      	sub	sp, #16
 8017ea2:	af00      	add	r7, sp, #0
 8017ea4:	60f8      	str	r0, [r7, #12]
 8017ea6:	60b9      	str	r1, [r7, #8]
 8017ea8:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017eaa:	68bb      	ldr	r3, [r7, #8]
 8017eac:	4619      	mov	r1, r3
 8017eae:	2024      	movs	r0, #36	; 0x24
 8017eb0:	f7f6 f8ca 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017eb4:	68f8      	ldr	r0, [r7, #12]
 8017eb6:	f7ff fab7 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8017eba:	4604      	mov	r4, r0
 8017ebc:	68b8      	ldr	r0, [r7, #8]
 8017ebe:	f7ff fabe 	bl	801743e <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7fe fbbd 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	461a      	mov	r2, r3
 8017ece:	4629      	mov	r1, r5
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f000 f9e0 	bl	8018296 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8017ed6:	bf00      	nop
 8017ed8:	3710      	adds	r7, #16
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bdb0      	pop	{r4, r5, r7, pc}

08017ede <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8017ede:	b480      	push	{r7}
 8017ee0:	b083      	sub	sp, #12
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	4618      	mov	r0, r3
 8017eea:	370c      	adds	r7, #12
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr

08017ef4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b084      	sub	sp, #16
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	60f8      	str	r0, [r7, #12]
 8017efc:	60b9      	str	r1, [r7, #8]
 8017efe:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	4613      	mov	r3, r2
 8017f04:	00db      	lsls	r3, r3, #3
 8017f06:	4413      	add	r3, r2
 8017f08:	009b      	lsls	r3, r3, #2
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	68b8      	ldr	r0, [r7, #8]
 8017f0e:	f002 fc49 	bl	801a7a4 <_ZdlPvj>
      }
 8017f12:	3710      	adds	r7, #16
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}

08017f18 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b082      	sub	sp, #8
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	3310      	adds	r3, #16
 8017f24:	4618      	mov	r0, r3
 8017f26:	f000 f9c8 	bl	80182ba <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}

08017f34 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017f34:	b480      	push	{r7}
 8017f36:	b083      	sub	sp, #12
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	370c      	adds	r7, #12
 8017f42:	46bd      	mov	sp, r7
 8017f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f48:	4770      	bx	lr

08017f4a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8017f4a:	b580      	push	{r7, lr}
 8017f4c:	b082      	sub	sp, #8
 8017f4e:	af00      	add	r7, sp, #0
 8017f50:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	f7ff fbf6 	bl	8017744 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	2101      	movs	r1, #1
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f000 f9b8 	bl	80182d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 8017f62:	4603      	mov	r3, r0
 8017f64:	4618      	mov	r0, r3
 8017f66:	3708      	adds	r7, #8
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	bd80      	pop	{r7, pc}

08017f6c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017f6c:	b5b0      	push	{r4, r5, r7, lr}
 8017f6e:	b084      	sub	sp, #16
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	60b9      	str	r1, [r7, #8]
 8017f76:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	4619      	mov	r1, r3
 8017f7c:	2028      	movs	r0, #40	; 0x28
 8017f7e:	f7f6 f863 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f7ff fbde 	bl	8017744 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8017f88:	4604      	mov	r4, r0
 8017f8a:	68b8      	ldr	r0, [r7, #8]
 8017f8c:	f7ff fbe5 	bl	801775a <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8017f90:	4605      	mov	r5, r0
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f7fe fda4 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	461a      	mov	r2, r3
 8017f9c:	4629      	mov	r1, r5
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f000 f9fc 	bl	801839c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8017fa4:	bf00      	nop
 8017fa6:	3710      	adds	r7, #16
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bdb0      	pop	{r4, r5, r7, pc}

08017fac <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8017fac:	b480      	push	{r7}
 8017fae:	b083      	sub	sp, #12
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	370c      	adds	r7, #12
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fc0:	4770      	bx	lr

08017fc2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8017fc2:	b580      	push	{r7, lr}
 8017fc4:	b084      	sub	sp, #16
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	60f8      	str	r0, [r7, #12]
 8017fca:	60b9      	str	r1, [r7, #8]
 8017fcc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	4613      	mov	r3, r2
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	4413      	add	r3, r2
 8017fd6:	00db      	lsls	r3, r3, #3
 8017fd8:	4619      	mov	r1, r3
 8017fda:	68b8      	ldr	r0, [r7, #8]
 8017fdc:	f002 fbe2 	bl	801a7a4 <_ZdlPvj>
      }
 8017fe0:	3710      	adds	r7, #16
 8017fe2:	46bd      	mov	sp, r7
 8017fe4:	bd80      	pop	{r7, pc}

08017fe6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8017fe6:	b580      	push	{r7, lr}
 8017fe8:	b082      	sub	sp, #8
 8017fea:	af00      	add	r7, sp, #0
 8017fec:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8017fee:	6878      	ldr	r0, [r7, #4]
 8017ff0:	f000 f9e6 	bl	80183c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	3708      	adds	r7, #8
 8017ffa:	46bd      	mov	sp, r7
 8017ffc:	bd80      	pop	{r7, pc}

08017ffe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8017ffe:	b580      	push	{r7, lr}
 8018000:	b084      	sub	sp, #16
 8018002:	af00      	add	r7, sp, #0
 8018004:	6078      	str	r0, [r7, #4]
 8018006:	6039      	str	r1, [r7, #0]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	60fb      	str	r3, [r7, #12]
 801800c:	683b      	ldr	r3, [r7, #0]
 801800e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8018010:	f7f6 f812 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8018014:	4603      	mov	r3, r0
 8018016:	2b00      	cmp	r3, #0
 8018018:	d009      	beq.n	801802e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801801a:	68ba      	ldr	r2, [r7, #8]
 801801c:	4613      	mov	r3, r2
 801801e:	00db      	lsls	r3, r3, #3
 8018020:	4413      	add	r3, r2
 8018022:	009b      	lsls	r3, r3, #2
 8018024:	4618      	mov	r0, r3
 8018026:	f002 fbbf 	bl	801a7a8 <_Znwj>
 801802a:	4603      	mov	r3, r0
 801802c:	e006      	b.n	801803c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801802e:	2200      	movs	r2, #0
 8018030:	68b9      	ldr	r1, [r7, #8]
 8018032:	68f8      	ldr	r0, [r7, #12]
 8018034:	f000 fa12 	bl	801845c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>
 8018038:	4603      	mov	r3, r0
 801803a:	bf00      	nop
      { return __a.allocate(__n); }
 801803c:	4618      	mov	r0, r3
 801803e:	3710      	adds	r7, #16
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}

08018044 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8018044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018046:	b083      	sub	sp, #12
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
 801804c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801804e:	6838      	ldr	r0, [r7, #0]
 8018050:	f7fd fe4d 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8018054:	4605      	mov	r5, r0
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	4619      	mov	r1, r3
 801805a:	2014      	movs	r0, #20
 801805c:	f7f5 fff4 	bl	800e048 <_ZnwjPv>
 8018060:	4606      	mov	r6, r0
 8018062:	4634      	mov	r4, r6
 8018064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018068:	682b      	ldr	r3, [r5, #0]
 801806a:	6023      	str	r3, [r4, #0]
 801806c:	4633      	mov	r3, r6
 801806e:	4618      	mov	r0, r3
 8018070:	370c      	adds	r7, #12
 8018072:	46bd      	mov	sp, r7
 8018074:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018076 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018076:	b580      	push	{r7, lr}
 8018078:	b084      	sub	sp, #16
 801807a:	af00      	add	r7, sp, #0
 801807c:	60f8      	str	r0, [r7, #12]
 801807e:	60b9      	str	r1, [r7, #8]
 8018080:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f7fd fe33 	bl	8015cee <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8018088:	4603      	mov	r3, r0
 801808a:	4619      	mov	r1, r3
 801808c:	68b8      	ldr	r0, [r7, #8]
 801808e:	f7ff ffd9 	bl	8018044 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 8018092:	bf00      	nop
 8018094:	3710      	adds	r7, #16
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}

0801809a <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801809a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801809c:	b083      	sub	sp, #12
 801809e:	af00      	add	r7, sp, #0
 80180a0:	6078      	str	r0, [r7, #4]
 80180a2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80180a4:	6838      	ldr	r0, [r7, #0]
 80180a6:	f7fd fec2 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80180aa:	4606      	mov	r6, r0
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	4619      	mov	r1, r3
 80180b0:	2010      	movs	r0, #16
 80180b2:	f7f5 ffc9 	bl	800e048 <_ZnwjPv>
 80180b6:	4605      	mov	r5, r0
 80180b8:	462c      	mov	r4, r5
 80180ba:	4633      	mov	r3, r6
 80180bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80180be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80180c2:	462b      	mov	r3, r5
 80180c4:	4618      	mov	r0, r3
 80180c6:	370c      	adds	r7, #12
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080180cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	60f8      	str	r0, [r7, #12]
 80180d4:	60b9      	str	r1, [r7, #8]
 80180d6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80180d8:	6878      	ldr	r0, [r7, #4]
 80180da:	f7fd fea8 	bl	8015e2e <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80180de:	4603      	mov	r3, r0
 80180e0:	4619      	mov	r1, r3
 80180e2:	68b8      	ldr	r0, [r7, #8]
 80180e4:	f7ff ffd9 	bl	801809a <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 80180e8:	bf00      	nop
 80180ea:	3710      	adds	r7, #16
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80180f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180f2:	b083      	sub	sp, #12
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	6078      	str	r0, [r7, #4]
 80180f8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80180fa:	6838      	ldr	r0, [r7, #0]
 80180fc:	f7fd ff0f 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8018100:	4605      	mov	r5, r0
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	4619      	mov	r1, r3
 8018106:	2018      	movs	r0, #24
 8018108:	f7f5 ff9e 	bl	800e048 <_ZnwjPv>
 801810c:	4606      	mov	r6, r0
 801810e:	4634      	mov	r4, r6
 8018110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018118:	e884 0003 	stmia.w	r4, {r0, r1}
 801811c:	4633      	mov	r3, r6
 801811e:	4618      	mov	r0, r3
 8018120:	370c      	adds	r7, #12
 8018122:	46bd      	mov	sp, r7
 8018124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018126 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018126:	b580      	push	{r7, lr}
 8018128:	b084      	sub	sp, #16
 801812a:	af00      	add	r7, sp, #0
 801812c:	60f8      	str	r0, [r7, #12]
 801812e:	60b9      	str	r1, [r7, #8]
 8018130:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7fd fef3 	bl	8015f1e <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8018138:	4603      	mov	r3, r0
 801813a:	4619      	mov	r1, r3
 801813c:	68b8      	ldr	r0, [r7, #8]
 801813e:	f7ff ffd7 	bl	80180f0 <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8018142:	bf00      	nop
 8018144:	3710      	adds	r7, #16
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}

0801814a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801814a:	b580      	push	{r7, lr}
 801814c:	b082      	sub	sp, #8
 801814e:	af00      	add	r7, sp, #0
 8018150:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f000 f93f 	bl	80183d6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8018158:	4603      	mov	r3, r0
 801815a:	4618      	mov	r0, r3
 801815c:	3708      	adds	r7, #8
 801815e:	46bd      	mov	sp, r7
 8018160:	bd80      	pop	{r7, pc}

08018162 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8018162:	b580      	push	{r7, lr}
 8018164:	b084      	sub	sp, #16
 8018166:	af00      	add	r7, sp, #0
 8018168:	6078      	str	r0, [r7, #4]
 801816a:	6039      	str	r1, [r7, #0]
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	60fb      	str	r3, [r7, #12]
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8018174:	f7f5 ff60 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d009      	beq.n	8018192 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801817e:	68ba      	ldr	r2, [r7, #8]
 8018180:	4613      	mov	r3, r2
 8018182:	00db      	lsls	r3, r3, #3
 8018184:	1a9b      	subs	r3, r3, r2
 8018186:	00db      	lsls	r3, r3, #3
 8018188:	4618      	mov	r0, r3
 801818a:	f002 fb0d 	bl	801a7a8 <_Znwj>
 801818e:	4603      	mov	r3, r0
 8018190:	e006      	b.n	80181a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8018192:	2200      	movs	r2, #0
 8018194:	68b9      	ldr	r1, [r7, #8]
 8018196:	68f8      	ldr	r0, [r7, #12]
 8018198:	f000 f982 	bl	80184a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 801819c:	4603      	mov	r3, r0
 801819e:	bf00      	nop
      { return __a.allocate(__n); }
 80181a0:	4618      	mov	r0, r3
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}

080181a8 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80181a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181aa:	b083      	sub	sp, #12
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80181b2:	6838      	ldr	r0, [r7, #0]
 80181b4:	f7fe f869 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80181b8:	4605      	mov	r5, r0
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	4619      	mov	r1, r3
 80181be:	2028      	movs	r0, #40	; 0x28
 80181c0:	f7f5 ff42 	bl	800e048 <_ZnwjPv>
 80181c4:	4606      	mov	r6, r0
 80181c6:	4634      	mov	r4, r6
 80181c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80181ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80181cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80181ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80181d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80181d4:	e884 0003 	stmia.w	r4, {r0, r1}
 80181d8:	4633      	mov	r3, r6
 80181da:	4618      	mov	r0, r3
 80181dc:	370c      	adds	r7, #12
 80181de:	46bd      	mov	sp, r7
 80181e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080181e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80181e2:	b580      	push	{r7, lr}
 80181e4:	b084      	sub	sp, #16
 80181e6:	af00      	add	r7, sp, #0
 80181e8:	60f8      	str	r0, [r7, #12]
 80181ea:	60b9      	str	r1, [r7, #8]
 80181ec:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7fe f84b 	bl	801628a <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80181f4:	4603      	mov	r3, r0
 80181f6:	4619      	mov	r1, r3
 80181f8:	68b8      	ldr	r0, [r7, #8]
 80181fa:	f7ff ffd5 	bl	80181a8 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80181fe:	bf00      	nop
 8018200:	3710      	adds	r7, #16
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}

08018206 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8018206:	b580      	push	{r7, lr}
 8018208:	b082      	sub	sp, #8
 801820a:	af00      	add	r7, sp, #0
 801820c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f000 f8ec 	bl	80183ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8018214:	4603      	mov	r3, r0
 8018216:	4618      	mov	r0, r3
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}

0801821e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 801821e:	b580      	push	{r7, lr}
 8018220:	b084      	sub	sp, #16
 8018222:	af00      	add	r7, sp, #0
 8018224:	6078      	str	r0, [r7, #4]
 8018226:	6039      	str	r1, [r7, #0]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	60fb      	str	r3, [r7, #12]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8018230:	f7f5 ff02 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8018234:	4603      	mov	r3, r0
 8018236:	2b00      	cmp	r3, #0
 8018238:	d009      	beq.n	801824e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801823a:	68ba      	ldr	r2, [r7, #8]
 801823c:	4613      	mov	r3, r2
 801823e:	00db      	lsls	r3, r3, #3
 8018240:	4413      	add	r3, r2
 8018242:	009b      	lsls	r3, r3, #2
 8018244:	4618      	mov	r0, r3
 8018246:	f002 faaf 	bl	801a7a8 <_Znwj>
 801824a:	4603      	mov	r3, r0
 801824c:	e006      	b.n	801825c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801824e:	2200      	movs	r2, #0
 8018250:	68b9      	ldr	r1, [r7, #8]
 8018252:	68f8      	ldr	r0, [r7, #12]
 8018254:	f000 f946 	bl	80184e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 8018258:	4603      	mov	r3, r0
 801825a:	bf00      	nop
      { return __a.allocate(__n); }
 801825c:	4618      	mov	r0, r3
 801825e:	3710      	adds	r7, #16
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8018264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018266:	b083      	sub	sp, #12
 8018268:	af00      	add	r7, sp, #0
 801826a:	6078      	str	r0, [r7, #4]
 801826c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801826e:	6838      	ldr	r0, [r7, #0]
 8018270:	f7fe f9e8 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8018274:	4605      	mov	r5, r0
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	4619      	mov	r1, r3
 801827a:	2014      	movs	r0, #20
 801827c:	f7f5 fee4 	bl	800e048 <_ZnwjPv>
 8018280:	4606      	mov	r6, r0
 8018282:	4634      	mov	r4, r6
 8018284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018288:	682b      	ldr	r3, [r5, #0]
 801828a:	6023      	str	r3, [r4, #0]
 801828c:	4633      	mov	r3, r6
 801828e:	4618      	mov	r0, r3
 8018290:	370c      	adds	r7, #12
 8018292:	46bd      	mov	sp, r7
 8018294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018296 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018296:	b580      	push	{r7, lr}
 8018298:	b084      	sub	sp, #16
 801829a:	af00      	add	r7, sp, #0
 801829c:	60f8      	str	r0, [r7, #12]
 801829e:	60b9      	str	r1, [r7, #8]
 80182a0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	f7fe f9ce 	bl	8016644 <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80182a8:	4603      	mov	r3, r0
 80182aa:	4619      	mov	r1, r3
 80182ac:	68b8      	ldr	r0, [r7, #8]
 80182ae:	f7ff ffd9 	bl	8018264 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80182b2:	bf00      	nop
 80182b4:	3710      	adds	r7, #16
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80182ba:	b580      	push	{r7, lr}
 80182bc:	b082      	sub	sp, #8
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f000 f89d 	bl	8018402 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 80182c8:	4603      	mov	r3, r0
 80182ca:	4618      	mov	r0, r3
 80182cc:	3708      	adds	r7, #8
 80182ce:	46bd      	mov	sp, r7
 80182d0:	bd80      	pop	{r7, pc}

080182d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80182d2:	b580      	push	{r7, lr}
 80182d4:	b084      	sub	sp, #16
 80182d6:	af00      	add	r7, sp, #0
 80182d8:	6078      	str	r0, [r7, #4]
 80182da:	6039      	str	r1, [r7, #0]
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	60fb      	str	r3, [r7, #12]
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80182e4:	f7f5 fea8 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d009      	beq.n	8018302 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80182ee:	68ba      	ldr	r2, [r7, #8]
 80182f0:	4613      	mov	r3, r2
 80182f2:	009b      	lsls	r3, r3, #2
 80182f4:	4413      	add	r3, r2
 80182f6:	00db      	lsls	r3, r3, #3
 80182f8:	4618      	mov	r0, r3
 80182fa:	f002 fa55 	bl	801a7a8 <_Znwj>
 80182fe:	4603      	mov	r3, r0
 8018300:	e006      	b.n	8018310 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8018302:	2200      	movs	r2, #0
 8018304:	68b9      	ldr	r1, [r7, #8]
 8018306:	68f8      	ldr	r0, [r7, #12]
 8018308:	f000 f90e 	bl	8018528 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 801830c:	4603      	mov	r3, r0
 801830e:	bf00      	nop
      { return __a.allocate(__n); }
 8018310:	4618      	mov	r0, r3
 8018312:	3710      	adds	r7, #16
 8018314:	46bd      	mov	sp, r7
 8018316:	bd80      	pop	{r7, pc}

08018318 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
 8018318:	b580      	push	{r7, lr}
 801831a:	b082      	sub	sp, #8
 801831c:	af00      	add	r7, sp, #0
 801831e:	6078      	str	r0, [r7, #4]
 8018320:	6039      	str	r1, [r7, #0]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	683a      	ldr	r2, [r7, #0]
 8018326:	4611      	mov	r1, r2
 8018328:	4618      	mov	r0, r3
 801832a:	f000 f875 	bl	8018418 <_ZNSt8functionIFvvEEC1ERKS1_>
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	7c1a      	ldrb	r2, [r3, #16]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	741a      	strb	r2, [r3, #16]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	4618      	mov	r0, r3
 801833a:	3708      	adds	r7, #8
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8018340:	b580      	push	{r7, lr}
 8018342:	b082      	sub	sp, #8
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
 801834a:	683b      	ldr	r3, [r7, #0]
 801834c:	881a      	ldrh	r2, [r3, #0]
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	801a      	strh	r2, [r3, #0]
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	1d1a      	adds	r2, r3, #4
 8018356:	683b      	ldr	r3, [r7, #0]
 8018358:	3304      	adds	r3, #4
 801835a:	4619      	mov	r1, r3
 801835c:	4610      	mov	r0, r2
 801835e:	f7ff ffdb 	bl	8018318 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	4618      	mov	r0, r3
 8018366:	3708      	adds	r7, #8
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}

0801836c <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801836c:	b5b0      	push	{r4, r5, r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	6078      	str	r0, [r7, #4]
 8018374:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8018376:	6838      	ldr	r0, [r7, #0]
 8018378:	f7fe fbb2 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801837c:	4605      	mov	r5, r0
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	4619      	mov	r1, r3
 8018382:	2018      	movs	r0, #24
 8018384:	f7f5 fe60 	bl	800e048 <_ZnwjPv>
 8018388:	4604      	mov	r4, r0
 801838a:	4629      	mov	r1, r5
 801838c:	4620      	mov	r0, r4
 801838e:	f7ff ffd7 	bl	8018340 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 8018392:	4623      	mov	r3, r4
 8018394:	4618      	mov	r0, r3
 8018396:	3708      	adds	r7, #8
 8018398:	46bd      	mov	sp, r7
 801839a:	bdb0      	pop	{r4, r5, r7, pc}

0801839c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801839c:	b580      	push	{r7, lr}
 801839e:	b084      	sub	sp, #16
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	60f8      	str	r0, [r7, #12]
 80183a4:	60b9      	str	r1, [r7, #8]
 80183a6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80183a8:	6878      	ldr	r0, [r7, #4]
 80183aa:	f7fe fb99 	bl	8016ae0 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80183ae:	4603      	mov	r3, r0
 80183b0:	4619      	mov	r1, r3
 80183b2:	68b8      	ldr	r0, [r7, #8]
 80183b4:	f7ff ffda 	bl	801836c <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 80183b8:	bf00      	nop
 80183ba:	3710      	adds	r7, #16
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}

080183c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() const noexcept
 80183c0:	b480      	push	{r7}
 80183c2:	b083      	sub	sp, #12
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	4618      	mov	r0, r3
 80183cc:	370c      	adds	r7, #12
 80183ce:	46bd      	mov	sp, r7
 80183d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183d4:	4770      	bx	lr

080183d6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 80183d6:	b480      	push	{r7}
 80183d8:	b083      	sub	sp, #12
 80183da:	af00      	add	r7, sp, #0
 80183dc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	4618      	mov	r0, r3
 80183e2:	370c      	adds	r7, #12
 80183e4:	46bd      	mov	sp, r7
 80183e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ea:	4770      	bx	lr

080183ec <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 80183ec:	b480      	push	{r7}
 80183ee:	b083      	sub	sp, #12
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	4618      	mov	r0, r3
 80183f8:	370c      	adds	r7, #12
 80183fa:	46bd      	mov	sp, r7
 80183fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018400:	4770      	bx	lr

08018402 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8018402:	b480      	push	{r7}
 8018404:	b083      	sub	sp, #12
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	4618      	mov	r0, r3
 801840e:	370c      	adds	r7, #12
 8018410:	46bd      	mov	sp, r7
 8018412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018416:	4770      	bx	lr

08018418 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8018418:	b580      	push	{r7, lr}
 801841a:	b082      	sub	sp, #8
 801841c:	af00      	add	r7, sp, #0
 801841e:	6078      	str	r0, [r7, #4]
 8018420:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	4618      	mov	r0, r3
 8018426:	f7fb fc7f 	bl	8013d28 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 801842a:	6838      	ldr	r0, [r7, #0]
 801842c:	f000 f89e 	bl	801856c <_ZNKSt8functionIFvvEEcvbEv>
 8018430:	4603      	mov	r3, r0
 8018432:	2b00      	cmp	r3, #0
 8018434:	d00d      	beq.n	8018452 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	689b      	ldr	r3, [r3, #8]
 801843a:	6878      	ldr	r0, [r7, #4]
 801843c:	6839      	ldr	r1, [r7, #0]
 801843e:	2202      	movs	r2, #2
 8018440:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8018442:	683b      	ldr	r3, [r7, #0]
 8018444:	68da      	ldr	r2, [r3, #12]
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801844a:	683b      	ldr	r3, [r7, #0]
 801844c:	689a      	ldr	r2, [r3, #8]
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	609a      	str	r2, [r3, #8]
	}
    }
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	4618      	mov	r0, r3
 8018456:	3708      	adds	r7, #8
 8018458:	46bd      	mov	sp, r7
 801845a:	bd80      	pop	{r7, pc}

0801845c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801845c:	b580      	push	{r7, lr}
 801845e:	b084      	sub	sp, #16
 8018460:	af00      	add	r7, sp, #0
 8018462:	60f8      	str	r0, [r7, #12]
 8018464:	60b9      	str	r1, [r7, #8]
 8018466:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8018468:	68f8      	ldr	r0, [r7, #12]
 801846a:	f000 f88f 	bl	801858c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>
 801846e:	4602      	mov	r2, r0
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	4293      	cmp	r3, r2
 8018474:	bf8c      	ite	hi
 8018476:	2301      	movhi	r3, #1
 8018478:	2300      	movls	r3, #0
 801847a:	b2db      	uxtb	r3, r3
 801847c:	2b00      	cmp	r3, #0
 801847e:	d001      	beq.n	8018484 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018480:	f002 fa56 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018484:	68ba      	ldr	r2, [r7, #8]
 8018486:	4613      	mov	r3, r2
 8018488:	00db      	lsls	r3, r3, #3
 801848a:	4413      	add	r3, r2
 801848c:	009b      	lsls	r3, r3, #2
 801848e:	4618      	mov	r0, r3
 8018490:	f002 f98a 	bl	801a7a8 <_Znwj>
 8018494:	4603      	mov	r3, r0
 8018496:	bf00      	nop
      }
 8018498:	4618      	mov	r0, r3
 801849a:	3710      	adds	r7, #16
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}

080184a0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b084      	sub	sp, #16
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80184ac:	68f8      	ldr	r0, [r7, #12]
 80184ae:	f000 f87b 	bl	80185a8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 80184b2:	4602      	mov	r2, r0
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	4293      	cmp	r3, r2
 80184b8:	bf8c      	ite	hi
 80184ba:	2301      	movhi	r3, #1
 80184bc:	2300      	movls	r3, #0
 80184be:	b2db      	uxtb	r3, r3
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d001      	beq.n	80184c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80184c4:	f002 fa34 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80184c8:	68ba      	ldr	r2, [r7, #8]
 80184ca:	4613      	mov	r3, r2
 80184cc:	00db      	lsls	r3, r3, #3
 80184ce:	1a9b      	subs	r3, r3, r2
 80184d0:	00db      	lsls	r3, r3, #3
 80184d2:	4618      	mov	r0, r3
 80184d4:	f002 f968 	bl	801a7a8 <_Znwj>
 80184d8:	4603      	mov	r3, r0
 80184da:	bf00      	nop
      }
 80184dc:	4618      	mov	r0, r3
 80184de:	3710      	adds	r7, #16
 80184e0:	46bd      	mov	sp, r7
 80184e2:	bd80      	pop	{r7, pc}

080184e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b084      	sub	sp, #16
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	60f8      	str	r0, [r7, #12]
 80184ec:	60b9      	str	r1, [r7, #8]
 80184ee:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80184f0:	68f8      	ldr	r0, [r7, #12]
 80184f2:	f000 f867 	bl	80185c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 80184f6:	4602      	mov	r2, r0
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	4293      	cmp	r3, r2
 80184fc:	bf8c      	ite	hi
 80184fe:	2301      	movhi	r3, #1
 8018500:	2300      	movls	r3, #0
 8018502:	b2db      	uxtb	r3, r3
 8018504:	2b00      	cmp	r3, #0
 8018506:	d001      	beq.n	801850c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018508:	f002 fa12 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801850c:	68ba      	ldr	r2, [r7, #8]
 801850e:	4613      	mov	r3, r2
 8018510:	00db      	lsls	r3, r3, #3
 8018512:	4413      	add	r3, r2
 8018514:	009b      	lsls	r3, r3, #2
 8018516:	4618      	mov	r0, r3
 8018518:	f002 f946 	bl	801a7a8 <_Znwj>
 801851c:	4603      	mov	r3, r0
 801851e:	bf00      	nop
      }
 8018520:	4618      	mov	r0, r3
 8018522:	3710      	adds	r7, #16
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8018528:	b580      	push	{r7, lr}
 801852a:	b084      	sub	sp, #16
 801852c:	af00      	add	r7, sp, #0
 801852e:	60f8      	str	r0, [r7, #12]
 8018530:	60b9      	str	r1, [r7, #8]
 8018532:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f000 f853 	bl	80185e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 801853a:	4602      	mov	r2, r0
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	4293      	cmp	r3, r2
 8018540:	bf8c      	ite	hi
 8018542:	2301      	movhi	r3, #1
 8018544:	2300      	movls	r3, #0
 8018546:	b2db      	uxtb	r3, r3
 8018548:	2b00      	cmp	r3, #0
 801854a:	d001      	beq.n	8018550 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801854c:	f002 f9f0 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018550:	68ba      	ldr	r2, [r7, #8]
 8018552:	4613      	mov	r3, r2
 8018554:	009b      	lsls	r3, r3, #2
 8018556:	4413      	add	r3, r2
 8018558:	00db      	lsls	r3, r3, #3
 801855a:	4618      	mov	r0, r3
 801855c:	f002 f924 	bl	801a7a8 <_Znwj>
 8018560:	4603      	mov	r3, r0
 8018562:	bf00      	nop
      }
 8018564:	4618      	mov	r0, r3
 8018566:	3710      	adds	r7, #16
 8018568:	46bd      	mov	sp, r7
 801856a:	bd80      	pop	{r7, pc}

0801856c <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801856c:	b580      	push	{r7, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	4618      	mov	r0, r3
 8018578:	f7fb fbf7 	bl	8013d6a <_ZNKSt14_Function_base8_M_emptyEv>
 801857c:	4603      	mov	r3, r0
 801857e:	f083 0301 	eor.w	r3, r3, #1
 8018582:	b2db      	uxtb	r3, r3
 8018584:	4618      	mov	r0, r3
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}

0801858c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801858c:	b480      	push	{r7}
 801858e:	b083      	sub	sp, #12
 8018590:	af00      	add	r7, sp, #0
 8018592:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018594:	4b03      	ldr	r3, [pc, #12]	; (80185a4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv+0x18>)
      }
 8018596:	4618      	mov	r0, r3
 8018598:	370c      	adds	r7, #12
 801859a:	46bd      	mov	sp, r7
 801859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a0:	4770      	bx	lr
 80185a2:	bf00      	nop
 80185a4:	038e38e3 	.word	0x038e38e3

080185a8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80185a8:	b480      	push	{r7}
 80185aa:	b083      	sub	sp, #12
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80185b0:	4b03      	ldr	r3, [pc, #12]	; (80185c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 80185b2:	4618      	mov	r0, r3
 80185b4:	370c      	adds	r7, #12
 80185b6:	46bd      	mov	sp, r7
 80185b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185bc:	4770      	bx	lr
 80185be:	bf00      	nop
 80185c0:	02492492 	.word	0x02492492

080185c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80185c4:	b480      	push	{r7}
 80185c6:	b083      	sub	sp, #12
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80185cc:	4b03      	ldr	r3, [pc, #12]	; (80185dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 80185ce:	4618      	mov	r0, r3
 80185d0:	370c      	adds	r7, #12
 80185d2:	46bd      	mov	sp, r7
 80185d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d8:	4770      	bx	lr
 80185da:	bf00      	nop
 80185dc:	038e38e3 	.word	0x038e38e3

080185e0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80185e0:	b480      	push	{r7}
 80185e2:	b083      	sub	sp, #12
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80185e8:	4b03      	ldr	r3, [pc, #12]	; (80185f8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 80185ea:	4618      	mov	r0, r3
 80185ec:	370c      	adds	r7, #12
 80185ee:	46bd      	mov	sp, r7
 80185f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f4:	4770      	bx	lr
 80185f6:	bf00      	nop
 80185f8:	03333333 	.word	0x03333333

080185fc <_Z41__static_initialization_and_destruction_0ii>:
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
	{PE7.gpio_pin, Instance()}
};
 80185fc:	b590      	push	{r4, r7, lr}
 80185fe:	b0ed      	sub	sp, #436	; 0x1b4
 8018600:	af02      	add	r7, sp, #8
 8018602:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018606:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801860a:	6018      	str	r0, [r3, #0]
 801860c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018610:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018614:	6019      	str	r1, [r3, #0]
 8018616:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801861a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	2b01      	cmp	r3, #1
 8018622:	f040 8240 	bne.w	8018aa6 <_Z41__static_initialization_and_destruction_0ii+0x4aa>
 8018626:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801862a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018634:	4293      	cmp	r3, r2
 8018636:	f040 8236 	bne.w	8018aa6 <_Z41__static_initialization_and_destruction_0ii+0x4aa>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 801863a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801863e:	4acc      	ldr	r2, [pc, #816]	; (8018970 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8018640:	49cc      	ldr	r1, [pc, #816]	; (8018974 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8018642:	4618      	mov	r0, r3
 8018644:	f7f7 f91e 	bl	800f884 <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PC6, PC7}, {&htim8}},
 8018648:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801864c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018650:	4ac9      	ldr	r2, [pc, #804]	; (8018978 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8018652:	601a      	str	r2, [r3, #0]
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8018654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018658:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801865c:	f107 0314 	add.w	r3, r7, #20
 8018660:	4618      	mov	r0, r3
 8018662:	f7fb fd0e 	bl	8014082 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>
 8018666:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801866a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801866e:	f107 0214 	add.w	r2, r7, #20
 8018672:	601a      	str	r2, [r3, #0]
 8018674:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018678:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 801867c:	2201      	movs	r2, #1
 801867e:	605a      	str	r2, [r3, #4]
 8018680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018684:	4618      	mov	r0, r3
 8018686:	f7fb fd12 	bl	80140ae <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>
 801868a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801868e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018692:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8018696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801869a:	9300      	str	r3, [sp, #0]
 801869c:	460b      	mov	r3, r1
 801869e:	ca06      	ldmia	r2, {r1, r2}
 80186a0:	48b6      	ldr	r0, [pc, #728]	; (801897c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80186a2:	f7fb fd1b 	bl	80140dc <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 80186a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80186aa:	4618      	mov	r0, r3
 80186ac:	f7fb fd0b 	bl	80140c6 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 80186b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80186b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80186b8:	4ab1      	ldr	r2, [pc, #708]	; (8018980 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80186ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80186be:	e883 0003 	stmia.w	r3, {r0, r1}
 80186c2:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80186c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80186ca:	49ae      	ldr	r1, [pc, #696]	; (8018984 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7fb fbb1 	bl	8013e34 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 80186d2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80186d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80186da:	4aab      	ldr	r2, [pc, #684]	; (8018988 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80186dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80186e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80186e4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80186e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80186ec:	3310      	adds	r3, #16
 80186ee:	49a7      	ldr	r1, [pc, #668]	; (801898c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7fb fb9f 	bl	8013e34 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 80186f6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80186fa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80186fe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018702:	601a      	str	r2, [r3, #0]
 8018704:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018708:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 801870c:	2202      	movs	r2, #2
 801870e:	605a      	str	r2, [r3, #4]
 8018710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018714:	4618      	mov	r0, r3
 8018716:	f7fb fd32 	bl	801417e <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>
 801871a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 801871e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018722:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8018726:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801872a:	9300      	str	r3, [sp, #0]
 801872c:	460b      	mov	r3, r1
 801872e:	ca06      	ldmia	r2, {r1, r2}
 8018730:	4897      	ldr	r0, [pc, #604]	; (8018990 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8018732:	f7fb fd3b 	bl	80141ac <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 8018736:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801873a:	4618      	mov	r0, r3
 801873c:	f7fb fd2b 	bl	8014196 <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 8018740:	4b94      	ldr	r3, [pc, #592]	; (8018994 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8018742:	461a      	mov	r2, r3
 8018744:	2300      	movs	r3, #0
 8018746:	6013      	str	r3, [r2, #0]
 8018748:	6053      	str	r3, [r2, #4]
 801874a:	6093      	str	r3, [r2, #8]
 801874c:	60d3      	str	r3, [r2, #12]
 801874e:	6113      	str	r3, [r2, #16]
 8018750:	6153      	str	r3, [r2, #20]
 8018752:	4890      	ldr	r0, [pc, #576]	; (8018994 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8018754:	f7fb fbaf 	bl	8013eb6 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8018758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801875c:	4a8e      	ldr	r2, [pc, #568]	; (8018998 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 801875e:	498f      	ldr	r1, [pc, #572]	; (801899c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8018760:	4618      	mov	r0, r3
 8018762:	f7f7 f88f 	bl	800f884 <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 8018766:	4b8e      	ldr	r3, [pc, #568]	; (80189a0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8018768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801876c:	2300      	movs	r3, #0
 801876e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018772:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8018776:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 801877a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801877e:	4618      	mov	r0, r3
 8018780:	f7fb fd79 	bl	8014276 <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>
 8018784:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018788:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801878c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8018790:	601a      	str	r2, [r3, #0]
 8018792:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018796:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801879a:	2201      	movs	r2, #1
 801879c:	605a      	str	r2, [r3, #4]
 801879e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80187a2:	4618      	mov	r0, r3
 80187a4:	f7fb fd80 	bl	80142a8 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>
 80187a8:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80187ac:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80187b0:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 80187b4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80187b8:	9300      	str	r3, [sp, #0]
 80187ba:	460b      	mov	r3, r1
 80187bc:	ca06      	ldmia	r2, {r1, r2}
 80187be:	4879      	ldr	r0, [pc, #484]	; (80189a4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80187c0:	f7fb fd89 	bl	80142d6 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 80187c4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fb fd79 	bl	80142c0 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
		{PA0, InputCapture::Instance(PA0, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 80187ce:	4a76      	ldr	r2, [pc, #472]	; (80189a8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80187d0:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80187d4:	2304      	movs	r3, #4
 80187d6:	9301      	str	r3, [sp, #4]
 80187d8:	2300      	movs	r3, #0
 80187da:	9300      	str	r3, [sp, #0]
 80187dc:	4b73      	ldr	r3, [pc, #460]	; (80189ac <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80187de:	ca06      	ldmia	r2, {r1, r2}
 80187e0:	f000 fef0 	bl	80195c4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 80187e4:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80187e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80187ec:	496e      	ldr	r1, [pc, #440]	; (80189a8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80187ee:	4618      	mov	r0, r3
 80187f0:	f7fb fdc2 	bl	8014378 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 80187f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80187f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80187fc:	2301      	movs	r3, #1
 80187fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018802:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018806:	4618      	mov	r0, r3
 8018808:	f7fb fdd8 	bl	80143bc <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 801880c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8018810:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018814:	9300      	str	r3, [sp, #0]
 8018816:	4613      	mov	r3, r2
 8018818:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801881c:	ca06      	ldmia	r2, {r1, r2}
 801881e:	4864      	ldr	r0, [pc, #400]	; (80189b0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8018820:	f7fb fde3 	bl	80143ea <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8018824:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018828:	4618      	mov	r0, r3
 801882a:	f7fb fdd3 	bl	80143d4 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
LowPowerTimer lptim1 = LowPowerTimer(&hlptim1, LPTIM1_PERIOD);
 801882e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018832:	4960      	ldr	r1, [pc, #384]	; (80189b4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8018834:	4860      	ldr	r0, [pc, #384]	; (80189b8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8018836:	f7fb facf 	bl	8013dd8 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(&hlptim2, LPTIM2_PERIOD);
 801883a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801883e:	495f      	ldr	r1, [pc, #380]	; (80189bc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8018840:	485f      	ldr	r0, [pc, #380]	; (80189c0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8018842:	f7fb fac9 	bl	8013dd8 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(&hlptim3, LPTIM3_PERIOD);
 8018846:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801884a:	495e      	ldr	r1, [pc, #376]	; (80189c4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 801884c:	485e      	ldr	r0, [pc, #376]	; (80189c8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 801884e:	f7fb fac3 	bl	8013dd8 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 8018852:	4b5e      	ldr	r3, [pc, #376]	; (80189cc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8018854:	461a      	mov	r2, r3
 8018856:	2300      	movs	r3, #0
 8018858:	6013      	str	r3, [r2, #0]
 801885a:	6053      	str	r3, [r2, #4]
 801885c:	6093      	str	r3, [r2, #8]
 801885e:	485b      	ldr	r0, [pc, #364]	; (80189cc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8018860:	f7fb faad 	bl	8013dbe <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 8018864:	4b5a      	ldr	r3, [pc, #360]	; (80189d0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8018866:	461a      	mov	r2, r3
 8018868:	2300      	movs	r3, #0
 801886a:	6013      	str	r3, [r2, #0]
 801886c:	6053      	str	r3, [r2, #4]
 801886e:	6093      	str	r3, [r2, #8]
 8018870:	4857      	ldr	r0, [pc, #348]	; (80189d0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8018872:	f7fb faa4 	bl	8013dbe <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 8018876:	4b57      	ldr	r3, [pc, #348]	; (80189d4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018878:	461a      	mov	r2, r3
 801887a:	2300      	movs	r3, #0
 801887c:	6013      	str	r3, [r2, #0]
 801887e:	6053      	str	r3, [r2, #4]
 8018880:	6093      	str	r3, [r2, #8]
 8018882:	4854      	ldr	r0, [pc, #336]	; (80189d4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018884:	f7fb fa9b 	bl	8013dbe <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8018888:	4b50      	ldr	r3, [pc, #320]	; (80189cc <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8018890:	2200      	movs	r2, #0
 8018892:	4951      	ldr	r1, [pc, #324]	; (80189d8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8018894:	4851      	ldr	r0, [pc, #324]	; (80189dc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8018896:	f000 f9ae 	bl	8018bf6 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 801889a:	4b4d      	ldr	r3, [pc, #308]	; (80189d0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 801889c:	9300      	str	r3, [sp, #0]
 801889e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 80188a2:	2200      	movs	r2, #0
 80188a4:	494e      	ldr	r1, [pc, #312]	; (80189e0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80188a6:	484f      	ldr	r0, [pc, #316]	; (80189e4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80188a8:	f000 f9a5 	bl	8018bf6 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 80188ac:	4b49      	ldr	r3, [pc, #292]	; (80189d4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80188ae:	9300      	str	r3, [sp, #0]
 80188b0:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80188b4:	2208      	movs	r2, #8
 80188b6:	494c      	ldr	r1, [pc, #304]	; (80189e8 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 80188b8:	484c      	ldr	r0, [pc, #304]	; (80189ec <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 80188ba:	f000 f99c 	bl	8018bf6 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
};
 80188be:	4c4c      	ldr	r4, [pc, #304]	; (80189f0 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 80188c0:	4b46      	ldr	r3, [pc, #280]	; (80189dc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80188c2:	9300      	str	r3, [sp, #0]
 80188c4:	4b3c      	ldr	r3, [pc, #240]	; (80189b8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 80188c6:	4a4b      	ldr	r2, [pc, #300]	; (80189f4 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 80188c8:	494b      	ldr	r1, [pc, #300]	; (80189f8 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 80188ca:	4620      	mov	r0, r4
 80188cc:	f000 f9cd 	bl	8018c6a <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 80188d0:	342c      	adds	r4, #44	; 0x2c
 80188d2:	4b44      	ldr	r3, [pc, #272]	; (80189e4 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	4b3a      	ldr	r3, [pc, #232]	; (80189c0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 80188d8:	4a48      	ldr	r2, [pc, #288]	; (80189fc <_Z41__static_initialization_and_destruction_0ii+0x400>)
 80188da:	4949      	ldr	r1, [pc, #292]	; (8018a00 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 80188dc:	4620      	mov	r0, r4
 80188de:	f000 f9c4 	bl	8018c6a <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 80188e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80188e6:	4b41      	ldr	r3, [pc, #260]	; (80189ec <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 80188e8:	9300      	str	r3, [sp, #0]
 80188ea:	4b37      	ldr	r3, [pc, #220]	; (80189c8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80188ec:	4a45      	ldr	r2, [pc, #276]	; (8018a04 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 80188ee:	4946      	ldr	r1, [pc, #280]	; (8018a08 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 80188f0:	f000 f9bb 	bl	8018c6a <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
		{PF11, Instance(&peripherals[0], ADC_CHANNEL_2)},
 80188f4:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80188f8:	4a44      	ldr	r2, [pc, #272]	; (8018a0c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 80188fa:	493d      	ldr	r1, [pc, #244]	; (80189f0 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 80188fc:	4618      	mov	r0, r3
 80188fe:	f000 f9d7 	bl	8018cb0 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018902:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8018906:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801890a:	4941      	ldr	r1, [pc, #260]	; (8018a10 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 801890c:	4618      	mov	r0, r3
 801890e:	f7fb fdbd 	bl	801448c <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PA6, Instance(&peripherals[0], ADC_CHANNEL_3)}
 8018912:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018916:	4a3f      	ldr	r2, [pc, #252]	; (8018a14 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8018918:	4935      	ldr	r1, [pc, #212]	; (80189f0 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 801891a:	4618      	mov	r0, r3
 801891c:	f000 f9c8 	bl	8018cb0 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018920:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8018924:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018928:	3314      	adds	r3, #20
 801892a:	493b      	ldr	r1, [pc, #236]	; (8018a18 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 801892c:	4618      	mov	r0, r3
 801892e:	f7fb fdad 	bl	801448c <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8018932:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018936:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801893a:	2302      	movs	r3, #2
 801893c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8018940:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018944:	4618      	mov	r0, r3
 8018946:	f7fb fdbe 	bl	80144c6 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 801894a:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801894e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018952:	9300      	str	r3, [sp, #0]
 8018954:	4613      	mov	r3, r2
 8018956:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 801895a:	ca06      	ldmia	r2, {r1, r2}
 801895c:	482f      	ldr	r0, [pc, #188]	; (8018a1c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 801895e:	f7fb fdc9 	bl	80144f4 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8018962:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018966:	4618      	mov	r0, r3
 8018968:	f7fb fdb9 	bl	80144de <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
 801896c:	e058      	b.n	8018a20 <_Z41__static_initialization_and_destruction_0ii+0x424>
 801896e:	bf00      	nop
 8018970:	24000e74 	.word	0x24000e74
 8018974:	24000e6c 	.word	0x24000e6c
 8018978:	24000928 	.word	0x24000928
 801897c:	24000fdc 	.word	0x24000fdc
 8018980:	0801b090 	.word	0x0801b090
 8018984:	24000c34 	.word	0x24000c34
 8018988:	0801b098 	.word	0x0801b098
 801898c:	24000c5c 	.word	0x24000c5c
 8018990:	24000ff4 	.word	0x24000ff4
 8018994:	2400100c 	.word	0x2400100c
 8018998:	24000c2c 	.word	0x24000c2c
 801899c:	24000c24 	.word	0x24000c24
 80189a0:	240009c0 	.word	0x240009c0
 80189a4:	24001024 	.word	0x24001024
 80189a8:	24000cdc 	.word	0x24000cdc
 80189ac:	24000844 	.word	0x24000844
 80189b0:	2400103c 	.word	0x2400103c
 80189b4:	240006a0 	.word	0x240006a0
 80189b8:	240010b4 	.word	0x240010b4
 80189bc:	240006d8 	.word	0x240006d8
 80189c0:	240010bc 	.word	0x240010bc
 80189c4:	24000710 	.word	0x24000710
 80189c8:	240010c4 	.word	0x240010c4
 80189cc:	240010cc 	.word	0x240010cc
 80189d0:	240010d8 	.word	0x240010d8
 80189d4:	240010e4 	.word	0x240010e4
 80189d8:	40022000 	.word	0x40022000
 80189dc:	240010f0 	.word	0x240010f0
 80189e0:	40022100 	.word	0x40022100
 80189e4:	24001108 	.word	0x24001108
 80189e8:	58026000 	.word	0x58026000
 80189ec:	24001120 	.word	0x24001120
 80189f0:	24001138 	.word	0x24001138
 80189f4:	24001054 	.word	0x24001054
 80189f8:	24000150 	.word	0x24000150
 80189fc:	24001074 	.word	0x24001074
 8018a00:	240001c0 	.word	0x240001c0
 8018a04:	24001094 	.word	0x24001094
 8018a08:	24000230 	.word	0x24000230
 8018a0c:	08600004 	.word	0x08600004
 8018a10:	24000d44 	.word	0x24000d44
 8018a14:	0c900008 	.word	0x0c900008
 8018a18:	24000d0c 	.word	0x24000d0c
 8018a1c:	240011bc 	.word	0x240011bc
	{PE7.gpio_pin, Instance()}
 8018a20:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018a24:	2200      	movs	r2, #0
 8018a26:	601a      	str	r2, [r3, #0]
 8018a28:	605a      	str	r2, [r3, #4]
 8018a2a:	609a      	str	r2, [r3, #8]
 8018a2c:	60da      	str	r2, [r3, #12]
 8018a2e:	611a      	str	r2, [r3, #16]
 8018a30:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7fb fa8e 	bl	8013f56 <_ZN17ExternalInterrupt8InstanceC1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018a3a:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8018a3e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018a42:	493b      	ldr	r1, [pc, #236]	; (8018b30 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7fb fdc5 	bl	80145d4 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>
 8018a4a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018a4e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018a52:	2301      	movs	r3, #1
 8018a54:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8018a58:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f7fb fdd5 	bl	801460c <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 8018a62:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8018a66:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018a6a:	9300      	str	r3, [sp, #0]
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8018a72:	ca06      	ldmia	r2, {r1, r2}
 8018a74:	482f      	ldr	r0, [pc, #188]	; (8018b34 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8018a76:	f7fb fde0 	bl	801463a <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 8018a7a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7fb fdd0 	bl	8014624 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
};
 8018a84:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 8018a88:	3418      	adds	r4, #24
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018a8a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018a8e:	429c      	cmp	r4, r3
 8018a90:	d004      	beq.n	8018a9c <_Z41__static_initialization_and_destruction_0ii+0x4a0>
};
 8018a92:	3c18      	subs	r4, #24
 8018a94:	4620      	mov	r0, r4
 8018a96:	f7fb fa7c 	bl	8013f92 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018a9a:	e7f6      	b.n	8018a8a <_Z41__static_initialization_and_destruction_0ii+0x48e>
	{PE7.gpio_pin, Instance()}
 8018a9c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f7fb fa69 	bl	8013f78 <_ZN17ExternalInterrupt8InstanceD1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018aa6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018aaa:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d138      	bne.n	8018b26 <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8018ab4:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018ab8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ac2:	4293      	cmp	r3, r2
 8018ac4:	d12f      	bne.n	8018b26 <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8018ac6:	481b      	ldr	r0, [pc, #108]	; (8018b34 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8018ac8:	f7fb fa71 	bl	8013fae <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018acc:	481a      	ldr	r0, [pc, #104]	; (8018b38 <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 8018ace:	f7fb fa35 	bl	8013f3c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
ADC::Peripheral ADC::peripherals[3] = {
 8018ad2:	4c1a      	ldr	r4, [pc, #104]	; (8018b3c <_Z41__static_initialization_and_destruction_0ii+0x540>)
 8018ad4:	4b1a      	ldr	r3, [pc, #104]	; (8018b40 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8018ad6:	429c      	cmp	r4, r3
 8018ad8:	d004      	beq.n	8018ae4 <_Z41__static_initialization_and_destruction_0ii+0x4e8>
 8018ada:	3c2c      	subs	r4, #44	; 0x2c
 8018adc:	4620      	mov	r0, r4
 8018ade:	f7fb fa1f 	bl	8013f20 <_ZN3ADC10PeripheralD1Ev>
 8018ae2:	e7f7      	b.n	8018ad4 <_Z41__static_initialization_and_destruction_0ii+0x4d8>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8018ae4:	4817      	ldr	r0, [pc, #92]	; (8018b44 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8018ae6:	f7fb fa0d 	bl	8013f04 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8018aea:	4817      	ldr	r0, [pc, #92]	; (8018b48 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8018aec:	f7fb fa0a 	bl	8013f04 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8018af0:	4816      	ldr	r0, [pc, #88]	; (8018b4c <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8018af2:	f7fb fa07 	bl	8013f04 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 8018af6:	4816      	ldr	r0, [pc, #88]	; (8018b50 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8018af8:	f7fb fa9a 	bl	8014030 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 8018afc:	4815      	ldr	r0, [pc, #84]	; (8018b54 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8018afe:	f7fb fa97 	bl	8014030 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 8018b02:	4815      	ldr	r0, [pc, #84]	; (8018b58 <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8018b04:	f7fb fa94 	bl	8014030 <_ZNSt6vectorImSaImEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8018b08:	4814      	ldr	r0, [pc, #80]	; (8018b5c <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8018b0a:	f7fb f9ee 	bl	8013eea <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8018b0e:	4814      	ldr	r0, [pc, #80]	; (8018b60 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8018b10:	f7fb f9de 	bl	8013ed0 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 8018b14:	4813      	ldr	r0, [pc, #76]	; (8018b64 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8018b16:	f7fb f9a8 	bl	8013e6a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8018b1a:	4813      	ldr	r0, [pc, #76]	; (8018b68 <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 8018b1c:	f7fb f9a5 	bl	8013e6a <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8018b20:	4812      	ldr	r0, [pc, #72]	; (8018b6c <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8018b22:	f7fb f97a 	bl	8013e1a <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
};
 8018b26:	bf00      	nop
 8018b28:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd90      	pop	{r4, r7, pc}
 8018b30:	24000d80 	.word	0x24000d80
 8018b34:	240011d4 	.word	0x240011d4
 8018b38:	240011bc 	.word	0x240011bc
 8018b3c:	240011bc 	.word	0x240011bc
 8018b40:	24001138 	.word	0x24001138
 8018b44:	24001120 	.word	0x24001120
 8018b48:	24001108 	.word	0x24001108
 8018b4c:	240010f0 	.word	0x240010f0
 8018b50:	240010e4 	.word	0x240010e4
 8018b54:	240010d8 	.word	0x240010d8
 8018b58:	240010cc 	.word	0x240010cc
 8018b5c:	2400103c 	.word	0x2400103c
 8018b60:	24001024 	.word	0x24001024
 8018b64:	2400100c 	.word	0x2400100c
 8018b68:	24000ff4 	.word	0x24000ff4
 8018b6c:	24000fdc 	.word	0x24000fdc

08018b70 <_GLOBAL__sub_I__ZN7Encoder13pin_timer_mapE>:
 8018b70:	b580      	push	{r7, lr}
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b78:	2001      	movs	r0, #1
 8018b7a:	f7ff fd3f 	bl	80185fc <_Z41__static_initialization_and_destruction_0ii>
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <_GLOBAL__sub_D__ZN7Encoder13pin_timer_mapE>:
 8018b80:	b580      	push	{r7, lr}
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018b88:	2000      	movs	r0, #0
 8018b8a:	f7ff fd37 	bl	80185fc <_Z41__static_initialization_and_destruction_0ii>
 8018b8e:	bd80      	pop	{r7, pc}

08018b90 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b082      	sub	sp, #8
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
 8018b98:	6878      	ldr	r0, [r7, #4]
 8018b9a:	f000 f8c1 	bl	8018d20 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	3708      	adds	r7, #8
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f000 f89f 	bl	8018cf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	4618      	mov	r0, r3
 8018bbc:	3708      	adds	r7, #8
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	bd80      	pop	{r7, pc}

08018bc2 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8018bc2:	b580      	push	{r7, lr}
 8018bc4:	b082      	sub	sp, #8
 8018bc6:	af00      	add	r7, sp, #0
 8018bc8:	6078      	str	r0, [r7, #4]
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f7ff ffeb 	bl	8018ba8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3708      	adds	r7, #8
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}

08018bdc <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b082      	sub	sp, #8
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	4618      	mov	r0, r3
 8018be8:	f000 f8a5 	bl	8018d36 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3708      	adds	r7, #8
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}

08018bf6 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
extern ADC_HandleTypeDef hadc3;

forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, ADC::Instance> ADC::active_instances = {};

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 8018bf6:	b580      	push	{r7, lr}
 8018bf8:	b084      	sub	sp, #16
 8018bfa:	af00      	add	r7, sp, #0
 8018bfc:	60f8      	str	r0, [r7, #12]
 8018bfe:	60b9      	str	r1, [r7, #8]
 8018c00:	607a      	str	r2, [r7, #4]
 8018c02:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	68ba      	ldr	r2, [r7, #8]
 8018c08:	601a      	str	r2, [r3, #0]
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	605a      	str	r2, [r3, #4]
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	683a      	ldr	r2, [r7, #0]
 8018c14:	609a      	str	r2, [r3, #8]
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	330c      	adds	r3, #12
 8018c1a:	69b9      	ldr	r1, [r7, #24]
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	f000 f89f 	bl	8018d60 <_ZNSt6vectorImSaImEEC1ERKS1_>
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	4618      	mov	r0, r3
 8018c26:	3710      	adds	r7, #16
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}

08018c2c <_ZN3ADC8InitDataC1ERKS0_>:
	struct InitData {
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
 8018c34:	6039      	str	r1, [r7, #0]
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	601a      	str	r2, [r3, #0]
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	685a      	ldr	r2, [r3, #4]
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	605a      	str	r2, [r3, #4]
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	689a      	ldr	r2, [r3, #8]
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	609a      	str	r2, [r3, #8]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f103 020c 	add.w	r2, r3, #12
 8018c54:	683b      	ldr	r3, [r7, #0]
 8018c56:	330c      	adds	r3, #12
 8018c58:	4619      	mov	r1, r3
 8018c5a:	4610      	mov	r0, r2
 8018c5c:	f000 f880 	bl	8018d60 <_ZNSt6vectorImSaImEEC1ERKS1_>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	4618      	mov	r0, r3
 8018c64:	3708      	adds	r7, #8
 8018c66:	46bd      	mov	sp, r7
 8018c68:	bd80      	pop	{r7, pc}

08018c6a <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 8018c6a:	b580      	push	{r7, lr}
 8018c6c:	b084      	sub	sp, #16
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	60f8      	str	r0, [r7, #12]
 8018c72:	60b9      	str	r1, [r7, #8]
 8018c74:	607a      	str	r2, [r7, #4]
 8018c76:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	68ba      	ldr	r2, [r7, #8]
 8018c7c:	601a      	str	r2, [r3, #0]
 8018c7e:	68fb      	ldr	r3, [r7, #12]
 8018c80:	687a      	ldr	r2, [r7, #4]
 8018c82:	605a      	str	r2, [r3, #4]
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	683a      	ldr	r2, [r7, #0]
 8018c88:	3308      	adds	r3, #8
 8018c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	3310      	adds	r3, #16
 8018c96:	69b9      	ldr	r1, [r7, #24]
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7ff ffc7 	bl	8018c2c <_ZN3ADC8InitDataC1ERKS0_>
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3710      	adds	r7, #16
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

bool ADC::Peripheral::is_registered() {
	return init_data.channels.size();
}

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 8018cb0:	b480      	push	{r7}
 8018cb2:	b085      	sub	sp, #20
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	60f8      	str	r0, [r7, #12]
 8018cb8:	60b9      	str	r1, [r7, #8]
 8018cba:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	68ba      	ldr	r2, [r7, #8]
 8018cc0:	601a      	str	r2, [r3, #0]
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	687a      	ldr	r2, [r7, #4]
 8018cc6:	605a      	str	r2, [r3, #4]
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	4618      	mov	r0, r3
 8018ccc:	3714      	adds	r7, #20
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd4:	4770      	bx	lr

08018cd6 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8018cd6:	b480      	push	{r7}
 8018cd8:	b083      	sub	sp, #12
 8018cda:	af00      	add	r7, sp, #0
 8018cdc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	685a      	ldr	r2, [r3, #4]
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	1ad3      	subs	r3, r2, r3
 8018ce8:	109b      	asrs	r3, r3, #2
 8018cea:	4618      	mov	r0, r3
 8018cec:	370c      	adds	r7, #12
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr

08018cf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8018cf6:	b580      	push	{r7, lr}
 8018cf8:	b082      	sub	sp, #8
 8018cfa:	af00      	add	r7, sp, #0
 8018cfc:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8018cfe:	6878      	ldr	r0, [r7, #4]
 8018d00:	f000 f86b 	bl	8018dda <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	4618      	mov	r0, r3
 8018d08:	f7f6 ffcf 	bl	800fcaa <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	3304      	adds	r3, #4
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7f6 f9a8 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3708      	adds	r7, #8
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	370c      	adds	r7, #12
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8018d36:	b580      	push	{r7, lr}
 8018d38:	b082      	sub	sp, #8
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8018d3e:	6878      	ldr	r0, [r7, #4]
 8018d40:	f000 f876 	bl	8018e30 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8018d44:	4603      	mov	r3, r0
 8018d46:	4619      	mov	r1, r3
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	f000 f852 	bl	8018df2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7ff ff1d 	bl	8018b90 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3708      	adds	r7, #8
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8018d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d62:	b085      	sub	sp, #20
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
 8018d68:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8018d6a:	687c      	ldr	r4, [r7, #4]
 8018d6c:	6838      	ldr	r0, [r7, #0]
 8018d6e:	f7ff ffb2 	bl	8018cd6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8018d72:	4605      	mov	r5, r0
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	4618      	mov	r0, r3
 8018d78:	f000 f874 	bl	8018e64 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8018d7c:	4602      	mov	r2, r0
 8018d7e:	f107 030c 	add.w	r3, r7, #12
 8018d82:	4611      	mov	r1, r2
 8018d84:	4618      	mov	r0, r3
 8018d86:	f000 f85f 	bl	8018e48 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8018d8a:	f107 030c 	add.w	r3, r7, #12
 8018d8e:	461a      	mov	r2, r3
 8018d90:	4629      	mov	r1, r5
 8018d92:	4620      	mov	r0, r4
 8018d94:	f000 f871 	bl	8018e7a <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 8018d98:	f107 030c 	add.w	r3, r7, #12
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7fb f923 	bl	8013fe8 <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018da2:	6838      	ldr	r0, [r7, #0]
 8018da4:	f000 f87d 	bl	8018ea2 <_ZNKSt6vectorImSaImEE5beginEv>
 8018da8:	4605      	mov	r5, r0
 8018daa:	6838      	ldr	r0, [r7, #0]
 8018dac:	f000 f889 	bl	8018ec2 <_ZNKSt6vectorImSaImEE3endEv>
 8018db0:	4606      	mov	r6, r0
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7fb fcc2 	bl	8014742 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8018dbe:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8018dc0:	4622      	mov	r2, r4
 8018dc2:	4631      	mov	r1, r6
 8018dc4:	4628      	mov	r0, r5
 8018dc6:	f000 f88d 	bl	8018ee4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8018dca:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	605a      	str	r2, [r3, #4]
      }
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3714      	adds	r7, #20
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018dda <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8018dda:	b580      	push	{r7, lr}
 8018ddc:	b082      	sub	sp, #8
 8018dde:	af00      	add	r7, sp, #0
 8018de0:	6078      	str	r0, [r7, #4]
 8018de2:	6878      	ldr	r0, [r7, #4]
 8018de4:	f000 f88f 	bl	8018f06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	4618      	mov	r0, r3
 8018dec:	3708      	adds	r7, #8
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8018df2:	b580      	push	{r7, lr}
 8018df4:	b084      	sub	sp, #16
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	6078      	str	r0, [r7, #4]
 8018dfa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8018dfc:	683b      	ldr	r3, [r7, #0]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d012      	beq.n	8018e28 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8018e02:	6838      	ldr	r0, [r7, #0]
 8018e04:	f000 f88a 	bl	8018f1c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8018e08:	4603      	mov	r3, r0
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	6878      	ldr	r0, [r7, #4]
 8018e0e:	f7ff fff0 	bl	8018df2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8018e12:	6838      	ldr	r0, [r7, #0]
 8018e14:	f000 f88e 	bl	8018f34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8018e18:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8018e1a:	6839      	ldr	r1, [r7, #0]
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f000 f895 	bl	8018f4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8018e26:	e7e9      	b.n	8018dfc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8018e28:	bf00      	nop
 8018e2a:	3710      	adds	r7, #16
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd80      	pop	{r7, pc}

08018e30 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8018e30:	b480      	push	{r7}
 8018e32:	b083      	sub	sp, #12
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	689b      	ldr	r3, [r3, #8]
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	370c      	adds	r7, #12
 8018e40:	46bd      	mov	sp, r7
 8018e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e46:	4770      	bx	lr

08018e48 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8018e48:	b580      	push	{r7, lr}
 8018e4a:	b082      	sub	sp, #8
 8018e4c:	af00      	add	r7, sp, #0
 8018e4e:	6078      	str	r0, [r7, #4]
 8018e50:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6839      	ldr	r1, [r7, #0]
 8018e56:	4618      	mov	r0, r3
 8018e58:	f000 f889 	bl	8018f6e <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	3708      	adds	r7, #8
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8018e64:	b480      	push	{r7}
 8018e66:	b083      	sub	sp, #12
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	370c      	adds	r7, #12
 8018e72:	46bd      	mov	sp, r7
 8018e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e78:	4770      	bx	lr

08018e7a <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8018e7a:	b580      	push	{r7, lr}
 8018e7c:	b084      	sub	sp, #16
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	60f8      	str	r0, [r7, #12]
 8018e82:	60b9      	str	r1, [r7, #8]
 8018e84:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8018e86:	68fb      	ldr	r3, [r7, #12]
 8018e88:	6879      	ldr	r1, [r7, #4]
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f000 f87c 	bl	8018f88 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8018e90:	68b9      	ldr	r1, [r7, #8]
 8018e92:	68f8      	ldr	r0, [r7, #12]
 8018e94:	f000 f88a 	bl	8018fac <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	3710      	adds	r7, #16
 8018e9e:	46bd      	mov	sp, r7
 8018ea0:	bd80      	pop	{r7, pc}

08018ea2 <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8018ea2:	b580      	push	{r7, lr}
 8018ea4:	b084      	sub	sp, #16
 8018ea6:	af00      	add	r7, sp, #0
 8018ea8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8018eaa:	687a      	ldr	r2, [r7, #4]
 8018eac:	f107 030c 	add.w	r3, r7, #12
 8018eb0:	4611      	mov	r1, r2
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	f000 f895 	bl	8018fe2 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	4618      	mov	r0, r3
 8018ebc:	3710      	adds	r7, #16
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	bd80      	pop	{r7, pc}

08018ec2 <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8018ec2:	b580      	push	{r7, lr}
 8018ec4:	b084      	sub	sp, #16
 8018ec6:	af00      	add	r7, sp, #0
 8018ec8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	1d1a      	adds	r2, r3, #4
 8018ece:	f107 030c 	add.w	r3, r7, #12
 8018ed2:	4611      	mov	r1, r2
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f000 f884 	bl	8018fe2 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	4618      	mov	r0, r3
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}

08018ee4 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b084      	sub	sp, #16
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	60f8      	str	r0, [r7, #12]
 8018eec:	60b9      	str	r1, [r7, #8]
 8018eee:	607a      	str	r2, [r7, #4]
 8018ef0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	68b9      	ldr	r1, [r7, #8]
 8018ef6:	68f8      	ldr	r0, [r7, #12]
 8018ef8:	f000 f883 	bl	8019002 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8018efc:	4603      	mov	r3, r0
 8018efe:	4618      	mov	r0, r3
 8018f00:	3710      	adds	r7, #16
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bd80      	pop	{r7, pc}

08018f06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8018f06:	b480      	push	{r7}
 8018f08:	b083      	sub	sp, #12
 8018f0a:	af00      	add	r7, sp, #0
 8018f0c:	6078      	str	r0, [r7, #4]
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	4618      	mov	r0, r3
 8018f12:	370c      	adds	r7, #12
 8018f14:	46bd      	mov	sp, r7
 8018f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f1a:	4770      	bx	lr

08018f1c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8018f1c:	b480      	push	{r7}
 8018f1e:	b083      	sub	sp, #12
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	68db      	ldr	r3, [r3, #12]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	370c      	adds	r7, #12
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f32:	4770      	bx	lr

08018f34 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8018f34:	b480      	push	{r7}
 8018f36:	b083      	sub	sp, #12
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	689b      	ldr	r3, [r3, #8]
 8018f40:	4618      	mov	r0, r3
 8018f42:	370c      	adds	r7, #12
 8018f44:	46bd      	mov	sp, r7
 8018f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4a:	4770      	bx	lr

08018f4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b082      	sub	sp, #8
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8018f56:	6839      	ldr	r1, [r7, #0]
 8018f58:	6878      	ldr	r0, [r7, #4]
 8018f5a:	f000 f886 	bl	801906a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8018f5e:	6839      	ldr	r1, [r7, #0]
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f000 f897 	bl	8019094 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8018f66:	bf00      	nop
 8018f68:	3708      	adds	r7, #8
 8018f6a:	46bd      	mov	sp, r7
 8018f6c:	bd80      	pop	{r7, pc}

08018f6e <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8018f6e:	b580      	push	{r7, lr}
 8018f70:	b082      	sub	sp, #8
 8018f72:	af00      	add	r7, sp, #0
 8018f74:	6078      	str	r0, [r7, #4]
 8018f76:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8018f78:	6839      	ldr	r1, [r7, #0]
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f000 f89c 	bl	80190b8 <_ZNSaImEC1ERKS_>
 8018f80:	6878      	ldr	r0, [r7, #4]
 8018f82:	3708      	adds	r7, #8
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}

08018f88 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	6078      	str	r0, [r7, #4]
 8018f90:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8018f92:	6839      	ldr	r1, [r7, #0]
 8018f94:	6878      	ldr	r0, [r7, #4]
 8018f96:	f000 f88f 	bl	80190b8 <_ZNSaImEC1ERKS_>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7fb fba9 	bl	80146f4 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	3708      	adds	r7, #8
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}

08018fac <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
 8018fb4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8018fb6:	6839      	ldr	r1, [r7, #0]
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f000 f842 	bl	8019042 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8018fbe:	4602      	mov	r2, r0
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681a      	ldr	r2, [r3, #0]
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	009b      	lsls	r3, r3, #2
 8018fd4:	441a      	add	r2, r3
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	609a      	str	r2, [r3, #8]
      }
 8018fda:	bf00      	nop
 8018fdc:	3708      	adds	r7, #8
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}

08018fe2 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8018fe2:	b480      	push	{r7}
 8018fe4:	b083      	sub	sp, #12
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
 8018fea:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	681a      	ldr	r2, [r3, #0]
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	601a      	str	r2, [r3, #0]
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	370c      	adds	r7, #12
 8018ffa:	46bd      	mov	sp, r7
 8018ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019000:	4770      	bx	lr

08019002 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8019002:	b580      	push	{r7, lr}
 8019004:	b086      	sub	sp, #24
 8019006:	af00      	add	r7, sp, #0
 8019008:	60f8      	str	r0, [r7, #12]
 801900a:	60b9      	str	r1, [r7, #8]
 801900c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801900e:	2301      	movs	r3, #1
 8019010:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	68b9      	ldr	r1, [r7, #8]
 8019016:	68f8      	ldr	r0, [r7, #12]
 8019018:	f000 f85c 	bl	80190d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 801901c:	4603      	mov	r3, r0
    }
 801901e:	4618      	mov	r0, r3
 8019020:	3718      	adds	r7, #24
 8019022:	46bd      	mov	sp, r7
 8019024:	bd80      	pop	{r7, pc}

08019026 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8019026:	b580      	push	{r7, lr}
 8019028:	b082      	sub	sp, #8
 801902a:	af00      	add	r7, sp, #0
 801902c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	3310      	adds	r3, #16
 8019032:	4618      	mov	r0, r3
 8019034:	f000 f85e 	bl	80190f4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 8019038:	4603      	mov	r3, r0
 801903a:	4618      	mov	r0, r3
 801903c:	3708      	adds	r7, #8
 801903e:	46bd      	mov	sp, r7
 8019040:	bd80      	pop	{r7, pc}

08019042 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8019042:	b580      	push	{r7, lr}
 8019044:	b082      	sub	sp, #8
 8019046:	af00      	add	r7, sp, #0
 8019048:	6078      	str	r0, [r7, #4]
 801904a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d006      	beq.n	8019060 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6839      	ldr	r1, [r7, #0]
 8019056:	4618      	mov	r0, r3
 8019058:	f000 f858 	bl	801910c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 801905c:	4603      	mov	r3, r0
 801905e:	e000      	b.n	8019062 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 8019060:	2300      	movs	r3, #0
      }
 8019062:	4618      	mov	r0, r3
 8019064:	3708      	adds	r7, #8
 8019066:	46bd      	mov	sp, r7
 8019068:	bd80      	pop	{r7, pc}

0801906a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801906a:	b590      	push	{r4, r7, lr}
 801906c:	b083      	sub	sp, #12
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
 8019072:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f000 f869 	bl	801914c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801907a:	4604      	mov	r4, r0
 801907c:	6838      	ldr	r0, [r7, #0]
 801907e:	f7ff ffd2 	bl	8019026 <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8019082:	4603      	mov	r3, r0
 8019084:	4619      	mov	r1, r3
 8019086:	4620      	mov	r0, r4
 8019088:	f000 f86b 	bl	8019162 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 801908c:	bf00      	nop
 801908e:	370c      	adds	r7, #12
 8019090:	46bd      	mov	sp, r7
 8019092:	bd90      	pop	{r4, r7, pc}

08019094 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019094:	b580      	push	{r7, lr}
 8019096:	b082      	sub	sp, #8
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
 801909c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801909e:	6878      	ldr	r0, [r7, #4]
 80190a0:	f000 f854 	bl	801914c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2201      	movs	r2, #1
 80190a8:	6839      	ldr	r1, [r7, #0]
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 f865 	bl	801917a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 80190b0:	bf00      	nop
 80190b2:	3708      	adds	r7, #8
 80190b4:	46bd      	mov	sp, r7
 80190b6:	bd80      	pop	{r7, pc}

080190b8 <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b082      	sub	sp, #8
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80190c2:	6839      	ldr	r1, [r7, #0]
 80190c4:	6878      	ldr	r0, [r7, #4]
 80190c6:	f000 f877 	bl	80191b8 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 80190ca:	687b      	ldr	r3, [r7, #4]
 80190cc:	4618      	mov	r0, r3
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80190e0:	687a      	ldr	r2, [r7, #4]
 80190e2:	68b9      	ldr	r1, [r7, #8]
 80190e4:	68f8      	ldr	r0, [r7, #12]
 80190e6:	f000 f873 	bl	80191d0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 80190ea:	4603      	mov	r3, r0
 80190ec:	4618      	mov	r0, r3
 80190ee:	3710      	adds	r7, #16
 80190f0:	46bd      	mov	sp, r7
 80190f2:	bd80      	pop	{r7, pc}

080190f4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b082      	sub	sp, #8
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f000 f87f 	bl	8019200 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 8019102:	4603      	mov	r3, r0
 8019104:	4618      	mov	r0, r3
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 801910c:	b580      	push	{r7, lr}
 801910e:	b084      	sub	sp, #16
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	6039      	str	r1, [r7, #0]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	60fb      	str	r3, [r7, #12]
 801911a:	683b      	ldr	r3, [r7, #0]
 801911c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801911e:	f7f4 ff8b 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8019122:	4603      	mov	r3, r0
 8019124:	2b00      	cmp	r3, #0
 8019126:	d006      	beq.n	8019136 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019128:	68bb      	ldr	r3, [r7, #8]
 801912a:	009b      	lsls	r3, r3, #2
 801912c:	4618      	mov	r0, r3
 801912e:	f001 fb3b 	bl	801a7a8 <_Znwj>
 8019132:	4603      	mov	r3, r0
 8019134:	e006      	b.n	8019144 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8019136:	2200      	movs	r2, #0
 8019138:	68b9      	ldr	r1, [r7, #8]
 801913a:	68f8      	ldr	r0, [r7, #12]
 801913c:	f000 f8a3 	bl	8019286 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8019140:	4603      	mov	r3, r0
 8019142:	bf00      	nop
      { return __a.allocate(__n); }
 8019144:	4618      	mov	r0, r3
 8019146:	3710      	adds	r7, #16
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801914c:	b480      	push	{r7}
 801914e:	b083      	sub	sp, #12
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	4618      	mov	r0, r3
 8019158:	370c      	adds	r7, #12
 801915a:	46bd      	mov	sp, r7
 801915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019160:	4770      	bx	lr

08019162 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8019162:	b580      	push	{r7, lr}
 8019164:	b082      	sub	sp, #8
 8019166:	af00      	add	r7, sp, #0
 8019168:	6078      	str	r0, [r7, #4]
 801916a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801916c:	6838      	ldr	r0, [r7, #0]
 801916e:	f000 f852 	bl	8019216 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 8019172:	bf00      	nop
 8019174:	3708      	adds	r7, #8
 8019176:	46bd      	mov	sp, r7
 8019178:	bd80      	pop	{r7, pc}

0801917a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801917a:	b580      	push	{r7, lr}
 801917c:	b088      	sub	sp, #32
 801917e:	af00      	add	r7, sp, #0
 8019180:	60f8      	str	r0, [r7, #12]
 8019182:	60b9      	str	r1, [r7, #8]
 8019184:	607a      	str	r2, [r7, #4]
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	61fb      	str	r3, [r7, #28]
 801918a:	68bb      	ldr	r3, [r7, #8]
 801918c:	61bb      	str	r3, [r7, #24]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8019192:	f7f4 ff51 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 8019196:	4603      	mov	r3, r0
 8019198:	2b00      	cmp	r3, #0
 801919a:	d003      	beq.n	80191a4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 801919c:	69b8      	ldr	r0, [r7, #24]
 801919e:	f001 faff 	bl	801a7a0 <_ZdlPv>
	    return;
 80191a2:	e005      	b.n	80191b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80191a4:	697a      	ldr	r2, [r7, #20]
 80191a6:	69b9      	ldr	r1, [r7, #24]
 80191a8:	69f8      	ldr	r0, [r7, #28]
 80191aa:	f000 f896 	bl	80192da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80191ae:	bf00      	nop
 80191b0:	bf00      	nop
 80191b2:	3720      	adds	r7, #32
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80191b8:	b480      	push	{r7}
 80191ba:	b083      	sub	sp, #12
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
 80191c0:	6039      	str	r1, [r7, #0]
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	4618      	mov	r0, r3
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr

080191d0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80191d0:	b590      	push	{r4, r7, lr}
 80191d2:	b085      	sub	sp, #20
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	60f8      	str	r0, [r7, #12]
 80191d8:	60b9      	str	r1, [r7, #8]
 80191da:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f000 f824 	bl	801922a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 80191e2:	4604      	mov	r4, r0
 80191e4:	68b8      	ldr	r0, [r7, #8]
 80191e6:	f000 f820 	bl	801922a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 80191ea:	4603      	mov	r3, r0
 80191ec:	687a      	ldr	r2, [r7, #4]
 80191ee:	4619      	mov	r1, r3
 80191f0:	4620      	mov	r0, r4
 80191f2:	f000 f825 	bl	8019240 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 80191f6:	4603      	mov	r3, r0
    }
 80191f8:	4618      	mov	r0, r3
 80191fa:	3714      	adds	r7, #20
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd90      	pop	{r4, r7, pc}

08019200 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8019200:	b480      	push	{r7}
 8019202:	b083      	sub	sp, #12
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	4618      	mov	r0, r3
 801920c:	370c      	adds	r7, #12
 801920e:	46bd      	mov	sp, r7
 8019210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019214:	4770      	bx	lr

08019216 <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8019216:	b480      	push	{r7}
 8019218:	b083      	sub	sp, #12
 801921a:	af00      	add	r7, sp, #0
 801921c:	6078      	str	r0, [r7, #4]
    }
 801921e:	bf00      	nop
 8019220:	370c      	adds	r7, #12
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801922a:	b480      	push	{r7}
 801922c:	b083      	sub	sp, #12
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
    { return __it; }
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	4618      	mov	r0, r3
 8019236:	370c      	adds	r7, #12
 8019238:	46bd      	mov	sp, r7
 801923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923e:	4770      	bx	lr

08019240 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8019240:	b5b0      	push	{r4, r5, r7, lr}
 8019242:	b084      	sub	sp, #16
 8019244:	af00      	add	r7, sp, #0
 8019246:	60f8      	str	r0, [r7, #12]
 8019248:	60b9      	str	r1, [r7, #8]
 801924a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801924c:	68f8      	ldr	r0, [r7, #12]
 801924e:	f000 f853 	bl	80192f8 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8019252:	4604      	mov	r4, r0
 8019254:	68b8      	ldr	r0, [r7, #8]
 8019256:	f000 f84f 	bl	80192f8 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801925a:	4605      	mov	r5, r0
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	4618      	mov	r0, r3
 8019260:	f000 f830 	bl	80192c4 <_ZSt12__niter_baseIPmET_S1_>
 8019264:	4603      	mov	r3, r0
 8019266:	461a      	mov	r2, r3
 8019268:	4629      	mov	r1, r5
 801926a:	4620      	mov	r0, r4
 801926c:	f000 f852 	bl	8019314 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 8019270:	4602      	mov	r2, r0
 8019272:	1d3b      	adds	r3, r7, #4
 8019274:	4611      	mov	r1, r2
 8019276:	4618      	mov	r0, r3
 8019278:	f000 f85c 	bl	8019334 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 801927c:	4603      	mov	r3, r0
    }
 801927e:	4618      	mov	r0, r3
 8019280:	3710      	adds	r7, #16
 8019282:	46bd      	mov	sp, r7
 8019284:	bdb0      	pop	{r4, r5, r7, pc}

08019286 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8019286:	b580      	push	{r7, lr}
 8019288:	b084      	sub	sp, #16
 801928a:	af00      	add	r7, sp, #0
 801928c:	60f8      	str	r0, [r7, #12]
 801928e:	60b9      	str	r1, [r7, #8]
 8019290:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8019292:	68f8      	ldr	r0, [r7, #12]
 8019294:	f000 f85a 	bl	801934c <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 8019298:	4602      	mov	r2, r0
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	4293      	cmp	r3, r2
 801929e:	bf8c      	ite	hi
 80192a0:	2301      	movhi	r3, #1
 80192a2:	2300      	movls	r3, #0
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d001      	beq.n	80192ae <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80192aa:	f001 fb41 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80192ae:	68bb      	ldr	r3, [r7, #8]
 80192b0:	009b      	lsls	r3, r3, #2
 80192b2:	4618      	mov	r0, r3
 80192b4:	f001 fa78 	bl	801a7a8 <_Znwj>
 80192b8:	4603      	mov	r3, r0
 80192ba:	bf00      	nop
      }
 80192bc:	4618      	mov	r0, r3
 80192be:	3710      	adds	r7, #16
 80192c0:	46bd      	mov	sp, r7
 80192c2:	bd80      	pop	{r7, pc}

080192c4 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 80192c4:	b480      	push	{r7}
 80192c6:	b083      	sub	sp, #12
 80192c8:	af00      	add	r7, sp, #0
 80192ca:	6078      	str	r0, [r7, #4]
    { return __it; }
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	4618      	mov	r0, r3
 80192d0:	370c      	adds	r7, #12
 80192d2:	46bd      	mov	sp, r7
 80192d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d8:	4770      	bx	lr

080192da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80192da:	b580      	push	{r7, lr}
 80192dc:	b084      	sub	sp, #16
 80192de:	af00      	add	r7, sp, #0
 80192e0:	60f8      	str	r0, [r7, #12]
 80192e2:	60b9      	str	r1, [r7, #8]
 80192e4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	015b      	lsls	r3, r3, #5
 80192ea:	4619      	mov	r1, r3
 80192ec:	68b8      	ldr	r0, [r7, #8]
 80192ee:	f001 fa59 	bl	801a7a4 <_ZdlPvj>
      }
 80192f2:	3710      	adds	r7, #16
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd80      	pop	{r7, pc}

080192f8 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b082      	sub	sp, #8
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8019300:	1d3b      	adds	r3, r7, #4
 8019302:	4618      	mov	r0, r3
 8019304:	f000 f82e 	bl	8019364 <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 8019308:	4603      	mov	r3, r0
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	4618      	mov	r0, r3
 801930e:	3708      	adds	r7, #8
 8019310:	46bd      	mov	sp, r7
 8019312:	bd80      	pop	{r7, pc}

08019314 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8019314:	b580      	push	{r7, lr}
 8019316:	b084      	sub	sp, #16
 8019318:	af00      	add	r7, sp, #0
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8019320:	687a      	ldr	r2, [r7, #4]
 8019322:	68b9      	ldr	r1, [r7, #8]
 8019324:	68f8      	ldr	r0, [r7, #12]
 8019326:	f000 f828 	bl	801937a <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 801932a:	4603      	mov	r3, r0
 801932c:	4618      	mov	r0, r3
 801932e:	3710      	adds	r7, #16
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}

08019334 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8019334:	b480      	push	{r7}
 8019336:	b083      	sub	sp, #12
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
 801933c:	6039      	str	r1, [r7, #0]
    { return __res; }
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	4618      	mov	r0, r3
 8019342:	370c      	adds	r7, #12
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr

0801934c <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801934c:	b480      	push	{r7}
 801934e:	b083      	sub	sp, #12
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8019354:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8019358:	4618      	mov	r0, r3
 801935a:	370c      	adds	r7, #12
 801935c:	46bd      	mov	sp, r7
 801935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019362:	4770      	bx	lr

08019364 <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8019364:	b480      	push	{r7}
 8019366:	b083      	sub	sp, #12
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	4618      	mov	r0, r3
 8019370:	370c      	adds	r7, #12
 8019372:	46bd      	mov	sp, r7
 8019374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019378:	4770      	bx	lr

0801937a <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801937a:	b580      	push	{r7, lr}
 801937c:	b084      	sub	sp, #16
 801937e:	af00      	add	r7, sp, #0
 8019380:	60f8      	str	r0, [r7, #12]
 8019382:	60b9      	str	r1, [r7, #8]
 8019384:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8019386:	f7f4 fe57 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801938a:	4603      	mov	r3, r0
 801938c:	2b00      	cmp	r3, #0
 801938e:	d006      	beq.n	801939e <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8019390:	687a      	ldr	r2, [r7, #4]
 8019392:	68b9      	ldr	r1, [r7, #8]
 8019394:	68f8      	ldr	r0, [r7, #12]
 8019396:	f000 f80d 	bl	80193b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 801939a:	4603      	mov	r3, r0
 801939c:	e006      	b.n	80193ac <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801939e:	687a      	ldr	r2, [r7, #4]
 80193a0:	68b9      	ldr	r1, [r7, #8]
 80193a2:	68f8      	ldr	r0, [r7, #12]
 80193a4:	f000 f829 	bl	80193fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 80193a8:	4603      	mov	r3, r0
 80193aa:	bf00      	nop
    }
 80193ac:	4618      	mov	r0, r3
 80193ae:	3710      	adds	r7, #16
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}

080193b4 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80193b4:	b480      	push	{r7}
 80193b6:	b087      	sub	sp, #28
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80193c0:	68ba      	ldr	r2, [r7, #8]
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	1ad3      	subs	r3, r2, r3
 80193c6:	109b      	asrs	r3, r3, #2
 80193c8:	617b      	str	r3, [r7, #20]
 80193ca:	697b      	ldr	r3, [r7, #20]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	dd0d      	ble.n	80193ec <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	681a      	ldr	r2, [r3, #0]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	601a      	str	r2, [r3, #0]
	      ++__first;
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	3304      	adds	r3, #4
 80193dc:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	3304      	adds	r3, #4
 80193e2:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80193e4:	697b      	ldr	r3, [r7, #20]
 80193e6:	3b01      	subs	r3, #1
 80193e8:	617b      	str	r3, [r7, #20]
 80193ea:	e7ee      	b.n	80193ca <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 80193ec:	687b      	ldr	r3, [r7, #4]
	}
 80193ee:	4618      	mov	r0, r3
 80193f0:	371c      	adds	r7, #28
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr

080193fa <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80193fa:	b580      	push	{r7, lr}
 80193fc:	b086      	sub	sp, #24
 80193fe:	af00      	add	r7, sp, #0
 8019400:	60f8      	str	r0, [r7, #12]
 8019402:	60b9      	str	r1, [r7, #8]
 8019404:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8019406:	68ba      	ldr	r2, [r7, #8]
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	1ad3      	subs	r3, r2, r3
 801940c:	109b      	asrs	r3, r3, #2
 801940e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d006      	beq.n	8019424 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8019416:	697b      	ldr	r3, [r7, #20]
 8019418:	009b      	lsls	r3, r3, #2
 801941a:	461a      	mov	r2, r3
 801941c:	68f9      	ldr	r1, [r7, #12]
 801941e:	6878      	ldr	r0, [r7, #4]
 8019420:	f001 fb2a 	bl	801aa78 <memmove>
	  return __result + _Num;
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	009b      	lsls	r3, r3, #2
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	4413      	add	r3, r2
	}
 801942c:	4618      	mov	r0, r3
 801942e:	3718      	adds	r7, #24
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <_Z41__static_initialization_and_destruction_0ii>:
	  	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
	  		  //TODO: Error handler
	  	  }
	  	  counter++;
	  }
}
 8019434:	b580      	push	{r7, lr}
 8019436:	b0c6      	sub	sp, #280	; 0x118
 8019438:	af00      	add	r7, sp, #0
 801943a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801943e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8019442:	6018      	str	r0, [r3, #0]
 8019444:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019448:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 801944c:	6019      	str	r1, [r3, #0]
 801944e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	2b01      	cmp	r3, #1
 801945a:	d142      	bne.n	80194e2 <_Z41__static_initialization_and_destruction_0ii+0xae>
 801945c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019460:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801946a:	4293      	cmp	r3, r2
 801946c:	d139      	bne.n	80194e2 <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801946e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019476:	4a28      	ldr	r2, [pc, #160]	; (8019518 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8019478:	4618      	mov	r0, r3
 801947a:	4611      	mov	r1, r2
 801947c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019480:	461a      	mov	r2, r3
 8019482:	f001 faeb 	bl	801aa5c <memcpy>
 8019486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801948a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801948e:	f107 0214 	add.w	r2, r7, #20
 8019492:	601a      	str	r2, [r3, #0]
 8019494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019498:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801949c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80194a0:	605a      	str	r2, [r3, #4]
 80194a2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7f6 f83e 	bl	800f528 <_ZNSaIhEC1Ev>
 80194ac:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80194b0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80194b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80194b8:	ca06      	ldmia	r2, {r1, r2}
 80194ba:	4818      	ldr	r0, [pc, #96]	; (801951c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80194bc:	f7f6 f84b 	bl	800f556 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80194c0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80194c4:	4618      	mov	r0, r3
 80194c6:	f7f6 f83b 	bl	800f540 <_ZNSaIhED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = {};
 80194ca:	4b15      	ldr	r3, [pc, #84]	; (8019520 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80194cc:	461a      	mov	r2, r3
 80194ce:	2300      	movs	r3, #0
 80194d0:	6013      	str	r3, [r2, #0]
 80194d2:	6053      	str	r3, [r2, #4]
 80194d4:	6093      	str	r3, [r2, #8]
 80194d6:	60d3      	str	r3, [r2, #12]
 80194d8:	6113      	str	r3, [r2, #16]
 80194da:	6153      	str	r3, [r2, #20]
 80194dc:	4810      	ldr	r0, [pc, #64]	; (8019520 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80194de:	f7ff fb70 	bl	8018bc2 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 80194e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80194e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d10e      	bne.n	801950e <_Z41__static_initialization_and_destruction_0ii+0xda>
 80194f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80194f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194fe:	4293      	cmp	r3, r2
 8019500:	d105      	bne.n	801950e <_Z41__static_initialization_and_destruction_0ii+0xda>
 8019502:	4807      	ldr	r0, [pc, #28]	; (8019520 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8019504:	f7ff fb6a 	bl	8018bdc <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8019508:	4804      	ldr	r0, [pc, #16]	; (801951c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801950a:	f7f6 f852 	bl	800f5b2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801950e:	bf00      	nop
 8019510:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8019514:	46bd      	mov	sp, r7
 8019516:	bd80      	pop	{r7, pc}
 8019518:	0801b0bc 	.word	0x0801b0bc
 801951c:	240011ec 	.word	0x240011ec
 8019520:	240011f0 	.word	0x240011f0

08019524 <_GLOBAL__sub_I__ZN3ADC10id_managerE>:
 8019524:	b580      	push	{r7, lr}
 8019526:	af00      	add	r7, sp, #0
 8019528:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801952c:	2001      	movs	r0, #1
 801952e:	f7ff ff81 	bl	8019434 <_Z41__static_initialization_and_destruction_0ii>
 8019532:	bd80      	pop	{r7, pc}

08019534 <_GLOBAL__sub_D__ZN3ADC10id_managerE>:
 8019534:	b580      	push	{r7, lr}
 8019536:	af00      	add	r7, sp, #0
 8019538:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801953c:	2000      	movs	r0, #0
 801953e:	f7ff ff79 	bl	8019434 <_Z41__static_initialization_and_destruction_0ii>
 8019542:	bd80      	pop	{r7, pc}

08019544 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6878      	ldr	r0, [r7, #4]
 801954e:	f000 f86d 	bl	801962c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	4618      	mov	r0, r3
 8019556:	3708      	adds	r7, #8
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}

0801955c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	4618      	mov	r0, r3
 8019568:	f000 f84b 	bl	8019602 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	4618      	mov	r0, r3
 8019570:	3708      	adds	r7, #8
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}

08019576 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8019576:	b580      	push	{r7, lr}
 8019578:	b082      	sub	sp, #8
 801957a:	af00      	add	r7, sp, #0
 801957c:	6078      	str	r0, [r7, #4]
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	4618      	mov	r0, r3
 8019582:	f7ff ffeb 	bl	801955c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8019590:	b580      	push	{r7, lr}
 8019592:	b082      	sub	sp, #8
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	4618      	mov	r0, r3
 801959c:	f000 f851 	bl	8019642 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	4618      	mov	r0, r3
 80195a4:	3708      	adds	r7, #8
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}

080195aa <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 80195aa:	b580      	push	{r7, lr}
 80195ac:	b082      	sub	sp, #8
 80195ae:	af00      	add	r7, sp, #0
 80195b0:	6078      	str	r0, [r7, #4]
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	4618      	mov	r0, r3
 80195b6:	f000 f8ac 	bl	8019712 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	4618      	mov	r0, r3
 80195be:	3708      	adds	r7, #8
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}

080195c4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TIM_HandleTypeDef* timer, uint32_t channel_rising, uint32_t channel_falling) :
 80195c4:	b480      	push	{r7}
 80195c6:	b085      	sub	sp, #20
 80195c8:	af00      	add	r7, sp, #0
 80195ca:	60f8      	str	r0, [r7, #12]
 80195cc:	1d38      	adds	r0, r7, #4
 80195ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80195d2:	603b      	str	r3, [r7, #0]
	pin(pin),
	timer(timer),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	3304      	adds	r3, #4
 80195d8:	1d3a      	adds	r2, r7, #4
 80195da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80195de:	e883 0003 	stmia.w	r3, {r0, r1}
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	683a      	ldr	r2, [r7, #0]
 80195e6:	60da      	str	r2, [r3, #12]
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	69ba      	ldr	r2, [r7, #24]
 80195ec:	611a      	str	r2, [r3, #16]
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	69fa      	ldr	r2, [r7, #28]
 80195f2:	615a      	str	r2, [r3, #20]
	{ }
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	4618      	mov	r0, r3
 80195f8:	3714      	adds	r7, #20
 80195fa:	46bd      	mov	sp, r7
 80195fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019600:	4770      	bx	lr

08019602 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8019602:	b580      	push	{r7, lr}
 8019604:	b082      	sub	sp, #8
 8019606:	af00      	add	r7, sp, #0
 8019608:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 801960a:	6878      	ldr	r0, [r7, #4]
 801960c:	f000 f896 	bl	801973c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	4618      	mov	r0, r3
 8019614:	f7f6 fb49 	bl	800fcaa <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	3304      	adds	r3, #4
 801961c:	4618      	mov	r0, r3
 801961e:	f7f5 fd22 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	4618      	mov	r0, r3
 8019626:	3708      	adds	r7, #8
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}

0801962c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801962c:	b480      	push	{r7}
 801962e:	b083      	sub	sp, #12
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	4618      	mov	r0, r3
 8019638:	370c      	adds	r7, #12
 801963a:	46bd      	mov	sp, r7
 801963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019640:	4770      	bx	lr

08019642 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8019642:	b580      	push	{r7, lr}
 8019644:	b082      	sub	sp, #8
 8019646:	af00      	add	r7, sp, #0
 8019648:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f000 f8a1 	bl	8019792 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8019650:	4603      	mov	r3, r0
 8019652:	4619      	mov	r1, r3
 8019654:	6878      	ldr	r0, [r7, #4]
 8019656:	f000 f87d 	bl	8019754 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	4618      	mov	r0, r3
 801965e:	f7ff ff71 	bl	8019544 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	4618      	mov	r0, r3
 8019666:	3708      	adds	r7, #8
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
 8019674:	6878      	ldr	r0, [r7, #4]
 8019676:	f000 f898 	bl	80197aa <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	4618      	mov	r0, r3
 801967e:	3708      	adds	r7, #8
 8019680:	46bd      	mov	sp, r7
 8019682:	bd80      	pop	{r7, pc}

08019684 <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8019684:	b480      	push	{r7}
 8019686:	b083      	sub	sp, #12
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	4618      	mov	r0, r3
 8019690:	370c      	adds	r7, #12
 8019692:	46bd      	mov	sp, r7
 8019694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019698:	4770      	bx	lr

0801969a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 801969a:	b5b0      	push	{r4, r5, r7, lr}
 801969c:	b086      	sub	sp, #24
 801969e:	af00      	add	r7, sp, #0
 80196a0:	60f8      	str	r0, [r7, #12]
 80196a2:	1d38      	adds	r0, r7, #4
 80196a4:	e880 0006 	stmia.w	r0, {r1, r2}
 80196a8:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 80196aa:	68fc      	ldr	r4, [r7, #12]
 80196ac:	f107 0314 	add.w	r3, r7, #20
 80196b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80196b2:	4618      	mov	r0, r3
 80196b4:	f000 f884 	bl	80197c0 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 80196b8:	f107 0314 	add.w	r3, r7, #20
 80196bc:	461a      	mov	r2, r3
 80196be:	6839      	ldr	r1, [r7, #0]
 80196c0:	4620      	mov	r0, r4
 80196c2:	f000 f88b 	bl	80197dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 80196c6:	f107 0314 	add.w	r3, r7, #20
 80196ca:	4618      	mov	r0, r3
 80196cc:	f7ff ffda 	bl	8019684 <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80196d0:	68fc      	ldr	r4, [r7, #12]
 80196d2:	1d3b      	adds	r3, r7, #4
 80196d4:	4618      	mov	r0, r3
 80196d6:	f000 f89f 	bl	8019818 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 80196da:	4605      	mov	r5, r0
 80196dc:	1d3b      	adds	r3, r7, #4
 80196de:	4618      	mov	r0, r3
 80196e0:	f000 f8a6 	bl	8019830 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 80196e4:	4603      	mov	r3, r0
 80196e6:	461a      	mov	r2, r3
 80196e8:	4629      	mov	r1, r5
 80196ea:	4620      	mov	r0, r4
 80196ec:	f000 f8b2 	bl	8019854 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	4618      	mov	r0, r3
 80196f4:	3718      	adds	r7, #24
 80196f6:	46bd      	mov	sp, r7
 80196f8:	bdb0      	pop	{r4, r5, r7, pc}

080196fa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80196fa:	b580      	push	{r7, lr}
 80196fc:	b082      	sub	sp, #8
 80196fe:	af00      	add	r7, sp, #0
 8019700:	6078      	str	r0, [r7, #4]
 8019702:	6878      	ldr	r0, [r7, #4]
 8019704:	f000 f8d2 	bl	80198ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	4618      	mov	r0, r3
 801970c:	3708      	adds	r7, #8
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}

08019712 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8019712:	b580      	push	{r7, lr}
 8019714:	b082      	sub	sp, #8
 8019716:	af00      	add	r7, sp, #0
 8019718:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801971a:	6878      	ldr	r0, [r7, #4]
 801971c:	f000 f8f0 	bl	8019900 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8019720:	4603      	mov	r3, r0
 8019722:	4619      	mov	r1, r3
 8019724:	6878      	ldr	r0, [r7, #4]
 8019726:	f000 f8cc 	bl	80198c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	4618      	mov	r0, r3
 801972e:	f7ff ffe4 	bl	80196fa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	4618      	mov	r0, r3
 8019736:	3708      	adds	r7, #8
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}

0801973c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801973c:	b580      	push	{r7, lr}
 801973e:	b082      	sub	sp, #8
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
 8019744:	6878      	ldr	r0, [r7, #4]
 8019746:	f000 f92e 	bl	80199a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	4618      	mov	r0, r3
 801974e:	3708      	adds	r7, #8
 8019750:	46bd      	mov	sp, r7
 8019752:	bd80      	pop	{r7, pc}

08019754 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019754:	b580      	push	{r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
 801975c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801975e:	683b      	ldr	r3, [r7, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d012      	beq.n	801978a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8019764:	6838      	ldr	r0, [r7, #0]
 8019766:	f000 f929 	bl	80199bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801976a:	4603      	mov	r3, r0
 801976c:	4619      	mov	r1, r3
 801976e:	6878      	ldr	r0, [r7, #4]
 8019770:	f7ff fff0 	bl	8019754 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8019774:	6838      	ldr	r0, [r7, #0]
 8019776:	f000 f92d 	bl	80199d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801977a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801977c:	6839      	ldr	r1, [r7, #0]
 801977e:	6878      	ldr	r0, [r7, #4]
 8019780:	f000 f934 	bl	80199ec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8019788:	e7e9      	b.n	801975e <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801978a:	bf00      	nop
 801978c:	3710      	adds	r7, #16
 801978e:	46bd      	mov	sp, r7
 8019790:	bd80      	pop	{r7, pc}

08019792 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8019792:	b480      	push	{r7}
 8019794:	b083      	sub	sp, #12
 8019796:	af00      	add	r7, sp, #0
 8019798:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	689b      	ldr	r3, [r3, #8]
 801979e:	4618      	mov	r0, r3
 80197a0:	370c      	adds	r7, #12
 80197a2:	46bd      	mov	sp, r7
 80197a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197a8:	4770      	bx	lr

080197aa <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80197aa:	b480      	push	{r7}
 80197ac:	b083      	sub	sp, #12
 80197ae:	af00      	add	r7, sp, #0
 80197b0:	6078      	str	r0, [r7, #4]
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	4618      	mov	r0, r3
 80197b6:	370c      	adds	r7, #12
 80197b8:	46bd      	mov	sp, r7
 80197ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197be:	4770      	bx	lr

080197c0 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b082      	sub	sp, #8
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
 80197c8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80197ca:	6839      	ldr	r1, [r7, #0]
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f000 f91e 	bl	8019a0e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	4618      	mov	r0, r3
 80197d6:	3708      	adds	r7, #8
 80197d8:	46bd      	mov	sp, r7
 80197da:	bd80      	pop	{r7, pc}

080197dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 80197dc:	b590      	push	{r4, r7, lr}
 80197de:	b087      	sub	sp, #28
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	60f8      	str	r0, [r7, #12]
 80197e4:	60b9      	str	r1, [r7, #8]
 80197e6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80197e8:	68fc      	ldr	r4, [r7, #12]
 80197ea:	f107 0314 	add.w	r3, r7, #20
 80197ee:	6879      	ldr	r1, [r7, #4]
 80197f0:	4618      	mov	r0, r3
 80197f2:	f000 f918 	bl	8019a26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 80197f6:	f107 0314 	add.w	r3, r7, #20
 80197fa:	461a      	mov	r2, r3
 80197fc:	68b9      	ldr	r1, [r7, #8]
 80197fe:	4620      	mov	r0, r4
 8019800:	f000 f91e 	bl	8019a40 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 8019804:	f107 0314 	add.w	r3, r7, #20
 8019808:	4618      	mov	r0, r3
 801980a:	f000 f84f 	bl	80198ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	4618      	mov	r0, r3
 8019812:	371c      	adds	r7, #28
 8019814:	46bd      	mov	sp, r7
 8019816:	bd90      	pop	{r4, r7, pc}

08019818 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8019818:	b480      	push	{r7}
 801981a:	b083      	sub	sp, #12
 801981c:	af00      	add	r7, sp, #0
 801981e:	6078      	str	r0, [r7, #4]
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	4618      	mov	r0, r3
 8019826:	370c      	adds	r7, #12
 8019828:	46bd      	mov	sp, r7
 801982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801982e:	4770      	bx	lr

08019830 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8019830:	b590      	push	{r4, r7, lr}
 8019832:	b083      	sub	sp, #12
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
 8019838:	6878      	ldr	r0, [r7, #4]
 801983a:	f7ff ffed 	bl	8019818 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 801983e:	4604      	mov	r4, r0
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f000 f91a 	bl	8019a7a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 8019846:	4603      	mov	r3, r0
 8019848:	00db      	lsls	r3, r3, #3
 801984a:	4423      	add	r3, r4
 801984c:	4618      	mov	r0, r3
 801984e:	370c      	adds	r7, #12
 8019850:	46bd      	mov	sp, r7
 8019852:	bd90      	pop	{r4, r7, pc}

08019854 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8019854:	b580      	push	{r7, lr}
 8019856:	b088      	sub	sp, #32
 8019858:	af00      	add	r7, sp, #0
 801985a:	60f8      	str	r0, [r7, #12]
 801985c:	60b9      	str	r1, [r7, #8]
 801985e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8019860:	f107 0314 	add.w	r3, r7, #20
 8019864:	68f9      	ldr	r1, [r7, #12]
 8019866:	4618      	mov	r0, r3
 8019868:	f000 f913 	bl	8019a92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 801986c:	68ba      	ldr	r2, [r7, #8]
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	429a      	cmp	r2, r3
 8019872:	d017      	beq.n	80198a4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8019874:	68f8      	ldr	r0, [r7, #12]
 8019876:	f000 f91b 	bl	8019ab0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 801987a:	4603      	mov	r3, r0
 801987c:	61fb      	str	r3, [r7, #28]
 801987e:	f107 021c 	add.w	r2, r7, #28
 8019882:	f107 0318 	add.w	r3, r7, #24
 8019886:	4611      	mov	r1, r2
 8019888:	4618      	mov	r0, r3
 801988a:	f000 f87c 	bl	8019986 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 801988e:	f107 0314 	add.w	r3, r7, #20
 8019892:	68ba      	ldr	r2, [r7, #8]
 8019894:	69b9      	ldr	r1, [r7, #24]
 8019896:	68f8      	ldr	r0, [r7, #12]
 8019898:	f000 f91b 	bl	8019ad2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801989c:	68bb      	ldr	r3, [r7, #8]
 801989e:	3308      	adds	r3, #8
 80198a0:	60bb      	str	r3, [r7, #8]
 80198a2:	e7e3      	b.n	801986c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 80198a4:	bf00      	nop
 80198a6:	3720      	adds	r7, #32
 80198a8:	46bd      	mov	sp, r7
 80198aa:	bd80      	pop	{r7, pc}

080198ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80198ac:	b480      	push	{r7}
 80198ae:	b083      	sub	sp, #12
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	4618      	mov	r0, r3
 80198b8:	370c      	adds	r7, #12
 80198ba:	46bd      	mov	sp, r7
 80198bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198c0:	4770      	bx	lr

080198c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80198c2:	b580      	push	{r7, lr}
 80198c4:	b084      	sub	sp, #16
 80198c6:	af00      	add	r7, sp, #0
 80198c8:	6078      	str	r0, [r7, #4]
 80198ca:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d012      	beq.n	80198f8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 80198d2:	6838      	ldr	r0, [r7, #0]
 80198d4:	f000 f930 	bl	8019b38 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80198d8:	4603      	mov	r3, r0
 80198da:	4619      	mov	r1, r3
 80198dc:	6878      	ldr	r0, [r7, #4]
 80198de:	f7ff fff0 	bl	80198c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 80198e2:	6838      	ldr	r0, [r7, #0]
 80198e4:	f000 f934 	bl	8019b50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80198e8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80198ea:	6839      	ldr	r1, [r7, #0]
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f000 f93b 	bl	8019b68 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80198f6:	e7e9      	b.n	80198cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 80198f8:	bf00      	nop
 80198fa:	3710      	adds	r7, #16
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}

08019900 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8019900:	b480      	push	{r7}
 8019902:	b083      	sub	sp, #12
 8019904:	af00      	add	r7, sp, #0
 8019906:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	689b      	ldr	r3, [r3, #8]
 801990c:	4618      	mov	r0, r3
 801990e:	370c      	adds	r7, #12
 8019910:	46bd      	mov	sp, r7
 8019912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019916:	4770      	bx	lr

08019918 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8019918:	b580      	push	{r7, lr}
 801991a:	b082      	sub	sp, #8
 801991c:	af00      	add	r7, sp, #0
 801991e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	3310      	adds	r3, #16
 8019924:	4618      	mov	r0, r3
 8019926:	f000 f930 	bl	8019b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 801992a:	4603      	mov	r3, r0
 801992c:	4618      	mov	r0, r3
 801992e:	3708      	adds	r7, #8
 8019930:	46bd      	mov	sp, r7
 8019932:	bd80      	pop	{r7, pc}

08019934 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8019934:	b480      	push	{r7}
 8019936:	b083      	sub	sp, #12
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	429a      	cmp	r2, r3
 8019948:	bf0c      	ite	eq
 801994a:	2301      	moveq	r3, #1
 801994c:	2300      	movne	r3, #0
 801994e:	b2db      	uxtb	r3, r3
 8019950:	4618      	mov	r0, r3
 8019952:	370c      	adds	r7, #12
 8019954:	46bd      	mov	sp, r7
 8019956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801995a:	4770      	bx	lr

0801995c <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 801995c:	b480      	push	{r7}
 801995e:	b085      	sub	sp, #20
 8019960:	af00      	add	r7, sp, #0
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	60b9      	str	r1, [r7, #8]
 8019966:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8019968:	68bb      	ldr	r3, [r7, #8]
 801996a:	681a      	ldr	r2, [r3, #0]
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	429a      	cmp	r2, r3
 8019972:	bf34      	ite	cc
 8019974:	2301      	movcc	r3, #1
 8019976:	2300      	movcs	r3, #0
 8019978:	b2db      	uxtb	r3, r3
 801997a:	4618      	mov	r0, r3
 801997c:	3714      	adds	r7, #20
 801997e:	46bd      	mov	sp, r7
 8019980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019984:	4770      	bx	lr

08019986 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8019986:	b480      	push	{r7}
 8019988:	b083      	sub	sp, #12
 801998a:	af00      	add	r7, sp, #0
 801998c:	6078      	str	r0, [r7, #4]
 801998e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8019990:	683b      	ldr	r3, [r7, #0]
 8019992:	681a      	ldr	r2, [r3, #0]
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	601a      	str	r2, [r3, #0]
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	4618      	mov	r0, r3
 801999c:	370c      	adds	r7, #12
 801999e:	46bd      	mov	sp, r7
 80199a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a4:	4770      	bx	lr

080199a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 80199a6:	b480      	push	{r7}
 80199a8:	b083      	sub	sp, #12
 80199aa:	af00      	add	r7, sp, #0
 80199ac:	6078      	str	r0, [r7, #4]
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	4618      	mov	r0, r3
 80199b2:	370c      	adds	r7, #12
 80199b4:	46bd      	mov	sp, r7
 80199b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ba:	4770      	bx	lr

080199bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80199bc:	b480      	push	{r7}
 80199be:	b083      	sub	sp, #12
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	68db      	ldr	r3, [r3, #12]
 80199c8:	4618      	mov	r0, r3
 80199ca:	370c      	adds	r7, #12
 80199cc:	46bd      	mov	sp, r7
 80199ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d2:	4770      	bx	lr

080199d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80199d4:	b480      	push	{r7}
 80199d6:	b083      	sub	sp, #12
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	689b      	ldr	r3, [r3, #8]
 80199e0:	4618      	mov	r0, r3
 80199e2:	370c      	adds	r7, #12
 80199e4:	46bd      	mov	sp, r7
 80199e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ea:	4770      	bx	lr

080199ec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b082      	sub	sp, #8
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80199f6:	6839      	ldr	r1, [r7, #0]
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f000 fa25 	bl	8019e48 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80199fe:	6839      	ldr	r1, [r7, #0]
 8019a00:	6878      	ldr	r0, [r7, #4]
 8019a02:	f000 fa36 	bl	8019e72 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8019a06:	bf00      	nop
 8019a08:	3708      	adds	r7, #8
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}

08019a0e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8019a0e:	b480      	push	{r7}
 8019a10:	b083      	sub	sp, #12
 8019a12:	af00      	add	r7, sp, #0
 8019a14:	6078      	str	r0, [r7, #4]
 8019a16:	6039      	str	r1, [r7, #0]
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	370c      	adds	r7, #12
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a24:	4770      	bx	lr

08019a26 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8019a26:	b580      	push	{r7, lr}
 8019a28:	b082      	sub	sp, #8
 8019a2a:	af00      	add	r7, sp, #0
 8019a2c:	6078      	str	r0, [r7, #4]
 8019a2e:	6039      	str	r1, [r7, #0]
 8019a30:	6878      	ldr	r0, [r7, #4]
 8019a32:	f000 fa30 	bl	8019e96 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	4618      	mov	r0, r3
 8019a3a:	3708      	adds	r7, #8
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	bd80      	pop	{r7, pc}

08019a40 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8019a40:	b580      	push	{r7, lr}
 8019a42:	b084      	sub	sp, #16
 8019a44:	af00      	add	r7, sp, #0
 8019a46:	60f8      	str	r0, [r7, #12]
 8019a48:	60b9      	str	r1, [r7, #8]
 8019a4a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f000 fa2d 	bl	8019eac <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019a52:	4603      	mov	r3, r0
 8019a54:	4619      	mov	r1, r3
 8019a56:	68f8      	ldr	r0, [r7, #12]
 8019a58:	f000 fa33 	bl	8019ec2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	68b9      	ldr	r1, [r7, #8]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f000 fa3c 	bl	8019ede <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	3304      	adds	r3, #4
 8019a6a:	4618      	mov	r0, r3
 8019a6c:	f7f5 fafb 	bl	800f066 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	4618      	mov	r0, r3
 8019a74:	3710      	adds	r7, #16
 8019a76:	46bd      	mov	sp, r7
 8019a78:	bd80      	pop	{r7, pc}

08019a7a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8019a7a:	b480      	push	{r7}
 8019a7c:	b083      	sub	sp, #12
 8019a7e:	af00      	add	r7, sp, #0
 8019a80:	6078      	str	r0, [r7, #4]
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	685b      	ldr	r3, [r3, #4]
 8019a86:	4618      	mov	r0, r3
 8019a88:	370c      	adds	r7, #12
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a90:	4770      	bx	lr

08019a92 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 8019a92:	b480      	push	{r7}
 8019a94:	b083      	sub	sp, #12
 8019a96:	af00      	add	r7, sp, #0
 8019a98:	6078      	str	r0, [r7, #4]
 8019a9a:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	683a      	ldr	r2, [r7, #0]
 8019aa0:	601a      	str	r2, [r3, #0]
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	370c      	adds	r7, #12
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aae:	4770      	bx	lr

08019ab0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b084      	sub	sp, #16
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	1d1a      	adds	r2, r3, #4
 8019abc:	f107 030c 	add.w	r3, r7, #12
 8019ac0:	4611      	mov	r1, r2
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f000 f9b1 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	4618      	mov	r0, r3
 8019acc:	3710      	adds	r7, #16
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}

08019ad2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019ad2:	b5b0      	push	{r4, r5, r7, lr}
 8019ad4:	b08a      	sub	sp, #40	; 0x28
 8019ad6:	af02      	add	r7, sp, #8
 8019ad8:	60f8      	str	r0, [r7, #12]
 8019ada:	60b9      	str	r1, [r7, #8]
 8019adc:	607a      	str	r2, [r7, #4]
 8019ade:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8019ae0:	f107 0318 	add.w	r3, r7, #24
 8019ae4:	6879      	ldr	r1, [r7, #4]
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f000 fa05 	bl	8019ef6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8019aec:	4603      	mov	r3, r0
 8019aee:	f107 0010 	add.w	r0, r7, #16
 8019af2:	68ba      	ldr	r2, [r7, #8]
 8019af4:	68f9      	ldr	r1, [r7, #12]
 8019af6:	f000 f862 	bl	8019bbe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 8019afa:	697b      	ldr	r3, [r7, #20]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d00f      	beq.n	8019b20 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8019b00:	693c      	ldr	r4, [r7, #16]
 8019b02:	697d      	ldr	r5, [r7, #20]
 8019b04:	6878      	ldr	r0, [r7, #4]
 8019b06:	f000 fa02 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019b0a:	4602      	mov	r2, r0
 8019b0c:	683b      	ldr	r3, [r7, #0]
 8019b0e:	9300      	str	r3, [sp, #0]
 8019b10:	4613      	mov	r3, r2
 8019b12:	462a      	mov	r2, r5
 8019b14:	4621      	mov	r1, r4
 8019b16:	68f8      	ldr	r0, [r7, #12]
 8019b18:	f000 fa04 	bl	8019f24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 8019b1c:	4603      	mov	r3, r0
			  __node_gen);
 8019b1e:	e007      	b.n	8019b30 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8019b20:	693a      	ldr	r2, [r7, #16]
 8019b22:	f107 031c 	add.w	r3, r7, #28
 8019b26:	4611      	mov	r1, r2
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f000 f97e 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019b2e:	69fb      	ldr	r3, [r7, #28]
    }
 8019b30:	4618      	mov	r0, r3
 8019b32:	3720      	adds	r7, #32
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bdb0      	pop	{r4, r5, r7, pc}

08019b38 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019b38:	b480      	push	{r7}
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	68db      	ldr	r3, [r3, #12]
 8019b44:	4618      	mov	r0, r3
 8019b46:	370c      	adds	r7, #12
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4e:	4770      	bx	lr

08019b50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019b50:	b480      	push	{r7}
 8019b52:	b083      	sub	sp, #12
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	689b      	ldr	r3, [r3, #8]
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	370c      	adds	r7, #12
 8019b60:	46bd      	mov	sp, r7
 8019b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b66:	4770      	bx	lr

08019b68 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b082      	sub	sp, #8
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
 8019b70:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8019b72:	6839      	ldr	r1, [r7, #0]
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	f000 fa1e 	bl	8019fb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 8019b7a:	6839      	ldr	r1, [r7, #0]
 8019b7c:	6878      	ldr	r0, [r7, #4]
 8019b7e:	f000 fa2f 	bl	8019fe0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8019b82:	bf00      	nop
 8019b84:	3708      	adds	r7, #8
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}

08019b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8019b8a:	b580      	push	{r7, lr}
 8019b8c:	b082      	sub	sp, #8
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8019b92:	6878      	ldr	r0, [r7, #4]
 8019b94:	f000 fa36 	bl	801a004 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3708      	adds	r7, #8
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}

08019ba2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 8019ba2:	b580      	push	{r7, lr}
 8019ba4:	b082      	sub	sp, #8
 8019ba6:	af00      	add	r7, sp, #0
 8019ba8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	3310      	adds	r3, #16
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f000 fa3f 	bl	801a032 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	3708      	adds	r7, #8
 8019bba:	46bd      	mov	sp, r7
 8019bbc:	bd80      	pop	{r7, pc}

08019bbe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019bbe:	b590      	push	{r4, r7, lr}
 8019bc0:	b08d      	sub	sp, #52	; 0x34
 8019bc2:	af00      	add	r7, sp, #0
 8019bc4:	60f8      	str	r0, [r7, #12]
 8019bc6:	60b9      	str	r1, [r7, #8]
 8019bc8:	607a      	str	r2, [r7, #4]
 8019bca:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8019bcc:	1d3b      	adds	r3, r7, #4
 8019bce:	4618      	mov	r0, r3
 8019bd0:	f000 fa4c 	bl	801a06c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 8019bd4:	4603      	mov	r3, r0
 8019bd6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8019bd8:	69bc      	ldr	r4, [r7, #24]
 8019bda:	68b8      	ldr	r0, [r7, #8]
 8019bdc:	f000 fa1d 	bl	801a01a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8019be0:	4603      	mov	r3, r0
 8019be2:	429c      	cmp	r4, r3
 8019be4:	bf0c      	ite	eq
 8019be6:	2301      	moveq	r3, #1
 8019be8:	2300      	movne	r3, #0
 8019bea:	b2db      	uxtb	r3, r3
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d030      	beq.n	8019c52 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 8019bf0:	68b8      	ldr	r0, [r7, #8]
 8019bf2:	f000 fa4c 	bl	801a08e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 8019bf6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d013      	beq.n	8019c24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8019bfc:	68bc      	ldr	r4, [r7, #8]
 8019bfe:	68b8      	ldr	r0, [r7, #8]
 8019c00:	f000 fa51 	bl	801a0a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019c04:	4603      	mov	r3, r0
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f000 fa58 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	683a      	ldr	r2, [r7, #0]
 8019c12:	4619      	mov	r1, r3
 8019c14:	4620      	mov	r0, r4
 8019c16:	f7ff fea1 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d001      	beq.n	8019c24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8019c20:	2301      	movs	r3, #1
 8019c22:	e000      	b.n	8019c26 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 8019c24:	2300      	movs	r3, #0
	  if (size() > 0
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d00c      	beq.n	8019c44 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8019c2a:	2300      	movs	r3, #0
 8019c2c:	61fb      	str	r3, [r7, #28]
 8019c2e:	68b8      	ldr	r0, [r7, #8]
 8019c30:	f000 fa39 	bl	801a0a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019c34:	4602      	mov	r2, r0
 8019c36:	f107 031c 	add.w	r3, r7, #28
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	68f8      	ldr	r0, [r7, #12]
 8019c3e:	f7f8 f9a9 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019c42:	e0db      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8019c44:	68fb      	ldr	r3, [r7, #12]
 8019c46:	683a      	ldr	r2, [r7, #0]
 8019c48:	68b9      	ldr	r1, [r7, #8]
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f000 fa43 	bl	801a0d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8019c50:	e0d4      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8019c52:	68bc      	ldr	r4, [r7, #8]
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	4618      	mov	r0, r3
 8019c58:	f000 fa31 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	461a      	mov	r2, r3
 8019c60:	6839      	ldr	r1, [r7, #0]
 8019c62:	4620      	mov	r0, r4
 8019c64:	f7ff fe7a 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d057      	beq.n	8019d1e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 8019c6e:	69bb      	ldr	r3, [r7, #24]
 8019c70:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8019c72:	69bc      	ldr	r4, [r7, #24]
 8019c74:	68b8      	ldr	r0, [r7, #8]
 8019c76:	f000 fab3 	bl	801a1e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	429c      	cmp	r4, r3
 8019c80:	bf0c      	ite	eq
 8019c82:	2301      	moveq	r3, #1
 8019c84:	2300      	movne	r3, #0
 8019c86:	b2db      	uxtb	r3, r3
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d00d      	beq.n	8019ca8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8019c8c:	68b8      	ldr	r0, [r7, #8]
 8019c8e:	f000 faa7 	bl	801a1e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8019c92:	4604      	mov	r4, r0
 8019c94:	68b8      	ldr	r0, [r7, #8]
 8019c96:	f000 faa3 	bl	801a1e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	461a      	mov	r2, r3
 8019c9e:	4621      	mov	r1, r4
 8019ca0:	68f8      	ldr	r0, [r7, #12]
 8019ca2:	f7f8 fa1e 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8019ca6:	e0a9      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8019ca8:	68bc      	ldr	r4, [r7, #8]
 8019caa:	f107 0314 	add.w	r3, r7, #20
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f000 faa2 	bl	801a1f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f000 fa00 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	683a      	ldr	r2, [r7, #0]
 8019cc2:	4619      	mov	r1, r3
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	f7ff fe49 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019cca:	4603      	mov	r3, r0
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d01f      	beq.n	8019d10 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8019cd0:	697b      	ldr	r3, [r7, #20]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7ff ff30 	bl	8019b38 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	bf0c      	ite	eq
 8019cde:	2301      	moveq	r3, #1
 8019ce0:	2300      	movne	r3, #0
 8019ce2:	b2db      	uxtb	r3, r3
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d00a      	beq.n	8019cfe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8019ce8:	2300      	movs	r3, #0
 8019cea:	623b      	str	r3, [r7, #32]
 8019cec:	f107 0214 	add.w	r2, r7, #20
 8019cf0:	f107 0320 	add.w	r3, r7, #32
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	68f8      	ldr	r0, [r7, #12]
 8019cf8:	f7f8 f94c 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019cfc:	e07e      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8019cfe:	f107 0218 	add.w	r2, r7, #24
 8019d02:	f107 0318 	add.w	r3, r7, #24
 8019d06:	4619      	mov	r1, r3
 8019d08:	68f8      	ldr	r0, [r7, #12]
 8019d0a:	f7f8 f9ea 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8019d0e:	e075      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	683a      	ldr	r2, [r7, #0]
 8019d14:	68b9      	ldr	r1, [r7, #8]
 8019d16:	4618      	mov	r0, r3
 8019d18:	f000 f9dd 	bl	801a0d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8019d1c:	e06e      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8019d1e:	68bc      	ldr	r4, [r7, #8]
 8019d20:	69bb      	ldr	r3, [r7, #24]
 8019d22:	4618      	mov	r0, r3
 8019d24:	f000 f9cb 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	683a      	ldr	r2, [r7, #0]
 8019d2c:	4619      	mov	r1, r3
 8019d2e:	4620      	mov	r0, r4
 8019d30:	f7ff fe14 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019d34:	4603      	mov	r3, r0
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d056      	beq.n	8019de8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 8019d3a:	69bb      	ldr	r3, [r7, #24]
 8019d3c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8019d3e:	69bc      	ldr	r4, [r7, #24]
 8019d40:	68b8      	ldr	r0, [r7, #8]
 8019d42:	f000 f9b0 	bl	801a0a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019d46:	4603      	mov	r3, r0
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	429c      	cmp	r4, r3
 8019d4c:	bf0c      	ite	eq
 8019d4e:	2301      	moveq	r3, #1
 8019d50:	2300      	movne	r3, #0
 8019d52:	b2db      	uxtb	r3, r3
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d00c      	beq.n	8019d72 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8019d58:	2300      	movs	r3, #0
 8019d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8019d5c:	68b8      	ldr	r0, [r7, #8]
 8019d5e:	f000 f9a2 	bl	801a0a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019d62:	4602      	mov	r2, r0
 8019d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d68:	4619      	mov	r1, r3
 8019d6a:	68f8      	ldr	r0, [r7, #12]
 8019d6c:	f7f8 f912 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019d70:	e044      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8019d72:	68bc      	ldr	r4, [r7, #8]
 8019d74:	f107 0310 	add.w	r3, r7, #16
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f000 fa4e 	bl	801a21a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 8019d7e:	4603      	mov	r3, r0
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	4618      	mov	r0, r3
 8019d84:	f000 f99b 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	461a      	mov	r2, r3
 8019d8c:	6839      	ldr	r1, [r7, #0]
 8019d8e:	4620      	mov	r0, r4
 8019d90:	f7ff fde4 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019d94:	4603      	mov	r3, r0
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d01f      	beq.n	8019dda <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8019d9a:	69bb      	ldr	r3, [r7, #24]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7ff fecb 	bl	8019b38 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8019da2:	4603      	mov	r3, r0
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	bf0c      	ite	eq
 8019da8:	2301      	moveq	r3, #1
 8019daa:	2300      	movne	r3, #0
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d00a      	beq.n	8019dc8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8019db2:	2300      	movs	r3, #0
 8019db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019db6:	f107 0218 	add.w	r2, r7, #24
 8019dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019dbe:	4619      	mov	r1, r3
 8019dc0:	68f8      	ldr	r0, [r7, #12]
 8019dc2:	f7f8 f8e7 	bl	8011f94 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019dc6:	e019      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8019dc8:	f107 0210 	add.w	r2, r7, #16
 8019dcc:	f107 0310 	add.w	r3, r7, #16
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	68f8      	ldr	r0, [r7, #12]
 8019dd4:	f7f8 f985 	bl	80120e2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8019dd8:	e010      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	683a      	ldr	r2, [r7, #0]
 8019dde:	68b9      	ldr	r1, [r7, #8]
 8019de0:	4618      	mov	r0, r3
 8019de2:	f000 f978 	bl	801a0d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8019de6:	e009      	b.n	8019dfc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8019de8:	2300      	movs	r3, #0
 8019dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019dec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8019df0:	f107 0318 	add.w	r3, r7, #24
 8019df4:	4619      	mov	r1, r3
 8019df6:	68f8      	ldr	r0, [r7, #12]
 8019df8:	f7f8 f9ae 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8019dfc:	68f8      	ldr	r0, [r7, #12]
 8019dfe:	3734      	adds	r7, #52	; 0x34
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd90      	pop	{r4, r7, pc}

08019e04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8019e0c:	6878      	ldr	r0, [r7, #4]
 8019e0e:	f000 fa15 	bl	801a23c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8019e12:	4602      	mov	r2, r0
 8019e14:	f107 030c 	add.w	r3, r7, #12
 8019e18:	4611      	mov	r1, r2
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f000 f86b 	bl	8019ef6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8019e20:	4603      	mov	r3, r0
      }
 8019e22:	4618      	mov	r0, r3
 8019e24:	3710      	adds	r7, #16
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}

08019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019e2a:	b480      	push	{r7}
 8019e2c:	b083      	sub	sp, #12
 8019e2e:	af00      	add	r7, sp, #0
 8019e30:	6078      	str	r0, [r7, #4]
 8019e32:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	683a      	ldr	r2, [r7, #0]
 8019e38:	601a      	str	r2, [r3, #0]
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	370c      	adds	r7, #12
 8019e40:	46bd      	mov	sp, r7
 8019e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e46:	4770      	bx	lr

08019e48 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019e48:	b590      	push	{r4, r7, lr}
 8019e4a:	b083      	sub	sp, #12
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
 8019e50:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8019e52:	6878      	ldr	r0, [r7, #4]
 8019e54:	f000 fa00 	bl	801a258 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8019e58:	4604      	mov	r4, r0
 8019e5a:	6838      	ldr	r0, [r7, #0]
 8019e5c:	f7ff fd5c 	bl	8019918 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 8019e60:	4603      	mov	r3, r0
 8019e62:	4619      	mov	r1, r3
 8019e64:	4620      	mov	r0, r4
 8019e66:	f000 fa02 	bl	801a26e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8019e6a:	bf00      	nop
 8019e6c:	370c      	adds	r7, #12
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd90      	pop	{r4, r7, pc}

08019e72 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019e72:	b580      	push	{r7, lr}
 8019e74:	b082      	sub	sp, #8
 8019e76:	af00      	add	r7, sp, #0
 8019e78:	6078      	str	r0, [r7, #4]
 8019e7a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	f000 f9eb 	bl	801a258 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8019e82:	4603      	mov	r3, r0
 8019e84:	2201      	movs	r2, #1
 8019e86:	6839      	ldr	r1, [r7, #0]
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f000 f9fc 	bl	801a286 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 8019e8e:	bf00      	nop
 8019e90:	3708      	adds	r7, #8
 8019e92:	46bd      	mov	sp, r7
 8019e94:	bd80      	pop	{r7, pc}

08019e96 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8019e96:	b480      	push	{r7}
 8019e98:	b083      	sub	sp, #12
 8019e9a:	af00      	add	r7, sp, #0
 8019e9c:	6078      	str	r0, [r7, #4]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	370c      	adds	r7, #12
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eaa:	4770      	bx	lr

08019eac <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8019eac:	b480      	push	{r7}
 8019eae:	b083      	sub	sp, #12
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	4618      	mov	r0, r3
 8019eb8:	370c      	adds	r7, #12
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec0:	4770      	bx	lr

08019ec2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8019ec2:	b580      	push	{r7, lr}
 8019ec4:	b082      	sub	sp, #8
 8019ec6:	af00      	add	r7, sp, #0
 8019ec8:	6078      	str	r0, [r7, #4]
 8019eca:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8019ecc:	6839      	ldr	r1, [r7, #0]
 8019ece:	6878      	ldr	r0, [r7, #4]
 8019ed0:	f000 f9f8 	bl	801a2c4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	4618      	mov	r0, r3
 8019ed8:	3708      	adds	r7, #8
 8019eda:	46bd      	mov	sp, r7
 8019edc:	bd80      	pop	{r7, pc}

08019ede <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8019ede:	b480      	push	{r7}
 8019ee0:	b083      	sub	sp, #12
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	6078      	str	r0, [r7, #4]
 8019ee6:	6039      	str	r1, [r7, #0]
      { }
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	4618      	mov	r0, r3
 8019eec:	370c      	adds	r7, #12
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef4:	4770      	bx	lr

08019ef6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 8019ef6:	b480      	push	{r7}
 8019ef8:	b083      	sub	sp, #12
 8019efa:	af00      	add	r7, sp, #0
 8019efc:	6078      	str	r0, [r7, #4]
 8019efe:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8019f00:	683b      	ldr	r3, [r7, #0]
 8019f02:	4618      	mov	r0, r3
 8019f04:	370c      	adds	r7, #12
 8019f06:	46bd      	mov	sp, r7
 8019f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f0c:	4770      	bx	lr

08019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019f0e:	b480      	push	{r7}
 8019f10:	b083      	sub	sp, #12
 8019f12:	af00      	add	r7, sp, #0
 8019f14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	4618      	mov	r0, r3
 8019f1a:	370c      	adds	r7, #12
 8019f1c:	46bd      	mov	sp, r7
 8019f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f22:	4770      	bx	lr

08019f24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019f24:	b5b0      	push	{r4, r5, r7, lr}
 8019f26:	b088      	sub	sp, #32
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	60f8      	str	r0, [r7, #12]
 8019f2c:	60b9      	str	r1, [r7, #8]
 8019f2e:	607a      	str	r2, [r7, #4]
 8019f30:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019f32:	68bb      	ldr	r3, [r7, #8]
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d11a      	bne.n	8019f6e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019f38:	68f8      	ldr	r0, [r7, #12]
 8019f3a:	f000 f86e 	bl	801a01a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8019f3e:	4602      	mov	r2, r0
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	4293      	cmp	r3, r2
 8019f44:	d013      	beq.n	8019f6e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019f46:	68fc      	ldr	r4, [r7, #12]
 8019f48:	f107 0310 	add.w	r3, r7, #16
 8019f4c:	6839      	ldr	r1, [r7, #0]
 8019f4e:	4618      	mov	r0, r3
 8019f50:	f7ff ffd1 	bl	8019ef6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8019f54:	4605      	mov	r5, r0
 8019f56:	6878      	ldr	r0, [r7, #4]
 8019f58:	f000 f8b1 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	461a      	mov	r2, r3
 8019f60:	4629      	mov	r1, r5
 8019f62:	4620      	mov	r0, r4
 8019f64:	f7ff fcfa 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d001      	beq.n	8019f72 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	e000      	b.n	8019f74 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8019f72:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019f74:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8019f76:	6838      	ldr	r0, [r7, #0]
 8019f78:	f7ff ffc9 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	4619      	mov	r1, r3
 8019f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019f82:	f000 f9ab 	bl	801a2dc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8019f86:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8019f8c:	7ff8      	ldrb	r0, [r7, #31]
 8019f8e:	687a      	ldr	r2, [r7, #4]
 8019f90:	69b9      	ldr	r1, [r7, #24]
 8019f92:	f000 fc72 	bl	801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	695b      	ldr	r3, [r3, #20]
 8019f9a:	1c5a      	adds	r2, r3, #1
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8019fa0:	f107 0314 	add.w	r3, r7, #20
 8019fa4:	69b9      	ldr	r1, [r7, #24]
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	f7ff ff3f 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019fac:	697b      	ldr	r3, [r7, #20]
      }
 8019fae:	4618      	mov	r0, r3
 8019fb0:	3720      	adds	r7, #32
 8019fb2:	46bd      	mov	sp, r7
 8019fb4:	bdb0      	pop	{r4, r5, r7, pc}

08019fb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019fb6:	b590      	push	{r4, r7, lr}
 8019fb8:	b083      	sub	sp, #12
 8019fba:	af00      	add	r7, sp, #0
 8019fbc:	6078      	str	r0, [r7, #4]
 8019fbe:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8019fc0:	6878      	ldr	r0, [r7, #4]
 8019fc2:	f000 f99f 	bl	801a304 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	6838      	ldr	r0, [r7, #0]
 8019fca:	f7ff fdea 	bl	8019ba2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	4619      	mov	r1, r3
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f000 f9a1 	bl	801a31a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 8019fd8:	bf00      	nop
 8019fda:	370c      	adds	r7, #12
 8019fdc:	46bd      	mov	sp, r7
 8019fde:	bd90      	pop	{r4, r7, pc}

08019fe0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b082      	sub	sp, #8
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
 8019fe8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8019fea:	6878      	ldr	r0, [r7, #4]
 8019fec:	f000 f98a 	bl	801a304 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	2201      	movs	r2, #1
 8019ff4:	6839      	ldr	r1, [r7, #0]
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f000 f99b 	bl	801a332 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 8019ffc:	bf00      	nop
 8019ffe:	3708      	adds	r7, #8
 801a000:	46bd      	mov	sp, r7
 801a002:	bd80      	pop	{r7, pc}

0801a004 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801a004:	b480      	push	{r7}
 801a006:	b083      	sub	sp, #12
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	4618      	mov	r0, r3
 801a010:	370c      	adds	r7, #12
 801a012:	46bd      	mov	sp, r7
 801a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a018:	4770      	bx	lr

0801a01a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801a01a:	b480      	push	{r7}
 801a01c:	b083      	sub	sp, #12
 801a01e:	af00      	add	r7, sp, #0
 801a020:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	3304      	adds	r3, #4
 801a026:	4618      	mov	r0, r3
 801a028:	370c      	adds	r7, #12
 801a02a:	46bd      	mov	sp, r7
 801a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a030:	4770      	bx	lr

0801a032 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 801a032:	b580      	push	{r7, lr}
 801a034:	b082      	sub	sp, #8
 801a036:	af00      	add	r7, sp, #0
 801a038:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a03a:	6878      	ldr	r0, [r7, #4]
 801a03c:	f000 f998 	bl	801a370 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 801a040:	4603      	mov	r3, r0
 801a042:	4618      	mov	r0, r3
 801a044:	3708      	adds	r7, #8
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}

0801a04a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 801a04a:	b580      	push	{r7, lr}
 801a04c:	b082      	sub	sp, #8
 801a04e:	af00      	add	r7, sp, #0
 801a050:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801a052:	6878      	ldr	r0, [r7, #4]
 801a054:	f000 f956 	bl	801a304 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 801a058:	4603      	mov	r3, r0
 801a05a:	2101      	movs	r1, #1
 801a05c:	4618      	mov	r0, r3
 801a05e:	f000 f992 	bl	801a386 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 801a062:	4603      	mov	r3, r0
 801a064:	4618      	mov	r0, r3
 801a066:	3708      	adds	r7, #8
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}

0801a06c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b084      	sub	sp, #16
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681a      	ldr	r2, [r3, #0]
 801a078:	f107 030c 	add.w	r3, r7, #12
 801a07c:	4611      	mov	r1, r2
 801a07e:	4618      	mov	r0, r3
 801a080:	f7ff fed3 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	4618      	mov	r0, r3
 801a088:	3710      	adds	r7, #16
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}

0801a08e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801a08e:	b480      	push	{r7}
 801a090:	b083      	sub	sp, #12
 801a092:	af00      	add	r7, sp, #0
 801a094:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	695b      	ldr	r3, [r3, #20]
 801a09a:	4618      	mov	r0, r3
 801a09c:	370c      	adds	r7, #12
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a4:	4770      	bx	lr

0801a0a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801a0a6:	b480      	push	{r7}
 801a0a8:	b083      	sub	sp, #12
 801a0aa:	af00      	add	r7, sp, #0
 801a0ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	3310      	adds	r3, #16
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	370c      	adds	r7, #12
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0bc:	4770      	bx	lr

0801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801a0be:	b580      	push	{r7, lr}
 801a0c0:	b082      	sub	sp, #8
 801a0c2:	af00      	add	r7, sp, #0
 801a0c4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801a0c6:	6878      	ldr	r0, [r7, #4]
 801a0c8:	f7ff fe9c 	bl	8019e04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 801a0cc:	4603      	mov	r3, r0
 801a0ce:	4618      	mov	r0, r3
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}

0801a0d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801a0d6:	b590      	push	{r4, r7, lr}
 801a0d8:	b08b      	sub	sp, #44	; 0x2c
 801a0da:	af00      	add	r7, sp, #0
 801a0dc:	60f8      	str	r0, [r7, #12]
 801a0de:	60b9      	str	r1, [r7, #8]
 801a0e0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801a0e2:	68b8      	ldr	r0, [r7, #8]
 801a0e4:	f7ff fc0c 	bl	8019900 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801a0ec:	68b8      	ldr	r0, [r7, #8]
 801a0ee:	f7ff ff94 	bl	801a01a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801a0fc:	69bb      	ldr	r3, [r7, #24]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d020      	beq.n	801a144 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801a102:	69bb      	ldr	r3, [r7, #24]
 801a104:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801a106:	68bc      	ldr	r4, [r7, #8]
 801a108:	69bb      	ldr	r3, [r7, #24]
 801a10a:	4618      	mov	r0, r3
 801a10c:	f7ff fe7a 	bl	8019e04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 801a110:	4603      	mov	r3, r0
 801a112:	461a      	mov	r2, r3
 801a114:	6879      	ldr	r1, [r7, #4]
 801a116:	4620      	mov	r0, r4
 801a118:	f7ff fc20 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 801a11c:	4603      	mov	r3, r0
 801a11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801a122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a126:	2b00      	cmp	r3, #0
 801a128:	d005      	beq.n	801a136 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 801a12a:	69bb      	ldr	r3, [r7, #24]
 801a12c:	4618      	mov	r0, r3
 801a12e:	f7ff fd0f 	bl	8019b50 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 801a132:	4603      	mov	r3, r0
 801a134:	e004      	b.n	801a140 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 801a136:	69bb      	ldr	r3, [r7, #24]
 801a138:	4618      	mov	r0, r3
 801a13a:	f7ff fcfd 	bl	8019b38 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 801a13e:	4603      	mov	r3, r0
 801a140:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801a142:	e7db      	b.n	801a0fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801a144:	697a      	ldr	r2, [r7, #20]
 801a146:	f107 0310 	add.w	r3, r7, #16
 801a14a:	4611      	mov	r1, r2
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7ff fe6c 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801a152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a156:	2b00      	cmp	r3, #0
 801a158:	d01d      	beq.n	801a196 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801a15a:	68b8      	ldr	r0, [r7, #8]
 801a15c:	f000 f936 	bl	801a3cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 801a160:	4603      	mov	r3, r0
 801a162:	61fb      	str	r3, [r7, #28]
 801a164:	f107 021c 	add.w	r2, r7, #28
 801a168:	f107 0310 	add.w	r3, r7, #16
 801a16c:	4611      	mov	r1, r2
 801a16e:	4618      	mov	r0, r3
 801a170:	f7ff fbe0 	bl	8019934 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 801a174:	4603      	mov	r3, r0
 801a176:	2b00      	cmp	r3, #0
 801a178:	d008      	beq.n	801a18c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801a17a:	f107 0214 	add.w	r2, r7, #20
 801a17e:	f107 0318 	add.w	r3, r7, #24
 801a182:	4619      	mov	r1, r3
 801a184:	68f8      	ldr	r0, [r7, #12]
 801a186:	f000 f932 	bl	801a3ee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 801a18a:	e025      	b.n	801a1d8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801a18c:	f107 0310 	add.w	r3, r7, #16
 801a190:	4618      	mov	r0, r3
 801a192:	f000 f831 	bl	801a1f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801a196:	68bc      	ldr	r4, [r7, #8]
 801a198:	693b      	ldr	r3, [r7, #16]
 801a19a:	4618      	mov	r0, r3
 801a19c:	f7ff ff8f 	bl	801a0be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a1a0:	4603      	mov	r3, r0
 801a1a2:	687a      	ldr	r2, [r7, #4]
 801a1a4:	4619      	mov	r1, r3
 801a1a6:	4620      	mov	r0, r4
 801a1a8:	f7ff fbd8 	bl	801995c <_ZNKSt4lessImEclERKmS2_>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d008      	beq.n	801a1c4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801a1b2:	f107 0214 	add.w	r2, r7, #20
 801a1b6:	f107 0318 	add.w	r3, r7, #24
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	68f8      	ldr	r0, [r7, #12]
 801a1be:	f000 f916 	bl	801a3ee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 801a1c2:	e009      	b.n	801a1d8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	623b      	str	r3, [r7, #32]
 801a1c8:	f107 0220 	add.w	r2, r7, #32
 801a1cc:	f107 0310 	add.w	r3, r7, #16
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	68f8      	ldr	r0, [r7, #12]
 801a1d4:	f7f7 ffc0 	bl	8012158 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801a1d8:	68f8      	ldr	r0, [r7, #12]
 801a1da:	372c      	adds	r7, #44	; 0x2c
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd90      	pop	{r4, r7, pc}

0801a1e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801a1e0:	b480      	push	{r7}
 801a1e2:	b083      	sub	sp, #12
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	330c      	adds	r3, #12
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	370c      	adds	r7, #12
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f6:	4770      	bx	lr

0801a1f8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4618      	mov	r0, r3
 801a206:	f000 fb36 	bl	801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801a20a:	4602      	mov	r2, r0
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	601a      	str	r2, [r3, #0]
	return *this;
 801a210:	687b      	ldr	r3, [r7, #4]
      }
 801a212:	4618      	mov	r0, r3
 801a214:	3708      	adds	r7, #8
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}

0801a21a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801a21a:	b580      	push	{r7, lr}
 801a21c:	b082      	sub	sp, #8
 801a21e:	af00      	add	r7, sp, #0
 801a220:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4618      	mov	r0, r3
 801a228:	f000 fb23 	bl	801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801a22c:	4602      	mov	r2, r0
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	601a      	str	r2, [r3, #0]
	return *this;
 801a232:	687b      	ldr	r3, [r7, #4]
      }
 801a234:	4618      	mov	r0, r3
 801a236:	3708      	adds	r7, #8
 801a238:	46bd      	mov	sp, r7
 801a23a:	bd80      	pop	{r7, pc}

0801a23c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 801a23c:	b580      	push	{r7, lr}
 801a23e:	b082      	sub	sp, #8
 801a240:	af00      	add	r7, sp, #0
 801a242:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	3310      	adds	r3, #16
 801a248:	4618      	mov	r0, r3
 801a24a:	f000 f8e9 	bl	801a420 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 801a24e:	4603      	mov	r3, r0
 801a250:	4618      	mov	r0, r3
 801a252:	3708      	adds	r7, #8
 801a254:	46bd      	mov	sp, r7
 801a256:	bd80      	pop	{r7, pc}

0801a258 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801a258:	b480      	push	{r7}
 801a25a:	b083      	sub	sp, #12
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	4618      	mov	r0, r3
 801a264:	370c      	adds	r7, #12
 801a266:	46bd      	mov	sp, r7
 801a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a26c:	4770      	bx	lr

0801a26e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801a26e:	b580      	push	{r7, lr}
 801a270:	b082      	sub	sp, #8
 801a272:	af00      	add	r7, sp, #0
 801a274:	6078      	str	r0, [r7, #4]
 801a276:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801a278:	6838      	ldr	r0, [r7, #0]
 801a27a:	f000 f8dd 	bl	801a438 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 801a27e:	bf00      	nop
 801a280:	3708      	adds	r7, #8
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}

0801a286 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a286:	b580      	push	{r7, lr}
 801a288:	b088      	sub	sp, #32
 801a28a:	af00      	add	r7, sp, #0
 801a28c:	60f8      	str	r0, [r7, #12]
 801a28e:	60b9      	str	r1, [r7, #8]
 801a290:	607a      	str	r2, [r7, #4]
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	61fb      	str	r3, [r7, #28]
 801a296:	68bb      	ldr	r3, [r7, #8]
 801a298:	61bb      	str	r3, [r7, #24]
 801a29a:	687b      	ldr	r3, [r7, #4]
 801a29c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801a29e:	f7f3 fecb 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d003      	beq.n	801a2b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 801a2a8:	69b8      	ldr	r0, [r7, #24]
 801a2aa:	f000 fa79 	bl	801a7a0 <_ZdlPv>
	    return;
 801a2ae:	e005      	b.n	801a2bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801a2b0:	697a      	ldr	r2, [r7, #20]
 801a2b2:	69b9      	ldr	r1, [r7, #24]
 801a2b4:	69f8      	ldr	r0, [r7, #28]
 801a2b6:	f000 f900 	bl	801a4ba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 801a2ba:	bf00      	nop
 801a2bc:	bf00      	nop
 801a2be:	3720      	adds	r7, #32
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}

0801a2c4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801a2c4:	b480      	push	{r7}
 801a2c6:	b083      	sub	sp, #12
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
 801a2cc:	6039      	str	r1, [r7, #0]
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	4618      	mov	r0, r3
 801a2d2:	370c      	adds	r7, #12
 801a2d4:	46bd      	mov	sp, r7
 801a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2da:	4770      	bx	lr

0801a2dc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 801a2dc:	b590      	push	{r4, r7, lr}
 801a2de:	b083      	sub	sp, #12
 801a2e0:	af00      	add	r7, sp, #0
 801a2e2:	6078      	str	r0, [r7, #4]
 801a2e4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681c      	ldr	r4, [r3, #0]
 801a2ea:	6838      	ldr	r0, [r7, #0]
 801a2ec:	f7ff fe0f 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a2f0:	4603      	mov	r3, r0
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	4620      	mov	r0, r4
 801a2f6:	f000 f8a9 	bl	801a44c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 801a2fa:	4603      	mov	r3, r0
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	370c      	adds	r7, #12
 801a300:	46bd      	mov	sp, r7
 801a302:	bd90      	pop	{r4, r7, pc}

0801a304 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801a304:	b480      	push	{r7}
 801a306:	b083      	sub	sp, #12
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	4618      	mov	r0, r3
 801a310:	370c      	adds	r7, #12
 801a312:	46bd      	mov	sp, r7
 801a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a318:	4770      	bx	lr

0801a31a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801a31a:	b580      	push	{r7, lr}
 801a31c:	b082      	sub	sp, #8
 801a31e:	af00      	add	r7, sp, #0
 801a320:	6078      	str	r0, [r7, #4]
 801a322:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801a324:	6838      	ldr	r0, [r7, #0]
 801a326:	f000 f8a8 	bl	801a47a <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 801a32a:	bf00      	nop
 801a32c:	3708      	adds	r7, #8
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}

0801a332 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a332:	b580      	push	{r7, lr}
 801a334:	b088      	sub	sp, #32
 801a336:	af00      	add	r7, sp, #0
 801a338:	60f8      	str	r0, [r7, #12]
 801a33a:	60b9      	str	r1, [r7, #8]
 801a33c:	607a      	str	r2, [r7, #4]
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	61fb      	str	r3, [r7, #28]
 801a342:	68bb      	ldr	r3, [r7, #8]
 801a344:	61bb      	str	r3, [r7, #24]
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801a34a:	f7f3 fe75 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801a34e:	4603      	mov	r3, r0
 801a350:	2b00      	cmp	r3, #0
 801a352:	d003      	beq.n	801a35c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 801a354:	69b8      	ldr	r0, [r7, #24]
 801a356:	f000 fa23 	bl	801a7a0 <_ZdlPv>
	    return;
 801a35a:	e005      	b.n	801a368 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801a35c:	697a      	ldr	r2, [r7, #20]
 801a35e:	69b9      	ldr	r1, [r7, #24]
 801a360:	69f8      	ldr	r0, [r7, #28]
 801a362:	f000 f8db 	bl	801a51c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 801a366:	bf00      	nop
 801a368:	bf00      	nop
 801a36a:	3720      	adds	r7, #32
 801a36c:	46bd      	mov	sp, r7
 801a36e:	bd80      	pop	{r7, pc}

0801a370 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 801a370:	b480      	push	{r7}
 801a372:	b083      	sub	sp, #12
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	4618      	mov	r0, r3
 801a37c:	370c      	adds	r7, #12
 801a37e:	46bd      	mov	sp, r7
 801a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a384:	4770      	bx	lr

0801a386 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 801a386:	b580      	push	{r7, lr}
 801a388:	b084      	sub	sp, #16
 801a38a:	af00      	add	r7, sp, #0
 801a38c:	6078      	str	r0, [r7, #4]
 801a38e:	6039      	str	r1, [r7, #0]
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	60fb      	str	r3, [r7, #12]
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801a398:	f7f3 fe4e 	bl	800e038 <_ZSt21is_constant_evaluatedv>
 801a39c:	4603      	mov	r3, r0
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d009      	beq.n	801a3b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801a3a2:	68ba      	ldr	r2, [r7, #8]
 801a3a4:	4613      	mov	r3, r2
 801a3a6:	005b      	lsls	r3, r3, #1
 801a3a8:	4413      	add	r3, r2
 801a3aa:	00db      	lsls	r3, r3, #3
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f000 f9fb 	bl	801a7a8 <_Znwj>
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	e006      	b.n	801a3c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	68b9      	ldr	r1, [r7, #8]
 801a3ba:	68f8      	ldr	r0, [r7, #12]
 801a3bc:	f000 f8c0 	bl	801a540 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	bf00      	nop
      { return __a.allocate(__n); }
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	3710      	adds	r7, #16
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}

0801a3cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b084      	sub	sp, #16
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	68da      	ldr	r2, [r3, #12]
 801a3d8:	f107 030c 	add.w	r3, r7, #12
 801a3dc:	4611      	mov	r1, r2
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f7ff fd23 	bl	8019e2a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	3710      	adds	r7, #16
 801a3ea:	46bd      	mov	sp, r7
 801a3ec:	bd80      	pop	{r7, pc}

0801a3ee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801a3ee:	b580      	push	{r7, lr}
 801a3f0:	b084      	sub	sp, #16
 801a3f2:	af00      	add	r7, sp, #0
 801a3f4:	60f8      	str	r0, [r7, #12]
 801a3f6:	60b9      	str	r1, [r7, #8]
 801a3f8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801a3fa:	68b8      	ldr	r0, [r7, #8]
 801a3fc:	f000 f847 	bl	801a48e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801a400:	4603      	mov	r3, r0
 801a402:	681a      	ldr	r2, [r3, #0]
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	601a      	str	r2, [r3, #0]
 801a408:	6878      	ldr	r0, [r7, #4]
 801a40a:	f7f8 fd74 	bl	8012ef6 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801a40e:	4603      	mov	r3, r0
 801a410:	681a      	ldr	r2, [r3, #0]
 801a412:	68fb      	ldr	r3, [r7, #12]
 801a414:	605a      	str	r2, [r3, #4]
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	4618      	mov	r0, r3
 801a41a:	3710      	adds	r7, #16
 801a41c:	46bd      	mov	sp, r7
 801a41e:	bd80      	pop	{r7, pc}

0801a420 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801a420:	b580      	push	{r7, lr}
 801a422:	b082      	sub	sp, #8
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	f000 f83b 	bl	801a4a4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 801a42e:	4603      	mov	r3, r0
 801a430:	4618      	mov	r0, r3
 801a432:	3708      	adds	r7, #8
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801a438:	b480      	push	{r7}
 801a43a:	b083      	sub	sp, #12
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
    }
 801a440:	bf00      	nop
 801a442:	370c      	adds	r7, #12
 801a444:	46bd      	mov	sp, r7
 801a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a44a:	4770      	bx	lr

0801a44c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b084      	sub	sp, #16
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
 801a454:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801a456:	6878      	ldr	r0, [r7, #4]
 801a458:	f7ff fdf7 	bl	801a04a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 801a45c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801a45e:	6838      	ldr	r0, [r7, #0]
 801a460:	f7ff fd55 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a464:	4603      	mov	r3, r0
 801a466:	461a      	mov	r2, r3
 801a468:	68f9      	ldr	r1, [r7, #12]
 801a46a:	6878      	ldr	r0, [r7, #4]
 801a46c:	f000 f836 	bl	801a4dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 801a470:	68fb      	ldr	r3, [r7, #12]
	}
 801a472:	4618      	mov	r0, r3
 801a474:	3710      	adds	r7, #16
 801a476:	46bd      	mov	sp, r7
 801a478:	bd80      	pop	{r7, pc}

0801a47a <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 801a47a:	b480      	push	{r7}
 801a47c:	b083      	sub	sp, #12
 801a47e:	af00      	add	r7, sp, #0
 801a480:	6078      	str	r0, [r7, #4]
    }
 801a482:	bf00      	nop
 801a484:	370c      	adds	r7, #12
 801a486:	46bd      	mov	sp, r7
 801a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a48c:	4770      	bx	lr

0801a48e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801a48e:	b480      	push	{r7}
 801a490:	b083      	sub	sp, #12
 801a492:	af00      	add	r7, sp, #0
 801a494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	4618      	mov	r0, r3
 801a49a:	370c      	adds	r7, #12
 801a49c:	46bd      	mov	sp, r7
 801a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4a2:	4770      	bx	lr

0801a4a4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 801a4a4:	b480      	push	{r7}
 801a4a6:	b083      	sub	sp, #12
 801a4a8:	af00      	add	r7, sp, #0
 801a4aa:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	370c      	adds	r7, #12
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4b8:	4770      	bx	lr

0801a4ba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 801a4ba:	b580      	push	{r7, lr}
 801a4bc:	b084      	sub	sp, #16
 801a4be:	af00      	add	r7, sp, #0
 801a4c0:	60f8      	str	r0, [r7, #12]
 801a4c2:	60b9      	str	r1, [r7, #8]
 801a4c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	2234      	movs	r2, #52	; 0x34
 801a4ca:	fb02 f303 	mul.w	r3, r2, r3
 801a4ce:	4619      	mov	r1, r3
 801a4d0:	68b8      	ldr	r0, [r7, #8]
 801a4d2:	f000 f967 	bl	801a7a4 <_ZdlPvj>
      }
 801a4d6:	3710      	adds	r7, #16
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bd80      	pop	{r7, pc}

0801a4dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801a4dc:	b5b0      	push	{r4, r5, r7, lr}
 801a4de:	b084      	sub	sp, #16
 801a4e0:	af00      	add	r7, sp, #0
 801a4e2:	60f8      	str	r0, [r7, #12]
 801a4e4:	60b9      	str	r1, [r7, #8]
 801a4e6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 801a4e8:	68bb      	ldr	r3, [r7, #8]
 801a4ea:	4619      	mov	r1, r3
 801a4ec:	2018      	movs	r0, #24
 801a4ee:	f7f3 fdab 	bl	800e048 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801a4f2:	68f8      	ldr	r0, [r7, #12]
 801a4f4:	f7ff ff06 	bl	801a304 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 801a4f8:	4604      	mov	r4, r0
 801a4fa:	68b8      	ldr	r0, [r7, #8]
 801a4fc:	f7ff fb51 	bl	8019ba2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 801a500:	4605      	mov	r5, r0
 801a502:	6878      	ldr	r0, [r7, #4]
 801a504:	f7ff fd03 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a508:	4603      	mov	r3, r0
 801a50a:	461a      	mov	r2, r3
 801a50c:	4629      	mov	r1, r5
 801a50e:	4620      	mov	r0, r4
 801a510:	f000 f852 	bl	801a5b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 801a514:	bf00      	nop
 801a516:	3710      	adds	r7, #16
 801a518:	46bd      	mov	sp, r7
 801a51a:	bdb0      	pop	{r4, r5, r7, pc}

0801a51c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b084      	sub	sp, #16
 801a520:	af00      	add	r7, sp, #0
 801a522:	60f8      	str	r0, [r7, #12]
 801a524:	60b9      	str	r1, [r7, #8]
 801a526:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801a528:	687a      	ldr	r2, [r7, #4]
 801a52a:	4613      	mov	r3, r2
 801a52c:	005b      	lsls	r3, r3, #1
 801a52e:	4413      	add	r3, r2
 801a530:	00db      	lsls	r3, r3, #3
 801a532:	4619      	mov	r1, r3
 801a534:	68b8      	ldr	r0, [r7, #8]
 801a536:	f000 f935 	bl	801a7a4 <_ZdlPvj>
      }
 801a53a:	3710      	adds	r7, #16
 801a53c:	46bd      	mov	sp, r7
 801a53e:	bd80      	pop	{r7, pc}

0801a540 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a540:	b580      	push	{r7, lr}
 801a542:	b084      	sub	sp, #16
 801a544:	af00      	add	r7, sp, #0
 801a546:	60f8      	str	r0, [r7, #12]
 801a548:	60b9      	str	r1, [r7, #8]
 801a54a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801a54c:	68f8      	ldr	r0, [r7, #12]
 801a54e:	f000 f845 	bl	801a5dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 801a552:	4602      	mov	r2, r0
 801a554:	68bb      	ldr	r3, [r7, #8]
 801a556:	4293      	cmp	r3, r2
 801a558:	bf8c      	ite	hi
 801a55a:	2301      	movhi	r3, #1
 801a55c:	2300      	movls	r3, #0
 801a55e:	b2db      	uxtb	r3, r3
 801a560:	2b00      	cmp	r3, #0
 801a562:	d001      	beq.n	801a568 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801a564:	f000 f9e4 	bl	801a930 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801a568:	68ba      	ldr	r2, [r7, #8]
 801a56a:	4613      	mov	r3, r2
 801a56c:	005b      	lsls	r3, r3, #1
 801a56e:	4413      	add	r3, r2
 801a570:	00db      	lsls	r3, r3, #3
 801a572:	4618      	mov	r0, r3
 801a574:	f000 f918 	bl	801a7a8 <_Znwj>
 801a578:	4603      	mov	r3, r0
 801a57a:	bf00      	nop
      }
 801a57c:	4618      	mov	r0, r3
 801a57e:	3710      	adds	r7, #16
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}

0801a584 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801a584:	b5b0      	push	{r4, r5, r7, lr}
 801a586:	b082      	sub	sp, #8
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801a58e:	6838      	ldr	r0, [r7, #0]
 801a590:	f7ff fcbd 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a594:	4605      	mov	r5, r0
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	4619      	mov	r1, r3
 801a59a:	2008      	movs	r0, #8
 801a59c:	f7f3 fd54 	bl	800e048 <_ZnwjPv>
 801a5a0:	4604      	mov	r4, r0
 801a5a2:	4623      	mov	r3, r4
 801a5a4:	462a      	mov	r2, r5
 801a5a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a5aa:	e883 0003 	stmia.w	r3, {r0, r1}
 801a5ae:	4623      	mov	r3, r4
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	3708      	adds	r7, #8
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bdb0      	pop	{r4, r5, r7, pc}

0801a5b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801a5b8:	b580      	push	{r7, lr}
 801a5ba:	b084      	sub	sp, #16
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	60f8      	str	r0, [r7, #12]
 801a5c0:	60b9      	str	r1, [r7, #8]
 801a5c2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801a5c4:	6878      	ldr	r0, [r7, #4]
 801a5c6:	f7ff fca2 	bl	8019f0e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	4619      	mov	r1, r3
 801a5ce:	68b8      	ldr	r0, [r7, #8]
 801a5d0:	f7ff ffd8 	bl	801a584 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 801a5d4:	bf00      	nop
 801a5d6:	3710      	adds	r7, #16
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}

0801a5dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a5dc:	b480      	push	{r7}
 801a5de:	b083      	sub	sp, #12
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a5e4:	4b03      	ldr	r3, [pc, #12]	; (801a5f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 801a5e6:	4618      	mov	r0, r3
 801a5e8:	370c      	adds	r7, #12
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr
 801a5f2:	bf00      	nop
 801a5f4:	05555555 	.word	0x05555555

0801a5f8 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b0d8      	sub	sp, #352	; 0x160
 801a5fc:	af02      	add	r7, sp, #8
 801a5fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a602:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a606:	6018      	str	r0, [r3, #0]
 801a608:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a60c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a610:	6019      	str	r1, [r3, #0]
 801a612:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a616:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	2b01      	cmp	r3, #1
 801a61e:	f040 8088 	bne.w	801a732 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 801a622:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a626:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a630:	4293      	cmp	r3, r2
 801a632:	d17e      	bne.n	801a732 <_Z41__static_initialization_and_destruction_0ii+0x13a>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801a634:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a638:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801a63c:	4a4c      	ldr	r2, [pc, #304]	; (801a770 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 801a63e:	4618      	mov	r0, r3
 801a640:	4611      	mov	r1, r2
 801a642:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a646:	461a      	mov	r2, r3
 801a648:	f000 fa08 	bl	801aa5c <memcpy>
 801a64c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a650:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801a654:	f107 0214 	add.w	r2, r7, #20
 801a658:	601a      	str	r2, [r3, #0]
 801a65a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a65e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801a662:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a666:	605a      	str	r2, [r3, #4]
 801a668:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a66c:	4618      	mov	r0, r3
 801a66e:	f7f4 ff5b 	bl	800f528 <_ZNSaIhEC1Ev>
 801a672:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a676:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801a67a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 801a67e:	ca06      	ldmia	r2, {r1, r2}
 801a680:	483c      	ldr	r0, [pc, #240]	; (801a774 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801a682:	f7f4 ff68 	bl	800f556 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801a686:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7f4 ff58 	bl	800f540 <_ZNSaIhED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 801a690:	4b39      	ldr	r3, [pc, #228]	; (801a778 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a692:	461a      	mov	r2, r3
 801a694:	2300      	movs	r3, #0
 801a696:	6013      	str	r3, [r2, #0]
 801a698:	6053      	str	r3, [r2, #4]
 801a69a:	6093      	str	r3, [r2, #8]
 801a69c:	60d3      	str	r3, [r2, #12]
 801a69e:	6113      	str	r3, [r2, #16]
 801a6a0:	6153      	str	r3, [r2, #20]
 801a6a2:	4835      	ldr	r0, [pc, #212]	; (801a778 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a6a4:	f7fe ff67 	bl	8019576 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 801a6a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801a6ac:	2230      	movs	r2, #48	; 0x30
 801a6ae:	2100      	movs	r1, #0
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f000 f9fb 	bl	801aaac <memset>
 801a6b6:	2301      	movs	r3, #1
 801a6b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801a6bc:	2302      	movs	r3, #2
 801a6be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a6c2:	2304      	movs	r3, #4
 801a6c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a6c8:	2304      	movs	r3, #4
 801a6ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801a6ce:	2308      	movs	r3, #8
 801a6d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a6d4:	2308      	movs	r3, #8
 801a6d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a6da:	230c      	movs	r3, #12
 801a6dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a6e0:	2310      	movs	r3, #16
 801a6e2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a6e6:	2310      	movs	r3, #16
 801a6e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a6ec:	2320      	movs	r3, #32
 801a6ee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a6f2:	2314      	movs	r3, #20
 801a6f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a6f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801a6fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801a700:	2306      	movs	r3, #6
 801a702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801a706:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a70a:	4618      	mov	r0, r3
 801a70c:	f7fe ffae 	bl	801966c <_ZNSaISt4pairIKmmEEC1Ev>
 801a710:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801a714:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a718:	9300      	str	r3, [sp, #0]
 801a71a:	4613      	mov	r3, r2
 801a71c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801a720:	ca06      	ldmia	r2, {r1, r2}
 801a722:	4816      	ldr	r0, [pc, #88]	; (801a77c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801a724:	f7fe ffb9 	bl	801969a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 801a728:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7fe ffa9 	bl	8019684 <_ZNSaISt4pairIKmmEED1Ev>
 801a732:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a736:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d111      	bne.n	801a764 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 801a740:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a744:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a74e:	4293      	cmp	r3, r2
 801a750:	d108      	bne.n	801a764 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 801a752:	480a      	ldr	r0, [pc, #40]	; (801a77c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801a754:	f7fe ff29 	bl	80195aa <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 801a758:	4807      	ldr	r0, [pc, #28]	; (801a778 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a75a:	f7fe ff19 	bl	8019590 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801a75e:	4805      	ldr	r0, [pc, #20]	; (801a774 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801a760:	f7f4 ff27 	bl	800f5b2 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801a764:	bf00      	nop
 801a766:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	0801b1bc 	.word	0x0801b1bc
 801a774:	24001208 	.word	0x24001208
 801a778:	2400120c 	.word	0x2400120c
 801a77c:	24001224 	.word	0x24001224

0801a780 <_GLOBAL__sub_I__ZN12InputCapture10id_managerE>:
 801a780:	b580      	push	{r7, lr}
 801a782:	af00      	add	r7, sp, #0
 801a784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a788:	2001      	movs	r0, #1
 801a78a:	f7ff ff35 	bl	801a5f8 <_Z41__static_initialization_and_destruction_0ii>
 801a78e:	bd80      	pop	{r7, pc}

0801a790 <_GLOBAL__sub_D__ZN12InputCapture10id_managerE>:
 801a790:	b580      	push	{r7, lr}
 801a792:	af00      	add	r7, sp, #0
 801a794:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a798:	2000      	movs	r0, #0
 801a79a:	f7ff ff2d 	bl	801a5f8 <_Z41__static_initialization_and_destruction_0ii>
 801a79e:	bd80      	pop	{r7, pc}

0801a7a0 <_ZdlPv>:
 801a7a0:	f000 b954 	b.w	801aa4c <free>

0801a7a4 <_ZdlPvj>:
 801a7a4:	f7ff bffc 	b.w	801a7a0 <_ZdlPv>

0801a7a8 <_Znwj>:
 801a7a8:	2801      	cmp	r0, #1
 801a7aa:	bf38      	it	cc
 801a7ac:	2001      	movcc	r0, #1
 801a7ae:	b510      	push	{r4, lr}
 801a7b0:	4604      	mov	r4, r0
 801a7b2:	4620      	mov	r0, r4
 801a7b4:	f000 f942 	bl	801aa3c <malloc>
 801a7b8:	b930      	cbnz	r0, 801a7c8 <_Znwj+0x20>
 801a7ba:	f000 f8bf 	bl	801a93c <_ZSt15get_new_handlerv>
 801a7be:	b908      	cbnz	r0, 801a7c4 <_Znwj+0x1c>
 801a7c0:	f000 f90a 	bl	801a9d8 <abort>
 801a7c4:	4780      	blx	r0
 801a7c6:	e7f4      	b.n	801a7b2 <_Znwj+0xa>
 801a7c8:	bd10      	pop	{r4, pc}

0801a7ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801a7ca:	68c3      	ldr	r3, [r0, #12]
 801a7cc:	689a      	ldr	r2, [r3, #8]
 801a7ce:	60c2      	str	r2, [r0, #12]
 801a7d0:	b510      	push	{r4, lr}
 801a7d2:	b102      	cbz	r2, 801a7d6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801a7d4:	6050      	str	r0, [r2, #4]
 801a7d6:	6842      	ldr	r2, [r0, #4]
 801a7d8:	605a      	str	r2, [r3, #4]
 801a7da:	680c      	ldr	r4, [r1, #0]
 801a7dc:	4284      	cmp	r4, r0
 801a7de:	d103      	bne.n	801a7e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 801a7e0:	600b      	str	r3, [r1, #0]
 801a7e2:	6098      	str	r0, [r3, #8]
 801a7e4:	6043      	str	r3, [r0, #4]
 801a7e6:	bd10      	pop	{r4, pc}
 801a7e8:	6891      	ldr	r1, [r2, #8]
 801a7ea:	4281      	cmp	r1, r0
 801a7ec:	bf0c      	ite	eq
 801a7ee:	6093      	streq	r3, [r2, #8]
 801a7f0:	60d3      	strne	r3, [r2, #12]
 801a7f2:	e7f6      	b.n	801a7e2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0801a7f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 801a7f4:	6883      	ldr	r3, [r0, #8]
 801a7f6:	68da      	ldr	r2, [r3, #12]
 801a7f8:	6082      	str	r2, [r0, #8]
 801a7fa:	b510      	push	{r4, lr}
 801a7fc:	b102      	cbz	r2, 801a800 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801a7fe:	6050      	str	r0, [r2, #4]
 801a800:	6842      	ldr	r2, [r0, #4]
 801a802:	605a      	str	r2, [r3, #4]
 801a804:	680c      	ldr	r4, [r1, #0]
 801a806:	4284      	cmp	r4, r0
 801a808:	d103      	bne.n	801a812 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 801a80a:	600b      	str	r3, [r1, #0]
 801a80c:	60d8      	str	r0, [r3, #12]
 801a80e:	6043      	str	r3, [r0, #4]
 801a810:	bd10      	pop	{r4, pc}
 801a812:	68d1      	ldr	r1, [r2, #12]
 801a814:	4281      	cmp	r1, r0
 801a816:	bf0c      	ite	eq
 801a818:	60d3      	streq	r3, [r2, #12]
 801a81a:	6093      	strne	r3, [r2, #8]
 801a81c:	e7f6      	b.n	801a80c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801a81e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801a81e:	68c3      	ldr	r3, [r0, #12]
 801a820:	b123      	cbz	r3, 801a82c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 801a822:	4618      	mov	r0, r3
 801a824:	689b      	ldr	r3, [r3, #8]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d1fb      	bne.n	801a822 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 801a82a:	4770      	bx	lr
 801a82c:	6843      	ldr	r3, [r0, #4]
 801a82e:	68da      	ldr	r2, [r3, #12]
 801a830:	4282      	cmp	r2, r0
 801a832:	d102      	bne.n	801a83a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 801a834:	4618      	mov	r0, r3
 801a836:	685b      	ldr	r3, [r3, #4]
 801a838:	e7f9      	b.n	801a82e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 801a83a:	68c2      	ldr	r2, [r0, #12]
 801a83c:	4293      	cmp	r3, r2
 801a83e:	bf18      	it	ne
 801a840:	4618      	movne	r0, r3
 801a842:	4770      	bx	lr

0801a844 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801a844:	7803      	ldrb	r3, [r0, #0]
 801a846:	b933      	cbnz	r3, 801a856 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801a848:	6843      	ldr	r3, [r0, #4]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	4283      	cmp	r3, r0
 801a84e:	d102      	bne.n	801a856 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801a850:	68db      	ldr	r3, [r3, #12]
 801a852:	4618      	mov	r0, r3
 801a854:	4770      	bx	lr
 801a856:	6882      	ldr	r2, [r0, #8]
 801a858:	b122      	cbz	r2, 801a864 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 801a85a:	4613      	mov	r3, r2
 801a85c:	68d2      	ldr	r2, [r2, #12]
 801a85e:	2a00      	cmp	r2, #0
 801a860:	d1fb      	bne.n	801a85a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801a862:	e7f6      	b.n	801a852 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801a864:	6843      	ldr	r3, [r0, #4]
 801a866:	689a      	ldr	r2, [r3, #8]
 801a868:	4282      	cmp	r2, r0
 801a86a:	d1f2      	bne.n	801a852 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801a86c:	4618      	mov	r0, r3
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	e7f9      	b.n	801a866 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801a872 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801a872:	f7ff bfd4 	b.w	801a81e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0801a876 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801a876:	f7ff bfe5 	b.w	801a844 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801a87a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801a87a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a87e:	461e      	mov	r6, r3
 801a880:	f103 0804 	add.w	r8, r3, #4
 801a884:	2300      	movs	r3, #0
 801a886:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801a88a:	460c      	mov	r4, r1
 801a88c:	604a      	str	r2, [r1, #4]
 801a88e:	700b      	strb	r3, [r1, #0]
 801a890:	b300      	cbz	r0, 801a8d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 801a892:	4296      	cmp	r6, r2
 801a894:	6091      	str	r1, [r2, #8]
 801a896:	d118      	bne.n	801a8ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801a898:	6071      	str	r1, [r6, #4]
 801a89a:	60f4      	str	r4, [r6, #12]
 801a89c:	2701      	movs	r7, #1
 801a89e:	f04f 0900 	mov.w	r9, #0
 801a8a2:	6873      	ldr	r3, [r6, #4]
 801a8a4:	42a3      	cmp	r3, r4
 801a8a6:	d03f      	beq.n	801a928 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801a8a8:	6860      	ldr	r0, [r4, #4]
 801a8aa:	7802      	ldrb	r2, [r0, #0]
 801a8ac:	2a00      	cmp	r2, #0
 801a8ae:	d13b      	bne.n	801a928 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801a8b0:	6845      	ldr	r5, [r0, #4]
 801a8b2:	68ab      	ldr	r3, [r5, #8]
 801a8b4:	4298      	cmp	r0, r3
 801a8b6:	d123      	bne.n	801a900 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801a8b8:	68eb      	ldr	r3, [r5, #12]
 801a8ba:	b183      	cbz	r3, 801a8de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801a8bc:	781a      	ldrb	r2, [r3, #0]
 801a8be:	b972      	cbnz	r2, 801a8de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801a8c0:	7007      	strb	r7, [r0, #0]
 801a8c2:	701f      	strb	r7, [r3, #0]
 801a8c4:	702a      	strb	r2, [r5, #0]
 801a8c6:	462c      	mov	r4, r5
 801a8c8:	e7eb      	b.n	801a8a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801a8ca:	68b3      	ldr	r3, [r6, #8]
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	d1e5      	bne.n	801a89c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a8d0:	60b1      	str	r1, [r6, #8]
 801a8d2:	e7e3      	b.n	801a89c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a8d4:	60d1      	str	r1, [r2, #12]
 801a8d6:	68f3      	ldr	r3, [r6, #12]
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	d1df      	bne.n	801a89c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a8dc:	e7dd      	b.n	801a89a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801a8de:	68c3      	ldr	r3, [r0, #12]
 801a8e0:	42a3      	cmp	r3, r4
 801a8e2:	d103      	bne.n	801a8ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 801a8e4:	4641      	mov	r1, r8
 801a8e6:	f7ff ff70 	bl	801a7ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	6863      	ldr	r3, [r4, #4]
 801a8ee:	4641      	mov	r1, r8
 801a8f0:	701f      	strb	r7, [r3, #0]
 801a8f2:	4628      	mov	r0, r5
 801a8f4:	f885 9000 	strb.w	r9, [r5]
 801a8f8:	f7ff ff7c 	bl	801a7f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801a8fc:	4625      	mov	r5, r4
 801a8fe:	e7e2      	b.n	801a8c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 801a900:	b113      	cbz	r3, 801a908 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 801a902:	781a      	ldrb	r2, [r3, #0]
 801a904:	2a00      	cmp	r2, #0
 801a906:	d0db      	beq.n	801a8c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801a908:	6883      	ldr	r3, [r0, #8]
 801a90a:	42a3      	cmp	r3, r4
 801a90c:	d103      	bne.n	801a916 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801a90e:	4641      	mov	r1, r8
 801a910:	f7ff ff70 	bl	801a7f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801a914:	4604      	mov	r4, r0
 801a916:	6863      	ldr	r3, [r4, #4]
 801a918:	4641      	mov	r1, r8
 801a91a:	701f      	strb	r7, [r3, #0]
 801a91c:	4628      	mov	r0, r5
 801a91e:	f885 9000 	strb.w	r9, [r5]
 801a922:	f7ff ff52 	bl	801a7ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801a926:	e7e9      	b.n	801a8fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801a928:	2201      	movs	r2, #1
 801a92a:	701a      	strb	r2, [r3, #0]
 801a92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a930 <_ZSt17__throw_bad_allocv>:
 801a930:	b508      	push	{r3, lr}
 801a932:	f000 f851 	bl	801a9d8 <abort>

0801a936 <_ZSt20__throw_length_errorPKc>:
 801a936:	b508      	push	{r3, lr}
 801a938:	f000 f84e 	bl	801a9d8 <abort>

0801a93c <_ZSt15get_new_handlerv>:
 801a93c:	4b02      	ldr	r3, [pc, #8]	; (801a948 <_ZSt15get_new_handlerv+0xc>)
 801a93e:	6818      	ldr	r0, [r3, #0]
 801a940:	f3bf 8f5b 	dmb	ish
 801a944:	4770      	bx	lr
 801a946:	bf00      	nop
 801a948:	2400123c 	.word	0x2400123c

0801a94c <round>:
 801a94c:	ee10 1a90 	vmov	r1, s1
 801a950:	f3c1 500a 	ubfx	r0, r1, #20, #11
 801a954:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 801a958:	2a13      	cmp	r2, #19
 801a95a:	b510      	push	{r4, lr}
 801a95c:	ee10 3a10 	vmov	r3, s0
 801a960:	dc19      	bgt.n	801a996 <round+0x4a>
 801a962:	2a00      	cmp	r2, #0
 801a964:	da09      	bge.n	801a97a <round+0x2e>
 801a966:	3201      	adds	r2, #1
 801a968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801a96c:	d103      	bne.n	801a976 <round+0x2a>
 801a96e:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a972:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a976:	2000      	movs	r0, #0
 801a978:	e026      	b.n	801a9c8 <round+0x7c>
 801a97a:	4816      	ldr	r0, [pc, #88]	; (801a9d4 <round+0x88>)
 801a97c:	4110      	asrs	r0, r2
 801a97e:	ea01 0400 	and.w	r4, r1, r0
 801a982:	4323      	orrs	r3, r4
 801a984:	d00e      	beq.n	801a9a4 <round+0x58>
 801a986:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801a98a:	fa43 f202 	asr.w	r2, r3, r2
 801a98e:	4411      	add	r1, r2
 801a990:	ea21 0100 	bic.w	r1, r1, r0
 801a994:	e7ef      	b.n	801a976 <round+0x2a>
 801a996:	2a33      	cmp	r2, #51	; 0x33
 801a998:	dd05      	ble.n	801a9a6 <round+0x5a>
 801a99a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 801a99e:	d101      	bne.n	801a9a4 <round+0x58>
 801a9a0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a9a4:	bd10      	pop	{r4, pc}
 801a9a6:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 801a9aa:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ae:	40e0      	lsrs	r0, r4
 801a9b0:	4203      	tst	r3, r0
 801a9b2:	d0f7      	beq.n	801a9a4 <round+0x58>
 801a9b4:	2401      	movs	r4, #1
 801a9b6:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 801a9ba:	fa04 f202 	lsl.w	r2, r4, r2
 801a9be:	189b      	adds	r3, r3, r2
 801a9c0:	bf28      	it	cs
 801a9c2:	1909      	addcs	r1, r1, r4
 801a9c4:	ea23 0000 	bic.w	r0, r3, r0
 801a9c8:	460b      	mov	r3, r1
 801a9ca:	4602      	mov	r2, r0
 801a9cc:	ec43 2b10 	vmov	d0, r2, r3
 801a9d0:	e7e8      	b.n	801a9a4 <round+0x58>
 801a9d2:	bf00      	nop
 801a9d4:	000fffff 	.word	0x000fffff

0801a9d8 <abort>:
 801a9d8:	b508      	push	{r3, lr}
 801a9da:	2006      	movs	r0, #6
 801a9dc:	f000 f986 	bl	801acec <raise>
 801a9e0:	2001      	movs	r0, #1
 801a9e2:	f7e7 f987 	bl	8001cf4 <_exit>
	...

0801a9e8 <__errno>:
 801a9e8:	4b01      	ldr	r3, [pc, #4]	; (801a9f0 <__errno+0x8>)
 801a9ea:	6818      	ldr	r0, [r3, #0]
 801a9ec:	4770      	bx	lr
 801a9ee:	bf00      	nop
 801a9f0:	24000010 	.word	0x24000010

0801a9f4 <__libc_init_array>:
 801a9f4:	b570      	push	{r4, r5, r6, lr}
 801a9f6:	4d0d      	ldr	r5, [pc, #52]	; (801aa2c <__libc_init_array+0x38>)
 801a9f8:	4c0d      	ldr	r4, [pc, #52]	; (801aa30 <__libc_init_array+0x3c>)
 801a9fa:	1b64      	subs	r4, r4, r5
 801a9fc:	10a4      	asrs	r4, r4, #2
 801a9fe:	2600      	movs	r6, #0
 801aa00:	42a6      	cmp	r6, r4
 801aa02:	d109      	bne.n	801aa18 <__libc_init_array+0x24>
 801aa04:	4d0b      	ldr	r5, [pc, #44]	; (801aa34 <__libc_init_array+0x40>)
 801aa06:	4c0c      	ldr	r4, [pc, #48]	; (801aa38 <__libc_init_array+0x44>)
 801aa08:	f000 f99a 	bl	801ad40 <_init>
 801aa0c:	1b64      	subs	r4, r4, r5
 801aa0e:	10a4      	asrs	r4, r4, #2
 801aa10:	2600      	movs	r6, #0
 801aa12:	42a6      	cmp	r6, r4
 801aa14:	d105      	bne.n	801aa22 <__libc_init_array+0x2e>
 801aa16:	bd70      	pop	{r4, r5, r6, pc}
 801aa18:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa1c:	4798      	blx	r3
 801aa1e:	3601      	adds	r6, #1
 801aa20:	e7ee      	b.n	801aa00 <__libc_init_array+0xc>
 801aa22:	f855 3b04 	ldr.w	r3, [r5], #4
 801aa26:	4798      	blx	r3
 801aa28:	3601      	adds	r6, #1
 801aa2a:	e7f2      	b.n	801aa12 <__libc_init_array+0x1e>
 801aa2c:	0801b30c 	.word	0x0801b30c
 801aa30:	0801b30c 	.word	0x0801b30c
 801aa34:	0801b30c 	.word	0x0801b30c
 801aa38:	0801b324 	.word	0x0801b324

0801aa3c <malloc>:
 801aa3c:	4b02      	ldr	r3, [pc, #8]	; (801aa48 <malloc+0xc>)
 801aa3e:	4601      	mov	r1, r0
 801aa40:	6818      	ldr	r0, [r3, #0]
 801aa42:	f000 b8a7 	b.w	801ab94 <_malloc_r>
 801aa46:	bf00      	nop
 801aa48:	24000010 	.word	0x24000010

0801aa4c <free>:
 801aa4c:	4b02      	ldr	r3, [pc, #8]	; (801aa58 <free+0xc>)
 801aa4e:	4601      	mov	r1, r0
 801aa50:	6818      	ldr	r0, [r3, #0]
 801aa52:	f000 b833 	b.w	801aabc <_free_r>
 801aa56:	bf00      	nop
 801aa58:	24000010 	.word	0x24000010

0801aa5c <memcpy>:
 801aa5c:	440a      	add	r2, r1
 801aa5e:	4291      	cmp	r1, r2
 801aa60:	f100 33ff 	add.w	r3, r0, #4294967295
 801aa64:	d100      	bne.n	801aa68 <memcpy+0xc>
 801aa66:	4770      	bx	lr
 801aa68:	b510      	push	{r4, lr}
 801aa6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa72:	4291      	cmp	r1, r2
 801aa74:	d1f9      	bne.n	801aa6a <memcpy+0xe>
 801aa76:	bd10      	pop	{r4, pc}

0801aa78 <memmove>:
 801aa78:	4288      	cmp	r0, r1
 801aa7a:	b510      	push	{r4, lr}
 801aa7c:	eb01 0402 	add.w	r4, r1, r2
 801aa80:	d902      	bls.n	801aa88 <memmove+0x10>
 801aa82:	4284      	cmp	r4, r0
 801aa84:	4623      	mov	r3, r4
 801aa86:	d807      	bhi.n	801aa98 <memmove+0x20>
 801aa88:	1e43      	subs	r3, r0, #1
 801aa8a:	42a1      	cmp	r1, r4
 801aa8c:	d008      	beq.n	801aaa0 <memmove+0x28>
 801aa8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa92:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aa96:	e7f8      	b.n	801aa8a <memmove+0x12>
 801aa98:	4402      	add	r2, r0
 801aa9a:	4601      	mov	r1, r0
 801aa9c:	428a      	cmp	r2, r1
 801aa9e:	d100      	bne.n	801aaa2 <memmove+0x2a>
 801aaa0:	bd10      	pop	{r4, pc}
 801aaa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aaa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801aaaa:	e7f7      	b.n	801aa9c <memmove+0x24>

0801aaac <memset>:
 801aaac:	4402      	add	r2, r0
 801aaae:	4603      	mov	r3, r0
 801aab0:	4293      	cmp	r3, r2
 801aab2:	d100      	bne.n	801aab6 <memset+0xa>
 801aab4:	4770      	bx	lr
 801aab6:	f803 1b01 	strb.w	r1, [r3], #1
 801aaba:	e7f9      	b.n	801aab0 <memset+0x4>

0801aabc <_free_r>:
 801aabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aabe:	2900      	cmp	r1, #0
 801aac0:	d044      	beq.n	801ab4c <_free_r+0x90>
 801aac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aac6:	9001      	str	r0, [sp, #4]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	f1a1 0404 	sub.w	r4, r1, #4
 801aace:	bfb8      	it	lt
 801aad0:	18e4      	addlt	r4, r4, r3
 801aad2:	f000 f927 	bl	801ad24 <__malloc_lock>
 801aad6:	4a1e      	ldr	r2, [pc, #120]	; (801ab50 <_free_r+0x94>)
 801aad8:	9801      	ldr	r0, [sp, #4]
 801aada:	6813      	ldr	r3, [r2, #0]
 801aadc:	b933      	cbnz	r3, 801aaec <_free_r+0x30>
 801aade:	6063      	str	r3, [r4, #4]
 801aae0:	6014      	str	r4, [r2, #0]
 801aae2:	b003      	add	sp, #12
 801aae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aae8:	f000 b922 	b.w	801ad30 <__malloc_unlock>
 801aaec:	42a3      	cmp	r3, r4
 801aaee:	d908      	bls.n	801ab02 <_free_r+0x46>
 801aaf0:	6825      	ldr	r5, [r4, #0]
 801aaf2:	1961      	adds	r1, r4, r5
 801aaf4:	428b      	cmp	r3, r1
 801aaf6:	bf01      	itttt	eq
 801aaf8:	6819      	ldreq	r1, [r3, #0]
 801aafa:	685b      	ldreq	r3, [r3, #4]
 801aafc:	1949      	addeq	r1, r1, r5
 801aafe:	6021      	streq	r1, [r4, #0]
 801ab00:	e7ed      	b.n	801aade <_free_r+0x22>
 801ab02:	461a      	mov	r2, r3
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	b10b      	cbz	r3, 801ab0c <_free_r+0x50>
 801ab08:	42a3      	cmp	r3, r4
 801ab0a:	d9fa      	bls.n	801ab02 <_free_r+0x46>
 801ab0c:	6811      	ldr	r1, [r2, #0]
 801ab0e:	1855      	adds	r5, r2, r1
 801ab10:	42a5      	cmp	r5, r4
 801ab12:	d10b      	bne.n	801ab2c <_free_r+0x70>
 801ab14:	6824      	ldr	r4, [r4, #0]
 801ab16:	4421      	add	r1, r4
 801ab18:	1854      	adds	r4, r2, r1
 801ab1a:	42a3      	cmp	r3, r4
 801ab1c:	6011      	str	r1, [r2, #0]
 801ab1e:	d1e0      	bne.n	801aae2 <_free_r+0x26>
 801ab20:	681c      	ldr	r4, [r3, #0]
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	6053      	str	r3, [r2, #4]
 801ab26:	4421      	add	r1, r4
 801ab28:	6011      	str	r1, [r2, #0]
 801ab2a:	e7da      	b.n	801aae2 <_free_r+0x26>
 801ab2c:	d902      	bls.n	801ab34 <_free_r+0x78>
 801ab2e:	230c      	movs	r3, #12
 801ab30:	6003      	str	r3, [r0, #0]
 801ab32:	e7d6      	b.n	801aae2 <_free_r+0x26>
 801ab34:	6825      	ldr	r5, [r4, #0]
 801ab36:	1961      	adds	r1, r4, r5
 801ab38:	428b      	cmp	r3, r1
 801ab3a:	bf04      	itt	eq
 801ab3c:	6819      	ldreq	r1, [r3, #0]
 801ab3e:	685b      	ldreq	r3, [r3, #4]
 801ab40:	6063      	str	r3, [r4, #4]
 801ab42:	bf04      	itt	eq
 801ab44:	1949      	addeq	r1, r1, r5
 801ab46:	6021      	streq	r1, [r4, #0]
 801ab48:	6054      	str	r4, [r2, #4]
 801ab4a:	e7ca      	b.n	801aae2 <_free_r+0x26>
 801ab4c:	b003      	add	sp, #12
 801ab4e:	bd30      	pop	{r4, r5, pc}
 801ab50:	24001240 	.word	0x24001240

0801ab54 <sbrk_aligned>:
 801ab54:	b570      	push	{r4, r5, r6, lr}
 801ab56:	4e0e      	ldr	r6, [pc, #56]	; (801ab90 <sbrk_aligned+0x3c>)
 801ab58:	460c      	mov	r4, r1
 801ab5a:	6831      	ldr	r1, [r6, #0]
 801ab5c:	4605      	mov	r5, r0
 801ab5e:	b911      	cbnz	r1, 801ab66 <sbrk_aligned+0x12>
 801ab60:	f000 f88c 	bl	801ac7c <_sbrk_r>
 801ab64:	6030      	str	r0, [r6, #0]
 801ab66:	4621      	mov	r1, r4
 801ab68:	4628      	mov	r0, r5
 801ab6a:	f000 f887 	bl	801ac7c <_sbrk_r>
 801ab6e:	1c43      	adds	r3, r0, #1
 801ab70:	d00a      	beq.n	801ab88 <sbrk_aligned+0x34>
 801ab72:	1cc4      	adds	r4, r0, #3
 801ab74:	f024 0403 	bic.w	r4, r4, #3
 801ab78:	42a0      	cmp	r0, r4
 801ab7a:	d007      	beq.n	801ab8c <sbrk_aligned+0x38>
 801ab7c:	1a21      	subs	r1, r4, r0
 801ab7e:	4628      	mov	r0, r5
 801ab80:	f000 f87c 	bl	801ac7c <_sbrk_r>
 801ab84:	3001      	adds	r0, #1
 801ab86:	d101      	bne.n	801ab8c <sbrk_aligned+0x38>
 801ab88:	f04f 34ff 	mov.w	r4, #4294967295
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	bd70      	pop	{r4, r5, r6, pc}
 801ab90:	24001244 	.word	0x24001244

0801ab94 <_malloc_r>:
 801ab94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ab98:	1ccd      	adds	r5, r1, #3
 801ab9a:	f025 0503 	bic.w	r5, r5, #3
 801ab9e:	3508      	adds	r5, #8
 801aba0:	2d0c      	cmp	r5, #12
 801aba2:	bf38      	it	cc
 801aba4:	250c      	movcc	r5, #12
 801aba6:	2d00      	cmp	r5, #0
 801aba8:	4607      	mov	r7, r0
 801abaa:	db01      	blt.n	801abb0 <_malloc_r+0x1c>
 801abac:	42a9      	cmp	r1, r5
 801abae:	d905      	bls.n	801abbc <_malloc_r+0x28>
 801abb0:	230c      	movs	r3, #12
 801abb2:	603b      	str	r3, [r7, #0]
 801abb4:	2600      	movs	r6, #0
 801abb6:	4630      	mov	r0, r6
 801abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abbc:	4e2e      	ldr	r6, [pc, #184]	; (801ac78 <_malloc_r+0xe4>)
 801abbe:	f000 f8b1 	bl	801ad24 <__malloc_lock>
 801abc2:	6833      	ldr	r3, [r6, #0]
 801abc4:	461c      	mov	r4, r3
 801abc6:	bb34      	cbnz	r4, 801ac16 <_malloc_r+0x82>
 801abc8:	4629      	mov	r1, r5
 801abca:	4638      	mov	r0, r7
 801abcc:	f7ff ffc2 	bl	801ab54 <sbrk_aligned>
 801abd0:	1c43      	adds	r3, r0, #1
 801abd2:	4604      	mov	r4, r0
 801abd4:	d14d      	bne.n	801ac72 <_malloc_r+0xde>
 801abd6:	6834      	ldr	r4, [r6, #0]
 801abd8:	4626      	mov	r6, r4
 801abda:	2e00      	cmp	r6, #0
 801abdc:	d140      	bne.n	801ac60 <_malloc_r+0xcc>
 801abde:	6823      	ldr	r3, [r4, #0]
 801abe0:	4631      	mov	r1, r6
 801abe2:	4638      	mov	r0, r7
 801abe4:	eb04 0803 	add.w	r8, r4, r3
 801abe8:	f000 f848 	bl	801ac7c <_sbrk_r>
 801abec:	4580      	cmp	r8, r0
 801abee:	d13a      	bne.n	801ac66 <_malloc_r+0xd2>
 801abf0:	6821      	ldr	r1, [r4, #0]
 801abf2:	3503      	adds	r5, #3
 801abf4:	1a6d      	subs	r5, r5, r1
 801abf6:	f025 0503 	bic.w	r5, r5, #3
 801abfa:	3508      	adds	r5, #8
 801abfc:	2d0c      	cmp	r5, #12
 801abfe:	bf38      	it	cc
 801ac00:	250c      	movcc	r5, #12
 801ac02:	4629      	mov	r1, r5
 801ac04:	4638      	mov	r0, r7
 801ac06:	f7ff ffa5 	bl	801ab54 <sbrk_aligned>
 801ac0a:	3001      	adds	r0, #1
 801ac0c:	d02b      	beq.n	801ac66 <_malloc_r+0xd2>
 801ac0e:	6823      	ldr	r3, [r4, #0]
 801ac10:	442b      	add	r3, r5
 801ac12:	6023      	str	r3, [r4, #0]
 801ac14:	e00e      	b.n	801ac34 <_malloc_r+0xa0>
 801ac16:	6822      	ldr	r2, [r4, #0]
 801ac18:	1b52      	subs	r2, r2, r5
 801ac1a:	d41e      	bmi.n	801ac5a <_malloc_r+0xc6>
 801ac1c:	2a0b      	cmp	r2, #11
 801ac1e:	d916      	bls.n	801ac4e <_malloc_r+0xba>
 801ac20:	1961      	adds	r1, r4, r5
 801ac22:	42a3      	cmp	r3, r4
 801ac24:	6025      	str	r5, [r4, #0]
 801ac26:	bf18      	it	ne
 801ac28:	6059      	strne	r1, [r3, #4]
 801ac2a:	6863      	ldr	r3, [r4, #4]
 801ac2c:	bf08      	it	eq
 801ac2e:	6031      	streq	r1, [r6, #0]
 801ac30:	5162      	str	r2, [r4, r5]
 801ac32:	604b      	str	r3, [r1, #4]
 801ac34:	4638      	mov	r0, r7
 801ac36:	f104 060b 	add.w	r6, r4, #11
 801ac3a:	f000 f879 	bl	801ad30 <__malloc_unlock>
 801ac3e:	f026 0607 	bic.w	r6, r6, #7
 801ac42:	1d23      	adds	r3, r4, #4
 801ac44:	1af2      	subs	r2, r6, r3
 801ac46:	d0b6      	beq.n	801abb6 <_malloc_r+0x22>
 801ac48:	1b9b      	subs	r3, r3, r6
 801ac4a:	50a3      	str	r3, [r4, r2]
 801ac4c:	e7b3      	b.n	801abb6 <_malloc_r+0x22>
 801ac4e:	6862      	ldr	r2, [r4, #4]
 801ac50:	42a3      	cmp	r3, r4
 801ac52:	bf0c      	ite	eq
 801ac54:	6032      	streq	r2, [r6, #0]
 801ac56:	605a      	strne	r2, [r3, #4]
 801ac58:	e7ec      	b.n	801ac34 <_malloc_r+0xa0>
 801ac5a:	4623      	mov	r3, r4
 801ac5c:	6864      	ldr	r4, [r4, #4]
 801ac5e:	e7b2      	b.n	801abc6 <_malloc_r+0x32>
 801ac60:	4634      	mov	r4, r6
 801ac62:	6876      	ldr	r6, [r6, #4]
 801ac64:	e7b9      	b.n	801abda <_malloc_r+0x46>
 801ac66:	230c      	movs	r3, #12
 801ac68:	603b      	str	r3, [r7, #0]
 801ac6a:	4638      	mov	r0, r7
 801ac6c:	f000 f860 	bl	801ad30 <__malloc_unlock>
 801ac70:	e7a1      	b.n	801abb6 <_malloc_r+0x22>
 801ac72:	6025      	str	r5, [r4, #0]
 801ac74:	e7de      	b.n	801ac34 <_malloc_r+0xa0>
 801ac76:	bf00      	nop
 801ac78:	24001240 	.word	0x24001240

0801ac7c <_sbrk_r>:
 801ac7c:	b538      	push	{r3, r4, r5, lr}
 801ac7e:	4d06      	ldr	r5, [pc, #24]	; (801ac98 <_sbrk_r+0x1c>)
 801ac80:	2300      	movs	r3, #0
 801ac82:	4604      	mov	r4, r0
 801ac84:	4608      	mov	r0, r1
 801ac86:	602b      	str	r3, [r5, #0]
 801ac88:	f7e7 f83e 	bl	8001d08 <_sbrk>
 801ac8c:	1c43      	adds	r3, r0, #1
 801ac8e:	d102      	bne.n	801ac96 <_sbrk_r+0x1a>
 801ac90:	682b      	ldr	r3, [r5, #0]
 801ac92:	b103      	cbz	r3, 801ac96 <_sbrk_r+0x1a>
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	bd38      	pop	{r3, r4, r5, pc}
 801ac98:	24001248 	.word	0x24001248

0801ac9c <_raise_r>:
 801ac9c:	291f      	cmp	r1, #31
 801ac9e:	b538      	push	{r3, r4, r5, lr}
 801aca0:	4604      	mov	r4, r0
 801aca2:	460d      	mov	r5, r1
 801aca4:	d904      	bls.n	801acb0 <_raise_r+0x14>
 801aca6:	2316      	movs	r3, #22
 801aca8:	6003      	str	r3, [r0, #0]
 801acaa:	f04f 30ff 	mov.w	r0, #4294967295
 801acae:	bd38      	pop	{r3, r4, r5, pc}
 801acb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801acb2:	b112      	cbz	r2, 801acba <_raise_r+0x1e>
 801acb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801acb8:	b94b      	cbnz	r3, 801acce <_raise_r+0x32>
 801acba:	4620      	mov	r0, r4
 801acbc:	f000 f830 	bl	801ad20 <_getpid_r>
 801acc0:	462a      	mov	r2, r5
 801acc2:	4601      	mov	r1, r0
 801acc4:	4620      	mov	r0, r4
 801acc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801acca:	f000 b817 	b.w	801acfc <_kill_r>
 801acce:	2b01      	cmp	r3, #1
 801acd0:	d00a      	beq.n	801ace8 <_raise_r+0x4c>
 801acd2:	1c59      	adds	r1, r3, #1
 801acd4:	d103      	bne.n	801acde <_raise_r+0x42>
 801acd6:	2316      	movs	r3, #22
 801acd8:	6003      	str	r3, [r0, #0]
 801acda:	2001      	movs	r0, #1
 801acdc:	e7e7      	b.n	801acae <_raise_r+0x12>
 801acde:	2400      	movs	r4, #0
 801ace0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ace4:	4628      	mov	r0, r5
 801ace6:	4798      	blx	r3
 801ace8:	2000      	movs	r0, #0
 801acea:	e7e0      	b.n	801acae <_raise_r+0x12>

0801acec <raise>:
 801acec:	4b02      	ldr	r3, [pc, #8]	; (801acf8 <raise+0xc>)
 801acee:	4601      	mov	r1, r0
 801acf0:	6818      	ldr	r0, [r3, #0]
 801acf2:	f7ff bfd3 	b.w	801ac9c <_raise_r>
 801acf6:	bf00      	nop
 801acf8:	24000010 	.word	0x24000010

0801acfc <_kill_r>:
 801acfc:	b538      	push	{r3, r4, r5, lr}
 801acfe:	4d07      	ldr	r5, [pc, #28]	; (801ad1c <_kill_r+0x20>)
 801ad00:	2300      	movs	r3, #0
 801ad02:	4604      	mov	r4, r0
 801ad04:	4608      	mov	r0, r1
 801ad06:	4611      	mov	r1, r2
 801ad08:	602b      	str	r3, [r5, #0]
 801ad0a:	f7e6 ffe3 	bl	8001cd4 <_kill>
 801ad0e:	1c43      	adds	r3, r0, #1
 801ad10:	d102      	bne.n	801ad18 <_kill_r+0x1c>
 801ad12:	682b      	ldr	r3, [r5, #0]
 801ad14:	b103      	cbz	r3, 801ad18 <_kill_r+0x1c>
 801ad16:	6023      	str	r3, [r4, #0]
 801ad18:	bd38      	pop	{r3, r4, r5, pc}
 801ad1a:	bf00      	nop
 801ad1c:	24001248 	.word	0x24001248

0801ad20 <_getpid_r>:
 801ad20:	f7e6 bfd0 	b.w	8001cc4 <_getpid>

0801ad24 <__malloc_lock>:
 801ad24:	4801      	ldr	r0, [pc, #4]	; (801ad2c <__malloc_lock+0x8>)
 801ad26:	f000 b809 	b.w	801ad3c <__retarget_lock_acquire_recursive>
 801ad2a:	bf00      	nop
 801ad2c:	2400124c 	.word	0x2400124c

0801ad30 <__malloc_unlock>:
 801ad30:	4801      	ldr	r0, [pc, #4]	; (801ad38 <__malloc_unlock+0x8>)
 801ad32:	f000 b804 	b.w	801ad3e <__retarget_lock_release_recursive>
 801ad36:	bf00      	nop
 801ad38:	2400124c 	.word	0x2400124c

0801ad3c <__retarget_lock_acquire_recursive>:
 801ad3c:	4770      	bx	lr

0801ad3e <__retarget_lock_release_recursive>:
 801ad3e:	4770      	bx	lr

0801ad40 <_init>:
 801ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad42:	bf00      	nop
 801ad44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad46:	bc08      	pop	{r3}
 801ad48:	469e      	mov	lr, r3
 801ad4a:	4770      	bx	lr

0801ad4c <_fini>:
 801ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad4e:	bf00      	nop
 801ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ad52:	bc08      	pop	{r3}
 801ad54:	469e      	mov	lr, r3
 801ad56:	4770      	bx	lr
