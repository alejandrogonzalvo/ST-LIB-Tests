
STATEMACHINE_STLIBLOW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026304  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080265d4  080265d4  000365d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08026ccc  08026ccc  00036ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000020  08026cd4  08026cd4  00036cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000020  08026cf4  08026cf4  00036cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08026d14  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000bc  08026dd0  000400bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400011c  08026e30  0004011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  24000180  08026e90  00040180  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001440  08026e90  00041440  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ed8ea  00000000  00000000  000401aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c423  00000000  00000000  0012da94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00007ac0  00000000  00000000  00139eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00007c78  00000000  00000000  00141978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004f54b  00000000  00000000  001495f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00058c70  00000000  00000000  00198b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0027115d  00000000  00000000  001f17ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00462908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00023ba0  00000000  00000000  00462958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000180 	.word	0x24000180
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080265bc 	.word	0x080265bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000184 	.word	0x24000184
 800030c:	080265bc 	.word	0x080265bc

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <HAL_ADC_MspInit>:
}

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b092      	sub	sp, #72	; 0x48
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a9f      	ldr	r2, [pc, #636]	; (80008b0 <HAL_ADC_MspInit+0x29c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	f040 80b6 	bne.w	80007a4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000638:	4b9e      	ldr	r3, [pc, #632]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a9d      	ldr	r2, [pc, #628]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 8000640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000642:	4b9c      	ldr	r3, [pc, #624]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10e      	bne.n	8000668 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800064a:	4b9b      	ldr	r3, [pc, #620]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800064c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000650:	4a99      	ldr	r2, [pc, #612]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800065a:	4b97      	ldr	r3, [pc, #604]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800065c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
 8000666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b93      	ldr	r3, [pc, #588]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	4a92      	ldr	r2, [pc, #584]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000678:	4b8f      	ldr	r3, [pc, #572]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b8c      	ldr	r3, [pc, #560]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a8a      	ldr	r2, [pc, #552]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b88      	ldr	r3, [pc, #544]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a83      	ldr	r2, [pc, #524]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a7b      	ldr	r2, [pc, #492]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	623b      	str	r3, [r7, #32]
 80006de:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 80006e0:	2301      	movs	r3, #1
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	2303      	movs	r3, #3
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f0:	4619      	mov	r1, r3
 80006f2:	4872      	ldr	r0, [pc, #456]	; (80008bc <HAL_ADC_MspInit+0x2a8>)
 80006f4:	f00a f8b0 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 80006f8:	2379      	movs	r3, #121	; 0x79
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	4619      	mov	r1, r3
 800070a:	486d      	ldr	r0, [pc, #436]	; (80008c0 <HAL_ADC_MspInit+0x2ac>)
 800070c:	f00a f8a4 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 8000710:	2303      	movs	r3, #3
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000714:	2303      	movs	r3, #3
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000720:	4619      	mov	r1, r3
 8000722:	4868      	ldr	r0, [pc, #416]	; (80008c4 <HAL_ADC_MspInit+0x2b0>)
 8000724:	f00a f898 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 8000728:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800073a:	4619      	mov	r1, r3
 800073c:	4862      	ldr	r0, [pc, #392]	; (80008c8 <HAL_ADC_MspInit+0x2b4>)
 800073e:	f00a f88b 	bl	800a858 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000742:	4b62      	ldr	r3, [pc, #392]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000744:	4a62      	ldr	r2, [pc, #392]	; (80008d0 <HAL_ADC_MspInit+0x2bc>)
 8000746:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000748:	4b60      	ldr	r3, [pc, #384]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800074a:	2209      	movs	r2, #9
 800074c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b5c      	ldr	r3, [pc, #368]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000762:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800076a:	4b58      	ldr	r3, [pc, #352]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800077a:	4b54      	ldr	r3, [pc, #336]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000786:	4851      	ldr	r0, [pc, #324]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000788:	f006 ff5c 	bl	8007644 <HAL_DMA_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8000792:	f001 fa00 	bl	8001b96 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a4c      	ldr	r2, [pc, #304]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800079a:	659a      	str	r2, [r3, #88]	; 0x58
 800079c:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007a2:	e120      	b.n	80009e6 <HAL_ADC_MspInit+0x3d2>
  else if(adcHandle->Instance==ADC2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <HAL_ADC_MspInit+0x2c0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f040 8098 	bne.w	80008e0 <HAL_ADC_MspInit+0x2cc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007b0:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007ba:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10e      	bne.n	80007e0 <HAL_ADC_MspInit+0x1cc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000820:	2303      	movs	r3, #3
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800082c:	4619      	mov	r1, r3
 800082e:	4824      	ldr	r0, [pc, #144]	; (80008c0 <HAL_ADC_MspInit+0x2ac>)
 8000830:	f00a f812 	bl	800a858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 8000834:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000846:	4619      	mov	r1, r3
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <HAL_ADC_MspInit+0x2b4>)
 800084a:	f00a f805 	bl	800a858 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_ADC_MspInit+0x2c8>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000856:	220a      	movs	r2, #10
 8000858:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000874:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000884:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000894:	f006 fed6 	bl	8007644 <HAL_DMA_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_ADC_MspInit+0x28e>
      Error_Handler();
 800089e:	f001 f97a 	bl	8001b96 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 80008a6:	659a      	str	r2, [r3, #88]	; 0x58
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80008ae:	e09a      	b.n	80009e6 <HAL_ADC_MspInit+0x3d2>
 80008b0:	40022000 	.word	0x40022000
 80008b4:	24000454 	.word	0x24000454
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020800 	.word	0x58020800
 80008c0:	58020000 	.word	0x58020000
 80008c4:	58020400 	.word	0x58020400
 80008c8:	58021400 	.word	0x58021400
 80008cc:	240002ec 	.word	0x240002ec
 80008d0:	40020010 	.word	0x40020010
 80008d4:	40022100 	.word	0x40022100
 80008d8:	24000364 	.word	0x24000364
 80008dc:	40020028 	.word	0x40020028
  else if(adcHandle->Instance==ADC3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a42      	ldr	r2, [pc, #264]	; (80009f0 <HAL_ADC_MspInit+0x3dc>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d17d      	bne.n	80009e6 <HAL_ADC_MspInit+0x3d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	4a39      	ldr	r2, [pc, #228]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 8000944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000956:	4619      	mov	r1, r3
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <HAL_ADC_MspInit+0x3e4>)
 800095a:	f009 ff7d 	bl	800a858 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800095e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000962:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000966:	f004 fc73 	bl	8005250 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800096a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800096e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000972:	f004 fc6d 	bl	8005250 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_ADC_MspInit+0x3ec>)
 800097a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 800097e:	2273      	movs	r2, #115	; 0x73
 8000980:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000994:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009bc:	f006 fe42 	bl	8007644 <HAL_DMA_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_ADC_MspInit+0x3b6>
      Error_Handler();
 80009c6:	f001 f8e6 	bl	8001b96 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009ce:	659a      	str	r2, [r3, #88]	; 0x58
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	207f      	movs	r0, #127	; 0x7f
 80009dc:	f006 fdfd 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80009e0:	207f      	movs	r0, #127	; 0x7f
 80009e2:	f006 fe14 	bl	800760e <HAL_NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3748      	adds	r7, #72	; 0x48
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58026000 	.word	0x58026000
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58021400 	.word	0x58021400
 80009fc:	240003dc 	.word	0x240003dc
 8000a00:	40020040 	.word	0x40020040

08000a04 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_CORDIC_Init+0x20>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <MX_CORDIC_Init+0x24>)
 8000a0c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_CORDIC_Init+0x20>)
 8000a10:	f006 fcd6 	bl	80073c0 <HAL_CORDIC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000a1a:	f001 f8bc 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	24000458 	.word	0x24000458
 8000a28:	48024400 	.word	0x48024400

08000a2c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_CORDIC_MspInit+0x3c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10e      	bne.n	8000a5c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	48024400 	.word	0x48024400
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f006 fd9e 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f006 fdb5 	bl	800760e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200c      	movs	r0, #12
 8000aaa:	f006 fd96 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aae:	200c      	movs	r0, #12
 8000ab0:	f006 fdad 	bl	800760e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f006 fd8e 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f006 fda5 	bl	800760e <HAL_NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400

08000ad0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_ETH_Init+0x80>)
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <MX_ETH_Init+0x84>)
 8000ad8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_ETH_Init+0x88>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_ETH_Init+0x88>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_ETH_Init+0x88>)
 8000ae8:	22e1      	movs	r2, #225	; 0xe1
 8000aea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_ETH_Init+0x88>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_ETH_Init+0x88>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_ETH_Init+0x88>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <MX_ETH_Init+0x88>)
 8000b02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <MX_ETH_Init+0x8c>)
 8000b0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_ETH_Init+0x90>)
 8000b14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b20:	f008 fe66 	bl	80097f0 <HAL_ETH_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b2a:	f001 f834 	bl	8001b96 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b2e:	2238      	movs	r2, #56	; 0x38
 8000b30:	2100      	movs	r1, #0
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b34:	f025 fbf8 	bl	8026328 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b3a:	2221      	movs	r2, #33	; 0x21
 8000b3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	240004b8 	.word	0x240004b8
 8000b54:	40028000 	.word	0x40028000
 8000b58:	24000568 	.word	0x24000568
 8000b5c:	2400011c 	.word	0x2400011c
 8000b60:	240000bc 	.word	0x240000bc
 8000b64:	24000480 	.word	0x24000480

08000b68 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a59      	ldr	r2, [pc, #356]	; (8000cec <HAL_ETH_MspInit+0x184>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f040 80ab 	bne.w	8000ce2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b8c:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b92:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb0:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bba:	4b4d      	ldr	r3, [pc, #308]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bc8:	4b49      	ldr	r3, [pc, #292]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bce:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd8:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c5e:	2332      	movs	r3, #50	; 0x32
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <HAL_ETH_MspInit+0x18c>)
 8000c7a:	f009 fded 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c7e:	2386      	movs	r3, #134	; 0x86
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <HAL_ETH_MspInit+0x190>)
 8000c9a:	f009 fddd 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_ETH_MspInit+0x194>)
 8000cbc:	f009 fdcc 	bl	800a858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_ETH_MspInit+0x198>)
 8000cde:	f009 fdbb 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40028000 	.word	0x40028000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58021800 	.word	0x58021800

08000d04 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <MX_FDCAN1_Init+0xc4>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d2e:	2210      	movs	r2, #16
 8000d30:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000db2:	f009 f941 	bl	800a038 <HAL_FDCAN_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dbc:	f000 feeb 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000570 	.word	0x24000570
 8000dc8:	4000a000 	.word	0x4000a000

08000dcc <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <MX_FDCAN3_Init+0xc4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e7a:	f009 f8dd 	bl	800a038 <HAL_FDCAN_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000e84:	f000 fe87 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000610 	.word	0x24000610
 8000e90:	4000d400 	.word	0x4000d400

08000e94 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b8      	sub	sp, #224	; 0xe0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	22b4      	movs	r2, #180	; 0xb4
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f025 fa37 	bl	8026328 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_FDCAN_MspInit+0x17c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d14e      	bne.n	8000f62 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00b fa1a 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000ee2:	f000 fe58 	bl	8001b96 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10e      	bne.n	8000f16 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f08:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <HAL_FDCAN_MspInit+0x188>)
 8000f5c:	f009 fc7c 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000f60:	e052      	b.n	8001008 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN3)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d14d      	bne.n	8001008 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00b f9c6 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8000f8a:	f000 fe04 	bl	8001b96 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10e      	bne.n	8000fbe <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001000:	4619      	mov	r1, r3
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8001004:	f009 fc28 	bl	800a858 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	37e0      	adds	r7, #224	; 0xe0
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	4000a000 	.word	0x4000a000
 8001014:	240006b0 	.word	0x240006b0
 8001018:	58024400 	.word	0x58024400
 800101c:	58020000 	.word	0x58020000
 8001020:	4000d400 	.word	0x4000d400
 8001024:	58021800 	.word	0x58021800

08001028 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_FMAC_Init+0x20>)
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <MX_FMAC_Init+0x24>)
 8001030:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_FMAC_Init+0x20>)
 8001034:	f009 fb64 	bl	800a700 <HAL_FMAC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800103e:	f000 fdaa 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240006b4 	.word	0x240006b4
 800104c:	48024000 	.word	0x48024000

08001050 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_FMAC_MspInit+0x3c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10e      	bne.n	8001080 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 8001064:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 8001074:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	48024000 	.word	0x48024000
 8001090:	58024400 	.word	0x58024400

08001094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b56      	ldr	r3, [pc, #344]	; (8001204 <MX_GPIO_Init+0x170>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	4a54      	ldr	r2, [pc, #336]	; (8001204 <MX_GPIO_Init+0x170>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ba:	4b52      	ldr	r3, [pc, #328]	; (8001204 <MX_GPIO_Init+0x170>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c8:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <MX_GPIO_Init+0x170>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	4a4d      	ldr	r2, [pc, #308]	; (8001204 <MX_GPIO_Init+0x170>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d8:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <MX_GPIO_Init+0x170>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e6:	4b47      	ldr	r3, [pc, #284]	; (8001204 <MX_GPIO_Init+0x170>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a45      	ldr	r2, [pc, #276]	; (8001204 <MX_GPIO_Init+0x170>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <MX_GPIO_Init+0x170>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001104:	4b3f      	ldr	r3, [pc, #252]	; (8001204 <MX_GPIO_Init+0x170>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <MX_GPIO_Init+0x170>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <MX_GPIO_Init+0x170>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b38      	ldr	r3, [pc, #224]	; (8001204 <MX_GPIO_Init+0x170>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a36      	ldr	r2, [pc, #216]	; (8001204 <MX_GPIO_Init+0x170>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <MX_GPIO_Init+0x170>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0x170>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a2f      	ldr	r2, [pc, #188]	; (8001204 <MX_GPIO_Init+0x170>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0x170>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0x170>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <MX_GPIO_Init+0x170>)
 8001166:	f043 0308 	orr.w	r3, r3, #8
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b25      	ldr	r3, [pc, #148]	; (8001204 <MX_GPIO_Init+0x170>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_GPIO_Init+0x170>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a20      	ldr	r2, [pc, #128]	; (8001204 <MX_GPIO_Init+0x170>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <MX_GPIO_Init+0x170>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2101      	movs	r1, #1
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <MX_GPIO_Init+0x174>)
 80011a0:	f009 fd02 	bl	800aba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_SS_Pin;
 80011a4:	2301      	movs	r3, #1
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b8:	4619      	mov	r1, r3
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <MX_GPIO_Init+0x174>)
 80011bc:	f009 fb4c 	bl	800a858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011c0:	2303      	movs	r3, #3
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011ca:	2302      	movs	r3, #2
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_GPIO_Init+0x178>)
 80011d6:	f009 fb3f 	bl	800a858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2006      	movs	r0, #6
 80011e0:	f006 f9fb 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011e4:	2006      	movs	r0, #6
 80011e6:	f006 fa12 	bl	800760e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2007      	movs	r0, #7
 80011f0:	f006 f9f3 	bl	80075da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f006 fa0a 	bl	800760e <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3738      	adds	r7, #56	; 0x38
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400
 8001208:	58020c00 	.word	0x58020c00
 800120c:	58021000 	.word	0x58021000

08001210 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim2;
LPTIM_HandleTypeDef hlptim3;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_LPTIM1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_LPTIM1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_LPTIM1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_LPTIM1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_LPTIM1_Init+0x50>)
 800124e:	f009 fcdf 	bl	800ac10 <HAL_LPTIM_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fc9d 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	240006ec 	.word	0x240006ec
 8001264:	40002400 	.word	0x40002400

08001268 <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <MX_LPTIM2_Init+0x54>)
 8001270:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 8001280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001284:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_LPTIM2_Init+0x50>)
 80012a6:	f009 fcb3 	bl	800ac10 <HAL_LPTIM_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 80012b0:	f000 fc71 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	24000724 	.word	0x24000724
 80012bc:	58002400 	.word	0x58002400

080012c0 <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_LPTIM3_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80012d0:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012dc:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_LPTIM3_Init+0x4c>)
 80012f8:	f009 fc8a 	bl	800ac10 <HAL_LPTIM_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 fc48 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2400075c 	.word	0x2400075c
 8001310:	58002800 	.word	0x58002800

08001314 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0b2      	sub	sp, #200	; 0xc8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	22b4      	movs	r2, #180	; 0xb4
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f024 ffff 	bl	8026328 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a42      	ldr	r2, [pc, #264]	; (8001438 <HAL_LPTIM_MspInit+0x124>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d126      	bne.n	8001382 <HAL_LPTIM_MspInit+0x6e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001334:	2320      	movs	r3, #32
 8001336:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4618      	mov	r0, r3
 8001344:	f00a ffe4 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800134e:	f000 fc22 	bl	8001b96 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 8001354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001358:	4a38      	ldr	r2, [pc, #224]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001362:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 8001364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	205d      	movs	r0, #93	; 0x5d
 8001376:	f006 f930 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800137a:	205d      	movs	r0, #93	; 0x5d
 800137c:	f006 f947 	bl	800760e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }
}
 8001380:	e056      	b.n	8001430 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a2e      	ldr	r2, [pc, #184]	; (8001440 <HAL_LPTIM_MspInit+0x12c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d126      	bne.n	80013da <HAL_LPTIM_MspInit+0xc6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4618      	mov	r0, r3
 800139c:	f00a ffb8 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 80013a6:	f000 fbf6 	bl	8001b96 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 80013ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b0:	4a22      	ldr	r2, [pc, #136]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 80013b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	208a      	movs	r0, #138	; 0x8a
 80013ce:	f006 f904 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80013d2:	208a      	movs	r0, #138	; 0x8a
 80013d4:	f006 f91b 	bl	800760e <HAL_NVIC_EnableIRQ>
}
 80013d8:	e02a      	b.n	8001430 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM3)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a19      	ldr	r2, [pc, #100]	; (8001444 <HAL_LPTIM_MspInit+0x130>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d125      	bne.n	8001430 <HAL_LPTIM_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00a ff8c 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_LPTIM_MspInit+0xee>
      Error_Handler();
 80013fe:	f000 fbca 	bl	8001b96 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 8001404:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_LPTIM_MspInit+0x128>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 8001420:	2200      	movs	r2, #0
 8001422:	2100      	movs	r1, #0
 8001424:	208b      	movs	r0, #139	; 0x8b
 8001426:	f006 f8d8 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 800142a:	208b      	movs	r0, #139	; 0x8b
 800142c:	f006 f8ef 	bl	800760e <HAL_NVIC_EnableIRQ>
}
 8001430:	bf00      	nop
 8001432:	37c8      	adds	r7, #200	; 0xc8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40002400 	.word	0x40002400
 800143c:	58024400 	.word	0x58024400
 8001440:	58002400 	.word	0x58002400
 8001444:	58002800 	.word	0x58002800

08001448 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
 800144c:	2300      	movs	r3, #0
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
 8001474:	f024 feee 	bl	8026254 <abort>

08001478 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f829 	bl	80014de <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_ZNSt15_Rb_tree_header12_M_move_dataERS_>:
	}
    }
#endif

    void
    _M_move_data(_Rb_tree_header& __from)
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
    {
      _M_header._M_color = __from._M_header._M_color;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
      _M_header._M_parent = __from._M_header._M_parent;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	605a      	str	r2, [r3, #4]
      _M_header._M_left = __from._M_header._M_left;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
      _M_header._M_right = __from._M_header._M_right;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60da      	str	r2, [r3, #12]
      _M_header._M_parent->_M_parent = &_M_header;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	605a      	str	r2, [r3, #4]
      _M_node_count = __from._M_node_count;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	611a      	str	r2, [r3, #16]

      __from._M_reset();
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f000 f804 	bl	80014de <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZNSt15_Rb_tree_header8_M_resetEv>:

    void
    _M_reset()
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
    }
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	2203      	movs	r2, #3
 800156c:	4798      	blx	r3
    }
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fb0d 	bl	8001ba0 <_ZNSaISt8functionIFvvEEED1Ev>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffd9 	bl	8001552 <_ZNSt14_Function_baseD1Ev>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fb48 	bl	8001c48 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh5StateEEED1Ev>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fb26 	bl	8001c1e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ffeb 	bl	80015c2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fb2c 	bl	8001c5e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 fb4a 	bl	8001cb2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEED1Ev>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EEC1Ev>:
      _Rb_tree() = default;
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fb28 	bl	8001c88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEC1Ev>:
      map() = default;
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ffeb 	bl	8001628 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EEC1Ev>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEED1Ev>:
      ~map() = default;
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fb2e 	bl	8001cc8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EED1Ev>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fb4c 	bl	8001d1c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEED1Ev>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EEC1Ev>:
      _Rb_tree() = default;
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fb2a 	bl	8001cf2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEC1Ev>:
      map() = default;
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ffeb 	bl	800168e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EEC1Ev>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEED1Ev>:
      ~map() = default;
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fb30 	bl	8001d32 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EED1Ev>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZN12StateMachineC1Ev>:
public:
	uint8_t initial_state;
	uint8_t current_state;


	StateMachine() = default;
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3304      	adds	r3, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff77 	bl	80015dc <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	331c      	adds	r3, #28
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ffa5 	bl	8001642 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEC1Ev>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3334      	adds	r3, #52	; 0x34
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ffd3 	bl	80016a8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEC1Ev>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_ZZ4mainENKUlvE_clEv>:
  HAL_Init();

  /* USER CODE BEGIN Init */

  uint8_t adc1 = ADC::inscribe(PF11).value();
  uint8_t exti1 = ExternalInterrupt::inscribe(PE0, [&]() {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	  if (state_machine.current_state == off) {
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_ZZ4mainENKUlvE_clEv+0x2c>)
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <_ZZ4mainENKUlvE_clEv+0x1a>
		  state_machine.change_state(on);
 800171c:	2101      	movs	r1, #1
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <_ZZ4mainENKUlvE_clEv+0x2c>)
 8001720:	f01b f9cc 	bl	801cabc <_ZN12StateMachine12change_stateEh>
	  }
	  else {
		  state_machine.change_state(on);
	  }

  }).value();
 8001724:	e003      	b.n	800172e <_ZZ4mainENKUlvE_clEv+0x22>
		  state_machine.change_state(on);
 8001726:	2101      	movs	r1, #1
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <_ZZ4mainENKUlvE_clEv+0x2c>)
 800172a:	f01b f9c7 	bl	801cabc <_ZN12StateMachine12change_stateEh>
  }).value();
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	24000794 	.word	0x24000794

0800173c <_ZZ4mainENKUlvE0_clEv>:
  MX_TIM17_Init();
  MX_FDCAN3_Init();
  MX_LPTIM2_Init();
  /* USER CODE BEGIN 2 */
  Time::start();
  uint8_t timer1 = Time::register_low_precision_alarm(10, [&]() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	  state_machine.update();
 8001744:	4803      	ldr	r0, [pc, #12]	; (8001754 <_ZZ4mainENKUlvE0_clEv+0x18>)
 8001746:	f01b f93d 	bl	801c9c4 <_ZN12StateMachine6updateEv>
  });
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	24000794 	.word	0x24000794

08001758 <_ZN12StateMachineD1Ev>:
class StateMachine {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3334      	adds	r3, #52	; 0x34
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ffac 	bl	80016c2 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEED1Ev>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	331c      	adds	r3, #28
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff74 	bl	800165c <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEED1Ev>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3304      	adds	r3, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff3c 	bl	80015f6 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEED1Ev>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEaSEOS7_>:
      map&
      operator=(const map&) = default;

      /// Move assignment operator.
      map&
      operator=(map&&) = default;
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fb59 	bl	8001e50 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EEaSEOS9_>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEaSEOSC_>:
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fb5c 	bl	8001e76 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EEaSEOSF_>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEaSEOSF_>:
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fb5f 	bl	8001e9c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EEaSEOSI_>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN12StateMachineaSEOS_>:
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	701a      	strb	r2, [r3, #0]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	785a      	ldrb	r2, [r3, #1]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	705a      	strb	r2, [r3, #1]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	1d1a      	adds	r2, r3, #4
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ffbb 	bl	8001788 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEaSEOS7_>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f103 021c 	add.w	r2, r3, #28
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	331c      	adds	r3, #28
 800181c:	4611      	mov	r1, r2
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffc2 	bl	80017a8 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEaSEOSC_>
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3334      	adds	r3, #52	; 0x34
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ffc9 	bl	80017c8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEaSEOSF_>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZZ4mainENKUlvE1_clEv>:
  state_machine = StateMachine(off);
  state_machine.add_state(on);
  state_machine.add_state(sleep);
  state_machine.add_state(fault);

  state_machine.add_enter_action(off, on, [&]() {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	  ADC::turn_on(adc1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f010 ff38 	bl	80126c4 <_ZN3ADC7turn_onEh>
  });
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_ZZ4mainENKUlvE2_clEv>:
  state_machine.add_update_action([&]() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	  adc_value = ADC::get_value(adc1).value();
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f010 ff85 	bl	8012780 <_ZN3ADC9get_valueEh>
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fb58 	bl	8001f30 <_ZNOSt8optionalIfE5valueEv>
 8001880:	4603      	mov	r3, r0
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a02      	ldr	r2, [pc, #8]	; (8001890 <_ZZ4mainENKUlvE2_clEv+0x34>)
 8001886:	6013      	str	r3, [r2, #0]
  }, on);
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	240007e0 	.word	0x240007e0

08001894 <main>:
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b0a8      	sub	sp, #160	; 0xa0
 8001898:	af00      	add	r7, sp, #0
  HAL_Init();
 800189a:	f003 fc33 	bl	8005104 <HAL_Init>
  uint8_t adc1 = ADC::inscribe(PF11).value();
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <main+0x180>)
 80018a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018a4:	f010 fe6e 	bl	8012584 <_ZN3ADC8inscribeE3Pin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	813b      	strh	r3, [r7, #8]
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 fa5f 	bl	8001d74 <_ZNOSt8optionalIhE5valueEv>
 80018b6:	4603      	mov	r3, r0
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	71fb      	strb	r3, [r7, #7]
  }).value();
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4629      	mov	r1, r5
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fa70 	bl	8001da8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	4619      	mov	r1, r3
 80018ce:	4852      	ldr	r0, [pc, #328]	; (8001a18 <main+0x184>)
 80018d0:	f014 fc2c 	bl	801612c <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE>
 80018d4:	4603      	mov	r3, r0
 80018d6:	81bb      	strh	r3, [r7, #12]
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa49 	bl	8001d74 <_ZNOSt8optionalIhE5valueEv>
 80018e2:	4603      	mov	r3, r0
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe4e 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
  SystemClock_Config();
 80018f4:	f000 f894 	bl	8001a20 <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 80018f8:	f000 f91c 	bl	8001b34 <_Z24PeriphCommonClock_Configv>
  MX_GPIO_Init();
 80018fc:	f7ff fbca 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8001900:	f7ff f8b6 	bl	8000a70 <MX_DMA_Init>
  MX_ETH_Init();
 8001904:	f7ff f8e4 	bl	8000ad0 <MX_ETH_Init>
  ADC::start();
 8001908:	f010 feb8 	bl	801267c <_ZN3ADC5startEv>
  MX_FDCAN1_Init();
 800190c:	f7ff f9fa 	bl	8000d04 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001910:	f002 fae2 	bl	8003ed8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001914:	f002 fb94 	bl	8004040 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001918:	f002 fc0e 	bl	8004138 <MX_TIM4_Init>
  MX_TIM8_Init();
 800191c:	f002 fc88 	bl	8004230 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001920:	f002 fce0 	bl	80042e4 <MX_TIM12_Init>
  MX_TIM23_Init();
 8001924:	f002 feb4 	bl	8004690 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 8001928:	f003 fa78 	bl	8004e1c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800192c:	f003 fac2 	bl	8004eb4 <MX_USART2_UART_Init>
  MX_CORDIC_Init();
 8001930:	f7ff f868 	bl	8000a04 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001934:	f7ff fb78 	bl	8001028 <MX_FMAC_Init>
  MX_RTC_Init();
 8001938:	f002 f834 	bl	80039a4 <MX_RTC_Init>
  MX_TIM15_Init();
 800193c:	f002 fd22 	bl	8004384 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001940:	f002 fdb2 	bl	80044a8 <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8001944:	f7ff fc64 	bl	8001210 <MX_LPTIM1_Init>
  MX_LPTIM3_Init();
 8001948:	f7ff fcba 	bl	80012c0 <MX_LPTIM3_Init>
  MX_SPI3_Init();
 800194c:	f002 f882 	bl	8003a54 <MX_SPI3_Init>
  MX_TIM17_Init();
 8001950:	f002 fe24 	bl	800459c <MX_TIM17_Init>
  MX_FDCAN3_Init();
 8001954:	f7ff fa3a 	bl	8000dcc <MX_FDCAN3_Init>
  MX_LPTIM2_Init();
 8001958:	f7ff fc86 	bl	8001268 <MX_LPTIM2_Init>
  Time::start();
 800195c:	f016 ff92 	bl	8018884 <_ZN4Time5startEv>
  uint8_t timer1 = Time::register_low_precision_alarm(10, [&]() {
 8001960:	f107 0320 	add.w	r3, r7, #32
 8001964:	4621      	mov	r1, r4
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fa48 	bl	8001dfc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_>
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4619      	mov	r1, r3
 8001972:	200a      	movs	r0, #10
 8001974:	f017 f832 	bl	80189dc <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE>
 8001978:	4603      	mov	r3, r0
 800197a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800197e:	f107 0320 	add.w	r3, r7, #32
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fe04 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
  state_machine = StateMachine(off);
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f01a ff6f 	bl	801c872 <_ZN12StateMachineC1Eh>
 8001994:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001998:	4619      	mov	r1, r3
 800199a:	4820      	ldr	r0, [pc, #128]	; (8001a1c <main+0x188>)
 800199c:	f7ff ff24 	bl	80017e8 <_ZN12StateMachineaSEOS_>
 80019a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fed7 	bl	8001758 <_ZN12StateMachineD1Ev>
  state_machine.add_state(on);
 80019aa:	2101      	movs	r1, #1
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <main+0x188>)
 80019ae:	f01a ff9e 	bl	801c8ee <_ZN12StateMachine9add_stateEh>
  state_machine.add_state(sleep);
 80019b2:	2102      	movs	r1, #2
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <main+0x188>)
 80019b6:	f01a ff9a 	bl	801c8ee <_ZN12StateMachine9add_stateEh>
  state_machine.add_state(fault);
 80019ba:	2103      	movs	r1, #3
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <main+0x188>)
 80019be:	f01a ff96 	bl	801c8ee <_ZN12StateMachine9add_stateEh>
  state_machine.add_enter_action(off, on, [&]() {
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	461a      	mov	r2, r3
 80019c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fa79 	bl	8001ec4 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE1_vvEET_>
 80019d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019d6:	2201      	movs	r2, #1
 80019d8:	2100      	movs	r1, #0
 80019da:	4810      	ldr	r0, [pc, #64]	; (8001a1c <main+0x188>)
 80019dc:	f01a ffd1 	bl	801c982 <_ZN12StateMachine16add_enter_actionEhhSt8functionIFvvEE>
 80019e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fdd3 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
  state_machine.add_update_action([&]() {
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	461a      	mov	r2, r3
 80019ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fab5 	bl	8001f64 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE2_vvEET_>
 80019fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80019fe:	2201      	movs	r2, #1
 8001a00:	4619      	mov	r1, r3
 8001a02:	4806      	ldr	r0, [pc, #24]	; (8001a1c <main+0x188>)
 8001a04:	f01a ffa6 	bl	801c954 <_ZN12StateMachine17add_update_actionESt8functionIFvvEEh>
 8001a08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fdbf 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <main+0x17e>
 8001a14:	24000ec4 	.word	0x24000ec4
 8001a18:	240010f4 	.word	0x240010f4
 8001a1c:	24000794 	.word	0x24000794

08001a20 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09c      	sub	sp, #112	; 0x70
 8001a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2a:	224c      	movs	r2, #76	; 0x4c
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f024 fc7a 	bl	8026328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2220      	movs	r2, #32
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f024 fc74 	bl	8026328 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a40:	2002      	movs	r0, #2
 8001a42:	f009 fcf1 	bl	800b428 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <_Z18SystemClock_Configv+0x10c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a37      	ldr	r2, [pc, #220]	; (8001b2c <_Z18SystemClock_Configv+0x10c>)
 8001a50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <_Z18SystemClock_Configv+0x10c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a62:	4b32      	ldr	r3, [pc, #200]	; (8001b2c <_Z18SystemClock_Configv+0x10c>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d000      	beq.n	8001a7c <_Z18SystemClock_Configv+0x5c>
 8001a7a:	e7f2      	b.n	8001a62 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <_Z18SystemClock_Configv+0x110>)
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f023 0303 	bic.w	r3, r3, #3
 8001a84:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <_Z18SystemClock_Configv+0x110>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001a8c:	2309      	movs	r3, #9
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a96:	2301      	movs	r3, #1
 8001a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001aa6:	f240 1313 	movw	r3, #275	; 0x113
 8001aaa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001aac:	2301      	movs	r3, #1
 8001aae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f009 fce7 	bl	800b49c <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8001ade:	f000 f85a 	bl	8001b96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae2:	233f      	movs	r3, #63	; 0x3f
 8001ae4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001aee:	2308      	movs	r3, #8
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001afe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b00:	2340      	movs	r3, #64	; 0x40
 8001b02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2103      	movs	r1, #3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00a f875 	bl	800bbf8 <HAL_RCC_ClockConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bf14      	ite	ne
 8001b14:	2301      	movne	r3, #1
 8001b16:	2300      	moveq	r3, #0
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 8001b1e:	f000 f83a 	bl	8001b96 <Error_Handler>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3770      	adds	r7, #112	; 0x70
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	58024800 	.word	0x58024800
 8001b30:	58024400 	.word	0x58024400

08001b34 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ae      	sub	sp, #184	; 0xb8
 8001b38:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	22b4      	movs	r2, #180	; 0xb4
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f024 fbf1 	bl	8026328 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b46:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b4a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8001b50:	2318      	movs	r3, #24
 8001b52:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b60:	23c0      	movs	r3, #192	; 0xc0
 8001b62:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00a fbcb 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf14      	ite	ne
 8001b80:	2301      	movne	r3, #1
 8001b82:	2300      	moveq	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8001b8a:	f000 f804 	bl	8001b96 <Error_Handler>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	37b8      	adds	r7, #184	; 0xb8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9a:	b672      	cpsid	i
}
 8001b9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <Error_Handler+0x8>

08001ba0 <_ZNSaISt8functionIFvvEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
      {
	_M_deallocate(_M_impl._M_start,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f9f1 	bl	8001fb8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fccd 	bl	8001578 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implD1Ev>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8001be8:	b5b0      	push	{r4, r5, r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f9ef 	bl	8001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 8001c00:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001c02:	461a      	mov	r2, r3
 8001c04:	4629      	mov	r1, r5
 8001c06:	4620      	mov	r0, r4
 8001c08:	f000 f9f4 	bl	8001ff4 <_ZSt8_DestroyIPSt8functionIFvvEES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ffd1 	bl	8001bb6 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EED1Ev>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdb0      	pop	{r4, r5, r7, pc}

08001c1e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f9f2 	bl	8002010 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh5StateEEEC1Ev>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f9fa 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fc1d 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh5StateEEED1Ev>:
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fa08 	bl	800207c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f9e4 	bl	800203e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fc96 	bl	80015aa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f9ff 	bl	8002094 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEEC1Ev>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 f9c5 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fbe8 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEED1Ev>:
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fa0a 	bl	80020ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_beginEv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f9e6 	bl	80020ac <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fc94 	bl	8001610 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fa01 	bl	8002102 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEEC1Ev>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 f990 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fbb3 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEED1Ev>:
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa0c 	bl	8002158 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_beginEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f9e8 	bl	800211a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc92 	bl	8001676 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      // _M_reset is a 'safe' operation with no precondition.
      constexpr void
      _M_reset() noexcept
      { static_cast<_Dp*>(this)->_M_payload._M_reset(); }

      constexpr bool _M_is_engaged() const noexcept
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_ZNOSt8optionalIhE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&&
      value()&&
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffed 	bl	8001d5c <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 8001d82:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <_ZNOSt8optionalIhE5valueEv+0x26>
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f9f1 	bl	8002170 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f9fa 	bl	800218a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8001d96:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 8001d98:	e001      	b.n	8001d9e <_ZNOSt8optionalIhE5valueEv+0x2a>
 8001d9a:	f7ff fb69 	bl	8001470 <_ZSt27__throw_bad_optional_accessv>
      }
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	7039      	strb	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fbbe 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001dba:	463b      	mov	r3, r7
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 f9ef 	bl	80021a0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00f      	beq.n	8001de8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001dc8:	687c      	ldr	r4, [r7, #4]
 8001dca:	463b      	mov	r3, r7
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f9f2 	bl	80021b6 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f000 f9f8 	bl	80021cc <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x4c>)
 8001de0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE_vvEET_+0x50>)
 8001de6:	609a      	str	r2, [r3, #8]
	  }
      }
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	bf00      	nop
 8001df4:	080021f1 	.word	0x080021f1
 8001df8:	0800220f 	.word	0x0800220f

08001dfc <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fb94 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8001e0e:	463b      	mov	r3, r7
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 fa1b 	bl	800224c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E21_M_not_empty_functionIS1_EEbRKT_>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00f      	beq.n	8001e3c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001e1c:	687c      	ldr	r4, [r7, #4]
 8001e1e:	463b      	mov	r3, r7
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fa1e 	bl	8002262 <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f000 fa24 	bl	8002278 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_+0x4c>)
 8001e34:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <_ZNSt8functionIFvvEEC1IZ4mainEUlvE0_vvEET_+0x50>)
 8001e3a:	609a      	str	r2, [r3, #8]
      }
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	0800229d 	.word	0x0800229d
 8001e4c:	080022bb 	.word	0x080022bb

08001e50 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EEaSEOS9_>:
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
    operator=(_Rb_tree&& __x)
    noexcept(_Alloc_traits::_S_nothrow_move()
	     && is_nothrow_move_assignable<_Compare>::value)
    {
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 fa4b 	bl	80022f8 <_ZSt4moveIRSt4lessIhEEONSt16remove_referenceIT_E4typeEOS4_>
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
 8001e62:	4622      	mov	r2, r4
 8001e64:	6839      	ldr	r1, [r7, #0]
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa51 	bl	800230e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_move_assignERS9_St17integral_constantIbLb1EE>
      return *this;
 8001e6c:	687b      	ldr	r3, [r7, #4]
    }
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EEaSEOSF_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e76:	b590      	push	{r4, r7, lr}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fa38 	bl	80022f8 <_ZSt4moveIRSt4lessIhEEONSt16remove_referenceIT_E4typeEOS4_>
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
 8001e88:	4622      	mov	r2, r4
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fa68 	bl	8002362 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_move_assignERSF_St17integral_constantIbLb1EE>
      return *this;
 8001e92:	687b      	ldr	r3, [r7, #4]
    }
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd90      	pop	{r4, r7, pc}

08001e9c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EEaSEOSI_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa25 	bl	80022f8 <_ZSt4moveIRSt4lessIhEEONSt16remove_referenceIT_E4typeEOS4_>
      _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
 8001eae:	4622      	mov	r2, r4
 8001eb0:	6839      	ldr	r1, [r7, #0]
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fa7f 	bl	80023b6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_move_assignERSI_St17integral_constantIbLb1EE>
      return *this;
 8001eb8:	687b      	ldr	r3, [r7, #4]
    }
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd90      	pop	{r4, r7, pc}
	...

08001ec4 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fb30 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fa96 	bl	800240a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E21_M_not_empty_functionIS1_EEbRKT_>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00f      	beq.n	8001f04 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001ee4:	687c      	ldr	r4, [r7, #4]
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fa99 	bl	8002420 <_ZSt4moveIRZ4mainEUlvE1_EONSt16remove_referenceIT_E4typeEOS3_>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	f000 fa9f 	bl	8002436 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE1_vvEET_+0x4c>)
 8001efc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE1_vvEET_+0x50>)
 8001f02:	609a      	str	r2, [r3, #8]
      }
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0800245b 	.word	0x0800245b
 8001f14:	08002479 	.word	0x08002479

08001f18 <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	791b      	ldrb	r3, [r3, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_ZNOSt8optionalIfE5valueEv>:
      value()&&
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffed 	bl	8001f18 <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>
 8001f3e:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <_ZNOSt8optionalIfE5valueEv+0x26>
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fab6 	bl	80024b6 <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fabf 	bl	80024d0 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 8001f52:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 8001f54:	e001      	b.n	8001f5a <_ZNOSt8optionalIfE5valueEv+0x2a>
 8001f56:	f7ff fa8b 	bl	8001470 <_ZSt27__throw_bad_optional_accessv>
      }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fae0 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8001f76:	463b      	mov	r3, r7
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fab4 	bl	80024e6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E21_M_not_empty_functionIS1_EEbRKT_>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001f84:	687c      	ldr	r4, [r7, #4]
 8001f86:	463b      	mov	r3, r7
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fab7 	bl	80024fc <_ZSt4moveIRZ4mainEUlvE2_EONSt16remove_referenceIT_E4typeEOS3_>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 fabd 	bl	8002512 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE2_vvEET_+0x4c>)
 8001f9c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <_ZNSt8functionIFvvEEC1IZ4mainEUlvE2_vvEET_+0x50>)
 8001fa2:	609a      	str	r2, [r3, #8]
      }
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08002537 	.word	0x08002537
 8001fb4:	08002555 	.word	0x08002555

08001fb8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	if (__p)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	68b9      	ldr	r1, [r7, #8]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 fade 	bl	8002592 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE10deallocateERS3_PS2_j>
      }
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_ZSt8_DestroyIPSt8functionIFvvEES2_EvT_S4_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 fae4 	bl	80025d0 <_ZSt8_DestroyIPSt8functionIFvvEEEvT_S4_>
    }
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh5StateEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 faef 	bl	80025fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEEC1Ev>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
      { }
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	{
	  _M_erase(_S_right(__x));
 800204e:	6838      	ldr	r0, [r7, #0]
 8002050:	f000 fadf 	bl	8002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fff0 	bl	800203e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800205e:	6838      	ldr	r0, [r7, #0]
 8002060:	f000 fae3 	bl	800262a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002064:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002066:	6839      	ldr	r1, [r7, #0]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 faea 	bl	8002642 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002072:	e7e9      	b.n	8002048 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
	}
    }
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEEC1Ev>:
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fae1 	bl	8002664 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEEC1Ev>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d012      	beq.n	80020e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0x36>
	  _M_erase(_S_right(__x));
 80020bc:	6838      	ldr	r0, [r7, #0]
 80020be:	f000 fadc 	bl	800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fff0 	bl	80020ac <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	  _Link_type __y = _S_left(__x);
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f000 fae0 	bl	8002692 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 80020d2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fae7 	bl	80026aa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	  __x = __y;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80020e0:	e7e9      	b.n	80020b6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E+0xa>
    }
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEEC1Ev>:
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fade 	bl	80026cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEEC1Ev>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d012      	beq.n	8002150 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E+0x36>
	  _M_erase(_S_right(__x));
 800212a:	6838      	ldr	r0, [r7, #0]
 800212c:	f000 fad9 	bl	80026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>
 8002130:	4603      	mov	r3, r0
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fff0 	bl	800211a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E>
	  _Link_type __y = _S_left(__x);
 800213a:	6838      	ldr	r0, [r7, #0]
 800213c:	f000 fadd 	bl	80026fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_S_leftEPSt18_Rb_tree_node_base>
 8002140:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8002142:	6839      	ldr	r1, [r7, #0]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fae4 	bl	8002712 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISE_E>
	  __x = __y;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800214e:	e7e9      	b.n	8002124 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E+0xa>
    }
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fada 	bl	8002734 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 8002180:	4603      	mov	r3, r0
      }
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80021a8:	2301      	movs	r3, #1
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80021d6:	6838      	ldr	r0, [r7, #0]
 80021d8:	f7ff ffed 	bl	80021b6 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 80021dc:	4603      	mov	r3, r0
 80021de:	4622      	mov	r2, r4
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fab1 	bl	800274a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd90      	pop	{r4, r7, pc}

080021f0 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fabb 	bl	8002774 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80021fe:	4603      	mov	r3, r0
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fac7 	bl	8002794 <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 8002206:	bf00      	nop
      }
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800220e:	b590      	push	{r4, r7, lr}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	4613      	mov	r3, r2
 800221a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d109      	bne.n	8002236 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002222:	68b8      	ldr	r0, [r7, #8]
 8002224:	f000 faa6 	bl	8002774 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8002228:	4604      	mov	r4, r0
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fac2 	bl	80027b4 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 8002230:	4603      	mov	r3, r0
 8002232:	601c      	str	r4, [r3, #0]
	    break;
 8002234:	e005      	b.n	8002242 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	461a      	mov	r2, r3
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fac5 	bl	80027cc <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8002242:	2300      	movs	r3, #0
      }
 8002244:	4618      	mov	r0, r3
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bd90      	pop	{r4, r7, pc}

0800224c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002254:	2301      	movs	r3, #1
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f7ff ffed 	bl	8002262 <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
 8002288:	4603      	mov	r3, r0
 800228a:	4622      	mov	r2, r4
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fac7 	bl	8002822 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fad1 	bl	800284c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fadd 	bl	800286c <_ZSt10__invoke_rIvRZ4mainEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 80022b2:	bf00      	nop
      }
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80022ba:	b590      	push	{r4, r7, lr}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d109      	bne.n	80022e2 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80022ce:	68b8      	ldr	r0, [r7, #8]
 80022d0:	f000 fabc 	bl	800284c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80022d4:	4604      	mov	r4, r0
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fad8 	bl	800288c <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE0_EERT_v>
 80022dc:	4603      	mov	r3, r0
 80022de:	601c      	str	r4, [r3, #0]
	    break;
 80022e0:	e005      	b.n	80022ee <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	461a      	mov	r2, r3
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 fadb 	bl	80028a4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 80022ee:	2300      	movs	r3, #0
      }
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd90      	pop	{r4, r7, pc}

080022f8 <_ZSt4moveIRSt4lessIhEEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_move_assignERS9_St17integral_constantIbLb1EE>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800230e:	b590      	push	{r4, r7, lr}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	713a      	strb	r2, [r7, #4]
      clear();
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 faed 	bl	80028fa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE5clearEv>
      if (__x._M_root() != nullptr)
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f000 faff 	bl	8002924 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_M_rootEv>
 8002326:	4603      	mov	r3, r0
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d004      	beq.n	8002342 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_move_assignERS9_St17integral_constantIbLb1EE+0x34>
	_M_move_data(__x, true_type());
 8002338:	4622      	mov	r2, r4
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fafd 	bl	800293c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_move_dataERS9_St17integral_constantIbLb1EE>
      std::__alloc_on_move(_M_get_Node_allocator(),
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fb0c 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8002348:	4604      	mov	r4, r0
			   __x._M_get_Node_allocator());
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f000 fb08 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8002350:	4603      	mov	r3, r0
      std::__alloc_on_move(_M_get_Node_allocator(),
 8002352:	4619      	mov	r1, r3
 8002354:	4620      	mov	r0, r4
 8002356:	f000 fb0e 	bl	8002976 <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEEvRT_S8_>
    }
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}

08002362 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_move_assignERSF_St17integral_constantIbLb1EE>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8002362:	b590      	push	{r4, r7, lr}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	713a      	strb	r2, [r7, #4]
      clear();
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fb0d 	bl	800298e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE5clearEv>
      if (__x._M_root() != nullptr)
 8002374:	68b8      	ldr	r0, [r7, #8]
 8002376:	f000 fb1f 	bl	80029b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_M_rootEv>
 800237a:	4603      	mov	r3, r0
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf14      	ite	ne
 8002382:	2301      	movne	r3, #1
 8002384:	2300      	moveq	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_move_assignERSF_St17integral_constantIbLb1EE+0x34>
	_M_move_data(__x, true_type());
 800238c:	4622      	mov	r2, r4
 800238e:	68b9      	ldr	r1, [r7, #8]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fb1d 	bl	80029d0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_move_dataERSF_St17integral_constantIbLb1EE>
      std::__alloc_on_move(_M_get_Node_allocator(),
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 fb2c 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 800239c:	4604      	mov	r4, r0
			   __x._M_get_Node_allocator());
 800239e:	68b8      	ldr	r0, [r7, #8]
 80023a0:	f000 fb28 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 80023a4:	4603      	mov	r3, r0
      std::__alloc_on_move(_M_get_Node_allocator(),
 80023a6:	4619      	mov	r1, r3
 80023a8:	4620      	mov	r0, r4
 80023aa:	f000 fb2e 	bl	8002a0a <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEEvRT_SG_>
    }
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_move_assignERSI_St17integral_constantIbLb1EE>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023b6:	b590      	push	{r4, r7, lr}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	713a      	strb	r2, [r7, #4]
      clear();
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fb2d 	bl	8002a22 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE5clearEv>
      if (__x._M_root() != nullptr)
 80023c8:	68b8      	ldr	r0, [r7, #8]
 80023ca:	f000 fb3f 	bl	8002a4c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_M_rootEv>
 80023ce:	4603      	mov	r3, r0
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_move_assignERSI_St17integral_constantIbLb1EE+0x34>
	_M_move_data(__x, true_type());
 80023e0:	4622      	mov	r2, r4
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fb3d 	bl	8002a64 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_move_dataERSI_St17integral_constantIbLb1EE>
      std::__alloc_on_move(_M_get_Node_allocator(),
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fb4c 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 80023f0:	4604      	mov	r4, r0
			   __x._M_get_Node_allocator());
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f000 fb48 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 80023f8:	4603      	mov	r3, r0
      std::__alloc_on_move(_M_get_Node_allocator(),
 80023fa:	4619      	mov	r1, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f000 fb4e 	bl	8002a9e <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEEvRT_SJ_>
    }
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002412:	2301      	movs	r3, #1
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_ZSt4moveIRZ4mainEUlvE1_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002436:	b590      	push	{r4, r7, lr}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002440:	6838      	ldr	r0, [r7, #0]
 8002442:	f7ff ffed 	bl	8002420 <_ZSt4moveIRZ4mainEUlvE1_EONSt16remove_referenceIT_E4typeEOS3_>
 8002446:	4603      	mov	r3, r0
 8002448:	4622      	mov	r2, r4
 800244a:	4619      	mov	r1, r3
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fb32 	bl	8002ab6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bd90      	pop	{r4, r7, pc}

0800245a <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE1_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fb40 	bl	8002ae8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E14_M_get_pointerERKSt9_Any_data>
 8002468:	4603      	mov	r3, r0
 800246a:	4618      	mov	r0, r3
 800246c:	f000 fb4c 	bl	8002b08 <_ZSt10__invoke_rIvRZ4mainEUlvE1_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 8002470:	bf00      	nop
      }
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d109      	bne.n	80024a0 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800248c:	68b8      	ldr	r0, [r7, #8]
 800248e:	f000 fb2b 	bl	8002ae8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E14_M_get_pointerERKSt9_Any_data>
 8002492:	4604      	mov	r4, r0
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fb47 	bl	8002b28 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE1_EERT_v>
 800249a:	4603      	mov	r3, r0
 800249c:	601c      	str	r4, [r3, #0]
	    break;
 800249e:	e005      	b.n	80024ac <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fb4a 	bl	8002b40 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 80024ac:	2300      	movs	r3, #0
      }
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fb68 	bl	8002b96 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>
 80024c6:	4603      	mov	r3, r0
      }
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
	  { return true; }
 80024ee:	2301      	movs	r3, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <_ZSt4moveIRZ4mainEUlvE2_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002512:	b590      	push	{r4, r7, lr}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800251c:	6838      	ldr	r0, [r7, #0]
 800251e:	f7ff ffed 	bl	80024fc <_ZSt4moveIRZ4mainEUlvE2_EONSt16remove_referenceIT_E4typeEOS3_>
 8002522:	4603      	mov	r3, r0
 8002524:	4622      	mov	r2, r4
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fb3f 	bl	8002bac <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bd90      	pop	{r4, r7, pc}

08002536 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE2_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fb4d 	bl	8002bde <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E14_M_get_pointerERKSt9_Any_data>
 8002544:	4603      	mov	r3, r0
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fb59 	bl	8002bfe <_ZSt10__invoke_rIvRZ4mainEUlvE2_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>
				     std::forward<_ArgTypes>(__args)...);
 800254c:	bf00      	nop
      }
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	4613      	mov	r3, r2
 8002560:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d109      	bne.n	800257c <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002568:	68b8      	ldr	r0, [r7, #8]
 800256a:	f000 fb38 	bl	8002bde <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E14_M_get_pointerERKSt9_Any_data>
 800256e:	4604      	mov	r4, r0
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fb54 	bl	8002c1e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE2_EERT_v>
 8002576:	4603      	mov	r3, r0
 8002578:	601c      	str	r4, [r3, #0]
	    break;
 800257a:	e005      	b.n	8002588 <_ZNSt17_Function_handlerIFvvEZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	461a      	mov	r2, r3
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fb57 	bl	8002c36 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 8002588:	2300      	movs	r3, #0
      }
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bd90      	pop	{r4, r7, pc}

08002592 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002592:	b580      	push	{r7, lr}
 8002594:	b088      	sub	sp, #32
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80025aa:	f7fe ff4d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 80025b4:	69b8      	ldr	r0, [r7, #24]
 80025b6:	f023 fd73 	bl	80260a0 <_ZdlPv>
	    return;
 80025ba:	e005      	b.n	80025c8 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE10deallocateERS3_PS2_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	69f8      	ldr	r0, [r7, #28]
 80025c2:	f000 fd65 	bl	8003090 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_ZSt8_DestroyIPSt8functionIFvvEEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80025da:	f7fe ff35 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d004      	beq.n	80025ee <_ZSt8_DestroyIPSt8functionIFvvEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 fb50 	bl	8002c8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt8functionIFvvEEEEvT_S6_>
 80025ec:	e003      	b.n	80025f6 <_ZSt8_DestroyIPSt8functionIFvvEEEvT_S4_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb4b 	bl	8002c8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt8functionIFvvEEEEvT_S6_>
    }
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fb34 	bl	8002cbc <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fb45 	bl	8002ce6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEEC1Ev>:
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80026b4:	6839      	ldr	r1, [r7, #0]
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fb27 	bl	8002d0a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>
	_M_put_node(__p);
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb38 	bl	8002d34 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>
      }
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEEC1Ev>:
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISE_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800271c:	6839      	ldr	r1, [r7, #0]
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fb1a 	bl	8002d58 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISE_E>
	_M_put_node(__p);
 8002724:	6839      	ldr	r1, [r7, #0]
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb2b 	bl	8002d82 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_put_nodeEPSt13_Rb_tree_nodeISE_E>
      }
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4618      	mov	r0, r3
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002756:	68b8      	ldr	r0, [r7, #8]
 8002758:	f7ff fd2d 	bl	80021b6 <_ZSt4moveIRZ4mainEUlvE_EONSt16remove_referenceIT_E4typeEOS3_>
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7fe fed4 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002762:	4603      	mov	r3, r0
 8002764:	4619      	mov	r1, r3
 8002766:	2001      	movs	r0, #1
 8002768:	f7fe fe76 	bl	8001458 <_ZnwjPv>
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fb12 	bl	8002da6 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 8002782:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fb1a 	bl	8002dbe <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>
 800278a:	4603      	mov	r3, r0
	}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <_ZSt10__invoke_rIvRZ4mainEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fb19 	bl	8002dd4 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f000 fb1f 	bl	8002dea <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>:
      _M_access()
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7fe fea4 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80027cc:	b5b0      	push	{r4, r5, r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	4613      	mov	r3, r2
 80027d8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d016      	beq.n	800280e <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	dc19      	bgt.n	8002818 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d002      	beq.n	80027ee <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d00a      	beq.n	8002802 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 80027ec:	e014      	b.n	8002818 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80027ee:	68b8      	ldr	r0, [r7, #8]
 80027f0:	f7ff ffc0 	bl	8002774 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80027f4:	4604      	mov	r4, r0
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f7ff ffdc 	bl	80027b4 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE_EERT_v>
 80027fc:	4603      	mov	r3, r0
 80027fe:	601c      	str	r4, [r3, #0]
	      break;
 8002800:	e00a      	b.n	8002818 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002802:	462a      	mov	r2, r5
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 faff 	bl	8002e0a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 800280c:	e004      	b.n	8002818 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800280e:	4621      	mov	r1, r4
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fb0f 	bl	8002e34 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002816:	bf00      	nop
	  return false;
 8002818:	2300      	movs	r3, #0
	}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bdb0      	pop	{r4, r5, r7, pc}

08002822 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800282e:	68b8      	ldr	r0, [r7, #8]
 8002830:	f7ff fd17 	bl	8002262 <_ZSt4moveIRZ4mainEUlvE0_EONSt16remove_referenceIT_E4typeEOS3_>
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7fe fe68 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 800283a:	4603      	mov	r3, r0
 800283c:	4619      	mov	r1, r3
 800283e:	2001      	movs	r0, #1
 8002840:	f7fe fe0a 	bl	8001458 <_ZnwjPv>
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 faf9 	bl	8002e4c <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>
 800285a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fb01 	bl	8002e64 <_ZSt11__addressofIKZ4mainEUlvE0_EPT_RS2_>
 8002862:	4603      	mov	r3, r0
	}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_ZSt10__invoke_rIvRZ4mainEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fb00 	bl	8002e7a <_ZSt7forwardIRZ4mainEUlvE0_EOT_RNSt16remove_referenceIS2_E4typeE>
 800287a:	4603      	mov	r3, r0
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f000 fb06 	bl	8002e90 <_ZSt13__invoke_implIvRZ4mainEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE0_EERT_v>:
      _M_access()
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe fe38 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d016      	beq.n	80028e6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	dc19      	bgt.n	80028f0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00a      	beq.n	80028da <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 80028c4:	e014      	b.n	80028f0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80028c6:	68b8      	ldr	r0, [r7, #8]
 80028c8:	f7ff ffc0 	bl	800284c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80028cc:	4604      	mov	r4, r0
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f7ff ffdc 	bl	800288c <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE0_EERT_v>
 80028d4:	4603      	mov	r3, r0
 80028d6:	601c      	str	r4, [r3, #0]
	      break;
 80028d8:	e00a      	b.n	80028f0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80028da:	462a      	mov	r2, r5
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fae6 	bl	8002eb0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 80028e4:	e004      	b.n	80028f0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80028e6:	4621      	mov	r1, r4
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 faf6 	bl	8002eda <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80028ee:	bf00      	nop
	  return false;
 80028f0:	2300      	movs	r3, #0
	}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bdb0      	pop	{r4, r5, r7, pc}

080028fa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b082      	sub	sp, #8
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	_M_erase(_M_begin());
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7ff fbba 	bl	800207c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fb96 	bl	800203e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	_M_impl._M_reset();
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fde1 	bl	80014de <_ZNSt15_Rb_tree_header8_M_resetEv>
      }
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3308      	adds	r3, #8
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_move_dataERS9_St17integral_constantIbLb1EE>:
      _M_move_data(_Rb_tree& __x, true_type)
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	713a      	strb	r2, [r7, #4]
      { _M_impl._M_move_data(__x._M_impl); }
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f7fe fd9f 	bl	8001496 <_ZNSt15_Rb_tree_header12_M_move_dataERS_>
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEEvRT_S8_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 8002980:	6838      	ldr	r0, [r7, #0]
 8002982:	f000 fab6 	bl	8002ef2 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKh5StateEEEEONSt16remove_referenceIT_E4typeEOS9_>
    }
 8002986:	bf00      	nop
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	_M_erase(_M_begin());
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fba7 	bl	80020ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_beginEv>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff fb83 	bl	80020ac <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_eraseEPSt13_Rb_tree_nodeISB_E>
	_M_impl._M_reset();
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fd97 	bl	80014de <_ZNSt15_Rb_tree_header8_M_resetEv>
      }
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3308      	adds	r3, #8
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_move_dataERSF_St17integral_constantIbLb1EE>:
      _M_move_data(_Rb_tree& __x, true_type)
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	713a      	strb	r2, [r7, #4]
      { _M_impl._M_move_data(__x._M_impl); }
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f7fe fd55 	bl	8001496 <_ZNSt15_Rb_tree_header12_M_move_dataERS_>
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4618      	mov	r0, r3
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEEvRT_SG_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f000 fa77 	bl	8002f08 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEEONSt16remove_referenceIT_E4typeEOSH_>
    }
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
	_M_erase(_M_begin());
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fb94 	bl	8002158 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_beginEv>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff fb70 	bl	800211a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_eraseEPSt13_Rb_tree_nodeISE_E>
	_M_impl._M_reset();
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd4d 	bl	80014de <_ZNSt15_Rb_tree_header8_M_resetEv>
      }
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_M_rootEv>:
      _M_root() _GLIBCXX_NOEXCEPT
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_parent; }
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3308      	adds	r3, #8
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_move_dataERSI_St17integral_constantIbLb1EE>:
      _M_move_data(_Rb_tree& __x, true_type)
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	713a      	strb	r2, [r7, #4]
      { _M_impl._M_move_data(__x._M_impl); }
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1d1a      	adds	r2, r3, #4
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3304      	adds	r3, #4
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f7fe fd0b 	bl	8001496 <_ZNSt15_Rb_tree_header12_M_move_dataERS_>
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_ZSt15__alloc_on_moveISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEEvRT_SJ_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 8002aa8:	6838      	ldr	r0, [r7, #0]
 8002aaa:	f000 fa38 	bl	8002f1e <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>
    }
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002ab6:	b590      	push	{r4, r7, lr}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	f7ff fcac 	bl	8002420 <_ZSt4moveIRZ4mainEUlvE1_EONSt16remove_referenceIT_E4typeEOS3_>
 8002ac8:	4604      	mov	r4, r0
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7fe fd1d 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2004      	movs	r0, #4
 8002ad6:	f7fe fcbf 	bl	8001458 <_ZnwjPv>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fa1f 	bl	8002f34 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE1_EERKT_v>
 8002af6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fa27 	bl	8002f4c <_ZSt11__addressofIKZ4mainEUlvE1_EPT_RS2_>
 8002afe:	4603      	mov	r3, r0
	}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZSt10__invoke_rIvRZ4mainEUlvE1_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa26 	bl	8002f62 <_ZSt7forwardIRZ4mainEUlvE1_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f000 fa2c 	bl	8002f78 <_ZSt13__invoke_implIvRZ4mainEUlvE1_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE1_EERT_v>:
      _M_access()
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe fcea 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d016      	beq.n	8002b82 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	dc19      	bgt.n	8002b8c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d002      	beq.n	8002b62 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d00a      	beq.n	8002b76 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8002b60:	e014      	b.n	8002b8c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002b62:	68b8      	ldr	r0, [r7, #8]
 8002b64:	f7ff ffc0 	bl	8002ae8 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E14_M_get_pointerERKSt9_Any_data>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ffdc 	bl	8002b28 <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE1_EERT_v>
 8002b70:	4603      	mov	r3, r0
 8002b72:	601c      	str	r4, [r3, #0]
	      break;
 8002b74:	e00a      	b.n	8002b8c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002b76:	462a      	mov	r2, r5
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa0c 	bl	8002f98 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 8002b80:	e004      	b.n	8002b8c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002b82:	4621      	mov	r1, r4
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa20 	bl	8002fca <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002b8a:	bf00      	nop
	  return false;
 8002b8c:	2300      	movs	r3, #0
	}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}

08002b96 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>:
      _M_get() noexcept
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002bb8:	68b8      	ldr	r0, [r7, #8]
 8002bba:	f7ff fc9f 	bl	80024fc <_ZSt4moveIRZ4mainEUlvE2_EONSt16remove_referenceIT_E4typeEOS3_>
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7fe fca2 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4619      	mov	r1, r3
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f7fe fc44 	bl	8001458 <_ZnwjPv>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}

08002bde <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f9fb 	bl	8002fe2 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE2_EERKT_v>
 8002bec:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa03 	bl	8002ffa <_ZSt11__addressofIKZ4mainEUlvE2_EPT_RS2_>
 8002bf4:	4603      	mov	r3, r0
	}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_ZSt10__invoke_rIvRZ4mainEUlvE2_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES3_E4typeEOS4_DpOS5_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002bfe:	b590      	push	{r4, r7, lr}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa02 	bl	8003010 <_ZSt7forwardIRZ4mainEUlvE2_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 fa08 	bl	8003026 <_ZSt13__invoke_implIvRZ4mainEUlvE2_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}

08002c1e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE2_EERT_v>:
      _M_access()
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fc6f 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002c36:	b5b0      	push	{r4, r5, r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	60f8      	str	r0, [r7, #12]
 8002c3e:	60b9      	str	r1, [r7, #8]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d016      	beq.n	8002c78 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	dc19      	bgt.n	8002c82 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d002      	beq.n	8002c58 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d00a      	beq.n	8002c6c <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8002c56:	e014      	b.n	8002c82 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002c58:	68b8      	ldr	r0, [r7, #8]
 8002c5a:	f7ff ffc0 	bl	8002bde <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E14_M_get_pointerERKSt9_Any_data>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff ffdc 	bl	8002c1e <_ZNSt9_Any_data9_M_accessIPZ4mainEUlvE2_EERT_v>
 8002c66:	4603      	mov	r3, r0
 8002c68:	601c      	str	r4, [r3, #0]
	      break;
 8002c6a:	e00a      	b.n	8002c82 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f9e8 	bl	8003046 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 8002c76:	e004      	b.n	8002c82 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002c78:	4621      	mov	r1, r4
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f9fc 	bl	8003078 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002c80:	bf00      	nop
	  return false;
 8002c82:	2300      	movs	r3, #0
	}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}

08002c8c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt8functionIFvvEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d00a      	beq.n	8002cb4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt8functionIFvvEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 fa05 	bl	80030ae <_ZSt11__addressofISt8functionIFvvEEEPT_RS3_>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fa0c 	bl	80030c4 <_ZSt8_DestroyISt8functionIFvvEEEvPT_>
	  for (; __first != __last; ++__first)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	3310      	adds	r3, #16
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	e7f0      	b.n	8002c96 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt8functionIFvvEEEEvT_S6_+0xa>
	}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fe4a 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8002ccc:	4604      	mov	r4, r0
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	f000 fa03 	bl	80030da <_ZNSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f000 fa0c 	bl	80030f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE7destroyIS4_EEvRS6_PT_>
      }
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fe35 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6839      	ldr	r1, [r7, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fa06 	bl	800310e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE10deallocateERS6_PS5_j>
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002d0a:	b590      	push	{r4, r7, lr}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fe6d 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	6838      	ldr	r0, [r7, #0]
 8002d1e:	f000 fa15 	bl	800314c <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4619      	mov	r1, r3
 8002d26:	4620      	mov	r0, r4
 8002d28:	f000 fa1e 	bl	8003168 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE7destroyISC_EEvRSE_PT_>
      }
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}

08002d34 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_put_nodeEPSt13_Rb_tree_nodeISB_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fe58 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2201      	movs	r2, #1
 8002d48:	6839      	ldr	r1, [r7, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fa18 	bl	8003180 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE10deallocateERSE_PSD_j>
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeISE_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe90 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	6838      	ldr	r0, [r7, #0]
 8002d6c:	f000 fa27 	bl	80031be <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	4620      	mov	r0, r4
 8002d76:	f000 fa30 	bl	80031da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE7destroyISF_EEvRSH_PT_>
      }
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd90      	pop	{r4, r7, pc}

08002d82 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_put_nodeEPSt13_Rb_tree_nodeISE_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fe7b 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2201      	movs	r2, #1
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fa2a 	bl	80031f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE10deallocateERSH_PSG_j>
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>:
      _M_access() const
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fbb6 	bl	8001520 <_ZNKSt9_Any_data9_M_accessEv>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_ZSt11__addressofIKZ4mainEUlvE_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <_ZSt13__invoke_implIvRZ4mainEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	7138      	strb	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f7ff ffed 	bl	8002dd4 <_ZSt7forwardIRZ4mainEUlvE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fe fc85 	bl	800170c <_ZZ4mainENKUlvE_clEv>
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002e16:	68b8      	ldr	r0, [r7, #8]
 8002e18:	f7ff ffc5 	bl	8002da6 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE_EERKT_v>
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7fe fb74 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	2001      	movs	r0, #1
 8002e28:	f7fe fb16 	bl	8001458 <_ZnwjPv>
	}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f9f6 	bl	8003230 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>
	}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>:
      _M_access() const
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe fb63 	bl	8001520 <_ZNKSt9_Any_data9_M_accessEv>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_ZSt11__addressofIKZ4mainEUlvE0_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <_ZSt7forwardIRZ4mainEUlvE0_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_ZSt13__invoke_implIvRZ4mainEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	7138      	strb	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002e9a:	6838      	ldr	r0, [r7, #0]
 8002e9c:	f7ff ffed 	bl	8002e7a <_ZSt7forwardIRZ4mainEUlvE0_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fc4a 	bl	800173c <_ZZ4mainENKUlvE0_clEv>
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002ebc:	68b8      	ldr	r0, [r7, #8]
 8002ebe:	f7ff ffc5 	bl	8002e4c <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE0_EERKT_v>
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7fe fb21 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f7fe fac3 	bl	8001458 <_ZnwjPv>
	}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f9af 	bl	8003248 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE0_EERT_v>
	}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKh5StateEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEEONSt16remove_referenceIT_E4typeEOSH_>:
    move(_Tp&& __t) noexcept
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEEONSt16remove_referenceIT_E4typeEOSK_>:
    move(_Tp&& __t) noexcept
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE1_EERKT_v>:
      _M_access() const
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fe faef 	bl	8001520 <_ZNKSt9_Any_data9_M_accessEv>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_ZSt11__addressofIKZ4mainEUlvE1_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_ZSt7forwardIRZ4mainEUlvE1_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <_ZSt13__invoke_implIvRZ4mainEUlvE1_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	7138      	strb	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002f82:	6838      	ldr	r0, [r7, #0]
 8002f84:	f7ff ffed 	bl	8002f62 <_ZSt7forwardIRZ4mainEUlvE1_EOT_RNSt16remove_referenceIS2_E4typeE>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fc58 	bl	8001840 <_ZZ4mainENKUlvE1_clEv>
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002fa4:	68b8      	ldr	r0, [r7, #8]
 8002fa6:	f7ff ffc5 	bl	8002f34 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE1_EERKT_v>
 8002faa:	4604      	mov	r4, r0
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f7fe faac 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	2004      	movs	r0, #4
 8002fb8:	f7fe fa4e 	bl	8001458 <_ZnwjPv>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	6013      	str	r3, [r2, #0]
	}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}

08002fca <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE1_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f943 	bl	8003260 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE1_EERT_v>
	}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE2_EERKT_v>:
      _M_access() const
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fe fa98 	bl	8001520 <_ZNKSt9_Any_data9_M_accessEv>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <_ZSt11__addressofIKZ4mainEUlvE2_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <_ZSt7forwardIRZ4mainEUlvE2_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <_ZSt13__invoke_implIvRZ4mainEUlvE2_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	7138      	strb	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003030:	6838      	ldr	r0, [r7, #0]
 8003032:	f7ff ffed 	bl	8003010 <_ZSt7forwardIRZ4mainEUlvE2_EOT_RNSt16remove_referenceIS2_E4typeE>
 8003036:	4603      	mov	r3, r0
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe fc0f 	bl	800185c <_ZZ4mainENKUlvE2_clEv>
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	f7ff ffc5 	bl	8002fe2 <_ZNKSt9_Any_data9_M_accessIZ4mainEUlvE2_EERKT_v>
 8003058:	4604      	mov	r4, r0
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7fe fa55 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8003060:	4603      	mov	r3, r0
 8003062:	4619      	mov	r1, r3
 8003064:	2004      	movs	r0, #4
 8003066:	f7fe f9f7 	bl	8001458 <_ZnwjPv>
 800306a:	4602      	mov	r2, r0
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	6013      	str	r3, [r2, #0]
	}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <_ZNSt14_Function_base13_Base_managerIZ4mainEUlvE2_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8f8 	bl	8003278 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE2_EERT_v>
	}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	68b8      	ldr	r0, [r7, #8]
 80030a4:	f022 fffe 	bl	80260a4 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_ZSt11__addressofISt8functionIFvvEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_ZSt8_DestroyISt8functionIFvvEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8df 	bl	8003290 <_ZSt10destroy_atISt8functionIFvvEEEvPT_>
    }
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZNSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>:
      _M_valptr()
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3310      	adds	r3, #16
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f8dd 	bl	80032a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE6_M_ptrEv>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8003100:	6838      	ldr	r0, [r7, #0]
 8003102:	f000 f8f7 	bl	80032f4 <_ZSt10destroy_atISt4pairIKh5StateEEvPT_>
	}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800310e:	b580      	push	{r7, lr}
 8003110:	b088      	sub	sp, #32
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	61fb      	str	r3, [r7, #28]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003126:	f7fe f98f 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8003130:	69b8      	ldr	r0, [r7, #24]
 8003132:	f022 ffb5 	bl	80260a0 <_ZdlPv>
	    return;
 8003136:	e005      	b.n	8003144 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	69f8      	ldr	r0, [r7, #28]
 800313e:	f000 f953 	bl	80033e8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8003142:	bf00      	nop
 8003144:	bf00      	nop
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>:
      _M_valptr()
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3310      	adds	r3, #16
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8d6 	bl	800330a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE6_M_ptrEv>
 800315e:	4603      	mov	r3, r0
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE7destroyISC_EEvRSE_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	f000 f8f0 	bl	8003358 <_ZSt10destroy_atISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEvPT_>
	}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE10deallocateERSE_PSD_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003198:	f7fe f956 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE10deallocateERSE_PSD_j+0x2a>
	    ::operator delete(__p);
 80031a2:	69b8      	ldr	r0, [r7, #24]
 80031a4:	f022 ff7c 	bl	80260a0 <_ZdlPv>
	    return;
 80031a8:	e005      	b.n	80031b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE10deallocateERSE_PSD_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	69f8      	ldr	r0, [r7, #28]
 80031b0:	f000 f955 	bl	800345e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE10deallocateEPSE_j>
      { __a.deallocate(__p, __n); }
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>:
      _M_valptr()
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3310      	adds	r3, #16
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f8cf 	bl	800336e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE6_M_ptrEv>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE7destroyISF_EEvRSH_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80031e4:	6838      	ldr	r0, [r7, #0]
 80031e6:	f000 f8e9 	bl	80033bc <_ZSt10destroy_atISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEvPT_>
	}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE10deallocateERSH_PSG_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b088      	sub	sp, #32
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	61bb      	str	r3, [r7, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800320a:	f7fe f91d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE10deallocateERSH_PSG_j+0x2a>
	    ::operator delete(__p);
 8003214:	69b8      	ldr	r0, [r7, #24]
 8003216:	f022 ff43 	bl	80260a0 <_ZdlPv>
	    return;
 800321a:	e005      	b.n	8003228 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE10deallocateERSH_PSG_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	69f8      	ldr	r0, [r7, #28]
 8003222:	f000 f959 	bl	80034d8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE10deallocateEPSH_j>
      { __a.deallocate(__p, __n); }
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE_EERT_v>:
      _M_access()
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7fe f966 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 800323e:	4603      	mov	r3, r0
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE0_EERT_v>:
      _M_access()
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fe f95a 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8003256:	4603      	mov	r3, r0
 8003258:	4618      	mov	r0, r3
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE1_EERT_v>:
      _M_access()
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fe f94e 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 800326e:	4603      	mov	r3, r0
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <_ZNSt9_Any_data9_M_accessIZ4mainEUlvE2_EERT_v>:
      _M_access()
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7fe f942 	bl	800150a <_ZNSt9_Any_data9_M_accessEv>
 8003286:	4603      	mov	r3, r0
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZSt10destroy_atISt8functionIFvvEEEvPT_>:
    destroy_at(_Tp* __location)
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe f979 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
    }
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f88f 	bl	80033d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE7_M_addrEv>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <_ZN5StateD1Ev>:
class State {
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fc8d 	bl	8001be8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <_ZNSt4pairIKh5StateED1Ev>:
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ffea 	bl	80032be <_ZN5StateD1Ev>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <_ZSt10destroy_atISt4pairIKh5StateEEvPT_>:
    destroy_at(_Tp* __location)
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffeb 	bl	80032d8 <_ZNSt4pairIKh5StateED1Ev>
    }
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f877 	bl	8003406 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE7_M_addrEv>
 8003318:	4603      	mov	r3, r0
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEED1Ev>:
      ~map() = default;
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4618      	mov	r0, r3
 800332e:	f000 f881 	bl	8003434 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EED1Ev>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEED1Ev>:
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ffea 	bl	8003322 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEED1Ev>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZSt10destroy_atISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEvPT_>:
    destroy_at(_Tp* __location)
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ffeb 	bl	800333c <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEED1Ev>
    }
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f882 	bl	8003480 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE7_M_addrEv>
 800337c:	4603      	mov	r3, r0
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEED1Ev>:
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	f000 f88c 	bl	80034ae <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EED1Ev>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEED1Ev>:
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ffea 	bl	8003386 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEED1Ev>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_ZSt10destroy_atISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEvPT_>:
    destroy_at(_Tp* __location)
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ffeb 	bl	80033a0 <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEED1Ev>
    }
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE7_M_addrEv>:
      _M_addr() noexcept
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	4619      	mov	r1, r3
 80033fa:	68b8      	ldr	r0, [r7, #8]
 80033fc:	f022 fe52 	bl	80260a4 <_ZdlPvj>
      }
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f868 	bl	80034fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEED1Ev>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f886 	bl	800354e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_beginEv>
 8003442:	4603      	mov	r3, r0
 8003444:	4619      	mov	r1, r3
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f862 	bl	8003510 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4618      	mov	r0, r3
 8003450:	f7ff ffe4 	bl	800341c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE10deallocateEPSE_j>:
      deallocate(_Tp* __p, size_type __t)
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	222c      	movs	r2, #44	; 0x2c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4619      	mov	r1, r3
 8003474:	68b8      	ldr	r0, [r7, #8]
 8003476:	f022 fe15 	bl	80260a4 <_ZdlPvj>
      }
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE7_M_addrEv>:
      _M_addr() noexcept
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f861 	bl	8003566 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEED1Ev>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f87f 	bl	80035ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_beginEv>
 80034bc:	4603      	mov	r3, r0
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f85b 	bl	800357c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff ffe4 	bl	8003496 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE13_Rb_tree_implISC_Lb1EED1Ev>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE10deallocateEPSH_j>:
      deallocate(_Tp* __p, size_type __t)
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	222c      	movs	r2, #44	; 0x2c
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	4619      	mov	r1, r3
 80034ee:	68b8      	ldr	r0, [r7, #8]
 80034f0:	f022 fdd8 	bl	80260a4 <_ZdlPvj>
      }
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8003520:	6838      	ldr	r0, [r7, #0]
 8003522:	f000 f856 	bl	80035d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff fff0 	bl	8003510 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	f000 f85a 	bl	80035ea <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8003536:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8003538:	6839      	ldr	r1, [r7, #0]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f861 	bl	8003602 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003544:	e7e9      	b.n	800351a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEED1Ev>:
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0x36>
	  _M_erase(_S_right(__x));
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f000 f849 	bl	8003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff fff0 	bl	800357c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E>
	  _Link_type __y = _S_left(__x);
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f000 f84d 	bl	800363c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 80035a2:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80035a4:	6839      	ldr	r1, [r7, #0]
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f854 	bl	8003654 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	  __x = __y;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80035b0:	e7e9      	b.n	8003586 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E+0xa>
    }
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4618      	mov	r0, r3
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f831 	bl	8003676 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f842 	bl	80036a0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f82f 	bl	80036c4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>
	_M_put_node(__p);
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f840 	bl	80036ee <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>
      }
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003676:	b590      	push	{r4, r7, lr}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f846 	bl	8003712 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE21_M_get_Node_allocatorEv>
 8003686:	4604      	mov	r4, r0
 8003688:	6838      	ldr	r0, [r7, #0]
 800368a:	f000 f84d 	bl	8003728 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEE9_M_valptrEv>
 800368e:	4603      	mov	r3, r0
 8003690:	4619      	mov	r1, r3
 8003692:	4620      	mov	r0, r4
 8003694:	f000 f856 	bl	8003744 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bd90      	pop	{r4, r7, pc}

080036a0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f831 	bl	8003712 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE21_M_get_Node_allocatorEv>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2201      	movs	r2, #1
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f850 	bl	800375c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE10deallocateERS8_PS7_j>
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f863 	bl	800379a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE21_M_get_Node_allocatorEv>
 80036d4:	4604      	mov	r4, r0
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	f000 f86a 	bl	80037b0 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>
 80036dc:	4603      	mov	r3, r0
 80036de:	4619      	mov	r1, r3
 80036e0:	4620      	mov	r0, r4
 80036e2:	f000 f873 	bl	80037cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE7destroyIS9_EEvRSB_PT_>
      }
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd90      	pop	{r4, r7, pc}

080036ee <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS8_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f84e 	bl	800379a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE21_M_get_Node_allocatorEv>
 80036fe:	4603      	mov	r3, r0
 8003700:	2201      	movs	r2, #1
 8003702:	6839      	ldr	r1, [r7, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f86d 	bl	80037e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE10deallocateERSB_PSA_j>
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEE9_M_valptrEv>:
      _M_valptr()
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3310      	adds	r3, #16
 8003734:	4618      	mov	r0, r3
 8003736:	f000 f874 	bl	8003822 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt8functionIFbvEEEE6_M_ptrEv>
 800373a:	4603      	mov	r3, r0
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800374e:	6838      	ldr	r0, [r7, #0]
 8003750:	f000 f88e 	bl	8003870 <_ZSt10destroy_atISt4pairIKhSt8functionIFbvEEEEvPT_>
	}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8003774:	f7fd fe68 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800377e:	69b8      	ldr	r0, [r7, #24]
 8003780:	f022 fc8e 	bl	80260a0 <_ZdlPv>
	    return;
 8003784:	e005      	b.n	8003792 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	69f8      	ldr	r0, [r7, #28]
 800378c:	f000 f8ab 	bl	80038e6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>:
      _M_valptr()
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3310      	adds	r3, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f862 	bl	8003886 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE6_M_ptrEv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE7destroyIS9_EEvRSB_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	f000 f86f 	bl	80038ba <_ZSt10destroy_atISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEvPT_>
	}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE10deallocateERSB_PSA_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	61fb      	str	r3, [r7, #28]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80037fc:	f7fd fe24 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE10deallocateERSB_PSA_j+0x2a>
	    ::operator delete(__p);
 8003806:	69b8      	ldr	r0, [r7, #24]
 8003808:	f022 fc4a 	bl	80260a0 <_ZdlPv>
	    return;
 800380c:	e005      	b.n	800381a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE10deallocateERSB_PSA_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	69f8      	ldr	r0, [r7, #28]
 8003814:	f000 f884 	bl	8003920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE10deallocateEPSB_j>
      { __a.deallocate(__p, __n); }
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt8functionIFbvEEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f850 	bl	80038d0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt8functionIFbvEEEE7_M_addrEv>
 8003830:	4603      	mov	r3, r0
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <_ZNSt8functionIFbvEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fe84 	bl	8001552 <_ZNSt14_Function_baseD1Ev>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZNSt4pairIKhSt8functionIFbvEEED1Ev>:
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4618      	mov	r0, r3
 8003862:	f7ff ffea 	bl	800383a <_ZNSt8functionIFbvEED1Ev>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZSt10destroy_atISt4pairIKhSt8functionIFbvEEEEvPT_>:
    destroy_at(_Tp* __location)
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ffeb 	bl	8003854 <_ZNSt4pairIKhSt8functionIFbvEEED1Ev>
    }
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f83b 	bl	800390a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE7_M_addrEv>
 8003894:	4603      	mov	r3, r0
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEED1Ev>:
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe f99c 	bl	8001be8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <_ZSt10destroy_atISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEvPT_>:
    destroy_at(_Tp* __location)
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffeb 	bl	800389e <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEED1Ev>
    }
 80038c8:	bf00      	nop
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt8functionIFbvEEEE7_M_addrEv>:
      _M_addr() noexcept
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	60f8      	str	r0, [r7, #12]
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4619      	mov	r1, r3
 80038fe:	68b8      	ldr	r0, [r7, #8]
 8003900:	f022 fbd0 	bl	80260a4 <_ZdlPvj>
      }
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE7_M_addrEv>:
      _M_addr() noexcept
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE10deallocateEPSB_j>:
      deallocate(_Tp* __p, size_type __t)
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	015b      	lsls	r3, r3, #5
 8003930:	4619      	mov	r1, r3
 8003932:	68b8      	ldr	r0, [r7, #8]
 8003934:	f022 fbb6 	bl	80260a4 <_ZdlPvj>
      }
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003956:	4293      	cmp	r3, r2
 8003958:	d102      	bne.n	8003960 <_Z41__static_initialization_and_destruction_0ii+0x20>
StateMachine state_machine;
 800395a:	4809      	ldr	r0, [pc, #36]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800395c:	f7fd febe 	bl	80016dc <_ZN12StateMachineC1Ev>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d107      	bne.n	8003976 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396c:	4293      	cmp	r3, r2
 800396e:	d102      	bne.n	8003976 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003970:	4803      	ldr	r0, [pc, #12]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003972:	f7fd fef1 	bl	8001758 <_ZN12StateMachineD1Ev>
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	24000794 	.word	0x24000794

08003984 <_GLOBAL__sub_I_state_machine>:
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
 8003988:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800398c:	2001      	movs	r0, #1
 800398e:	f7ff ffd7 	bl	8003940 <_Z41__static_initialization_and_destruction_0ii>
 8003992:	bd80      	pop	{r7, pc}

08003994 <_GLOBAL__sub_D_state_machine>:
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
 8003998:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800399c:	2000      	movs	r0, #0
 800399e:	f7ff ffcf 	bl	8003940 <_Z41__static_initialization_and_destruction_0ii>
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <MX_RTC_Init+0x48>)
 80039aa:	4a11      	ldr	r2, [pc, #68]	; (80039f0 <MX_RTC_Init+0x4c>)
 80039ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <MX_RTC_Init+0x48>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <MX_RTC_Init+0x48>)
 80039b6:	227f      	movs	r2, #127	; 0x7f
 80039b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <MX_RTC_Init+0x48>)
 80039bc:	22ff      	movs	r2, #255	; 0xff
 80039be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <MX_RTC_Init+0x48>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <MX_RTC_Init+0x48>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039cc:	4b07      	ldr	r3, [pc, #28]	; (80039ec <MX_RTC_Init+0x48>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <MX_RTC_Init+0x48>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039d8:	4804      	ldr	r0, [pc, #16]	; (80039ec <MX_RTC_Init+0x48>)
 80039da:	f00a fd2d 	bl	800e438 <HAL_RTC_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80039e4:	f7fe f8d7 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	240007e4 	.word	0x240007e4
 80039f0:	58004000 	.word	0x58004000

080039f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b0b0      	sub	sp, #192	; 0xc0
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	22b4      	movs	r2, #180	; 0xb4
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f022 fc8f 	bl	8026328 <memset>
  if(rtcHandle->Instance==RTC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <HAL_RTC_MspInit+0x58>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d116      	bne.n	8003a42 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a18:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a22:	f107 030c 	add.w	r3, r7, #12
 8003a26:	4618      	mov	r0, r3
 8003a28:	f008 fc72 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a32:	f7fe f8b0 	bl	8001b96 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RTC_MspInit+0x5c>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <HAL_RTC_MspInit+0x5c>)
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a42:	bf00      	nop
 8003a44:	37c0      	adds	r7, #192	; 0xc0
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	58004000 	.word	0x58004000
 8003a50:	58024400 	.word	0x58024400

08003a54 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003a58:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a5a:	4a28      	ldr	r2, [pc, #160]	; (8003afc <MX_SPI3_Init+0xa8>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a5e:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a66:	4b24      	ldr	r3, [pc, #144]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003a6c:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a6e:	2203      	movs	r2, #3
 8003a70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a72:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a8c:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a92:	4b19      	ldr	r3, [pc, #100]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003a9e:	4b16      	ldr	r3, [pc, #88]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003abe:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003ad0:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003ae2:	4805      	ldr	r0, [pc, #20]	; (8003af8 <MX_SPI3_Init+0xa4>)
 8003ae4:	f00a fdb8 	bl	800e658 <HAL_SPI_Init>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003aee:	f7fe f852 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	24000808 	.word	0x24000808
 8003afc:	40003c00 	.word	0x40003c00

08003b00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0b6      	sub	sp, #216	; 0xd8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b18:	f107 0310 	add.w	r3, r7, #16
 8003b1c:	22b4      	movs	r2, #180	; 0xb4
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f022 fc01 	bl	8026328 <memset>
  if(spiHandle->Instance==SPI3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_SPI_MspInit+0xc0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d142      	bne.n	8003bb6 <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b3a:	f107 0310 	add.w	r3, r7, #16
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f008 fbe6 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003b4a:	f7fe f824 	bl	8001b96 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b54:	4a1b      	ldr	r2, [pc, #108]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6c:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b72:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <HAL_SPI_MspInit+0xc4>)
 8003b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003b8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b92:	2302      	movs	r3, #2
 8003b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ba4:	2306      	movs	r3, #6
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003baa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4805      	ldr	r0, [pc, #20]	; (8003bc8 <HAL_SPI_MspInit+0xc8>)
 8003bb2:	f006 fe51 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	37d8      	adds	r7, #216	; 0xd8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40003c00 	.word	0x40003c00
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58020800 	.word	0x58020800

08003bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_MspInit+0x30>)
 8003bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bd8:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_MspInit+0x30>)
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_MspInit+0x30>)
 8003be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	58024400 	.word	0x58024400

08003c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <NMI_Handler+0x4>

08003c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <HardFault_Handler+0x4>

08003c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <MemManage_Handler+0x4>

08003c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <BusFault_Handler+0x4>

08003c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c1c:	e7fe      	b.n	8003c1c <UsageFault_Handler+0x4>

08003c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c4c:	f001 facc 	bl	80051e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f006 ffbe 	bl	800abda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003c66:	2002      	movs	r0, #2
 8003c68:	f006 ffb7 	bl	800abda <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c6c:	bf00      	nop
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <DMA1_Stream0_IRQHandler+0x10>)
 8003c76:	f004 faa9 	bl	80081cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	240002ec 	.word	0x240002ec

08003c84 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <DMA1_Stream1_IRQHandler+0x10>)
 8003c8a:	f004 fa9f 	bl	80081cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	24000364 	.word	0x24000364

08003c98 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <DMA1_Stream2_IRQHandler+0x10>)
 8003c9e:	f004 fa95 	bl	80081cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	240003dc 	.word	0x240003dc

08003cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <TIM2_IRQHandler+0x10>)
 8003cb2:	f00b f823 	bl	800ecfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	240008e0 	.word	0x240008e0

08003cc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <TIM6_DAC_IRQHandler+0x10>)
 8003cc6:	f00b f819 	bl	800ecfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	24000a10 	.word	0x24000a10

08003cd4 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003cd8:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <LPTIM1_IRQHandler+0x10>)
 8003cda:	f007 f8b1 	bl	800ae40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	240006ec 	.word	0x240006ec

08003ce8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003cec:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <ADC3_IRQHandler+0x10>)
 8003cee:	f002 f895 	bl	8005e1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2400027c 	.word	0x2400027c

08003cfc <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8003d00:	4802      	ldr	r0, [pc, #8]	; (8003d0c <LPTIM2_IRQHandler+0x10>)
 8003d02:	f007 f89d 	bl	800ae40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8003d06:	bf00      	nop
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	24000724 	.word	0x24000724

08003d10 <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 8003d14:	4802      	ldr	r0, [pc, #8]	; (8003d20 <LPTIM3_IRQHandler+0x10>)
 8003d16:	f007 f893 	bl	800ae40 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	2400075c 	.word	0x2400075c

08003d24 <TIM24_IRQHandler>:

/**
  * @brief This function handles TIM24 global interrupt.
  */
void TIM24_IRQHandler(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM24_IRQn 0 */

  /* USER CODE END TIM24_IRQn 0 */
  HAL_TIM_IRQHandler(&htim24);
 8003d28:	4802      	ldr	r0, [pc, #8]	; (8003d34 <TIM24_IRQHandler+0x10>)
 8003d2a:	f00a ffe7 	bl	800ecfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM24_IRQn 1 */

  /* USER CODE END TIM24_IRQn 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	24000c24 	.word	0x24000c24

08003d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
	return 1;
 8003d3c:	2301      	movs	r3, #1
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <_kill>:

int _kill(int pid, int sig)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d52:	f022 fa87 	bl	8026264 <__errno>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2216      	movs	r2, #22
 8003d5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_exit>:

void _exit (int status)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d70:	f04f 31ff 	mov.w	r1, #4294967295
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe7 	bl	8003d48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d7a:	e7fe      	b.n	8003d7a <_exit+0x12>

08003d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d84:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <_sbrk+0x5c>)
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <_sbrk+0x60>)
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d98:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <_sbrk+0x64>)
 8003d9a:	4a12      	ldr	r2, [pc, #72]	; (8003de4 <_sbrk+0x68>)
 8003d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d207      	bcs.n	8003dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dac:	f022 fa5a 	bl	8026264 <__errno>
 8003db0:	4603      	mov	r3, r0
 8003db2:	220c      	movs	r2, #12
 8003db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	e009      	b.n	8003dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <_sbrk+0x64>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	4a05      	ldr	r2, [pc, #20]	; (8003de0 <_sbrk+0x64>)
 8003dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dce:	68fb      	ldr	r3, [r7, #12]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	24050000 	.word	0x24050000
 8003ddc:	00000400 	.word	0x00000400
 8003de0:	24000890 	.word	0x24000890
 8003de4:	24001440 	.word	0x24001440

08003de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <SystemInit+0xd0>)
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	4a31      	ldr	r2, [pc, #196]	; (8003eb8 <SystemInit+0xd0>)
 8003df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <SystemInit+0xd4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2b06      	cmp	r3, #6
 8003e06:	d807      	bhi.n	8003e18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e08:	4b2c      	ldr	r3, [pc, #176]	; (8003ebc <SystemInit+0xd4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 030f 	bic.w	r3, r3, #15
 8003e10:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <SystemInit+0xd4>)
 8003e12:	f043 0307 	orr.w	r3, r3, #7
 8003e16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003e18:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <SystemInit+0xd8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <SystemInit+0xd8>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <SystemInit+0xd8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <SystemInit+0xd8>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4924      	ldr	r1, [pc, #144]	; (8003ec0 <SystemInit+0xd8>)
 8003e30:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <SystemInit+0xdc>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e36:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <SystemInit+0xd4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <SystemInit+0xd4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 030f 	bic.w	r3, r3, #15
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <SystemInit+0xd4>)
 8003e4c:	f043 0307 	orr.w	r3, r3, #7
 8003e50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e52:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <SystemInit+0xd8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <SystemInit+0xd8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e5e:	4b18      	ldr	r3, [pc, #96]	; (8003ec0 <SystemInit+0xd8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <SystemInit+0xd8>)
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <SystemInit+0xe0>)
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <SystemInit+0xd8>)
 8003e6c:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <SystemInit+0xe4>)
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e70:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <SystemInit+0xd8>)
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <SystemInit+0xe8>)
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <SystemInit+0xd8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e7c:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <SystemInit+0xd8>)
 8003e7e:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <SystemInit+0xe8>)
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <SystemInit+0xd8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e88:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <SystemInit+0xd8>)
 8003e8a:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <SystemInit+0xe8>)
 8003e8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <SystemInit+0xd8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <SystemInit+0xd8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <SystemInit+0xd8>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ea0:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <SystemInit+0xd8>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <SystemInit+0xec>)
 8003ea8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003eac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00
 8003ebc:	52002000 	.word	0x52002000
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ec8:	02020200 	.word	0x02020200
 8003ecc:	01ff0000 	.word	0x01ff0000
 8003ed0:	01010280 	.word	0x01010280
 8003ed4:	52004000 	.word	0x52004000

08003ed8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b098      	sub	sp, #96	; 0x60
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	2234      	movs	r2, #52	; 0x34
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f022 fa0f 	bl	8026328 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f0a:	4b4b      	ldr	r3, [pc, #300]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <MX_TIM1_Init+0x164>)
 8003f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f10:	4b49      	ldr	r3, [pc, #292]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f16:	4b48      	ldr	r3, [pc, #288]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f24:	4b44      	ldr	r3, [pc, #272]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f2a:	4b43      	ldr	r3, [pc, #268]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f30:	4b41      	ldr	r3, [pc, #260]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f36:	4840      	ldr	r0, [pc, #256]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f38:	f00a fd8c 	bl	800ea54 <HAL_TIM_PWM_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003f42:	f7fd fe28 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f56:	4619      	mov	r1, r3
 8003f58:	4837      	ldr	r0, [pc, #220]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f5a:	f00c f80f 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003f64:	f7fd fe17 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f68:	2360      	movs	r3, #96	; 0x60
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f74:	2300      	movs	r3, #0
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f80:	2300      	movs	r3, #0
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	482a      	ldr	r0, [pc, #168]	; (8004038 <MX_TIM1_Init+0x160>)
 8003f8e:	f00b f871 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f98:	f7fd fdfd 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4824      	ldr	r0, [pc, #144]	; (8004038 <MX_TIM1_Init+0x160>)
 8003fa6:	f00b f865 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003fb0:	f7fd fdf1 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fb8:	2208      	movs	r2, #8
 8003fba:	4619      	mov	r1, r3
 8003fbc:	481e      	ldr	r0, [pc, #120]	; (8004038 <MX_TIM1_Init+0x160>)
 8003fbe:	f00b f859 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8003fc8:	f7fd fde5 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fd0:	220c      	movs	r2, #12
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4818      	ldr	r0, [pc, #96]	; (8004038 <MX_TIM1_Init+0x160>)
 8003fd6:	f00b f84d 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003fe0:	f7fd fdd9 	bl	8001b96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ffc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4807      	ldr	r0, [pc, #28]	; (8004038 <MX_TIM1_Init+0x160>)
 800401a:	f00c f84b 	bl	80100b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8004024:	f7fd fdb7 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004028:	4803      	ldr	r0, [pc, #12]	; (8004038 <MX_TIM1_Init+0x160>)
 800402a:	f000 fd7f 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 800402e:	bf00      	nop
 8004030:	3760      	adds	r7, #96	; 0x60
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	24000894 	.word	0x24000894
 800403c:	40010000 	.word	0x40010000

08004040 <MX_TIM3_Init>:
  /* USER CODE END TIM2_Init 2 */

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004046:	f107 031c 	add.w	r3, r7, #28
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004052:	463b      	mov	r3, r7
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
 8004060:	615a      	str	r2, [r3, #20]
 8004062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004064:	4b32      	ldr	r3, [pc, #200]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004066:	4a33      	ldr	r2, [pc, #204]	; (8004134 <MX_TIM3_Init+0xf4>)
 8004068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <MX_TIM3_Init+0xf0>)
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004070:	4b2f      	ldr	r3, [pc, #188]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004076:	4b2e      	ldr	r3, [pc, #184]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800407c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800407e:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004080:	2200      	movs	r2, #0
 8004082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004086:	2200      	movs	r2, #0
 8004088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800408a:	4829      	ldr	r0, [pc, #164]	; (8004130 <MX_TIM3_Init+0xf0>)
 800408c:	f00a fce2 	bl	800ea54 <HAL_TIM_PWM_Init>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8004096:	f7fd fd7e 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040a2:	f107 031c 	add.w	r3, r7, #28
 80040a6:	4619      	mov	r1, r3
 80040a8:	4821      	ldr	r0, [pc, #132]	; (8004130 <MX_TIM3_Init+0xf0>)
 80040aa:	f00b ff67 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80040b4:	f7fd fd6f 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b8:	2360      	movs	r3, #96	; 0x60
 80040ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040c8:	463b      	mov	r3, r7
 80040ca:	2200      	movs	r2, #0
 80040cc:	4619      	mov	r1, r3
 80040ce:	4818      	ldr	r0, [pc, #96]	; (8004130 <MX_TIM3_Init+0xf0>)
 80040d0:	f00a ffd0 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80040da:	f7fd fd5c 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040de:	463b      	mov	r3, r7
 80040e0:	2204      	movs	r2, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4812      	ldr	r0, [pc, #72]	; (8004130 <MX_TIM3_Init+0xf0>)
 80040e6:	f00a ffc5 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80040f0:	f7fd fd51 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040f4:	463b      	mov	r3, r7
 80040f6:	2208      	movs	r2, #8
 80040f8:	4619      	mov	r1, r3
 80040fa:	480d      	ldr	r0, [pc, #52]	; (8004130 <MX_TIM3_Init+0xf0>)
 80040fc:	f00a ffba 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8004106:	f7fd fd46 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800410a:	463b      	mov	r3, r7
 800410c:	220c      	movs	r2, #12
 800410e:	4619      	mov	r1, r3
 8004110:	4807      	ldr	r0, [pc, #28]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004112:	f00a ffaf 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800411c:	f7fd fd3b 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <MX_TIM3_Init+0xf0>)
 8004122:	f000 fd03 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 8004126:	bf00      	nop
 8004128:	3728      	adds	r7, #40	; 0x28
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	2400092c 	.word	0x2400092c
 8004134:	40000400 	.word	0x40000400

08004138 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800413e:	f107 031c 	add.w	r3, r7, #28
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800414a:	463b      	mov	r3, r7
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
 8004158:	615a      	str	r2, [r3, #20]
 800415a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800415c:	4b32      	ldr	r3, [pc, #200]	; (8004228 <MX_TIM4_Init+0xf0>)
 800415e:	4a33      	ldr	r2, [pc, #204]	; (800422c <MX_TIM4_Init+0xf4>)
 8004160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <MX_TIM4_Init+0xf0>)
 8004164:	2200      	movs	r2, #0
 8004166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004168:	4b2f      	ldr	r3, [pc, #188]	; (8004228 <MX_TIM4_Init+0xf0>)
 800416a:	2200      	movs	r2, #0
 800416c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <MX_TIM4_Init+0xf0>)
 8004170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004174:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004176:	4b2c      	ldr	r3, [pc, #176]	; (8004228 <MX_TIM4_Init+0xf0>)
 8004178:	2200      	movs	r2, #0
 800417a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800417c:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <MX_TIM4_Init+0xf0>)
 800417e:	2200      	movs	r2, #0
 8004180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004182:	4829      	ldr	r0, [pc, #164]	; (8004228 <MX_TIM4_Init+0xf0>)
 8004184:	f00a fc66 	bl	800ea54 <HAL_TIM_PWM_Init>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800418e:	f7fd fd02 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	4619      	mov	r1, r3
 80041a0:	4821      	ldr	r0, [pc, #132]	; (8004228 <MX_TIM4_Init+0xf0>)
 80041a2:	f00b feeb 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80041ac:	f7fd fcf3 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041b0:	2360      	movs	r3, #96	; 0x60
 80041b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041c0:	463b      	mov	r3, r7
 80041c2:	2200      	movs	r2, #0
 80041c4:	4619      	mov	r1, r3
 80041c6:	4818      	ldr	r0, [pc, #96]	; (8004228 <MX_TIM4_Init+0xf0>)
 80041c8:	f00a ff54 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80041d2:	f7fd fce0 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041d6:	463b      	mov	r3, r7
 80041d8:	2204      	movs	r2, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4812      	ldr	r0, [pc, #72]	; (8004228 <MX_TIM4_Init+0xf0>)
 80041de:	f00a ff49 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80041e8:	f7fd fcd5 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041ec:	463b      	mov	r3, r7
 80041ee:	2208      	movs	r2, #8
 80041f0:	4619      	mov	r1, r3
 80041f2:	480d      	ldr	r0, [pc, #52]	; (8004228 <MX_TIM4_Init+0xf0>)
 80041f4:	f00a ff3e 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80041fe:	f7fd fcca 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004202:	463b      	mov	r3, r7
 8004204:	220c      	movs	r2, #12
 8004206:	4619      	mov	r1, r3
 8004208:	4807      	ldr	r0, [pc, #28]	; (8004228 <MX_TIM4_Init+0xf0>)
 800420a:	f00a ff33 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8004214:	f7fd fcbf 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004218:	4803      	ldr	r0, [pc, #12]	; (8004228 <MX_TIM4_Init+0xf0>)
 800421a:	f000 fc87 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 800421e:	bf00      	nop
 8004220:	3728      	adds	r7, #40	; 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	24000978 	.word	0x24000978
 800422c:	40000800 	.word	0x40000800

08004230 <MX_TIM8_Init>:
  /* USER CODE END TIM6_Init 2 */

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	; 0x30
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004236:	f107 030c 	add.w	r3, r7, #12
 800423a:	2224      	movs	r2, #36	; 0x24
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f022 f872 	bl	8026328 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	463b      	mov	r3, r7
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <MX_TIM8_Init+0xac>)
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <MX_TIM8_Init+0xb0>)
 8004252:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <MX_TIM8_Init+0xac>)
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <MX_TIM8_Init+0xac>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <MX_TIM8_Init+0xac>)
 8004262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004266:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004268:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <MX_TIM8_Init+0xac>)
 800426a:	2200      	movs	r2, #0
 800426c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <MX_TIM8_Init+0xac>)
 8004270:	2200      	movs	r2, #0
 8004272:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <MX_TIM8_Init+0xac>)
 8004276:	2200      	movs	r2, #0
 8004278:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800427a:	2301      	movs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004282:	2301      	movs	r3, #1
 8004284:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004286:	2300      	movs	r3, #0
 8004288:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800428e:	2300      	movs	r3, #0
 8004290:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004292:	2301      	movs	r3, #1
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004296:	2300      	movs	r3, #0
 8004298:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800429e:	f107 030c 	add.w	r3, r7, #12
 80042a2:	4619      	mov	r1, r3
 80042a4:	480d      	ldr	r0, [pc, #52]	; (80042dc <MX_TIM8_Init+0xac>)
 80042a6:	f00a fc83 	bl	800ebb0 <HAL_TIM_Encoder_Init>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80042b0:	f7fd fc71 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80042c0:	463b      	mov	r3, r7
 80042c2:	4619      	mov	r1, r3
 80042c4:	4805      	ldr	r0, [pc, #20]	; (80042dc <MX_TIM8_Init+0xac>)
 80042c6:	f00b fe59 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80042d0:	f7fd fc61 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80042d4:	bf00      	nop
 80042d6:	3730      	adds	r7, #48	; 0x30
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	24000a5c 	.word	0x24000a5c
 80042e0:	40010400 	.word	0x40010400

080042e4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]
 80042f8:	615a      	str	r2, [r3, #20]
 80042fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <MX_TIM12_Init+0x98>)
 80042fe:	4a20      	ldr	r2, [pc, #128]	; (8004380 <MX_TIM12_Init+0x9c>)
 8004300:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <MX_TIM12_Init+0x98>)
 8004304:	2200      	movs	r2, #0
 8004306:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <MX_TIM12_Init+0x98>)
 800430a:	2200      	movs	r2, #0
 800430c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <MX_TIM12_Init+0x98>)
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004316:	4b19      	ldr	r3, [pc, #100]	; (800437c <MX_TIM12_Init+0x98>)
 8004318:	2200      	movs	r2, #0
 800431a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <MX_TIM12_Init+0x98>)
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8004322:	4816      	ldr	r0, [pc, #88]	; (800437c <MX_TIM12_Init+0x98>)
 8004324:	f00a fb96 	bl	800ea54 <HAL_TIM_PWM_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800432e:	f7fd fc32 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004332:	2360      	movs	r3, #96	; 0x60
 8004334:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004342:	1d3b      	adds	r3, r7, #4
 8004344:	2200      	movs	r2, #0
 8004346:	4619      	mov	r1, r3
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <MX_TIM12_Init+0x98>)
 800434a:	f00a fe93 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8004354:	f7fd fc1f 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	2204      	movs	r2, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4807      	ldr	r0, [pc, #28]	; (800437c <MX_TIM12_Init+0x98>)
 8004360:	f00a fe88 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800436a:	f7fd fc14 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800436e:	4803      	ldr	r0, [pc, #12]	; (800437c <MX_TIM12_Init+0x98>)
 8004370:	f000 fbdc 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 8004374:	bf00      	nop
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	24000aa8 	.word	0x24000aa8
 8004380:	40001800 	.word	0x40001800

08004384 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b098      	sub	sp, #96	; 0x60
 8004388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800438a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]
 8004394:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004396:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	609a      	str	r2, [r3, #8]
 80043a2:	60da      	str	r2, [r3, #12]
 80043a4:	611a      	str	r2, [r3, #16]
 80043a6:	615a      	str	r2, [r3, #20]
 80043a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	2234      	movs	r2, #52	; 0x34
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f021 ffb9 	bl	8026328 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043b8:	4a3a      	ldr	r2, [pc, #232]	; (80044a4 <MX_TIM15_Init+0x120>)
 80043ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80043bc:	4b38      	ldr	r3, [pc, #224]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80043c8:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d0:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80043d6:	4b32      	ldr	r3, [pc, #200]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043d8:	2200      	movs	r2, #0
 80043da:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80043e2:	482f      	ldr	r0, [pc, #188]	; (80044a0 <MX_TIM15_Init+0x11c>)
 80043e4:	f00a fb36 	bl	800ea54 <HAL_TIM_PWM_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80043ee:	f7fd fbd2 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80043fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043fe:	4619      	mov	r1, r3
 8004400:	4827      	ldr	r0, [pc, #156]	; (80044a0 <MX_TIM15_Init+0x11c>)
 8004402:	f00b fdbb 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800440c:	f7fd fbc3 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004410:	2360      	movs	r3, #96	; 0x60
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004418:	2300      	movs	r3, #0
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800441c:	2300      	movs	r3, #0
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004420:	2300      	movs	r3, #0
 8004422:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004424:	2300      	movs	r3, #0
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800442c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004430:	2200      	movs	r2, #0
 8004432:	4619      	mov	r1, r3
 8004434:	481a      	ldr	r0, [pc, #104]	; (80044a0 <MX_TIM15_Init+0x11c>)
 8004436:	f00a fe1d 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8004440:	f7fd fba9 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004444:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004448:	2204      	movs	r2, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4814      	ldr	r0, [pc, #80]	; (80044a0 <MX_TIM15_Init+0x11c>)
 800444e:	f00a fe11 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8004458:	f7fd fb9d 	bl	8001b96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004474:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800447e:	1d3b      	adds	r3, r7, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4807      	ldr	r0, [pc, #28]	; (80044a0 <MX_TIM15_Init+0x11c>)
 8004484:	f00b fe16 	bl	80100b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800448e:	f7fd fb82 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004492:	4803      	ldr	r0, [pc, #12]	; (80044a0 <MX_TIM15_Init+0x11c>)
 8004494:	f000 fb4a 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 8004498:	bf00      	nop
 800449a:	3760      	adds	r7, #96	; 0x60
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	24000af4 	.word	0x24000af4
 80044a4:	40014000 	.word	0x40014000

080044a8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b094      	sub	sp, #80	; 0x50
 80044ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	611a      	str	r2, [r3, #16]
 80044be:	615a      	str	r2, [r3, #20]
 80044c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044c2:	463b      	mov	r3, r7
 80044c4:	2234      	movs	r2, #52	; 0x34
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f021 ff2d 	bl	8026328 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80044ce:	4b31      	ldr	r3, [pc, #196]	; (8004594 <MX_TIM16_Init+0xec>)
 80044d0:	4a31      	ldr	r2, [pc, #196]	; (8004598 <MX_TIM16_Init+0xf0>)
 80044d2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80044d4:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <MX_TIM16_Init+0xec>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044da:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <MX_TIM16_Init+0xec>)
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80044e0:	4b2c      	ldr	r3, [pc, #176]	; (8004594 <MX_TIM16_Init+0xec>)
 80044e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044e6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e8:	4b2a      	ldr	r3, [pc, #168]	; (8004594 <MX_TIM16_Init+0xec>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <MX_TIM16_Init+0xec>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <MX_TIM16_Init+0xec>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80044fa:	4826      	ldr	r0, [pc, #152]	; (8004594 <MX_TIM16_Init+0xec>)
 80044fc:	f00a f9cd 	bl	800e89a <HAL_TIM_Base_Init>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8004506:	f7fd fb46 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800450a:	4822      	ldr	r0, [pc, #136]	; (8004594 <MX_TIM16_Init+0xec>)
 800450c:	f00a faa2 	bl	800ea54 <HAL_TIM_PWM_Init>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8004516:	f7fd fb3e 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800451a:	2360      	movs	r3, #96	; 0x60
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004522:	2300      	movs	r3, #0
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004526:	2300      	movs	r3, #0
 8004528:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800452a:	2300      	movs	r3, #0
 800452c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004536:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800453a:	2200      	movs	r2, #0
 800453c:	4619      	mov	r1, r3
 800453e:	4815      	ldr	r0, [pc, #84]	; (8004594 <MX_TIM16_Init+0xec>)
 8004540:	f00a fd98 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800454a:	f7fd fb24 	bl	8001b96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004566:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800456c:	2300      	movs	r3, #0
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004570:	463b      	mov	r3, r7
 8004572:	4619      	mov	r1, r3
 8004574:	4807      	ldr	r0, [pc, #28]	; (8004594 <MX_TIM16_Init+0xec>)
 8004576:	f00b fd9d 	bl	80100b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8004580:	f7fd fb09 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004584:	4803      	ldr	r0, [pc, #12]	; (8004594 <MX_TIM16_Init+0xec>)
 8004586:	f000 fad1 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 800458a:	bf00      	nop
 800458c:	3750      	adds	r7, #80	; 0x50
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	24000b40 	.word	0x24000b40
 8004598:	40014400 	.word	0x40014400

0800459c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b094      	sub	sp, #80	; 0x50
 80045a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80045a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	60da      	str	r2, [r3, #12]
 80045b0:	611a      	str	r2, [r3, #16]
 80045b2:	615a      	str	r2, [r3, #20]
 80045b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045b6:	463b      	mov	r3, r7
 80045b8:	2234      	movs	r2, #52	; 0x34
 80045ba:	2100      	movs	r1, #0
 80045bc:	4618      	mov	r0, r3
 80045be:	f021 feb3 	bl	8026328 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80045c2:	4b31      	ldr	r3, [pc, #196]	; (8004688 <MX_TIM17_Init+0xec>)
 80045c4:	4a31      	ldr	r2, [pc, #196]	; (800468c <MX_TIM17_Init+0xf0>)
 80045c6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80045c8:	4b2f      	ldr	r3, [pc, #188]	; (8004688 <MX_TIM17_Init+0xec>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <MX_TIM17_Init+0xec>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <MX_TIM17_Init+0xec>)
 80045d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045da:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045dc:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <MX_TIM17_Init+0xec>)
 80045de:	2200      	movs	r2, #0
 80045e0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <MX_TIM17_Init+0xec>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <MX_TIM17_Init+0xec>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80045ee:	4826      	ldr	r0, [pc, #152]	; (8004688 <MX_TIM17_Init+0xec>)
 80045f0:	f00a f953 	bl	800e89a <HAL_TIM_Base_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80045fa:	f7fd facc 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80045fe:	4822      	ldr	r0, [pc, #136]	; (8004688 <MX_TIM17_Init+0xec>)
 8004600:	f00a fa28 	bl	800ea54 <HAL_TIM_PWM_Init>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800460a:	f7fd fac4 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800460e:	2360      	movs	r3, #96	; 0x60
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004616:	2300      	movs	r3, #0
 8004618:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800461a:	2300      	movs	r3, #0
 800461c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800461e:	2300      	movs	r3, #0
 8004620:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800462a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800462e:	2200      	movs	r2, #0
 8004630:	4619      	mov	r1, r3
 8004632:	4815      	ldr	r0, [pc, #84]	; (8004688 <MX_TIM17_Init+0xec>)
 8004634:	f00a fd1e 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800463e:	f7fd faaa 	bl	8001b96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800465a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004660:	2300      	movs	r3, #0
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004664:	463b      	mov	r3, r7
 8004666:	4619      	mov	r1, r3
 8004668:	4807      	ldr	r0, [pc, #28]	; (8004688 <MX_TIM17_Init+0xec>)
 800466a:	f00b fd23 	bl	80100b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8004674:	f7fd fa8f 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004678:	4803      	ldr	r0, [pc, #12]	; (8004688 <MX_TIM17_Init+0xec>)
 800467a:	f000 fa57 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 800467e:	bf00      	nop
 8004680:	3750      	adds	r7, #80	; 0x50
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	24000b8c 	.word	0x24000b8c
 800468c:	40014800 	.word	0x40014800

08004690 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08e      	sub	sp, #56	; 0x38
 8004694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	605a      	str	r2, [r3, #4]
 80046a0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80046a2:	f107 031c 	add.w	r3, r7, #28
 80046a6:	2200      	movs	r2, #0
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046b0:	463b      	mov	r3, r7
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	60da      	str	r2, [r3, #12]
 80046bc:	611a      	str	r2, [r3, #16]
 80046be:	615a      	str	r2, [r3, #20]
 80046c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046c4:	4a3b      	ldr	r2, [pc, #236]	; (80047b4 <MX_TIM23_Init+0x124>)
 80046c6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ce:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046d6:	f04f 32ff 	mov.w	r2, #4294967295
 80046da:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046de:	2200      	movs	r2, #0
 80046e0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 80046e8:	4831      	ldr	r0, [pc, #196]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046ea:	f00a fa0a 	bl	800eb02 <HAL_TIM_IC_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 80046f4:	f7fd fa4f 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80046f8:	482d      	ldr	r0, [pc, #180]	; (80047b0 <MX_TIM23_Init+0x120>)
 80046fa:	f00a f9ab 	bl	800ea54 <HAL_TIM_PWM_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8004704:	f7fd fa47 	bl	8001b96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800470c:	2300      	movs	r3, #0
 800470e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	4826      	ldr	r0, [pc, #152]	; (80047b0 <MX_TIM23_Init+0x120>)
 8004718:	f00b fc30 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <MX_TIM23_Init+0x96>
  {
    Error_Handler();
 8004722:	f7fd fa38 	bl	8001b96 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800472a:	2301      	movs	r3, #1
 800472c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8004732:	2300      	movs	r3, #0
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004736:	f107 031c 	add.w	r3, r7, #28
 800473a:	2200      	movs	r2, #0
 800473c:	4619      	mov	r1, r3
 800473e:	481c      	ldr	r0, [pc, #112]	; (80047b0 <MX_TIM23_Init+0x120>)
 8004740:	f00a fbfb 	bl	800ef3a <HAL_TIM_IC_ConfigChannel>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <MX_TIM23_Init+0xbe>
  {
    Error_Handler();
 800474a:	f7fd fa24 	bl	8001b96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800474e:	2360      	movs	r3, #96	; 0x60
 8004750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800475e:	463b      	mov	r3, r7
 8004760:	2204      	movs	r2, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4812      	ldr	r0, [pc, #72]	; (80047b0 <MX_TIM23_Init+0x120>)
 8004766:	f00a fc85 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <MX_TIM23_Init+0xe4>
  {
    Error_Handler();
 8004770:	f7fd fa11 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004774:	463b      	mov	r3, r7
 8004776:	2208      	movs	r2, #8
 8004778:	4619      	mov	r1, r3
 800477a:	480d      	ldr	r0, [pc, #52]	; (80047b0 <MX_TIM23_Init+0x120>)
 800477c:	f00a fc7a 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <MX_TIM23_Init+0xfa>
  {
    Error_Handler();
 8004786:	f7fd fa06 	bl	8001b96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800478a:	463b      	mov	r3, r7
 800478c:	220c      	movs	r2, #12
 800478e:	4619      	mov	r1, r3
 8004790:	4807      	ldr	r0, [pc, #28]	; (80047b0 <MX_TIM23_Init+0x120>)
 8004792:	f00a fc6f 	bl	800f074 <HAL_TIM_PWM_ConfigChannel>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_TIM23_Init+0x110>
  {
    Error_Handler();
 800479c:	f7fd f9fb 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80047a0:	4803      	ldr	r0, [pc, #12]	; (80047b0 <MX_TIM23_Init+0x120>)
 80047a2:	f000 f9c3 	bl	8004b2c <HAL_TIM_MspPostInit>

}
 80047a6:	bf00      	nop
 80047a8:	3738      	adds	r7, #56	; 0x38
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24000bd8 	.word	0x24000bd8
 80047b4:	4000e000 	.word	0x4000e000

080047b8 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM24_Init 2 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5c      	ldr	r2, [pc, #368]	; (8004938 <HAL_TIM_PWM_MspInit+0x180>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10f      	bne.n	80047ea <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80047cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d0:	4a5a      	ldr	r2, [pc, #360]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047da:	4b58      	ldr	r3, [pc, #352]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80047dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80047e8:	e0a1      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f2:	d117      	bne.n	8004824 <HAL_TIM_PWM_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047f4:	4b51      	ldr	r3, [pc, #324]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80047f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047fa:	4a50      	ldr	r2, [pc, #320]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	623b      	str	r3, [r7, #32]
 8004810:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	201c      	movs	r0, #28
 8004818:	f002 fedf 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800481c:	201c      	movs	r0, #28
 800481e:	f002 fef6 	bl	800760e <HAL_NVIC_EnableIRQ>
}
 8004822:	e084      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM3)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a45      	ldr	r2, [pc, #276]	; (8004940 <HAL_TIM_PWM_MspInit+0x188>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d10f      	bne.n	800484e <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800482e:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004834:	4a41      	ldr	r2, [pc, #260]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004836:	f043 0302 	orr.w	r3, r3, #2
 800483a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800483e:	4b3f      	ldr	r3, [pc, #252]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	e06f      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM4)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a3c      	ldr	r2, [pc, #240]	; (8004944 <HAL_TIM_PWM_MspInit+0x18c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d10f      	bne.n	8004878 <HAL_TIM_PWM_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004858:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 800485a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800485e:	4a37      	ldr	r2, [pc, #220]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004860:	f043 0304 	orr.w	r3, r3, #4
 8004864:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004868:	4b34      	ldr	r3, [pc, #208]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 800486a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	69bb      	ldr	r3, [r7, #24]
}
 8004876:	e05a      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM5)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a32      	ldr	r2, [pc, #200]	; (8004948 <HAL_TIM_PWM_MspInit+0x190>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10f      	bne.n	80048a2 <HAL_TIM_PWM_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004882:	4b2e      	ldr	r3, [pc, #184]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004888:	4a2c      	ldr	r2, [pc, #176]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 800488a:	f043 0308 	orr.w	r3, r3, #8
 800488e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004892:	4b2a      	ldr	r3, [pc, #168]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	e045      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM12)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a29      	ldr	r2, [pc, #164]	; (800494c <HAL_TIM_PWM_MspInit+0x194>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10f      	bne.n	80048cc <HAL_TIM_PWM_MspInit+0x114>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80048ac:	4b23      	ldr	r3, [pc, #140]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048b2:	4a22      	ldr	r2, [pc, #136]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048bc:	4b1f      	ldr	r3, [pc, #124]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]
}
 80048ca:	e030      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM15)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <HAL_TIM_PWM_MspInit+0x198>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10f      	bne.n	80048f6 <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048dc:	4a17      	ldr	r2, [pc, #92]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048e6:	4b15      	ldr	r3, [pc, #84]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 80048e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	e01b      	b.n	800492e <HAL_TIM_PWM_MspInit+0x176>
  else if(tim_pwmHandle->Instance==TIM24)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a16      	ldr	r2, [pc, #88]	; (8004954 <HAL_TIM_PWM_MspInit+0x19c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d116      	bne.n	800492e <HAL_TIM_PWM_MspInit+0x176>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004902:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004906:	4a0d      	ldr	r2, [pc, #52]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800490c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_TIM_PWM_MspInit+0x184>)
 8004912:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM24_IRQn, 0, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	20a2      	movs	r0, #162	; 0xa2
 8004924:	f002 fe59 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM24_IRQn);
 8004928:	20a2      	movs	r0, #162	; 0xa2
 800492a:	f002 fe70 	bl	800760e <HAL_NVIC_EnableIRQ>
}
 800492e:	bf00      	nop
 8004930:	3728      	adds	r7, #40	; 0x28
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	58024400 	.word	0x58024400
 8004940:	40000400 	.word	0x40000400
 8004944:	40000800 	.word	0x40000800
 8004948:	40000c00 	.word	0x40000c00
 800494c:	40001800 	.word	0x40001800
 8004950:	40014000 	.word	0x40014000
 8004954:	4000e400 	.word	0x4000e400

08004958 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a23      	ldr	r2, [pc, #140]	; (80049f4 <HAL_TIM_Base_MspInit+0x9c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d117      	bne.n	800499a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 800496c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004970:	4a21      	ldr	r2, [pc, #132]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 8004972:	f043 0310 	orr.w	r3, r3, #16
 8004976:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800497a:	4b1f      	ldr	r3, [pc, #124]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 800497c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004988:	2200      	movs	r2, #0
 800498a:	2100      	movs	r1, #0
 800498c:	2036      	movs	r0, #54	; 0x36
 800498e:	f002 fe24 	bl	80075da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004992:	2036      	movs	r0, #54	; 0x36
 8004994:	f002 fe3b 	bl	800760e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8004998:	e028      	b.n	80049ec <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM16)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a17      	ldr	r2, [pc, #92]	; (80049fc <HAL_TIM_Base_MspInit+0xa4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10f      	bne.n	80049c4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049aa:	4a13      	ldr	r2, [pc, #76]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049b4:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
}
 80049c2:	e013      	b.n	80049ec <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM17)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a0d      	ldr	r2, [pc, #52]	; (8004a00 <HAL_TIM_Base_MspInit+0xa8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049d4:	4a08      	ldr	r2, [pc, #32]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80049de:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_TIM_Base_MspInit+0xa0>)
 80049e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fb      	ldr	r3, [r7, #12]
}
 80049ec:	bf00      	nop
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40001000 	.word	0x40001000
 80049f8:	58024400 	.word	0x58024400
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	; 0x28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <HAL_TIM_Encoder_MspInit+0x88>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d12d      	bne.n	8004a82 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004a26:	4b1a      	ldr	r3, [pc, #104]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a2c:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a2e:	f043 0302 	orr.w	r3, r3, #2
 8004a32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a4a:	4a11      	ldr	r2, [pc, #68]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a4c:	f043 0304 	orr.w	r3, r3, #4
 8004a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 8004a62:	23c0      	movs	r3, #192	; 0xc0
 8004a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a66:	2302      	movs	r3, #2
 8004a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004a72:	2303      	movs	r3, #3
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4805      	ldr	r0, [pc, #20]	; (8004a94 <HAL_TIM_Encoder_MspInit+0x90>)
 8004a7e:	f005 feeb 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004a82:	bf00      	nop
 8004a84:	3728      	adds	r7, #40	; 0x28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40010400 	.word	0x40010400
 8004a90:	58024400 	.word	0x58024400
 8004a94:	58020800 	.word	0x58020800

08004a98 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM23)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <HAL_TIM_IC_MspInit+0x88>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d12d      	bne.n	8004b16 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004aba:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004abc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004acc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004ae0:	f043 0320 	orr.w	r3, r3, #32
 8004ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <HAL_TIM_IC_MspInit+0x8c>)
 8004aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 8004af6:	2301      	movs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afa:	2302      	movs	r3, #2
 8004afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b02:	2300      	movs	r3, #0
 8004b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004b06:	230d      	movs	r3, #13
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 8004b0a:	f107 0314 	add.w	r3, r7, #20
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4805      	ldr	r0, [pc, #20]	; (8004b28 <HAL_TIM_IC_MspInit+0x90>)
 8004b12:	f005 fea1 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 8004b16:	bf00      	nop
 8004b18:	3728      	adds	r7, #40	; 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	4000e000 	.word	0x4000e000
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58021400 	.word	0x58021400

08004b2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b090      	sub	sp, #64	; 0x40
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4aa6      	ldr	r2, [pc, #664]	; (8004de4 <HAL_TIM_MspPostInit+0x2b8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d120      	bne.n	8004b90 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b4e:	4ba6      	ldr	r3, [pc, #664]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b54:	4aa4      	ldr	r2, [pc, #656]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b5e:	4ba2      	ldr	r3, [pc, #648]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b64:	f003 0310 	and.w	r3, r3, #16
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 8004b6c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8004b70:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b86:	4619      	mov	r1, r3
 8004b88:	4898      	ldr	r0, [pc, #608]	; (8004dec <HAL_TIM_MspPostInit+0x2c0>)
 8004b8a:	f005 fe65 	bl	800a858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8004b8e:	e125      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a96      	ldr	r2, [pc, #600]	; (8004df0 <HAL_TIM_MspPostInit+0x2c4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d13f      	bne.n	8004c1a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b9a:	4b93      	ldr	r3, [pc, #588]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba0:	4a91      	ldr	r2, [pc, #580]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004ba2:	f043 0304 	orr.w	r3, r3, #4
 8004ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004baa:	4b8f      	ldr	r3, [pc, #572]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb8:	4b8b      	ldr	r3, [pc, #556]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bbe:	4a8a      	ldr	r2, [pc, #552]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004bc0:	f043 0302 	orr.w	r3, r3, #2
 8004bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bc8:	4b87      	ldr	r3, [pc, #540]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 8004bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	2300      	movs	r3, #0
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004be8:	2302      	movs	r3, #2
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4880      	ldr	r0, [pc, #512]	; (8004df4 <HAL_TIM_MspPostInit+0x2c8>)
 8004bf4:	f005 fe30 	bl	800a858 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 8004bf8:	2330      	movs	r3, #48	; 0x30
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c04:	2300      	movs	r3, #0
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c10:	4619      	mov	r1, r3
 8004c12:	4879      	ldr	r0, [pc, #484]	; (8004df8 <HAL_TIM_MspPostInit+0x2cc>)
 8004c14:	f005 fe20 	bl	800a858 <HAL_GPIO_Init>
}
 8004c18:	e0e0      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM4)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a77      	ldr	r2, [pc, #476]	; (8004dfc <HAL_TIM_MspPostInit+0x2d0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d120      	bne.n	8004c66 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c24:	4b70      	ldr	r3, [pc, #448]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c2a:	4a6f      	ldr	r2, [pc, #444]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c2c:	f043 0308 	orr.w	r3, r3, #8
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c34:	4b6c      	ldr	r3, [pc, #432]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 8004c42:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c54:	2302      	movs	r3, #2
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4868      	ldr	r0, [pc, #416]	; (8004e00 <HAL_TIM_MspPostInit+0x2d4>)
 8004c60:	f005 fdfa 	bl	800a858 <HAL_GPIO_Init>
}
 8004c64:	e0ba      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM12)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a66      	ldr	r2, [pc, #408]	; (8004e04 <HAL_TIM_MspPostInit+0x2d8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d120      	bne.n	8004cb2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c70:	4b5d      	ldr	r3, [pc, #372]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c76:	4a5c      	ldr	r2, [pc, #368]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 8004c8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c94:	2302      	movs	r3, #2
 8004c96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4853      	ldr	r0, [pc, #332]	; (8004df8 <HAL_TIM_MspPostInit+0x2cc>)
 8004cac:	f005 fdd4 	bl	800a858 <HAL_GPIO_Init>
}
 8004cb0:	e094      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM15)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a54      	ldr	r2, [pc, #336]	; (8004e08 <HAL_TIM_MspPostInit+0x2dc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d11f      	bne.n	8004cfc <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc2:	4a49      	ldr	r2, [pc, #292]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004cc4:	f043 0310 	orr.w	r3, r3, #16
 8004cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ccc:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 8004cda:	2370      	movs	r3, #112	; 0x70
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004cea:	2304      	movs	r3, #4
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	483d      	ldr	r0, [pc, #244]	; (8004dec <HAL_TIM_MspPostInit+0x2c0>)
 8004cf6:	f005 fdaf 	bl	800a858 <HAL_GPIO_Init>
}
 8004cfa:	e06f      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM16)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <HAL_TIM_MspPostInit+0x2e0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d120      	bne.n	8004d48 <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	4a36      	ldr	r2, [pc, #216]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d16:	4b34      	ldr	r3, [pc, #208]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 8004d24:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004d36:	2301      	movs	r3, #1
 8004d38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d3e:	4619      	mov	r1, r3
 8004d40:	482d      	ldr	r0, [pc, #180]	; (8004df8 <HAL_TIM_MspPostInit+0x2cc>)
 8004d42:	f005 fd89 	bl	800a858 <HAL_GPIO_Init>
}
 8004d46:	e049      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM17)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a30      	ldr	r2, [pc, #192]	; (8004e10 <HAL_TIM_MspPostInit+0x2e4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d120      	bne.n	8004d94 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d52:	4b25      	ldr	r3, [pc, #148]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d58:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d5a:	f043 0302 	orr.w	r3, r3, #2
 8004d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d62:	4b21      	ldr	r3, [pc, #132]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 8004d70:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	2302      	movs	r3, #2
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8004d82:	2301      	movs	r3, #1
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	481a      	ldr	r0, [pc, #104]	; (8004df8 <HAL_TIM_MspPostInit+0x2cc>)
 8004d8e:	f005 fd63 	bl	800a858 <HAL_GPIO_Init>
}
 8004d92:	e023      	b.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM23)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_TIM_MspPostInit+0x2e8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d11e      	bne.n	8004ddc <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004da4:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004da6:	f043 0320 	orr.w	r3, r3, #32
 8004daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dae:	4b0e      	ldr	r3, [pc, #56]	; (8004de8 <HAL_TIM_MspPostInit+0x2bc>)
 8004db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 8004dbc:	230e      	movs	r3, #14
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8004dcc:	230d      	movs	r3, #13
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4810      	ldr	r0, [pc, #64]	; (8004e18 <HAL_TIM_MspPostInit+0x2ec>)
 8004dd8:	f005 fd3e 	bl	800a858 <HAL_GPIO_Init>
}
 8004ddc:	bf00      	nop
 8004dde:	3740      	adds	r7, #64	; 0x40
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40010000 	.word	0x40010000
 8004de8:	58024400 	.word	0x58024400
 8004dec:	58021000 	.word	0x58021000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	58020800 	.word	0x58020800
 8004df8:	58020400 	.word	0x58020400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	58020c00 	.word	0x58020c00
 8004e04:	40001800 	.word	0x40001800
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800
 8004e14:	4000e000 	.word	0x4000e000
 8004e18:	58021400 	.word	0x58021400

08004e1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e20:	4b22      	ldr	r3, [pc, #136]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e22:	4a23      	ldr	r2, [pc, #140]	; (8004eb0 <MX_USART1_UART_Init+0x94>)
 8004e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e26:	4b21      	ldr	r3, [pc, #132]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e34:	4b1d      	ldr	r3, [pc, #116]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e3a:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e40:	4b1a      	ldr	r3, [pc, #104]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e42:	220c      	movs	r2, #12
 8004e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e52:	4b16      	ldr	r3, [pc, #88]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e64:	4811      	ldr	r0, [pc, #68]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e66:	f00b f9e3 	bl	8010230 <HAL_UART_Init>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d001      	beq.n	8004e74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004e70:	f7fc fe91 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e74:	2100      	movs	r1, #0
 8004e76:	480d      	ldr	r0, [pc, #52]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e78:	f00c fa84 	bl	8011384 <HAL_UARTEx_SetTxFifoThreshold>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004e82:	f7fc fe88 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004e86:	2100      	movs	r1, #0
 8004e88:	4808      	ldr	r0, [pc, #32]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e8a:	f00c fab9 	bl	8011400 <HAL_UARTEx_SetRxFifoThreshold>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004e94:	f7fc fe7f 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004e98:	4804      	ldr	r0, [pc, #16]	; (8004eac <MX_USART1_UART_Init+0x90>)
 8004e9a:	f00c fa3a 	bl	8011312 <HAL_UARTEx_DisableFifoMode>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004ea4:	f7fc fe77 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	24000c70 	.word	0x24000c70
 8004eb0:	40011000 	.word	0x40011000

08004eb4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004eb8:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004eba:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <MX_USART2_UART_Init+0x94>)
 8004ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ed8:	4b1a      	ldr	r3, [pc, #104]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004eda:	220c      	movs	r2, #12
 8004edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ee4:	4b17      	ldr	r3, [pc, #92]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eea:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ef0:	4b14      	ldr	r3, [pc, #80]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ef6:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004efc:	4811      	ldr	r0, [pc, #68]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004efe:	f00b f997 	bl	8010230 <HAL_UART_Init>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004f08:	f7fc fe45 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	480d      	ldr	r0, [pc, #52]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004f10:	f00c fa38 	bl	8011384 <HAL_UARTEx_SetTxFifoThreshold>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004f1a:	f7fc fe3c 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4808      	ldr	r0, [pc, #32]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004f22:	f00c fa6d 	bl	8011400 <HAL_UARTEx_SetRxFifoThreshold>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004f2c:	f7fc fe33 	bl	8001b96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f30:	4804      	ldr	r0, [pc, #16]	; (8004f44 <MX_USART2_UART_Init+0x90>)
 8004f32:	f00c f9ee 	bl	8011312 <HAL_UARTEx_DisableFifoMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004f3c:	f7fc fe2b 	bl	8001b96 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	24000d00 	.word	0x24000d00
 8004f48:	40004400 	.word	0x40004400

08004f4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b0b8      	sub	sp, #224	; 0xe0
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	609a      	str	r2, [r3, #8]
 8004f60:	60da      	str	r2, [r3, #12]
 8004f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f64:	f107 0318 	add.w	r3, r7, #24
 8004f68:	22b4      	movs	r2, #180	; 0xb4
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f021 f9db 	bl	8026328 <memset>
  if(uartHandle->Instance==USART1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a49      	ldr	r2, [pc, #292]	; (800509c <HAL_UART_MspInit+0x150>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d143      	bne.n	8005004 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f007 f9c0 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004f96:	f7fc fdfe 	bl	8001b96 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f9a:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa0:	4a3f      	ldr	r2, [pc, #252]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004fa2:	f043 0310 	orr.w	r3, r3, #16
 8004fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004faa:	4b3d      	ldr	r3, [pc, #244]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb8:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fbe:	4a38      	ldr	r2, [pc, #224]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fc8:	4b35      	ldr	r3, [pc, #212]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8004fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004fd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fde:	2302      	movs	r3, #2
 8004fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ff0:	2307      	movs	r3, #7
 8004ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4829      	ldr	r0, [pc, #164]	; (80050a4 <HAL_UART_MspInit+0x158>)
 8004ffe:	f005 fc2b 	bl	800a858 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005002:	e046      	b.n	8005092 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a27      	ldr	r2, [pc, #156]	; (80050a8 <HAL_UART_MspInit+0x15c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d141      	bne.n	8005092 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800500e:	2302      	movs	r3, #2
 8005010:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005012:	2300      	movs	r3, #0
 8005014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005018:	f107 0318 	add.w	r3, r7, #24
 800501c:	4618      	mov	r0, r3
 800501e:	f007 f977 	bl	800c310 <HAL_RCCEx_PeriphCLKConfig>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8005028:	f7fc fdb5 	bl	8001b96 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800502c:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <HAL_UART_MspInit+0x154>)
 800502e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005032:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8005034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005038:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800503c:	4b18      	ldr	r3, [pc, #96]	; (80050a0 <HAL_UART_MspInit+0x154>)
 800503e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800504a:	4b15      	ldr	r3, [pc, #84]	; (80050a0 <HAL_UART_MspInit+0x154>)
 800504c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <HAL_UART_MspInit+0x154>)
 8005052:	f043 0308 	orr.w	r3, r3, #8
 8005056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_UART_MspInit+0x154>)
 800505c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005068:	2360      	movs	r3, #96	; 0x60
 800506a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005080:	2307      	movs	r3, #7
 8005082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005086:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800508a:	4619      	mov	r1, r3
 800508c:	4807      	ldr	r0, [pc, #28]	; (80050ac <HAL_UART_MspInit+0x160>)
 800508e:	f005 fbe3 	bl	800a858 <HAL_GPIO_Init>
}
 8005092:	bf00      	nop
 8005094:	37e0      	adds	r7, #224	; 0xe0
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58020000 	.word	0x58020000
 80050a8:	40004400 	.word	0x40004400
 80050ac:	58020c00 	.word	0x58020c00

080050b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050b4:	f7fe fe98 	bl	8003de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050b8:	480c      	ldr	r0, [pc, #48]	; (80050ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050ba:	490d      	ldr	r1, [pc, #52]	; (80050f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050bc:	4a0d      	ldr	r2, [pc, #52]	; (80050f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050c0:	e002      	b.n	80050c8 <LoopCopyDataInit>

080050c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050c6:	3304      	adds	r3, #4

080050c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050cc:	d3f9      	bcc.n	80050c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050ce:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050d0:	4c0a      	ldr	r4, [pc, #40]	; (80050fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80050d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050d4:	e001      	b.n	80050da <LoopFillZerobss>

080050d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050d8:	3204      	adds	r2, #4

080050da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050dc:	d3fb      	bcc.n	80050d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050de:	f021 f8c7 	bl	8026270 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050e2:	f7fc fbd7 	bl	8001894 <main>
  bx  lr
 80050e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80050ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80050f0:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 80050f4:	08026d14 	.word	0x08026d14
  ldr r2, =_sbss
 80050f8:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 80050fc:	24001440 	.word	0x24001440

08005100 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005100:	e7fe      	b.n	8005100 <ADC_IRQHandler>
	...

08005104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800510a:	2003      	movs	r0, #3
 800510c:	f002 fa5a 	bl	80075c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005110:	f006 ff28 	bl	800bf64 <HAL_RCC_GetSysClockFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <HAL_Init+0x68>)
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	0a1b      	lsrs	r3, r3, #8
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	4913      	ldr	r1, [pc, #76]	; (8005170 <HAL_Init+0x6c>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	fa22 f303 	lsr.w	r3, r2, r3
 800512c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <HAL_Init+0x68>)
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	4a0e      	ldr	r2, [pc, #56]	; (8005170 <HAL_Init+0x6c>)
 8005138:	5cd3      	ldrb	r3, [r2, r3]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	4a0b      	ldr	r2, [pc, #44]	; (8005174 <HAL_Init+0x70>)
 8005146:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005148:	4a0b      	ldr	r2, [pc, #44]	; (8005178 <HAL_Init+0x74>)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800514e:	2000      	movs	r0, #0
 8005150:	f000 f814 	bl	800517c <HAL_InitTick>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d001      	beq.n	800515e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e002      	b.n	8005164 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800515e:	f7fe fd35 	bl	8003bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	58024400 	.word	0x58024400
 8005170:	08026c84 	.word	0x08026c84
 8005174:	24000004 	.word	0x24000004
 8005178:	24000000 	.word	0x24000000

0800517c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_InitTick+0x60>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e021      	b.n	80051d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005190:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_InitTick+0x64>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <HAL_InitTick+0x60>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800519e:	fbb3 f3f1 	udiv	r3, r3, r1
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f002 fa3f 	bl	800762a <HAL_SYSTICK_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e00e      	b.n	80051d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d80a      	bhi.n	80051d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051bc:	2200      	movs	r2, #0
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	f002 fa09 	bl	80075da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <HAL_InitTick+0x68>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2400000c 	.word	0x2400000c
 80051e0:	24000000 	.word	0x24000000
 80051e4:	24000008 	.word	0x24000008

080051e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_IncTick+0x20>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_IncTick+0x24>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <HAL_IncTick+0x24>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	2400000c 	.word	0x2400000c
 800520c:	24000d90 	.word	0x24000d90

08005210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return uwTick;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_GetTick+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	24000d90 	.word	0x24000d90

08005228 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005238:	4904      	ldr	r1, [pc, #16]	; (800524c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4313      	orrs	r3, r2
 800523e:	604b      	str	r3, [r1, #4]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	58000400 	.word	0x58000400

08005250 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800525a:	4b07      	ldr	r3, [pc, #28]	; (8005278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	4904      	ldr	r1, [pc, #16]	; (8005278 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	58000400 	.word	0x58000400

0800527c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	609a      	str	r2, [r3, #8]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3360      	adds	r3, #96	; 0x60
 80052f6:	461a      	mov	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <LL_ADC_SetOffset+0x60>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10b      	bne.n	8005320 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	4313      	orrs	r3, r2
 8005316:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800531e:	e00b      	b.n	8005338 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	430b      	orrs	r3, r1
 8005332:	431a      	orrs	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	58026000 	.word	0x58026000

08005348 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3360      	adds	r3, #96	; 0x60
 8005356:	461a      	mov	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	431a      	orrs	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	611a      	str	r2, [r3, #16]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00e      	beq.n	80053da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3360      	adds	r3, #96	; 0x60
 80053c0:	461a      	mov	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	431a      	orrs	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	601a      	str	r2, [r3, #0]
  }
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	58026000 	.word	0x58026000

080053ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a0c      	ldr	r2, [pc, #48]	; (800542c <LL_ADC_SetOffsetSaturation+0x40>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10e      	bne.n	800541e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3360      	adds	r3, #96	; 0x60
 8005404:	461a      	mov	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	431a      	orrs	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	58026000 	.word	0x58026000

08005430 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <LL_ADC_SetOffsetSign+0x40>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d10e      	bne.n	8005462 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3360      	adds	r3, #96	; 0x60
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	4413      	add	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	431a      	orrs	r2, r3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	58026000 	.word	0x58026000

08005474 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3360      	adds	r3, #96	; 0x60
 8005484:	461a      	mov	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <LL_ADC_SetOffsetState+0x50>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d108      	bne.n	80054a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80054a6:	e007      	b.n	80054b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	58026000 	.word	0x58026000

080054c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b087      	sub	sp, #28
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3330      	adds	r3, #48	; 0x30
 80054fe:	461a      	mov	r2, r3
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	0a1b      	lsrs	r3, r3, #8
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	4413      	add	r3, r2
 800550c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	211f      	movs	r1, #31
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	43db      	mvns	r3, r3
 8005520:	401a      	ands	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	0e9b      	lsrs	r3, r3, #26
 8005526:	f003 011f 	and.w	r1, r3, #31
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f003 031f 	and.w	r3, r3, #31
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	431a      	orrs	r2, r3
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f023 0203 	bic.w	r2, r3, #3
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60da      	str	r2, [r3, #12]
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f043 0201 	orr.w	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60da      	str	r2, [r3, #12]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a08      	ldr	r2, [pc, #32]	; (80055bc <LL_ADC_REG_SetDMATransferMode+0x30>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d107      	bne.n	80055ae <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f023 0203 	bic.w	r2, r3, #3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]
  }
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58026000 	.word	0x58026000

080055c0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055cc:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	3314      	adds	r3, #20
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	0e5b      	lsrs	r3, r3, #25
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	4413      	add	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	0d1b      	lsrs	r3, r3, #20
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2107      	movs	r1, #7
 8005614:	fa01 f303 	lsl.w	r3, r1, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	401a      	ands	r2, r3
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	0d1b      	lsrs	r3, r3, #20
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	fa01 f303 	lsl.w	r3, r1, r3
 800562a:	431a      	orrs	r2, r3
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d115      	bne.n	800567c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800565c:	43db      	mvns	r3, r3
 800565e:	401a      	ands	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f003 0318 	and.w	r3, r3, #24
 8005666:	4914      	ldr	r1, [pc, #80]	; (80056b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005668:	40d9      	lsrs	r1, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	400b      	ands	r3, r1
 800566e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005672:	431a      	orrs	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800567a:	e014      	b.n	80056a6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005688:	43db      	mvns	r3, r3
 800568a:	401a      	ands	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f003 0318 	and.w	r3, r3, #24
 8005692:	4909      	ldr	r1, [pc, #36]	; (80056b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005694:	40d9      	lsrs	r1, r3
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	400b      	ands	r3, r1
 800569a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800569e:	431a      	orrs	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	58026000 	.word	0x58026000
 80056b8:	000fffff 	.word	0x000fffff

080056bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 031f 	and.w	r3, r3, #31
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	4b04      	ldr	r3, [pc, #16]	; (8005714 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005702:	4013      	ands	r3, r2
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6093      	str	r3, [r2, #8]
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	5fffffc0 	.word	0x5fffffc0

08005718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800572c:	d101      	bne.n	8005732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <LL_ADC_EnableInternalRegulator+0x24>)
 800574e:	4013      	ands	r3, r2
 8005750:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	6fffffc0 	.word	0x6fffffc0

08005768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800577c:	d101      	bne.n	8005782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <LL_ADC_Enable+0x24>)
 800579e:	4013      	ands	r3, r2
 80057a0:	f043 0201 	orr.w	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	7fffffc0 	.word	0x7fffffc0

080057b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <LL_ADC_IsEnabled+0x18>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <LL_ADC_IsEnabled+0x1a>
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
	...

080057e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <LL_ADC_REG_StartConversion+0x24>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	f043 0204 	orr.w	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	7fffffc0 	.word	0x7fffffc0

08005808 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b04      	cmp	r3, #4
 800581a:	d101      	bne.n	8005820 <LL_ADC_REG_IsConversionOngoing+0x18>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800582e:	b480      	push	{r7}
 8005830:	b083      	sub	sp, #12
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b08      	cmp	r3, #8
 8005840:	d101      	bne.n	8005846 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1ee      	b.n	8005c4c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fa fec9 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff ff3f 	bl	8005718 <LL_ADC_IsDeepPowerDownEnabled>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff ff25 	bl	80056f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff ff5a 	bl	8005768 <LL_ADC_IsInternalRegulatorEnabled>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d114      	bne.n	80058e4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff ff3e 	bl	8005740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058c4:	4b8e      	ldr	r3, [pc, #568]	; (8005b00 <HAL_ADC_Init+0x2ac>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	099b      	lsrs	r3, r3, #6
 80058ca:	4a8e      	ldr	r2, [pc, #568]	; (8005b04 <HAL_ADC_Init+0x2b0>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	3301      	adds	r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058d6:	e002      	b.n	80058de <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f9      	bne.n	80058d8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff3d 	bl	8005768 <LL_ADC_IsInternalRegulatorEnabled>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f8:	f043 0210 	orr.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005904:	f043 0201 	orr.w	r2, r3, #1
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff ff77 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 800591a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 8188 	bne.w	8005c3a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 8184 	bne.w	8005c3a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005936:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800593a:	f043 0202 	orr.w	r2, r3, #2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff ff36 	bl	80057b8 <LL_ADC_IsEnabled>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d136      	bne.n	80059c0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a6c      	ldr	r2, [pc, #432]	; (8005b08 <HAL_ADC_Init+0x2b4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_ADC_Init+0x112>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <HAL_ADC_Init+0x2b8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10e      	bne.n	8005984 <HAL_ADC_Init+0x130>
 8005966:	4868      	ldr	r0, [pc, #416]	; (8005b08 <HAL_ADC_Init+0x2b4>)
 8005968:	f7ff ff26 	bl	80057b8 <LL_ADC_IsEnabled>
 800596c:	4604      	mov	r4, r0
 800596e:	4867      	ldr	r0, [pc, #412]	; (8005b0c <HAL_ADC_Init+0x2b8>)
 8005970:	f7ff ff22 	bl	80057b8 <LL_ADC_IsEnabled>
 8005974:	4603      	mov	r3, r0
 8005976:	4323      	orrs	r3, r4
 8005978:	2b00      	cmp	r3, #0
 800597a:	bf0c      	ite	eq
 800597c:	2301      	moveq	r3, #1
 800597e:	2300      	movne	r3, #0
 8005980:	b2db      	uxtb	r3, r3
 8005982:	e008      	b.n	8005996 <HAL_ADC_Init+0x142>
 8005984:	4862      	ldr	r0, [pc, #392]	; (8005b10 <HAL_ADC_Init+0x2bc>)
 8005986:	f7ff ff17 	bl	80057b8 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	bf0c      	ite	eq
 8005990:	2301      	moveq	r3, #1
 8005992:	2300      	movne	r3, #0
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a5a      	ldr	r2, [pc, #360]	; (8005b08 <HAL_ADC_Init+0x2b4>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_ADC_Init+0x15a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a58      	ldr	r2, [pc, #352]	; (8005b0c <HAL_ADC_Init+0x2b8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_Init+0x15e>
 80059ae:	4a59      	ldr	r2, [pc, #356]	; (8005b14 <HAL_ADC_Init+0x2c0>)
 80059b0:	e000      	b.n	80059b4 <HAL_ADC_Init+0x160>
 80059b2:	4a59      	ldr	r2, [pc, #356]	; (8005b18 <HAL_ADC_Init+0x2c4>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4619      	mov	r1, r3
 80059ba:	4610      	mov	r0, r2
 80059bc:	f7ff fc5e 	bl	800527c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a52      	ldr	r2, [pc, #328]	; (8005b10 <HAL_ADC_Init+0x2bc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d129      	bne.n	8005a1e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7e5b      	ldrb	r3, [r3, #25]
 80059ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80059d4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80059da:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d013      	beq.n	8005a0c <HAL_ADC_Init+0x1b8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b0c      	cmp	r3, #12
 80059ea:	d00d      	beq.n	8005a08 <HAL_ADC_Init+0x1b4>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b1c      	cmp	r3, #28
 80059f2:	d007      	beq.n	8005a04 <HAL_ADC_Init+0x1b0>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b18      	cmp	r3, #24
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_Init+0x1ac>
 80059fc:	2318      	movs	r3, #24
 80059fe:	e006      	b.n	8005a0e <HAL_ADC_Init+0x1ba>
 8005a00:	2300      	movs	r3, #0
 8005a02:	e004      	b.n	8005a0e <HAL_ADC_Init+0x1ba>
 8005a04:	2310      	movs	r3, #16
 8005a06:	e002      	b.n	8005a0e <HAL_ADC_Init+0x1ba>
 8005a08:	2308      	movs	r3, #8
 8005a0a:	e000      	b.n	8005a0e <HAL_ADC_Init+0x1ba>
 8005a0c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8005a0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e00e      	b.n	8005a3c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	7e5b      	ldrb	r3, [r3, #25]
 8005a22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005a28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005a2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d106      	bne.n	8005a54 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	045b      	lsls	r3, r3, #17
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a26      	ldr	r2, [pc, #152]	; (8005b10 <HAL_ADC_Init+0x2bc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d115      	bne.n	8005aa6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	4b26      	ldr	r3, [pc, #152]	; (8005b1c <HAL_ADC_Init+0x2c8>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	611a      	str	r2, [r3, #16]
 8005aa4:	e009      	b.n	8005aba <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	4b1c      	ldr	r3, [pc, #112]	; (8005b20 <HAL_ADC_Init+0x2cc>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	69b9      	ldr	r1, [r7, #24]
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fea2 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 8005ac4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff feaf 	bl	800582e <LL_ADC_INJ_IsConversionOngoing>
 8005ad0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 808e 	bne.w	8005bf6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 808a 	bne.w	8005bf6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	; (8005b10 <HAL_ADC_Init+0x2bc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d11b      	bne.n	8005b24 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7e1b      	ldrb	r3, [r3, #24]
 8005af0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005af8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005afa:	4313      	orrs	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e018      	b.n	8005b32 <HAL_ADC_Init+0x2de>
 8005b00:	24000000 	.word	0x24000000
 8005b04:	053e2d63 	.word	0x053e2d63
 8005b08:	40022000 	.word	0x40022000
 8005b0c:	40022100 	.word	0x40022100
 8005b10:	58026000 	.word	0x58026000
 8005b14:	40022300 	.word	0x40022300
 8005b18:	58026300 	.word	0x58026300
 8005b1c:	fff04007 	.word	0xfff04007
 8005b20:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7e1b      	ldrb	r3, [r3, #24]
 8005b28:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	4b46      	ldr	r3, [pc, #280]	; (8005c54 <HAL_ADC_Init+0x400>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	430b      	orrs	r3, r1
 8005b44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d137      	bne.n	8005bc0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <HAL_ADC_Init+0x404>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d116      	bne.n	8005b8e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	691a      	ldr	r2, [r3, #16]
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <HAL_ADC_Init+0x408>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005b72:	4311      	orrs	r1, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	611a      	str	r2, [r3, #16]
 8005b8c:	e020      	b.n	8005bd0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	4b32      	ldr	r3, [pc, #200]	; (8005c60 <HAL_ADC_Init+0x40c>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	0411      	lsls	r1, r2, #16
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ba4:	4311      	orrs	r1, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005baa:	4311      	orrs	r1, r2
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	611a      	str	r2, [r3, #16]
 8005bbe:	e007      	b.n	8005bd0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_ADC_Init+0x404>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d002      	beq.n	8005bf6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 f9bf 	bl	8006f74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d10c      	bne.n	8005c18 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	f023 010f 	bic.w	r1, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	1e5a      	subs	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
 8005c16:	e007      	b.n	8005c28 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 020f 	bic.w	r2, r2, #15
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	f043 0201 	orr.w	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	661a      	str	r2, [r3, #96]	; 0x60
 8005c38:	e007      	b.n	8005c4a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3724      	adds	r7, #36	; 0x24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd90      	pop	{r4, r7, pc}
 8005c54:	ffffbffc 	.word	0xffffbffc
 8005c58:	58026000 	.word	0x58026000
 8005c5c:	fc00f81f 	.word	0xfc00f81f
 8005c60:	fc00f81e 	.word	0xfc00f81e

08005c64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a60      	ldr	r2, [pc, #384]	; (8005df8 <HAL_ADC_Start_DMA+0x194>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <HAL_ADC_Start_DMA+0x20>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a5f      	ldr	r2, [pc, #380]	; (8005dfc <HAL_ADC_Start_DMA+0x198>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_ADC_Start_DMA+0x24>
 8005c84:	4b5e      	ldr	r3, [pc, #376]	; (8005e00 <HAL_ADC_Start_DMA+0x19c>)
 8005c86:	e000      	b.n	8005c8a <HAL_ADC_Start_DMA+0x26>
 8005c88:	4b5e      	ldr	r3, [pc, #376]	; (8005e04 <HAL_ADC_Start_DMA+0x1a0>)
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fd16 	bl	80056bc <LL_ADC_GetMultimode>
 8005c90:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7ff fdb6 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 80a2 	bne.w	8005de8 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_ADC_Start_DMA+0x4e>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e09d      	b.n	8005dee <HAL_ADC_Start_DMA+0x18a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d003      	beq.n	8005cce <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b09      	cmp	r3, #9
 8005cca:	f040 8086 	bne.w	8005dda <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f001 f832 	bl	8006d38 <ADC_Enable>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d178      	bne.n	8005dd0 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ce2:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <HAL_ADC_Start_DMA+0x1a4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a42      	ldr	r2, [pc, #264]	; (8005dfc <HAL_ADC_Start_DMA+0x198>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d002      	beq.n	8005cfe <HAL_ADC_Start_DMA+0x9a>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e000      	b.n	8005d00 <HAL_ADC_Start_DMA+0x9c>
 8005cfe:	4b3e      	ldr	r3, [pc, #248]	; (8005df8 <HAL_ADC_Start_DMA+0x194>)
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d002      	beq.n	8005d0e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d105      	bne.n	8005d1a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d006      	beq.n	8005d34 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d2a:	f023 0206 	bic.w	r2, r3, #6
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	665a      	str	r2, [r3, #100]	; 0x64
 8005d32:	e002      	b.n	8005d3a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3e:	4a33      	ldr	r2, [pc, #204]	; (8005e0c <HAL_ADC_Start_DMA+0x1a8>)
 8005d40:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d46:	4a32      	ldr	r2, [pc, #200]	; (8005e10 <HAL_ADC_Start_DMA+0x1ac>)
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	4a31      	ldr	r2, [pc, #196]	; (8005e14 <HAL_ADC_Start_DMA+0x1b0>)
 8005d50:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	221c      	movs	r2, #28
 8005d58:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0210 	orr.w	r2, r2, #16
 8005d70:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <HAL_ADC_Start_DMA+0x1b4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d10f      	bne.n	8005d9c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7ff fbfe 	bl	800558c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fbe9 	bl	800556c <LL_ADC_EnableDMAReq>
 8005d9a:	e007      	b.n	8005dac <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f7ff fbcd 	bl	8005546 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3340      	adds	r3, #64	; 0x40
 8005db6:	4619      	mov	r1, r3
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f001 ff9c 	bl	8007cf8 <HAL_DMA_Start_IT>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fd09 	bl	80057e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005dce:	e00d      	b.n	8005dec <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8005dd8:	e008      	b.n	8005dec <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005de6:	e001      	b.n	8005dec <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005de8:	2302      	movs	r3, #2
 8005dea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40022000 	.word	0x40022000
 8005dfc:	40022100 	.word	0x40022100
 8005e00:	40022300 	.word	0x40022300
 8005e04:	58026300 	.word	0x58026300
 8005e08:	fffff0fe 	.word	0xfffff0fe
 8005e0c:	08006e4d 	.word	0x08006e4d
 8005e10:	08006f25 	.word	0x08006f25
 8005e14:	08006f41 	.word	0x08006f41
 8005e18:	58026000 	.word	0x58026000

08005e1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	; 0x28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a87      	ldr	r2, [pc, #540]	; (800605c <HAL_ADC_IRQHandler+0x240>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d004      	beq.n	8005e4c <HAL_ADC_IRQHandler+0x30>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a86      	ldr	r2, [pc, #536]	; (8006060 <HAL_ADC_IRQHandler+0x244>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d101      	bne.n	8005e50 <HAL_ADC_IRQHandler+0x34>
 8005e4c:	4b85      	ldr	r3, [pc, #532]	; (8006064 <HAL_ADC_IRQHandler+0x248>)
 8005e4e:	e000      	b.n	8005e52 <HAL_ADC_IRQHandler+0x36>
 8005e50:	4b85      	ldr	r3, [pc, #532]	; (8006068 <HAL_ADC_IRQHandler+0x24c>)
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fc32 	bl	80056bc <LL_ADC_GetMultimode>
 8005e58:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <HAL_ADC_IRQHandler+0x78>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d012      	beq.n	8005e94 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 f9ae 	bl	80071e8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2202      	movs	r2, #2
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <HAL_ADC_IRQHandler+0x8c>
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f003 0304 	and.w	r3, r3, #4
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 8083 	beq.w	8005fba <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07d      	beq.n	8005fba <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ece:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff faf4 	bl	80054c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d062      	beq.n	8005fac <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a5d      	ldr	r2, [pc, #372]	; (8006060 <HAL_ADC_IRQHandler+0x244>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d002      	beq.n	8005ef6 <HAL_ADC_IRQHandler+0xda>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	e000      	b.n	8005ef8 <HAL_ADC_IRQHandler+0xdc>
 8005ef6:	4b59      	ldr	r3, [pc, #356]	; (800605c <HAL_ADC_IRQHandler+0x240>)
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d008      	beq.n	8005f12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b05      	cmp	r3, #5
 8005f0a:	d002      	beq.n	8005f12 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	d104      	bne.n	8005f1c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	623b      	str	r3, [r7, #32]
 8005f1a:	e00c      	b.n	8005f36 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a4f      	ldr	r2, [pc, #316]	; (8006060 <HAL_ADC_IRQHandler+0x244>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d002      	beq.n	8005f2c <HAL_ADC_IRQHandler+0x110>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	e000      	b.n	8005f2e <HAL_ADC_IRQHandler+0x112>
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_ADC_IRQHandler+0x240>)
 8005f2e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d135      	bne.n	8005fac <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b08      	cmp	r3, #8
 8005f4c:	d12e      	bne.n	8005fac <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fc58 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d11a      	bne.n	8005f94 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 020c 	bic.w	r2, r2, #12
 8005f6c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d112      	bne.n	8005fac <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	f043 0201 	orr.w	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	661a      	str	r2, [r3, #96]	; 0x60
 8005f92:	e00b      	b.n	8005fac <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	f043 0210 	orr.w	r2, r3, #16
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fa4:	f043 0201 	orr.w	r2, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f96f 	bl	8006290 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	220c      	movs	r2, #12
 8005fb8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d004      	beq.n	8005fce <HAL_ADC_IRQHandler+0x1b2>
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80a0 	beq.w	800611a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 809a 	beq.w	800611a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d105      	bne.n	8005ffe <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fadc 	bl	80055c0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006008:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fa5a 	bl	80054c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006014:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a11      	ldr	r2, [pc, #68]	; (8006060 <HAL_ADC_IRQHandler+0x244>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d002      	beq.n	8006026 <HAL_ADC_IRQHandler+0x20a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	e000      	b.n	8006028 <HAL_ADC_IRQHandler+0x20c>
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <HAL_ADC_IRQHandler+0x240>)
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	4293      	cmp	r3, r2
 800602e:	d008      	beq.n	8006042 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b06      	cmp	r3, #6
 800603a:	d002      	beq.n	8006042 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	2b07      	cmp	r3, #7
 8006040:	d104      	bne.n	800604c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	623b      	str	r3, [r7, #32]
 800604a:	e014      	b.n	8006076 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a03      	ldr	r2, [pc, #12]	; (8006060 <HAL_ADC_IRQHandler+0x244>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00a      	beq.n	800606c <HAL_ADC_IRQHandler+0x250>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	e008      	b.n	800606e <HAL_ADC_IRQHandler+0x252>
 800605c:	40022000 	.word	0x40022000
 8006060:	40022100 	.word	0x40022100
 8006064:	40022300 	.word	0x40022300
 8006068:	58026300 	.word	0x58026300
 800606c:	4b84      	ldr	r3, [pc, #528]	; (8006280 <HAL_ADC_IRQHandler+0x464>)
 800606e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d047      	beq.n	800610c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <HAL_ADC_IRQHandler+0x27a>
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d03f      	beq.n	800610c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006092:	2b00      	cmp	r3, #0
 8006094:	d13a      	bne.n	800610c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b40      	cmp	r3, #64	; 0x40
 80060a2:	d133      	bne.n	800610c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d12e      	bne.n	800610c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fbbb 	bl	800582e <LL_ADC_INJ_IsConversionOngoing>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11a      	bne.n	80060f4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060cc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d112      	bne.n	800610c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	661a      	str	r2, [r3, #96]	; 0x60
 80060f2:	e00b      	b.n	800610c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f8:	f043 0210 	orr.w	r2, r3, #16
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006104:	f043 0201 	orr.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 f843 	bl	8007198 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2260      	movs	r2, #96	; 0x60
 8006118:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d011      	beq.n	8006148 <HAL_ADC_IRQHandler+0x32c>
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f8bc 	bl	80062b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2280      	movs	r2, #128	; 0x80
 8006146:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d012      	beq.n	8006178 <HAL_ADC_IRQHandler+0x35c>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006160:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f001 f829 	bl	80071c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006176:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617e:	2b00      	cmp	r3, #0
 8006180:	d012      	beq.n	80061a8 <HAL_ADC_IRQHandler+0x38c>
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006190:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 f81b 	bl	80071d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d043      	beq.n	800623a <HAL_ADC_IRQHandler+0x41e>
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d03e      	beq.n	800623a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80061c4:	2301      	movs	r3, #1
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
 80061c8:	e021      	b.n	800620e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d015      	beq.n	80061fc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <HAL_ADC_IRQHandler+0x464>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_ADC_IRQHandler+0x3c8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a29      	ldr	r2, [pc, #164]	; (8006284 <HAL_ADC_IRQHandler+0x468>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d101      	bne.n	80061e8 <HAL_ADC_IRQHandler+0x3cc>
 80061e4:	4b28      	ldr	r3, [pc, #160]	; (8006288 <HAL_ADC_IRQHandler+0x46c>)
 80061e6:	e000      	b.n	80061ea <HAL_ADC_IRQHandler+0x3ce>
 80061e8:	4b28      	ldr	r3, [pc, #160]	; (800628c <HAL_ADC_IRQHandler+0x470>)
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7ff fa74 	bl	80056d8 <LL_ADC_GetMultiDMATransfer>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80061f6:	2301      	movs	r3, #1
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
 80061fa:	e008      	b.n	800620e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800620a:	2301      	movs	r3, #1
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	2b01      	cmp	r3, #1
 8006212:	d10e      	bne.n	8006232 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006218:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006224:	f043 0202 	orr.w	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f84d 	bl	80062cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2210      	movs	r2, #16
 8006238:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006240:	2b00      	cmp	r3, #0
 8006242:	d018      	beq.n	8006276 <HAL_ADC_IRQHandler+0x45a>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625e:	f043 0208 	orr.w	r2, r3, #8
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800626e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 ff9b 	bl	80071ac <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006276:	bf00      	nop
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40022000 	.word	0x40022000
 8006284:	40022100 	.word	0x40022100
 8006288:	40022300 	.word	0x40022300
 800628c:	58026300 	.word	0x58026300

08006290 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b0b9      	sub	sp, #228	; 0xe4
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062fa:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4aa9      	ldr	r2, [pc, #676]	; (80065a8 <HAL_ADC_ConfigChannel+0x2c8>)
 8006302:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d102      	bne.n	8006314 <HAL_ADC_ConfigChannel+0x34>
 800630e:	2302      	movs	r3, #2
 8006310:	f000 bcfa 	b.w	8006d08 <HAL_ADC_ConfigChannel+0xa28>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fa71 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	f040 84de 	bne.w	8006cea <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a9e      	ldr	r2, [pc, #632]	; (80065ac <HAL_ADC_ConfigChannel+0x2cc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d033      	beq.n	80063a0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006340:	2b00      	cmp	r3, #0
 8006342:	d108      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x76>
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	0e9b      	lsrs	r3, r3, #26
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2201      	movs	r2, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	e01d      	b.n	8006392 <HAL_ADC_ConfigChannel+0xb2>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006362:	fa93 f3a3 	rbit	r3, r3
 8006366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800636a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800636e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800637a:	2320      	movs	r3, #32
 800637c:	e004      	b.n	8006388 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800637e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006382:	fab3 f383 	clz	r3, r3
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2201      	movs	r2, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6812      	ldr	r2, [r2, #0]
 8006396:	69d1      	ldr	r1, [r2, #28]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	430b      	orrs	r3, r1
 800639e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f7ff f89e 	bl	80054ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fa26 	bl	8005808 <LL_ADC_REG_IsConversionOngoing>
 80063bc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fa32 	bl	800582e <LL_ADC_INJ_IsConversionOngoing>
 80063ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 8270 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80063d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 826b 	bne.w	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	461a      	mov	r2, r3
 80063f0:	f7ff f8f9 	bl	80055e6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6c      	ldr	r2, [pc, #432]	; (80065ac <HAL_ADC_ConfigChannel+0x2cc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d10d      	bne.n	800641a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	08db      	lsrs	r3, r3, #3
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006418:	e032      	b.n	8006480 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800641a:	4b65      	ldr	r3, [pc, #404]	; (80065b0 <HAL_ADC_ConfigChannel+0x2d0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006426:	d10b      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x160>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	089b      	lsrs	r3, r3, #2
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	e01d      	b.n	800647c <HAL_ADC_ConfigChannel+0x19c>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x186>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	e00a      	b.n	800647c <HAL_ADC_ConfigChannel+0x19c>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d048      	beq.n	800651a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	6919      	ldr	r1, [r3, #16]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006498:	f7fe ff24 	bl	80052e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a42      	ldr	r2, [pc, #264]	; (80065ac <HAL_ADC_ConfigChannel+0x2cc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d119      	bne.n	80064da <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7fe ffbc 	bl	8005430 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6919      	ldr	r1, [r3, #16]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d102      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x1f0>
 80064ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ce:	e000      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x1f2>
 80064d0:	2300      	movs	r3, #0
 80064d2:	461a      	mov	r2, r3
 80064d4:	f7fe ff8a 	bl	80053ec <LL_ADC_SetOffsetSaturation>
 80064d8:	e1ee      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6919      	ldr	r1, [r3, #16]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d102      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x212>
 80064ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064f0:	e000      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x214>
 80064f2:	2300      	movs	r3, #0
 80064f4:	461a      	mov	r2, r3
 80064f6:	f7fe ff57 	bl	80053a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6818      	ldr	r0, [r3, #0]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6919      	ldr	r1, [r3, #16]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	7e1b      	ldrb	r3, [r3, #24]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d102      	bne.n	8006510 <HAL_ADC_ConfigChannel+0x230>
 800650a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800650e:	e000      	b.n	8006512 <HAL_ADC_ConfigChannel+0x232>
 8006510:	2300      	movs	r3, #0
 8006512:	461a      	mov	r2, r3
 8006514:	f7fe ff2e 	bl	8005374 <LL_ADC_SetDataRightShift>
 8006518:	e1ce      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a23      	ldr	r2, [pc, #140]	; (80065ac <HAL_ADC_ConfigChannel+0x2cc>)
 8006520:	4293      	cmp	r3, r2
 8006522:	f040 8181 	bne.w	8006828 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe ff0b 	bl	8005348 <LL_ADC_GetOffsetChannel>
 8006532:	4603      	mov	r3, r0
 8006534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x272>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe ff00 	bl	8005348 <LL_ADC_GetOffsetChannel>
 8006548:	4603      	mov	r3, r0
 800654a:	0e9b      	lsrs	r3, r3, #26
 800654c:	f003 021f 	and.w	r2, r3, #31
 8006550:	e01e      	b.n	8006590 <HAL_ADC_ConfigChannel+0x2b0>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2100      	movs	r1, #0
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe fef5 	bl	8005348 <LL_ADC_GetOffsetChannel>
 800655e:	4603      	mov	r3, r0
 8006560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006568:	fa93 f3a3 	rbit	r3, r3
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8006570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8006578:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8006580:	2320      	movs	r3, #32
 8006582:	e004      	b.n	800658e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8006584:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006588:	fab3 f383 	clz	r3, r3
 800658c:	b2db      	uxtb	r3, r3
 800658e:	461a      	mov	r2, r3
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x2d4>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	0e9b      	lsrs	r3, r3, #26
 80065a2:	f003 031f 	and.w	r3, r3, #31
 80065a6:	e01e      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x306>
 80065a8:	47ff0000 	.word	0x47ff0000
 80065ac:	58026000 	.word	0x58026000
 80065b0:	5c001000 	.word	0x5c001000
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80065c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80065d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e004      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80065dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065e0:	fab3 f383 	clz	r3, r3
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d106      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe ff3e 	bl	8005474 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2101      	movs	r1, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fea2 	bl	8005348 <LL_ADC_GetOffsetChannel>
 8006604:	4603      	mov	r3, r0
 8006606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <HAL_ADC_ConfigChannel+0x344>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2101      	movs	r1, #1
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fe97 	bl	8005348 <LL_ADC_GetOffsetChannel>
 800661a:	4603      	mov	r3, r0
 800661c:	0e9b      	lsrs	r3, r3, #26
 800661e:	f003 021f 	and.w	r2, r3, #31
 8006622:	e01e      	b.n	8006662 <HAL_ADC_ConfigChannel+0x382>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2101      	movs	r1, #1
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fe8c 	bl	8005348 <LL_ADC_GetOffsetChannel>
 8006630:	4603      	mov	r3, r0
 8006632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800663a:	fa93 f3a3 	rbit	r3, r3
 800663e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006642:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006646:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800664a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8006652:	2320      	movs	r3, #32
 8006654:	e004      	b.n	8006660 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8006656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800665a:	fab3 f383 	clz	r3, r3
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <HAL_ADC_ConfigChannel+0x39a>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	0e9b      	lsrs	r3, r3, #26
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	e018      	b.n	80066ac <HAL_ADC_ConfigChannel+0x3cc>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006686:	fa93 f3a3 	rbit	r3, r3
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800668e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006692:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006696:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800669e:	2320      	movs	r3, #32
 80066a0:	e004      	b.n	80066ac <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80066a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d106      	bne.n	80066be <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2200      	movs	r2, #0
 80066b6:	2101      	movs	r1, #1
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fedb 	bl	8005474 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2102      	movs	r1, #2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fe3f 	bl	8005348 <LL_ADC_GetOffsetChannel>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10a      	bne.n	80066ea <HAL_ADC_ConfigChannel+0x40a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe fe34 	bl	8005348 <LL_ADC_GetOffsetChannel>
 80066e0:	4603      	mov	r3, r0
 80066e2:	0e9b      	lsrs	r3, r3, #26
 80066e4:	f003 021f 	and.w	r2, r3, #31
 80066e8:	e01e      	b.n	8006728 <HAL_ADC_ConfigChannel+0x448>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2102      	movs	r1, #2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe fe29 	bl	8005348 <LL_ADC_GetOffsetChannel>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006700:	fa93 f3a3 	rbit	r3, r3
 8006704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800670c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8006718:	2320      	movs	r3, #32
 800671a:	e004      	b.n	8006726 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800671c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006720:	fab3 f383 	clz	r3, r3
 8006724:	b2db      	uxtb	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_ADC_ConfigChannel+0x460>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	0e9b      	lsrs	r3, r3, #26
 800673a:	f003 031f 	and.w	r3, r3, #31
 800673e:	e014      	b.n	800676a <HAL_ADC_ConfigChannel+0x48a>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006746:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006748:	fa93 f3a3 	rbit	r3, r3
 800674c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800674e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800675c:	2320      	movs	r3, #32
 800675e:	e004      	b.n	800676a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8006760:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006764:	fab3 f383 	clz	r3, r3
 8006768:	b2db      	uxtb	r3, r3
 800676a:	429a      	cmp	r2, r3
 800676c:	d106      	bne.n	800677c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2200      	movs	r2, #0
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe fe7c 	bl	8005474 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2103      	movs	r1, #3
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fde0 	bl	8005348 <LL_ADC_GetOffsetChannel>
 8006788:	4603      	mov	r3, r0
 800678a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x4c8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2103      	movs	r1, #3
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fdd5 	bl	8005348 <LL_ADC_GetOffsetChannel>
 800679e:	4603      	mov	r3, r0
 80067a0:	0e9b      	lsrs	r3, r3, #26
 80067a2:	f003 021f 	and.w	r2, r3, #31
 80067a6:	e017      	b.n	80067d8 <HAL_ADC_ConfigChannel+0x4f8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2103      	movs	r1, #3
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fdca 	bl	8005348 <LL_ADC_GetOffsetChannel>
 80067b4:	4603      	mov	r3, r0
 80067b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ba:	fa93 f3a3 	rbit	r3, r3
 80067be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80067c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80067c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80067ca:	2320      	movs	r3, #32
 80067cc:	e003      	b.n	80067d6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80067ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d0:	fab3 f383 	clz	r3, r3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <HAL_ADC_ConfigChannel+0x510>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	0e9b      	lsrs	r3, r3, #26
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	e011      	b.n	8006814 <HAL_ADC_ConfigChannel+0x534>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067f8:	fa93 f3a3 	rbit	r3, r3
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80067fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006800:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006802:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8006808:	2320      	movs	r3, #32
 800680a:	e003      	b.n	8006814 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800680c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800680e:	fab3 f383 	clz	r3, r3
 8006812:	b2db      	uxtb	r3, r3
 8006814:	429a      	cmp	r2, r3
 8006816:	d14f      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2200      	movs	r2, #0
 800681e:	2103      	movs	r1, #3
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe fe27 	bl	8005474 <LL_ADC_SetOffsetState>
 8006826:	e047      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	069b      	lsls	r3, r3, #26
 8006838:	429a      	cmp	r2, r3
 800683a:	d107      	bne.n	800684c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800684a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	069b      	lsls	r3, r3, #26
 800685c:	429a      	cmp	r2, r3
 800685e:	d107      	bne.n	8006870 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800686e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	069b      	lsls	r3, r3, #26
 8006880:	429a      	cmp	r2, r3
 8006882:	d107      	bne.n	8006894 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006892:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	069b      	lsls	r3, r3, #26
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d107      	bne.n	80068b8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80068b6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fe ff7b 	bl	80057b8 <LL_ADC_IsEnabled>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 8219 	bne.w	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fe feb0 	bl	800563c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4aa1      	ldr	r2, [pc, #644]	; (8006b68 <HAL_ADC_ConfigChannel+0x888>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	f040 812e 	bne.w	8006b44 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10b      	bne.n	8006910 <HAL_ADC_ConfigChannel+0x630>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0e9b      	lsrs	r3, r3, #26
 80068fe:	3301      	adds	r3, #1
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	2b09      	cmp	r3, #9
 8006906:	bf94      	ite	ls
 8006908:	2301      	movls	r3, #1
 800690a:	2300      	movhi	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e019      	b.n	8006944 <HAL_ADC_ConfigChannel+0x664>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006918:	fa93 f3a3 	rbit	r3, r3
 800691c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800691e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006920:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8006928:	2320      	movs	r3, #32
 800692a:	e003      	b.n	8006934 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800692c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800692e:	fab3 f383 	clz	r3, r3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	3301      	adds	r3, #1
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	2b09      	cmp	r3, #9
 800693c:	bf94      	ite	ls
 800693e:	2301      	movls	r3, #1
 8006940:	2300      	movhi	r3, #0
 8006942:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006944:	2b00      	cmp	r3, #0
 8006946:	d079      	beq.n	8006a3c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006950:	2b00      	cmp	r3, #0
 8006952:	d107      	bne.n	8006964 <HAL_ADC_ConfigChannel+0x684>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	0e9b      	lsrs	r3, r3, #26
 800695a:	3301      	adds	r3, #1
 800695c:	069b      	lsls	r3, r3, #26
 800695e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006962:	e015      	b.n	8006990 <HAL_ADC_ConfigChannel+0x6b0>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696c:	fa93 f3a3 	rbit	r3, r3
 8006970:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006974:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800697c:	2320      	movs	r3, #32
 800697e:	e003      	b.n	8006988 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8006980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006982:	fab3 f383 	clz	r3, r3
 8006986:	b2db      	uxtb	r3, r3
 8006988:	3301      	adds	r3, #1
 800698a:	069b      	lsls	r3, r3, #26
 800698c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x6d0>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	0e9b      	lsrs	r3, r3, #26
 80069a2:	3301      	adds	r3, #1
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2101      	movs	r1, #1
 80069aa:	fa01 f303 	lsl.w	r3, r1, r3
 80069ae:	e017      	b.n	80069e0 <HAL_ADC_ConfigChannel+0x700>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b8:	fa93 f3a3 	rbit	r3, r3
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80069be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80069c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80069c8:	2320      	movs	r3, #32
 80069ca:	e003      	b.n	80069d4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	fab3 f383 	clz	r3, r3
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	ea42 0103 	orr.w	r1, r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <HAL_ADC_ConfigChannel+0x726>
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	0e9b      	lsrs	r3, r3, #26
 80069f6:	3301      	adds	r3, #1
 80069f8:	f003 021f 	and.w	r2, r3, #31
 80069fc:	4613      	mov	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	051b      	lsls	r3, r3, #20
 8006a04:	e018      	b.n	8006a38 <HAL_ADC_ConfigChannel+0x758>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	fa93 f3a3 	rbit	r3, r3
 8006a12:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8006a1e:	2320      	movs	r3, #32
 8006a20:	e003      	b.n	8006a2a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	fab3 f383 	clz	r3, r3
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f003 021f 	and.w	r2, r3, #31
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	e07e      	b.n	8006b3a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x778>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	0e9b      	lsrs	r3, r3, #26
 8006a4e:	3301      	adds	r3, #1
 8006a50:	069b      	lsls	r3, r3, #26
 8006a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a56:	e015      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x7a4>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	fa93 f3a3 	rbit	r3, r3
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8006a70:	2320      	movs	r3, #32
 8006a72:	e003      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	fab3 f383 	clz	r3, r3
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	069b      	lsls	r3, r3, #26
 8006a80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_ADC_ConfigChannel+0x7c4>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	0e9b      	lsrs	r3, r3, #26
 8006a96:	3301      	adds	r3, #1
 8006a98:	f003 031f 	and.w	r3, r3, #31
 8006a9c:	2101      	movs	r1, #1
 8006a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa2:	e017      	b.n	8006ad4 <HAL_ADC_ConfigChannel+0x7f4>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	fa93 f3a3 	rbit	r3, r3
 8006ab0:	61bb      	str	r3, [r7, #24]
  return result;
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8006abc:	2320      	movs	r3, #32
 8006abe:	e003      	b.n	8006ac8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	fab3 f383 	clz	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2101      	movs	r1, #1
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	ea42 0103 	orr.w	r1, r2, r3
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <HAL_ADC_ConfigChannel+0x820>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	0e9b      	lsrs	r3, r3, #26
 8006aea:	3301      	adds	r3, #1
 8006aec:	f003 021f 	and.w	r2, r3, #31
 8006af0:	4613      	mov	r3, r2
 8006af2:	005b      	lsls	r3, r3, #1
 8006af4:	4413      	add	r3, r2
 8006af6:	3b1e      	subs	r3, #30
 8006af8:	051b      	lsls	r3, r3, #20
 8006afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006afe:	e01b      	b.n	8006b38 <HAL_ADC_ConfigChannel+0x858>
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	60fb      	str	r3, [r7, #12]
  return result;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8006b18:	2320      	movs	r3, #32
 8006b1a:	e003      	b.n	8006b24 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	fab3 f383 	clz	r3, r3
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	3301      	adds	r3, #1
 8006b26:	f003 021f 	and.w	r2, r3, #31
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	3b1e      	subs	r3, #30
 8006b32:	051b      	lsls	r3, r3, #20
 8006b34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	6892      	ldr	r2, [r2, #8]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	f7fe fd51 	bl	80055e6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f280 80d7 	bge.w	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <HAL_ADC_ConfigChannel+0x88c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_ADC_ConfigChannel+0x882>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a04      	ldr	r2, [pc, #16]	; (8006b70 <HAL_ADC_ConfigChannel+0x890>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10a      	bne.n	8006b78 <HAL_ADC_ConfigChannel+0x898>
 8006b62:	4b04      	ldr	r3, [pc, #16]	; (8006b74 <HAL_ADC_ConfigChannel+0x894>)
 8006b64:	e009      	b.n	8006b7a <HAL_ADC_ConfigChannel+0x89a>
 8006b66:	bf00      	nop
 8006b68:	47ff0000 	.word	0x47ff0000
 8006b6c:	40022000 	.word	0x40022000
 8006b70:	40022100 	.word	0x40022100
 8006b74:	40022300 	.word	0x40022300
 8006b78:	4b65      	ldr	r3, [pc, #404]	; (8006d10 <HAL_ADC_ConfigChannel+0xa30>)
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fba4 	bl	80052c8 <LL_ADC_GetCommonPathInternalCh>
 8006b80:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a62      	ldr	r2, [pc, #392]	; (8006d14 <HAL_ADC_ConfigChannel+0xa34>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_ADC_ConfigChannel+0x8b8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a61      	ldr	r2, [pc, #388]	; (8006d18 <HAL_ADC_ConfigChannel+0xa38>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10e      	bne.n	8006bb6 <HAL_ADC_ConfigChannel+0x8d6>
 8006b98:	485e      	ldr	r0, [pc, #376]	; (8006d14 <HAL_ADC_ConfigChannel+0xa34>)
 8006b9a:	f7fe fe0d 	bl	80057b8 <LL_ADC_IsEnabled>
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	485d      	ldr	r0, [pc, #372]	; (8006d18 <HAL_ADC_ConfigChannel+0xa38>)
 8006ba2:	f7fe fe09 	bl	80057b8 <LL_ADC_IsEnabled>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4323      	orrs	r3, r4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf0c      	ite	eq
 8006bae:	2301      	moveq	r3, #1
 8006bb0:	2300      	movne	r3, #0
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	e008      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x8e8>
 8006bb6:	4859      	ldr	r0, [pc, #356]	; (8006d1c <HAL_ADC_ConfigChannel+0xa3c>)
 8006bb8:	f7fe fdfe 	bl	80057b8 <LL_ADC_IsEnabled>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8084 	beq.w	8006cd6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a53      	ldr	r2, [pc, #332]	; (8006d20 <HAL_ADC_ConfigChannel+0xa40>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d132      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x95e>
 8006bd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d12c      	bne.n	8006c3e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a4c      	ldr	r2, [pc, #304]	; (8006d1c <HAL_ADC_ConfigChannel+0xa3c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f040 8086 	bne.w	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a47      	ldr	r2, [pc, #284]	; (8006d14 <HAL_ADC_ConfigChannel+0xa34>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d004      	beq.n	8006c04 <HAL_ADC_ConfigChannel+0x924>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a46      	ldr	r2, [pc, #280]	; (8006d18 <HAL_ADC_ConfigChannel+0xa38>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d101      	bne.n	8006c08 <HAL_ADC_ConfigChannel+0x928>
 8006c04:	4a47      	ldr	r2, [pc, #284]	; (8006d24 <HAL_ADC_ConfigChannel+0xa44>)
 8006c06:	e000      	b.n	8006c0a <HAL_ADC_ConfigChannel+0x92a>
 8006c08:	4a41      	ldr	r2, [pc, #260]	; (8006d10 <HAL_ADC_ConfigChannel+0xa30>)
 8006c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c12:	4619      	mov	r1, r3
 8006c14:	4610      	mov	r0, r2
 8006c16:	f7fe fb44 	bl	80052a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c1a:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <HAL_ADC_ConfigChannel+0xa48>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	099b      	lsrs	r3, r3, #6
 8006c20:	4a42      	ldr	r2, [pc, #264]	; (8006d2c <HAL_ADC_ConfigChannel+0xa4c>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	3301      	adds	r3, #1
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006c2e:	e002      	b.n	8006c36 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1f9      	bne.n	8006c30 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006c3c:	e05e      	b.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <HAL_ADC_ConfigChannel+0xa50>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d120      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x9aa>
 8006c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11a      	bne.n	8006c8a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a30      	ldr	r2, [pc, #192]	; (8006d1c <HAL_ADC_ConfigChannel+0xa3c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d14e      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2c      	ldr	r2, [pc, #176]	; (8006d14 <HAL_ADC_ConfigChannel+0xa34>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_ADC_ConfigChannel+0x992>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2a      	ldr	r2, [pc, #168]	; (8006d18 <HAL_ADC_ConfigChannel+0xa38>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d101      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x996>
 8006c72:	4a2c      	ldr	r2, [pc, #176]	; (8006d24 <HAL_ADC_ConfigChannel+0xa44>)
 8006c74:	e000      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x998>
 8006c76:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <HAL_ADC_ConfigChannel+0xa30>)
 8006c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fe fb0d 	bl	80052a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c88:	e038      	b.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a29      	ldr	r2, [pc, #164]	; (8006d34 <HAL_ADC_ConfigChannel+0xa54>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d133      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
 8006c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d12d      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1d      	ldr	r2, [pc, #116]	; (8006d1c <HAL_ADC_ConfigChannel+0xa3c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d128      	bne.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_ADC_ConfigChannel+0xa34>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_ADC_ConfigChannel+0x9de>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a17      	ldr	r2, [pc, #92]	; (8006d18 <HAL_ADC_ConfigChannel+0xa38>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_ADC_ConfigChannel+0x9e2>
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <HAL_ADC_ConfigChannel+0xa44>)
 8006cc0:	e000      	b.n	8006cc4 <HAL_ADC_ConfigChannel+0x9e4>
 8006cc2:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <HAL_ADC_ConfigChannel+0xa30>)
 8006cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7fe fae7 	bl	80052a2 <LL_ADC_SetCommonPathInternalCh>
 8006cd4:	e012      	b.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006ce8:	e008      	b.n	8006cfc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006d04:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	37e4      	adds	r7, #228	; 0xe4
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	58026300 	.word	0x58026300
 8006d14:	40022000 	.word	0x40022000
 8006d18:	40022100 	.word	0x40022100
 8006d1c:	58026000 	.word	0x58026000
 8006d20:	c7520000 	.word	0xc7520000
 8006d24:	40022300 	.word	0x40022300
 8006d28:	24000000 	.word	0x24000000
 8006d2c:	053e2d63 	.word	0x053e2d63
 8006d30:	c3210000 	.word	0xc3210000
 8006d34:	cb840000 	.word	0xcb840000

08006d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe fd37 	bl	80057b8 <LL_ADC_IsEnabled>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d16e      	bne.n	8006e2e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	4b38      	ldr	r3, [pc, #224]	; (8006e38 <ADC_Enable+0x100>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	f043 0210 	orr.w	r2, r3, #16
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d6e:	f043 0201 	orr.w	r2, r3, #1
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e05a      	b.n	8006e30 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fd06 	bl	8005790 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006d84:	f7fe fa44 	bl	8005210 <HAL_GetTick>
 8006d88:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <ADC_Enable+0x104>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <ADC_Enable+0x66>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <ADC_Enable+0x108>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d101      	bne.n	8006da2 <ADC_Enable+0x6a>
 8006d9e:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <ADC_Enable+0x10c>)
 8006da0:	e000      	b.n	8006da4 <ADC_Enable+0x6c>
 8006da2:	4b29      	ldr	r3, [pc, #164]	; (8006e48 <ADC_Enable+0x110>)
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe fc89 	bl	80056bc <LL_ADC_GetMultimode>
 8006daa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <ADC_Enable+0x108>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d002      	beq.n	8006dbc <ADC_Enable+0x84>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	e000      	b.n	8006dbe <ADC_Enable+0x86>
 8006dbc:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <ADC_Enable+0x104>)
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d02c      	beq.n	8006e20 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d130      	bne.n	8006e2e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006dcc:	e028      	b.n	8006e20 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe fcf0 	bl	80057b8 <LL_ADC_IsEnabled>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d104      	bne.n	8006de8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fcd4 	bl	8005790 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006de8:	f7fe fa12 	bl	8005210 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d914      	bls.n	8006e20 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d00d      	beq.n	8006e20 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e08:	f043 0210 	orr.w	r2, r3, #16
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	f043 0201 	orr.w	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e007      	b.n	8006e30 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d1cf      	bne.n	8006dce <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	8000003f 	.word	0x8000003f
 8006e3c:	40022000 	.word	0x40022000
 8006e40:	40022100 	.word	0x40022100
 8006e44:	40022300 	.word	0x40022300
 8006e48:	58026300 	.word	0x58026300

08006e4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d14b      	bne.n	8006efe <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d021      	beq.n	8006ec4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fb1f 	bl	80054c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d032      	beq.n	8006ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d12b      	bne.n	8006ef6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d11f      	bne.n	8006ef6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eba:	f043 0201 	orr.w	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8006ec2:	e018      	b.n	8006ef6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d111      	bne.n	8006ef6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	f043 0201 	orr.w	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff f9ca 	bl	8006290 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006efc:	e00e      	b.n	8006f1c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f02:	f003 0310 	and.w	r3, r3, #16
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff f9de 	bl	80062cc <HAL_ADC_ErrorCallback>
}
 8006f10:	e004      	b.n	8006f1c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff f9b6 	bl	80062a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f38:	bf00      	nop
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f5e:	f043 0204 	orr.w	r2, r3, #4
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff f9b0 	bl	80062cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a6b      	ldr	r2, [pc, #428]	; (8007130 <ADC_ConfigureBoostMode+0x1bc>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <ADC_ConfigureBoostMode+0x1c>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a6a      	ldr	r2, [pc, #424]	; (8007134 <ADC_ConfigureBoostMode+0x1c0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d109      	bne.n	8006fa4 <ADC_ConfigureBoostMode+0x30>
 8006f90:	4b69      	ldr	r3, [pc, #420]	; (8007138 <ADC_ConfigureBoostMode+0x1c4>)
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bf14      	ite	ne
 8006f9c:	2301      	movne	r3, #1
 8006f9e:	2300      	moveq	r3, #0
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	e008      	b.n	8006fb6 <ADC_ConfigureBoostMode+0x42>
 8006fa4:	4b65      	ldr	r3, [pc, #404]	; (800713c <ADC_ConfigureBoostMode+0x1c8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	bf14      	ite	ne
 8006fb0:	2301      	movne	r3, #1
 8006fb2:	2300      	moveq	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d01c      	beq.n	8006ff4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006fba:	f005 f94d 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 8006fbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fc8:	d010      	beq.n	8006fec <ADC_ConfigureBoostMode+0x78>
 8006fca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fce:	d871      	bhi.n	80070b4 <ADC_ConfigureBoostMode+0x140>
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd4:	d002      	beq.n	8006fdc <ADC_ConfigureBoostMode+0x68>
 8006fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fda:	d16b      	bne.n	80070b4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	60fb      	str	r3, [r7, #12]
        break;
 8006fea:	e066      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	089b      	lsrs	r3, r3, #2
 8006ff0:	60fb      	str	r3, [r7, #12]
        break;
 8006ff2:	e062      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006ff4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ff8:	f006 f884 	bl	800d104 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ffc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007006:	d051      	beq.n	80070ac <ADC_ConfigureBoostMode+0x138>
 8007008:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800700c:	d854      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 800700e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007012:	d047      	beq.n	80070a4 <ADC_ConfigureBoostMode+0x130>
 8007014:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007018:	d84e      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 800701a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800701e:	d03d      	beq.n	800709c <ADC_ConfigureBoostMode+0x128>
 8007020:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007024:	d848      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 8007026:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800702a:	d033      	beq.n	8007094 <ADC_ConfigureBoostMode+0x120>
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d842      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 8007032:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007036:	d029      	beq.n	800708c <ADC_ConfigureBoostMode+0x118>
 8007038:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800703c:	d83c      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 800703e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007042:	d01a      	beq.n	800707a <ADC_ConfigureBoostMode+0x106>
 8007044:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007048:	d836      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 800704a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800704e:	d014      	beq.n	800707a <ADC_ConfigureBoostMode+0x106>
 8007050:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007054:	d830      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 8007056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800705a:	d00e      	beq.n	800707a <ADC_ConfigureBoostMode+0x106>
 800705c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007060:	d82a      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 8007062:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007066:	d008      	beq.n	800707a <ADC_ConfigureBoostMode+0x106>
 8007068:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800706c:	d824      	bhi.n	80070b8 <ADC_ConfigureBoostMode+0x144>
 800706e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007072:	d002      	beq.n	800707a <ADC_ConfigureBoostMode+0x106>
 8007074:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007078:	d11e      	bne.n	80070b8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	0c9b      	lsrs	r3, r3, #18
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	60fb      	str	r3, [r7, #12]
        break;
 800708a:	e016      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	60fb      	str	r3, [r7, #12]
        break;
 8007092:	e012      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	60fb      	str	r3, [r7, #12]
        break;
 800709a:	e00e      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	099b      	lsrs	r3, r3, #6
 80070a0:	60fb      	str	r3, [r7, #12]
        break;
 80070a2:	e00a      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	09db      	lsrs	r3, r3, #7
 80070a8:	60fb      	str	r3, [r7, #12]
        break;
 80070aa:	e006      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	60fb      	str	r3, [r7, #12]
        break;
 80070b2:	e002      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
        break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80070b8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <ADC_ConfigureBoostMode+0x1cc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d808      	bhi.n	80070da <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070d6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80070d8:	e025      	b.n	8007126 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4a19      	ldr	r2, [pc, #100]	; (8007144 <ADC_ConfigureBoostMode+0x1d0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d80a      	bhi.n	80070f8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f4:	609a      	str	r2, [r3, #8]
}
 80070f6:	e016      	b.n	8007126 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4a13      	ldr	r2, [pc, #76]	; (8007148 <ADC_ConfigureBoostMode+0x1d4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d80a      	bhi.n	8007116 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007112:	609a      	str	r2, [r3, #8]
}
 8007114:	e007      	b.n	8007126 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007124:	609a      	str	r2, [r3, #8]
}
 8007126:	bf00      	nop
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40022000 	.word	0x40022000
 8007134:	40022100 	.word	0x40022100
 8007138:	40022300 	.word	0x40022300
 800713c:	58026300 	.word	0x58026300
 8007140:	005f5e10 	.word	0x005f5e10
 8007144:	00bebc20 	.word	0x00bebc20
 8007148:	017d7840 	.word	0x017d7840

0800714c <LL_ADC_IsEnabled>:
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 0301 	and.w	r3, r3, #1
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <LL_ADC_IsEnabled+0x18>
 8007160:	2301      	movs	r3, #1
 8007162:	e000      	b.n	8007166 <LL_ADC_IsEnabled+0x1a>
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <LL_ADC_REG_IsConversionOngoing>:
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b04      	cmp	r3, #4
 8007184:	d101      	bne.n	800718a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007186:	2301      	movs	r3, #1
 8007188:	e000      	b.n	800718c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b0a3      	sub	sp, #140	; 0x8c
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007212:	2b01      	cmp	r3, #1
 8007214:	d101      	bne.n	800721a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007216:	2302      	movs	r3, #2
 8007218:	e0c1      	b.n	800739e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007222:	2300      	movs	r3, #0
 8007224:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007226:	2300      	movs	r3, #0
 8007228:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a5e      	ldr	r2, [pc, #376]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d102      	bne.n	800723a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007234:	4b5d      	ldr	r3, [pc, #372]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e001      	b.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007248:	f043 0220 	orr.w	r2, r3, #32
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e0a0      	b.n	800739e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff ff87 	bl	8007172 <LL_ADC_REG_IsConversionOngoing>
 8007264:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ff80 	bl	8007172 <LL_ADC_REG_IsConversionOngoing>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 8081 	bne.w	800737c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800727a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d17c      	bne.n	800737c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a48      	ldr	r2, [pc, #288]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d004      	beq.n	8007296 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a46      	ldr	r2, [pc, #280]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d101      	bne.n	800729a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007296:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007298:	e000      	b.n	800729c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800729a:	4b46      	ldr	r3, [pc, #280]	; (80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800729c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d039      	beq.n	800731a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80072a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a3a      	ldr	r2, [pc, #232]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a39      	ldr	r2, [pc, #228]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d10e      	bne.n	80072ea <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80072cc:	4836      	ldr	r0, [pc, #216]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80072ce:	f7ff ff3d 	bl	800714c <LL_ADC_IsEnabled>
 80072d2:	4604      	mov	r4, r0
 80072d4:	4835      	ldr	r0, [pc, #212]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80072d6:	f7ff ff39 	bl	800714c <LL_ADC_IsEnabled>
 80072da:	4603      	mov	r3, r0
 80072dc:	4323      	orrs	r3, r4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	bf0c      	ite	eq
 80072e2:	2301      	moveq	r3, #1
 80072e4:	2300      	movne	r3, #0
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	e008      	b.n	80072fc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80072ea:	4833      	ldr	r0, [pc, #204]	; (80073b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80072ec:	f7ff ff2e 	bl	800714c <LL_ADC_IsEnabled>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d047      	beq.n	8007390 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	4b2d      	ldr	r3, [pc, #180]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007306:	4013      	ands	r3, r2
 8007308:	683a      	ldr	r2, [r7, #0]
 800730a:	6811      	ldr	r1, [r2, #0]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	6892      	ldr	r2, [r2, #8]
 8007310:	430a      	orrs	r2, r1
 8007312:	431a      	orrs	r2, r3
 8007314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007316:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007318:	e03a      	b.n	8007390 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800731a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007322:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007324:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1f      	ldr	r2, [pc, #124]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a1d      	ldr	r2, [pc, #116]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d10e      	bne.n	8007358 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800733a:	481b      	ldr	r0, [pc, #108]	; (80073a8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800733c:	f7ff ff06 	bl	800714c <LL_ADC_IsEnabled>
 8007340:	4604      	mov	r4, r0
 8007342:	481a      	ldr	r0, [pc, #104]	; (80073ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007344:	f7ff ff02 	bl	800714c <LL_ADC_IsEnabled>
 8007348:	4603      	mov	r3, r0
 800734a:	4323      	orrs	r3, r4
 800734c:	2b00      	cmp	r3, #0
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	e008      	b.n	800736a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007358:	4817      	ldr	r0, [pc, #92]	; (80073b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800735a:	f7ff fef7 	bl	800714c <LL_ADC_IsEnabled>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	bf0c      	ite	eq
 8007364:	2301      	moveq	r3, #1
 8007366:	2300      	movne	r3, #0
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800736e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	4b12      	ldr	r3, [pc, #72]	; (80073bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007374:	4013      	ands	r3, r2
 8007376:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007378:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800737a:	e009      	b.n	8007390 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800738e:	e000      	b.n	8007392 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007390:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800739a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800739e:	4618      	mov	r0, r3
 80073a0:	378c      	adds	r7, #140	; 0x8c
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd90      	pop	{r4, r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40022000 	.word	0x40022000
 80073ac:	40022100 	.word	0x40022100
 80073b0:	40022300 	.word	0x40022300
 80073b4:	58026300 	.word	0x58026300
 80073b8:	58026000 	.word	0x58026000
 80073bc:	fffff0e0 	.word	0xfffff0e0

080073c0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e023      	b.n	800741a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7f9 fb20 	bl	8000a2c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007434:	4b0b      	ldr	r3, [pc, #44]	; (8007464 <__NVIC_SetPriorityGrouping+0x40>)
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007440:	4013      	ands	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <__NVIC_SetPriorityGrouping+0x44>)
 800744e:	4313      	orrs	r3, r2
 8007450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007452:	4a04      	ldr	r2, [pc, #16]	; (8007464 <__NVIC_SetPriorityGrouping+0x40>)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	60d3      	str	r3, [r2, #12]
}
 8007458:	bf00      	nop
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	e000ed00 	.word	0xe000ed00
 8007468:	05fa0000 	.word	0x05fa0000

0800746c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <__NVIC_GetPriorityGrouping+0x18>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	0a1b      	lsrs	r3, r3, #8
 8007476:	f003 0307 	and.w	r3, r3, #7
}
 800747a:	4618      	mov	r0, r3
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	e000ed00 	.word	0xe000ed00

08007488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	db0b      	blt.n	80074b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800749a:	88fb      	ldrh	r3, [r7, #6]
 800749c:	f003 021f 	and.w	r2, r3, #31
 80074a0:	4907      	ldr	r1, [pc, #28]	; (80074c0 <__NVIC_EnableIRQ+0x38>)
 80074a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	2001      	movs	r0, #1
 80074aa:	fa00 f202 	lsl.w	r2, r0, r2
 80074ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	e000e100 	.word	0xe000e100

080074c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	db0a      	blt.n	80074ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	490c      	ldr	r1, [pc, #48]	; (8007510 <__NVIC_SetPriority+0x4c>)
 80074de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074e2:	0112      	lsls	r2, r2, #4
 80074e4:	b2d2      	uxtb	r2, r2
 80074e6:	440b      	add	r3, r1
 80074e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80074ec:	e00a      	b.n	8007504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	4908      	ldr	r1, [pc, #32]	; (8007514 <__NVIC_SetPriority+0x50>)
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	3b04      	subs	r3, #4
 80074fc:	0112      	lsls	r2, r2, #4
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	440b      	add	r3, r1
 8007502:	761a      	strb	r2, [r3, #24]
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	e000e100 	.word	0xe000e100
 8007514:	e000ed00 	.word	0xe000ed00

08007518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007518:	b480      	push	{r7}
 800751a:	b089      	sub	sp, #36	; 0x24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f1c3 0307 	rsb	r3, r3, #7
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf28      	it	cs
 8007536:	2304      	movcs	r3, #4
 8007538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	3304      	adds	r3, #4
 800753e:	2b06      	cmp	r3, #6
 8007540:	d902      	bls.n	8007548 <NVIC_EncodePriority+0x30>
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	3b03      	subs	r3, #3
 8007546:	e000      	b.n	800754a <NVIC_EncodePriority+0x32>
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	fa02 f303 	lsl.w	r3, r2, r3
 8007556:	43da      	mvns	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	401a      	ands	r2, r3
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007560:	f04f 31ff 	mov.w	r1, #4294967295
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	fa01 f303 	lsl.w	r3, r1, r3
 800756a:	43d9      	mvns	r1, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007570:	4313      	orrs	r3, r2
         );
}
 8007572:	4618      	mov	r0, r3
 8007574:	3724      	adds	r7, #36	; 0x24
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3b01      	subs	r3, #1
 800758c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007590:	d301      	bcc.n	8007596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007592:	2301      	movs	r3, #1
 8007594:	e00f      	b.n	80075b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007596:	4a0a      	ldr	r2, [pc, #40]	; (80075c0 <SysTick_Config+0x40>)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3b01      	subs	r3, #1
 800759c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800759e:	210f      	movs	r1, #15
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	f7ff ff8e 	bl	80074c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075a8:	4b05      	ldr	r3, [pc, #20]	; (80075c0 <SysTick_Config+0x40>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ae:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <SysTick_Config+0x40>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	e000e010 	.word	0xe000e010

080075c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ff29 	bl	8007424 <__NVIC_SetPriorityGrouping>
}
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	4603      	mov	r3, r0
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80075e8:	f7ff ff40 	bl	800746c <__NVIC_GetPriorityGrouping>
 80075ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	6978      	ldr	r0, [r7, #20]
 80075f4:	f7ff ff90 	bl	8007518 <NVIC_EncodePriority>
 80075f8:	4602      	mov	r2, r0
 80075fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff ff5f 	bl	80074c4 <__NVIC_SetPriority>
}
 8007606:	bf00      	nop
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	4603      	mov	r3, r0
 8007616:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff ff33 	bl	8007488 <__NVIC_EnableIRQ>
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff ffa4 	bl	8007580 <SysTick_Config>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
	...

08007644 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800764c:	f7fd fde0 	bl	8005210 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d101      	bne.n	800765c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e314      	b.n	8007c86 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a66      	ldr	r2, [pc, #408]	; (80077fc <HAL_DMA_Init+0x1b8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d04a      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a65      	ldr	r2, [pc, #404]	; (8007800 <HAL_DMA_Init+0x1bc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d045      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a63      	ldr	r2, [pc, #396]	; (8007804 <HAL_DMA_Init+0x1c0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d040      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a62      	ldr	r2, [pc, #392]	; (8007808 <HAL_DMA_Init+0x1c4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d03b      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a60      	ldr	r2, [pc, #384]	; (800780c <HAL_DMA_Init+0x1c8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d036      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a5f      	ldr	r2, [pc, #380]	; (8007810 <HAL_DMA_Init+0x1cc>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d031      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a5d      	ldr	r2, [pc, #372]	; (8007814 <HAL_DMA_Init+0x1d0>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d02c      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a5c      	ldr	r2, [pc, #368]	; (8007818 <HAL_DMA_Init+0x1d4>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d027      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a5a      	ldr	r2, [pc, #360]	; (800781c <HAL_DMA_Init+0x1d8>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d022      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a59      	ldr	r2, [pc, #356]	; (8007820 <HAL_DMA_Init+0x1dc>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d01d      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a57      	ldr	r2, [pc, #348]	; (8007824 <HAL_DMA_Init+0x1e0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a56      	ldr	r2, [pc, #344]	; (8007828 <HAL_DMA_Init+0x1e4>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a54      	ldr	r2, [pc, #336]	; (800782c <HAL_DMA_Init+0x1e8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00e      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a53      	ldr	r2, [pc, #332]	; (8007830 <HAL_DMA_Init+0x1ec>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d009      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a51      	ldr	r2, [pc, #324]	; (8007834 <HAL_DMA_Init+0x1f0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d004      	beq.n	80076fc <HAL_DMA_Init+0xb8>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a50      	ldr	r2, [pc, #320]	; (8007838 <HAL_DMA_Init+0x1f4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d101      	bne.n	8007700 <HAL_DMA_Init+0xbc>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <HAL_DMA_Init+0xbe>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 813c 	beq.w	8007980 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a37      	ldr	r2, [pc, #220]	; (80077fc <HAL_DMA_Init+0x1b8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d04a      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a36      	ldr	r2, [pc, #216]	; (8007800 <HAL_DMA_Init+0x1bc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d045      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a34      	ldr	r2, [pc, #208]	; (8007804 <HAL_DMA_Init+0x1c0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d040      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a33      	ldr	r2, [pc, #204]	; (8007808 <HAL_DMA_Init+0x1c4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d03b      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a31      	ldr	r2, [pc, #196]	; (800780c <HAL_DMA_Init+0x1c8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d036      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a30      	ldr	r2, [pc, #192]	; (8007810 <HAL_DMA_Init+0x1cc>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d031      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a2e      	ldr	r2, [pc, #184]	; (8007814 <HAL_DMA_Init+0x1d0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d02c      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a2d      	ldr	r2, [pc, #180]	; (8007818 <HAL_DMA_Init+0x1d4>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d027      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2b      	ldr	r2, [pc, #172]	; (800781c <HAL_DMA_Init+0x1d8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <HAL_DMA_Init+0x1dc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d01d      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a28      	ldr	r2, [pc, #160]	; (8007824 <HAL_DMA_Init+0x1e0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <HAL_DMA_Init+0x1e4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <HAL_DMA_Init+0x1e8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a24      	ldr	r2, [pc, #144]	; (8007830 <HAL_DMA_Init+0x1ec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a22      	ldr	r2, [pc, #136]	; (8007834 <HAL_DMA_Init+0x1f0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <HAL_DMA_Init+0x174>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a21      	ldr	r2, [pc, #132]	; (8007838 <HAL_DMA_Init+0x1f4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d108      	bne.n	80077ca <HAL_DMA_Init+0x186>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0201 	bic.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
 80077c8:	e007      	b.n	80077da <HAL_DMA_Init+0x196>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80077da:	e02f      	b.n	800783c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80077dc:	f7fd fd18 	bl	8005210 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d928      	bls.n	800783c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e244      	b.n	8007c86 <HAL_DMA_Init+0x642>
 80077fc:	40020010 	.word	0x40020010
 8007800:	40020028 	.word	0x40020028
 8007804:	40020040 	.word	0x40020040
 8007808:	40020058 	.word	0x40020058
 800780c:	40020070 	.word	0x40020070
 8007810:	40020088 	.word	0x40020088
 8007814:	400200a0 	.word	0x400200a0
 8007818:	400200b8 	.word	0x400200b8
 800781c:	40020410 	.word	0x40020410
 8007820:	40020428 	.word	0x40020428
 8007824:	40020440 	.word	0x40020440
 8007828:	40020458 	.word	0x40020458
 800782c:	40020470 	.word	0x40020470
 8007830:	40020488 	.word	0x40020488
 8007834:	400204a0 	.word	0x400204a0
 8007838:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0301 	and.w	r3, r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1c8      	bne.n	80077dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4b84      	ldr	r3, [pc, #528]	; (8007a68 <HAL_DMA_Init+0x424>)
 8007856:	4013      	ands	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007862:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800786e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800787a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	4313      	orrs	r3, r2
 8007886:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b04      	cmp	r3, #4
 800788e:	d107      	bne.n	80078a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	4313      	orrs	r3, r2
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b28      	cmp	r3, #40	; 0x28
 80078a6:	d903      	bls.n	80078b0 <HAL_DMA_Init+0x26c>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b2e      	cmp	r3, #46	; 0x2e
 80078ae:	d91f      	bls.n	80078f0 <HAL_DMA_Init+0x2ac>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b3e      	cmp	r3, #62	; 0x3e
 80078b6:	d903      	bls.n	80078c0 <HAL_DMA_Init+0x27c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b42      	cmp	r3, #66	; 0x42
 80078be:	d917      	bls.n	80078f0 <HAL_DMA_Init+0x2ac>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	2b46      	cmp	r3, #70	; 0x46
 80078c6:	d903      	bls.n	80078d0 <HAL_DMA_Init+0x28c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	2b48      	cmp	r3, #72	; 0x48
 80078ce:	d90f      	bls.n	80078f0 <HAL_DMA_Init+0x2ac>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b4e      	cmp	r3, #78	; 0x4e
 80078d6:	d903      	bls.n	80078e0 <HAL_DMA_Init+0x29c>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b52      	cmp	r3, #82	; 0x52
 80078de:	d907      	bls.n	80078f0 <HAL_DMA_Init+0x2ac>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b73      	cmp	r3, #115	; 0x73
 80078e6:	d905      	bls.n	80078f4 <HAL_DMA_Init+0x2b0>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b77      	cmp	r3, #119	; 0x77
 80078ee:	d801      	bhi.n	80078f4 <HAL_DMA_Init+0x2b0>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <HAL_DMA_Init+0x2b2>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007900:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0307 	bic.w	r3, r3, #7
 8007918:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b04      	cmp	r3, #4
 800792a:	d117      	bne.n	800795c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fdcc 	bl	80094dc <DMA_CheckFifoParam>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2240      	movs	r2, #64	; 0x40
 800794e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e194      	b.n	8007c86 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fd07 	bl	8009378 <DMA_CalcBaseAndBitshift>
 800796a:	4603      	mov	r3, r0
 800796c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007972:	f003 031f 	and.w	r3, r3, #31
 8007976:	223f      	movs	r2, #63	; 0x3f
 8007978:	409a      	lsls	r2, r3
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	609a      	str	r2, [r3, #8]
 800797e:	e0ca      	b.n	8007b16 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a39      	ldr	r2, [pc, #228]	; (8007a6c <HAL_DMA_Init+0x428>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d022      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a38      	ldr	r2, [pc, #224]	; (8007a70 <HAL_DMA_Init+0x42c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d01d      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a36      	ldr	r2, [pc, #216]	; (8007a74 <HAL_DMA_Init+0x430>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d018      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a35      	ldr	r2, [pc, #212]	; (8007a78 <HAL_DMA_Init+0x434>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d013      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a33      	ldr	r2, [pc, #204]	; (8007a7c <HAL_DMA_Init+0x438>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00e      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a32      	ldr	r2, [pc, #200]	; (8007a80 <HAL_DMA_Init+0x43c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d009      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a30      	ldr	r2, [pc, #192]	; (8007a84 <HAL_DMA_Init+0x440>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d004      	beq.n	80079d0 <HAL_DMA_Init+0x38c>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a2f      	ldr	r2, [pc, #188]	; (8007a88 <HAL_DMA_Init+0x444>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d101      	bne.n	80079d4 <HAL_DMA_Init+0x390>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <HAL_DMA_Init+0x392>
 80079d4:	2300      	movs	r3, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8094 	beq.w	8007b04 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <HAL_DMA_Init+0x428>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d021      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a21      	ldr	r2, [pc, #132]	; (8007a70 <HAL_DMA_Init+0x42c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d01c      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1f      	ldr	r2, [pc, #124]	; (8007a74 <HAL_DMA_Init+0x430>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d017      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1e      	ldr	r2, [pc, #120]	; (8007a78 <HAL_DMA_Init+0x434>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d012      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <HAL_DMA_Init+0x438>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00d      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a1b      	ldr	r2, [pc, #108]	; (8007a80 <HAL_DMA_Init+0x43c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d008      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a19      	ldr	r2, [pc, #100]	; (8007a84 <HAL_DMA_Init+0x440>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <HAL_DMA_Init+0x3e6>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a18      	ldr	r2, [pc, #96]	; (8007a88 <HAL_DMA_Init+0x444>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4b11      	ldr	r3, [pc, #68]	; (8007a8c <HAL_DMA_Init+0x448>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d01d      	beq.n	8007a90 <HAL_DMA_Init+0x44c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d102      	bne.n	8007a62 <HAL_DMA_Init+0x41e>
 8007a5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a60:	e017      	b.n	8007a92 <HAL_DMA_Init+0x44e>
 8007a62:	2300      	movs	r3, #0
 8007a64:	e015      	b.n	8007a92 <HAL_DMA_Init+0x44e>
 8007a66:	bf00      	nop
 8007a68:	fe10803f 	.word	0xfe10803f
 8007a6c:	58025408 	.word	0x58025408
 8007a70:	5802541c 	.word	0x5802541c
 8007a74:	58025430 	.word	0x58025430
 8007a78:	58025444 	.word	0x58025444
 8007a7c:	58025458 	.word	0x58025458
 8007a80:	5802546c 	.word	0x5802546c
 8007a84:	58025480 	.word	0x58025480
 8007a88:	58025494 	.word	0x58025494
 8007a8c:	fffe000f 	.word	0xfffe000f
 8007a90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68d2      	ldr	r2, [r2, #12]
 8007a96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007aa0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007aa8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ab0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ac0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	4b6e      	ldr	r3, [pc, #440]	; (8007c90 <HAL_DMA_Init+0x64c>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	4a6e      	ldr	r2, [pc, #440]	; (8007c94 <HAL_DMA_Init+0x650>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	091b      	lsrs	r3, r3, #4
 8007ae2:	009a      	lsls	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f001 fc45 	bl	8009378 <DMA_CalcBaseAndBitshift>
 8007aee:	4603      	mov	r3, r0
 8007af0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af6:	f003 031f 	and.w	r3, r3, #31
 8007afa:	2201      	movs	r2, #1
 8007afc:	409a      	lsls	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
 8007b02:	e008      	b.n	8007b16 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2240      	movs	r2, #64	; 0x40
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e0b7      	b.n	8007c86 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a5f      	ldr	r2, [pc, #380]	; (8007c98 <HAL_DMA_Init+0x654>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d072      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a5d      	ldr	r2, [pc, #372]	; (8007c9c <HAL_DMA_Init+0x658>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d06d      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a5c      	ldr	r2, [pc, #368]	; (8007ca0 <HAL_DMA_Init+0x65c>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d068      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a5a      	ldr	r2, [pc, #360]	; (8007ca4 <HAL_DMA_Init+0x660>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d063      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a59      	ldr	r2, [pc, #356]	; (8007ca8 <HAL_DMA_Init+0x664>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d05e      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a57      	ldr	r2, [pc, #348]	; (8007cac <HAL_DMA_Init+0x668>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d059      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a56      	ldr	r2, [pc, #344]	; (8007cb0 <HAL_DMA_Init+0x66c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d054      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a54      	ldr	r2, [pc, #336]	; (8007cb4 <HAL_DMA_Init+0x670>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d04f      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a53      	ldr	r2, [pc, #332]	; (8007cb8 <HAL_DMA_Init+0x674>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d04a      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a51      	ldr	r2, [pc, #324]	; (8007cbc <HAL_DMA_Init+0x678>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d045      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a50      	ldr	r2, [pc, #320]	; (8007cc0 <HAL_DMA_Init+0x67c>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d040      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a4e      	ldr	r2, [pc, #312]	; (8007cc4 <HAL_DMA_Init+0x680>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d03b      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a4d      	ldr	r2, [pc, #308]	; (8007cc8 <HAL_DMA_Init+0x684>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d036      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a4b      	ldr	r2, [pc, #300]	; (8007ccc <HAL_DMA_Init+0x688>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d031      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a4a      	ldr	r2, [pc, #296]	; (8007cd0 <HAL_DMA_Init+0x68c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d02c      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a48      	ldr	r2, [pc, #288]	; (8007cd4 <HAL_DMA_Init+0x690>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d027      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a47      	ldr	r2, [pc, #284]	; (8007cd8 <HAL_DMA_Init+0x694>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d022      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a45      	ldr	r2, [pc, #276]	; (8007cdc <HAL_DMA_Init+0x698>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d01d      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a44      	ldr	r2, [pc, #272]	; (8007ce0 <HAL_DMA_Init+0x69c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d018      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a42      	ldr	r2, [pc, #264]	; (8007ce4 <HAL_DMA_Init+0x6a0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d013      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a41      	ldr	r2, [pc, #260]	; (8007ce8 <HAL_DMA_Init+0x6a4>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00e      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3f      	ldr	r2, [pc, #252]	; (8007cec <HAL_DMA_Init+0x6a8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d009      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a3e      	ldr	r2, [pc, #248]	; (8007cf0 <HAL_DMA_Init+0x6ac>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_DMA_Init+0x5c2>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <HAL_DMA_Init+0x6b0>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d101      	bne.n	8007c0a <HAL_DMA_Init+0x5c6>
 8007c06:	2301      	movs	r3, #1
 8007c08:	e000      	b.n	8007c0c <HAL_DMA_Init+0x5c8>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d032      	beq.n	8007c76 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 fcdf 	bl	80095d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d102      	bne.n	8007c24 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2c:	b2d2      	uxtb	r2, r2
 8007c2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d010      	beq.n	8007c64 <HAL_DMA_Init+0x620>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b08      	cmp	r3, #8
 8007c48:	d80c      	bhi.n	8007c64 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f001 fd5c 	bl	8009708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c60:	605a      	str	r2, [r3, #4]
 8007c62:	e008      	b.n	8007c76 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	a7fdabf8 	.word	0xa7fdabf8
 8007c94:	cccccccd 	.word	0xcccccccd
 8007c98:	40020010 	.word	0x40020010
 8007c9c:	40020028 	.word	0x40020028
 8007ca0:	40020040 	.word	0x40020040
 8007ca4:	40020058 	.word	0x40020058
 8007ca8:	40020070 	.word	0x40020070
 8007cac:	40020088 	.word	0x40020088
 8007cb0:	400200a0 	.word	0x400200a0
 8007cb4:	400200b8 	.word	0x400200b8
 8007cb8:	40020410 	.word	0x40020410
 8007cbc:	40020428 	.word	0x40020428
 8007cc0:	40020440 	.word	0x40020440
 8007cc4:	40020458 	.word	0x40020458
 8007cc8:	40020470 	.word	0x40020470
 8007ccc:	40020488 	.word	0x40020488
 8007cd0:	400204a0 	.word	0x400204a0
 8007cd4:	400204b8 	.word	0x400204b8
 8007cd8:	58025408 	.word	0x58025408
 8007cdc:	5802541c 	.word	0x5802541c
 8007ce0:	58025430 	.word	0x58025430
 8007ce4:	58025444 	.word	0x58025444
 8007ce8:	58025458 	.word	0x58025458
 8007cec:	5802546c 	.word	0x5802546c
 8007cf0:	58025480 	.word	0x58025480
 8007cf4:	58025494 	.word	0x58025494

08007cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e226      	b.n	8008162 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_DMA_Start_IT+0x2a>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e21f      	b.n	8008162 <HAL_DMA_Start_IT+0x46a>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	f040 820a 	bne.w	800814c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a68      	ldr	r2, [pc, #416]	; (8007eec <HAL_DMA_Start_IT+0x1f4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d04a      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a66      	ldr	r2, [pc, #408]	; (8007ef0 <HAL_DMA_Start_IT+0x1f8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d045      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a65      	ldr	r2, [pc, #404]	; (8007ef4 <HAL_DMA_Start_IT+0x1fc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d040      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a63      	ldr	r2, [pc, #396]	; (8007ef8 <HAL_DMA_Start_IT+0x200>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d03b      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a62      	ldr	r2, [pc, #392]	; (8007efc <HAL_DMA_Start_IT+0x204>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d036      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a60      	ldr	r2, [pc, #384]	; (8007f00 <HAL_DMA_Start_IT+0x208>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d031      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a5f      	ldr	r2, [pc, #380]	; (8007f04 <HAL_DMA_Start_IT+0x20c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d02c      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a5d      	ldr	r2, [pc, #372]	; (8007f08 <HAL_DMA_Start_IT+0x210>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d027      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a5c      	ldr	r2, [pc, #368]	; (8007f0c <HAL_DMA_Start_IT+0x214>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a5a      	ldr	r2, [pc, #360]	; (8007f10 <HAL_DMA_Start_IT+0x218>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d01d      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a59      	ldr	r2, [pc, #356]	; (8007f14 <HAL_DMA_Start_IT+0x21c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a57      	ldr	r2, [pc, #348]	; (8007f18 <HAL_DMA_Start_IT+0x220>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d013      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a56      	ldr	r2, [pc, #344]	; (8007f1c <HAL_DMA_Start_IT+0x224>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00e      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a54      	ldr	r2, [pc, #336]	; (8007f20 <HAL_DMA_Start_IT+0x228>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d009      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a53      	ldr	r2, [pc, #332]	; (8007f24 <HAL_DMA_Start_IT+0x22c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d004      	beq.n	8007de6 <HAL_DMA_Start_IT+0xee>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a51      	ldr	r2, [pc, #324]	; (8007f28 <HAL_DMA_Start_IT+0x230>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <HAL_DMA_Start_IT+0x100>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0201 	bic.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e007      	b.n	8007e08 <HAL_DMA_Start_IT+0x110>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f022 0201 	bic.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f001 f906 	bl	8009020 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a34      	ldr	r2, [pc, #208]	; (8007eec <HAL_DMA_Start_IT+0x1f4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d04a      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a33      	ldr	r2, [pc, #204]	; (8007ef0 <HAL_DMA_Start_IT+0x1f8>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d045      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a31      	ldr	r2, [pc, #196]	; (8007ef4 <HAL_DMA_Start_IT+0x1fc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d040      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a30      	ldr	r2, [pc, #192]	; (8007ef8 <HAL_DMA_Start_IT+0x200>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d03b      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a2e      	ldr	r2, [pc, #184]	; (8007efc <HAL_DMA_Start_IT+0x204>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d036      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a2d      	ldr	r2, [pc, #180]	; (8007f00 <HAL_DMA_Start_IT+0x208>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d031      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a2b      	ldr	r2, [pc, #172]	; (8007f04 <HAL_DMA_Start_IT+0x20c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d02c      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a2a      	ldr	r2, [pc, #168]	; (8007f08 <HAL_DMA_Start_IT+0x210>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d027      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a28      	ldr	r2, [pc, #160]	; (8007f0c <HAL_DMA_Start_IT+0x214>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d022      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a27      	ldr	r2, [pc, #156]	; (8007f10 <HAL_DMA_Start_IT+0x218>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d01d      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a25      	ldr	r2, [pc, #148]	; (8007f14 <HAL_DMA_Start_IT+0x21c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d018      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a24      	ldr	r2, [pc, #144]	; (8007f18 <HAL_DMA_Start_IT+0x220>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d013      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a22      	ldr	r2, [pc, #136]	; (8007f1c <HAL_DMA_Start_IT+0x224>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00e      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a21      	ldr	r2, [pc, #132]	; (8007f20 <HAL_DMA_Start_IT+0x228>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d009      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <HAL_DMA_Start_IT+0x22c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d004      	beq.n	8007eb4 <HAL_DMA_Start_IT+0x1bc>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1e      	ldr	r2, [pc, #120]	; (8007f28 <HAL_DMA_Start_IT+0x230>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d101      	bne.n	8007eb8 <HAL_DMA_Start_IT+0x1c0>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <HAL_DMA_Start_IT+0x1c2>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d036      	beq.n	8007f2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f023 021e 	bic.w	r2, r3, #30
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f042 0216 	orr.w	r2, r2, #22
 8007ed0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d03e      	beq.n	8007f58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0208 	orr.w	r2, r2, #8
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e035      	b.n	8007f58 <HAL_DMA_Start_IT+0x260>
 8007eec:	40020010 	.word	0x40020010
 8007ef0:	40020028 	.word	0x40020028
 8007ef4:	40020040 	.word	0x40020040
 8007ef8:	40020058 	.word	0x40020058
 8007efc:	40020070 	.word	0x40020070
 8007f00:	40020088 	.word	0x40020088
 8007f04:	400200a0 	.word	0x400200a0
 8007f08:	400200b8 	.word	0x400200b8
 8007f0c:	40020410 	.word	0x40020410
 8007f10:	40020428 	.word	0x40020428
 8007f14:	40020440 	.word	0x40020440
 8007f18:	40020458 	.word	0x40020458
 8007f1c:	40020470 	.word	0x40020470
 8007f20:	40020488 	.word	0x40020488
 8007f24:	400204a0 	.word	0x400204a0
 8007f28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f023 020e 	bic.w	r2, r3, #14
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 020a 	orr.w	r2, r2, #10
 8007f3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0204 	orr.w	r2, r2, #4
 8007f56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a83      	ldr	r2, [pc, #524]	; (800816c <HAL_DMA_Start_IT+0x474>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d072      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a82      	ldr	r2, [pc, #520]	; (8008170 <HAL_DMA_Start_IT+0x478>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d06d      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a80      	ldr	r2, [pc, #512]	; (8008174 <HAL_DMA_Start_IT+0x47c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d068      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a7f      	ldr	r2, [pc, #508]	; (8008178 <HAL_DMA_Start_IT+0x480>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d063      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a7d      	ldr	r2, [pc, #500]	; (800817c <HAL_DMA_Start_IT+0x484>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d05e      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a7c      	ldr	r2, [pc, #496]	; (8008180 <HAL_DMA_Start_IT+0x488>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d059      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a7a      	ldr	r2, [pc, #488]	; (8008184 <HAL_DMA_Start_IT+0x48c>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d054      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a79      	ldr	r2, [pc, #484]	; (8008188 <HAL_DMA_Start_IT+0x490>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d04f      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a77      	ldr	r2, [pc, #476]	; (800818c <HAL_DMA_Start_IT+0x494>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d04a      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a76      	ldr	r2, [pc, #472]	; (8008190 <HAL_DMA_Start_IT+0x498>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d045      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a74      	ldr	r2, [pc, #464]	; (8008194 <HAL_DMA_Start_IT+0x49c>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d040      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a73      	ldr	r2, [pc, #460]	; (8008198 <HAL_DMA_Start_IT+0x4a0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d03b      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a71      	ldr	r2, [pc, #452]	; (800819c <HAL_DMA_Start_IT+0x4a4>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d036      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a70      	ldr	r2, [pc, #448]	; (80081a0 <HAL_DMA_Start_IT+0x4a8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d031      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a6e      	ldr	r2, [pc, #440]	; (80081a4 <HAL_DMA_Start_IT+0x4ac>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d02c      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a6d      	ldr	r2, [pc, #436]	; (80081a8 <HAL_DMA_Start_IT+0x4b0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d027      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a6b      	ldr	r2, [pc, #428]	; (80081ac <HAL_DMA_Start_IT+0x4b4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d022      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a6a      	ldr	r2, [pc, #424]	; (80081b0 <HAL_DMA_Start_IT+0x4b8>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d01d      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a68      	ldr	r2, [pc, #416]	; (80081b4 <HAL_DMA_Start_IT+0x4bc>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d018      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a67      	ldr	r2, [pc, #412]	; (80081b8 <HAL_DMA_Start_IT+0x4c0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d013      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a65      	ldr	r2, [pc, #404]	; (80081bc <HAL_DMA_Start_IT+0x4c4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d00e      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a64      	ldr	r2, [pc, #400]	; (80081c0 <HAL_DMA_Start_IT+0x4c8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d009      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a62      	ldr	r2, [pc, #392]	; (80081c4 <HAL_DMA_Start_IT+0x4cc>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d004      	beq.n	8008048 <HAL_DMA_Start_IT+0x350>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a61      	ldr	r2, [pc, #388]	; (80081c8 <HAL_DMA_Start_IT+0x4d0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d101      	bne.n	800804c <HAL_DMA_Start_IT+0x354>
 8008048:	2301      	movs	r3, #1
 800804a:	e000      	b.n	800804e <HAL_DMA_Start_IT+0x356>
 800804c:	2300      	movs	r3, #0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d01a      	beq.n	8008088 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800806e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008086:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a37      	ldr	r2, [pc, #220]	; (800816c <HAL_DMA_Start_IT+0x474>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d04a      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a36      	ldr	r2, [pc, #216]	; (8008170 <HAL_DMA_Start_IT+0x478>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d045      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a34      	ldr	r2, [pc, #208]	; (8008174 <HAL_DMA_Start_IT+0x47c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d040      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a33      	ldr	r2, [pc, #204]	; (8008178 <HAL_DMA_Start_IT+0x480>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d03b      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a31      	ldr	r2, [pc, #196]	; (800817c <HAL_DMA_Start_IT+0x484>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d036      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a30      	ldr	r2, [pc, #192]	; (8008180 <HAL_DMA_Start_IT+0x488>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d031      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a2e      	ldr	r2, [pc, #184]	; (8008184 <HAL_DMA_Start_IT+0x48c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d02c      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a2d      	ldr	r2, [pc, #180]	; (8008188 <HAL_DMA_Start_IT+0x490>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d027      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a2b      	ldr	r2, [pc, #172]	; (800818c <HAL_DMA_Start_IT+0x494>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d022      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a2a      	ldr	r2, [pc, #168]	; (8008190 <HAL_DMA_Start_IT+0x498>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d01d      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a28      	ldr	r2, [pc, #160]	; (8008194 <HAL_DMA_Start_IT+0x49c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d018      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a27      	ldr	r2, [pc, #156]	; (8008198 <HAL_DMA_Start_IT+0x4a0>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d013      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a25      	ldr	r2, [pc, #148]	; (800819c <HAL_DMA_Start_IT+0x4a4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00e      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a24      	ldr	r2, [pc, #144]	; (80081a0 <HAL_DMA_Start_IT+0x4a8>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d009      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a22      	ldr	r2, [pc, #136]	; (80081a4 <HAL_DMA_Start_IT+0x4ac>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d004      	beq.n	8008128 <HAL_DMA_Start_IT+0x430>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a21      	ldr	r2, [pc, #132]	; (80081a8 <HAL_DMA_Start_IT+0x4b0>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d108      	bne.n	800813a <HAL_DMA_Start_IT+0x442>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	e012      	b.n	8008160 <HAL_DMA_Start_IT+0x468>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0201 	orr.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	e009      	b.n	8008160 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008152:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008160:	7dfb      	ldrb	r3, [r7, #23]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	40020010 	.word	0x40020010
 8008170:	40020028 	.word	0x40020028
 8008174:	40020040 	.word	0x40020040
 8008178:	40020058 	.word	0x40020058
 800817c:	40020070 	.word	0x40020070
 8008180:	40020088 	.word	0x40020088
 8008184:	400200a0 	.word	0x400200a0
 8008188:	400200b8 	.word	0x400200b8
 800818c:	40020410 	.word	0x40020410
 8008190:	40020428 	.word	0x40020428
 8008194:	40020440 	.word	0x40020440
 8008198:	40020458 	.word	0x40020458
 800819c:	40020470 	.word	0x40020470
 80081a0:	40020488 	.word	0x40020488
 80081a4:	400204a0 	.word	0x400204a0
 80081a8:	400204b8 	.word	0x400204b8
 80081ac:	58025408 	.word	0x58025408
 80081b0:	5802541c 	.word	0x5802541c
 80081b4:	58025430 	.word	0x58025430
 80081b8:	58025444 	.word	0x58025444
 80081bc:	58025458 	.word	0x58025458
 80081c0:	5802546c 	.word	0x5802546c
 80081c4:	58025480 	.word	0x58025480
 80081c8:	58025494 	.word	0x58025494

080081cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081d8:	4b67      	ldr	r3, [pc, #412]	; (8008378 <HAL_DMA_IRQHandler+0x1ac>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a67      	ldr	r2, [pc, #412]	; (800837c <HAL_DMA_IRQHandler+0x1b0>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	0a9b      	lsrs	r3, r3, #10
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a5f      	ldr	r2, [pc, #380]	; (8008380 <HAL_DMA_IRQHandler+0x1b4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d04a      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a5d      	ldr	r2, [pc, #372]	; (8008384 <HAL_DMA_IRQHandler+0x1b8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d045      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a5c      	ldr	r2, [pc, #368]	; (8008388 <HAL_DMA_IRQHandler+0x1bc>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d040      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a5a      	ldr	r2, [pc, #360]	; (800838c <HAL_DMA_IRQHandler+0x1c0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d03b      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a59      	ldr	r2, [pc, #356]	; (8008390 <HAL_DMA_IRQHandler+0x1c4>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d036      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a57      	ldr	r2, [pc, #348]	; (8008394 <HAL_DMA_IRQHandler+0x1c8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d031      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a56      	ldr	r2, [pc, #344]	; (8008398 <HAL_DMA_IRQHandler+0x1cc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d02c      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a54      	ldr	r2, [pc, #336]	; (800839c <HAL_DMA_IRQHandler+0x1d0>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d027      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a53      	ldr	r2, [pc, #332]	; (80083a0 <HAL_DMA_IRQHandler+0x1d4>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d022      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a51      	ldr	r2, [pc, #324]	; (80083a4 <HAL_DMA_IRQHandler+0x1d8>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01d      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a50      	ldr	r2, [pc, #320]	; (80083a8 <HAL_DMA_IRQHandler+0x1dc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d018      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a4e      	ldr	r2, [pc, #312]	; (80083ac <HAL_DMA_IRQHandler+0x1e0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d013      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a4d      	ldr	r2, [pc, #308]	; (80083b0 <HAL_DMA_IRQHandler+0x1e4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00e      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a4b      	ldr	r2, [pc, #300]	; (80083b4 <HAL_DMA_IRQHandler+0x1e8>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d009      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a4a      	ldr	r2, [pc, #296]	; (80083b8 <HAL_DMA_IRQHandler+0x1ec>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d004      	beq.n	800829e <HAL_DMA_IRQHandler+0xd2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a48      	ldr	r2, [pc, #288]	; (80083bc <HAL_DMA_IRQHandler+0x1f0>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d101      	bne.n	80082a2 <HAL_DMA_IRQHandler+0xd6>
 800829e:	2301      	movs	r3, #1
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_IRQHandler+0xd8>
 80082a2:	2300      	movs	r3, #0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 842b 	beq.w	8008b00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ae:	f003 031f 	and.w	r3, r3, #31
 80082b2:	2208      	movs	r2, #8
 80082b4:	409a      	lsls	r2, r3
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	4013      	ands	r3, r2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f000 80a2 	beq.w	8008404 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a2e      	ldr	r2, [pc, #184]	; (8008380 <HAL_DMA_IRQHandler+0x1b4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d04a      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a2d      	ldr	r2, [pc, #180]	; (8008384 <HAL_DMA_IRQHandler+0x1b8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d045      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a2b      	ldr	r2, [pc, #172]	; (8008388 <HAL_DMA_IRQHandler+0x1bc>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d040      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2a      	ldr	r2, [pc, #168]	; (800838c <HAL_DMA_IRQHandler+0x1c0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d03b      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a28      	ldr	r2, [pc, #160]	; (8008390 <HAL_DMA_IRQHandler+0x1c4>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d036      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a27      	ldr	r2, [pc, #156]	; (8008394 <HAL_DMA_IRQHandler+0x1c8>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d031      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a25      	ldr	r2, [pc, #148]	; (8008398 <HAL_DMA_IRQHandler+0x1cc>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d02c      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a24      	ldr	r2, [pc, #144]	; (800839c <HAL_DMA_IRQHandler+0x1d0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d027      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a22      	ldr	r2, [pc, #136]	; (80083a0 <HAL_DMA_IRQHandler+0x1d4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d022      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a21      	ldr	r2, [pc, #132]	; (80083a4 <HAL_DMA_IRQHandler+0x1d8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d01d      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <HAL_DMA_IRQHandler+0x1dc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d018      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a1e      	ldr	r2, [pc, #120]	; (80083ac <HAL_DMA_IRQHandler+0x1e0>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d013      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <HAL_DMA_IRQHandler+0x1e4>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d00e      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1b      	ldr	r2, [pc, #108]	; (80083b4 <HAL_DMA_IRQHandler+0x1e8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d009      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a19      	ldr	r2, [pc, #100]	; (80083b8 <HAL_DMA_IRQHandler+0x1ec>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d004      	beq.n	8008360 <HAL_DMA_IRQHandler+0x194>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a18      	ldr	r2, [pc, #96]	; (80083bc <HAL_DMA_IRQHandler+0x1f0>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d12f      	bne.n	80083c0 <HAL_DMA_IRQHandler+0x1f4>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0304 	and.w	r3, r3, #4
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf14      	ite	ne
 800836e:	2301      	movne	r3, #1
 8008370:	2300      	moveq	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e02e      	b.n	80083d4 <HAL_DMA_IRQHandler+0x208>
 8008376:	bf00      	nop
 8008378:	24000000 	.word	0x24000000
 800837c:	1b4e81b5 	.word	0x1b4e81b5
 8008380:	40020010 	.word	0x40020010
 8008384:	40020028 	.word	0x40020028
 8008388:	40020040 	.word	0x40020040
 800838c:	40020058 	.word	0x40020058
 8008390:	40020070 	.word	0x40020070
 8008394:	40020088 	.word	0x40020088
 8008398:	400200a0 	.word	0x400200a0
 800839c:	400200b8 	.word	0x400200b8
 80083a0:	40020410 	.word	0x40020410
 80083a4:	40020428 	.word	0x40020428
 80083a8:	40020440 	.word	0x40020440
 80083ac:	40020458 	.word	0x40020458
 80083b0:	40020470 	.word	0x40020470
 80083b4:	40020488 	.word	0x40020488
 80083b8:	400204a0 	.word	0x400204a0
 80083bc:	400204b8 	.word	0x400204b8
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bf14      	ite	ne
 80083ce:	2301      	movne	r3, #1
 80083d0:	2300      	moveq	r3, #0
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d015      	beq.n	8008404 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0204 	bic.w	r2, r2, #4
 80083e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ec:	f003 031f 	and.w	r3, r3, #31
 80083f0:	2208      	movs	r2, #8
 80083f2:	409a      	lsls	r2, r3
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fc:	f043 0201 	orr.w	r2, r3, #1
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008408:	f003 031f 	and.w	r3, r3, #31
 800840c:	69ba      	ldr	r2, [r7, #24]
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d06e      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a69      	ldr	r2, [pc, #420]	; (80085c4 <HAL_DMA_IRQHandler+0x3f8>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d04a      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a67      	ldr	r2, [pc, #412]	; (80085c8 <HAL_DMA_IRQHandler+0x3fc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d045      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a66      	ldr	r2, [pc, #408]	; (80085cc <HAL_DMA_IRQHandler+0x400>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d040      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a64      	ldr	r2, [pc, #400]	; (80085d0 <HAL_DMA_IRQHandler+0x404>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d03b      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a63      	ldr	r2, [pc, #396]	; (80085d4 <HAL_DMA_IRQHandler+0x408>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d036      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a61      	ldr	r2, [pc, #388]	; (80085d8 <HAL_DMA_IRQHandler+0x40c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d031      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a60      	ldr	r2, [pc, #384]	; (80085dc <HAL_DMA_IRQHandler+0x410>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d02c      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a5e      	ldr	r2, [pc, #376]	; (80085e0 <HAL_DMA_IRQHandler+0x414>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d027      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a5d      	ldr	r2, [pc, #372]	; (80085e4 <HAL_DMA_IRQHandler+0x418>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d022      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a5b      	ldr	r2, [pc, #364]	; (80085e8 <HAL_DMA_IRQHandler+0x41c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d01d      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a5a      	ldr	r2, [pc, #360]	; (80085ec <HAL_DMA_IRQHandler+0x420>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d018      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a58      	ldr	r2, [pc, #352]	; (80085f0 <HAL_DMA_IRQHandler+0x424>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a57      	ldr	r2, [pc, #348]	; (80085f4 <HAL_DMA_IRQHandler+0x428>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00e      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <HAL_DMA_IRQHandler+0x42c>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a54      	ldr	r2, [pc, #336]	; (80085fc <HAL_DMA_IRQHandler+0x430>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <HAL_DMA_IRQHandler+0x2ee>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a52      	ldr	r2, [pc, #328]	; (8008600 <HAL_DMA_IRQHandler+0x434>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d10a      	bne.n	80084d0 <HAL_DMA_IRQHandler+0x304>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	bf14      	ite	ne
 80084c8:	2301      	movne	r3, #1
 80084ca:	2300      	moveq	r3, #0
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	e003      	b.n	80084d8 <HAL_DMA_IRQHandler+0x30c>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2300      	movs	r3, #0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00d      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084e0:	f003 031f 	and.w	r3, r3, #31
 80084e4:	2201      	movs	r2, #1
 80084e6:	409a      	lsls	r2, r3
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084f0:	f043 0202 	orr.w	r2, r3, #2
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	2204      	movs	r2, #4
 8008502:	409a      	lsls	r2, r3
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 808f 	beq.w	800862c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a2c      	ldr	r2, [pc, #176]	; (80085c4 <HAL_DMA_IRQHandler+0x3f8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d04a      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a2a      	ldr	r2, [pc, #168]	; (80085c8 <HAL_DMA_IRQHandler+0x3fc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d045      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a29      	ldr	r2, [pc, #164]	; (80085cc <HAL_DMA_IRQHandler+0x400>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d040      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a27      	ldr	r2, [pc, #156]	; (80085d0 <HAL_DMA_IRQHandler+0x404>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d03b      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a26      	ldr	r2, [pc, #152]	; (80085d4 <HAL_DMA_IRQHandler+0x408>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d036      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a24      	ldr	r2, [pc, #144]	; (80085d8 <HAL_DMA_IRQHandler+0x40c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d031      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a23      	ldr	r2, [pc, #140]	; (80085dc <HAL_DMA_IRQHandler+0x410>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d02c      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <HAL_DMA_IRQHandler+0x414>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d027      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a20      	ldr	r2, [pc, #128]	; (80085e4 <HAL_DMA_IRQHandler+0x418>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d022      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a1e      	ldr	r2, [pc, #120]	; (80085e8 <HAL_DMA_IRQHandler+0x41c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d01d      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a1d      	ldr	r2, [pc, #116]	; (80085ec <HAL_DMA_IRQHandler+0x420>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d018      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a1b      	ldr	r2, [pc, #108]	; (80085f0 <HAL_DMA_IRQHandler+0x424>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d013      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a1a      	ldr	r2, [pc, #104]	; (80085f4 <HAL_DMA_IRQHandler+0x428>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00e      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <HAL_DMA_IRQHandler+0x42c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d009      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a17      	ldr	r2, [pc, #92]	; (80085fc <HAL_DMA_IRQHandler+0x430>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d004      	beq.n	80085ae <HAL_DMA_IRQHandler+0x3e2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a15      	ldr	r2, [pc, #84]	; (8008600 <HAL_DMA_IRQHandler+0x434>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d12a      	bne.n	8008604 <HAL_DMA_IRQHandler+0x438>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf14      	ite	ne
 80085bc:	2301      	movne	r3, #1
 80085be:	2300      	moveq	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	e023      	b.n	800860c <HAL_DMA_IRQHandler+0x440>
 80085c4:	40020010 	.word	0x40020010
 80085c8:	40020028 	.word	0x40020028
 80085cc:	40020040 	.word	0x40020040
 80085d0:	40020058 	.word	0x40020058
 80085d4:	40020070 	.word	0x40020070
 80085d8:	40020088 	.word	0x40020088
 80085dc:	400200a0 	.word	0x400200a0
 80085e0:	400200b8 	.word	0x400200b8
 80085e4:	40020410 	.word	0x40020410
 80085e8:	40020428 	.word	0x40020428
 80085ec:	40020440 	.word	0x40020440
 80085f0:	40020458 	.word	0x40020458
 80085f4:	40020470 	.word	0x40020470
 80085f8:	40020488 	.word	0x40020488
 80085fc:	400204a0 	.word	0x400204a0
 8008600:	400204b8 	.word	0x400204b8
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	2204      	movs	r2, #4
 800861a:	409a      	lsls	r2, r3
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008624:	f043 0204 	orr.w	r2, r3, #4
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	2210      	movs	r2, #16
 8008636:	409a      	lsls	r2, r3
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	4013      	ands	r3, r2
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80a6 	beq.w	800878e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a85      	ldr	r2, [pc, #532]	; (800885c <HAL_DMA_IRQHandler+0x690>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d04a      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a83      	ldr	r2, [pc, #524]	; (8008860 <HAL_DMA_IRQHandler+0x694>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d045      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a82      	ldr	r2, [pc, #520]	; (8008864 <HAL_DMA_IRQHandler+0x698>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d040      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a80      	ldr	r2, [pc, #512]	; (8008868 <HAL_DMA_IRQHandler+0x69c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d03b      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a7f      	ldr	r2, [pc, #508]	; (800886c <HAL_DMA_IRQHandler+0x6a0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d036      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a7d      	ldr	r2, [pc, #500]	; (8008870 <HAL_DMA_IRQHandler+0x6a4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d031      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a7c      	ldr	r2, [pc, #496]	; (8008874 <HAL_DMA_IRQHandler+0x6a8>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d02c      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a7a      	ldr	r2, [pc, #488]	; (8008878 <HAL_DMA_IRQHandler+0x6ac>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d027      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a79      	ldr	r2, [pc, #484]	; (800887c <HAL_DMA_IRQHandler+0x6b0>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d022      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a77      	ldr	r2, [pc, #476]	; (8008880 <HAL_DMA_IRQHandler+0x6b4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01d      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a76      	ldr	r2, [pc, #472]	; (8008884 <HAL_DMA_IRQHandler+0x6b8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d018      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a74      	ldr	r2, [pc, #464]	; (8008888 <HAL_DMA_IRQHandler+0x6bc>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d013      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a73      	ldr	r2, [pc, #460]	; (800888c <HAL_DMA_IRQHandler+0x6c0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d00e      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a71      	ldr	r2, [pc, #452]	; (8008890 <HAL_DMA_IRQHandler+0x6c4>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d009      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a70      	ldr	r2, [pc, #448]	; (8008894 <HAL_DMA_IRQHandler+0x6c8>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d004      	beq.n	80086e2 <HAL_DMA_IRQHandler+0x516>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6e      	ldr	r2, [pc, #440]	; (8008898 <HAL_DMA_IRQHandler+0x6cc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10a      	bne.n	80086f8 <HAL_DMA_IRQHandler+0x52c>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bf14      	ite	ne
 80086f0:	2301      	movne	r3, #1
 80086f2:	2300      	moveq	r3, #0
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	e009      	b.n	800870c <HAL_DMA_IRQHandler+0x540>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 0304 	and.w	r3, r3, #4
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d03e      	beq.n	800878e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008714:	f003 031f 	and.w	r3, r3, #31
 8008718:	2210      	movs	r2, #16
 800871a:	409a      	lsls	r2, r3
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d108      	bne.n	800874e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d024      	beq.n	800878e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	4798      	blx	r3
 800874c:	e01f      	b.n	800878e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008752:	2b00      	cmp	r3, #0
 8008754:	d01b      	beq.n	800878e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
 800875e:	e016      	b.n	800878e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f022 0208 	bic.w	r2, r2, #8
 800877c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008792:	f003 031f 	and.w	r3, r3, #31
 8008796:	2220      	movs	r2, #32
 8008798:	409a      	lsls	r2, r3
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	4013      	ands	r3, r2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 8110 	beq.w	80089c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a2c      	ldr	r2, [pc, #176]	; (800885c <HAL_DMA_IRQHandler+0x690>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d04a      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a2b      	ldr	r2, [pc, #172]	; (8008860 <HAL_DMA_IRQHandler+0x694>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d045      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a29      	ldr	r2, [pc, #164]	; (8008864 <HAL_DMA_IRQHandler+0x698>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d040      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a28      	ldr	r2, [pc, #160]	; (8008868 <HAL_DMA_IRQHandler+0x69c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d03b      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a26      	ldr	r2, [pc, #152]	; (800886c <HAL_DMA_IRQHandler+0x6a0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d036      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a25      	ldr	r2, [pc, #148]	; (8008870 <HAL_DMA_IRQHandler+0x6a4>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d031      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a23      	ldr	r2, [pc, #140]	; (8008874 <HAL_DMA_IRQHandler+0x6a8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d02c      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a22      	ldr	r2, [pc, #136]	; (8008878 <HAL_DMA_IRQHandler+0x6ac>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d027      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a20      	ldr	r2, [pc, #128]	; (800887c <HAL_DMA_IRQHandler+0x6b0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d022      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a1f      	ldr	r2, [pc, #124]	; (8008880 <HAL_DMA_IRQHandler+0x6b4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d01d      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <HAL_DMA_IRQHandler+0x6b8>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d018      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1c      	ldr	r2, [pc, #112]	; (8008888 <HAL_DMA_IRQHandler+0x6bc>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d013      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1a      	ldr	r2, [pc, #104]	; (800888c <HAL_DMA_IRQHandler+0x6c0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00e      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a19      	ldr	r2, [pc, #100]	; (8008890 <HAL_DMA_IRQHandler+0x6c4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d009      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a17      	ldr	r2, [pc, #92]	; (8008894 <HAL_DMA_IRQHandler+0x6c8>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d004      	beq.n	8008844 <HAL_DMA_IRQHandler+0x678>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a16      	ldr	r2, [pc, #88]	; (8008898 <HAL_DMA_IRQHandler+0x6cc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d12b      	bne.n	800889c <HAL_DMA_IRQHandler+0x6d0>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0310 	and.w	r3, r3, #16
 800884e:	2b00      	cmp	r3, #0
 8008850:	bf14      	ite	ne
 8008852:	2301      	movne	r3, #1
 8008854:	2300      	moveq	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	e02a      	b.n	80088b0 <HAL_DMA_IRQHandler+0x6e4>
 800885a:	bf00      	nop
 800885c:	40020010 	.word	0x40020010
 8008860:	40020028 	.word	0x40020028
 8008864:	40020040 	.word	0x40020040
 8008868:	40020058 	.word	0x40020058
 800886c:	40020070 	.word	0x40020070
 8008870:	40020088 	.word	0x40020088
 8008874:	400200a0 	.word	0x400200a0
 8008878:	400200b8 	.word	0x400200b8
 800887c:	40020410 	.word	0x40020410
 8008880:	40020428 	.word	0x40020428
 8008884:	40020440 	.word	0x40020440
 8008888:	40020458 	.word	0x40020458
 800888c:	40020470 	.word	0x40020470
 8008890:	40020488 	.word	0x40020488
 8008894:	400204a0 	.word	0x400204a0
 8008898:	400204b8 	.word	0x400204b8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bf14      	ite	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	2300      	moveq	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8087 	beq.w	80089c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2220      	movs	r2, #32
 80088c0:	409a      	lsls	r2, r3
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d139      	bne.n	8008946 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0216 	bic.w	r2, r2, #22
 80088e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	695a      	ldr	r2, [r3, #20]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d103      	bne.n	8008902 <HAL_DMA_IRQHandler+0x736>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0208 	bic.w	r2, r2, #8
 8008910:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	f003 031f 	and.w	r3, r3, #31
 800891a:	223f      	movs	r2, #63	; 0x3f
 800891c:	409a      	lsls	r2, r3
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 834a 	beq.w	8008fd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
          }
          return;
 8008944:	e344      	b.n	8008fd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d018      	beq.n	8008986 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d108      	bne.n	8008974 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008966:	2b00      	cmp	r3, #0
 8008968:	d02c      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	e027      	b.n	80089c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d023      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
 8008984:	e01e      	b.n	80089c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10f      	bne.n	80089b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0210 	bic.w	r2, r2, #16
 80089a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8306 	beq.w	8008fda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 8088 	beq.w	8008aec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2204      	movs	r2, #4
 80089e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a7a      	ldr	r2, [pc, #488]	; (8008bd4 <HAL_DMA_IRQHandler+0xa08>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d04a      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a79      	ldr	r2, [pc, #484]	; (8008bd8 <HAL_DMA_IRQHandler+0xa0c>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d045      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a77      	ldr	r2, [pc, #476]	; (8008bdc <HAL_DMA_IRQHandler+0xa10>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d040      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a76      	ldr	r2, [pc, #472]	; (8008be0 <HAL_DMA_IRQHandler+0xa14>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d03b      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a74      	ldr	r2, [pc, #464]	; (8008be4 <HAL_DMA_IRQHandler+0xa18>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d036      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a73      	ldr	r2, [pc, #460]	; (8008be8 <HAL_DMA_IRQHandler+0xa1c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d031      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a71      	ldr	r2, [pc, #452]	; (8008bec <HAL_DMA_IRQHandler+0xa20>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d02c      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a70      	ldr	r2, [pc, #448]	; (8008bf0 <HAL_DMA_IRQHandler+0xa24>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d027      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a6e      	ldr	r2, [pc, #440]	; (8008bf4 <HAL_DMA_IRQHandler+0xa28>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d022      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a6d      	ldr	r2, [pc, #436]	; (8008bf8 <HAL_DMA_IRQHandler+0xa2c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d01d      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a6b      	ldr	r2, [pc, #428]	; (8008bfc <HAL_DMA_IRQHandler+0xa30>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d018      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a6a      	ldr	r2, [pc, #424]	; (8008c00 <HAL_DMA_IRQHandler+0xa34>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d013      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a68      	ldr	r2, [pc, #416]	; (8008c04 <HAL_DMA_IRQHandler+0xa38>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d00e      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a67      	ldr	r2, [pc, #412]	; (8008c08 <HAL_DMA_IRQHandler+0xa3c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d009      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a65      	ldr	r2, [pc, #404]	; (8008c0c <HAL_DMA_IRQHandler+0xa40>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d004      	beq.n	8008a84 <HAL_DMA_IRQHandler+0x8b8>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a64      	ldr	r2, [pc, #400]	; (8008c10 <HAL_DMA_IRQHandler+0xa44>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d108      	bne.n	8008a96 <HAL_DMA_IRQHandler+0x8ca>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e007      	b.n	8008aa6 <HAL_DMA_IRQHandler+0x8da>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0201 	bic.w	r2, r2, #1
 8008aa4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d307      	bcc.n	8008ac2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f2      	bne.n	8008aa6 <HAL_DMA_IRQHandler+0x8da>
 8008ac0:	e000      	b.n	8008ac4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008ac2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d004      	beq.n	8008adc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008ada:	e003      	b.n	8008ae4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f000 8272 	beq.w	8008fda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
 8008afe:	e26c      	b.n	8008fda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a43      	ldr	r2, [pc, #268]	; (8008c14 <HAL_DMA_IRQHandler+0xa48>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d022      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a42      	ldr	r2, [pc, #264]	; (8008c18 <HAL_DMA_IRQHandler+0xa4c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d01d      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a40      	ldr	r2, [pc, #256]	; (8008c1c <HAL_DMA_IRQHandler+0xa50>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d018      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a3f      	ldr	r2, [pc, #252]	; (8008c20 <HAL_DMA_IRQHandler+0xa54>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d013      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a3d      	ldr	r2, [pc, #244]	; (8008c24 <HAL_DMA_IRQHandler+0xa58>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00e      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a3c      	ldr	r2, [pc, #240]	; (8008c28 <HAL_DMA_IRQHandler+0xa5c>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d009      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a3a      	ldr	r2, [pc, #232]	; (8008c2c <HAL_DMA_IRQHandler+0xa60>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <HAL_DMA_IRQHandler+0x984>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a39      	ldr	r2, [pc, #228]	; (8008c30 <HAL_DMA_IRQHandler+0xa64>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d101      	bne.n	8008b54 <HAL_DMA_IRQHandler+0x988>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_DMA_IRQHandler+0x98a>
 8008b54:	2300      	movs	r3, #0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 823f 	beq.w	8008fda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b68:	f003 031f 	and.w	r3, r3, #31
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	409a      	lsls	r2, r3
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 80cd 	beq.w	8008d14 <HAL_DMA_IRQHandler+0xb48>
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80c7 	beq.w	8008d14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	2204      	movs	r2, #4
 8008b90:	409a      	lsls	r2, r3
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d049      	beq.n	8008c34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d109      	bne.n	8008bbe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 8210 	beq.w	8008fd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bbc:	e20a      	b.n	8008fd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8206 	beq.w	8008fd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bd0:	e200      	b.n	8008fd4 <HAL_DMA_IRQHandler+0xe08>
 8008bd2:	bf00      	nop
 8008bd4:	40020010 	.word	0x40020010
 8008bd8:	40020028 	.word	0x40020028
 8008bdc:	40020040 	.word	0x40020040
 8008be0:	40020058 	.word	0x40020058
 8008be4:	40020070 	.word	0x40020070
 8008be8:	40020088 	.word	0x40020088
 8008bec:	400200a0 	.word	0x400200a0
 8008bf0:	400200b8 	.word	0x400200b8
 8008bf4:	40020410 	.word	0x40020410
 8008bf8:	40020428 	.word	0x40020428
 8008bfc:	40020440 	.word	0x40020440
 8008c00:	40020458 	.word	0x40020458
 8008c04:	40020470 	.word	0x40020470
 8008c08:	40020488 	.word	0x40020488
 8008c0c:	400204a0 	.word	0x400204a0
 8008c10:	400204b8 	.word	0x400204b8
 8008c14:	58025408 	.word	0x58025408
 8008c18:	5802541c 	.word	0x5802541c
 8008c1c:	58025430 	.word	0x58025430
 8008c20:	58025444 	.word	0x58025444
 8008c24:	58025458 	.word	0x58025458
 8008c28:	5802546c 	.word	0x5802546c
 8008c2c:	58025480 	.word	0x58025480
 8008c30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d160      	bne.n	8008d00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a7f      	ldr	r2, [pc, #508]	; (8008e40 <HAL_DMA_IRQHandler+0xc74>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d04a      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a7d      	ldr	r2, [pc, #500]	; (8008e44 <HAL_DMA_IRQHandler+0xc78>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d045      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a7c      	ldr	r2, [pc, #496]	; (8008e48 <HAL_DMA_IRQHandler+0xc7c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d040      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a7a      	ldr	r2, [pc, #488]	; (8008e4c <HAL_DMA_IRQHandler+0xc80>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03b      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a79      	ldr	r2, [pc, #484]	; (8008e50 <HAL_DMA_IRQHandler+0xc84>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d036      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a77      	ldr	r2, [pc, #476]	; (8008e54 <HAL_DMA_IRQHandler+0xc88>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d031      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a76      	ldr	r2, [pc, #472]	; (8008e58 <HAL_DMA_IRQHandler+0xc8c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d02c      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a74      	ldr	r2, [pc, #464]	; (8008e5c <HAL_DMA_IRQHandler+0xc90>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d027      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a73      	ldr	r2, [pc, #460]	; (8008e60 <HAL_DMA_IRQHandler+0xc94>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d022      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a71      	ldr	r2, [pc, #452]	; (8008e64 <HAL_DMA_IRQHandler+0xc98>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01d      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a70      	ldr	r2, [pc, #448]	; (8008e68 <HAL_DMA_IRQHandler+0xc9c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d018      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a6e      	ldr	r2, [pc, #440]	; (8008e6c <HAL_DMA_IRQHandler+0xca0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a6d      	ldr	r2, [pc, #436]	; (8008e70 <HAL_DMA_IRQHandler+0xca4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00e      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a6b      	ldr	r2, [pc, #428]	; (8008e74 <HAL_DMA_IRQHandler+0xca8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a6a      	ldr	r2, [pc, #424]	; (8008e78 <HAL_DMA_IRQHandler+0xcac>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_DMA_IRQHandler+0xb12>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a68      	ldr	r2, [pc, #416]	; (8008e7c <HAL_DMA_IRQHandler+0xcb0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d108      	bne.n	8008cf0 <HAL_DMA_IRQHandler+0xb24>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f022 0208 	bic.w	r2, r2, #8
 8008cec:	601a      	str	r2, [r3, #0]
 8008cee:	e007      	b.n	8008d00 <HAL_DMA_IRQHandler+0xb34>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f022 0204 	bic.w	r2, r2, #4
 8008cfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 8165 	beq.w	8008fd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d12:	e15f      	b.n	8008fd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d18:	f003 031f 	and.w	r3, r3, #31
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	409a      	lsls	r2, r3
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4013      	ands	r3, r2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80c5 	beq.w	8008eb4 <HAL_DMA_IRQHandler+0xce8>
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f000 80bf 	beq.w	8008eb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3a:	f003 031f 	and.w	r3, r3, #31
 8008d3e:	2202      	movs	r2, #2
 8008d40:	409a      	lsls	r2, r3
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d018      	beq.n	8008d82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d109      	bne.n	8008d6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 813a 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d6c:	e134      	b.n	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8130 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d80:	e12a      	b.n	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f040 8089 	bne.w	8008ea0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a2b      	ldr	r2, [pc, #172]	; (8008e40 <HAL_DMA_IRQHandler+0xc74>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d04a      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a29      	ldr	r2, [pc, #164]	; (8008e44 <HAL_DMA_IRQHandler+0xc78>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d045      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a28      	ldr	r2, [pc, #160]	; (8008e48 <HAL_DMA_IRQHandler+0xc7c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d040      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <HAL_DMA_IRQHandler+0xc80>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d03b      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a25      	ldr	r2, [pc, #148]	; (8008e50 <HAL_DMA_IRQHandler+0xc84>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d036      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a23      	ldr	r2, [pc, #140]	; (8008e54 <HAL_DMA_IRQHandler+0xc88>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d031      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a22      	ldr	r2, [pc, #136]	; (8008e58 <HAL_DMA_IRQHandler+0xc8c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d02c      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a20      	ldr	r2, [pc, #128]	; (8008e5c <HAL_DMA_IRQHandler+0xc90>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d027      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a1f      	ldr	r2, [pc, #124]	; (8008e60 <HAL_DMA_IRQHandler+0xc94>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d022      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <HAL_DMA_IRQHandler+0xc98>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d01d      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1c      	ldr	r2, [pc, #112]	; (8008e68 <HAL_DMA_IRQHandler+0xc9c>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d018      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1a      	ldr	r2, [pc, #104]	; (8008e6c <HAL_DMA_IRQHandler+0xca0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a19      	ldr	r2, [pc, #100]	; (8008e70 <HAL_DMA_IRQHandler+0xca4>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d00e      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <HAL_DMA_IRQHandler+0xca8>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a16      	ldr	r2, [pc, #88]	; (8008e78 <HAL_DMA_IRQHandler+0xcac>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d004      	beq.n	8008e2e <HAL_DMA_IRQHandler+0xc62>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a14      	ldr	r2, [pc, #80]	; (8008e7c <HAL_DMA_IRQHandler+0xcb0>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d128      	bne.n	8008e80 <HAL_DMA_IRQHandler+0xcb4>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0214 	bic.w	r2, r2, #20
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	e027      	b.n	8008e90 <HAL_DMA_IRQHandler+0xcc4>
 8008e40:	40020010 	.word	0x40020010
 8008e44:	40020028 	.word	0x40020028
 8008e48:	40020040 	.word	0x40020040
 8008e4c:	40020058 	.word	0x40020058
 8008e50:	40020070 	.word	0x40020070
 8008e54:	40020088 	.word	0x40020088
 8008e58:	400200a0 	.word	0x400200a0
 8008e5c:	400200b8 	.word	0x400200b8
 8008e60:	40020410 	.word	0x40020410
 8008e64:	40020428 	.word	0x40020428
 8008e68:	40020440 	.word	0x40020440
 8008e6c:	40020458 	.word	0x40020458
 8008e70:	40020470 	.word	0x40020470
 8008e74:	40020488 	.word	0x40020488
 8008e78:	400204a0 	.word	0x400204a0
 8008e7c:	400204b8 	.word	0x400204b8
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 020a 	bic.w	r2, r2, #10
 8008e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8097 	beq.w	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008eb2:	e091      	b.n	8008fd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eb8:	f003 031f 	and.w	r3, r3, #31
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	409a      	lsls	r2, r3
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8088 	beq.w	8008fda <HAL_DMA_IRQHandler+0xe0e>
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 8082 	beq.w	8008fda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a41      	ldr	r2, [pc, #260]	; (8008fe0 <HAL_DMA_IRQHandler+0xe14>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d04a      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a3f      	ldr	r2, [pc, #252]	; (8008fe4 <HAL_DMA_IRQHandler+0xe18>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d045      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a3e      	ldr	r2, [pc, #248]	; (8008fe8 <HAL_DMA_IRQHandler+0xe1c>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d040      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <HAL_DMA_IRQHandler+0xe20>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d03b      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3b      	ldr	r2, [pc, #236]	; (8008ff0 <HAL_DMA_IRQHandler+0xe24>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d036      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a39      	ldr	r2, [pc, #228]	; (8008ff4 <HAL_DMA_IRQHandler+0xe28>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d031      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a38      	ldr	r2, [pc, #224]	; (8008ff8 <HAL_DMA_IRQHandler+0xe2c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d02c      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a36      	ldr	r2, [pc, #216]	; (8008ffc <HAL_DMA_IRQHandler+0xe30>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d027      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a35      	ldr	r2, [pc, #212]	; (8009000 <HAL_DMA_IRQHandler+0xe34>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d022      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a33      	ldr	r2, [pc, #204]	; (8009004 <HAL_DMA_IRQHandler+0xe38>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d01d      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a32      	ldr	r2, [pc, #200]	; (8009008 <HAL_DMA_IRQHandler+0xe3c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d018      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a30      	ldr	r2, [pc, #192]	; (800900c <HAL_DMA_IRQHandler+0xe40>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d013      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a2f      	ldr	r2, [pc, #188]	; (8009010 <HAL_DMA_IRQHandler+0xe44>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d00e      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2d      	ldr	r2, [pc, #180]	; (8009014 <HAL_DMA_IRQHandler+0xe48>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d009      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2c      	ldr	r2, [pc, #176]	; (8009018 <HAL_DMA_IRQHandler+0xe4c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d004      	beq.n	8008f76 <HAL_DMA_IRQHandler+0xdaa>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a2a      	ldr	r2, [pc, #168]	; (800901c <HAL_DMA_IRQHandler+0xe50>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d108      	bne.n	8008f88 <HAL_DMA_IRQHandler+0xdbc>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 021c 	bic.w	r2, r2, #28
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	e007      	b.n	8008f98 <HAL_DMA_IRQHandler+0xdcc>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 020e 	bic.w	r2, r2, #14
 8008f96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f9c:	f003 031f 	and.w	r3, r3, #31
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	409a      	lsls	r2, r3
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	e004      	b.n	8008fda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008fd0:	bf00      	nop
 8008fd2:	e002      	b.n	8008fda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fd4:	bf00      	nop
 8008fd6:	e000      	b.n	8008fda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008fda:	3728      	adds	r7, #40	; 0x28
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40020010 	.word	0x40020010
 8008fe4:	40020028 	.word	0x40020028
 8008fe8:	40020040 	.word	0x40020040
 8008fec:	40020058 	.word	0x40020058
 8008ff0:	40020070 	.word	0x40020070
 8008ff4:	40020088 	.word	0x40020088
 8008ff8:	400200a0 	.word	0x400200a0
 8008ffc:	400200b8 	.word	0x400200b8
 8009000:	40020410 	.word	0x40020410
 8009004:	40020428 	.word	0x40020428
 8009008:	40020440 	.word	0x40020440
 800900c:	40020458 	.word	0x40020458
 8009010:	40020470 	.word	0x40020470
 8009014:	40020488 	.word	0x40020488
 8009018:	400204a0 	.word	0x400204a0
 800901c:	400204b8 	.word	0x400204b8

08009020 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a7f      	ldr	r2, [pc, #508]	; (800923c <DMA_SetConfig+0x21c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d072      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a7d      	ldr	r2, [pc, #500]	; (8009240 <DMA_SetConfig+0x220>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d06d      	beq.n	800912a <DMA_SetConfig+0x10a>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a7c      	ldr	r2, [pc, #496]	; (8009244 <DMA_SetConfig+0x224>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d068      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a7a      	ldr	r2, [pc, #488]	; (8009248 <DMA_SetConfig+0x228>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d063      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a79      	ldr	r2, [pc, #484]	; (800924c <DMA_SetConfig+0x22c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d05e      	beq.n	800912a <DMA_SetConfig+0x10a>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a77      	ldr	r2, [pc, #476]	; (8009250 <DMA_SetConfig+0x230>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d059      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a76      	ldr	r2, [pc, #472]	; (8009254 <DMA_SetConfig+0x234>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d054      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a74      	ldr	r2, [pc, #464]	; (8009258 <DMA_SetConfig+0x238>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d04f      	beq.n	800912a <DMA_SetConfig+0x10a>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a73      	ldr	r2, [pc, #460]	; (800925c <DMA_SetConfig+0x23c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d04a      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a71      	ldr	r2, [pc, #452]	; (8009260 <DMA_SetConfig+0x240>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d045      	beq.n	800912a <DMA_SetConfig+0x10a>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a70      	ldr	r2, [pc, #448]	; (8009264 <DMA_SetConfig+0x244>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d040      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a6e      	ldr	r2, [pc, #440]	; (8009268 <DMA_SetConfig+0x248>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d03b      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a6d      	ldr	r2, [pc, #436]	; (800926c <DMA_SetConfig+0x24c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d036      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a6b      	ldr	r2, [pc, #428]	; (8009270 <DMA_SetConfig+0x250>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d031      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a6a      	ldr	r2, [pc, #424]	; (8009274 <DMA_SetConfig+0x254>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d02c      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a68      	ldr	r2, [pc, #416]	; (8009278 <DMA_SetConfig+0x258>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d027      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a67      	ldr	r2, [pc, #412]	; (800927c <DMA_SetConfig+0x25c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d022      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a65      	ldr	r2, [pc, #404]	; (8009280 <DMA_SetConfig+0x260>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d01d      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a64      	ldr	r2, [pc, #400]	; (8009284 <DMA_SetConfig+0x264>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d018      	beq.n	800912a <DMA_SetConfig+0x10a>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a62      	ldr	r2, [pc, #392]	; (8009288 <DMA_SetConfig+0x268>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d013      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a61      	ldr	r2, [pc, #388]	; (800928c <DMA_SetConfig+0x26c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00e      	beq.n	800912a <DMA_SetConfig+0x10a>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a5f      	ldr	r2, [pc, #380]	; (8009290 <DMA_SetConfig+0x270>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d009      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a5e      	ldr	r2, [pc, #376]	; (8009294 <DMA_SetConfig+0x274>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d004      	beq.n	800912a <DMA_SetConfig+0x10a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a5c      	ldr	r2, [pc, #368]	; (8009298 <DMA_SetConfig+0x278>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d101      	bne.n	800912e <DMA_SetConfig+0x10e>
 800912a:	2301      	movs	r3, #1
 800912c:	e000      	b.n	8009130 <DMA_SetConfig+0x110>
 800912e:	2300      	movs	r3, #0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00d      	beq.n	8009150 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800913c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800914e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a39      	ldr	r2, [pc, #228]	; (800923c <DMA_SetConfig+0x21c>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d04a      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a38      	ldr	r2, [pc, #224]	; (8009240 <DMA_SetConfig+0x220>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d045      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a36      	ldr	r2, [pc, #216]	; (8009244 <DMA_SetConfig+0x224>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d040      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a35      	ldr	r2, [pc, #212]	; (8009248 <DMA_SetConfig+0x228>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d03b      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a33      	ldr	r2, [pc, #204]	; (800924c <DMA_SetConfig+0x22c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d036      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a32      	ldr	r2, [pc, #200]	; (8009250 <DMA_SetConfig+0x230>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d031      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a30      	ldr	r2, [pc, #192]	; (8009254 <DMA_SetConfig+0x234>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d02c      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a2f      	ldr	r2, [pc, #188]	; (8009258 <DMA_SetConfig+0x238>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d027      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a2d      	ldr	r2, [pc, #180]	; (800925c <DMA_SetConfig+0x23c>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d022      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a2c      	ldr	r2, [pc, #176]	; (8009260 <DMA_SetConfig+0x240>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d01d      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a2a      	ldr	r2, [pc, #168]	; (8009264 <DMA_SetConfig+0x244>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d018      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a29      	ldr	r2, [pc, #164]	; (8009268 <DMA_SetConfig+0x248>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a27      	ldr	r2, [pc, #156]	; (800926c <DMA_SetConfig+0x24c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00e      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a26      	ldr	r2, [pc, #152]	; (8009270 <DMA_SetConfig+0x250>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d009      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a24      	ldr	r2, [pc, #144]	; (8009274 <DMA_SetConfig+0x254>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <DMA_SetConfig+0x1d0>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a23      	ldr	r2, [pc, #140]	; (8009278 <DMA_SetConfig+0x258>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d101      	bne.n	80091f4 <DMA_SetConfig+0x1d4>
 80091f0:	2301      	movs	r3, #1
 80091f2:	e000      	b.n	80091f6 <DMA_SetConfig+0x1d6>
 80091f4:	2300      	movs	r3, #0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d059      	beq.n	80092ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fe:	f003 031f 	and.w	r3, r3, #31
 8009202:	223f      	movs	r2, #63	; 0x3f
 8009204:	409a      	lsls	r2, r3
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009218:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2b40      	cmp	r3, #64	; 0x40
 8009228:	d138      	bne.n	800929c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800923a:	e086      	b.n	800934a <DMA_SetConfig+0x32a>
 800923c:	40020010 	.word	0x40020010
 8009240:	40020028 	.word	0x40020028
 8009244:	40020040 	.word	0x40020040
 8009248:	40020058 	.word	0x40020058
 800924c:	40020070 	.word	0x40020070
 8009250:	40020088 	.word	0x40020088
 8009254:	400200a0 	.word	0x400200a0
 8009258:	400200b8 	.word	0x400200b8
 800925c:	40020410 	.word	0x40020410
 8009260:	40020428 	.word	0x40020428
 8009264:	40020440 	.word	0x40020440
 8009268:	40020458 	.word	0x40020458
 800926c:	40020470 	.word	0x40020470
 8009270:	40020488 	.word	0x40020488
 8009274:	400204a0 	.word	0x400204a0
 8009278:	400204b8 	.word	0x400204b8
 800927c:	58025408 	.word	0x58025408
 8009280:	5802541c 	.word	0x5802541c
 8009284:	58025430 	.word	0x58025430
 8009288:	58025444 	.word	0x58025444
 800928c:	58025458 	.word	0x58025458
 8009290:	5802546c 	.word	0x5802546c
 8009294:	58025480 	.word	0x58025480
 8009298:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	60da      	str	r2, [r3, #12]
}
 80092ac:	e04d      	b.n	800934a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a29      	ldr	r2, [pc, #164]	; (8009358 <DMA_SetConfig+0x338>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d022      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a27      	ldr	r2, [pc, #156]	; (800935c <DMA_SetConfig+0x33c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01d      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a26      	ldr	r2, [pc, #152]	; (8009360 <DMA_SetConfig+0x340>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d018      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a24      	ldr	r2, [pc, #144]	; (8009364 <DMA_SetConfig+0x344>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a23      	ldr	r2, [pc, #140]	; (8009368 <DMA_SetConfig+0x348>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00e      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a21      	ldr	r2, [pc, #132]	; (800936c <DMA_SetConfig+0x34c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d009      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a20      	ldr	r2, [pc, #128]	; (8009370 <DMA_SetConfig+0x350>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d004      	beq.n	80092fe <DMA_SetConfig+0x2de>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <DMA_SetConfig+0x354>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d101      	bne.n	8009302 <DMA_SetConfig+0x2e2>
 80092fe:	2301      	movs	r3, #1
 8009300:	e000      	b.n	8009304 <DMA_SetConfig+0x2e4>
 8009302:	2300      	movs	r3, #0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d020      	beq.n	800934a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	2201      	movs	r2, #1
 8009312:	409a      	lsls	r2, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d108      	bne.n	800933a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	60da      	str	r2, [r3, #12]
}
 8009338:	e007      	b.n	800934a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	60da      	str	r2, [r3, #12]
}
 800934a:	bf00      	nop
 800934c:	371c      	adds	r7, #28
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	58025408 	.word	0x58025408
 800935c:	5802541c 	.word	0x5802541c
 8009360:	58025430 	.word	0x58025430
 8009364:	58025444 	.word	0x58025444
 8009368:	58025458 	.word	0x58025458
 800936c:	5802546c 	.word	0x5802546c
 8009370:	58025480 	.word	0x58025480
 8009374:	58025494 	.word	0x58025494

08009378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a42      	ldr	r2, [pc, #264]	; (8009490 <DMA_CalcBaseAndBitshift+0x118>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d04a      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a41      	ldr	r2, [pc, #260]	; (8009494 <DMA_CalcBaseAndBitshift+0x11c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d045      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a3f      	ldr	r2, [pc, #252]	; (8009498 <DMA_CalcBaseAndBitshift+0x120>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d040      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a3e      	ldr	r2, [pc, #248]	; (800949c <DMA_CalcBaseAndBitshift+0x124>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d03b      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a3c      	ldr	r2, [pc, #240]	; (80094a0 <DMA_CalcBaseAndBitshift+0x128>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d036      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a3b      	ldr	r2, [pc, #236]	; (80094a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d031      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a39      	ldr	r2, [pc, #228]	; (80094a8 <DMA_CalcBaseAndBitshift+0x130>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d02c      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a38      	ldr	r2, [pc, #224]	; (80094ac <DMA_CalcBaseAndBitshift+0x134>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d027      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a36      	ldr	r2, [pc, #216]	; (80094b0 <DMA_CalcBaseAndBitshift+0x138>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d022      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a35      	ldr	r2, [pc, #212]	; (80094b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d01d      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a33      	ldr	r2, [pc, #204]	; (80094b8 <DMA_CalcBaseAndBitshift+0x140>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d018      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a32      	ldr	r2, [pc, #200]	; (80094bc <DMA_CalcBaseAndBitshift+0x144>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d013      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a30      	ldr	r2, [pc, #192]	; (80094c0 <DMA_CalcBaseAndBitshift+0x148>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00e      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a2f      	ldr	r2, [pc, #188]	; (80094c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d009      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a2d      	ldr	r2, [pc, #180]	; (80094c8 <DMA_CalcBaseAndBitshift+0x150>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d004      	beq.n	8009420 <DMA_CalcBaseAndBitshift+0xa8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a2c      	ldr	r2, [pc, #176]	; (80094cc <DMA_CalcBaseAndBitshift+0x154>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d101      	bne.n	8009424 <DMA_CalcBaseAndBitshift+0xac>
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <DMA_CalcBaseAndBitshift+0xae>
 8009424:	2300      	movs	r3, #0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d024      	beq.n	8009474 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	b2db      	uxtb	r3, r3
 8009430:	3b10      	subs	r3, #16
 8009432:	4a27      	ldr	r2, [pc, #156]	; (80094d0 <DMA_CalcBaseAndBitshift+0x158>)
 8009434:	fba2 2303 	umull	r2, r3, r2, r3
 8009438:	091b      	lsrs	r3, r3, #4
 800943a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f003 0307 	and.w	r3, r3, #7
 8009442:	4a24      	ldr	r2, [pc, #144]	; (80094d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009444:	5cd3      	ldrb	r3, [r2, r3]
 8009446:	461a      	mov	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b03      	cmp	r3, #3
 8009450:	d908      	bls.n	8009464 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <DMA_CalcBaseAndBitshift+0x160>)
 800945a:	4013      	ands	r3, r2
 800945c:	1d1a      	adds	r2, r3, #4
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	659a      	str	r2, [r3, #88]	; 0x58
 8009462:	e00d      	b.n	8009480 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	4b1b      	ldr	r3, [pc, #108]	; (80094d8 <DMA_CalcBaseAndBitshift+0x160>)
 800946c:	4013      	ands	r3, r2
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	6593      	str	r3, [r2, #88]	; 0x58
 8009472:	e005      	b.n	8009480 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	40020010 	.word	0x40020010
 8009494:	40020028 	.word	0x40020028
 8009498:	40020040 	.word	0x40020040
 800949c:	40020058 	.word	0x40020058
 80094a0:	40020070 	.word	0x40020070
 80094a4:	40020088 	.word	0x40020088
 80094a8:	400200a0 	.word	0x400200a0
 80094ac:	400200b8 	.word	0x400200b8
 80094b0:	40020410 	.word	0x40020410
 80094b4:	40020428 	.word	0x40020428
 80094b8:	40020440 	.word	0x40020440
 80094bc:	40020458 	.word	0x40020458
 80094c0:	40020470 	.word	0x40020470
 80094c4:	40020488 	.word	0x40020488
 80094c8:	400204a0 	.word	0x400204a0
 80094cc:	400204b8 	.word	0x400204b8
 80094d0:	aaaaaaab 	.word	0xaaaaaaab
 80094d4:	08026c94 	.word	0x08026c94
 80094d8:	fffffc00 	.word	0xfffffc00

080094dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d120      	bne.n	8009532 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d858      	bhi.n	80095aa <DMA_CheckFifoParam+0xce>
 80094f8:	a201      	add	r2, pc, #4	; (adr r2, 8009500 <DMA_CheckFifoParam+0x24>)
 80094fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094fe:	bf00      	nop
 8009500:	08009511 	.word	0x08009511
 8009504:	08009523 	.word	0x08009523
 8009508:	08009511 	.word	0x08009511
 800950c:	080095ab 	.word	0x080095ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009518:	2b00      	cmp	r3, #0
 800951a:	d048      	beq.n	80095ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009520:	e045      	b.n	80095ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800952a:	d142      	bne.n	80095b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009530:	e03f      	b.n	80095b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800953a:	d123      	bne.n	8009584 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009540:	2b03      	cmp	r3, #3
 8009542:	d838      	bhi.n	80095b6 <DMA_CheckFifoParam+0xda>
 8009544:	a201      	add	r2, pc, #4	; (adr r2, 800954c <DMA_CheckFifoParam+0x70>)
 8009546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954a:	bf00      	nop
 800954c:	0800955d 	.word	0x0800955d
 8009550:	08009563 	.word	0x08009563
 8009554:	0800955d 	.word	0x0800955d
 8009558:	08009575 	.word	0x08009575
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	73fb      	strb	r3, [r7, #15]
        break;
 8009560:	e030      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d025      	beq.n	80095ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009572:	e022      	b.n	80095ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800957c:	d11f      	bne.n	80095be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009582:	e01c      	b.n	80095be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	2b02      	cmp	r3, #2
 800958a:	d902      	bls.n	8009592 <DMA_CheckFifoParam+0xb6>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d003      	beq.n	8009598 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009590:	e018      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	73fb      	strb	r3, [r7, #15]
        break;
 8009596:	e015      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00e      	beq.n	80095c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	73fb      	strb	r3, [r7, #15]
    break;
 80095a8:	e00b      	b.n	80095c2 <DMA_CheckFifoParam+0xe6>
        break;
 80095aa:	bf00      	nop
 80095ac:	e00a      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        break;
 80095ae:	bf00      	nop
 80095b0:	e008      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        break;
 80095b2:	bf00      	nop
 80095b4:	e006      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        break;
 80095b6:	bf00      	nop
 80095b8:	e004      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        break;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
        break;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <DMA_CheckFifoParam+0xe8>
    break;
 80095c2:	bf00      	nop
    }
  }

  return status;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop

080095d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a38      	ldr	r2, [pc, #224]	; (80096c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d022      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a36      	ldr	r2, [pc, #216]	; (80096cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d01d      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a35      	ldr	r2, [pc, #212]	; (80096d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d018      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a33      	ldr	r2, [pc, #204]	; (80096d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d013      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a32      	ldr	r2, [pc, #200]	; (80096d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d00e      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a30      	ldr	r2, [pc, #192]	; (80096dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d009      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a2f      	ldr	r2, [pc, #188]	; (80096e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a2d      	ldr	r2, [pc, #180]	; (80096e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d101      	bne.n	8009636 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d01a      	beq.n	8009672 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	3b08      	subs	r3, #8
 8009644:	4a28      	ldr	r2, [pc, #160]	; (80096e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	091b      	lsrs	r3, r3, #4
 800964c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4b26      	ldr	r3, [pc, #152]	; (80096ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a24      	ldr	r2, [pc, #144]	; (80096f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009660:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f003 031f 	and.w	r3, r3, #31
 8009668:	2201      	movs	r2, #1
 800966a:	409a      	lsls	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009670:	e024      	b.n	80096bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	3b10      	subs	r3, #16
 800967a:	4a1e      	ldr	r2, [pc, #120]	; (80096f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800967c:	fba2 2303 	umull	r2, r3, r2, r3
 8009680:	091b      	lsrs	r3, r3, #4
 8009682:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	4a1c      	ldr	r2, [pc, #112]	; (80096f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d806      	bhi.n	800969a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4a1b      	ldr	r2, [pc, #108]	; (80096fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d902      	bls.n	800969a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3308      	adds	r3, #8
 8009698:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4b18      	ldr	r3, [pc, #96]	; (8009700 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a16      	ldr	r2, [pc, #88]	; (8009704 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80096ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	2201      	movs	r2, #1
 80096b6:	409a      	lsls	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	58025408 	.word	0x58025408
 80096cc:	5802541c 	.word	0x5802541c
 80096d0:	58025430 	.word	0x58025430
 80096d4:	58025444 	.word	0x58025444
 80096d8:	58025458 	.word	0x58025458
 80096dc:	5802546c 	.word	0x5802546c
 80096e0:	58025480 	.word	0x58025480
 80096e4:	58025494 	.word	0x58025494
 80096e8:	cccccccd 	.word	0xcccccccd
 80096ec:	16009600 	.word	0x16009600
 80096f0:	58025880 	.word	0x58025880
 80096f4:	aaaaaaab 	.word	0xaaaaaaab
 80096f8:	400204b8 	.word	0x400204b8
 80096fc:	4002040f 	.word	0x4002040f
 8009700:	10008200 	.word	0x10008200
 8009704:	40020880 	.word	0x40020880

08009708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d04a      	beq.n	80097b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2b08      	cmp	r3, #8
 8009722:	d847      	bhi.n	80097b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a25      	ldr	r2, [pc, #148]	; (80097c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d022      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a24      	ldr	r2, [pc, #144]	; (80097c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d01d      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a22      	ldr	r2, [pc, #136]	; (80097c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d018      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a21      	ldr	r2, [pc, #132]	; (80097cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d013      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d00e      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1e      	ldr	r2, [pc, #120]	; (80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d009      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1c      	ldr	r2, [pc, #112]	; (80097d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d004      	beq.n	8009774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1b      	ldr	r2, [pc, #108]	; (80097dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d101      	bne.n	8009778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009778:	2300      	movs	r3, #0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009782:	4413      	add	r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	461a      	mov	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a15      	ldr	r2, [pc, #84]	; (80097e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009790:	671a      	str	r2, [r3, #112]	; 0x70
 8009792:	e009      	b.n	80097a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009798:	4413      	add	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	461a      	mov	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a11      	ldr	r2, [pc, #68]	; (80097ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80097a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	2201      	movs	r2, #1
 80097ae:	409a      	lsls	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80097b4:	bf00      	nop
 80097b6:	3714      	adds	r7, #20
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	58025408 	.word	0x58025408
 80097c4:	5802541c 	.word	0x5802541c
 80097c8:	58025430 	.word	0x58025430
 80097cc:	58025444 	.word	0x58025444
 80097d0:	58025458 	.word	0x58025458
 80097d4:	5802546c 	.word	0x5802546c
 80097d8:	58025480 	.word	0x58025480
 80097dc:	58025494 	.word	0x58025494
 80097e0:	1600963f 	.word	0x1600963f
 80097e4:	58025940 	.word	0x58025940
 80097e8:	1000823f 	.word	0x1000823f
 80097ec:	40020940 	.word	0x40020940

080097f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e0cf      	b.n	80099a2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009808:	2b00      	cmp	r3, #0
 800980a:	d106      	bne.n	800981a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2223      	movs	r2, #35	; 0x23
 8009810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7f7 f9a7 	bl	8000b68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800981a:	4b64      	ldr	r3, [pc, #400]	; (80099ac <HAL_ETH_Init+0x1bc>)
 800981c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009820:	4a62      	ldr	r2, [pc, #392]	; (80099ac <HAL_ETH_Init+0x1bc>)
 8009822:	f043 0302 	orr.w	r3, r3, #2
 8009826:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800982a:	4b60      	ldr	r3, [pc, #384]	; (80099ac <HAL_ETH_Init+0x1bc>)
 800982c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	60bb      	str	r3, [r7, #8]
 8009836:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	7a1b      	ldrb	r3, [r3, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009840:	2000      	movs	r0, #0
 8009842:	f7fb fcf1 	bl	8005228 <HAL_SYSCFG_ETHInterfaceSelect>
 8009846:	e003      	b.n	8009850 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009848:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800984c:	f7fb fcec 	bl	8005228 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009850:	4b57      	ldr	r3, [pc, #348]	; (80099b0 <HAL_ETH_Init+0x1c0>)
 8009852:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800986a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800986c:	f7fb fcd0 	bl	8005210 <HAL_GetTick>
 8009870:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009872:	e011      	b.n	8009898 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009874:	f7fb fccc 	bl	8005210 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009882:	d909      	bls.n	8009898 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2204      	movs	r2, #4
 8009888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	22e0      	movs	r2, #224	; 0xe0
 8009890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e084      	b.n	80099a2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1e4      	bne.n	8009874 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f886 	bl	80099bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80098b0:	f002 fcd2 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 80098b4:	4603      	mov	r3, r0
 80098b6:	4a3f      	ldr	r2, [pc, #252]	; (80099b4 <HAL_ETH_Init+0x1c4>)
 80098b8:	fba2 2303 	umull	r2, r3, r2, r3
 80098bc:	0c9a      	lsrs	r2, r3, #18
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3a01      	subs	r2, #1
 80098c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 fa71 	bl	8009db0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80098da:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6812      	ldr	r2, [r2, #0]
 80098e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	f003 0303 	and.w	r3, r3, #3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d009      	beq.n	800990e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	22e0      	movs	r2, #224	; 0xe0
 8009906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e049      	b.n	80099a2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009916:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800991a:	4b27      	ldr	r3, [pc, #156]	; (80099b8 <HAL_ETH_Init+0x1c8>)
 800991c:	4013      	ands	r3, r2
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	6952      	ldr	r2, [r2, #20]
 8009922:	0051      	lsls	r1, r2, #1
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	430b      	orrs	r3, r1
 800992a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800992e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fad9 	bl	8009eea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fb1f 	bl	8009f7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	3305      	adds	r3, #5
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	021a      	lsls	r2, r3, #8
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	3304      	adds	r3, #4
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	4619      	mov	r1, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	3303      	adds	r3, #3
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	061a      	lsls	r2, r3, #24
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	3302      	adds	r3, #2
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	3301      	adds	r3, #1
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800997c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800998a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800998c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2210      	movs	r2, #16
 800999c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
 80099b0:	58000400 	.word	0x58000400
 80099b4:	431bde83 	.word	0x431bde83
 80099b8:	ffff8001 	.word	0xffff8001

080099bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80099d6:	f002 fc3f 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 80099da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	4a1e      	ldr	r2, [pc, #120]	; (8009a58 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d908      	bls.n	80099f6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	4a1d      	ldr	r2, [pc, #116]	; (8009a5c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d804      	bhi.n	80099f6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e027      	b.n	8009a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d908      	bls.n	8009a10 <HAL_ETH_SetMDIOClockRange+0x54>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	4a17      	ldr	r2, [pc, #92]	; (8009a60 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d204      	bcs.n	8009a10 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	e01a      	b.n	8009a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4a13      	ldr	r2, [pc, #76]	; (8009a60 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d303      	bcc.n	8009a20 <HAL_ETH_SetMDIOClockRange+0x64>
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	4a12      	ldr	r2, [pc, #72]	; (8009a64 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d911      	bls.n	8009a44 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	4a10      	ldr	r2, [pc, #64]	; (8009a64 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d908      	bls.n	8009a3a <HAL_ETH_SetMDIOClockRange+0x7e>
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4a0f      	ldr	r2, [pc, #60]	; (8009a68 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d804      	bhi.n	8009a3a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	e005      	b.n	8009a46 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a40:	60fb      	str	r3, [r7, #12]
 8009a42:	e000      	b.n	8009a46 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009a44:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	01312cff 	.word	0x01312cff
 8009a5c:	02160ebf 	.word	0x02160ebf
 8009a60:	03938700 	.word	0x03938700
 8009a64:	05f5e0ff 	.word	0x05f5e0ff
 8009a68:	08f0d17f 	.word	0x08f0d17f

08009a6c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	791b      	ldrb	r3, [r3, #4]
 8009a84:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009a86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	7b1b      	ldrb	r3, [r3, #12]
 8009a8c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	7b5b      	ldrb	r3, [r3, #13]
 8009a94:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009a96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	7b9b      	ldrb	r3, [r3, #14]
 8009a9c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	7bdb      	ldrb	r3, [r3, #15]
 8009aa4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009aa6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	7c12      	ldrb	r2, [r2, #16]
 8009aac:	2a00      	cmp	r2, #0
 8009aae:	d102      	bne.n	8009ab6 <ETH_SetMACConfig+0x4a>
 8009ab0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ab4:	e000      	b.n	8009ab8 <ETH_SetMACConfig+0x4c>
 8009ab6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009ab8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	7c52      	ldrb	r2, [r2, #17]
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	d102      	bne.n	8009ac8 <ETH_SetMACConfig+0x5c>
 8009ac2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009ac6:	e000      	b.n	8009aca <ETH_SetMACConfig+0x5e>
 8009ac8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	7c9b      	ldrb	r3, [r3, #18]
 8009ad0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009ad2:	431a      	orrs	r2, r3
               macconf->Speed |
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009ad8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009ade:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	7f1b      	ldrb	r3, [r3, #28]
 8009ae4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	7f5b      	ldrb	r3, [r3, #29]
 8009aec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009aee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	7f92      	ldrb	r2, [r2, #30]
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	d102      	bne.n	8009afe <ETH_SetMACConfig+0x92>
 8009af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009afc:	e000      	b.n	8009b00 <ETH_SetMACConfig+0x94>
 8009afe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009b00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	7fdb      	ldrb	r3, [r3, #31]
 8009b06:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009b08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d102      	bne.n	8009b1a <ETH_SetMACConfig+0xae>
 8009b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b18:	e000      	b.n	8009b1c <ETH_SetMACConfig+0xb0>
 8009b1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009b1c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b2a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009b2c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009b32:	4313      	orrs	r3, r2
 8009b34:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b56      	ldr	r3, [pc, #344]	; (8009c98 <ETH_SetMACConfig+0x22c>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	6812      	ldr	r2, [r2, #0]
 8009b44:	68f9      	ldr	r1, [r7, #12]
 8009b46:	430b      	orrs	r3, r1
 8009b48:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009b56:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009b58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b60:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b6a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009b6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	d102      	bne.n	8009b7e <ETH_SetMACConfig+0x112>
 8009b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009b7c:	e000      	b.n	8009b80 <ETH_SetMACConfig+0x114>
 8009b7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009b80:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	4b42      	ldr	r3, [pc, #264]	; (8009c9c <ETH_SetMACConfig+0x230>)
 8009b92:	4013      	ands	r3, r2
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	6812      	ldr	r2, [r2, #0]
 8009b98:	68f9      	ldr	r1, [r7, #12]
 8009b9a:	430b      	orrs	r3, r1
 8009b9c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ba4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009baa:	4313      	orrs	r3, r2
 8009bac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <ETH_SetMACConfig+0x234>)
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	430b      	orrs	r3, r1
 8009bc0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8009bc8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009bce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d101      	bne.n	8009bde <ETH_SetMACConfig+0x172>
 8009bda:	2280      	movs	r2, #128	; 0x80
 8009bdc:	e000      	b.n	8009be0 <ETH_SetMACConfig+0x174>
 8009bde:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009be0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009bf2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	430b      	orrs	r3, r1
 8009c00:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009c08:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009c10:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009c12:	4313      	orrs	r3, r2
 8009c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1e:	f023 0103 	bic.w	r1, r3, #3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	430a      	orrs	r2, r1
 8009c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8009c36:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	430a      	orrs	r2, r1
 8009c44:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8009c52:	2a00      	cmp	r2, #0
 8009c54:	d101      	bne.n	8009c5a <ETH_SetMACConfig+0x1ee>
 8009c56:	2240      	movs	r2, #64	; 0x40
 8009c58:	e000      	b.n	8009c5c <ETH_SetMACConfig+0x1f0>
 8009c5a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009c5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8009c64:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009c66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8009c6e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009c70:	4313      	orrs	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8009c7c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8009c8c:	bf00      	nop
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	00048083 	.word	0x00048083
 8009c9c:	c0f88000 	.word	0xc0f88000
 8009ca0:	fffffef0 	.word	0xfffffef0

08009ca4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	4b38      	ldr	r3, [pc, #224]	; (8009d9c <ETH_SetDMAConfig+0xf8>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	6811      	ldr	r1, [r2, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	791b      	ldrb	r3, [r3, #4]
 8009cd0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009cd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	4b2c      	ldr	r3, [pc, #176]	; (8009da0 <ETH_SetDMAConfig+0xfc>)
 8009cee:	4013      	ands	r3, r2
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	6812      	ldr	r2, [r2, #0]
 8009cf4:	68f9      	ldr	r1, [r7, #12]
 8009cf6:	430b      	orrs	r3, r1
 8009cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cfc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	7b5b      	ldrb	r3, [r3, #13]
 8009d02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009d18:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <ETH_SetDMAConfig+0x100>)
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	6812      	ldr	r2, [r2, #0]
 8009d20:	68f9      	ldr	r1, [r7, #12]
 8009d22:	430b      	orrs	r3, r1
 8009d24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	7d1b      	ldrb	r3, [r3, #20]
 8009d34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	7f5b      	ldrb	r3, [r3, #29]
 8009d3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <ETH_SetDMAConfig+0x104>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	6812      	ldr	r2, [r2, #0]
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	7f1b      	ldrb	r3, [r3, #28]
 8009d66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d78:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009d7c:	4b0b      	ldr	r3, [pc, #44]	; (8009dac <ETH_SetDMAConfig+0x108>)
 8009d7e:	4013      	ands	r3, r2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6812      	ldr	r2, [r2, #0]
 8009d84:	68f9      	ldr	r1, [r7, #12]
 8009d86:	430b      	orrs	r3, r1
 8009d88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8009d90:	bf00      	nop
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	ffff87fd 	.word	0xffff87fd
 8009da0:	ffff2ffe 	.word	0xffff2ffe
 8009da4:	fffec000 	.word	0xfffec000
 8009da8:	ffc0efef 	.word	0xffc0efef
 8009dac:	7fc0ffff 	.word	0x7fc0ffff

08009db0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b0a4      	sub	sp, #144	; 0x90
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009df0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009df2:	2300      	movs	r3, #0
 8009df4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009e02:	2300      	movs	r3, #0
 8009e04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009e08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8009e0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009e14:	2300      	movs	r3, #0
 8009e16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009e32:	2300      	movs	r3, #0
 8009e34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009e48:	2320      	movs	r3, #32
 8009e4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009e5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009e60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009e94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fde6 	bl	8009a6c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009eba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ebe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009ec8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009ed0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8009ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	4619      	mov	r1, r3
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f7ff fee1 	bl	8009ca4 <ETH_SetDMAConfig>
}
 8009ee2:	bf00      	nop
 8009ee4:	3790      	adds	r7, #144	; 0x90
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	e01d      	b.n	8009f34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68d9      	ldr	r1, [r3, #12]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4613      	mov	r3, r2
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4413      	add	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	440b      	add	r3, r1
 8009f08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2200      	movs	r2, #0
 8009f14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009f22:	68b9      	ldr	r1, [r7, #8]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	3206      	adds	r2, #6
 8009f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3301      	adds	r3, #1
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d9de      	bls.n	8009ef8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f48:	461a      	mov	r2, r3
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	68da      	ldr	r2, [r3, #12]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68da      	ldr	r2, [r3, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8009f70:	bf00      	nop
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	e023      	b.n	8009fd2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6919      	ldr	r1, [r3, #16]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	4613      	mov	r3, r2
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	4413      	add	r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	440b      	add	r3, r1
 8009f9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2200      	movs	r2, #0
 8009fac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009fc0:	68b9      	ldr	r1, [r7, #8]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	3212      	adds	r2, #18
 8009fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2b03      	cmp	r3, #3
 8009fd6:	d9d8      	bls.n	8009f8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ffe:	461a      	mov	r2, r3
 800a000:	2303      	movs	r3, #3
 800a002:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691a      	ldr	r2, [r3, #16]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a012:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a026:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
	...

0800a038 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b098      	sub	sp, #96	; 0x60
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800a040:	4a84      	ldr	r2, [pc, #528]	; (800a254 <HAL_FDCAN_Init+0x21c>)
 800a042:	f107 030c 	add.w	r3, r7, #12
 800a046:	4611      	mov	r1, r2
 800a048:	224c      	movs	r2, #76	; 0x4c
 800a04a:	4618      	mov	r0, r3
 800a04c:	f01c f944 	bl	80262d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800a056:	2301      	movs	r3, #1
 800a058:	e1c6      	b.n	800a3e8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a7e      	ldr	r2, [pc, #504]	; (800a258 <HAL_FDCAN_Init+0x220>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d106      	bne.n	800a072 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a06c:	461a      	mov	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7f6 ff04 	bl	8000e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699a      	ldr	r2, [r3, #24]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 0210 	bic.w	r2, r2, #16
 800a09a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a09c:	f7fb f8b8 	bl	8005210 <HAL_GetTick>
 800a0a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a0a2:	e014      	b.n	800a0ce <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a0a4:	f7fb f8b4 	bl	8005210 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	d90d      	bls.n	800a0ce <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0b8:	f043 0201 	orr.w	r2, r3, #1
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e18c      	b.n	800a3e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	f003 0308 	and.w	r3, r3, #8
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d0e3      	beq.n	800a0a4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	699a      	ldr	r2, [r3, #24]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a0ec:	f7fb f890 	bl	8005210 <HAL_GetTick>
 800a0f0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a0f2:	e014      	b.n	800a11e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800a0f4:	f7fb f88c 	bl	8005210 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b0a      	cmp	r3, #10
 800a100:	d90d      	bls.n	800a11e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a108:	f043 0201 	orr.w	r2, r3, #1
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2203      	movs	r2, #3
 800a116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	e164      	b.n	800a3e8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0e3      	beq.n	800a0f4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0202 	orr.w	r2, r2, #2
 800a13a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	7c1b      	ldrb	r3, [r3, #16]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d108      	bne.n	800a156 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699a      	ldr	r2, [r3, #24]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a152:	619a      	str	r2, [r3, #24]
 800a154:	e007      	b.n	800a166 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a164:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	7c5b      	ldrb	r3, [r3, #17]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d108      	bne.n	800a180 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	699a      	ldr	r2, [r3, #24]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a17c:	619a      	str	r2, [r3, #24]
 800a17e:	e007      	b.n	800a190 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699a      	ldr	r2, [r3, #24]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a18e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7c9b      	ldrb	r3, [r3, #18]
 800a194:	2b01      	cmp	r3, #1
 800a196:	d108      	bne.n	800a1aa <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a1a6:	619a      	str	r2, [r3, #24]
 800a1a8:	e007      	b.n	800a1ba <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a1b8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689a      	ldr	r2, [r3, #8]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	699a      	ldr	r2, [r3, #24]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800a1de:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691a      	ldr	r2, [r3, #16]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f022 0210 	bic.w	r2, r2, #16
 800a1ee:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d108      	bne.n	800a20a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f042 0204 	orr.w	r2, r2, #4
 800a206:	619a      	str	r2, [r3, #24]
 800a208:	e030      	b.n	800a26c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d02c      	beq.n	800a26c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	2b02      	cmp	r3, #2
 800a218:	d020      	beq.n	800a25c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	699a      	ldr	r2, [r3, #24]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a228:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0210 	orr.w	r2, r2, #16
 800a238:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d114      	bne.n	800a26c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	699a      	ldr	r2, [r3, #24]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f042 0220 	orr.w	r2, r2, #32
 800a250:	619a      	str	r2, [r3, #24]
 800a252:	e00b      	b.n	800a26c <HAL_FDCAN_Init+0x234>
 800a254:	080265d4 	.word	0x080265d4
 800a258:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0220 	orr.w	r2, r2, #32
 800a26a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	3b01      	subs	r3, #1
 800a272:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	3b01      	subs	r3, #1
 800a27a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a27c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800a284:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800a294:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800a296:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a0:	d115      	bne.n	800a2ce <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a2b0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800a2ba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800a2ca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800a2cc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d011      	beq.n	800a31e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800a302:	f023 0107 	bic.w	r1, r3, #7
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	3360      	adds	r3, #96	; 0x60
 800a30e:	443b      	add	r3, r7
 800a310:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a322:	2b00      	cmp	r3, #0
 800a324:	d011      	beq.n	800a34a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a32e:	f023 0107 	bic.w	r1, r3, #7
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	3360      	adds	r3, #96	; 0x60
 800a33a:	443b      	add	r3, r7
 800a33c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d012      	beq.n	800a378 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a35a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	3360      	adds	r3, #96	; 0x60
 800a366:	443b      	add	r3, r7
 800a368:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a36c:	011a      	lsls	r2, r3, #4
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	430a      	orrs	r2, r1
 800a374:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d012      	beq.n	800a3a6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a388:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	3360      	adds	r3, #96	; 0x60
 800a394:	443b      	add	r3, r7
 800a396:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800a39a:	021a      	lsls	r2, r3, #8
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a11      	ldr	r2, [pc, #68]	; (800a3f0 <HAL_FDCAN_Init+0x3b8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d107      	bne.n	800a3c0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	f022 0203 	bic.w	r2, r2, #3
 800a3be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f80b 	bl	800a3f4 <FDCAN_CalcultateRamBlockAddresses>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800a3e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3760      	adds	r7, #96	; 0x60
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	4000a000 	.word	0x4000a000

0800a3f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a400:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a40a:	4ba7      	ldr	r3, [pc, #668]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a40c:	4013      	ands	r3, r2
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	0091      	lsls	r1, r2, #2
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	430b      	orrs	r3, r1
 800a418:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a424:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42c:	041a      	lsls	r2, r3, #16
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	4413      	add	r3, r2
 800a440:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a44a:	4b97      	ldr	r3, [pc, #604]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	68ba      	ldr	r2, [r7, #8]
 800a450:	0091      	lsls	r1, r2, #2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6812      	ldr	r2, [r2, #0]
 800a456:	430b      	orrs	r3, r1
 800a458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46c:	041a      	lsls	r2, r3, #16
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	430a      	orrs	r2, r1
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a48c:	4b86      	ldr	r3, [pc, #536]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a48e:	4013      	ands	r3, r2
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	0091      	lsls	r1, r2, #2
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	6812      	ldr	r2, [r2, #0]
 800a498:	430b      	orrs	r3, r1
 800a49a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ae:	041a      	lsls	r2, r3, #16
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a4c2:	fb02 f303 	mul.w	r3, r2, r3
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a4d4:	4b74      	ldr	r3, [pc, #464]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4d6:	4013      	ands	r3, r2
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	0091      	lsls	r1, r2, #2
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	6812      	ldr	r2, [r2, #0]
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4f6:	041a      	lsls	r2, r3, #16
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	4413      	add	r3, r2
 800a512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a51c:	4b62      	ldr	r3, [pc, #392]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a51e:	4013      	ands	r3, r2
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	0091      	lsls	r1, r2, #2
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	6812      	ldr	r2, [r2, #0]
 800a528:	430b      	orrs	r3, r1
 800a52a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a536:	fb02 f303 	mul.w	r3, r2, r3
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	4413      	add	r3, r2
 800a53e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a548:	4b57      	ldr	r3, [pc, #348]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a54a:	4013      	ands	r3, r2
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	0091      	lsls	r1, r2, #2
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	6812      	ldr	r2, [r2, #0]
 800a554:	430b      	orrs	r3, r1
 800a556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a562:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56a:	041a      	lsls	r2, r3, #16
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	4413      	add	r3, r2
 800a580:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a58a:	4b47      	ldr	r3, [pc, #284]	; (800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a58c:	4013      	ands	r3, r2
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	0091      	lsls	r1, r2, #2
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	6812      	ldr	r2, [r2, #0]
 800a596:	430b      	orrs	r3, r1
 800a598:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5a4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ac:	041a      	lsls	r2, r3, #16
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	430a      	orrs	r2, r1
 800a5b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a5c0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c8:	061a      	lsls	r2, r3, #24
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d8:	4b34      	ldr	r3, [pc, #208]	; (800a6ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a5da:	4413      	add	r3, r2
 800a5dc:	009a      	lsls	r2, r3, #2
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	441a      	add	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	00db      	lsls	r3, r3, #3
 800a5fc:	441a      	add	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60a:	6879      	ldr	r1, [r7, #4]
 800a60c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	441a      	add	r2, r3
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800a626:	fb01 f303 	mul.w	r3, r1, r3
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	441a      	add	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a63a:	6879      	ldr	r1, [r7, #4]
 800a63c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800a63e:	fb01 f303 	mul.w	r3, r1, r3
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	441a      	add	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a656:	00db      	lsls	r3, r3, #3
 800a658:	441a      	add	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a66e:	fb01 f303 	mul.w	r3, r1, r3
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	441a      	add	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a68a:	fb01 f303 	mul.w	r3, r1, r3
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	441a      	add	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69e:	4a04      	ldr	r2, [pc, #16]	; (800a6b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d915      	bls.n	800a6d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a6a4:	e006      	b.n	800a6b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a6a6:	bf00      	nop
 800a6a8:	ffff0003 	.word	0xffff0003
 800a6ac:	10002b00 	.word	0x10002b00
 800a6b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ba:	f043 0220 	orr.w	r2, r3, #32
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e010      	b.n	800a6f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d4:	60fb      	str	r3, [r7, #12]
 800a6d6:	e005      	b.n	800a6e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d3f3      	bcc.n	800a6d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop

0800a700 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b084      	sub	sp, #16
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e033      	b.n	800a77a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d106      	bne.n	800a72c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f7f6 fc92 	bl	8001050 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f854 	bl	800a7e0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 f822 	bl	800a782 <FMAC_Reset>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b01      	cmp	r3, #1
 800a742:	d10c      	bne.n	800a75e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a748:	f043 0210 	orr.w	r2, r3, #16
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	22a0      	movs	r2, #160	; 0xa0
 800a754:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	73fb      	strb	r3, [r7, #15]
 800a75c:	e008      	b.n	800a770 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800a76c:	2300      	movs	r3, #0
 800a76e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800a778:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a78a:	f7fa fd41 	bl	8005210 <HAL_GetTick>
 800a78e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691a      	ldr	r2, [r3, #16]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a79e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800a7a0:	e00f      	b.n	800a7c2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800a7a2:	f7fa fd35 	bl	8005210 <HAL_GetTick>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	1ad3      	subs	r3, r2, r3
 800a7ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a7b0:	d907      	bls.n	800a7c2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e00a      	b.n	800a7d8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e8      	bne.n	800a7a2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f807 	bl	800a7fc <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f81b 	bl	800a82a <FMAC_ResetOutputStateAndDataPointers>
}
 800a7f4:	bf00      	nop
 800a7f6:	3708      	adds	r7, #8
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2220      	movs	r2, #32
 800a848:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a858:	b480      	push	{r7}
 800a85a:	b089      	sub	sp, #36	; 0x24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a862:	2300      	movs	r3, #0
 800a864:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a866:	4b86      	ldr	r3, [pc, #536]	; (800aa80 <HAL_GPIO_Init+0x228>)
 800a868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a86a:	e18c      	b.n	800ab86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	2101      	movs	r1, #1
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	fa01 f303 	lsl.w	r3, r1, r3
 800a878:	4013      	ands	r3, r2
 800a87a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 817e 	beq.w	800ab80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d005      	beq.n	800a89c <HAL_GPIO_Init+0x44>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d130      	bne.n	800a8fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	005b      	lsls	r3, r3, #1
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	69ba      	ldr	r2, [r7, #24]
 800a8b0:	4013      	ands	r3, r2
 800a8b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	091b      	lsrs	r3, r3, #4
 800a8e8:	f003 0201 	and.w	r2, r3, #1
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f2:	69ba      	ldr	r2, [r7, #24]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	69ba      	ldr	r2, [r7, #24]
 800a8fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	2b03      	cmp	r3, #3
 800a908:	d017      	beq.n	800a93a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	2203      	movs	r2, #3
 800a916:	fa02 f303 	lsl.w	r3, r2, r3
 800a91a:	43db      	mvns	r3, r3
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	4013      	ands	r3, r2
 800a920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	69ba      	ldr	r2, [r7, #24]
 800a930:	4313      	orrs	r3, r2
 800a932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	2b02      	cmp	r3, #2
 800a944:	d123      	bne.n	800a98e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	08da      	lsrs	r2, r3, #3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3208      	adds	r2, #8
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f003 0307 	and.w	r3, r3, #7
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	220f      	movs	r2, #15
 800a95e:	fa02 f303 	lsl.w	r3, r2, r3
 800a962:	43db      	mvns	r3, r3
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	4013      	ands	r3, r2
 800a968:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	691a      	ldr	r2, [r3, #16]
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	f003 0307 	and.w	r3, r3, #7
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	fa02 f303 	lsl.w	r3, r2, r3
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	08da      	lsrs	r2, r3, #3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	3208      	adds	r2, #8
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	2203      	movs	r2, #3
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	43db      	mvns	r3, r3
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	4013      	ands	r3, r2
 800a9a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f003 0203 	and.w	r2, r3, #3
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 80d8 	beq.w	800ab80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9d0:	4b2c      	ldr	r3, [pc, #176]	; (800aa84 <HAL_GPIO_Init+0x22c>)
 800a9d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9d6:	4a2b      	ldr	r2, [pc, #172]	; (800aa84 <HAL_GPIO_Init+0x22c>)
 800a9d8:	f043 0302 	orr.w	r3, r3, #2
 800a9dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a9e0:	4b28      	ldr	r3, [pc, #160]	; (800aa84 <HAL_GPIO_Init+0x22c>)
 800a9e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9e6:	f003 0302 	and.w	r3, r3, #2
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9ee:	4a26      	ldr	r2, [pc, #152]	; (800aa88 <HAL_GPIO_Init+0x230>)
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	089b      	lsrs	r3, r3, #2
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f003 0303 	and.w	r3, r3, #3
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	220f      	movs	r2, #15
 800aa06:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0a:	43db      	mvns	r3, r3
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	4013      	ands	r3, r2
 800aa10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a1d      	ldr	r2, [pc, #116]	; (800aa8c <HAL_GPIO_Init+0x234>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d04a      	beq.n	800aab0 <HAL_GPIO_Init+0x258>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a1c      	ldr	r2, [pc, #112]	; (800aa90 <HAL_GPIO_Init+0x238>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d02b      	beq.n	800aa7a <HAL_GPIO_Init+0x222>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a1b      	ldr	r2, [pc, #108]	; (800aa94 <HAL_GPIO_Init+0x23c>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d025      	beq.n	800aa76 <HAL_GPIO_Init+0x21e>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	4a1a      	ldr	r2, [pc, #104]	; (800aa98 <HAL_GPIO_Init+0x240>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d01f      	beq.n	800aa72 <HAL_GPIO_Init+0x21a>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a19      	ldr	r2, [pc, #100]	; (800aa9c <HAL_GPIO_Init+0x244>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d019      	beq.n	800aa6e <HAL_GPIO_Init+0x216>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a18      	ldr	r2, [pc, #96]	; (800aaa0 <HAL_GPIO_Init+0x248>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d013      	beq.n	800aa6a <HAL_GPIO_Init+0x212>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a17      	ldr	r2, [pc, #92]	; (800aaa4 <HAL_GPIO_Init+0x24c>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d00d      	beq.n	800aa66 <HAL_GPIO_Init+0x20e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a16      	ldr	r2, [pc, #88]	; (800aaa8 <HAL_GPIO_Init+0x250>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d007      	beq.n	800aa62 <HAL_GPIO_Init+0x20a>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a15      	ldr	r2, [pc, #84]	; (800aaac <HAL_GPIO_Init+0x254>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d101      	bne.n	800aa5e <HAL_GPIO_Init+0x206>
 800aa5a:	2309      	movs	r3, #9
 800aa5c:	e029      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa5e:	230a      	movs	r3, #10
 800aa60:	e027      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa62:	2307      	movs	r3, #7
 800aa64:	e025      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa66:	2306      	movs	r3, #6
 800aa68:	e023      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa6a:	2305      	movs	r3, #5
 800aa6c:	e021      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa6e:	2304      	movs	r3, #4
 800aa70:	e01f      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa72:	2303      	movs	r3, #3
 800aa74:	e01d      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e01b      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e019      	b.n	800aab2 <HAL_GPIO_Init+0x25a>
 800aa7e:	bf00      	nop
 800aa80:	58000080 	.word	0x58000080
 800aa84:	58024400 	.word	0x58024400
 800aa88:	58000400 	.word	0x58000400
 800aa8c:	58020000 	.word	0x58020000
 800aa90:	58020400 	.word	0x58020400
 800aa94:	58020800 	.word	0x58020800
 800aa98:	58020c00 	.word	0x58020c00
 800aa9c:	58021000 	.word	0x58021000
 800aaa0:	58021400 	.word	0x58021400
 800aaa4:	58021800 	.word	0x58021800
 800aaa8:	58021c00 	.word	0x58021c00
 800aaac:	58022400 	.word	0x58022400
 800aab0:	2300      	movs	r3, #0
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	f002 0203 	and.w	r2, r2, #3
 800aab8:	0092      	lsls	r2, r2, #2
 800aaba:	4093      	lsls	r3, r2
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aac2:	4938      	ldr	r1, [pc, #224]	; (800aba4 <HAL_GPIO_Init+0x34c>)
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	3302      	adds	r3, #2
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	43db      	mvns	r3, r3
 800aadc:	69ba      	ldr	r2, [r7, #24]
 800aade:	4013      	ands	r3, r2
 800aae0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800aaee:	69ba      	ldr	r2, [r7, #24]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aaf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aafe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	43db      	mvns	r3, r3
 800ab0a:	69ba      	ldr	r2, [r7, #24]
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ab1c:	69ba      	ldr	r2, [r7, #24]
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ab24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	43db      	mvns	r3, r3
 800ab36:	69ba      	ldr	r2, [r7, #24]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d003      	beq.n	800ab50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ab48:	69ba      	ldr	r2, [r7, #24]
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	69ba      	ldr	r2, [r7, #24]
 800ab54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	43db      	mvns	r3, r3
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	4013      	ands	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ab72:	69ba      	ldr	r2, [r7, #24]
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	3301      	adds	r3, #1
 800ab84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f47f ae6b 	bne.w	800a86c <HAL_GPIO_Init+0x14>
  }
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	3724      	adds	r7, #36	; 0x24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	58000400 	.word	0x58000400

0800aba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	807b      	strh	r3, [r7, #2]
 800abb4:	4613      	mov	r3, r2
 800abb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800abb8:	787b      	ldrb	r3, [r7, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800abbe:	887a      	ldrh	r2, [r7, #2]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800abc4:	e003      	b.n	800abce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800abc6:	887b      	ldrh	r3, [r7, #2]
 800abc8:	041a      	lsls	r2, r3, #16
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	619a      	str	r2, [r3, #24]
}
 800abce:	bf00      	nop
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	4603      	mov	r3, r0
 800abe2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800abe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abe8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800abec:	88fb      	ldrh	r3, [r7, #6]
 800abee:	4013      	ands	r3, r2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d008      	beq.n	800ac06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800abf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f00b fa79 	bl	80160f8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800ac06:	bf00      	nop
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e097      	b.n	800ad52 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d106      	bne.n	800ac42 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7f6 fb69 	bl	8001314 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d004      	beq.n	800ac64 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac62:	d103      	bne.n	800ac6c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 031e 	bic.w	r3, r3, #30
 800ac6a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	695b      	ldr	r3, [r3, #20]
 800ac70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d003      	beq.n	800ac80 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4b38      	ldr	r3, [pc, #224]	; (800ad5c <HAL_LPTIM_Init+0x14c>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	4b37      	ldr	r3, [pc, #220]	; (800ad60 <HAL_LPTIM_Init+0x150>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800ac90:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800ac96:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800ac9c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800aca2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d107      	bne.n	800acc2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800acba:	4313      	orrs	r3, r2
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4313      	orrs	r3, r2
 800acc0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d004      	beq.n	800acd4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800acd2:	d107      	bne.n	800ace4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800acdc:	4313      	orrs	r3, r2
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	695b      	ldr	r3, [r3, #20]
 800ace8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acec:	4293      	cmp	r3, r2
 800acee:	d00a      	beq.n	800ad06 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800acf8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800acfe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a14      	ldr	r2, [pc, #80]	; (800ad64 <HAL_LPTIM_Init+0x154>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d004      	beq.n	800ad22 <HAL_LPTIM_Init+0x112>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a12      	ldr	r2, [pc, #72]	; (800ad68 <HAL_LPTIM_Init+0x158>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d108      	bne.n	800ad34 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24
 800ad32:	e009      	b.n	800ad48 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a0c      	ldr	r2, [pc, #48]	; (800ad6c <HAL_LPTIM_Init+0x15c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d104      	bne.n	800ad48 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad46:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	ffff1f3f 	.word	0xffff1f3f
 800ad60:	ff19f1fe 	.word	0xff19f1fe
 800ad64:	40002400 	.word	0x40002400
 800ad68:	58002400 	.word	0x58002400
 800ad6c:	58002800 	.word	0x58002800

0800ad70 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68da      	ldr	r2, [r3, #12]
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ad92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691a      	ldr	r2, [r3, #16]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f042 0201 	orr.w	r2, r2, #1
 800ada2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2210      	movs	r2, #16
 800adaa:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800adb4:	2110      	movs	r1, #16
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f000 f932 	bl	800b020 <LPTIM_WaitForFlag>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b03      	cmp	r3, #3
 800adc0:	d101      	bne.n	800adc6 <HAL_LPTIM_TimeOut_Start_IT+0x56>
  {
    return HAL_TIMEOUT;
 800adc2:	2303      	movs	r3, #3
 800adc4:	e038      	b.n	800ae38 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2208      	movs	r2, #8
 800adcc:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800add6:	2108      	movs	r1, #8
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f921 	bl	800b020 <LPTIM_WaitForFlag>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d101      	bne.n	800ade8 <HAL_LPTIM_TimeOut_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e027      	b.n	800ae38 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 f949 	bl	800b080 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f907 	bl	800b002 <HAL_LPTIM_GetState>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d101      	bne.n	800adfe <HAL_LPTIM_TimeOut_Start_IT+0x8e>
  {
    return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e01c      	b.n	800ae38 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0201 	orr.w	r2, r2, #1
 800ae0c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0201 	orr.w	r2, r2, #1
 800ae1c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	691a      	ldr	r2, [r3, #16]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f042 0204 	orr.w	r2, r2, #4
 800ae2c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2201      	movs	r2, #1
 800ae32:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d10d      	bne.n	800ae72 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d106      	bne.n	800ae72 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f882 	bl	800af76 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0302 	and.w	r3, r3, #2
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d10d      	bne.n	800ae9c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f003 0302 	and.w	r3, r3, #2
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d106      	bne.n	800ae9c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2202      	movs	r2, #2
 800ae94:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f877 	bl	800af8a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0304 	and.w	r3, r3, #4
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	d10d      	bne.n	800aec6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	d106      	bne.n	800aec6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	2204      	movs	r2, #4
 800aebe:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f86c 	bl	800af9e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b08      	cmp	r3, #8
 800aed2:	d10d      	bne.n	800aef0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0308 	and.w	r3, r3, #8
 800aede:	2b08      	cmp	r3, #8
 800aee0:	d106      	bne.n	800aef0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2208      	movs	r2, #8
 800aee8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f861 	bl	800afb2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	2b10      	cmp	r3, #16
 800aefc:	d10d      	bne.n	800af1a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f003 0310 	and.w	r3, r3, #16
 800af08:	2b10      	cmp	r3, #16
 800af0a:	d106      	bne.n	800af1a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	2210      	movs	r2, #16
 800af12:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f856 	bl	800afc6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b20      	cmp	r3, #32
 800af26:	d10d      	bne.n	800af44 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b20      	cmp	r3, #32
 800af34:	d106      	bne.n	800af44 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2220      	movs	r2, #32
 800af3c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f84b 	bl	800afda <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d10d      	bne.n	800af6e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5c:	2b40      	cmp	r3, #64	; 0x40
 800af5e:	d106      	bne.n	800af6e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2240      	movs	r2, #64	; 0x40
 800af66:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 f840 	bl	800afee <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800af6e:	bf00      	nop
 800af70:	3708      	adds	r7, #8
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800af7e:	bf00      	nop
 800af80:	370c      	adds	r7, #12
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800af92:	bf00      	nop
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b083      	sub	sp, #12
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800afa6:	bf00      	nop
 800afa8:	370c      	adds	r7, #12
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800afb2:	b480      	push	{r7}
 800afb4:	b083      	sub	sp, #12
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800afba:	bf00      	nop
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b083      	sub	sp, #12
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800afce:	bf00      	nop
 800afd0:	370c      	adds	r7, #12
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800afda:	b480      	push	{r7}
 800afdc:	b083      	sub	sp, #12
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800afee:	b480      	push	{r7}
 800aff0:	b083      	sub	sp, #12
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800b002:	b480      	push	{r7}
 800b004:	b083      	sub	sp, #12
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b010:	b2db      	uxtb	r3, r3
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800b02e:	4b12      	ldr	r3, [pc, #72]	; (800b078 <LPTIM_WaitForFlag+0x58>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a12      	ldr	r2, [pc, #72]	; (800b07c <LPTIM_WaitForFlag+0x5c>)
 800b034:	fba2 2303 	umull	r2, r3, r2, r3
 800b038:	0b9b      	lsrs	r3, r3, #14
 800b03a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b03e:	fb02 f303 	mul.w	r3, r2, r3
 800b042:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3b01      	subs	r3, #1
 800b048:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d101      	bne.n	800b054 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	4013      	ands	r3, r2
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d002      	beq.n	800b06a <LPTIM_WaitForFlag+0x4a>
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1ec      	bne.n	800b044 <LPTIM_WaitForFlag+0x24>

  return result;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	24000000 	.word	0x24000000
 800b07c:	d1b71759 	.word	0xd1b71759

0800b080 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08c      	sub	sp, #48	; 0x30
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b08c:	f3ef 8310 	mrs	r3, PRIMASK
 800b090:	60fb      	str	r3, [r7, #12]
  return(result);
 800b092:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800b094:	62bb      	str	r3, [r7, #40]	; 0x28
 800b096:	2301      	movs	r3, #1
 800b098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f383 8810 	msr	PRIMASK, r3
}
 800b0a0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a81      	ldr	r2, [pc, #516]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d02d      	beq.n	800b108 <LPTIM_Disable+0x88>
 800b0ac:	4a7f      	ldr	r2, [pc, #508]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d830      	bhi.n	800b114 <LPTIM_Disable+0x94>
 800b0b2:	4a7f      	ldr	r2, [pc, #508]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d021      	beq.n	800b0fc <LPTIM_Disable+0x7c>
 800b0b8:	4a7d      	ldr	r2, [pc, #500]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d82a      	bhi.n	800b114 <LPTIM_Disable+0x94>
 800b0be:	4a7d      	ldr	r2, [pc, #500]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d015      	beq.n	800b0f0 <LPTIM_Disable+0x70>
 800b0c4:	4a7b      	ldr	r2, [pc, #492]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d824      	bhi.n	800b114 <LPTIM_Disable+0x94>
 800b0ca:	4a7b      	ldr	r2, [pc, #492]	; (800b2b8 <LPTIM_Disable+0x238>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d003      	beq.n	800b0d8 <LPTIM_Disable+0x58>
 800b0d0:	4a7a      	ldr	r2, [pc, #488]	; (800b2bc <LPTIM_Disable+0x23c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d006      	beq.n	800b0e4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800b0d6:	e01d      	b.n	800b114 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b0d8:	4b79      	ldr	r3, [pc, #484]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0dc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800b0e2:	e018      	b.n	800b116 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b0e4:	4b76      	ldr	r3, [pc, #472]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800b0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800b0ee:	e012      	b.n	800b116 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800b0f0:	4b73      	ldr	r3, [pc, #460]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800b0fa:	e00c      	b.n	800b116 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 800b0fc:	4b70      	ldr	r3, [pc, #448]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b100:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b104:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800b106:	e006      	b.n	800b116 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 800b108:	4b6d      	ldr	r3, [pc, #436]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b10a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b10c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b110:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800b112:	e000      	b.n	800b116 <LPTIM_Disable+0x96>
      break;
 800b114:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13c:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a5a      	ldr	r2, [pc, #360]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d059      	beq.n	800b1fc <LPTIM_Disable+0x17c>
 800b148:	4a58      	ldr	r2, [pc, #352]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d867      	bhi.n	800b21e <LPTIM_Disable+0x19e>
 800b14e:	4a58      	ldr	r2, [pc, #352]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d042      	beq.n	800b1da <LPTIM_Disable+0x15a>
 800b154:	4a56      	ldr	r2, [pc, #344]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d861      	bhi.n	800b21e <LPTIM_Disable+0x19e>
 800b15a:	4a56      	ldr	r2, [pc, #344]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d02b      	beq.n	800b1b8 <LPTIM_Disable+0x138>
 800b160:	4a54      	ldr	r2, [pc, #336]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d85b      	bhi.n	800b21e <LPTIM_Disable+0x19e>
 800b166:	4a54      	ldr	r2, [pc, #336]	; (800b2b8 <LPTIM_Disable+0x238>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <LPTIM_Disable+0xf4>
 800b16c:	4a53      	ldr	r2, [pc, #332]	; (800b2bc <LPTIM_Disable+0x23c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d011      	beq.n	800b196 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800b172:	e054      	b.n	800b21e <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800b174:	4b52      	ldr	r3, [pc, #328]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b17a:	4a51      	ldr	r2, [pc, #324]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b17c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800b184:	4b4e      	ldr	r3, [pc, #312]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b18a:	4a4d      	ldr	r2, [pc, #308]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b18c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 800b194:	e044      	b.n	800b220 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800b196:	4b4a      	ldr	r3, [pc, #296]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b19c:	4a48      	ldr	r2, [pc, #288]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b19e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1a2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800b1a6:	4b46      	ldr	r3, [pc, #280]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1ac:	4a44      	ldr	r2, [pc, #272]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800b1b6:	e033      	b.n	800b220 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 800b1b8:	4b41      	ldr	r3, [pc, #260]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1be:	4a40      	ldr	r2, [pc, #256]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1c4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800b1c8:	4b3d      	ldr	r3, [pc, #244]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1ce:	4a3c      	ldr	r2, [pc, #240]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800b1d8:	e022      	b.n	800b220 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 800b1da:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1e0:	4a37      	ldr	r2, [pc, #220]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 800b1ea:	4b35      	ldr	r3, [pc, #212]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1f0:	4a33      	ldr	r2, [pc, #204]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800b1fa:	e011      	b.n	800b220 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 800b1fc:	4b30      	ldr	r3, [pc, #192]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b1fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b202:	4a2f      	ldr	r2, [pc, #188]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b208:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 800b20c:	4b2c      	ldr	r3, [pc, #176]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b20e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b212:	4a2b      	ldr	r2, [pc, #172]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b218:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 800b21c:	e000      	b.n	800b220 <LPTIM_Disable+0x1a0>
      break;
 800b21e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d103      	bne.n	800b22e <LPTIM_Disable+0x1ae>
 800b226:	69bb      	ldr	r3, [r7, #24]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80d0 	beq.w	800b3ce <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a1e      	ldr	r2, [pc, #120]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d031      	beq.n	800b29c <LPTIM_Disable+0x21c>
 800b238:	4a1c      	ldr	r2, [pc, #112]	; (800b2ac <LPTIM_Disable+0x22c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d842      	bhi.n	800b2c4 <LPTIM_Disable+0x244>
 800b23e:	4a1c      	ldr	r2, [pc, #112]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d024      	beq.n	800b28e <LPTIM_Disable+0x20e>
 800b244:	4a1a      	ldr	r2, [pc, #104]	; (800b2b0 <LPTIM_Disable+0x230>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d83c      	bhi.n	800b2c4 <LPTIM_Disable+0x244>
 800b24a:	4a1a      	ldr	r2, [pc, #104]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d017      	beq.n	800b280 <LPTIM_Disable+0x200>
 800b250:	4a18      	ldr	r2, [pc, #96]	; (800b2b4 <LPTIM_Disable+0x234>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d836      	bhi.n	800b2c4 <LPTIM_Disable+0x244>
 800b256:	4a18      	ldr	r2, [pc, #96]	; (800b2b8 <LPTIM_Disable+0x238>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <LPTIM_Disable+0x1e4>
 800b25c:	4a17      	ldr	r2, [pc, #92]	; (800b2bc <LPTIM_Disable+0x23c>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d007      	beq.n	800b272 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 800b262:	e02f      	b.n	800b2c4 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 800b264:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b268:	4a15      	ldr	r2, [pc, #84]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b26a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800b26e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 800b270:	e029      	b.n	800b2c6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b276:	4a12      	ldr	r2, [pc, #72]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b278:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b27c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800b27e:	e022      	b.n	800b2c6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 800b280:	4b0f      	ldr	r3, [pc, #60]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b284:	4a0e      	ldr	r2, [pc, #56]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b286:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b28a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800b28c:	e01b      	b.n	800b2c6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800b28e:	4b0c      	ldr	r3, [pc, #48]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b292:	4a0b      	ldr	r2, [pc, #44]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b294:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b298:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800b29a:	e014      	b.n	800b2c6 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800b29c:	4b08      	ldr	r3, [pc, #32]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a0:	4a07      	ldr	r2, [pc, #28]	; (800b2c0 <LPTIM_Disable+0x240>)
 800b2a2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b2a6:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800b2a8:	e00d      	b.n	800b2c6 <LPTIM_Disable+0x246>
 800b2aa:	bf00      	nop
 800b2ac:	58003000 	.word	0x58003000
 800b2b0:	58002c00 	.word	0x58002c00
 800b2b4:	58002800 	.word	0x58002800
 800b2b8:	40002400 	.word	0x40002400
 800b2bc:	58002400 	.word	0x58002400
 800b2c0:	58024400 	.word	0x58024400
        break;
 800b2c4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01a      	beq.n	800b302 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	691a      	ldr	r2, [r3, #16]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f042 0201 	orr.w	r2, r2, #1
 800b2da:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800b2e4:	2108      	movs	r1, #8
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7ff fe9a 	bl	800b020 <LPTIM_WaitForFlag>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d103      	bne.n	800b2fa <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2203      	movs	r2, #3
 800b2f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2208      	movs	r2, #8
 800b300:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d01a      	beq.n	800b33e <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	691a      	ldr	r2, [r3, #16]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f042 0201 	orr.w	r2, r2, #1
 800b316:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800b320:	2110      	movs	r1, #16
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7ff fe7c 	bl	800b020 <LPTIM_WaitForFlag>
 800b328:	4603      	mov	r3, r0
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d103      	bne.n	800b336 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2203      	movs	r2, #3
 800b332:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2210      	movs	r2, #16
 800b33c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a33      	ldr	r2, [pc, #204]	; (800b410 <LPTIM_Disable+0x390>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d039      	beq.n	800b3bc <LPTIM_Disable+0x33c>
 800b348:	4a31      	ldr	r2, [pc, #196]	; (800b410 <LPTIM_Disable+0x390>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d841      	bhi.n	800b3d2 <LPTIM_Disable+0x352>
 800b34e:	4a31      	ldr	r2, [pc, #196]	; (800b414 <LPTIM_Disable+0x394>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d02a      	beq.n	800b3aa <LPTIM_Disable+0x32a>
 800b354:	4a2f      	ldr	r2, [pc, #188]	; (800b414 <LPTIM_Disable+0x394>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d83b      	bhi.n	800b3d2 <LPTIM_Disable+0x352>
 800b35a:	4a2f      	ldr	r2, [pc, #188]	; (800b418 <LPTIM_Disable+0x398>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d01b      	beq.n	800b398 <LPTIM_Disable+0x318>
 800b360:	4a2d      	ldr	r2, [pc, #180]	; (800b418 <LPTIM_Disable+0x398>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d835      	bhi.n	800b3d2 <LPTIM_Disable+0x352>
 800b366:	4a2d      	ldr	r2, [pc, #180]	; (800b41c <LPTIM_Disable+0x39c>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <LPTIM_Disable+0x2f4>
 800b36c:	4a2c      	ldr	r2, [pc, #176]	; (800b420 <LPTIM_Disable+0x3a0>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d009      	beq.n	800b386 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 800b372:	e02e      	b.n	800b3d2 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800b374:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b37c:	4929      	ldr	r1, [pc, #164]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	4313      	orrs	r3, r2
 800b382:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 800b384:	e026      	b.n	800b3d4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800b386:	4b27      	ldr	r3, [pc, #156]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b38e:	4925      	ldr	r1, [pc, #148]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	4313      	orrs	r3, r2
 800b394:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800b396:	e01d      	b.n	800b3d4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 800b398:	4b22      	ldr	r3, [pc, #136]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3a0:	4920      	ldr	r1, [pc, #128]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800b3a8:	e014      	b.n	800b3d4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800b3aa:	4b1e      	ldr	r3, [pc, #120]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3b2:	491c      	ldr	r1, [pc, #112]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800b3ba:	e00b      	b.n	800b3d4 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800b3bc:	4b19      	ldr	r3, [pc, #100]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b3be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3c4:	4917      	ldr	r1, [pc, #92]	; (800b424 <LPTIM_Disable+0x3a4>)
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800b3cc:	e002      	b.n	800b3d4 <LPTIM_Disable+0x354>
    }
  }
 800b3ce:	bf00      	nop
 800b3d0:	e000      	b.n	800b3d4 <LPTIM_Disable+0x354>
        break;
 800b3d2:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ea:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	6a3a      	ldr	r2, [r7, #32]
 800b3f2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	625a      	str	r2, [r3, #36]	; 0x24
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	f383 8810 	msr	PRIMASK, r3
}
 800b406:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800b408:	bf00      	nop
 800b40a:	3730      	adds	r7, #48	; 0x30
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	58003000 	.word	0x58003000
 800b414:	58002c00 	.word	0x58002c00
 800b418:	58002800 	.word	0x58002800
 800b41c:	40002400 	.word	0x40002400
 800b420:	58002400 	.word	0x58002400
 800b424:	58024400 	.word	0x58024400

0800b428 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f003 0304 	and.w	r3, r3, #4
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d00a      	beq.n	800b452 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b43c:	4b16      	ldr	r3, [pc, #88]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d001      	beq.n	800b44e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e01f      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	e01d      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	f023 0207 	bic.w	r2, r3, #7
 800b45a:	490f      	ldr	r1, [pc, #60]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b462:	f7f9 fed5 	bl	8005210 <HAL_GetTick>
 800b466:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b468:	e009      	b.n	800b47e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b46a:	f7f9 fed1 	bl	8005210 <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b478:	d901      	bls.n	800b47e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e007      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b47e:	4b06      	ldr	r3, [pc, #24]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b48a:	d1ee      	bne.n	800b46a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024800 	.word	0x58024800

0800b49c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	; 0x30
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e39d      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8087 	beq.w	800b5ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4bc:	4b88      	ldr	r3, [pc, #544]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4c6:	4b86      	ldr	r3, [pc, #536]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d007      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x46>
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b18      	cmp	r3, #24
 800b4d6:	d110      	bne.n	800b4fa <HAL_RCC_OscConfig+0x5e>
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d10b      	bne.n	800b4fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4e2:	4b7f      	ldr	r3, [pc, #508]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d06c      	beq.n	800b5c8 <HAL_RCC_OscConfig+0x12c>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e377      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b502:	d106      	bne.n	800b512 <HAL_RCC_OscConfig+0x76>
 800b504:	4b76      	ldr	r3, [pc, #472]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a75      	ldr	r2, [pc, #468]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	e02e      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10c      	bne.n	800b534 <HAL_RCC_OscConfig+0x98>
 800b51a:	4b71      	ldr	r3, [pc, #452]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a70      	ldr	r2, [pc, #448]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	4b6e      	ldr	r3, [pc, #440]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a6d      	ldr	r2, [pc, #436]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b52c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e01d      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b53c:	d10c      	bne.n	800b558 <HAL_RCC_OscConfig+0xbc>
 800b53e:	4b68      	ldr	r3, [pc, #416]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a67      	ldr	r2, [pc, #412]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4b65      	ldr	r3, [pc, #404]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a64      	ldr	r2, [pc, #400]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	e00b      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b558:	4b61      	ldr	r3, [pc, #388]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a60      	ldr	r2, [pc, #384]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	4b5e      	ldr	r3, [pc, #376]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a5d      	ldr	r2, [pc, #372]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b56e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d013      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b578:	f7f9 fe4a 	bl	8005210 <HAL_GetTick>
 800b57c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b57e:	e008      	b.n	800b592 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b580:	f7f9 fe46 	bl	8005210 <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	2b64      	cmp	r3, #100	; 0x64
 800b58c:	d901      	bls.n	800b592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b58e:	2303      	movs	r3, #3
 800b590:	e32b      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b592:	4b53      	ldr	r3, [pc, #332]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0f0      	beq.n	800b580 <HAL_RCC_OscConfig+0xe4>
 800b59e:	e014      	b.n	800b5ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a0:	f7f9 fe36 	bl	8005210 <HAL_GetTick>
 800b5a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5a8:	f7f9 fe32 	bl	8005210 <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b64      	cmp	r3, #100	; 0x64
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e317      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5ba:	4b49      	ldr	r3, [pc, #292]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f0      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x10c>
 800b5c6:	e000      	b.n	800b5ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 808c 	beq.w	800b6f0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5d8:	4b41      	ldr	r3, [pc, #260]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5e2:	4b3f      	ldr	r3, [pc, #252]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <HAL_RCC_OscConfig+0x162>
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	2b18      	cmp	r3, #24
 800b5f2:	d137      	bne.n	800b664 <HAL_RCC_OscConfig+0x1c8>
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d132      	bne.n	800b664 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5fe:	4b38      	ldr	r3, [pc, #224]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0304 	and.w	r3, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <HAL_RCC_OscConfig+0x17a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e2e9      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b616:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f023 0219 	bic.w	r2, r3, #25
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	492f      	ldr	r1, [pc, #188]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b624:	4313      	orrs	r3, r2
 800b626:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b628:	f7f9 fdf2 	bl	8005210 <HAL_GetTick>
 800b62c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b62e:	e008      	b.n	800b642 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b630:	f7f9 fdee 	bl	8005210 <HAL_GetTick>
 800b634:	4602      	mov	r2, r0
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	2b02      	cmp	r3, #2
 800b63c:	d901      	bls.n	800b642 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e2d3      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b642:	4b27      	ldr	r3, [pc, #156]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d0f0      	beq.n	800b630 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b64e:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	061b      	lsls	r3, r3, #24
 800b65c:	4920      	ldr	r1, [pc, #128]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b662:	e045      	b.n	800b6f0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d026      	beq.n	800b6ba <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b66c:	4b1c      	ldr	r3, [pc, #112]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f023 0219 	bic.w	r2, r3, #25
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	4919      	ldr	r1, [pc, #100]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b67e:	f7f9 fdc7 	bl	8005210 <HAL_GetTick>
 800b682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b684:	e008      	b.n	800b698 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b686:	f7f9 fdc3 	bl	8005210 <HAL_GetTick>
 800b68a:	4602      	mov	r2, r0
 800b68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	2b02      	cmp	r3, #2
 800b692:	d901      	bls.n	800b698 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e2a8      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0f0      	beq.n	800b686 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6a4:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	061b      	lsls	r3, r3, #24
 800b6b2:	490b      	ldr	r1, [pc, #44]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	604b      	str	r3, [r1, #4]
 800b6b8:	e01a      	b.n	800b6f0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a08      	ldr	r2, [pc, #32]	; (800b6e0 <HAL_RCC_OscConfig+0x244>)
 800b6c0:	f023 0301 	bic.w	r3, r3, #1
 800b6c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c6:	f7f9 fda3 	bl	8005210 <HAL_GetTick>
 800b6ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b6cc:	e00a      	b.n	800b6e4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b6ce:	f7f9 fd9f 	bl	8005210 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d903      	bls.n	800b6e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e284      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
 800b6e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b6e4:	4b96      	ldr	r3, [pc, #600]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0304 	and.w	r3, r3, #4
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1ee      	bne.n	800b6ce <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f003 0310 	and.w	r3, r3, #16
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d06a      	beq.n	800b7d2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6fc:	4b90      	ldr	r3, [pc, #576]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b704:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b706:	4b8e      	ldr	r3, [pc, #568]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b70a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	2b08      	cmp	r3, #8
 800b710:	d007      	beq.n	800b722 <HAL_RCC_OscConfig+0x286>
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	2b18      	cmp	r3, #24
 800b716:	d11b      	bne.n	800b750 <HAL_RCC_OscConfig+0x2b4>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f003 0303 	and.w	r3, r3, #3
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d116      	bne.n	800b750 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b722:	4b87      	ldr	r3, [pc, #540]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <HAL_RCC_OscConfig+0x29e>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	2b80      	cmp	r3, #128	; 0x80
 800b734:	d001      	beq.n	800b73a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b736:	2301      	movs	r3, #1
 800b738:	e257      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b73a:	4b81      	ldr	r3, [pc, #516]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	061b      	lsls	r3, r3, #24
 800b748:	497d      	ldr	r1, [pc, #500]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b74e:	e040      	b.n	800b7d2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d023      	beq.n	800b7a0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b758:	4b79      	ldr	r3, [pc, #484]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a78      	ldr	r2, [pc, #480]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b75e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b764:	f7f9 fd54 	bl	8005210 <HAL_GetTick>
 800b768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b76a:	e008      	b.n	800b77e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b76c:	f7f9 fd50 	bl	8005210 <HAL_GetTick>
 800b770:	4602      	mov	r2, r0
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	1ad3      	subs	r3, r2, r3
 800b776:	2b02      	cmp	r3, #2
 800b778:	d901      	bls.n	800b77e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b77a:	2303      	movs	r3, #3
 800b77c:	e235      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b77e:	4b70      	ldr	r3, [pc, #448]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0f0      	beq.n	800b76c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b78a:	4b6d      	ldr	r3, [pc, #436]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	061b      	lsls	r3, r3, #24
 800b798:	4969      	ldr	r1, [pc, #420]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	60cb      	str	r3, [r1, #12]
 800b79e:	e018      	b.n	800b7d2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b7a0:	4b67      	ldr	r3, [pc, #412]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a66      	ldr	r2, [pc, #408]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b7a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ac:	f7f9 fd30 	bl	8005210 <HAL_GetTick>
 800b7b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b7b2:	e008      	b.n	800b7c6 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b7b4:	f7f9 fd2c 	bl	8005210 <HAL_GetTick>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d901      	bls.n	800b7c6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	e211      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b7c6:	4b5e      	ldr	r3, [pc, #376]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f0      	bne.n	800b7b4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0308 	and.w	r3, r3, #8
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d036      	beq.n	800b84c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d019      	beq.n	800b81a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7e6:	4b56      	ldr	r3, [pc, #344]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ea:	4a55      	ldr	r2, [pc, #340]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b7ec:	f043 0301 	orr.w	r3, r3, #1
 800b7f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7f2:	f7f9 fd0d 	bl	8005210 <HAL_GetTick>
 800b7f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b7f8:	e008      	b.n	800b80c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b7fa:	f7f9 fd09 	bl	8005210 <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b02      	cmp	r3, #2
 800b806:	d901      	bls.n	800b80c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e1ee      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b80c:	4b4c      	ldr	r3, [pc, #304]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0f0      	beq.n	800b7fa <HAL_RCC_OscConfig+0x35e>
 800b818:	e018      	b.n	800b84c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b81a:	4b49      	ldr	r3, [pc, #292]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b81e:	4a48      	ldr	r2, [pc, #288]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b820:	f023 0301 	bic.w	r3, r3, #1
 800b824:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b826:	f7f9 fcf3 	bl	8005210 <HAL_GetTick>
 800b82a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b82c:	e008      	b.n	800b840 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b82e:	f7f9 fcef 	bl	8005210 <HAL_GetTick>
 800b832:	4602      	mov	r2, r0
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	2b02      	cmp	r3, #2
 800b83a:	d901      	bls.n	800b840 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e1d4      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b840:	4b3f      	ldr	r3, [pc, #252]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d1f0      	bne.n	800b82e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d036      	beq.n	800b8c6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d019      	beq.n	800b894 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b860:	4b37      	ldr	r3, [pc, #220]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a36      	ldr	r2, [pc, #216]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b866:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b86a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b86c:	f7f9 fcd0 	bl	8005210 <HAL_GetTick>
 800b870:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b872:	e008      	b.n	800b886 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b874:	f7f9 fccc 	bl	8005210 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d901      	bls.n	800b886 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e1b1      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b886:	4b2e      	ldr	r3, [pc, #184]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0f0      	beq.n	800b874 <HAL_RCC_OscConfig+0x3d8>
 800b892:	e018      	b.n	800b8c6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b894:	4b2a      	ldr	r3, [pc, #168]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a29      	ldr	r2, [pc, #164]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b89e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b8a0:	f7f9 fcb6 	bl	8005210 <HAL_GetTick>
 800b8a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b8a6:	e008      	b.n	800b8ba <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b8a8:	f7f9 fcb2 	bl	8005210 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d901      	bls.n	800b8ba <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e197      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b8ba:	4b21      	ldr	r3, [pc, #132]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1f0      	bne.n	800b8a8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0304 	and.w	r3, r3, #4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 8086 	beq.w	800b9e0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b8d4:	4b1b      	ldr	r3, [pc, #108]	; (800b944 <HAL_RCC_OscConfig+0x4a8>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a1a      	ldr	r2, [pc, #104]	; (800b944 <HAL_RCC_OscConfig+0x4a8>)
 800b8da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b8e0:	f7f9 fc96 	bl	8005210 <HAL_GetTick>
 800b8e4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8e6:	e008      	b.n	800b8fa <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b8e8:	f7f9 fc92 	bl	8005210 <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b64      	cmp	r3, #100	; 0x64
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e177      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b8fa:	4b12      	ldr	r3, [pc, #72]	; (800b944 <HAL_RCC_OscConfig+0x4a8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b902:	2b00      	cmp	r3, #0
 800b904:	d0f0      	beq.n	800b8e8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d106      	bne.n	800b91c <HAL_RCC_OscConfig+0x480>
 800b90e:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	4a0b      	ldr	r2, [pc, #44]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b914:	f043 0301 	orr.w	r3, r3, #1
 800b918:	6713      	str	r3, [r2, #112]	; 0x70
 800b91a:	e032      	b.n	800b982 <HAL_RCC_OscConfig+0x4e6>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d111      	bne.n	800b948 <HAL_RCC_OscConfig+0x4ac>
 800b924:	4b06      	ldr	r3, [pc, #24]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b928:	4a05      	ldr	r2, [pc, #20]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b92a:	f023 0301 	bic.w	r3, r3, #1
 800b92e:	6713      	str	r3, [r2, #112]	; 0x70
 800b930:	4b03      	ldr	r3, [pc, #12]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b934:	4a02      	ldr	r2, [pc, #8]	; (800b940 <HAL_RCC_OscConfig+0x4a4>)
 800b936:	f023 0304 	bic.w	r3, r3, #4
 800b93a:	6713      	str	r3, [r2, #112]	; 0x70
 800b93c:	e021      	b.n	800b982 <HAL_RCC_OscConfig+0x4e6>
 800b93e:	bf00      	nop
 800b940:	58024400 	.word	0x58024400
 800b944:	58024800 	.word	0x58024800
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	2b05      	cmp	r3, #5
 800b94e:	d10c      	bne.n	800b96a <HAL_RCC_OscConfig+0x4ce>
 800b950:	4b83      	ldr	r3, [pc, #524]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b954:	4a82      	ldr	r2, [pc, #520]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b956:	f043 0304 	orr.w	r3, r3, #4
 800b95a:	6713      	str	r3, [r2, #112]	; 0x70
 800b95c:	4b80      	ldr	r3, [pc, #512]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b95e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b960:	4a7f      	ldr	r2, [pc, #508]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b962:	f043 0301 	orr.w	r3, r3, #1
 800b966:	6713      	str	r3, [r2, #112]	; 0x70
 800b968:	e00b      	b.n	800b982 <HAL_RCC_OscConfig+0x4e6>
 800b96a:	4b7d      	ldr	r3, [pc, #500]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96e:	4a7c      	ldr	r2, [pc, #496]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b970:	f023 0301 	bic.w	r3, r3, #1
 800b974:	6713      	str	r3, [r2, #112]	; 0x70
 800b976:	4b7a      	ldr	r3, [pc, #488]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b97a:	4a79      	ldr	r2, [pc, #484]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b97c:	f023 0304 	bic.w	r3, r3, #4
 800b980:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d015      	beq.n	800b9b6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b98a:	f7f9 fc41 	bl	8005210 <HAL_GetTick>
 800b98e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b990:	e00a      	b.n	800b9a8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b992:	f7f9 fc3d 	bl	8005210 <HAL_GetTick>
 800b996:	4602      	mov	r2, r0
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d901      	bls.n	800b9a8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e120      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9a8:	4b6d      	ldr	r3, [pc, #436]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ac:	f003 0302 	and.w	r3, r3, #2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d0ee      	beq.n	800b992 <HAL_RCC_OscConfig+0x4f6>
 800b9b4:	e014      	b.n	800b9e0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9b6:	f7f9 fc2b 	bl	8005210 <HAL_GetTick>
 800b9ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b9bc:	e00a      	b.n	800b9d4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9be:	f7f9 fc27 	bl	8005210 <HAL_GetTick>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	1ad3      	subs	r3, r2, r3
 800b9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d901      	bls.n	800b9d4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e10a      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b9d4:	4b62      	ldr	r3, [pc, #392]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1ee      	bne.n	800b9be <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 80ff 	beq.w	800bbe8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b9ea:	4b5d      	ldr	r3, [pc, #372]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9f2:	2b18      	cmp	r3, #24
 800b9f4:	f000 80ba 	beq.w	800bb6c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	f040 8095 	bne.w	800bb2c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba02:	4b57      	ldr	r3, [pc, #348]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a56      	ldr	r2, [pc, #344]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba0e:	f7f9 fbff 	bl	8005210 <HAL_GetTick>
 800ba12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba14:	e008      	b.n	800ba28 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba16:	f7f9 fbfb 	bl	8005210 <HAL_GetTick>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	2b02      	cmp	r3, #2
 800ba22:	d901      	bls.n	800ba28 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e0e0      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba28:	4b4d      	ldr	r3, [pc, #308]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1f0      	bne.n	800ba16 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba34:	4b4a      	ldr	r3, [pc, #296]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ba38:	4b4a      	ldr	r3, [pc, #296]	; (800bb64 <HAL_RCC_OscConfig+0x6c8>)
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ba44:	0112      	lsls	r2, r2, #4
 800ba46:	430a      	orrs	r2, r1
 800ba48:	4945      	ldr	r1, [pc, #276]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	628b      	str	r3, [r1, #40]	; 0x28
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba52:	3b01      	subs	r3, #1
 800ba54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	025b      	lsls	r3, r3, #9
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	041b      	lsls	r3, r3, #16
 800ba6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba70:	431a      	orrs	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	3b01      	subs	r3, #1
 800ba78:	061b      	lsls	r3, r3, #24
 800ba7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba7e:	4938      	ldr	r1, [pc, #224]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba80:	4313      	orrs	r3, r2
 800ba82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ba84:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a35      	ldr	r2, [pc, #212]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba8a:	f023 0301 	bic.w	r3, r3, #1
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ba90:	4b33      	ldr	r3, [pc, #204]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800ba92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba94:	4b34      	ldr	r3, [pc, #208]	; (800bb68 <HAL_RCC_OscConfig+0x6cc>)
 800ba96:	4013      	ands	r3, r2
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ba9c:	00d2      	lsls	r2, r2, #3
 800ba9e:	4930      	ldr	r1, [pc, #192]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800baa0:	4313      	orrs	r3, r2
 800baa2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800baa4:	4b2e      	ldr	r3, [pc, #184]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	f023 020c 	bic.w	r2, r3, #12
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab0:	492b      	ldr	r1, [pc, #172]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bab6:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baba:	f023 0202 	bic.w	r2, r3, #2
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bac2:	4927      	ldr	r1, [pc, #156]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bac4:	4313      	orrs	r3, r2
 800bac6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bac8:	4b25      	ldr	r3, [pc, #148]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800baca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bacc:	4a24      	ldr	r2, [pc, #144]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bad2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad4:	4b22      	ldr	r3, [pc, #136]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad8:	4a21      	ldr	r2, [pc, #132]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bae0:	4b1f      	ldr	r3, [pc, #124]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae4:	4a1e      	ldr	r2, [pc, #120]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bae6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800baea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800baec:	4b1c      	ldr	r3, [pc, #112]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800baee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf0:	4a1b      	ldr	r2, [pc, #108]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800baf2:	f043 0301 	orr.w	r3, r3, #1
 800baf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800baf8:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a18      	ldr	r2, [pc, #96]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bafe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb04:	f7f9 fb84 	bl	8005210 <HAL_GetTick>
 800bb08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb0a:	e008      	b.n	800bb1e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb0c:	f7f9 fb80 	bl	8005210 <HAL_GetTick>
 800bb10:	4602      	mov	r2, r0
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d901      	bls.n	800bb1e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e065      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bb1e:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d0f0      	beq.n	800bb0c <HAL_RCC_OscConfig+0x670>
 800bb2a:	e05d      	b.n	800bbe8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a0b      	ldr	r2, [pc, #44]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bb32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb38:	f7f9 fb6a 	bl	8005210 <HAL_GetTick>
 800bb3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb3e:	e008      	b.n	800bb52 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb40:	f7f9 fb66 	bl	8005210 <HAL_GetTick>
 800bb44:	4602      	mov	r2, r0
 800bb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d901      	bls.n	800bb52 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bb4e:	2303      	movs	r3, #3
 800bb50:	e04b      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bb52:	4b03      	ldr	r3, [pc, #12]	; (800bb60 <HAL_RCC_OscConfig+0x6c4>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1f0      	bne.n	800bb40 <HAL_RCC_OscConfig+0x6a4>
 800bb5e:	e043      	b.n	800bbe8 <HAL_RCC_OscConfig+0x74c>
 800bb60:	58024400 	.word	0x58024400
 800bb64:	fffffc0c 	.word	0xfffffc0c
 800bb68:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bb6c:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <HAL_RCC_OscConfig+0x758>)
 800bb6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bb72:	4b20      	ldr	r3, [pc, #128]	; (800bbf4 <HAL_RCC_OscConfig+0x758>)
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d031      	beq.n	800bbe4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	f003 0203 	and.w	r2, r3, #3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d12a      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	091b      	lsrs	r3, r3, #4
 800bb92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d122      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d11a      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	0a5b      	lsrs	r3, r3, #9
 800bbb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d111      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	0c1b      	lsrs	r3, r3, #16
 800bbc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d108      	bne.n	800bbe4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	0e1b      	lsrs	r3, r3, #24
 800bbd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbde:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d001      	beq.n	800bbe8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e000      	b.n	800bbea <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3730      	adds	r7, #48	; 0x30
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	58024400 	.word	0x58024400

0800bbf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e19c      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bc0c:	4b8a      	ldr	r3, [pc, #552]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 030f 	and.w	r3, r3, #15
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d910      	bls.n	800bc3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc1a:	4b87      	ldr	r3, [pc, #540]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f023 020f 	bic.w	r2, r3, #15
 800bc22:	4985      	ldr	r1, [pc, #532]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc2a:	4b83      	ldr	r3, [pc, #524]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 030f 	and.w	r3, r3, #15
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d001      	beq.n	800bc3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e184      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f003 0304 	and.w	r3, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d010      	beq.n	800bc6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	691a      	ldr	r2, [r3, #16]
 800bc4c:	4b7b      	ldr	r3, [pc, #492]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d908      	bls.n	800bc6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bc58:	4b78      	ldr	r3, [pc, #480]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	4975      	ldr	r1, [pc, #468]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc66:	4313      	orrs	r3, r2
 800bc68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d010      	beq.n	800bc98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	695a      	ldr	r2, [r3, #20]
 800bc7a:	4b70      	ldr	r3, [pc, #448]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d908      	bls.n	800bc98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bc86:	4b6d      	ldr	r3, [pc, #436]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc88:	69db      	ldr	r3, [r3, #28]
 800bc8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	496a      	ldr	r1, [pc, #424]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 0310 	and.w	r3, r3, #16
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	699a      	ldr	r2, [r3, #24]
 800bca8:	4b64      	ldr	r3, [pc, #400]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bcaa:	69db      	ldr	r3, [r3, #28]
 800bcac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d908      	bls.n	800bcc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bcb4:	4b61      	ldr	r3, [pc, #388]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	495e      	ldr	r1, [pc, #376]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0320 	and.w	r3, r3, #32
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d010      	beq.n	800bcf4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	69da      	ldr	r2, [r3, #28]
 800bcd6:	4b59      	ldr	r3, [pc, #356]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d908      	bls.n	800bcf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bce2:	4b56      	ldr	r3, [pc, #344]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	4953      	ldr	r1, [pc, #332]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 0302 	and.w	r3, r3, #2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d010      	beq.n	800bd22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68da      	ldr	r2, [r3, #12]
 800bd04:	4b4d      	ldr	r3, [pc, #308]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd06:	699b      	ldr	r3, [r3, #24]
 800bd08:	f003 030f 	and.w	r3, r3, #15
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d908      	bls.n	800bd22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd10:	4b4a      	ldr	r3, [pc, #296]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	f023 020f 	bic.w	r2, r3, #15
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	4947      	ldr	r1, [pc, #284]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d055      	beq.n	800bdda <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bd2e:	4b43      	ldr	r3, [pc, #268]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	4940      	ldr	r1, [pc, #256]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d107      	bne.n	800bd58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd48:	4b3c      	ldr	r3, [pc, #240]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d121      	bne.n	800bd98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	e0f6      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d107      	bne.n	800bd70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd60:	4b36      	ldr	r3, [pc, #216]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d115      	bne.n	800bd98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e0ea      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d107      	bne.n	800bd88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd78:	4b30      	ldr	r3, [pc, #192]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e0de      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd88:	4b2c      	ldr	r3, [pc, #176]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e0d6      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd98:	4b28      	ldr	r3, [pc, #160]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	f023 0207 	bic.w	r2, r3, #7
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	4925      	ldr	r1, [pc, #148]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bda6:	4313      	orrs	r3, r2
 800bda8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdaa:	f7f9 fa31 	bl	8005210 <HAL_GetTick>
 800bdae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdb0:	e00a      	b.n	800bdc8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdb2:	f7f9 fa2d 	bl	8005210 <HAL_GetTick>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d901      	bls.n	800bdc8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e0be      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d1eb      	bne.n	800bdb2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0302 	and.w	r3, r3, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d010      	beq.n	800be08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68da      	ldr	r2, [r3, #12]
 800bdea:	4b14      	ldr	r3, [pc, #80]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bdec:	699b      	ldr	r3, [r3, #24]
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d208      	bcs.n	800be08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdf6:	4b11      	ldr	r3, [pc, #68]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	f023 020f 	bic.w	r2, r3, #15
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	490e      	ldr	r1, [pc, #56]	; (800be3c <HAL_RCC_ClockConfig+0x244>)
 800be04:	4313      	orrs	r3, r2
 800be06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be08:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 030f 	and.w	r3, r3, #15
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d214      	bcs.n	800be40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be16:	4b08      	ldr	r3, [pc, #32]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f023 020f 	bic.w	r2, r3, #15
 800be1e:	4906      	ldr	r1, [pc, #24]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	4313      	orrs	r3, r2
 800be24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be26:	4b04      	ldr	r3, [pc, #16]	; (800be38 <HAL_RCC_ClockConfig+0x240>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 030f 	and.w	r3, r3, #15
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	429a      	cmp	r2, r3
 800be32:	d005      	beq.n	800be40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800be34:	2301      	movs	r3, #1
 800be36:	e086      	b.n	800bf46 <HAL_RCC_ClockConfig+0x34e>
 800be38:	52002000 	.word	0x52002000
 800be3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0304 	and.w	r3, r3, #4
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d010      	beq.n	800be6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	4b3f      	ldr	r3, [pc, #252]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be58:	429a      	cmp	r2, r3
 800be5a:	d208      	bcs.n	800be6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be5c:	4b3c      	ldr	r3, [pc, #240]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be5e:	699b      	ldr	r3, [r3, #24]
 800be60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	4939      	ldr	r1, [pc, #228]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0308 	and.w	r3, r3, #8
 800be76:	2b00      	cmp	r3, #0
 800be78:	d010      	beq.n	800be9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	4b34      	ldr	r3, [pc, #208]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be86:	429a      	cmp	r2, r3
 800be88:	d208      	bcs.n	800be9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be8a:	4b31      	ldr	r3, [pc, #196]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	492e      	ldr	r1, [pc, #184]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800be98:	4313      	orrs	r3, r2
 800be9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0310 	and.w	r3, r3, #16
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d010      	beq.n	800beca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	699a      	ldr	r2, [r3, #24]
 800beac:	4b28      	ldr	r3, [pc, #160]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800beae:	69db      	ldr	r3, [r3, #28]
 800beb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d208      	bcs.n	800beca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800beb8:	4b25      	ldr	r3, [pc, #148]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	4922      	ldr	r1, [pc, #136]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bec6:	4313      	orrs	r3, r2
 800bec8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d010      	beq.n	800bef8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	69da      	ldr	r2, [r3, #28]
 800beda:	4b1d      	ldr	r3, [pc, #116]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d208      	bcs.n	800bef8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bee6:	4b1a      	ldr	r3, [pc, #104]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bee8:	6a1b      	ldr	r3, [r3, #32]
 800beea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	4917      	ldr	r1, [pc, #92]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bef4:	4313      	orrs	r3, r2
 800bef6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bef8:	f000 f834 	bl	800bf64 <HAL_RCC_GetSysClockFreq>
 800befc:	4602      	mov	r2, r0
 800befe:	4b14      	ldr	r3, [pc, #80]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	0a1b      	lsrs	r3, r3, #8
 800bf04:	f003 030f 	and.w	r3, r3, #15
 800bf08:	4912      	ldr	r1, [pc, #72]	; (800bf54 <HAL_RCC_ClockConfig+0x35c>)
 800bf0a:	5ccb      	ldrb	r3, [r1, r3]
 800bf0c:	f003 031f 	and.w	r3, r3, #31
 800bf10:	fa22 f303 	lsr.w	r3, r2, r3
 800bf14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bf16:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <HAL_RCC_ClockConfig+0x358>)
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	f003 030f 	and.w	r3, r3, #15
 800bf1e:	4a0d      	ldr	r2, [pc, #52]	; (800bf54 <HAL_RCC_ClockConfig+0x35c>)
 800bf20:	5cd3      	ldrb	r3, [r2, r3]
 800bf22:	f003 031f 	and.w	r3, r3, #31
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2c:	4a0a      	ldr	r2, [pc, #40]	; (800bf58 <HAL_RCC_ClockConfig+0x360>)
 800bf2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bf30:	4a0a      	ldr	r2, [pc, #40]	; (800bf5c <HAL_RCC_ClockConfig+0x364>)
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <HAL_RCC_ClockConfig+0x368>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f9 f91e 	bl	800517c <HAL_InitTick>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3718      	adds	r7, #24
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	58024400 	.word	0x58024400
 800bf54:	08026c84 	.word	0x08026c84
 800bf58:	24000004 	.word	0x24000004
 800bf5c:	24000000 	.word	0x24000000
 800bf60:	24000008 	.word	0x24000008

0800bf64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b089      	sub	sp, #36	; 0x24
 800bf68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf6a:	4bb3      	ldr	r3, [pc, #716]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bf72:	2b18      	cmp	r3, #24
 800bf74:	f200 8155 	bhi.w	800c222 <HAL_RCC_GetSysClockFreq+0x2be>
 800bf78:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800bfe5 	.word	0x0800bfe5
 800bf84:	0800c223 	.word	0x0800c223
 800bf88:	0800c223 	.word	0x0800c223
 800bf8c:	0800c223 	.word	0x0800c223
 800bf90:	0800c223 	.word	0x0800c223
 800bf94:	0800c223 	.word	0x0800c223
 800bf98:	0800c223 	.word	0x0800c223
 800bf9c:	0800c223 	.word	0x0800c223
 800bfa0:	0800c00b 	.word	0x0800c00b
 800bfa4:	0800c223 	.word	0x0800c223
 800bfa8:	0800c223 	.word	0x0800c223
 800bfac:	0800c223 	.word	0x0800c223
 800bfb0:	0800c223 	.word	0x0800c223
 800bfb4:	0800c223 	.word	0x0800c223
 800bfb8:	0800c223 	.word	0x0800c223
 800bfbc:	0800c223 	.word	0x0800c223
 800bfc0:	0800c011 	.word	0x0800c011
 800bfc4:	0800c223 	.word	0x0800c223
 800bfc8:	0800c223 	.word	0x0800c223
 800bfcc:	0800c223 	.word	0x0800c223
 800bfd0:	0800c223 	.word	0x0800c223
 800bfd4:	0800c223 	.word	0x0800c223
 800bfd8:	0800c223 	.word	0x0800c223
 800bfdc:	0800c223 	.word	0x0800c223
 800bfe0:	0800c017 	.word	0x0800c017
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfe4:	4b94      	ldr	r3, [pc, #592]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f003 0320 	and.w	r3, r3, #32
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d009      	beq.n	800c004 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bff0:	4b91      	ldr	r3, [pc, #580]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	08db      	lsrs	r3, r3, #3
 800bff6:	f003 0303 	and.w	r3, r3, #3
 800bffa:	4a90      	ldr	r2, [pc, #576]	; (800c23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bffc:	fa22 f303 	lsr.w	r3, r2, r3
 800c000:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c002:	e111      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c004:	4b8d      	ldr	r3, [pc, #564]	; (800c23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c006:	61bb      	str	r3, [r7, #24]
    break;
 800c008:	e10e      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c00a:	4b8d      	ldr	r3, [pc, #564]	; (800c240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c00c:	61bb      	str	r3, [r7, #24]
    break;
 800c00e:	e10b      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c010:	4b8c      	ldr	r3, [pc, #560]	; (800c244 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c012:	61bb      	str	r3, [r7, #24]
    break;
 800c014:	e108      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c016:	4b88      	ldr	r3, [pc, #544]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c020:	4b85      	ldr	r3, [pc, #532]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	091b      	lsrs	r3, r3, #4
 800c026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c02a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c02c:	4b82      	ldr	r3, [pc, #520]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c036:	4b80      	ldr	r3, [pc, #512]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03a:	08db      	lsrs	r3, r3, #3
 800c03c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	fb02 f303 	mul.w	r3, r2, r3
 800c046:	ee07 3a90 	vmov	s15, r3
 800c04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c04e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 80e1 	beq.w	800c21c <HAL_RCC_GetSysClockFreq+0x2b8>
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	f000 8083 	beq.w	800c168 <HAL_RCC_GetSysClockFreq+0x204>
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b02      	cmp	r3, #2
 800c066:	f200 80a1 	bhi.w	800c1ac <HAL_RCC_GetSysClockFreq+0x248>
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <HAL_RCC_GetSysClockFreq+0x114>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d056      	beq.n	800c124 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c076:	e099      	b.n	800c1ac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c078:	4b6f      	ldr	r3, [pc, #444]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0320 	and.w	r3, r3, #32
 800c080:	2b00      	cmp	r3, #0
 800c082:	d02d      	beq.n	800c0e0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c084:	4b6c      	ldr	r3, [pc, #432]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	08db      	lsrs	r3, r3, #3
 800c08a:	f003 0303 	and.w	r3, r3, #3
 800c08e:	4a6b      	ldr	r2, [pc, #428]	; (800c23c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c090:	fa22 f303 	lsr.w	r3, r2, r3
 800c094:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	ee07 3a90 	vmov	s15, r3
 800c09c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ae:	4b62      	ldr	r3, [pc, #392]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b6:	ee07 3a90 	vmov	s15, r3
 800c0ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0be:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c0de:	e087      	b.n	800c1f0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c24c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c0ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0f2:	4b51      	ldr	r3, [pc, #324]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c102:	ed97 6a02 	vldr	s12, [r7, #8]
 800c106:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c10a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c10e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c11a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c11e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c122:	e065      	b.n	800c1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	ee07 3a90 	vmov	s15, r3
 800c12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c250 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c136:	4b40      	ldr	r3, [pc, #256]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13e:	ee07 3a90 	vmov	s15, r3
 800c142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c146:	ed97 6a02 	vldr	s12, [r7, #8]
 800c14a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c14e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c15a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c15e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c166:	e043      	b.n	800c1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	ee07 3a90 	vmov	s15, r3
 800c16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c172:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c254 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c17a:	4b2f      	ldr	r3, [pc, #188]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c182:	ee07 3a90 	vmov	s15, r3
 800c186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c18a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c18e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c19a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c19e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1aa:	e021      	b.n	800c1f0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	ee07 3a90 	vmov	s15, r3
 800c1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c250 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1be:	4b1e      	ldr	r3, [pc, #120]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1c6:	ee07 3a90 	vmov	s15, r3
 800c1ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c1f0:	4b11      	ldr	r3, [pc, #68]	; (800c238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f4:	0a5b      	lsrs	r3, r3, #9
 800c1f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	ee07 3a90 	vmov	s15, r3
 800c204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c208:	edd7 6a07 	vldr	s13, [r7, #28]
 800c20c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c214:	ee17 3a90 	vmov	r3, s15
 800c218:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c21a:	e005      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c21c:	2300      	movs	r3, #0
 800c21e:	61bb      	str	r3, [r7, #24]
    break;
 800c220:	e002      	b.n	800c228 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c222:	4b07      	ldr	r3, [pc, #28]	; (800c240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c224:	61bb      	str	r3, [r7, #24]
    break;
 800c226:	bf00      	nop
  }

  return sysclockfreq;
 800c228:	69bb      	ldr	r3, [r7, #24]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3724      	adds	r7, #36	; 0x24
 800c22e:	46bd      	mov	sp, r7
 800c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c234:	4770      	bx	lr
 800c236:	bf00      	nop
 800c238:	58024400 	.word	0x58024400
 800c23c:	03d09000 	.word	0x03d09000
 800c240:	003d0900 	.word	0x003d0900
 800c244:	007a1200 	.word	0x007a1200
 800c248:	46000000 	.word	0x46000000
 800c24c:	4c742400 	.word	0x4c742400
 800c250:	4a742400 	.word	0x4a742400
 800c254:	4af42400 	.word	0x4af42400

0800c258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c25e:	f7ff fe81 	bl	800bf64 <HAL_RCC_GetSysClockFreq>
 800c262:	4602      	mov	r2, r0
 800c264:	4b10      	ldr	r3, [pc, #64]	; (800c2a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	0a1b      	lsrs	r3, r3, #8
 800c26a:	f003 030f 	and.w	r3, r3, #15
 800c26e:	490f      	ldr	r1, [pc, #60]	; (800c2ac <HAL_RCC_GetHCLKFreq+0x54>)
 800c270:	5ccb      	ldrb	r3, [r1, r3]
 800c272:	f003 031f 	and.w	r3, r3, #31
 800c276:	fa22 f303 	lsr.w	r3, r2, r3
 800c27a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c27c:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	f003 030f 	and.w	r3, r3, #15
 800c284:	4a09      	ldr	r2, [pc, #36]	; (800c2ac <HAL_RCC_GetHCLKFreq+0x54>)
 800c286:	5cd3      	ldrb	r3, [r2, r3]
 800c288:	f003 031f 	and.w	r3, r3, #31
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	fa22 f303 	lsr.w	r3, r2, r3
 800c292:	4a07      	ldr	r2, [pc, #28]	; (800c2b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c294:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c296:	4a07      	ldr	r2, [pc, #28]	; (800c2b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c29c:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800c29e:	681b      	ldr	r3, [r3, #0]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	08026c84 	.word	0x08026c84
 800c2b0:	24000004 	.word	0x24000004
 800c2b4:	24000000 	.word	0x24000000

0800c2b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c2bc:	f7ff ffcc 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	4b06      	ldr	r3, [pc, #24]	; (800c2dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2c4:	69db      	ldr	r3, [r3, #28]
 800c2c6:	091b      	lsrs	r3, r3, #4
 800c2c8:	f003 0307 	and.w	r3, r3, #7
 800c2cc:	4904      	ldr	r1, [pc, #16]	; (800c2e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c2ce:	5ccb      	ldrb	r3, [r1, r3]
 800c2d0:	f003 031f 	and.w	r3, r3, #31
 800c2d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	58024400 	.word	0x58024400
 800c2e0:	08026c84 	.word	0x08026c84

0800c2e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c2e8:	f7ff ffb6 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	0a1b      	lsrs	r3, r3, #8
 800c2f4:	f003 0307 	and.w	r3, r3, #7
 800c2f8:	4904      	ldr	r1, [pc, #16]	; (800c30c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c2fa:	5ccb      	ldrb	r3, [r1, r3]
 800c2fc:	f003 031f 	and.w	r3, r3, #31
 800c300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c304:	4618      	mov	r0, r3
 800c306:	bd80      	pop	{r7, pc}
 800c308:	58024400 	.word	0x58024400
 800c30c:	08026c84 	.word	0x08026c84

0800c310 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c318:	2300      	movs	r3, #0
 800c31a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c31c:	2300      	movs	r3, #0
 800c31e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d03f      	beq.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c330:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c334:	d02a      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c33a:	d824      	bhi.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c33c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c340:	d018      	beq.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c346:	d81e      	bhi.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c34c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c350:	d007      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c352:	e018      	b.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c354:	4ba4      	ldr	r3, [pc, #656]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c358:	4aa3      	ldr	r2, [pc, #652]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c35a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c35e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c360:	e015      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	3304      	adds	r3, #4
 800c366:	2102      	movs	r1, #2
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 ff01 	bl	800e170 <RCCEx_PLL2_Config>
 800c36e:	4603      	mov	r3, r0
 800c370:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c372:	e00c      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3324      	adds	r3, #36	; 0x24
 800c378:	2102      	movs	r1, #2
 800c37a:	4618      	mov	r0, r3
 800c37c:	f001 ffaa 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c384:	e003      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	75fb      	strb	r3, [r7, #23]
      break;
 800c38a:	e000      	b.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c38c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d109      	bne.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c394:	4b94      	ldr	r3, [pc, #592]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c398:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3a0:	4991      	ldr	r1, [pc, #580]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	650b      	str	r3, [r1, #80]	; 0x50
 800c3a6:	e001      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d03d      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3bc:	2b04      	cmp	r3, #4
 800c3be:	d826      	bhi.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c3c0:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c6:	bf00      	nop
 800c3c8:	0800c3dd 	.word	0x0800c3dd
 800c3cc:	0800c3eb 	.word	0x0800c3eb
 800c3d0:	0800c3fd 	.word	0x0800c3fd
 800c3d4:	0800c415 	.word	0x0800c415
 800c3d8:	0800c415 	.word	0x0800c415
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3dc:	4b82      	ldr	r3, [pc, #520]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e0:	4a81      	ldr	r2, [pc, #516]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c3e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3e8:	e015      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 febd 	bl	800e170 <RCCEx_PLL2_Config>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c3fa:	e00c      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	3324      	adds	r3, #36	; 0x24
 800c400:	2100      	movs	r1, #0
 800c402:	4618      	mov	r0, r3
 800c404:	f001 ff66 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c40c:	e003      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
 800c410:	75fb      	strb	r3, [r7, #23]
      break;
 800c412:	e000      	b.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c414:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c416:	7dfb      	ldrb	r3, [r7, #23]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d109      	bne.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c41c:	4b72      	ldr	r3, [pc, #456]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c41e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c420:	f023 0207 	bic.w	r2, r3, #7
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c428:	496f      	ldr	r1, [pc, #444]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c42a:	4313      	orrs	r3, r2
 800c42c:	650b      	str	r3, [r1, #80]	; 0x50
 800c42e:	e001      	b.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d051      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c446:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c44a:	d036      	beq.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c44c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800c450:	d830      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c456:	d032      	beq.n	800c4be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800c458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c45c:	d82a      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c45e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c462:	d02e      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c464:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c468:	d824      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46e:	d018      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c474:	d81e      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800c47a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c47e:	d007      	beq.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c480:	e018      	b.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c482:	4b59      	ldr	r3, [pc, #356]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	4a58      	ldr	r2, [pc, #352]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c48c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c48e:	e019      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3304      	adds	r3, #4
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f001 fe6a 	bl	800e170 <RCCEx_PLL2_Config>
 800c49c:	4603      	mov	r3, r0
 800c49e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c4a0:	e010      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	3324      	adds	r3, #36	; 0x24
 800c4a6:	2100      	movs	r1, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f001 ff13 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4b2:	e007      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c4b8:	e004      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c4ba:	bf00      	nop
 800c4bc:	e002      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c4be:	bf00      	nop
 800c4c0:	e000      	b.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800c4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d10a      	bne.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c4ca:	4b47      	ldr	r3, [pc, #284]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ce:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4d8:	4943      	ldr	r1, [pc, #268]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	658b      	str	r3, [r1, #88]	; 0x58
 800c4de:	e001      	b.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e0:	7dfb      	ldrb	r3, [r7, #23]
 800c4e2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d051      	beq.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c4f6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c4fa:	d036      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800c4fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800c500:	d830      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c502:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c506:	d032      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800c508:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c50c:	d82a      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c50e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c512:	d02e      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800c514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c518:	d824      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c51a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c51e:	d018      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800c520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c524:	d81e      	bhi.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800c52a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c52e:	d007      	beq.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c530:	e018      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c532:	4b2d      	ldr	r3, [pc, #180]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4a2c      	ldr	r2, [pc, #176]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c53c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c53e:	e019      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	3304      	adds	r3, #4
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f001 fe12 	bl	800e170 <RCCEx_PLL2_Config>
 800c54c:	4603      	mov	r3, r0
 800c54e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c550:	e010      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	3324      	adds	r3, #36	; 0x24
 800c556:	2100      	movs	r1, #0
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 febb 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c562:	e007      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c564:	2301      	movs	r3, #1
 800c566:	75fb      	strb	r3, [r7, #23]
      break;
 800c568:	e004      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c56a:	bf00      	nop
 800c56c:	e002      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c56e:	bf00      	nop
 800c570:	e000      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800c572:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c574:	7dfb      	ldrb	r3, [r7, #23]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d10a      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c57a:	4b1b      	ldr	r3, [pc, #108]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c57e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c588:	4917      	ldr	r1, [pc, #92]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c58a:	4313      	orrs	r3, r2
 800c58c:	658b      	str	r3, [r1, #88]	; 0x58
 800c58e:	e001      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
 800c592:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d035      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5a4:	2b30      	cmp	r3, #48	; 0x30
 800c5a6:	d01c      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c5a8:	2b30      	cmp	r3, #48	; 0x30
 800c5aa:	d817      	bhi.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d00c      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800c5b0:	2b20      	cmp	r3, #32
 800c5b2:	d813      	bhi.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d019      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800c5b8:	2b10      	cmp	r3, #16
 800c5ba:	d10f      	bne.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c0:	4a09      	ldr	r2, [pc, #36]	; (800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c5c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c5c8:	e011      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	3304      	adds	r3, #4
 800c5ce:	2102      	movs	r1, #2
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f001 fdcd 	bl	800e170 <RCCEx_PLL2_Config>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800c5da:	e008      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	75fb      	strb	r3, [r7, #23]
      break;
 800c5e0:	e005      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800c5e2:	bf00      	nop
 800c5e4:	e003      	b.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c5e6:	bf00      	nop
 800c5e8:	58024400 	.word	0x58024400
      break;
 800c5ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d109      	bne.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c5f4:	4ba3      	ldr	r3, [pc, #652]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c5f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c600:	49a0      	ldr	r1, [pc, #640]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c602:	4313      	orrs	r3, r2
 800c604:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c606:	e001      	b.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c614:	2b00      	cmp	r3, #0
 800c616:	d047      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c620:	d030      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800c622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c626:	d82a      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c628:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c62c:	d02c      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800c62e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c632:	d824      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c638:	d018      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c63a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c63e:	d81e      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800c640:	2b00      	cmp	r3, #0
 800c642:	d003      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800c644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c648:	d007      	beq.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c64a:	e018      	b.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c64c:	4b8d      	ldr	r3, [pc, #564]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c650:	4a8c      	ldr	r2, [pc, #560]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c658:	e017      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3304      	adds	r3, #4
 800c65e:	2100      	movs	r1, #0
 800c660:	4618      	mov	r0, r3
 800c662:	f001 fd85 	bl	800e170 <RCCEx_PLL2_Config>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c66a:	e00e      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3324      	adds	r3, #36	; 0x24
 800c670:	2100      	movs	r1, #0
 800c672:	4618      	mov	r0, r3
 800c674:	f001 fe2e 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c678:	4603      	mov	r3, r0
 800c67a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c67c:	e005      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	75fb      	strb	r3, [r7, #23]
      break;
 800c682:	e002      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c684:	bf00      	nop
 800c686:	e000      	b.n	800c68a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800c688:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c68a:	7dfb      	ldrb	r3, [r7, #23]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d109      	bne.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c690:	4b7c      	ldr	r3, [pc, #496]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c694:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c69c:	4979      	ldr	r1, [pc, #484]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	650b      	str	r3, [r1, #80]	; 0x50
 800c6a2:	e001      	b.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
 800c6a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d049      	beq.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6bc:	d02e      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800c6be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6c2:	d828      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c6c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6c8:	d02a      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800c6ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c6ce:	d822      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c6d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6d4:	d026      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800c6d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c6da:	d81c      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c6dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6e0:	d010      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c6e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6e6:	d816      	bhi.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01d      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800c6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6f0:	d111      	bne.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f001 fd39 	bl	800e170 <RCCEx_PLL2_Config>
 800c6fe:	4603      	mov	r3, r0
 800c700:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c702:	e012      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	3324      	adds	r3, #36	; 0x24
 800c708:	2101      	movs	r1, #1
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 fde2 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c710:	4603      	mov	r3, r0
 800c712:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c714:	e009      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	75fb      	strb	r3, [r7, #23]
      break;
 800c71a:	e006      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c71c:	bf00      	nop
 800c71e:	e004      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c720:	bf00      	nop
 800c722:	e002      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c724:	bf00      	nop
 800c726:	e000      	b.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800c728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c72a:	7dfb      	ldrb	r3, [r7, #23]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d109      	bne.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c730:	4b54      	ldr	r3, [pc, #336]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c734:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c73c:	4951      	ldr	r1, [pc, #324]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	650b      	str	r3, [r1, #80]	; 0x50
 800c742:	e001      	b.n	800c748 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d04b      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c75a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c75e:	d02e      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800c760:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c764:	d828      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c76a:	d02a      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800c76c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c770:	d822      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c772:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c776:	d026      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800c778:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c77c:	d81c      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c77e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c782:	d010      	beq.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800c784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c788:	d816      	bhi.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d01d      	beq.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800c78e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c792:	d111      	bne.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3304      	adds	r3, #4
 800c798:	2101      	movs	r1, #1
 800c79a:	4618      	mov	r0, r3
 800c79c:	f001 fce8 	bl	800e170 <RCCEx_PLL2_Config>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c7a4:	e012      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3324      	adds	r3, #36	; 0x24
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fd91 	bl	800e2d4 <RCCEx_PLL3_Config>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c7b6:	e009      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c7bc:	e006      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c7be:	bf00      	nop
 800c7c0:	e004      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c7c2:	bf00      	nop
 800c7c4:	e002      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c7c6:	bf00      	nop
 800c7c8:	e000      	b.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800c7ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7cc:	7dfb      	ldrb	r3, [r7, #23]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c7d2:	4b2c      	ldr	r3, [pc, #176]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c7d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c7e0:	4928      	ldr	r1, [pc, #160]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	658b      	str	r3, [r1, #88]	; 0x58
 800c7e6:	e001      	b.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d02f      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c800:	d00e      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800c802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c806:	d814      	bhi.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d015      	beq.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c80c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c810:	d10f      	bne.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c812:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c816:	4a1b      	ldr	r2, [pc, #108]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c81c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c81e:	e00c      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3304      	adds	r3, #4
 800c824:	2101      	movs	r1, #1
 800c826:	4618      	mov	r0, r3
 800c828:	f001 fca2 	bl	800e170 <RCCEx_PLL2_Config>
 800c82c:	4603      	mov	r3, r0
 800c82e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c830:	e003      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c832:	2301      	movs	r3, #1
 800c834:	75fb      	strb	r3, [r7, #23]
      break;
 800c836:	e000      	b.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800c838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d109      	bne.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c840:	4b10      	ldr	r3, [pc, #64]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c844:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c84c:	490d      	ldr	r1, [pc, #52]	; (800c884 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	650b      	str	r3, [r1, #80]	; 0x50
 800c852:	e001      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c860:	2b00      	cmp	r3, #0
 800c862:	d034      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c868:	2b03      	cmp	r3, #3
 800c86a:	d81d      	bhi.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800c86c:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800c86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c872:	bf00      	nop
 800c874:	0800c8af 	.word	0x0800c8af
 800c878:	0800c889 	.word	0x0800c889
 800c87c:	0800c897 	.word	0x0800c897
 800c880:	0800c8af 	.word	0x0800c8af
 800c884:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c888:	4bb1      	ldr	r3, [pc, #708]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88c:	4ab0      	ldr	r2, [pc, #704]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c88e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c894:	e00c      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	3304      	adds	r3, #4
 800c89a:	2102      	movs	r1, #2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 fc67 	bl	800e170 <RCCEx_PLL2_Config>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c8a6:	e003      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c8ac:	e000      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800c8ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c8b0:	7dfb      	ldrb	r3, [r7, #23]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d109      	bne.n	800c8ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c8b6:	4ba6      	ldr	r3, [pc, #664]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c8b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ba:	f023 0203 	bic.w	r2, r3, #3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8c2:	49a3      	ldr	r1, [pc, #652]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c8c8:	e001      	b.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 8086 	beq.w	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8dc:	4b9d      	ldr	r3, [pc, #628]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a9c      	ldr	r2, [pc, #624]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c8e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c8e8:	f7f8 fc92 	bl	8005210 <HAL_GetTick>
 800c8ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c8ee:	e009      	b.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8f0:	f7f8 fc8e 	bl	8005210 <HAL_GetTick>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	1ad3      	subs	r3, r2, r3
 800c8fa:	2b64      	cmp	r3, #100	; 0x64
 800c8fc:	d902      	bls.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800c8fe:	2303      	movs	r3, #3
 800c900:	75fb      	strb	r3, [r7, #23]
        break;
 800c902:	e005      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c904:	4b93      	ldr	r3, [pc, #588]	; (800cb54 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d0ef      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d166      	bne.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c916:	4b8e      	ldr	r3, [pc, #568]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c918:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c920:	4053      	eors	r3, r2
 800c922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c926:	2b00      	cmp	r3, #0
 800c928:	d013      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c92a:	4b89      	ldr	r3, [pc, #548]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c932:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c934:	4b86      	ldr	r3, [pc, #536]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c938:	4a85      	ldr	r2, [pc, #532]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c93a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c93e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c940:	4b83      	ldr	r3, [pc, #524]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c944:	4a82      	ldr	r2, [pc, #520]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c94a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c94c:	4a80      	ldr	r2, [pc, #512]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c95c:	d115      	bne.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c95e:	f7f8 fc57 	bl	8005210 <HAL_GetTick>
 800c962:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c964:	e00b      	b.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c966:	f7f8 fc53 	bl	8005210 <HAL_GetTick>
 800c96a:	4602      	mov	r2, r0
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	f241 3288 	movw	r2, #5000	; 0x1388
 800c974:	4293      	cmp	r3, r2
 800c976:	d902      	bls.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	75fb      	strb	r3, [r7, #23]
            break;
 800c97c:	e005      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c97e:	4b74      	ldr	r3, [pc, #464]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c982:	f003 0302 	and.w	r3, r3, #2
 800c986:	2b00      	cmp	r3, #0
 800c988:	d0ed      	beq.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d126      	bne.n	800c9de <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c99a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c99e:	d10d      	bne.n	800c9bc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800c9a0:	4b6b      	ldr	r3, [pc, #428]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9ae:	0919      	lsrs	r1, r3, #4
 800c9b0:	4b69      	ldr	r3, [pc, #420]	; (800cb58 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800c9b2:	400b      	ands	r3, r1
 800c9b4:	4966      	ldr	r1, [pc, #408]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	610b      	str	r3, [r1, #16]
 800c9ba:	e005      	b.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800c9bc:	4b64      	ldr	r3, [pc, #400]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	4a63      	ldr	r2, [pc, #396]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c9c6:	6113      	str	r3, [r2, #16]
 800c9c8:	4b61      	ldr	r3, [pc, #388]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c9d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9d6:	495e      	ldr	r1, [pc, #376]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	670b      	str	r3, [r1, #112]	; 0x70
 800c9dc:	e004      	b.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	75bb      	strb	r3, [r7, #22]
 800c9e2:	e001      	b.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d07e      	beq.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f8:	2b28      	cmp	r3, #40	; 0x28
 800c9fa:	d867      	bhi.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800c9fc:	a201      	add	r2, pc, #4	; (adr r2, 800ca04 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800c9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca02:	bf00      	nop
 800ca04:	0800cad3 	.word	0x0800cad3
 800ca08:	0800cacd 	.word	0x0800cacd
 800ca0c:	0800cacd 	.word	0x0800cacd
 800ca10:	0800cacd 	.word	0x0800cacd
 800ca14:	0800cacd 	.word	0x0800cacd
 800ca18:	0800cacd 	.word	0x0800cacd
 800ca1c:	0800cacd 	.word	0x0800cacd
 800ca20:	0800cacd 	.word	0x0800cacd
 800ca24:	0800caa9 	.word	0x0800caa9
 800ca28:	0800cacd 	.word	0x0800cacd
 800ca2c:	0800cacd 	.word	0x0800cacd
 800ca30:	0800cacd 	.word	0x0800cacd
 800ca34:	0800cacd 	.word	0x0800cacd
 800ca38:	0800cacd 	.word	0x0800cacd
 800ca3c:	0800cacd 	.word	0x0800cacd
 800ca40:	0800cacd 	.word	0x0800cacd
 800ca44:	0800cabb 	.word	0x0800cabb
 800ca48:	0800cacd 	.word	0x0800cacd
 800ca4c:	0800cacd 	.word	0x0800cacd
 800ca50:	0800cacd 	.word	0x0800cacd
 800ca54:	0800cacd 	.word	0x0800cacd
 800ca58:	0800cacd 	.word	0x0800cacd
 800ca5c:	0800cacd 	.word	0x0800cacd
 800ca60:	0800cacd 	.word	0x0800cacd
 800ca64:	0800cad3 	.word	0x0800cad3
 800ca68:	0800cacd 	.word	0x0800cacd
 800ca6c:	0800cacd 	.word	0x0800cacd
 800ca70:	0800cacd 	.word	0x0800cacd
 800ca74:	0800cacd 	.word	0x0800cacd
 800ca78:	0800cacd 	.word	0x0800cacd
 800ca7c:	0800cacd 	.word	0x0800cacd
 800ca80:	0800cacd 	.word	0x0800cacd
 800ca84:	0800cad3 	.word	0x0800cad3
 800ca88:	0800cacd 	.word	0x0800cacd
 800ca8c:	0800cacd 	.word	0x0800cacd
 800ca90:	0800cacd 	.word	0x0800cacd
 800ca94:	0800cacd 	.word	0x0800cacd
 800ca98:	0800cacd 	.word	0x0800cacd
 800ca9c:	0800cacd 	.word	0x0800cacd
 800caa0:	0800cacd 	.word	0x0800cacd
 800caa4:	0800cad3 	.word	0x0800cad3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	3304      	adds	r3, #4
 800caac:	2101      	movs	r1, #1
 800caae:	4618      	mov	r0, r3
 800cab0:	f001 fb5e 	bl	800e170 <RCCEx_PLL2_Config>
 800cab4:	4603      	mov	r3, r0
 800cab6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cab8:	e00c      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	3324      	adds	r3, #36	; 0x24
 800cabe:	2101      	movs	r1, #1
 800cac0:	4618      	mov	r0, r3
 800cac2:	f001 fc07 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cac6:	4603      	mov	r3, r0
 800cac8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800caca:	e003      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	75fb      	strb	r3, [r7, #23]
      break;
 800cad0:	e000      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800cad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d109      	bne.n	800caee <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cada:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800cadc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cade:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cae6:	491a      	ldr	r1, [pc, #104]	; (800cb50 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800cae8:	4313      	orrs	r3, r2
 800caea:	654b      	str	r3, [r1, #84]	; 0x54
 800caec:	e001      	b.n	800caf2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0302 	and.w	r3, r3, #2
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d03e      	beq.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb02:	2b05      	cmp	r3, #5
 800cb04:	d820      	bhi.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cb5d 	.word	0x0800cb5d
 800cb10:	0800cb25 	.word	0x0800cb25
 800cb14:	0800cb37 	.word	0x0800cb37
 800cb18:	0800cb5d 	.word	0x0800cb5d
 800cb1c:	0800cb5d 	.word	0x0800cb5d
 800cb20:	0800cb5d 	.word	0x0800cb5d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3304      	adds	r3, #4
 800cb28:	2101      	movs	r1, #1
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f001 fb20 	bl	800e170 <RCCEx_PLL2_Config>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cb34:	e013      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	3324      	adds	r3, #36	; 0x24
 800cb3a:	2101      	movs	r1, #1
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 fbc9 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cb46:	e00a      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb4c:	e007      	b.n	800cb5e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800cb4e:	bf00      	nop
 800cb50:	58024400 	.word	0x58024400
 800cb54:	58024800 	.word	0x58024800
 800cb58:	00ffffcf 	.word	0x00ffffcf
      break;
 800cb5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb5e:	7dfb      	ldrb	r3, [r7, #23]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d109      	bne.n	800cb78 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cb64:	4b9f      	ldr	r3, [pc, #636]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb68:	f023 0207 	bic.w	r2, r3, #7
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb70:	499c      	ldr	r1, [pc, #624]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cb72:	4313      	orrs	r3, r2
 800cb74:	654b      	str	r3, [r1, #84]	; 0x54
 800cb76:	e001      	b.n	800cb7c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
 800cb7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d039      	beq.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb8e:	2b05      	cmp	r3, #5
 800cb90:	d820      	bhi.n	800cbd4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800cb92:	a201      	add	r2, pc, #4	; (adr r2, 800cb98 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800cb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb98:	0800cbdb 	.word	0x0800cbdb
 800cb9c:	0800cbb1 	.word	0x0800cbb1
 800cba0:	0800cbc3 	.word	0x0800cbc3
 800cba4:	0800cbdb 	.word	0x0800cbdb
 800cba8:	0800cbdb 	.word	0x0800cbdb
 800cbac:	0800cbdb 	.word	0x0800cbdb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f001 fada 	bl	800e170 <RCCEx_PLL2_Config>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cbc0:	e00c      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3324      	adds	r3, #36	; 0x24
 800cbc6:	2101      	movs	r1, #1
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f001 fb83 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cbd2:	e003      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	75fb      	strb	r3, [r7, #23]
      break;
 800cbd8:	e000      	b.n	800cbdc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800cbda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10a      	bne.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cbe2:	4b80      	ldr	r3, [pc, #512]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cbe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbe6:	f023 0207 	bic.w	r2, r3, #7
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf0:	497c      	ldr	r1, [pc, #496]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	658b      	str	r3, [r1, #88]	; 0x58
 800cbf6:	e001      	b.n	800cbfc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
 800cbfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0320 	and.w	r3, r3, #32
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d04b      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc12:	d02e      	beq.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800cc14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cc18:	d828      	bhi.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800cc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc1e:	d02a      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800cc20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc24:	d822      	bhi.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800cc26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc2a:	d026      	beq.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800cc2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cc30:	d81c      	bhi.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800cc32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc36:	d010      	beq.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800cc38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc3c:	d816      	bhi.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d01d      	beq.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800cc42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc46:	d111      	bne.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	2100      	movs	r1, #0
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f001 fa8e 	bl	800e170 <RCCEx_PLL2_Config>
 800cc54:	4603      	mov	r3, r0
 800cc56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cc58:	e012      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3324      	adds	r3, #36	; 0x24
 800cc5e:	2102      	movs	r1, #2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f001 fb37 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cc66:	4603      	mov	r3, r0
 800cc68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cc6a:	e009      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	75fb      	strb	r3, [r7, #23]
      break;
 800cc70:	e006      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800cc72:	bf00      	nop
 800cc74:	e004      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800cc76:	bf00      	nop
 800cc78:	e002      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800cc7a:	bf00      	nop
 800cc7c:	e000      	b.n	800cc80 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800cc7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc80:	7dfb      	ldrb	r3, [r7, #23]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10a      	bne.n	800cc9c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cc86:	4b57      	ldr	r3, [pc, #348]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc94:	4953      	ldr	r1, [pc, #332]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cc96:	4313      	orrs	r3, r2
 800cc98:	654b      	str	r3, [r1, #84]	; 0x54
 800cc9a:	e001      	b.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc9c:	7dfb      	ldrb	r3, [r7, #23]
 800cc9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d04b      	beq.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ccb2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ccb6:	d02e      	beq.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800ccb8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ccbc:	d828      	bhi.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ccbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc2:	d02a      	beq.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800ccc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccc8:	d822      	bhi.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ccca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ccce:	d026      	beq.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800ccd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ccd4:	d81c      	bhi.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ccd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccda:	d010      	beq.n	800ccfe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ccdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cce0:	d816      	bhi.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d01d      	beq.n	800cd22 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800cce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccea:	d111      	bne.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	2100      	movs	r1, #0
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f001 fa3c 	bl	800e170 <RCCEx_PLL2_Config>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ccfc:	e012      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3324      	adds	r3, #36	; 0x24
 800cd02:	2102      	movs	r1, #2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f001 fae5 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cd0e:	e009      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	75fb      	strb	r3, [r7, #23]
      break;
 800cd14:	e006      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800cd16:	bf00      	nop
 800cd18:	e004      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800cd1a:	bf00      	nop
 800cd1c:	e002      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800cd1e:	bf00      	nop
 800cd20:	e000      	b.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800cd22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10a      	bne.n	800cd40 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cd2a:	4b2e      	ldr	r3, [pc, #184]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd38:	492a      	ldr	r1, [pc, #168]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	658b      	str	r3, [r1, #88]	; 0x58
 800cd3e:	e001      	b.n	800cd44 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d04d      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cd56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cd5a:	d02e      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800cd5c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800cd60:	d828      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800cd62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd66:	d02a      	beq.n	800cdbe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800cd68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd6c:	d822      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800cd6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cd72:	d026      	beq.n	800cdc2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800cd74:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cd78:	d81c      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800cd7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd7e:	d010      	beq.n	800cda2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800cd80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd84:	d816      	bhi.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01d      	beq.n	800cdc6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800cd8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd8e:	d111      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3304      	adds	r3, #4
 800cd94:	2100      	movs	r1, #0
 800cd96:	4618      	mov	r0, r3
 800cd98:	f001 f9ea 	bl	800e170 <RCCEx_PLL2_Config>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cda0:	e012      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	3324      	adds	r3, #36	; 0x24
 800cda6:	2102      	movs	r1, #2
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f001 fa93 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cdb2:	e009      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	75fb      	strb	r3, [r7, #23]
      break;
 800cdb8:	e006      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800cdba:	bf00      	nop
 800cdbc:	e004      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800cdbe:	bf00      	nop
 800cdc0:	e002      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800cdc2:	bf00      	nop
 800cdc4:	e000      	b.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800cdc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdc8:	7dfb      	ldrb	r3, [r7, #23]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10c      	bne.n	800cde8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cdce:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cdd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cddc:	4901      	ldr	r1, [pc, #4]	; (800cde4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	658b      	str	r3, [r1, #88]	; 0x58
 800cde2:	e003      	b.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800cde4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f003 0308 	and.w	r3, r3, #8
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d018      	beq.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce00:	d10a      	bne.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3324      	adds	r3, #36	; 0x24
 800ce06:	2102      	movs	r1, #2
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f001 fa63 	bl	800e2d4 <RCCEx_PLL3_Config>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ce18:	4b8a      	ldr	r3, [pc, #552]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ce1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce24:	4987      	ldr	r1, [pc, #540]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ce26:	4313      	orrs	r3, r2
 800ce28:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 0310 	and.w	r3, r3, #16
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d01a      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce40:	d10a      	bne.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3324      	adds	r3, #36	; 0x24
 800ce46:	2102      	movs	r1, #2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 fa43 	bl	800e2d4 <RCCEx_PLL3_Config>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ce58:	4b7a      	ldr	r3, [pc, #488]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ce5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce66:	4977      	ldr	r1, [pc, #476]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ce68:	4313      	orrs	r3, r2
 800ce6a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d034      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce82:	d01d      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ce84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce88:	d817      	bhi.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ce8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce92:	d009      	beq.n	800cea8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce94:	e011      	b.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f001 f967 	bl	800e170 <RCCEx_PLL2_Config>
 800cea2:	4603      	mov	r3, r0
 800cea4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cea6:	e00c      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3324      	adds	r3, #36	; 0x24
 800ceac:	2102      	movs	r1, #2
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f001 fa10 	bl	800e2d4 <RCCEx_PLL3_Config>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ceb8:	e003      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ceba:	2301      	movs	r3, #1
 800cebc:	75fb      	strb	r3, [r7, #23]
      break;
 800cebe:	e000      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800cec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cec8:	4b5e      	ldr	r3, [pc, #376]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ceca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cecc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ced6:	495b      	ldr	r1, [pc, #364]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ced8:	4313      	orrs	r3, r2
 800ceda:	658b      	str	r3, [r1, #88]	; 0x58
 800cedc:	e001      	b.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cede:	7dfb      	ldrb	r3, [r7, #23]
 800cee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d033      	beq.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cef4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cef8:	d01c      	beq.n	800cf34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800cefa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cefe:	d816      	bhi.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800cf00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf04:	d003      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800cf06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cf0a:	d007      	beq.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800cf0c:	e00f      	b.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf0e:	4b4d      	ldr	r3, [pc, #308]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	4a4c      	ldr	r2, [pc, #304]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800cf1a:	e00c      	b.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3324      	adds	r3, #36	; 0x24
 800cf20:	2101      	movs	r1, #1
 800cf22:	4618      	mov	r0, r3
 800cf24:	f001 f9d6 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800cf2c:	e003      	b.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	75fb      	strb	r3, [r7, #23]
      break;
 800cf32:	e000      	b.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800cf34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10a      	bne.n	800cf52 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cf3c:	4b41      	ldr	r3, [pc, #260]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf4a:	493e      	ldr	r1, [pc, #248]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	654b      	str	r3, [r1, #84]	; 0x54
 800cf50:	e001      	b.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d029      	beq.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d003      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800cf6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf6e:	d007      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cf70:	e00f      	b.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf72:	4b34      	ldr	r3, [pc, #208]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	4a33      	ldr	r2, [pc, #204]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cf78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cf7e:	e00b      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	3304      	adds	r3, #4
 800cf84:	2102      	movs	r1, #2
 800cf86:	4618      	mov	r0, r3
 800cf88:	f001 f8f2 	bl	800e170 <RCCEx_PLL2_Config>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cf90:	e002      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	75fb      	strb	r3, [r7, #23]
      break;
 800cf96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cf9e:	4b29      	ldr	r3, [pc, #164]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cfa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfa2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfaa:	4926      	ldr	r1, [pc, #152]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cfb0:	e001      	b.n	800cfb6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3324      	adds	r3, #36	; 0x24
 800cfc6:	2102      	movs	r1, #2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f001 f983 	bl	800e2d4 <RCCEx_PLL3_Config>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d001      	beq.n	800cfd8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d033      	beq.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfec:	d017      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800cfee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cff2:	d811      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800cff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cff8:	d013      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800cffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cffe:	d80b      	bhi.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800d000:	2b00      	cmp	r3, #0
 800d002:	d010      	beq.n	800d026 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800d004:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d008:	d106      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d00a:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800d00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00e:	4a0d      	ldr	r2, [pc, #52]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800d010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d016:	e007      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	75fb      	strb	r3, [r7, #23]
      break;
 800d01c:	e004      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800d01e:	bf00      	nop
 800d020:	e002      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800d022:	bf00      	nop
 800d024:	e000      	b.n	800d028 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800d026:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d028:	7dfb      	ldrb	r3, [r7, #23]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d10c      	bne.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d02e:	4b05      	ldr	r3, [pc, #20]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800d030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d03a:	4902      	ldr	r1, [pc, #8]	; (800d044 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800d03c:	4313      	orrs	r3, r2
 800d03e:	654b      	str	r3, [r1, #84]	; 0x54
 800d040:	e004      	b.n	800d04c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800d042:	bf00      	nop
 800d044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d054:	2b00      	cmp	r3, #0
 800d056:	d008      	beq.n	800d06a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d058:	4b29      	ldr	r3, [pc, #164]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d05c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d064:	4926      	ldr	r1, [pc, #152]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d066:	4313      	orrs	r3, r2
 800d068:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d008      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d076:	4b22      	ldr	r3, [pc, #136]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d07a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d082:	491f      	ldr	r1, [pc, #124]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d084:	4313      	orrs	r3, r2
 800d086:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00d      	beq.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d094:	4b1a      	ldr	r3, [pc, #104]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d096:	691b      	ldr	r3, [r3, #16]
 800d098:	4a19      	ldr	r2, [pc, #100]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d09a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d09e:	6113      	str	r3, [r2, #16]
 800d0a0:	4b17      	ldr	r3, [pc, #92]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0a2:	691a      	ldr	r2, [r3, #16]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d0aa:	4915      	ldr	r1, [pc, #84]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	da08      	bge.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0c4:	490e      	ldr	r1, [pc, #56]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d009      	beq.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d0d6:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0e4:	4906      	ldr	r1, [pc, #24]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d0ea:	7dbb      	ldrb	r3, [r7, #22]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e000      	b.n	800d0f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800d0f4:	2301      	movs	r3, #1
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3718      	adds	r7, #24
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	58024400 	.word	0x58024400

0800d104 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b090      	sub	sp, #64	; 0x40
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d112:	f040 8089 	bne.w	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800d116:	4b95      	ldr	r3, [pc, #596]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d11a:	f003 0307 	and.w	r3, r3, #7
 800d11e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	2b04      	cmp	r3, #4
 800d124:	d87d      	bhi.n	800d222 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800d126:	a201      	add	r2, pc, #4	; (adr r2, 800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800d128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d12c:	0800d141 	.word	0x0800d141
 800d130:	0800d165 	.word	0x0800d165
 800d134:	0800d189 	.word	0x0800d189
 800d138:	0800d21d 	.word	0x0800d21d
 800d13c:	0800d1ad 	.word	0x0800d1ad
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d140:	4b8a      	ldr	r3, [pc, #552]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d14c:	d107      	bne.n	800d15e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d14e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d152:	4618      	mov	r0, r3
 800d154:	f000 feba 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800d158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d15c:	e3ef      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d162:	e3ec      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d164:	4b81      	ldr	r3, [pc, #516]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d16c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d170:	d107      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d172:	f107 0318 	add.w	r3, r7, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f000 fc00 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d180:	e3dd      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d186:	e3da      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d188:	4b78      	ldr	r3, [pc, #480]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d194:	d107      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d196:	f107 030c 	add.w	r3, r7, #12
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fd42 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d1a4:	e3cb      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d1aa:	e3c8      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d1ac:	4b6f      	ldr	r3, [pc, #444]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d1b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d1b6:	4b6d      	ldr	r3, [pc, #436]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f003 0304 	and.w	r3, r3, #4
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d10c      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800d1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d109      	bne.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d1c8:	4b68      	ldr	r3, [pc, #416]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	08db      	lsrs	r3, r3, #3
 800d1ce:	f003 0303 	and.w	r3, r3, #3
 800d1d2:	4a67      	ldr	r2, [pc, #412]	; (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d1d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1da:	e01e      	b.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d1dc:	4b63      	ldr	r3, [pc, #396]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1e8:	d106      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800d1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1f0:	d102      	bne.n	800d1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d1f2:	4b60      	ldr	r3, [pc, #384]	; (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1f6:	e010      	b.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1f8:	4b5c      	ldr	r3, [pc, #368]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d204:	d106      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d20c:	d102      	bne.n	800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d20e:	4b5a      	ldr	r3, [pc, #360]	; (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d210:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d212:	e002      	b.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d218:	e391      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d21a:	e390      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d21c:	4b57      	ldr	r3, [pc, #348]	; (800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d21e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d220:	e38d      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800d222:	2300      	movs	r3, #0
 800d224:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d226:	e38a      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d22e:	f040 80a7 	bne.w	800d380 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800d232:	4b4e      	ldr	r3, [pc, #312]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d236:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800d23a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d23e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d242:	d054      	beq.n	800d2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800d244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d24a:	f200 808b 	bhi.w	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d254:	f000 8083 	beq.w	800d35e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d25e:	f200 8081 	bhi.w	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d268:	d02f      	beq.n	800d2ca <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d270:	d878      	bhi.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	2b00      	cmp	r3, #0
 800d276:	d004      	beq.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d27e:	d012      	beq.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800d280:	e070      	b.n	800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d282:	4b3a      	ldr	r3, [pc, #232]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d28a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d28e:	d107      	bne.n	800d2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d294:	4618      	mov	r0, r3
 800d296:	f000 fe19 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d29e:	e34e      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2a4:	e34b      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2a6:	4b31      	ldr	r3, [pc, #196]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2b2:	d107      	bne.n	800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2b4:	f107 0318 	add.w	r3, r7, #24
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fb5f 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d2c2:	e33c      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2c8:	e339      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2ca:	4b28      	ldr	r3, [pc, #160]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d6:	d107      	bne.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2d8:	f107 030c 	add.w	r3, r7, #12
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 fca1 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d2e6:	e32a      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d2ec:	e327      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d2ee:	4b1f      	ldr	r3, [pc, #124]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d2f6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2f8:	4b1c      	ldr	r3, [pc, #112]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 0304 	and.w	r3, r3, #4
 800d300:	2b04      	cmp	r3, #4
 800d302:	d10c      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800d304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d30a:	4b18      	ldr	r3, [pc, #96]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	08db      	lsrs	r3, r3, #3
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	4a16      	ldr	r2, [pc, #88]	; (800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800d316:	fa22 f303 	lsr.w	r3, r2, r3
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d31c:	e01e      	b.n	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d31e:	4b13      	ldr	r3, [pc, #76]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d32a:	d106      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800d32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d332:	d102      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d334:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d338:	e010      	b.n	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d33a:	4b0c      	ldr	r3, [pc, #48]	; (800d36c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d346:	d106      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800d348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d34e:	d102      	bne.n	800d356 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d350:	4b09      	ldr	r3, [pc, #36]	; (800d378 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800d352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d354:	e002      	b.n	800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d35a:	e2f0      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d35c:	e2ef      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d35e:	4b07      	ldr	r3, [pc, #28]	; (800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800d360:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d362:	e2ec      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d368:	e2e9      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d36a:	bf00      	nop
 800d36c:	58024400 	.word	0x58024400
 800d370:	03d09000 	.word	0x03d09000
 800d374:	003d0900 	.word	0x003d0900
 800d378:	007a1200 	.word	0x007a1200
 800d37c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d386:	f040 809c 	bne.w	800d4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800d38a:	4b9d      	ldr	r3, [pc, #628]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800d392:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800d394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d39a:	d054      	beq.n	800d446 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d3a2:	f200 808b 	bhi.w	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d3ac:	f000 8083 	beq.w	800d4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d3b6:	f200 8081 	bhi.w	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3c0:	d02f      	beq.n	800d422 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3c8:	d878      	bhi.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d004      	beq.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d3d6:	d012      	beq.n	800d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d3d8:	e070      	b.n	800d4bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3da:	4b89      	ldr	r3, [pc, #548]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3e6:	d107      	bne.n	800d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 fd6d 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d3f6:	e2a2      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d3fc:	e29f      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3fe:	4b80      	ldr	r3, [pc, #512]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d40a:	d107      	bne.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d40c:	f107 0318 	add.w	r3, r7, #24
 800d410:	4618      	mov	r0, r3
 800d412:	f000 fab3 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800d41a:	e290      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d420:	e28d      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d422:	4b77      	ldr	r3, [pc, #476]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d42a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d42e:	d107      	bne.n	800d440 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d430:	f107 030c 	add.w	r3, r7, #12
 800d434:	4618      	mov	r0, r3
 800d436:	f000 fbf5 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d43e:	e27e      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d444:	e27b      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d446:	4b6e      	ldr	r3, [pc, #440]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d44a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d44e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d450:	4b6b      	ldr	r3, [pc, #428]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 0304 	and.w	r3, r3, #4
 800d458:	2b04      	cmp	r3, #4
 800d45a:	d10c      	bne.n	800d476 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800d45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d109      	bne.n	800d476 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d462:	4b67      	ldr	r3, [pc, #412]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	08db      	lsrs	r3, r3, #3
 800d468:	f003 0303 	and.w	r3, r3, #3
 800d46c:	4a65      	ldr	r2, [pc, #404]	; (800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d46e:	fa22 f303 	lsr.w	r3, r2, r3
 800d472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d474:	e01e      	b.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d476:	4b62      	ldr	r3, [pc, #392]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d482:	d106      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800d484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d48a:	d102      	bne.n	800d492 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d48c:	4b5e      	ldr	r3, [pc, #376]	; (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d48e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d490:	e010      	b.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d492:	4b5b      	ldr	r3, [pc, #364]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d49a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d49e:	d106      	bne.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800d4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d4a6:	d102      	bne.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d4a8:	4b58      	ldr	r3, [pc, #352]	; (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d4ac:	e002      	b.n	800d4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d4b2:	e244      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d4b4:	e243      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d4b6:	4b56      	ldr	r3, [pc, #344]	; (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4ba:	e240      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d4c0:	e23d      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4c8:	f040 80a7 	bne.w	800d61a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800d4cc:	4b4c      	ldr	r3, [pc, #304]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800d4d4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4dc:	d055      	beq.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4e4:	f200 8096 	bhi.w	800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4ee:	f000 8084 	beq.w	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d4f8:	f200 808c 	bhi.w	800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d502:	d030      	beq.n	800d566 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d50a:	f200 8083 	bhi.w	800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800d50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d510:	2b00      	cmp	r3, #0
 800d512:	d004      	beq.n	800d51e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d51a:	d012      	beq.n	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800d51c:	e07a      	b.n	800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d51e:	4b38      	ldr	r3, [pc, #224]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d52a:	d107      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d52c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d530:	4618      	mov	r0, r3
 800d532:	f000 fccb 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d53a:	e200      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d540:	e1fd      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d542:	4b2f      	ldr	r3, [pc, #188]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d54a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d54e:	d107      	bne.n	800d560 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d550:	f107 0318 	add.w	r3, r7, #24
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fa11 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d55e:	e1ee      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d560:	2300      	movs	r3, #0
 800d562:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d564:	e1eb      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d566:	4b26      	ldr	r3, [pc, #152]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d56e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d572:	d107      	bne.n	800d584 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d574:	f107 030c 	add.w	r3, r7, #12
 800d578:	4618      	mov	r0, r3
 800d57a:	f000 fb53 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d582:	e1dc      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d588:	e1d9      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d58a:	4b1d      	ldr	r3, [pc, #116]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d58c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d58e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d592:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d594:	4b1a      	ldr	r3, [pc, #104]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0304 	and.w	r3, r3, #4
 800d59c:	2b04      	cmp	r3, #4
 800d59e:	d10c      	bne.n	800d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800d5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d109      	bne.n	800d5ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5a6:	4b16      	ldr	r3, [pc, #88]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	08db      	lsrs	r3, r3, #3
 800d5ac:	f003 0303 	and.w	r3, r3, #3
 800d5b0:	4a14      	ldr	r2, [pc, #80]	; (800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800d5b2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5b8:	e01e      	b.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d5ba:	4b11      	ldr	r3, [pc, #68]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5c6:	d106      	bne.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800d5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5ce:	d102      	bne.n	800d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d5d0:	4b0d      	ldr	r3, [pc, #52]	; (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5d4:	e010      	b.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d5d6:	4b0a      	ldr	r3, [pc, #40]	; (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d5e2:	d106      	bne.n	800d5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800d5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d5ea:	d102      	bne.n	800d5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d5ec:	4b07      	ldr	r3, [pc, #28]	; (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800d5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5f0:	e002      	b.n	800d5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d5f6:	e1a2      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d5f8:	e1a1      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800d5fa:	4b05      	ldr	r3, [pc, #20]	; (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800d5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d5fe:	e19e      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d600:	58024400 	.word	0x58024400
 800d604:	03d09000 	.word	0x03d09000
 800d608:	003d0900 	.word	0x003d0900
 800d60c:	007a1200 	.word	0x007a1200
 800d610:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d618:	e191      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d620:	d173      	bne.n	800d70a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800d622:	4b9b      	ldr	r3, [pc, #620]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d626:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d62a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d62e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d632:	d02f      	beq.n	800d694 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d63a:	d863      	bhi.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d648:	d012      	beq.n	800d670 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800d64a:	e05b      	b.n	800d704 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d64c:	4b90      	ldr	r3, [pc, #576]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d658:	d107      	bne.n	800d66a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d65a:	f107 0318 	add.w	r3, r7, #24
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 f98c 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d668:	e169      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d66e:	e166      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d670:	4b87      	ldr	r3, [pc, #540]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d67c:	d107      	bne.n	800d68e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d67e:	f107 030c 	add.w	r3, r7, #12
 800d682:	4618      	mov	r0, r3
 800d684:	f000 face 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d68c:	e157      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d692:	e154      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800d694:	4b7e      	ldr	r3, [pc, #504]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d69c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d69e:	4b7c      	ldr	r3, [pc, #496]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0304 	and.w	r3, r3, #4
 800d6a6:	2b04      	cmp	r3, #4
 800d6a8:	d10c      	bne.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800d6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d109      	bne.n	800d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d6b0:	4b77      	ldr	r3, [pc, #476]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	08db      	lsrs	r3, r3, #3
 800d6b6:	f003 0303 	and.w	r3, r3, #3
 800d6ba:	4a76      	ldr	r2, [pc, #472]	; (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d6bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6c2:	e01e      	b.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d6c4:	4b72      	ldr	r3, [pc, #456]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6d0:	d106      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800d6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6d8:	d102      	bne.n	800d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800d6da:	4b6f      	ldr	r3, [pc, #444]	; (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6de:	e010      	b.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d6e0:	4b6b      	ldr	r3, [pc, #428]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d6ec:	d106      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6f4:	d102      	bne.n	800d6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800d6f6:	4b69      	ldr	r3, [pc, #420]	; (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6fa:	e002      	b.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800d700:	e11d      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d702:	e11c      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800d704:	2300      	movs	r3, #0
 800d706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d708:	e119      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d710:	d133      	bne.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800d712:	4b5f      	ldr	r3, [pc, #380]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d71a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d004      	beq.n	800d72c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800d722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d728:	d012      	beq.n	800d750 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800d72a:	e023      	b.n	800d774 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d72c:	4b58      	ldr	r3, [pc, #352]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d734:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d738:	d107      	bne.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d73a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fbc4 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d748:	e0f9      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d74e:	e0f6      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d750:	4b4f      	ldr	r3, [pc, #316]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d75c:	d107      	bne.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d75e:	f107 0318 	add.w	r3, r7, #24
 800d762:	4618      	mov	r0, r3
 800d764:	f000 f90a 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d76c:	e0e7      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d772:	e0e4      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800d774:	2300      	movs	r3, #0
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d778:	e0e1      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d780:	f040 808e 	bne.w	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800d784:	4b42      	ldr	r3, [pc, #264]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d788:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d78c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d794:	d06b      	beq.n	800d86e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800d796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d79c:	d874      	bhi.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7a4:	d056      	beq.n	800d854 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800d7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ac:	d86c      	bhi.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d7b4:	d03b      	beq.n	800d82e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d7bc:	d864      	bhi.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7c4:	d021      	beq.n	800d80a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7cc:	d85c      	bhi.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d004      	beq.n	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7da:	d004      	beq.n	800d7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800d7dc:	e054      	b.n	800d888 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d7de:	f000 f8b7 	bl	800d950 <HAL_RCCEx_GetD3PCLK1Freq>
 800d7e2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800d7e4:	e0ab      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7e6:	4b2a      	ldr	r3, [pc, #168]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d7f2:	d107      	bne.n	800d804 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7f4:	f107 0318 	add.w	r3, r7, #24
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 f8bf 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d802:	e09c      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d808:	e099      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d80a:	4b21      	ldr	r3, [pc, #132]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d816:	d107      	bne.n	800d828 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d818:	f107 030c 	add.w	r3, r7, #12
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 fa01 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d826:	e08a      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d82c:	e087      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d82e:	4b18      	ldr	r3, [pc, #96]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f003 0304 	and.w	r3, r3, #4
 800d836:	2b04      	cmp	r3, #4
 800d838:	d109      	bne.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d83a:	4b15      	ldr	r3, [pc, #84]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	08db      	lsrs	r3, r3, #3
 800d840:	f003 0303 	and.w	r3, r3, #3
 800d844:	4a13      	ldr	r2, [pc, #76]	; (800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800d846:	fa22 f303 	lsr.w	r3, r2, r3
 800d84a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d84c:	e077      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d852:	e074      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d854:	4b0e      	ldr	r3, [pc, #56]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d860:	d102      	bne.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800d862:	4b0d      	ldr	r3, [pc, #52]	; (800d898 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800d864:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800d866:	e06a      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d86c:	e067      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d86e:	4b08      	ldr	r3, [pc, #32]	; (800d890 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d87a:	d102      	bne.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800d87c:	4b07      	ldr	r3, [pc, #28]	; (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800d87e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d880:	e05d      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d882:	2300      	movs	r3, #0
 800d884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d886:	e05a      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800d888:	2300      	movs	r3, #0
 800d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d88c:	e057      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d88e:	bf00      	nop
 800d890:	58024400 	.word	0x58024400
 800d894:	03d09000 	.word	0x03d09000
 800d898:	003d0900 	.word	0x003d0900
 800d89c:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8a6:	d148      	bne.n	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800d8a8:	4b27      	ldr	r3, [pc, #156]	; (800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d8b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8b8:	d02a      	beq.n	800d910 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d8c0:	d838      	bhi.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d004      	beq.n	800d8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8ce:	d00d      	beq.n	800d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800d8d0:	e030      	b.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d8d2:	4b1d      	ldr	r3, [pc, #116]	; (800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d8de:	d102      	bne.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800d8e0:	4b1a      	ldr	r3, [pc, #104]	; (800d94c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d8e4:	e02b      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d8ea:	e028      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d8ec:	4b16      	ldr	r3, [pc, #88]	; (800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8f8:	d107      	bne.n	800d90a <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d8fe:	4618      	mov	r0, r3
 800d900:	f000 fae4 	bl	800decc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d908:	e019      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d90e:	e016      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d910:	4b0d      	ldr	r3, [pc, #52]	; (800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d91c:	d107      	bne.n	800d92e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d91e:	f107 0318 	add.w	r3, r7, #24
 800d922:	4618      	mov	r0, r3
 800d924:	f000 f82a 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d928:	69fb      	ldr	r3, [r7, #28]
 800d92a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800d92c:	e007      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d932:	e004      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800d938:	e001      	b.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800d93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d940:	4618      	mov	r0, r3
 800d942:	3740      	adds	r7, #64	; 0x40
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}
 800d948:	58024400 	.word	0x58024400
 800d94c:	007a1200 	.word	0x007a1200

0800d950 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d954:	f7fe fc80 	bl	800c258 <HAL_RCC_GetHCLKFreq>
 800d958:	4602      	mov	r2, r0
 800d95a:	4b06      	ldr	r3, [pc, #24]	; (800d974 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	091b      	lsrs	r3, r3, #4
 800d960:	f003 0307 	and.w	r3, r3, #7
 800d964:	4904      	ldr	r1, [pc, #16]	; (800d978 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d966:	5ccb      	ldrb	r3, [r1, r3]
 800d968:	f003 031f 	and.w	r3, r3, #31
 800d96c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d970:	4618      	mov	r0, r3
 800d972:	bd80      	pop	{r7, pc}
 800d974:	58024400 	.word	0x58024400
 800d978:	08026c84 	.word	0x08026c84

0800d97c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b089      	sub	sp, #36	; 0x24
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d984:	4ba1      	ldr	r3, [pc, #644]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d98e:	4b9f      	ldr	r3, [pc, #636]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d992:	0b1b      	lsrs	r3, r3, #12
 800d994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d998:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d99a:	4b9c      	ldr	r3, [pc, #624]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99e:	091b      	lsrs	r3, r3, #4
 800d9a0:	f003 0301 	and.w	r3, r3, #1
 800d9a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d9a6:	4b99      	ldr	r3, [pc, #612]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9aa:	08db      	lsrs	r3, r3, #3
 800d9ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	fb02 f303 	mul.w	r3, r2, r3
 800d9b6:	ee07 3a90 	vmov	s15, r3
 800d9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 8111 	beq.w	800dbec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	f000 8083 	beq.w	800dad8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	f200 80a1 	bhi.w	800db1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d056      	beq.n	800da94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d9e6:	e099      	b.n	800db1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9e8:	4b88      	ldr	r3, [pc, #544]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0320 	and.w	r3, r3, #32
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d02d      	beq.n	800da50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d9f4:	4b85      	ldr	r3, [pc, #532]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	08db      	lsrs	r3, r3, #3
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	4a84      	ldr	r2, [pc, #528]	; (800dc10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800da00:	fa22 f303 	lsr.w	r3, r2, r3
 800da04:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	ee07 3a90 	vmov	s15, r3
 800da0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	ee07 3a90 	vmov	s15, r3
 800da16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da1e:	4b7b      	ldr	r3, [pc, #492]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da26:	ee07 3a90 	vmov	s15, r3
 800da2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800da4e:	e087      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	ee07 3a90 	vmov	s15, r3
 800da56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dc18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800da5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da62:	4b6a      	ldr	r3, [pc, #424]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da6a:	ee07 3a90 	vmov	s15, r3
 800da6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da72:	ed97 6a03 	vldr	s12, [r7, #12]
 800da76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da92:	e065      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	ee07 3a90 	vmov	s15, r3
 800da9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800daa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daa6:	4b59      	ldr	r3, [pc, #356]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daae:	ee07 3a90 	vmov	s15, r3
 800dab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800daba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800daca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dad6:	e043      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	ee07 3a90 	vmov	s15, r3
 800dade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dc20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800dae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daea:	4b48      	ldr	r3, [pc, #288]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daf2:	ee07 3a90 	vmov	s15, r3
 800daf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dafa:	ed97 6a03 	vldr	s12, [r7, #12]
 800dafe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db1a:	e021      	b.n	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	ee07 3a90 	vmov	s15, r3
 800db22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dc1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800db2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db2e:	4b37      	ldr	r3, [pc, #220]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db36:	ee07 3a90 	vmov	s15, r3
 800db3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800db42:	eddf 5a34 	vldr	s11, [pc, #208]	; 800dc14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800db46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800db5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800db60:	4b2a      	ldr	r3, [pc, #168]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	0a5b      	lsrs	r3, r3, #9
 800db66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db6a:	ee07 3a90 	vmov	s15, r3
 800db6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db86:	ee17 2a90 	vmov	r2, s15
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800db8e:	4b1f      	ldr	r3, [pc, #124]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db98:	ee07 3a90 	vmov	s15, r3
 800db9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dba4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dba8:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbb4:	ee17 2a90 	vmov	r2, s15
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800dbbc:	4b13      	ldr	r3, [pc, #76]	; (800dc0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc0:	0e1b      	lsrs	r3, r3, #24
 800dbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc6:	ee07 3a90 	vmov	s15, r3
 800dbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dbd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe2:	ee17 2a90 	vmov	r2, s15
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800dbea:	e008      	b.n	800dbfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	609a      	str	r2, [r3, #8]
}
 800dbfe:	bf00      	nop
 800dc00:	3724      	adds	r7, #36	; 0x24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	03d09000 	.word	0x03d09000
 800dc14:	46000000 	.word	0x46000000
 800dc18:	4c742400 	.word	0x4c742400
 800dc1c:	4a742400 	.word	0x4a742400
 800dc20:	4af42400 	.word	0x4af42400

0800dc24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b089      	sub	sp, #36	; 0x24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dc2c:	4ba1      	ldr	r3, [pc, #644]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc30:	f003 0303 	and.w	r3, r3, #3
 800dc34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800dc36:	4b9f      	ldr	r3, [pc, #636]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	0d1b      	lsrs	r3, r3, #20
 800dc3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dc42:	4b9c      	ldr	r3, [pc, #624]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	0a1b      	lsrs	r3, r3, #8
 800dc48:	f003 0301 	and.w	r3, r3, #1
 800dc4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800dc4e:	4b99      	ldr	r3, [pc, #612]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc52:	08db      	lsrs	r3, r3, #3
 800dc54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	fb02 f303 	mul.w	r3, r2, r3
 800dc5e:	ee07 3a90 	vmov	s15, r3
 800dc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f000 8111 	beq.w	800de94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	f000 8083 	beq.w	800dd80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dc7a:	69bb      	ldr	r3, [r7, #24]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	f200 80a1 	bhi.w	800ddc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d003      	beq.n	800dc90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d056      	beq.n	800dd3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc8e:	e099      	b.n	800ddc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc90:	4b88      	ldr	r3, [pc, #544]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 0320 	and.w	r3, r3, #32
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d02d      	beq.n	800dcf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dc9c:	4b85      	ldr	r3, [pc, #532]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	08db      	lsrs	r3, r3, #3
 800dca2:	f003 0303 	and.w	r3, r3, #3
 800dca6:	4a84      	ldr	r2, [pc, #528]	; (800deb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dca8:	fa22 f303 	lsr.w	r3, r2, r3
 800dcac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	ee07 3a90 	vmov	s15, r3
 800dcb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	ee07 3a90 	vmov	s15, r3
 800dcbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc6:	4b7b      	ldr	r3, [pc, #492]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcce:	ee07 3a90 	vmov	s15, r3
 800dcd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcda:	eddf 5a78 	vldr	s11, [pc, #480]	; 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dcea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dcf6:	e087      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	ee07 3a90 	vmov	s15, r3
 800dcfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800dec0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dd06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd0a:	4b6a      	ldr	r3, [pc, #424]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd12:	ee07 3a90 	vmov	s15, r3
 800dd16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd3a:	e065      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	ee07 3a90 	vmov	s15, r3
 800dd42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800dec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd4e:	4b59      	ldr	r3, [pc, #356]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd56:	ee07 3a90 	vmov	s15, r3
 800dd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd7e:	e043      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	ee07 3a90 	vmov	s15, r3
 800dd86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800dec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd92:	4b48      	ldr	r3, [pc, #288]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd9a:	ee07 3a90 	vmov	s15, r3
 800dd9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dda2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dda6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ddc2:	e021      	b.n	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	ee07 3a90 	vmov	s15, r3
 800ddca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ddd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddd6:	4b37      	ldr	r3, [pc, #220]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddde:	ee07 3a90 	vmov	s15, r3
 800dde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dde6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800debc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ddee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ddfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800de06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800de08:	4b2a      	ldr	r3, [pc, #168]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de0c:	0a5b      	lsrs	r3, r3, #9
 800de0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de12:	ee07 3a90 	vmov	s15, r3
 800de16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de22:	edd7 6a07 	vldr	s13, [r7, #28]
 800de26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de2e:	ee17 2a90 	vmov	r2, s15
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800de36:	4b1f      	ldr	r3, [pc, #124]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3a:	0c1b      	lsrs	r3, r3, #16
 800de3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de40:	ee07 3a90 	vmov	s15, r3
 800de44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de50:	edd7 6a07 	vldr	s13, [r7, #28]
 800de54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de5c:	ee17 2a90 	vmov	r2, s15
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800de64:	4b13      	ldr	r3, [pc, #76]	; (800deb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800de66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de68:	0e1b      	lsrs	r3, r3, #24
 800de6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800de7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800de82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de8a:	ee17 2a90 	vmov	r2, s15
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de92:	e008      	b.n	800dea6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2200      	movs	r2, #0
 800dea4:	609a      	str	r2, [r3, #8]
}
 800dea6:	bf00      	nop
 800dea8:	3724      	adds	r7, #36	; 0x24
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	58024400 	.word	0x58024400
 800deb8:	03d09000 	.word	0x03d09000
 800debc:	46000000 	.word	0x46000000
 800dec0:	4c742400 	.word	0x4c742400
 800dec4:	4a742400 	.word	0x4a742400
 800dec8:	4af42400 	.word	0x4af42400

0800decc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800decc:	b480      	push	{r7}
 800dece:	b089      	sub	sp, #36	; 0x24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ded4:	4ba0      	ldr	r3, [pc, #640]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ded6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ded8:	f003 0303 	and.w	r3, r3, #3
 800dedc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800dede:	4b9e      	ldr	r3, [pc, #632]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee2:	091b      	lsrs	r3, r3, #4
 800dee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dee8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800deea:	4b9b      	ldr	r3, [pc, #620]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800deec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deee:	f003 0301 	and.w	r3, r3, #1
 800def2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800def4:	4b98      	ldr	r3, [pc, #608]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800def6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def8:	08db      	lsrs	r3, r3, #3
 800defa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800defe:	693a      	ldr	r2, [r7, #16]
 800df00:	fb02 f303 	mul.w	r3, r2, r3
 800df04:	ee07 3a90 	vmov	s15, r3
 800df08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	f000 8111 	beq.w	800e13a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	f000 8083 	beq.w	800e026 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	2b02      	cmp	r3, #2
 800df24:	f200 80a1 	bhi.w	800e06a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d056      	beq.n	800dfe2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800df34:	e099      	b.n	800e06a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df36:	4b88      	ldr	r3, [pc, #544]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d02d      	beq.n	800df9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800df42:	4b85      	ldr	r3, [pc, #532]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	08db      	lsrs	r3, r3, #3
 800df48:	f003 0303 	and.w	r3, r3, #3
 800df4c:	4a83      	ldr	r2, [pc, #524]	; (800e15c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800df4e:	fa22 f303 	lsr.w	r3, r2, r3
 800df52:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	ee07 3a90 	vmov	s15, r3
 800df5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	ee07 3a90 	vmov	s15, r3
 800df64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df6c:	4b7a      	ldr	r3, [pc, #488]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df74:	ee07 3a90 	vmov	s15, r3
 800df78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800df80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800e160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800df84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800df9c:	e087      	b.n	800e0ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	ee07 3a90 	vmov	s15, r3
 800dfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfa8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800e164 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dfac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfb0:	4b69      	ldr	r3, [pc, #420]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfb8:	ee07 3a90 	vmov	s15, r3
 800dfbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfc4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800e160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dfc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dfe0:	e065      	b.n	800e0ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	ee07 3a90 	vmov	s15, r3
 800dfe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800e168 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dff0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dff4:	4b58      	ldr	r3, [pc, #352]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dffc:	ee07 3a90 	vmov	s15, r3
 800e000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e004:	ed97 6a03 	vldr	s12, [r7, #12]
 800e008:	eddf 5a55 	vldr	s11, [pc, #340]	; 800e160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e00c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e010:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e020:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e024:	e043      	b.n	800e0ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	ee07 3a90 	vmov	s15, r3
 800e02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e030:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800e16c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e038:	4b47      	ldr	r3, [pc, #284]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e040:	ee07 3a90 	vmov	s15, r3
 800e044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e048:	ed97 6a03 	vldr	s12, [r7, #12]
 800e04c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e050:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e054:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e058:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e05c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e060:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e064:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e068:	e021      	b.n	800e0ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	ee07 3a90 	vmov	s15, r3
 800e070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e074:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e164 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e07c:	4b36      	ldr	r3, [pc, #216]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e084:	ee07 3a90 	vmov	s15, r3
 800e088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e08c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e090:	eddf 5a33 	vldr	s11, [pc, #204]	; 800e160 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e09c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e0ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800e0ae:	4b2a      	ldr	r3, [pc, #168]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b2:	0a5b      	lsrs	r3, r3, #9
 800e0b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b8:	ee07 3a90 	vmov	s15, r3
 800e0bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e0d4:	ee17 2a90 	vmov	r2, s15
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800e0dc:	4b1e      	ldr	r3, [pc, #120]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e0de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e0:	0c1b      	lsrs	r3, r3, #16
 800e0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e6:	ee07 3a90 	vmov	s15, r3
 800e0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e0f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e0f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e0fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e102:	ee17 2a90 	vmov	r2, s15
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800e10a:	4b13      	ldr	r3, [pc, #76]	; (800e158 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10e:	0e1b      	lsrs	r3, r3, #24
 800e110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e114:	ee07 3a90 	vmov	s15, r3
 800e118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e11c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e120:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e124:	edd7 6a07 	vldr	s13, [r7, #28]
 800e128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e12c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e130:	ee17 2a90 	vmov	r2, s15
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e138:	e008      	b.n	800e14c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2200      	movs	r2, #0
 800e144:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2200      	movs	r2, #0
 800e14a:	609a      	str	r2, [r3, #8]
}
 800e14c:	bf00      	nop
 800e14e:	3724      	adds	r7, #36	; 0x24
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	58024400 	.word	0x58024400
 800e15c:	03d09000 	.word	0x03d09000
 800e160:	46000000 	.word	0x46000000
 800e164:	4c742400 	.word	0x4c742400
 800e168:	4a742400 	.word	0x4a742400
 800e16c:	4af42400 	.word	0x4af42400

0800e170 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e17e:	4b53      	ldr	r3, [pc, #332]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	2b03      	cmp	r3, #3
 800e188:	d101      	bne.n	800e18e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	e099      	b.n	800e2c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e18e:	4b4f      	ldr	r3, [pc, #316]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a4e      	ldr	r2, [pc, #312]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e194:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e19a:	f7f7 f839 	bl	8005210 <HAL_GetTick>
 800e19e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e1a0:	e008      	b.n	800e1b4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e1a2:	f7f7 f835 	bl	8005210 <HAL_GetTick>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	1ad3      	subs	r3, r2, r3
 800e1ac:	2b02      	cmp	r3, #2
 800e1ae:	d901      	bls.n	800e1b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e1b0:	2303      	movs	r3, #3
 800e1b2:	e086      	b.n	800e2c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e1b4:	4b45      	ldr	r3, [pc, #276]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d1f0      	bne.n	800e1a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e1c0:	4b42      	ldr	r3, [pc, #264]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e1c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	031b      	lsls	r3, r3, #12
 800e1ce:	493f      	ldr	r1, [pc, #252]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	628b      	str	r3, [r1, #40]	; 0x28
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	025b      	lsls	r3, r3, #9
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	431a      	orrs	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	041b      	lsls	r3, r3, #16
 800e1f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e1f6:	431a      	orrs	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	691b      	ldr	r3, [r3, #16]
 800e1fc:	3b01      	subs	r3, #1
 800e1fe:	061b      	lsls	r3, r3, #24
 800e200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e204:	4931      	ldr	r1, [pc, #196]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e206:	4313      	orrs	r3, r2
 800e208:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e20a:	4b30      	ldr	r3, [pc, #192]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	492d      	ldr	r1, [pc, #180]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e21c:	4b2b      	ldr	r3, [pc, #172]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e220:	f023 0220 	bic.w	r2, r3, #32
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	4928      	ldr	r1, [pc, #160]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e22a:	4313      	orrs	r3, r2
 800e22c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e22e:	4b27      	ldr	r3, [pc, #156]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e232:	4a26      	ldr	r2, [pc, #152]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e234:	f023 0310 	bic.w	r3, r3, #16
 800e238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e23a:	4b24      	ldr	r3, [pc, #144]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e23c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e23e:	4b24      	ldr	r3, [pc, #144]	; (800e2d0 <RCCEx_PLL2_Config+0x160>)
 800e240:	4013      	ands	r3, r2
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	69d2      	ldr	r2, [r2, #28]
 800e246:	00d2      	lsls	r2, r2, #3
 800e248:	4920      	ldr	r1, [pc, #128]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e24a:	4313      	orrs	r3, r2
 800e24c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e24e:	4b1f      	ldr	r3, [pc, #124]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e252:	4a1e      	ldr	r2, [pc, #120]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e254:	f043 0310 	orr.w	r3, r3, #16
 800e258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d106      	bne.n	800e26e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e260:	4b1a      	ldr	r3, [pc, #104]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e264:	4a19      	ldr	r2, [pc, #100]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e266:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e26a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e26c:	e00f      	b.n	800e28e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d106      	bne.n	800e282 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e274:	4b15      	ldr	r3, [pc, #84]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e278:	4a14      	ldr	r2, [pc, #80]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e27a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e27e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e280:	e005      	b.n	800e28e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e282:	4b12      	ldr	r3, [pc, #72]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e286:	4a11      	ldr	r2, [pc, #68]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e28c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e28e:	4b0f      	ldr	r3, [pc, #60]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4a0e      	ldr	r2, [pc, #56]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e294:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e29a:	f7f6 ffb9 	bl	8005210 <HAL_GetTick>
 800e29e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e2a0:	e008      	b.n	800e2b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800e2a2:	f7f6 ffb5 	bl	8005210 <HAL_GetTick>
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d901      	bls.n	800e2b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	e006      	b.n	800e2c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e2b4:	4b05      	ldr	r3, [pc, #20]	; (800e2cc <RCCEx_PLL2_Config+0x15c>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0f0      	beq.n	800e2a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	58024400 	.word	0x58024400
 800e2d0:	ffff0007 	.word	0xffff0007

0800e2d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e2e2:	4b53      	ldr	r3, [pc, #332]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e6:	f003 0303 	and.w	r3, r3, #3
 800e2ea:	2b03      	cmp	r3, #3
 800e2ec:	d101      	bne.n	800e2f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e099      	b.n	800e426 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e2f2:	4b4f      	ldr	r3, [pc, #316]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a4e      	ldr	r2, [pc, #312]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e2f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e2fe:	f7f6 ff87 	bl	8005210 <HAL_GetTick>
 800e302:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e304:	e008      	b.n	800e318 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e306:	f7f6 ff83 	bl	8005210 <HAL_GetTick>
 800e30a:	4602      	mov	r2, r0
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	2b02      	cmp	r3, #2
 800e312:	d901      	bls.n	800e318 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e086      	b.n	800e426 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e318:	4b45      	ldr	r3, [pc, #276]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1f0      	bne.n	800e306 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e324:	4b42      	ldr	r3, [pc, #264]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e328:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	051b      	lsls	r3, r3, #20
 800e332:	493f      	ldr	r1, [pc, #252]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e334:	4313      	orrs	r3, r2
 800e336:	628b      	str	r3, [r1, #40]	; 0x28
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	3b01      	subs	r3, #1
 800e33e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	689b      	ldr	r3, [r3, #8]
 800e346:	3b01      	subs	r3, #1
 800e348:	025b      	lsls	r3, r3, #9
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	431a      	orrs	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	3b01      	subs	r3, #1
 800e354:	041b      	lsls	r3, r3, #16
 800e356:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e35a:	431a      	orrs	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	691b      	ldr	r3, [r3, #16]
 800e360:	3b01      	subs	r3, #1
 800e362:	061b      	lsls	r3, r3, #24
 800e364:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e368:	4931      	ldr	r1, [pc, #196]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e36a:	4313      	orrs	r3, r2
 800e36c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e36e:	4b30      	ldr	r3, [pc, #192]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e372:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	695b      	ldr	r3, [r3, #20]
 800e37a:	492d      	ldr	r1, [pc, #180]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e37c:	4313      	orrs	r3, r2
 800e37e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e380:	4b2b      	ldr	r3, [pc, #172]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e384:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	4928      	ldr	r1, [pc, #160]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e38e:	4313      	orrs	r3, r2
 800e390:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e392:	4b27      	ldr	r3, [pc, #156]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e396:	4a26      	ldr	r2, [pc, #152]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e39c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e39e:	4b24      	ldr	r3, [pc, #144]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3a2:	4b24      	ldr	r3, [pc, #144]	; (800e434 <RCCEx_PLL3_Config+0x160>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	69d2      	ldr	r2, [r2, #28]
 800e3aa:	00d2      	lsls	r2, r2, #3
 800e3ac:	4920      	ldr	r1, [pc, #128]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e3b2:	4b1f      	ldr	r3, [pc, #124]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b6:	4a1e      	ldr	r2, [pc, #120]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e3c4:	4b1a      	ldr	r3, [pc, #104]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c8:	4a19      	ldr	r2, [pc, #100]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e3ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e3d0:	e00f      	b.n	800e3f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d106      	bne.n	800e3e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e3d8:	4b15      	ldr	r3, [pc, #84]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3dc:	4a14      	ldr	r2, [pc, #80]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e3e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e3e4:	e005      	b.n	800e3f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ea:	4a11      	ldr	r2, [pc, #68]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e3f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e3f2:	4b0f      	ldr	r3, [pc, #60]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4a0e      	ldr	r2, [pc, #56]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e3f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3fe:	f7f6 ff07 	bl	8005210 <HAL_GetTick>
 800e402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e404:	e008      	b.n	800e418 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e406:	f7f6 ff03 	bl	8005210 <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	2b02      	cmp	r3, #2
 800e412:	d901      	bls.n	800e418 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e006      	b.n	800e426 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e418:	4b05      	ldr	r3, [pc, #20]	; (800e430 <RCCEx_PLL3_Config+0x15c>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d0f0      	beq.n	800e406 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	58024400 	.word	0x58024400
 800e434:	ffff0007 	.word	0xffff0007

0800e438 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d067      	beq.n	800e51a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7f5 fac8 	bl	80039f4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	22ca      	movs	r2, #202	; 0xca
 800e472:	625a      	str	r2, [r3, #36]	; 0x24
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2253      	movs	r2, #83	; 0x53
 800e47a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 f879 	bl	800e574 <RTC_EnterInitMode>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d13b      	bne.n	800e504 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	6899      	ldr	r1, [r3, #8]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	4b23      	ldr	r3, [pc, #140]	; (800e524 <HAL_RTC_Init+0xec>)
 800e498:	400b      	ands	r3, r1
 800e49a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6899      	ldr	r1, [r3, #8]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	431a      	orrs	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	431a      	orrs	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	430a      	orrs	r2, r1
 800e4b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	0419      	lsls	r1, r3, #16
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68da      	ldr	r2, [r3, #12]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	430a      	orrs	r2, r1
 800e4ca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 f885 	bl	800e5dc <RTC_ExitInitMode>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800e4d6:	7bfb      	ldrb	r3, [r7, #15]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d113      	bne.n	800e504 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f022 0203 	bic.w	r2, r2, #3
 800e4ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	69da      	ldr	r2, [r3, #28]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	695b      	ldr	r3, [r3, #20]
 800e4fa:	431a      	orrs	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	430a      	orrs	r2, r1
 800e502:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	22ff      	movs	r2, #255	; 0xff
 800e50a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800e50c:	7bfb      	ldrb	r3, [r7, #15]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d103      	bne.n	800e51a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2201      	movs	r2, #1
 800e516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800e51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	ff8fffbf 	.word	0xff8fffbf

0800e528 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	68da      	ldr	r2, [r3, #12]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800e53e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800e540:	f7f6 fe66 	bl	8005210 <HAL_GetTick>
 800e544:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e546:	e009      	b.n	800e55c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e548:	f7f6 fe62 	bl	8005210 <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e556:	d901      	bls.n	800e55c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800e558:	2303      	movs	r3, #3
 800e55a:	e007      	b.n	800e56c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	f003 0320 	and.w	r3, r3, #32
 800e566:	2b00      	cmp	r3, #0
 800e568:	d0ee      	beq.n	800e548 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d120      	bne.n	800e5d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f04f 32ff 	mov.w	r2, #4294967295
 800e596:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e598:	f7f6 fe3a 	bl	8005210 <HAL_GetTick>
 800e59c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e59e:	e00d      	b.n	800e5bc <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e5a0:	f7f6 fe36 	bl	8005210 <HAL_GetTick>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5ae:	d905      	bls.n	800e5bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2203      	movs	r2, #3
 800e5b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d102      	bne.n	800e5d0 <RTC_EnterInitMode+0x5c>
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
 800e5cc:	2b03      	cmp	r3, #3
 800e5ce:	d1e7      	bne.n	800e5a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800e5e8:	4b1a      	ldr	r3, [pc, #104]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e5ea:	68db      	ldr	r3, [r3, #12]
 800e5ec:	4a19      	ldr	r2, [pc, #100]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e5ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5f2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e5f4:	4b17      	ldr	r3, [pc, #92]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f003 0320 	and.w	r3, r3, #32
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10c      	bne.n	800e61a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff ff91 	bl	800e528 <HAL_RTC_WaitForSynchro>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d01e      	beq.n	800e64a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2203      	movs	r2, #3
 800e610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e614:	2303      	movs	r3, #3
 800e616:	73fb      	strb	r3, [r7, #15]
 800e618:	e017      	b.n	800e64a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e61a:	4b0e      	ldr	r3, [pc, #56]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	4a0d      	ldr	r2, [pc, #52]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e620:	f023 0320 	bic.w	r3, r3, #32
 800e624:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f7ff ff7e 	bl	800e528 <HAL_RTC_WaitForSynchro>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d005      	beq.n	800e63e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2203      	movs	r2, #3
 800e636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e63a:	2303      	movs	r3, #3
 800e63c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e63e:	4b05      	ldr	r3, [pc, #20]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	4a04      	ldr	r2, [pc, #16]	; (800e654 <RTC_ExitInitMode+0x78>)
 800e644:	f043 0320 	orr.w	r3, r3, #32
 800e648:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3710      	adds	r7, #16
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	58004000 	.word	0x58004000

0800e658 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d101      	bne.n	800e66a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e666:	2301      	movs	r3, #1
 800e668:	e0f1      	b.n	800e84e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2200      	movs	r2, #0
 800e66e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a78      	ldr	r2, [pc, #480]	; (800e858 <HAL_SPI_Init+0x200>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d00f      	beq.n	800e69a <HAL_SPI_Init+0x42>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a77      	ldr	r2, [pc, #476]	; (800e85c <HAL_SPI_Init+0x204>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d00a      	beq.n	800e69a <HAL_SPI_Init+0x42>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a75      	ldr	r2, [pc, #468]	; (800e860 <HAL_SPI_Init+0x208>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d005      	beq.n	800e69a <HAL_SPI_Init+0x42>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	2b0f      	cmp	r3, #15
 800e694:	d901      	bls.n	800e69a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e0d9      	b.n	800e84e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f8e2 	bl	800e864 <SPI_GetPacketSize>
 800e6a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a6c      	ldr	r2, [pc, #432]	; (800e858 <HAL_SPI_Init+0x200>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d00c      	beq.n	800e6c6 <HAL_SPI_Init+0x6e>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a6a      	ldr	r2, [pc, #424]	; (800e85c <HAL_SPI_Init+0x204>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d007      	beq.n	800e6c6 <HAL_SPI_Init+0x6e>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	4a69      	ldr	r2, [pc, #420]	; (800e860 <HAL_SPI_Init+0x208>)
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d002      	beq.n	800e6c6 <HAL_SPI_Init+0x6e>
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2b08      	cmp	r3, #8
 800e6c4:	d811      	bhi.n	800e6ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e6ca:	4a63      	ldr	r2, [pc, #396]	; (800e858 <HAL_SPI_Init+0x200>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d009      	beq.n	800e6e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a61      	ldr	r2, [pc, #388]	; (800e85c <HAL_SPI_Init+0x204>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d004      	beq.n	800e6e4 <HAL_SPI_Init+0x8c>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a60      	ldr	r2, [pc, #384]	; (800e860 <HAL_SPI_Init+0x208>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d104      	bne.n	800e6ee <HAL_SPI_Init+0x96>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2b10      	cmp	r3, #16
 800e6e8:	d901      	bls.n	800e6ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e0af      	b.n	800e84e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7f5 f9fc 	bl	8003b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2202      	movs	r2, #2
 800e70c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0201 	bic.w	r2, r2, #1
 800e71e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e72a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	699b      	ldr	r3, [r3, #24]
 800e730:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e734:	d119      	bne.n	800e76a <HAL_SPI_Init+0x112>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e73e:	d103      	bne.n	800e748 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e744:	2b00      	cmp	r3, #0
 800e746:	d008      	beq.n	800e75a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10c      	bne.n	800e76a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e758:	d107      	bne.n	800e76a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e768:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	69da      	ldr	r2, [r3, #28]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e772:	431a      	orrs	r2, r3
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	431a      	orrs	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e77c:	ea42 0103 	orr.w	r1, r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68da      	ldr	r2, [r3, #12]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e794:	431a      	orrs	r2, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79a:	431a      	orrs	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	431a      	orrs	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	695b      	ldr	r3, [r3, #20]
 800e7ac:	431a      	orrs	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6a1b      	ldr	r3, [r3, #32]
 800e7b2:	431a      	orrs	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	431a      	orrs	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7be:	431a      	orrs	r2, r3
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	689b      	ldr	r3, [r3, #8]
 800e7c4:	431a      	orrs	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7ca:	ea42 0103 	orr.w	r1, r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	430a      	orrs	r2, r1
 800e7d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d113      	bne.n	800e80a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e808:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0201 	bic.w	r2, r2, #1
 800e818:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00a      	beq.n	800e83c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	430a      	orrs	r2, r1
 800e83a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2201      	movs	r2, #1
 800e848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e84c:	2300      	movs	r3, #0
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	40013000 	.word	0x40013000
 800e85c:	40003800 	.word	0x40003800
 800e860:	40003c00 	.word	0x40003c00

0800e864 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e864:	b480      	push	{r7}
 800e866:	b085      	sub	sp, #20
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e870:	095b      	lsrs	r3, r3, #5
 800e872:	3301      	adds	r3, #1
 800e874:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	3301      	adds	r3, #1
 800e87c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	3307      	adds	r3, #7
 800e882:	08db      	lsrs	r3, r3, #3
 800e884:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3714      	adds	r7, #20
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e89a:	b580      	push	{r7, lr}
 800e89c:	b082      	sub	sp, #8
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	e049      	b.n	800e940 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d106      	bne.n	800e8c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f7f6 f849 	bl	8004958 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2202      	movs	r2, #2
 800e8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	4610      	mov	r0, r2
 800e8da:	f000 fdff 	bl	800f4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2201      	movs	r2, #1
 800e8e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2201      	movs	r2, #1
 800e902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2201      	movs	r2, #1
 800e90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2201      	movs	r2, #1
 800e912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2201      	movs	r2, #1
 800e91a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2201      	movs	r2, #1
 800e932:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d001      	beq.n	800e960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e95c:	2301      	movs	r3, #1
 800e95e:	e05e      	b.n	800ea1e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2202      	movs	r2, #2
 800e964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f042 0201 	orr.w	r2, r2, #1
 800e976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a2b      	ldr	r2, [pc, #172]	; (800ea2c <HAL_TIM_Base_Start_IT+0xe4>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d02c      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e98a:	d027      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a27      	ldr	r2, [pc, #156]	; (800ea30 <HAL_TIM_Base_Start_IT+0xe8>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d022      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a26      	ldr	r2, [pc, #152]	; (800ea34 <HAL_TIM_Base_Start_IT+0xec>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d01d      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a24      	ldr	r2, [pc, #144]	; (800ea38 <HAL_TIM_Base_Start_IT+0xf0>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d018      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a23      	ldr	r2, [pc, #140]	; (800ea3c <HAL_TIM_Base_Start_IT+0xf4>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d013      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a21      	ldr	r2, [pc, #132]	; (800ea40 <HAL_TIM_Base_Start_IT+0xf8>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d00e      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a20      	ldr	r2, [pc, #128]	; (800ea44 <HAL_TIM_Base_Start_IT+0xfc>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d009      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	4a1e      	ldr	r2, [pc, #120]	; (800ea48 <HAL_TIM_Base_Start_IT+0x100>)
 800e9ce:	4293      	cmp	r3, r2
 800e9d0:	d004      	beq.n	800e9dc <HAL_TIM_Base_Start_IT+0x94>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ea4c <HAL_TIM_Base_Start_IT+0x104>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d115      	bne.n	800ea08 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	689a      	ldr	r2, [r3, #8]
 800e9e2:	4b1b      	ldr	r3, [pc, #108]	; (800ea50 <HAL_TIM_Base_Start_IT+0x108>)
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2b06      	cmp	r3, #6
 800e9ec:	d015      	beq.n	800ea1a <HAL_TIM_Base_Start_IT+0xd2>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f4:	d011      	beq.n	800ea1a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f042 0201 	orr.w	r2, r2, #1
 800ea04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea06:	e008      	b.n	800ea1a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f042 0201 	orr.w	r2, r2, #1
 800ea16:	601a      	str	r2, [r3, #0]
 800ea18:	e000      	b.n	800ea1c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea1c:	2300      	movs	r3, #0
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	40010000 	.word	0x40010000
 800ea30:	40000400 	.word	0x40000400
 800ea34:	40000800 	.word	0x40000800
 800ea38:	40000c00 	.word	0x40000c00
 800ea3c:	40010400 	.word	0x40010400
 800ea40:	40001800 	.word	0x40001800
 800ea44:	40014000 	.word	0x40014000
 800ea48:	4000e000 	.word	0x4000e000
 800ea4c:	4000e400 	.word	0x4000e400
 800ea50:	00010007 	.word	0x00010007

0800ea54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	e049      	b.n	800eafa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d106      	bne.n	800ea80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7f5 fe9c 	bl	80047b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2202      	movs	r2, #2
 800ea84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f000 fd22 	bl	800f4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2201      	movs	r2, #1
 800eab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2201      	movs	r2, #1
 800eabc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2201      	movs	r2, #1
 800eac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2201      	movs	r2, #1
 800eaec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b082      	sub	sp, #8
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800eb10:	2301      	movs	r3, #1
 800eb12:	e049      	b.n	800eba8 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d106      	bne.n	800eb2e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7f5 ffb5 	bl	8004a98 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2202      	movs	r2, #2
 800eb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	4619      	mov	r1, r3
 800eb40:	4610      	mov	r0, r2
 800eb42:	f000 fccb 	bl	800f4dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2201      	movs	r2, #1
 800eb4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2201      	movs	r2, #1
 800eb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2201      	movs	r2, #1
 800eb9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2201      	movs	r2, #1
 800eba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eba6:	2300      	movs	r3, #0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3708      	adds	r7, #8
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d101      	bne.n	800ebc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e08f      	b.n	800ece4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f7f5 ff13 	bl	8004a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2202      	movs	r2, #2
 800ebe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	6899      	ldr	r1, [r3, #8]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	4b3e      	ldr	r3, [pc, #248]	; (800ecec <HAL_TIM_Encoder_Init+0x13c>)
 800ebf2:	400b      	ands	r3, r1
 800ebf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	3304      	adds	r3, #4
 800ebfe:	4619      	mov	r1, r3
 800ec00:	4610      	mov	r0, r2
 800ec02:	f000 fc6b 	bl	800f4dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	689b      	ldr	r3, [r3, #8]
 800ec0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	699b      	ldr	r3, [r3, #24]
 800ec14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	6a1b      	ldr	r3, [r3, #32]
 800ec1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	4b31      	ldr	r3, [pc, #196]	; (800ecf0 <HAL_TIM_Encoder_Init+0x140>)
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	689a      	ldr	r2, [r3, #8]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	699b      	ldr	r3, [r3, #24]
 800ec38:	021b      	lsls	r3, r3, #8
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	693a      	ldr	r2, [r7, #16]
 800ec3e:	4313      	orrs	r3, r2
 800ec40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ec42:	693a      	ldr	r2, [r7, #16]
 800ec44:	4b2b      	ldr	r3, [pc, #172]	; (800ecf4 <HAL_TIM_Encoder_Init+0x144>)
 800ec46:	4013      	ands	r3, r2
 800ec48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	4b2a      	ldr	r3, [pc, #168]	; (800ecf8 <HAL_TIM_Encoder_Init+0x148>)
 800ec4e:	4013      	ands	r3, r2
 800ec50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	68da      	ldr	r2, [r3, #12]
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	69db      	ldr	r3, [r3, #28]
 800ec5a:	021b      	lsls	r3, r3, #8
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	691b      	ldr	r3, [r3, #16]
 800ec68:	011a      	lsls	r2, r3, #4
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	6a1b      	ldr	r3, [r3, #32]
 800ec6e:	031b      	lsls	r3, r3, #12
 800ec70:	4313      	orrs	r3, r2
 800ec72:	693a      	ldr	r2, [r7, #16]
 800ec74:	4313      	orrs	r3, r2
 800ec76:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ec7e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ec86:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	695b      	ldr	r3, [r3, #20]
 800ec90:	011b      	lsls	r3, r3, #4
 800ec92:	4313      	orrs	r3, r2
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	697a      	ldr	r2, [r7, #20]
 800eca0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2201      	movs	r2, #1
 800ecce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2201      	movs	r2, #1
 800ecde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ece2:	2300      	movs	r3, #0
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	fffebff8 	.word	0xfffebff8
 800ecf0:	fffffcfc 	.word	0xfffffcfc
 800ecf4:	fffff3f3 	.word	0xfffff3f3
 800ecf8:	ffff0f0f 	.word	0xffff0f0f

0800ecfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	691b      	ldr	r3, [r3, #16]
 800ed0a:	f003 0302 	and.w	r3, r3, #2
 800ed0e:	2b02      	cmp	r3, #2
 800ed10:	d122      	bne.n	800ed58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	f003 0302 	and.w	r3, r3, #2
 800ed1c:	2b02      	cmp	r3, #2
 800ed1e:	d11b      	bne.n	800ed58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f06f 0202 	mvn.w	r2, #2
 800ed28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	f003 0303 	and.w	r3, r3, #3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d003      	beq.n	800ed46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 fbae 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800ed44:	e005      	b.n	800ed52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fba0 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 fbb1 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2200      	movs	r2, #0
 800ed56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	691b      	ldr	r3, [r3, #16]
 800ed5e:	f003 0304 	and.w	r3, r3, #4
 800ed62:	2b04      	cmp	r3, #4
 800ed64:	d122      	bne.n	800edac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	f003 0304 	and.w	r3, r3, #4
 800ed70:	2b04      	cmp	r3, #4
 800ed72:	d11b      	bne.n	800edac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f06f 0204 	mvn.w	r2, #4
 800ed7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2202      	movs	r2, #2
 800ed82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	699b      	ldr	r3, [r3, #24]
 800ed8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d003      	beq.n	800ed9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fb84 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800ed98:	e005      	b.n	800eda6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fb76 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fb87 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	691b      	ldr	r3, [r3, #16]
 800edb2:	f003 0308 	and.w	r3, r3, #8
 800edb6:	2b08      	cmp	r3, #8
 800edb8:	d122      	bne.n	800ee00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	f003 0308 	and.w	r3, r3, #8
 800edc4:	2b08      	cmp	r3, #8
 800edc6:	d11b      	bne.n	800ee00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f06f 0208 	mvn.w	r2, #8
 800edd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2204      	movs	r2, #4
 800edd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	69db      	ldr	r3, [r3, #28]
 800edde:	f003 0303 	and.w	r3, r3, #3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d003      	beq.n	800edee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fb5a 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800edec:	e005      	b.n	800edfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f000 fb4c 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 fb5d 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2200      	movs	r2, #0
 800edfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	691b      	ldr	r3, [r3, #16]
 800ee06:	f003 0310 	and.w	r3, r3, #16
 800ee0a:	2b10      	cmp	r3, #16
 800ee0c:	d122      	bne.n	800ee54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	f003 0310 	and.w	r3, r3, #16
 800ee18:	2b10      	cmp	r3, #16
 800ee1a:	d11b      	bne.n	800ee54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f06f 0210 	mvn.w	r2, #16
 800ee24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2208      	movs	r2, #8
 800ee2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	69db      	ldr	r3, [r3, #28]
 800ee32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d003      	beq.n	800ee42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fb30 	bl	800f4a0 <HAL_TIM_IC_CaptureCallback>
 800ee40:	e005      	b.n	800ee4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 fb22 	bl	800f48c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fb33 	bl	800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	691b      	ldr	r3, [r3, #16]
 800ee5a:	f003 0301 	and.w	r3, r3, #1
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d10e      	bne.n	800ee80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d107      	bne.n	800ee80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f06f 0201 	mvn.w	r2, #1
 800ee78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f009 fea8 	bl	8018bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee8a:	2b80      	cmp	r3, #128	; 0x80
 800ee8c:	d10e      	bne.n	800eeac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee98:	2b80      	cmp	r3, #128	; 0x80
 800ee9a:	d107      	bne.n	800eeac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800eea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f001 f9ae 	bl	8010208 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	691b      	ldr	r3, [r3, #16]
 800eeb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeba:	d10e      	bne.n	800eeda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eec6:	2b80      	cmp	r3, #128	; 0x80
 800eec8:	d107      	bne.n	800eeda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f001 f9a1 	bl	801021c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	691b      	ldr	r3, [r3, #16]
 800eee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee4:	2b40      	cmp	r3, #64	; 0x40
 800eee6:	d10e      	bne.n	800ef06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef2:	2b40      	cmp	r3, #64	; 0x40
 800eef4:	d107      	bne.n	800ef06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eefe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 fae1 	bl	800f4c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	691b      	ldr	r3, [r3, #16]
 800ef0c:	f003 0320 	and.w	r3, r3, #32
 800ef10:	2b20      	cmp	r3, #32
 800ef12:	d10e      	bne.n	800ef32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b20      	cmp	r3, #32
 800ef20:	d107      	bne.n	800ef32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f06f 0220 	mvn.w	r2, #32
 800ef2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f001 f961 	bl	80101f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b086      	sub	sp, #24
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	60f8      	str	r0, [r7, #12]
 800ef42:	60b9      	str	r1, [r7, #8]
 800ef44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d101      	bne.n	800ef58 <HAL_TIM_IC_ConfigChannel+0x1e>
 800ef54:	2302      	movs	r3, #2
 800ef56:	e088      	b.n	800f06a <HAL_TIM_IC_ConfigChannel+0x130>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d11b      	bne.n	800ef9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	6818      	ldr	r0, [r3, #0]
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	6819      	ldr	r1, [r3, #0]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	685a      	ldr	r2, [r3, #4]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	f000 fe2d 	bl	800fbd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	699a      	ldr	r2, [r3, #24]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f022 020c 	bic.w	r2, r2, #12
 800ef88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	6999      	ldr	r1, [r3, #24]
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	689a      	ldr	r2, [r3, #8]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	430a      	orrs	r2, r1
 800ef9a:	619a      	str	r2, [r3, #24]
 800ef9c:	e060      	b.n	800f060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	d11c      	bne.n	800efde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6818      	ldr	r0, [r3, #0]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	6819      	ldr	r1, [r3, #0]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	f000 febd 	bl	800fd32 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	699a      	ldr	r2, [r3, #24]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800efc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	6999      	ldr	r1, [r3, #24]
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	021a      	lsls	r2, r3, #8
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	430a      	orrs	r2, r1
 800efda:	619a      	str	r2, [r3, #24]
 800efdc:	e040      	b.n	800f060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b08      	cmp	r3, #8
 800efe2:	d11b      	bne.n	800f01c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6818      	ldr	r0, [r3, #0]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	6819      	ldr	r1, [r3, #0]
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	685a      	ldr	r2, [r3, #4]
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	f000 ff0a 	bl	800fe0c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	69da      	ldr	r2, [r3, #28]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f022 020c 	bic.w	r2, r2, #12
 800f006:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	69d9      	ldr	r1, [r3, #28]
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	689a      	ldr	r2, [r3, #8]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	61da      	str	r2, [r3, #28]
 800f01a:	e021      	b.n	800f060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2b0c      	cmp	r3, #12
 800f020:	d11c      	bne.n	800f05c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6818      	ldr	r0, [r3, #0]
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	6819      	ldr	r1, [r3, #0]
 800f02a:	68bb      	ldr	r3, [r7, #8]
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	f000 ff27 	bl	800fe84 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	69da      	ldr	r2, [r3, #28]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800f044:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	69d9      	ldr	r1, [r3, #28]
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	021a      	lsls	r2, r3, #8
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	430a      	orrs	r2, r1
 800f058:	61da      	str	r2, [r3, #28]
 800f05a:	e001      	b.n	800f060 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f05c:	2301      	movs	r3, #1
 800f05e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f068:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b086      	sub	sp, #24
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d101      	bne.n	800f092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f08e:	2302      	movs	r3, #2
 800f090:	e0ff      	b.n	800f292 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b14      	cmp	r3, #20
 800f09e:	f200 80f0 	bhi.w	800f282 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f0a2:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f0fd 	.word	0x0800f0fd
 800f0ac:	0800f283 	.word	0x0800f283
 800f0b0:	0800f283 	.word	0x0800f283
 800f0b4:	0800f283 	.word	0x0800f283
 800f0b8:	0800f13d 	.word	0x0800f13d
 800f0bc:	0800f283 	.word	0x0800f283
 800f0c0:	0800f283 	.word	0x0800f283
 800f0c4:	0800f283 	.word	0x0800f283
 800f0c8:	0800f17f 	.word	0x0800f17f
 800f0cc:	0800f283 	.word	0x0800f283
 800f0d0:	0800f283 	.word	0x0800f283
 800f0d4:	0800f283 	.word	0x0800f283
 800f0d8:	0800f1bf 	.word	0x0800f1bf
 800f0dc:	0800f283 	.word	0x0800f283
 800f0e0:	0800f283 	.word	0x0800f283
 800f0e4:	0800f283 	.word	0x0800f283
 800f0e8:	0800f201 	.word	0x0800f201
 800f0ec:	0800f283 	.word	0x0800f283
 800f0f0:	0800f283 	.word	0x0800f283
 800f0f4:	0800f283 	.word	0x0800f283
 800f0f8:	0800f241 	.word	0x0800f241
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	68b9      	ldr	r1, [r7, #8]
 800f102:	4618      	mov	r0, r3
 800f104:	f000 fa90 	bl	800f628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	699a      	ldr	r2, [r3, #24]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f042 0208 	orr.w	r2, r2, #8
 800f116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	699a      	ldr	r2, [r3, #24]
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f022 0204 	bic.w	r2, r2, #4
 800f126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6999      	ldr	r1, [r3, #24]
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	691a      	ldr	r2, [r3, #16]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	430a      	orrs	r2, r1
 800f138:	619a      	str	r2, [r3, #24]
      break;
 800f13a:	e0a5      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68b9      	ldr	r1, [r7, #8]
 800f142:	4618      	mov	r0, r3
 800f144:	f000 fb00 	bl	800f748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	699a      	ldr	r2, [r3, #24]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	699a      	ldr	r2, [r3, #24]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	6999      	ldr	r1, [r3, #24]
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	021a      	lsls	r2, r3, #8
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	430a      	orrs	r2, r1
 800f17a:	619a      	str	r2, [r3, #24]
      break;
 800f17c:	e084      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68b9      	ldr	r1, [r7, #8]
 800f184:	4618      	mov	r0, r3
 800f186:	f000 fb69 	bl	800f85c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	69da      	ldr	r2, [r3, #28]
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f042 0208 	orr.w	r2, r2, #8
 800f198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	69da      	ldr	r2, [r3, #28]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f022 0204 	bic.w	r2, r2, #4
 800f1a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	69d9      	ldr	r1, [r3, #28]
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	691a      	ldr	r2, [r3, #16]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	430a      	orrs	r2, r1
 800f1ba:	61da      	str	r2, [r3, #28]
      break;
 800f1bc:	e064      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68b9      	ldr	r1, [r7, #8]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f000 fbd1 	bl	800f96c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	69da      	ldr	r2, [r3, #28]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	69da      	ldr	r2, [r3, #28]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	69d9      	ldr	r1, [r3, #28]
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	021a      	lsls	r2, r3, #8
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	61da      	str	r2, [r3, #28]
      break;
 800f1fe:	e043      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68b9      	ldr	r1, [r7, #8]
 800f206:	4618      	mov	r0, r3
 800f208:	f000 fc1a 	bl	800fa40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0208 	orr.w	r2, r2, #8
 800f21a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f022 0204 	bic.w	r2, r2, #4
 800f22a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	691a      	ldr	r2, [r3, #16]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	430a      	orrs	r2, r1
 800f23c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f23e:	e023      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68b9      	ldr	r1, [r7, #8]
 800f246:	4618      	mov	r0, r3
 800f248:	f000 fc5e 	bl	800fb08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f25a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f26a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	021a      	lsls	r2, r3, #8
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	430a      	orrs	r2, r1
 800f27e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f280:	e002      	b.n	800f288 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	75fb      	strb	r3, [r7, #23]
      break;
 800f286:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f290:	7dfb      	ldrb	r3, [r7, #23]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop

0800f29c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d101      	bne.n	800f2b8 <HAL_TIM_ConfigClockSource+0x1c>
 800f2b4:	2302      	movs	r3, #2
 800f2b6:	e0dc      	b.n	800f472 <HAL_TIM_ConfigClockSource+0x1d6>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2202      	movs	r2, #2
 800f2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	689b      	ldr	r3, [r3, #8]
 800f2ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2d0:	68ba      	ldr	r2, [r7, #8]
 800f2d2:	4b6a      	ldr	r3, [pc, #424]	; (800f47c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	4a64      	ldr	r2, [pc, #400]	; (800f480 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	f000 80a9 	beq.w	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f2f4:	4a62      	ldr	r2, [pc, #392]	; (800f480 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	f200 80ae 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f2fc:	4a61      	ldr	r2, [pc, #388]	; (800f484 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	f000 80a1 	beq.w	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f304:	4a5f      	ldr	r2, [pc, #380]	; (800f484 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f306:	4293      	cmp	r3, r2
 800f308:	f200 80a6 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f30c:	4a5e      	ldr	r2, [pc, #376]	; (800f488 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	f000 8099 	beq.w	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f314:	4a5c      	ldr	r2, [pc, #368]	; (800f488 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f316:	4293      	cmp	r3, r2
 800f318:	f200 809e 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f31c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f320:	f000 8091 	beq.w	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f328:	f200 8096 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f32c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f330:	f000 8089 	beq.w	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f338:	f200 808e 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f33c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f340:	d03e      	beq.n	800f3c0 <HAL_TIM_ConfigClockSource+0x124>
 800f342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f346:	f200 8087 	bhi.w	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f34e:	f000 8086 	beq.w	800f45e <HAL_TIM_ConfigClockSource+0x1c2>
 800f352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f356:	d87f      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f358:	2b70      	cmp	r3, #112	; 0x70
 800f35a:	d01a      	beq.n	800f392 <HAL_TIM_ConfigClockSource+0xf6>
 800f35c:	2b70      	cmp	r3, #112	; 0x70
 800f35e:	d87b      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f360:	2b60      	cmp	r3, #96	; 0x60
 800f362:	d050      	beq.n	800f406 <HAL_TIM_ConfigClockSource+0x16a>
 800f364:	2b60      	cmp	r3, #96	; 0x60
 800f366:	d877      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f368:	2b50      	cmp	r3, #80	; 0x50
 800f36a:	d03c      	beq.n	800f3e6 <HAL_TIM_ConfigClockSource+0x14a>
 800f36c:	2b50      	cmp	r3, #80	; 0x50
 800f36e:	d873      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f370:	2b40      	cmp	r3, #64	; 0x40
 800f372:	d058      	beq.n	800f426 <HAL_TIM_ConfigClockSource+0x18a>
 800f374:	2b40      	cmp	r3, #64	; 0x40
 800f376:	d86f      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f378:	2b30      	cmp	r3, #48	; 0x30
 800f37a:	d064      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f37c:	2b30      	cmp	r3, #48	; 0x30
 800f37e:	d86b      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f380:	2b20      	cmp	r3, #32
 800f382:	d060      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f384:	2b20      	cmp	r3, #32
 800f386:	d867      	bhi.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d05c      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f38c:	2b10      	cmp	r3, #16
 800f38e:	d05a      	beq.n	800f446 <HAL_TIM_ConfigClockSource+0x1aa>
 800f390:	e062      	b.n	800f458 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6818      	ldr	r0, [r3, #0]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	6899      	ldr	r1, [r3, #8]
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	685a      	ldr	r2, [r3, #4]
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	f000 fdcb 	bl	800ff3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f3b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	609a      	str	r2, [r3, #8]
      break;
 800f3be:	e04f      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	6899      	ldr	r1, [r3, #8]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	685a      	ldr	r2, [r3, #4]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	f000 fdb4 	bl	800ff3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	689a      	ldr	r2, [r3, #8]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f3e2:	609a      	str	r2, [r3, #8]
      break;
 800f3e4:	e03c      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6818      	ldr	r0, [r3, #0]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	6859      	ldr	r1, [r3, #4]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	f000 fc6e 	bl	800fcd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2150      	movs	r1, #80	; 0x50
 800f3fe:	4618      	mov	r0, r3
 800f400:	f000 fd7e 	bl	800ff00 <TIM_ITRx_SetConfig>
      break;
 800f404:	e02c      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6818      	ldr	r0, [r3, #0]
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	6859      	ldr	r1, [r3, #4]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	461a      	mov	r2, r3
 800f414:	f000 fcca 	bl	800fdac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2160      	movs	r1, #96	; 0x60
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 fd6e 	bl	800ff00 <TIM_ITRx_SetConfig>
      break;
 800f424:	e01c      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	6818      	ldr	r0, [r3, #0]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	6859      	ldr	r1, [r3, #4]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	461a      	mov	r2, r3
 800f434:	f000 fc4e 	bl	800fcd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	2140      	movs	r1, #64	; 0x40
 800f43e:	4618      	mov	r0, r3
 800f440:	f000 fd5e 	bl	800ff00 <TIM_ITRx_SetConfig>
      break;
 800f444:	e00c      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f000 fd55 	bl	800ff00 <TIM_ITRx_SetConfig>
      break;
 800f456:	e003      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	73fb      	strb	r3, [r7, #15]
      break;
 800f45c:	e000      	b.n	800f460 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f45e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f470:	7bfb      	ldrb	r3, [r7, #15]
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	ffceff88 	.word	0xffceff88
 800f480:	00100040 	.word	0x00100040
 800f484:	00100030 	.word	0x00100030
 800f488:	00100020 	.word	0x00100020

0800f48c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4a8:	bf00      	nop
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4bc:	bf00      	nop
 800f4be:	370c      	adds	r7, #12
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr

0800f4c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4d0:	bf00      	nop
 800f4d2:	370c      	adds	r7, #12
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4da:	4770      	bx	lr

0800f4dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f4dc:	b480      	push	{r7}
 800f4de:	b085      	sub	sp, #20
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a44      	ldr	r2, [pc, #272]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d013      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f4fa:	d00f      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a41      	ldr	r2, [pc, #260]	; (800f604 <TIM_Base_SetConfig+0x128>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d00b      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a40      	ldr	r2, [pc, #256]	; (800f608 <TIM_Base_SetConfig+0x12c>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d007      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a3f      	ldr	r2, [pc, #252]	; (800f60c <TIM_Base_SetConfig+0x130>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d003      	beq.n	800f51c <TIM_Base_SetConfig+0x40>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a3e      	ldr	r2, [pc, #248]	; (800f610 <TIM_Base_SetConfig+0x134>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d108      	bne.n	800f52e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a33      	ldr	r2, [pc, #204]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d027      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f53c:	d023      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a30      	ldr	r2, [pc, #192]	; (800f604 <TIM_Base_SetConfig+0x128>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d01f      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a2f      	ldr	r2, [pc, #188]	; (800f608 <TIM_Base_SetConfig+0x12c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d01b      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a2e      	ldr	r2, [pc, #184]	; (800f60c <TIM_Base_SetConfig+0x130>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d017      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a2d      	ldr	r2, [pc, #180]	; (800f610 <TIM_Base_SetConfig+0x134>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d013      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a2c      	ldr	r2, [pc, #176]	; (800f614 <TIM_Base_SetConfig+0x138>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d00f      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a2b      	ldr	r2, [pc, #172]	; (800f618 <TIM_Base_SetConfig+0x13c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d00b      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a2a      	ldr	r2, [pc, #168]	; (800f61c <TIM_Base_SetConfig+0x140>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d007      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a29      	ldr	r2, [pc, #164]	; (800f620 <TIM_Base_SetConfig+0x144>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d003      	beq.n	800f586 <TIM_Base_SetConfig+0xaa>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a28      	ldr	r2, [pc, #160]	; (800f624 <TIM_Base_SetConfig+0x148>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d108      	bne.n	800f598 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f58c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	4313      	orrs	r3, r2
 800f596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	689a      	ldr	r2, [r3, #8]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a10      	ldr	r2, [pc, #64]	; (800f600 <TIM_Base_SetConfig+0x124>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d00f      	beq.n	800f5e4 <TIM_Base_SetConfig+0x108>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a12      	ldr	r2, [pc, #72]	; (800f610 <TIM_Base_SetConfig+0x134>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d00b      	beq.n	800f5e4 <TIM_Base_SetConfig+0x108>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	4a11      	ldr	r2, [pc, #68]	; (800f614 <TIM_Base_SetConfig+0x138>)
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d007      	beq.n	800f5e4 <TIM_Base_SetConfig+0x108>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	4a10      	ldr	r2, [pc, #64]	; (800f618 <TIM_Base_SetConfig+0x13c>)
 800f5d8:	4293      	cmp	r3, r2
 800f5da:	d003      	beq.n	800f5e4 <TIM_Base_SetConfig+0x108>
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a0f      	ldr	r2, [pc, #60]	; (800f61c <TIM_Base_SetConfig+0x140>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d103      	bne.n	800f5ec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	691a      	ldr	r2, [r3, #16]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	615a      	str	r2, [r3, #20]
}
 800f5f2:	bf00      	nop
 800f5f4:	3714      	adds	r7, #20
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	40010000 	.word	0x40010000
 800f604:	40000400 	.word	0x40000400
 800f608:	40000800 	.word	0x40000800
 800f60c:	40000c00 	.word	0x40000c00
 800f610:	40010400 	.word	0x40010400
 800f614:	40014000 	.word	0x40014000
 800f618:	40014400 	.word	0x40014400
 800f61c:	40014800 	.word	0x40014800
 800f620:	4000e000 	.word	0x4000e000
 800f624:	4000e400 	.word	0x4000e400

0800f628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f628:	b480      	push	{r7}
 800f62a:	b087      	sub	sp, #28
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	f023 0201 	bic.w	r2, r3, #1
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	699b      	ldr	r3, [r3, #24]
 800f64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	4b37      	ldr	r3, [pc, #220]	; (800f730 <TIM_OC1_SetConfig+0x108>)
 800f654:	4013      	ands	r3, r2
 800f656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f023 0303 	bic.w	r3, r3, #3
 800f65e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	4313      	orrs	r3, r2
 800f668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f023 0302 	bic.w	r3, r3, #2
 800f670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	689b      	ldr	r3, [r3, #8]
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	4313      	orrs	r3, r2
 800f67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a2d      	ldr	r2, [pc, #180]	; (800f734 <TIM_OC1_SetConfig+0x10c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00f      	beq.n	800f6a4 <TIM_OC1_SetConfig+0x7c>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a2c      	ldr	r2, [pc, #176]	; (800f738 <TIM_OC1_SetConfig+0x110>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d00b      	beq.n	800f6a4 <TIM_OC1_SetConfig+0x7c>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a2b      	ldr	r2, [pc, #172]	; (800f73c <TIM_OC1_SetConfig+0x114>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d007      	beq.n	800f6a4 <TIM_OC1_SetConfig+0x7c>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a2a      	ldr	r2, [pc, #168]	; (800f740 <TIM_OC1_SetConfig+0x118>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d003      	beq.n	800f6a4 <TIM_OC1_SetConfig+0x7c>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	4a29      	ldr	r2, [pc, #164]	; (800f744 <TIM_OC1_SetConfig+0x11c>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d10c      	bne.n	800f6be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	f023 0308 	bic.w	r3, r3, #8
 800f6aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	f023 0304 	bic.w	r3, r3, #4
 800f6bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a1c      	ldr	r2, [pc, #112]	; (800f734 <TIM_OC1_SetConfig+0x10c>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d00f      	beq.n	800f6e6 <TIM_OC1_SetConfig+0xbe>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a1b      	ldr	r2, [pc, #108]	; (800f738 <TIM_OC1_SetConfig+0x110>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d00b      	beq.n	800f6e6 <TIM_OC1_SetConfig+0xbe>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	4a1a      	ldr	r2, [pc, #104]	; (800f73c <TIM_OC1_SetConfig+0x114>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d007      	beq.n	800f6e6 <TIM_OC1_SetConfig+0xbe>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a19      	ldr	r2, [pc, #100]	; (800f740 <TIM_OC1_SetConfig+0x118>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d003      	beq.n	800f6e6 <TIM_OC1_SetConfig+0xbe>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	4a18      	ldr	r2, [pc, #96]	; (800f744 <TIM_OC1_SetConfig+0x11c>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d111      	bne.n	800f70a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f6ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f6f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	699b      	ldr	r3, [r3, #24]
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	4313      	orrs	r3, r2
 800f708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	693a      	ldr	r2, [r7, #16]
 800f70e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	68fa      	ldr	r2, [r7, #12]
 800f714:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	685a      	ldr	r2, [r3, #4]
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	621a      	str	r2, [r3, #32]
}
 800f724:	bf00      	nop
 800f726:	371c      	adds	r7, #28
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	fffeff8f 	.word	0xfffeff8f
 800f734:	40010000 	.word	0x40010000
 800f738:	40010400 	.word	0x40010400
 800f73c:	40014000 	.word	0x40014000
 800f740:	40014400 	.word	0x40014400
 800f744:	40014800 	.word	0x40014800

0800f748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f748:	b480      	push	{r7}
 800f74a:	b087      	sub	sp, #28
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	f023 0210 	bic.w	r2, r3, #16
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a1b      	ldr	r3, [r3, #32]
 800f762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	699b      	ldr	r3, [r3, #24]
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	4b34      	ldr	r3, [pc, #208]	; (800f844 <TIM_OC2_SetConfig+0xfc>)
 800f774:	4013      	ands	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	f023 0320 	bic.w	r3, r3, #32
 800f792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	011b      	lsls	r3, r3, #4
 800f79a:	697a      	ldr	r2, [r7, #20]
 800f79c:	4313      	orrs	r3, r2
 800f79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a29      	ldr	r2, [pc, #164]	; (800f848 <TIM_OC2_SetConfig+0x100>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d003      	beq.n	800f7b0 <TIM_OC2_SetConfig+0x68>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a28      	ldr	r2, [pc, #160]	; (800f84c <TIM_OC2_SetConfig+0x104>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d10d      	bne.n	800f7cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	011b      	lsls	r3, r3, #4
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a1e      	ldr	r2, [pc, #120]	; (800f848 <TIM_OC2_SetConfig+0x100>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d00f      	beq.n	800f7f4 <TIM_OC2_SetConfig+0xac>
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4a1d      	ldr	r2, [pc, #116]	; (800f84c <TIM_OC2_SetConfig+0x104>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d00b      	beq.n	800f7f4 <TIM_OC2_SetConfig+0xac>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	4a1c      	ldr	r2, [pc, #112]	; (800f850 <TIM_OC2_SetConfig+0x108>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d007      	beq.n	800f7f4 <TIM_OC2_SetConfig+0xac>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	4a1b      	ldr	r2, [pc, #108]	; (800f854 <TIM_OC2_SetConfig+0x10c>)
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	d003      	beq.n	800f7f4 <TIM_OC2_SetConfig+0xac>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	4a1a      	ldr	r2, [pc, #104]	; (800f858 <TIM_OC2_SetConfig+0x110>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d113      	bne.n	800f81c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7fc:	693b      	ldr	r3, [r7, #16]
 800f7fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	695b      	ldr	r3, [r3, #20]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	693a      	ldr	r2, [r7, #16]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	699b      	ldr	r3, [r3, #24]
 800f814:	009b      	lsls	r3, r3, #2
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	4313      	orrs	r3, r2
 800f81a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	693a      	ldr	r2, [r7, #16]
 800f820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	685a      	ldr	r2, [r3, #4]
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	697a      	ldr	r2, [r7, #20]
 800f834:	621a      	str	r2, [r3, #32]
}
 800f836:	bf00      	nop
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	feff8fff 	.word	0xfeff8fff
 800f848:	40010000 	.word	0x40010000
 800f84c:	40010400 	.word	0x40010400
 800f850:	40014000 	.word	0x40014000
 800f854:	40014400 	.word	0x40014400
 800f858:	40014800 	.word	0x40014800

0800f85c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b087      	sub	sp, #28
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a1b      	ldr	r3, [r3, #32]
 800f86a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a1b      	ldr	r3, [r3, #32]
 800f876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	685b      	ldr	r3, [r3, #4]
 800f87c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	69db      	ldr	r3, [r3, #28]
 800f882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	4b33      	ldr	r3, [pc, #204]	; (800f954 <TIM_OC3_SetConfig+0xf8>)
 800f888:	4013      	ands	r3, r2
 800f88a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	021b      	lsls	r3, r3, #8
 800f8ac:	697a      	ldr	r2, [r7, #20]
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4a28      	ldr	r2, [pc, #160]	; (800f958 <TIM_OC3_SetConfig+0xfc>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d003      	beq.n	800f8c2 <TIM_OC3_SetConfig+0x66>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4a27      	ldr	r2, [pc, #156]	; (800f95c <TIM_OC3_SetConfig+0x100>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d10d      	bne.n	800f8de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	021b      	lsls	r3, r3, #8
 800f8d0:	697a      	ldr	r2, [r7, #20]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f8d6:	697b      	ldr	r3, [r7, #20]
 800f8d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	4a1d      	ldr	r2, [pc, #116]	; (800f958 <TIM_OC3_SetConfig+0xfc>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d00f      	beq.n	800f906 <TIM_OC3_SetConfig+0xaa>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a1c      	ldr	r2, [pc, #112]	; (800f95c <TIM_OC3_SetConfig+0x100>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d00b      	beq.n	800f906 <TIM_OC3_SetConfig+0xaa>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a1b      	ldr	r2, [pc, #108]	; (800f960 <TIM_OC3_SetConfig+0x104>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d007      	beq.n	800f906 <TIM_OC3_SetConfig+0xaa>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a1a      	ldr	r2, [pc, #104]	; (800f964 <TIM_OC3_SetConfig+0x108>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d003      	beq.n	800f906 <TIM_OC3_SetConfig+0xaa>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a19      	ldr	r2, [pc, #100]	; (800f968 <TIM_OC3_SetConfig+0x10c>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d113      	bne.n	800f92e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f90c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	695b      	ldr	r3, [r3, #20]
 800f91a:	011b      	lsls	r3, r3, #4
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	4313      	orrs	r3, r2
 800f920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	699b      	ldr	r3, [r3, #24]
 800f926:	011b      	lsls	r3, r3, #4
 800f928:	693a      	ldr	r2, [r7, #16]
 800f92a:	4313      	orrs	r3, r2
 800f92c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68fa      	ldr	r2, [r7, #12]
 800f938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	685a      	ldr	r2, [r3, #4]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	621a      	str	r2, [r3, #32]
}
 800f948:	bf00      	nop
 800f94a:	371c      	adds	r7, #28
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr
 800f954:	fffeff8f 	.word	0xfffeff8f
 800f958:	40010000 	.word	0x40010000
 800f95c:	40010400 	.word	0x40010400
 800f960:	40014000 	.word	0x40014000
 800f964:	40014400 	.word	0x40014400
 800f968:	40014800 	.word	0x40014800

0800f96c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a1b      	ldr	r3, [r3, #32]
 800f97a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a1b      	ldr	r3, [r3, #32]
 800f986:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	69db      	ldr	r3, [r3, #28]
 800f992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f994:	68fa      	ldr	r2, [r7, #12]
 800f996:	4b24      	ldr	r3, [pc, #144]	; (800fa28 <TIM_OC4_SetConfig+0xbc>)
 800f998:	4013      	ands	r3, r2
 800f99a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	021b      	lsls	r3, r3, #8
 800f9aa:	68fa      	ldr	r2, [r7, #12]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f9b0:	693b      	ldr	r3, [r7, #16]
 800f9b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	031b      	lsls	r3, r3, #12
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	4313      	orrs	r3, r2
 800f9c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	4a19      	ldr	r2, [pc, #100]	; (800fa2c <TIM_OC4_SetConfig+0xc0>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d00f      	beq.n	800f9ec <TIM_OC4_SetConfig+0x80>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	4a18      	ldr	r2, [pc, #96]	; (800fa30 <TIM_OC4_SetConfig+0xc4>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d00b      	beq.n	800f9ec <TIM_OC4_SetConfig+0x80>
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	4a17      	ldr	r2, [pc, #92]	; (800fa34 <TIM_OC4_SetConfig+0xc8>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d007      	beq.n	800f9ec <TIM_OC4_SetConfig+0x80>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	4a16      	ldr	r2, [pc, #88]	; (800fa38 <TIM_OC4_SetConfig+0xcc>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d003      	beq.n	800f9ec <TIM_OC4_SetConfig+0x80>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a15      	ldr	r2, [pc, #84]	; (800fa3c <TIM_OC4_SetConfig+0xd0>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d109      	bne.n	800fa00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f9f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	019b      	lsls	r3, r3, #6
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	693a      	ldr	r2, [r7, #16]
 800fa18:	621a      	str	r2, [r3, #32]
}
 800fa1a:	bf00      	nop
 800fa1c:	371c      	adds	r7, #28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
 800fa26:	bf00      	nop
 800fa28:	feff8fff 	.word	0xfeff8fff
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40010400 	.word	0x40010400
 800fa34:	40014000 	.word	0x40014000
 800fa38:	40014400 	.word	0x40014400
 800fa3c:	40014800 	.word	0x40014800

0800fa40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	4b21      	ldr	r3, [pc, #132]	; (800faf0 <TIM_OC5_SetConfig+0xb0>)
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fa80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	041b      	lsls	r3, r3, #16
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a18      	ldr	r2, [pc, #96]	; (800faf4 <TIM_OC5_SetConfig+0xb4>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d00f      	beq.n	800fab6 <TIM_OC5_SetConfig+0x76>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a17      	ldr	r2, [pc, #92]	; (800faf8 <TIM_OC5_SetConfig+0xb8>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d00b      	beq.n	800fab6 <TIM_OC5_SetConfig+0x76>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4a16      	ldr	r2, [pc, #88]	; (800fafc <TIM_OC5_SetConfig+0xbc>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d007      	beq.n	800fab6 <TIM_OC5_SetConfig+0x76>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a15      	ldr	r2, [pc, #84]	; (800fb00 <TIM_OC5_SetConfig+0xc0>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d003      	beq.n	800fab6 <TIM_OC5_SetConfig+0x76>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4a14      	ldr	r2, [pc, #80]	; (800fb04 <TIM_OC5_SetConfig+0xc4>)
 800fab2:	4293      	cmp	r3, r2
 800fab4:	d109      	bne.n	800faca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fabc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	695b      	ldr	r3, [r3, #20]
 800fac2:	021b      	lsls	r3, r3, #8
 800fac4:	697a      	ldr	r2, [r7, #20]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	693a      	ldr	r2, [r7, #16]
 800fae2:	621a      	str	r2, [r3, #32]
}
 800fae4:	bf00      	nop
 800fae6:	371c      	adds	r7, #28
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	fffeff8f 	.word	0xfffeff8f
 800faf4:	40010000 	.word	0x40010000
 800faf8:	40010400 	.word	0x40010400
 800fafc:	40014000 	.word	0x40014000
 800fb00:	40014400 	.word	0x40014400
 800fb04:	40014800 	.word	0x40014800

0800fb08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b087      	sub	sp, #28
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	4b22      	ldr	r3, [pc, #136]	; (800fbbc <TIM_OC6_SetConfig+0xb4>)
 800fb34:	4013      	ands	r3, r2
 800fb36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	021b      	lsls	r3, r3, #8
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fb4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	689b      	ldr	r3, [r3, #8]
 800fb50:	051b      	lsls	r3, r3, #20
 800fb52:	693a      	ldr	r2, [r7, #16]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a19      	ldr	r2, [pc, #100]	; (800fbc0 <TIM_OC6_SetConfig+0xb8>)
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	d00f      	beq.n	800fb80 <TIM_OC6_SetConfig+0x78>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	4a18      	ldr	r2, [pc, #96]	; (800fbc4 <TIM_OC6_SetConfig+0xbc>)
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d00b      	beq.n	800fb80 <TIM_OC6_SetConfig+0x78>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	4a17      	ldr	r2, [pc, #92]	; (800fbc8 <TIM_OC6_SetConfig+0xc0>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d007      	beq.n	800fb80 <TIM_OC6_SetConfig+0x78>
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	4a16      	ldr	r2, [pc, #88]	; (800fbcc <TIM_OC6_SetConfig+0xc4>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d003      	beq.n	800fb80 <TIM_OC6_SetConfig+0x78>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	4a15      	ldr	r2, [pc, #84]	; (800fbd0 <TIM_OC6_SetConfig+0xc8>)
 800fb7c:	4293      	cmp	r3, r2
 800fb7e:	d109      	bne.n	800fb94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fb86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	029b      	lsls	r3, r3, #10
 800fb8e:	697a      	ldr	r2, [r7, #20]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	697a      	ldr	r2, [r7, #20]
 800fb98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	685a      	ldr	r2, [r3, #4]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	693a      	ldr	r2, [r7, #16]
 800fbac:	621a      	str	r2, [r3, #32]
}
 800fbae:	bf00      	nop
 800fbb0:	371c      	adds	r7, #28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	feff8fff 	.word	0xfeff8fff
 800fbc0:	40010000 	.word	0x40010000
 800fbc4:	40010400 	.word	0x40010400
 800fbc8:	40014000 	.word	0x40014000
 800fbcc:	40014400 	.word	0x40014400
 800fbd0:	40014800 	.word	0x40014800

0800fbd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	60f8      	str	r0, [r7, #12]
 800fbdc:	60b9      	str	r1, [r7, #8]
 800fbde:	607a      	str	r2, [r7, #4]
 800fbe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a1b      	ldr	r3, [r3, #32]
 800fbe6:	f023 0201 	bic.w	r2, r3, #1
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	4a2c      	ldr	r2, [pc, #176]	; (800fcb0 <TIM_TI1_SetConfig+0xdc>)
 800fbfe:	4293      	cmp	r3, r2
 800fc00:	d023      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc08:	d01f      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4a29      	ldr	r2, [pc, #164]	; (800fcb4 <TIM_TI1_SetConfig+0xe0>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d01b      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	4a28      	ldr	r2, [pc, #160]	; (800fcb8 <TIM_TI1_SetConfig+0xe4>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d017      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	4a27      	ldr	r2, [pc, #156]	; (800fcbc <TIM_TI1_SetConfig+0xe8>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d013      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	4a26      	ldr	r2, [pc, #152]	; (800fcc0 <TIM_TI1_SetConfig+0xec>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d00f      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	4a25      	ldr	r2, [pc, #148]	; (800fcc4 <TIM_TI1_SetConfig+0xf0>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d00b      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	4a24      	ldr	r2, [pc, #144]	; (800fcc8 <TIM_TI1_SetConfig+0xf4>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d007      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	4a23      	ldr	r2, [pc, #140]	; (800fccc <TIM_TI1_SetConfig+0xf8>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d003      	beq.n	800fc4a <TIM_TI1_SetConfig+0x76>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	4a22      	ldr	r2, [pc, #136]	; (800fcd0 <TIM_TI1_SetConfig+0xfc>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d101      	bne.n	800fc4e <TIM_TI1_SetConfig+0x7a>
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	e000      	b.n	800fc50 <TIM_TI1_SetConfig+0x7c>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d008      	beq.n	800fc66 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f023 0303 	bic.w	r3, r3, #3
 800fc5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fc5c:	697a      	ldr	r2, [r7, #20]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4313      	orrs	r3, r2
 800fc62:	617b      	str	r3, [r7, #20]
 800fc64:	e003      	b.n	800fc6e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f043 0301 	orr.w	r3, r3, #1
 800fc6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	011b      	lsls	r3, r3, #4
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f023 030a 	bic.w	r3, r3, #10
 800fc88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	f003 030a 	and.w	r3, r3, #10
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	4313      	orrs	r3, r2
 800fc94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	697a      	ldr	r2, [r7, #20]
 800fc9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	693a      	ldr	r2, [r7, #16]
 800fca0:	621a      	str	r2, [r3, #32]
}
 800fca2:	bf00      	nop
 800fca4:	371c      	adds	r7, #28
 800fca6:	46bd      	mov	sp, r7
 800fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcac:	4770      	bx	lr
 800fcae:	bf00      	nop
 800fcb0:	40010000 	.word	0x40010000
 800fcb4:	40000400 	.word	0x40000400
 800fcb8:	40000800 	.word	0x40000800
 800fcbc:	40000c00 	.word	0x40000c00
 800fcc0:	40010400 	.word	0x40010400
 800fcc4:	40001800 	.word	0x40001800
 800fcc8:	40014000 	.word	0x40014000
 800fccc:	4000e000 	.word	0x4000e000
 800fcd0:	4000e400 	.word	0x4000e400

0800fcd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b087      	sub	sp, #28
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	f023 0201 	bic.w	r2, r3, #1
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fcfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	011b      	lsls	r3, r3, #4
 800fd04:	693a      	ldr	r2, [r7, #16]
 800fd06:	4313      	orrs	r3, r2
 800fd08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	f023 030a 	bic.w	r3, r3, #10
 800fd10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	4313      	orrs	r3, r2
 800fd18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	697a      	ldr	r2, [r7, #20]
 800fd24:	621a      	str	r2, [r3, #32]
}
 800fd26:	bf00      	nop
 800fd28:	371c      	adds	r7, #28
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr

0800fd32 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b087      	sub	sp, #28
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	60f8      	str	r0, [r7, #12]
 800fd3a:	60b9      	str	r1, [r7, #8]
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	6a1b      	ldr	r3, [r3, #32]
 800fd44:	f023 0210 	bic.w	r2, r3, #16
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	699b      	ldr	r3, [r3, #24]
 800fd50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6a1b      	ldr	r3, [r3, #32]
 800fd56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	021b      	lsls	r3, r3, #8
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	031b      	lsls	r3, r3, #12
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	697a      	ldr	r2, [r7, #20]
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fd84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	011b      	lsls	r3, r3, #4
 800fd8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fd8e:	693a      	ldr	r2, [r7, #16]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	697a      	ldr	r2, [r7, #20]
 800fd98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	693a      	ldr	r2, [r7, #16]
 800fd9e:	621a      	str	r2, [r3, #32]
}
 800fda0:	bf00      	nop
 800fda2:	371c      	adds	r7, #28
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b087      	sub	sp, #28
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	6a1b      	ldr	r3, [r3, #32]
 800fdbc:	f023 0210 	bic.w	r2, r3, #16
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	699b      	ldr	r3, [r3, #24]
 800fdc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6a1b      	ldr	r3, [r3, #32]
 800fdce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fdd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	031b      	lsls	r3, r3, #12
 800fddc:	697a      	ldr	r2, [r7, #20]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fde8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	011b      	lsls	r3, r3, #4
 800fdee:	693a      	ldr	r2, [r7, #16]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	621a      	str	r2, [r3, #32]
}
 800fe00:	bf00      	nop
 800fe02:	371c      	adds	r7, #28
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b087      	sub	sp, #28
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	60f8      	str	r0, [r7, #12]
 800fe14:	60b9      	str	r1, [r7, #8]
 800fe16:	607a      	str	r2, [r7, #4]
 800fe18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6a1b      	ldr	r3, [r3, #32]
 800fe1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	69db      	ldr	r3, [r3, #28]
 800fe2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	6a1b      	ldr	r3, [r3, #32]
 800fe30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	f023 0303 	bic.w	r3, r3, #3
 800fe38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4313      	orrs	r3, r2
 800fe40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	011b      	lsls	r3, r3, #4
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fe5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	021b      	lsls	r3, r3, #8
 800fe62:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fe66:	693a      	ldr	r2, [r7, #16]
 800fe68:	4313      	orrs	r3, r2
 800fe6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	697a      	ldr	r2, [r7, #20]
 800fe70:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	693a      	ldr	r2, [r7, #16]
 800fe76:	621a      	str	r2, [r3, #32]
}
 800fe78:	bf00      	nop
 800fe7a:	371c      	adds	r7, #28
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b087      	sub	sp, #28
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6a1b      	ldr	r3, [r3, #32]
 800fe96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	69db      	ldr	r3, [r3, #28]
 800fea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6a1b      	ldr	r3, [r3, #32]
 800fea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800feb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	021b      	lsls	r3, r3, #8
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	4313      	orrs	r3, r2
 800feba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fec2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	031b      	lsls	r3, r3, #12
 800fec8:	b29b      	uxth	r3, r3
 800feca:	697a      	ldr	r2, [r7, #20]
 800fecc:	4313      	orrs	r3, r2
 800fece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fed6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	031b      	lsls	r3, r3, #12
 800fedc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	697a      	ldr	r2, [r7, #20]
 800feea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	693a      	ldr	r2, [r7, #16]
 800fef0:	621a      	str	r2, [r3, #32]
}
 800fef2:	bf00      	nop
 800fef4:	371c      	adds	r7, #28
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr
	...

0800ff00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff10:	68fa      	ldr	r2, [r7, #12]
 800ff12:	4b09      	ldr	r3, [pc, #36]	; (800ff38 <TIM_ITRx_SetConfig+0x38>)
 800ff14:	4013      	ands	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	f043 0307 	orr.w	r3, r3, #7
 800ff22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	609a      	str	r2, [r3, #8]
}
 800ff2a:	bf00      	nop
 800ff2c:	3714      	adds	r7, #20
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	ffcfff8f 	.word	0xffcfff8f

0800ff3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b087      	sub	sp, #28
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
 800ff48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	021a      	lsls	r2, r3, #8
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	431a      	orrs	r2, r3
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	4313      	orrs	r3, r2
 800ff68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	697a      	ldr	r2, [r7, #20]
 800ff6e:	609a      	str	r2, [r3, #8]
}
 800ff70:	bf00      	nop
 800ff72:	371c      	adds	r7, #28
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b085      	sub	sp, #20
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d101      	bne.n	800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff90:	2302      	movs	r3, #2
 800ff92:	e077      	b.n	8010084 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	2201      	movs	r2, #1
 800ff98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2202      	movs	r2, #2
 800ffa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	4a35      	ldr	r2, [pc, #212]	; (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ffba:	4293      	cmp	r3, r2
 800ffbc:	d004      	beq.n	800ffc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	4a34      	ldr	r2, [pc, #208]	; (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d108      	bne.n	800ffda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ffce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4a25      	ldr	r2, [pc, #148]	; (8010090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fffa:	4293      	cmp	r3, r2
 800fffc:	d02c      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010006:	d027      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	4a22      	ldr	r2, [pc, #136]	; (8010098 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d022      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a21      	ldr	r2, [pc, #132]	; (801009c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d01d      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	4a1f      	ldr	r2, [pc, #124]	; (80100a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010022:	4293      	cmp	r3, r2
 8010024:	d018      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4a1a      	ldr	r2, [pc, #104]	; (8010094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801002c:	4293      	cmp	r3, r2
 801002e:	d013      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a1b      	ldr	r2, [pc, #108]	; (80100a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d00e      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	4a1a      	ldr	r2, [pc, #104]	; (80100a8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d009      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a18      	ldr	r2, [pc, #96]	; (80100ac <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d004      	beq.n	8010058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a17      	ldr	r2, [pc, #92]	; (80100b0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d10c      	bne.n	8010072 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801005e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	68ba      	ldr	r2, [r7, #8]
 8010066:	4313      	orrs	r3, r2
 8010068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2201      	movs	r2, #1
 8010076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2200      	movs	r2, #0
 801007e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3714      	adds	r7, #20
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	40010000 	.word	0x40010000
 8010094:	40010400 	.word	0x40010400
 8010098:	40000400 	.word	0x40000400
 801009c:	40000800 	.word	0x40000800
 80100a0:	40000c00 	.word	0x40000c00
 80100a4:	40001800 	.word	0x40001800
 80100a8:	40014000 	.word	0x40014000
 80100ac:	4000e000 	.word	0x4000e000
 80100b0:	4000e400 	.word	0x4000e400

080100b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b085      	sub	sp, #20
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80100be:	2300      	movs	r3, #0
 80100c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80100c8:	2b01      	cmp	r3, #1
 80100ca:	d101      	bne.n	80100d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80100cc:	2302      	movs	r3, #2
 80100ce:	e087      	b.n	80101e0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2201      	movs	r2, #1
 80100d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	4313      	orrs	r3, r2
 80100e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	689b      	ldr	r3, [r3, #8]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	4313      	orrs	r3, r2
 8010100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4313      	orrs	r3, r2
 801010e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	4313      	orrs	r3, r2
 801011c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	695b      	ldr	r3, [r3, #20]
 8010128:	4313      	orrs	r3, r2
 801012a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010136:	4313      	orrs	r3, r2
 8010138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	041b      	lsls	r3, r3, #16
 8010146:	4313      	orrs	r3, r2
 8010148:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a27      	ldr	r2, [pc, #156]	; (80101ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d004      	beq.n	801015e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a25      	ldr	r2, [pc, #148]	; (80101f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d106      	bne.n	801016c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	4313      	orrs	r3, r2
 801016a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	4a1e      	ldr	r2, [pc, #120]	; (80101ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8010172:	4293      	cmp	r3, r2
 8010174:	d004      	beq.n	8010180 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a1d      	ldr	r2, [pc, #116]	; (80101f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d126      	bne.n	80101ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801018a:	051b      	lsls	r3, r3, #20
 801018c:	4313      	orrs	r3, r2
 801018e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	4313      	orrs	r3, r2
 801019c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101a8:	4313      	orrs	r3, r2
 80101aa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a0e      	ldr	r2, [pc, #56]	; (80101ec <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d004      	beq.n	80101c0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a0d      	ldr	r2, [pc, #52]	; (80101f0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d106      	bne.n	80101ce <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ca:	4313      	orrs	r3, r2
 80101cc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80101de:	2300      	movs	r3, #0
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr
 80101ec:	40010000 	.word	0x40010000
 80101f0:	40010400 	.word	0x40010400

080101f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80101f4:	b480      	push	{r7}
 80101f6:	b083      	sub	sp, #12
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80101fc:	bf00      	nop
 80101fe:	370c      	adds	r7, #12
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr

08010208 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010208:	b480      	push	{r7}
 801020a:	b083      	sub	sp, #12
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010210:	bf00      	nop
 8010212:	370c      	adds	r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b082      	sub	sp, #8
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d101      	bne.n	8010242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801023e:	2301      	movs	r3, #1
 8010240:	e042      	b.n	80102c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010248:	2b00      	cmp	r3, #0
 801024a:	d106      	bne.n	801025a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7f4 fe79 	bl	8004f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2224      	movs	r2, #36	; 0x24
 801025e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	681a      	ldr	r2, [r3, #0]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f022 0201 	bic.w	r2, r2, #1
 8010270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f82c 	bl	80102d0 <UART_SetConfig>
 8010278:	4603      	mov	r3, r0
 801027a:	2b01      	cmp	r3, #1
 801027c:	d101      	bne.n	8010282 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801027e:	2301      	movs	r3, #1
 8010280:	e022      	b.n	80102c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010286:	2b00      	cmp	r3, #0
 8010288:	d002      	beq.n	8010290 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 fe8c 	bl	8010fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801029e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	689a      	ldr	r2, [r3, #8]
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80102ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f042 0201 	orr.w	r2, r2, #1
 80102be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f000 ff13 	bl	80110ec <UART_CheckIdleState>
 80102c6:	4603      	mov	r3, r0
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3708      	adds	r7, #8
 80102cc:	46bd      	mov	sp, r7
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80102d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80102d4:	b092      	sub	sp, #72	; 0x48
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80102da:	2300      	movs	r3, #0
 80102dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	689a      	ldr	r2, [r3, #8]
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	691b      	ldr	r3, [r3, #16]
 80102e8:	431a      	orrs	r2, r3
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	431a      	orrs	r2, r3
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	69db      	ldr	r3, [r3, #28]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	4bbe      	ldr	r3, [pc, #760]	; (80105f8 <UART_SetConfig+0x328>)
 8010300:	4013      	ands	r3, r2
 8010302:	697a      	ldr	r2, [r7, #20]
 8010304:	6812      	ldr	r2, [r2, #0]
 8010306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010308:	430b      	orrs	r3, r1
 801030a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	68da      	ldr	r2, [r3, #12]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	430a      	orrs	r2, r1
 8010320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4ab3      	ldr	r2, [pc, #716]	; (80105fc <UART_SetConfig+0x32c>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d004      	beq.n	801033c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010338:	4313      	orrs	r3, r2
 801033a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801033c:	697b      	ldr	r3, [r7, #20]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	689a      	ldr	r2, [r3, #8]
 8010342:	4baf      	ldr	r3, [pc, #700]	; (8010600 <UART_SetConfig+0x330>)
 8010344:	4013      	ands	r3, r2
 8010346:	697a      	ldr	r2, [r7, #20]
 8010348:	6812      	ldr	r2, [r2, #0]
 801034a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801034c:	430b      	orrs	r3, r1
 801034e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010356:	f023 010f 	bic.w	r1, r3, #15
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	430a      	orrs	r2, r1
 8010364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4aa6      	ldr	r2, [pc, #664]	; (8010604 <UART_SetConfig+0x334>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d177      	bne.n	8010460 <UART_SetConfig+0x190>
 8010370:	4ba5      	ldr	r3, [pc, #660]	; (8010608 <UART_SetConfig+0x338>)
 8010372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010378:	2b28      	cmp	r3, #40	; 0x28
 801037a:	d86d      	bhi.n	8010458 <UART_SetConfig+0x188>
 801037c:	a201      	add	r2, pc, #4	; (adr r2, 8010384 <UART_SetConfig+0xb4>)
 801037e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010382:	bf00      	nop
 8010384:	08010429 	.word	0x08010429
 8010388:	08010459 	.word	0x08010459
 801038c:	08010459 	.word	0x08010459
 8010390:	08010459 	.word	0x08010459
 8010394:	08010459 	.word	0x08010459
 8010398:	08010459 	.word	0x08010459
 801039c:	08010459 	.word	0x08010459
 80103a0:	08010459 	.word	0x08010459
 80103a4:	08010431 	.word	0x08010431
 80103a8:	08010459 	.word	0x08010459
 80103ac:	08010459 	.word	0x08010459
 80103b0:	08010459 	.word	0x08010459
 80103b4:	08010459 	.word	0x08010459
 80103b8:	08010459 	.word	0x08010459
 80103bc:	08010459 	.word	0x08010459
 80103c0:	08010459 	.word	0x08010459
 80103c4:	08010439 	.word	0x08010439
 80103c8:	08010459 	.word	0x08010459
 80103cc:	08010459 	.word	0x08010459
 80103d0:	08010459 	.word	0x08010459
 80103d4:	08010459 	.word	0x08010459
 80103d8:	08010459 	.word	0x08010459
 80103dc:	08010459 	.word	0x08010459
 80103e0:	08010459 	.word	0x08010459
 80103e4:	08010441 	.word	0x08010441
 80103e8:	08010459 	.word	0x08010459
 80103ec:	08010459 	.word	0x08010459
 80103f0:	08010459 	.word	0x08010459
 80103f4:	08010459 	.word	0x08010459
 80103f8:	08010459 	.word	0x08010459
 80103fc:	08010459 	.word	0x08010459
 8010400:	08010459 	.word	0x08010459
 8010404:	08010449 	.word	0x08010449
 8010408:	08010459 	.word	0x08010459
 801040c:	08010459 	.word	0x08010459
 8010410:	08010459 	.word	0x08010459
 8010414:	08010459 	.word	0x08010459
 8010418:	08010459 	.word	0x08010459
 801041c:	08010459 	.word	0x08010459
 8010420:	08010459 	.word	0x08010459
 8010424:	08010451 	.word	0x08010451
 8010428:	2301      	movs	r3, #1
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801042e:	e326      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010430:	2304      	movs	r3, #4
 8010432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010436:	e322      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010438:	2308      	movs	r3, #8
 801043a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801043e:	e31e      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010440:	2310      	movs	r3, #16
 8010442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010446:	e31a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010448:	2320      	movs	r3, #32
 801044a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801044e:	e316      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010450:	2340      	movs	r3, #64	; 0x40
 8010452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010456:	e312      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010458:	2380      	movs	r3, #128	; 0x80
 801045a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801045e:	e30e      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a69      	ldr	r2, [pc, #420]	; (801060c <UART_SetConfig+0x33c>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d130      	bne.n	80104cc <UART_SetConfig+0x1fc>
 801046a:	4b67      	ldr	r3, [pc, #412]	; (8010608 <UART_SetConfig+0x338>)
 801046c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801046e:	f003 0307 	and.w	r3, r3, #7
 8010472:	2b05      	cmp	r3, #5
 8010474:	d826      	bhi.n	80104c4 <UART_SetConfig+0x1f4>
 8010476:	a201      	add	r2, pc, #4	; (adr r2, 801047c <UART_SetConfig+0x1ac>)
 8010478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047c:	08010495 	.word	0x08010495
 8010480:	0801049d 	.word	0x0801049d
 8010484:	080104a5 	.word	0x080104a5
 8010488:	080104ad 	.word	0x080104ad
 801048c:	080104b5 	.word	0x080104b5
 8010490:	080104bd 	.word	0x080104bd
 8010494:	2300      	movs	r3, #0
 8010496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801049a:	e2f0      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801049c:	2304      	movs	r3, #4
 801049e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104a2:	e2ec      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104a4:	2308      	movs	r3, #8
 80104a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104aa:	e2e8      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104ac:	2310      	movs	r3, #16
 80104ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104b2:	e2e4      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104b4:	2320      	movs	r3, #32
 80104b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ba:	e2e0      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104bc:	2340      	movs	r3, #64	; 0x40
 80104be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104c2:	e2dc      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104c4:	2380      	movs	r3, #128	; 0x80
 80104c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ca:	e2d8      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a4f      	ldr	r2, [pc, #316]	; (8010610 <UART_SetConfig+0x340>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d130      	bne.n	8010538 <UART_SetConfig+0x268>
 80104d6:	4b4c      	ldr	r3, [pc, #304]	; (8010608 <UART_SetConfig+0x338>)
 80104d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104da:	f003 0307 	and.w	r3, r3, #7
 80104de:	2b05      	cmp	r3, #5
 80104e0:	d826      	bhi.n	8010530 <UART_SetConfig+0x260>
 80104e2:	a201      	add	r2, pc, #4	; (adr r2, 80104e8 <UART_SetConfig+0x218>)
 80104e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e8:	08010501 	.word	0x08010501
 80104ec:	08010509 	.word	0x08010509
 80104f0:	08010511 	.word	0x08010511
 80104f4:	08010519 	.word	0x08010519
 80104f8:	08010521 	.word	0x08010521
 80104fc:	08010529 	.word	0x08010529
 8010500:	2300      	movs	r3, #0
 8010502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010506:	e2ba      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010508:	2304      	movs	r3, #4
 801050a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801050e:	e2b6      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010510:	2308      	movs	r3, #8
 8010512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010516:	e2b2      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010518:	2310      	movs	r3, #16
 801051a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801051e:	e2ae      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010520:	2320      	movs	r3, #32
 8010522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010526:	e2aa      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010528:	2340      	movs	r3, #64	; 0x40
 801052a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801052e:	e2a6      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010530:	2380      	movs	r3, #128	; 0x80
 8010532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010536:	e2a2      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	4a35      	ldr	r2, [pc, #212]	; (8010614 <UART_SetConfig+0x344>)
 801053e:	4293      	cmp	r3, r2
 8010540:	d130      	bne.n	80105a4 <UART_SetConfig+0x2d4>
 8010542:	4b31      	ldr	r3, [pc, #196]	; (8010608 <UART_SetConfig+0x338>)
 8010544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010546:	f003 0307 	and.w	r3, r3, #7
 801054a:	2b05      	cmp	r3, #5
 801054c:	d826      	bhi.n	801059c <UART_SetConfig+0x2cc>
 801054e:	a201      	add	r2, pc, #4	; (adr r2, 8010554 <UART_SetConfig+0x284>)
 8010550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010554:	0801056d 	.word	0x0801056d
 8010558:	08010575 	.word	0x08010575
 801055c:	0801057d 	.word	0x0801057d
 8010560:	08010585 	.word	0x08010585
 8010564:	0801058d 	.word	0x0801058d
 8010568:	08010595 	.word	0x08010595
 801056c:	2300      	movs	r3, #0
 801056e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010572:	e284      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010574:	2304      	movs	r3, #4
 8010576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801057a:	e280      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801057c:	2308      	movs	r3, #8
 801057e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010582:	e27c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010584:	2310      	movs	r3, #16
 8010586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058a:	e278      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801058c:	2320      	movs	r3, #32
 801058e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010592:	e274      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010594:	2340      	movs	r3, #64	; 0x40
 8010596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801059a:	e270      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801059c:	2380      	movs	r3, #128	; 0x80
 801059e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105a2:	e26c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a1b      	ldr	r2, [pc, #108]	; (8010618 <UART_SetConfig+0x348>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d142      	bne.n	8010634 <UART_SetConfig+0x364>
 80105ae:	4b16      	ldr	r3, [pc, #88]	; (8010608 <UART_SetConfig+0x338>)
 80105b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105b2:	f003 0307 	and.w	r3, r3, #7
 80105b6:	2b05      	cmp	r3, #5
 80105b8:	d838      	bhi.n	801062c <UART_SetConfig+0x35c>
 80105ba:	a201      	add	r2, pc, #4	; (adr r2, 80105c0 <UART_SetConfig+0x2f0>)
 80105bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105c0:	080105d9 	.word	0x080105d9
 80105c4:	080105e1 	.word	0x080105e1
 80105c8:	080105e9 	.word	0x080105e9
 80105cc:	080105f1 	.word	0x080105f1
 80105d0:	0801061d 	.word	0x0801061d
 80105d4:	08010625 	.word	0x08010625
 80105d8:	2300      	movs	r3, #0
 80105da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105de:	e24e      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80105e0:	2304      	movs	r3, #4
 80105e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105e6:	e24a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80105e8:	2308      	movs	r3, #8
 80105ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ee:	e246      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80105f0:	2310      	movs	r3, #16
 80105f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105f6:	e242      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80105f8:	cfff69f3 	.word	0xcfff69f3
 80105fc:	58000c00 	.word	0x58000c00
 8010600:	11fff4ff 	.word	0x11fff4ff
 8010604:	40011000 	.word	0x40011000
 8010608:	58024400 	.word	0x58024400
 801060c:	40004400 	.word	0x40004400
 8010610:	40004800 	.word	0x40004800
 8010614:	40004c00 	.word	0x40004c00
 8010618:	40005000 	.word	0x40005000
 801061c:	2320      	movs	r3, #32
 801061e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010622:	e22c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010624:	2340      	movs	r3, #64	; 0x40
 8010626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801062a:	e228      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801062c:	2380      	movs	r3, #128	; 0x80
 801062e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010632:	e224      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4ab1      	ldr	r2, [pc, #708]	; (8010900 <UART_SetConfig+0x630>)
 801063a:	4293      	cmp	r3, r2
 801063c:	d176      	bne.n	801072c <UART_SetConfig+0x45c>
 801063e:	4bb1      	ldr	r3, [pc, #708]	; (8010904 <UART_SetConfig+0x634>)
 8010640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010646:	2b28      	cmp	r3, #40	; 0x28
 8010648:	d86c      	bhi.n	8010724 <UART_SetConfig+0x454>
 801064a:	a201      	add	r2, pc, #4	; (adr r2, 8010650 <UART_SetConfig+0x380>)
 801064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010650:	080106f5 	.word	0x080106f5
 8010654:	08010725 	.word	0x08010725
 8010658:	08010725 	.word	0x08010725
 801065c:	08010725 	.word	0x08010725
 8010660:	08010725 	.word	0x08010725
 8010664:	08010725 	.word	0x08010725
 8010668:	08010725 	.word	0x08010725
 801066c:	08010725 	.word	0x08010725
 8010670:	080106fd 	.word	0x080106fd
 8010674:	08010725 	.word	0x08010725
 8010678:	08010725 	.word	0x08010725
 801067c:	08010725 	.word	0x08010725
 8010680:	08010725 	.word	0x08010725
 8010684:	08010725 	.word	0x08010725
 8010688:	08010725 	.word	0x08010725
 801068c:	08010725 	.word	0x08010725
 8010690:	08010705 	.word	0x08010705
 8010694:	08010725 	.word	0x08010725
 8010698:	08010725 	.word	0x08010725
 801069c:	08010725 	.word	0x08010725
 80106a0:	08010725 	.word	0x08010725
 80106a4:	08010725 	.word	0x08010725
 80106a8:	08010725 	.word	0x08010725
 80106ac:	08010725 	.word	0x08010725
 80106b0:	0801070d 	.word	0x0801070d
 80106b4:	08010725 	.word	0x08010725
 80106b8:	08010725 	.word	0x08010725
 80106bc:	08010725 	.word	0x08010725
 80106c0:	08010725 	.word	0x08010725
 80106c4:	08010725 	.word	0x08010725
 80106c8:	08010725 	.word	0x08010725
 80106cc:	08010725 	.word	0x08010725
 80106d0:	08010715 	.word	0x08010715
 80106d4:	08010725 	.word	0x08010725
 80106d8:	08010725 	.word	0x08010725
 80106dc:	08010725 	.word	0x08010725
 80106e0:	08010725 	.word	0x08010725
 80106e4:	08010725 	.word	0x08010725
 80106e8:	08010725 	.word	0x08010725
 80106ec:	08010725 	.word	0x08010725
 80106f0:	0801071d 	.word	0x0801071d
 80106f4:	2301      	movs	r3, #1
 80106f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106fa:	e1c0      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80106fc:	2304      	movs	r3, #4
 80106fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010702:	e1bc      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010704:	2308      	movs	r3, #8
 8010706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801070a:	e1b8      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801070c:	2310      	movs	r3, #16
 801070e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010712:	e1b4      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010714:	2320      	movs	r3, #32
 8010716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801071a:	e1b0      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801071c:	2340      	movs	r3, #64	; 0x40
 801071e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010722:	e1ac      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010724:	2380      	movs	r3, #128	; 0x80
 8010726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801072a:	e1a8      	b.n	8010a7e <UART_SetConfig+0x7ae>
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a75      	ldr	r2, [pc, #468]	; (8010908 <UART_SetConfig+0x638>)
 8010732:	4293      	cmp	r3, r2
 8010734:	d130      	bne.n	8010798 <UART_SetConfig+0x4c8>
 8010736:	4b73      	ldr	r3, [pc, #460]	; (8010904 <UART_SetConfig+0x634>)
 8010738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801073a:	f003 0307 	and.w	r3, r3, #7
 801073e:	2b05      	cmp	r3, #5
 8010740:	d826      	bhi.n	8010790 <UART_SetConfig+0x4c0>
 8010742:	a201      	add	r2, pc, #4	; (adr r2, 8010748 <UART_SetConfig+0x478>)
 8010744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010748:	08010761 	.word	0x08010761
 801074c:	08010769 	.word	0x08010769
 8010750:	08010771 	.word	0x08010771
 8010754:	08010779 	.word	0x08010779
 8010758:	08010781 	.word	0x08010781
 801075c:	08010789 	.word	0x08010789
 8010760:	2300      	movs	r3, #0
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010766:	e18a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010768:	2304      	movs	r3, #4
 801076a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801076e:	e186      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010770:	2308      	movs	r3, #8
 8010772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010776:	e182      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010778:	2310      	movs	r3, #16
 801077a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801077e:	e17e      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010780:	2320      	movs	r3, #32
 8010782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010786:	e17a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010788:	2340      	movs	r3, #64	; 0x40
 801078a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801078e:	e176      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010790:	2380      	movs	r3, #128	; 0x80
 8010792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010796:	e172      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	4a5b      	ldr	r2, [pc, #364]	; (801090c <UART_SetConfig+0x63c>)
 801079e:	4293      	cmp	r3, r2
 80107a0:	d130      	bne.n	8010804 <UART_SetConfig+0x534>
 80107a2:	4b58      	ldr	r3, [pc, #352]	; (8010904 <UART_SetConfig+0x634>)
 80107a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107a6:	f003 0307 	and.w	r3, r3, #7
 80107aa:	2b05      	cmp	r3, #5
 80107ac:	d826      	bhi.n	80107fc <UART_SetConfig+0x52c>
 80107ae:	a201      	add	r2, pc, #4	; (adr r2, 80107b4 <UART_SetConfig+0x4e4>)
 80107b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b4:	080107cd 	.word	0x080107cd
 80107b8:	080107d5 	.word	0x080107d5
 80107bc:	080107dd 	.word	0x080107dd
 80107c0:	080107e5 	.word	0x080107e5
 80107c4:	080107ed 	.word	0x080107ed
 80107c8:	080107f5 	.word	0x080107f5
 80107cc:	2300      	movs	r3, #0
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d2:	e154      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107d4:	2304      	movs	r3, #4
 80107d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107da:	e150      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107dc:	2308      	movs	r3, #8
 80107de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107e2:	e14c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107e4:	2310      	movs	r3, #16
 80107e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ea:	e148      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107ec:	2320      	movs	r3, #32
 80107ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107f2:	e144      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107f4:	2340      	movs	r3, #64	; 0x40
 80107f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107fa:	e140      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80107fc:	2380      	movs	r3, #128	; 0x80
 80107fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010802:	e13c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4a41      	ldr	r2, [pc, #260]	; (8010910 <UART_SetConfig+0x640>)
 801080a:	4293      	cmp	r3, r2
 801080c:	f040 8082 	bne.w	8010914 <UART_SetConfig+0x644>
 8010810:	4b3c      	ldr	r3, [pc, #240]	; (8010904 <UART_SetConfig+0x634>)
 8010812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010818:	2b28      	cmp	r3, #40	; 0x28
 801081a:	d86d      	bhi.n	80108f8 <UART_SetConfig+0x628>
 801081c:	a201      	add	r2, pc, #4	; (adr r2, 8010824 <UART_SetConfig+0x554>)
 801081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010822:	bf00      	nop
 8010824:	080108c9 	.word	0x080108c9
 8010828:	080108f9 	.word	0x080108f9
 801082c:	080108f9 	.word	0x080108f9
 8010830:	080108f9 	.word	0x080108f9
 8010834:	080108f9 	.word	0x080108f9
 8010838:	080108f9 	.word	0x080108f9
 801083c:	080108f9 	.word	0x080108f9
 8010840:	080108f9 	.word	0x080108f9
 8010844:	080108d1 	.word	0x080108d1
 8010848:	080108f9 	.word	0x080108f9
 801084c:	080108f9 	.word	0x080108f9
 8010850:	080108f9 	.word	0x080108f9
 8010854:	080108f9 	.word	0x080108f9
 8010858:	080108f9 	.word	0x080108f9
 801085c:	080108f9 	.word	0x080108f9
 8010860:	080108f9 	.word	0x080108f9
 8010864:	080108d9 	.word	0x080108d9
 8010868:	080108f9 	.word	0x080108f9
 801086c:	080108f9 	.word	0x080108f9
 8010870:	080108f9 	.word	0x080108f9
 8010874:	080108f9 	.word	0x080108f9
 8010878:	080108f9 	.word	0x080108f9
 801087c:	080108f9 	.word	0x080108f9
 8010880:	080108f9 	.word	0x080108f9
 8010884:	080108e1 	.word	0x080108e1
 8010888:	080108f9 	.word	0x080108f9
 801088c:	080108f9 	.word	0x080108f9
 8010890:	080108f9 	.word	0x080108f9
 8010894:	080108f9 	.word	0x080108f9
 8010898:	080108f9 	.word	0x080108f9
 801089c:	080108f9 	.word	0x080108f9
 80108a0:	080108f9 	.word	0x080108f9
 80108a4:	080108e9 	.word	0x080108e9
 80108a8:	080108f9 	.word	0x080108f9
 80108ac:	080108f9 	.word	0x080108f9
 80108b0:	080108f9 	.word	0x080108f9
 80108b4:	080108f9 	.word	0x080108f9
 80108b8:	080108f9 	.word	0x080108f9
 80108bc:	080108f9 	.word	0x080108f9
 80108c0:	080108f9 	.word	0x080108f9
 80108c4:	080108f1 	.word	0x080108f1
 80108c8:	2301      	movs	r3, #1
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ce:	e0d6      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108d0:	2304      	movs	r3, #4
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d6:	e0d2      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108d8:	2308      	movs	r3, #8
 80108da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108de:	e0ce      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108e0:	2310      	movs	r3, #16
 80108e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e6:	e0ca      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108e8:	2320      	movs	r3, #32
 80108ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ee:	e0c6      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108f0:	2340      	movs	r3, #64	; 0x40
 80108f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f6:	e0c2      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80108f8:	2380      	movs	r3, #128	; 0x80
 80108fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fe:	e0be      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010900:	40011400 	.word	0x40011400
 8010904:	58024400 	.word	0x58024400
 8010908:	40007800 	.word	0x40007800
 801090c:	40007c00 	.word	0x40007c00
 8010910:	40011800 	.word	0x40011800
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4aad      	ldr	r2, [pc, #692]	; (8010bd0 <UART_SetConfig+0x900>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d176      	bne.n	8010a0c <UART_SetConfig+0x73c>
 801091e:	4bad      	ldr	r3, [pc, #692]	; (8010bd4 <UART_SetConfig+0x904>)
 8010920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010926:	2b28      	cmp	r3, #40	; 0x28
 8010928:	d86c      	bhi.n	8010a04 <UART_SetConfig+0x734>
 801092a:	a201      	add	r2, pc, #4	; (adr r2, 8010930 <UART_SetConfig+0x660>)
 801092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010930:	080109d5 	.word	0x080109d5
 8010934:	08010a05 	.word	0x08010a05
 8010938:	08010a05 	.word	0x08010a05
 801093c:	08010a05 	.word	0x08010a05
 8010940:	08010a05 	.word	0x08010a05
 8010944:	08010a05 	.word	0x08010a05
 8010948:	08010a05 	.word	0x08010a05
 801094c:	08010a05 	.word	0x08010a05
 8010950:	080109dd 	.word	0x080109dd
 8010954:	08010a05 	.word	0x08010a05
 8010958:	08010a05 	.word	0x08010a05
 801095c:	08010a05 	.word	0x08010a05
 8010960:	08010a05 	.word	0x08010a05
 8010964:	08010a05 	.word	0x08010a05
 8010968:	08010a05 	.word	0x08010a05
 801096c:	08010a05 	.word	0x08010a05
 8010970:	080109e5 	.word	0x080109e5
 8010974:	08010a05 	.word	0x08010a05
 8010978:	08010a05 	.word	0x08010a05
 801097c:	08010a05 	.word	0x08010a05
 8010980:	08010a05 	.word	0x08010a05
 8010984:	08010a05 	.word	0x08010a05
 8010988:	08010a05 	.word	0x08010a05
 801098c:	08010a05 	.word	0x08010a05
 8010990:	080109ed 	.word	0x080109ed
 8010994:	08010a05 	.word	0x08010a05
 8010998:	08010a05 	.word	0x08010a05
 801099c:	08010a05 	.word	0x08010a05
 80109a0:	08010a05 	.word	0x08010a05
 80109a4:	08010a05 	.word	0x08010a05
 80109a8:	08010a05 	.word	0x08010a05
 80109ac:	08010a05 	.word	0x08010a05
 80109b0:	080109f5 	.word	0x080109f5
 80109b4:	08010a05 	.word	0x08010a05
 80109b8:	08010a05 	.word	0x08010a05
 80109bc:	08010a05 	.word	0x08010a05
 80109c0:	08010a05 	.word	0x08010a05
 80109c4:	08010a05 	.word	0x08010a05
 80109c8:	08010a05 	.word	0x08010a05
 80109cc:	08010a05 	.word	0x08010a05
 80109d0:	080109fd 	.word	0x080109fd
 80109d4:	2301      	movs	r3, #1
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e050      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80109dc:	2304      	movs	r3, #4
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e2:	e04c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80109e4:	2308      	movs	r3, #8
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e048      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80109ec:	2310      	movs	r3, #16
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e044      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80109f4:	2320      	movs	r3, #32
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109fa:	e040      	b.n	8010a7e <UART_SetConfig+0x7ae>
 80109fc:	2340      	movs	r3, #64	; 0x40
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a02:	e03c      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a04:	2380      	movs	r3, #128	; 0x80
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e038      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	4a71      	ldr	r2, [pc, #452]	; (8010bd8 <UART_SetConfig+0x908>)
 8010a12:	4293      	cmp	r3, r2
 8010a14:	d130      	bne.n	8010a78 <UART_SetConfig+0x7a8>
 8010a16:	4b6f      	ldr	r3, [pc, #444]	; (8010bd4 <UART_SetConfig+0x904>)
 8010a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a1a:	f003 0307 	and.w	r3, r3, #7
 8010a1e:	2b05      	cmp	r3, #5
 8010a20:	d826      	bhi.n	8010a70 <UART_SetConfig+0x7a0>
 8010a22:	a201      	add	r2, pc, #4	; (adr r2, 8010a28 <UART_SetConfig+0x758>)
 8010a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a28:	08010a41 	.word	0x08010a41
 8010a2c:	08010a49 	.word	0x08010a49
 8010a30:	08010a51 	.word	0x08010a51
 8010a34:	08010a59 	.word	0x08010a59
 8010a38:	08010a61 	.word	0x08010a61
 8010a3c:	08010a69 	.word	0x08010a69
 8010a40:	2302      	movs	r3, #2
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a46:	e01a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a48:	2304      	movs	r3, #4
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4e:	e016      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a50:	2308      	movs	r3, #8
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a56:	e012      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a58:	2310      	movs	r3, #16
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a5e:	e00e      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a60:	2320      	movs	r3, #32
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a66:	e00a      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a68:	2340      	movs	r3, #64	; 0x40
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a6e:	e006      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a70:	2380      	movs	r3, #128	; 0x80
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e002      	b.n	8010a7e <UART_SetConfig+0x7ae>
 8010a78:	2380      	movs	r3, #128	; 0x80
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	4a55      	ldr	r2, [pc, #340]	; (8010bd8 <UART_SetConfig+0x908>)
 8010a84:	4293      	cmp	r3, r2
 8010a86:	f040 80f8 	bne.w	8010c7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010a8e:	2b20      	cmp	r3, #32
 8010a90:	dc46      	bgt.n	8010b20 <UART_SetConfig+0x850>
 8010a92:	2b02      	cmp	r3, #2
 8010a94:	db75      	blt.n	8010b82 <UART_SetConfig+0x8b2>
 8010a96:	3b02      	subs	r3, #2
 8010a98:	2b1e      	cmp	r3, #30
 8010a9a:	d872      	bhi.n	8010b82 <UART_SetConfig+0x8b2>
 8010a9c:	a201      	add	r2, pc, #4	; (adr r2, 8010aa4 <UART_SetConfig+0x7d4>)
 8010a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa2:	bf00      	nop
 8010aa4:	08010b27 	.word	0x08010b27
 8010aa8:	08010b83 	.word	0x08010b83
 8010aac:	08010b2f 	.word	0x08010b2f
 8010ab0:	08010b83 	.word	0x08010b83
 8010ab4:	08010b83 	.word	0x08010b83
 8010ab8:	08010b83 	.word	0x08010b83
 8010abc:	08010b3f 	.word	0x08010b3f
 8010ac0:	08010b83 	.word	0x08010b83
 8010ac4:	08010b83 	.word	0x08010b83
 8010ac8:	08010b83 	.word	0x08010b83
 8010acc:	08010b83 	.word	0x08010b83
 8010ad0:	08010b83 	.word	0x08010b83
 8010ad4:	08010b83 	.word	0x08010b83
 8010ad8:	08010b83 	.word	0x08010b83
 8010adc:	08010b4f 	.word	0x08010b4f
 8010ae0:	08010b83 	.word	0x08010b83
 8010ae4:	08010b83 	.word	0x08010b83
 8010ae8:	08010b83 	.word	0x08010b83
 8010aec:	08010b83 	.word	0x08010b83
 8010af0:	08010b83 	.word	0x08010b83
 8010af4:	08010b83 	.word	0x08010b83
 8010af8:	08010b83 	.word	0x08010b83
 8010afc:	08010b83 	.word	0x08010b83
 8010b00:	08010b83 	.word	0x08010b83
 8010b04:	08010b83 	.word	0x08010b83
 8010b08:	08010b83 	.word	0x08010b83
 8010b0c:	08010b83 	.word	0x08010b83
 8010b10:	08010b83 	.word	0x08010b83
 8010b14:	08010b83 	.word	0x08010b83
 8010b18:	08010b83 	.word	0x08010b83
 8010b1c:	08010b75 	.word	0x08010b75
 8010b20:	2b40      	cmp	r3, #64	; 0x40
 8010b22:	d02a      	beq.n	8010b7a <UART_SetConfig+0x8aa>
 8010b24:	e02d      	b.n	8010b82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010b26:	f7fc ff13 	bl	800d950 <HAL_RCCEx_GetD3PCLK1Freq>
 8010b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010b2c:	e02f      	b.n	8010b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fc ff22 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b3c:	e027      	b.n	8010b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b3e:	f107 0318 	add.w	r3, r7, #24
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fd f86e 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b4c:	e01f      	b.n	8010b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b4e:	4b21      	ldr	r3, [pc, #132]	; (8010bd4 <UART_SetConfig+0x904>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f003 0320 	and.w	r3, r3, #32
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010b5a:	4b1e      	ldr	r3, [pc, #120]	; (8010bd4 <UART_SetConfig+0x904>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	08db      	lsrs	r3, r3, #3
 8010b60:	f003 0303 	and.w	r3, r3, #3
 8010b64:	4a1d      	ldr	r2, [pc, #116]	; (8010bdc <UART_SetConfig+0x90c>)
 8010b66:	fa22 f303 	lsr.w	r3, r2, r3
 8010b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b6c:	e00f      	b.n	8010b8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010b6e:	4b1b      	ldr	r3, [pc, #108]	; (8010bdc <UART_SetConfig+0x90c>)
 8010b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b72:	e00c      	b.n	8010b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010b74:	4b1a      	ldr	r3, [pc, #104]	; (8010be0 <UART_SetConfig+0x910>)
 8010b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b78:	e009      	b.n	8010b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010b80:	e005      	b.n	8010b8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010b82:	2300      	movs	r3, #0
 8010b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010b86:	2301      	movs	r3, #1
 8010b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f000 81ee 	beq.w	8010f72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9a:	4a12      	ldr	r2, [pc, #72]	; (8010be4 <UART_SetConfig+0x914>)
 8010b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ba8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4413      	add	r3, r2
 8010bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	d305      	bcc.n	8010bc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d910      	bls.n	8010be8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010bcc:	e1d1      	b.n	8010f72 <UART_SetConfig+0xca2>
 8010bce:	bf00      	nop
 8010bd0:	40011c00 	.word	0x40011c00
 8010bd4:	58024400 	.word	0x58024400
 8010bd8:	58000c00 	.word	0x58000c00
 8010bdc:	03d09000 	.word	0x03d09000
 8010be0:	003d0900 	.word	0x003d0900
 8010be4:	08026c9c 	.word	0x08026c9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bea:	2200      	movs	r2, #0
 8010bec:	60bb      	str	r3, [r7, #8]
 8010bee:	60fa      	str	r2, [r7, #12]
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf4:	4ac0      	ldr	r2, [pc, #768]	; (8010ef8 <UART_SetConfig+0xc28>)
 8010bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	603b      	str	r3, [r7, #0]
 8010c00:	607a      	str	r2, [r7, #4]
 8010c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010c0a:	f7ef fb81 	bl	8000310 <__aeabi_uldivmod>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	4610      	mov	r0, r2
 8010c14:	4619      	mov	r1, r3
 8010c16:	f04f 0200 	mov.w	r2, #0
 8010c1a:	f04f 0300 	mov.w	r3, #0
 8010c1e:	020b      	lsls	r3, r1, #8
 8010c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010c24:	0202      	lsls	r2, r0, #8
 8010c26:	6979      	ldr	r1, [r7, #20]
 8010c28:	6849      	ldr	r1, [r1, #4]
 8010c2a:	0849      	lsrs	r1, r1, #1
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	460c      	mov	r4, r1
 8010c30:	4605      	mov	r5, r0
 8010c32:	eb12 0804 	adds.w	r8, r2, r4
 8010c36:	eb43 0905 	adc.w	r9, r3, r5
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	469a      	mov	sl, r3
 8010c42:	4693      	mov	fp, r2
 8010c44:	4652      	mov	r2, sl
 8010c46:	465b      	mov	r3, fp
 8010c48:	4640      	mov	r0, r8
 8010c4a:	4649      	mov	r1, r9
 8010c4c:	f7ef fb60 	bl	8000310 <__aeabi_uldivmod>
 8010c50:	4602      	mov	r2, r0
 8010c52:	460b      	mov	r3, r1
 8010c54:	4613      	mov	r3, r2
 8010c56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010c5e:	d308      	bcc.n	8010c72 <UART_SetConfig+0x9a2>
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c66:	d204      	bcs.n	8010c72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c6e:	60da      	str	r2, [r3, #12]
 8010c70:	e17f      	b.n	8010f72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010c72:	2301      	movs	r3, #1
 8010c74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010c78:	e17b      	b.n	8010f72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	69db      	ldr	r3, [r3, #28]
 8010c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c82:	f040 80bd 	bne.w	8010e00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c8a:	2b20      	cmp	r3, #32
 8010c8c:	dc48      	bgt.n	8010d20 <UART_SetConfig+0xa50>
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	db7b      	blt.n	8010d8a <UART_SetConfig+0xaba>
 8010c92:	2b20      	cmp	r3, #32
 8010c94:	d879      	bhi.n	8010d8a <UART_SetConfig+0xaba>
 8010c96:	a201      	add	r2, pc, #4	; (adr r2, 8010c9c <UART_SetConfig+0x9cc>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010d27 	.word	0x08010d27
 8010ca0:	08010d2f 	.word	0x08010d2f
 8010ca4:	08010d8b 	.word	0x08010d8b
 8010ca8:	08010d8b 	.word	0x08010d8b
 8010cac:	08010d37 	.word	0x08010d37
 8010cb0:	08010d8b 	.word	0x08010d8b
 8010cb4:	08010d8b 	.word	0x08010d8b
 8010cb8:	08010d8b 	.word	0x08010d8b
 8010cbc:	08010d47 	.word	0x08010d47
 8010cc0:	08010d8b 	.word	0x08010d8b
 8010cc4:	08010d8b 	.word	0x08010d8b
 8010cc8:	08010d8b 	.word	0x08010d8b
 8010ccc:	08010d8b 	.word	0x08010d8b
 8010cd0:	08010d8b 	.word	0x08010d8b
 8010cd4:	08010d8b 	.word	0x08010d8b
 8010cd8:	08010d8b 	.word	0x08010d8b
 8010cdc:	08010d57 	.word	0x08010d57
 8010ce0:	08010d8b 	.word	0x08010d8b
 8010ce4:	08010d8b 	.word	0x08010d8b
 8010ce8:	08010d8b 	.word	0x08010d8b
 8010cec:	08010d8b 	.word	0x08010d8b
 8010cf0:	08010d8b 	.word	0x08010d8b
 8010cf4:	08010d8b 	.word	0x08010d8b
 8010cf8:	08010d8b 	.word	0x08010d8b
 8010cfc:	08010d8b 	.word	0x08010d8b
 8010d00:	08010d8b 	.word	0x08010d8b
 8010d04:	08010d8b 	.word	0x08010d8b
 8010d08:	08010d8b 	.word	0x08010d8b
 8010d0c:	08010d8b 	.word	0x08010d8b
 8010d10:	08010d8b 	.word	0x08010d8b
 8010d14:	08010d8b 	.word	0x08010d8b
 8010d18:	08010d8b 	.word	0x08010d8b
 8010d1c:	08010d7d 	.word	0x08010d7d
 8010d20:	2b40      	cmp	r3, #64	; 0x40
 8010d22:	d02e      	beq.n	8010d82 <UART_SetConfig+0xab2>
 8010d24:	e031      	b.n	8010d8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d26:	f7fb fac7 	bl	800c2b8 <HAL_RCC_GetPCLK1Freq>
 8010d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d2c:	e033      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d2e:	f7fb fad9 	bl	800c2e4 <HAL_RCC_GetPCLK2Freq>
 8010d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d34:	e02f      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fc fe1e 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d44:	e027      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d46:	f107 0318 	add.w	r3, r7, #24
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fc ff6a 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d54:	e01f      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d56:	4b69      	ldr	r3, [pc, #420]	; (8010efc <UART_SetConfig+0xc2c>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f003 0320 	and.w	r3, r3, #32
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d009      	beq.n	8010d76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010d62:	4b66      	ldr	r3, [pc, #408]	; (8010efc <UART_SetConfig+0xc2c>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	08db      	lsrs	r3, r3, #3
 8010d68:	f003 0303 	and.w	r3, r3, #3
 8010d6c:	4a64      	ldr	r2, [pc, #400]	; (8010f00 <UART_SetConfig+0xc30>)
 8010d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d74:	e00f      	b.n	8010d96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010d76:	4b62      	ldr	r3, [pc, #392]	; (8010f00 <UART_SetConfig+0xc30>)
 8010d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d7a:	e00c      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010d7c:	4b61      	ldr	r3, [pc, #388]	; (8010f04 <UART_SetConfig+0xc34>)
 8010d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d80:	e009      	b.n	8010d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d88:	e005      	b.n	8010d96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010d8e:	2301      	movs	r3, #1
 8010d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	f000 80ea 	beq.w	8010f72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da2:	4a55      	ldr	r2, [pc, #340]	; (8010ef8 <UART_SetConfig+0xc28>)
 8010da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010da8:	461a      	mov	r2, r3
 8010daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8010db0:	005a      	lsls	r2, r3, #1
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	085b      	lsrs	r3, r3, #1
 8010db8:	441a      	add	r2, r3
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010dc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc6:	2b0f      	cmp	r3, #15
 8010dc8:	d916      	bls.n	8010df8 <UART_SetConfig+0xb28>
 8010dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dd0:	d212      	bcs.n	8010df8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	f023 030f 	bic.w	r3, r3, #15
 8010dda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	085b      	lsrs	r3, r3, #1
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	f003 0307 	and.w	r3, r3, #7
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010dea:	4313      	orrs	r3, r2
 8010dec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010df4:	60da      	str	r2, [r3, #12]
 8010df6:	e0bc      	b.n	8010f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010df8:	2301      	movs	r3, #1
 8010dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010dfe:	e0b8      	b.n	8010f72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e04:	2b20      	cmp	r3, #32
 8010e06:	dc4b      	bgt.n	8010ea0 <UART_SetConfig+0xbd0>
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f2c0 8087 	blt.w	8010f1c <UART_SetConfig+0xc4c>
 8010e0e:	2b20      	cmp	r3, #32
 8010e10:	f200 8084 	bhi.w	8010f1c <UART_SetConfig+0xc4c>
 8010e14:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <UART_SetConfig+0xb4c>)
 8010e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1a:	bf00      	nop
 8010e1c:	08010ea7 	.word	0x08010ea7
 8010e20:	08010eaf 	.word	0x08010eaf
 8010e24:	08010f1d 	.word	0x08010f1d
 8010e28:	08010f1d 	.word	0x08010f1d
 8010e2c:	08010eb7 	.word	0x08010eb7
 8010e30:	08010f1d 	.word	0x08010f1d
 8010e34:	08010f1d 	.word	0x08010f1d
 8010e38:	08010f1d 	.word	0x08010f1d
 8010e3c:	08010ec7 	.word	0x08010ec7
 8010e40:	08010f1d 	.word	0x08010f1d
 8010e44:	08010f1d 	.word	0x08010f1d
 8010e48:	08010f1d 	.word	0x08010f1d
 8010e4c:	08010f1d 	.word	0x08010f1d
 8010e50:	08010f1d 	.word	0x08010f1d
 8010e54:	08010f1d 	.word	0x08010f1d
 8010e58:	08010f1d 	.word	0x08010f1d
 8010e5c:	08010ed7 	.word	0x08010ed7
 8010e60:	08010f1d 	.word	0x08010f1d
 8010e64:	08010f1d 	.word	0x08010f1d
 8010e68:	08010f1d 	.word	0x08010f1d
 8010e6c:	08010f1d 	.word	0x08010f1d
 8010e70:	08010f1d 	.word	0x08010f1d
 8010e74:	08010f1d 	.word	0x08010f1d
 8010e78:	08010f1d 	.word	0x08010f1d
 8010e7c:	08010f1d 	.word	0x08010f1d
 8010e80:	08010f1d 	.word	0x08010f1d
 8010e84:	08010f1d 	.word	0x08010f1d
 8010e88:	08010f1d 	.word	0x08010f1d
 8010e8c:	08010f1d 	.word	0x08010f1d
 8010e90:	08010f1d 	.word	0x08010f1d
 8010e94:	08010f1d 	.word	0x08010f1d
 8010e98:	08010f1d 	.word	0x08010f1d
 8010e9c:	08010f0f 	.word	0x08010f0f
 8010ea0:	2b40      	cmp	r3, #64	; 0x40
 8010ea2:	d037      	beq.n	8010f14 <UART_SetConfig+0xc44>
 8010ea4:	e03a      	b.n	8010f1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ea6:	f7fb fa07 	bl	800c2b8 <HAL_RCC_GetPCLK1Freq>
 8010eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010eac:	e03c      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010eae:	f7fb fa19 	bl	800c2e4 <HAL_RCC_GetPCLK2Freq>
 8010eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010eb4:	e038      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fc fd5e 	bl	800d97c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ec4:	e030      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ec6:	f107 0318 	add.w	r3, r7, #24
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fc feaa 	bl	800dc24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ed4:	e028      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ed6:	4b09      	ldr	r3, [pc, #36]	; (8010efc <UART_SetConfig+0xc2c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f003 0320 	and.w	r3, r3, #32
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d012      	beq.n	8010f08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ee2:	4b06      	ldr	r3, [pc, #24]	; (8010efc <UART_SetConfig+0xc2c>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	08db      	lsrs	r3, r3, #3
 8010ee8:	f003 0303 	and.w	r3, r3, #3
 8010eec:	4a04      	ldr	r2, [pc, #16]	; (8010f00 <UART_SetConfig+0xc30>)
 8010eee:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ef4:	e018      	b.n	8010f28 <UART_SetConfig+0xc58>
 8010ef6:	bf00      	nop
 8010ef8:	08026c9c 	.word	0x08026c9c
 8010efc:	58024400 	.word	0x58024400
 8010f00:	03d09000 	.word	0x03d09000
 8010f04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010f08:	4b24      	ldr	r3, [pc, #144]	; (8010f9c <UART_SetConfig+0xccc>)
 8010f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f0c:	e00c      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010f0e:	4b24      	ldr	r3, [pc, #144]	; (8010fa0 <UART_SetConfig+0xcd0>)
 8010f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f12:	e009      	b.n	8010f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f1a:	e005      	b.n	8010f28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010f20:	2301      	movs	r3, #1
 8010f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010f26:	bf00      	nop
    }

    if (pclk != 0U)
 8010f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d021      	beq.n	8010f72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	4a1c      	ldr	r2, [pc, #112]	; (8010fa4 <UART_SetConfig+0xcd4>)
 8010f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	685b      	ldr	r3, [r3, #4]
 8010f44:	085b      	lsrs	r3, r3, #1
 8010f46:	441a      	add	r2, r3
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f54:	2b0f      	cmp	r3, #15
 8010f56:	d909      	bls.n	8010f6c <UART_SetConfig+0xc9c>
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f5e:	d205      	bcs.n	8010f6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	60da      	str	r2, [r3, #12]
 8010f6a:	e002      	b.n	8010f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	2201      	movs	r2, #1
 8010f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	2200      	movs	r2, #0
 8010f86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010f88:	697b      	ldr	r3, [r7, #20]
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010f8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3748      	adds	r7, #72	; 0x48
 8010f96:	46bd      	mov	sp, r7
 8010f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010f9c:	03d09000 	.word	0x03d09000
 8010fa0:	003d0900 	.word	0x003d0900
 8010fa4:	08026c9c 	.word	0x08026c9c

08010fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b083      	sub	sp, #12
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fb4:	f003 0301 	and.w	r3, r3, #1
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00a      	beq.n	8010fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	430a      	orrs	r2, r1
 8010fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010fd6:	f003 0302 	and.w	r3, r3, #2
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00a      	beq.n	8010ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	430a      	orrs	r2, r1
 8010ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff8:	f003 0304 	and.w	r3, r3, #4
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00a      	beq.n	8011016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	430a      	orrs	r2, r1
 8011014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801101a:	f003 0308 	and.w	r3, r3, #8
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00a      	beq.n	8011038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	685b      	ldr	r3, [r3, #4]
 8011028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	430a      	orrs	r2, r1
 8011036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801103c:	f003 0310 	and.w	r3, r3, #16
 8011040:	2b00      	cmp	r3, #0
 8011042:	d00a      	beq.n	801105a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	689b      	ldr	r3, [r3, #8]
 801104a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	430a      	orrs	r2, r1
 8011058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	f003 0320 	and.w	r3, r3, #32
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00a      	beq.n	801107c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	430a      	orrs	r2, r1
 801107a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011084:	2b00      	cmp	r3, #0
 8011086:	d01a      	beq.n	80110be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	430a      	orrs	r2, r1
 801109c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110a6:	d10a      	bne.n	80110be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	430a      	orrs	r2, r1
 80110bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00a      	beq.n	80110e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	430a      	orrs	r2, r1
 80110de:	605a      	str	r2, [r3, #4]
  }
}
 80110e0:	bf00      	nop
 80110e2:	370c      	adds	r7, #12
 80110e4:	46bd      	mov	sp, r7
 80110e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ea:	4770      	bx	lr

080110ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af02      	add	r7, sp, #8
 80110f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80110fc:	f7f4 f888 	bl	8005210 <HAL_GetTick>
 8011100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	f003 0308 	and.w	r3, r3, #8
 801110c:	2b08      	cmp	r3, #8
 801110e:	d10e      	bne.n	801112e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	2200      	movs	r2, #0
 801111a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f82f 	bl	8011182 <UART_WaitOnFlagUntilTimeout>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d001      	beq.n	801112e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801112a:	2303      	movs	r3, #3
 801112c:	e025      	b.n	801117a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f003 0304 	and.w	r3, r3, #4
 8011138:	2b04      	cmp	r3, #4
 801113a:	d10e      	bne.n	801115a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801113c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2200      	movs	r2, #0
 8011146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f000 f819 	bl	8011182 <UART_WaitOnFlagUntilTimeout>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011156:	2303      	movs	r3, #3
 8011158:	e00f      	b.n	801117a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2220      	movs	r2, #32
 801115e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2220      	movs	r2, #32
 8011166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2200      	movs	r2, #0
 8011174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b09c      	sub	sp, #112	; 0x70
 8011186:	af00      	add	r7, sp, #0
 8011188:	60f8      	str	r0, [r7, #12]
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	603b      	str	r3, [r7, #0]
 801118e:	4613      	mov	r3, r2
 8011190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011192:	e0a9      	b.n	80112e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011196:	f1b3 3fff 	cmp.w	r3, #4294967295
 801119a:	f000 80a5 	beq.w	80112e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801119e:	f7f4 f837 	bl	8005210 <HAL_GetTick>
 80111a2:	4602      	mov	r2, r0
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	1ad3      	subs	r3, r2, r3
 80111a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d302      	bcc.n	80111b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80111ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d140      	bne.n	8011236 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111bc:	e853 3f00 	ldrex	r3, [r3]
 80111c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80111c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80111c8:	667b      	str	r3, [r7, #100]	; 0x64
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80111d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80111d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80111d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80111da:	e841 2300 	strex	r3, r2, [r1]
 80111de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80111e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d1e6      	bne.n	80111b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	3308      	adds	r3, #8
 80111ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f0:	e853 3f00 	ldrex	r3, [r3]
 80111f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80111f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f8:	f023 0301 	bic.w	r3, r3, #1
 80111fc:	663b      	str	r3, [r7, #96]	; 0x60
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	3308      	adds	r3, #8
 8011204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011206:	64ba      	str	r2, [r7, #72]	; 0x48
 8011208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801120a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801120c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801120e:	e841 2300 	strex	r3, r2, [r1]
 8011212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011216:	2b00      	cmp	r3, #0
 8011218:	d1e5      	bne.n	80111e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2220      	movs	r2, #32
 801121e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2220      	movs	r2, #32
 8011226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	2200      	movs	r2, #0
 801122e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011232:	2303      	movs	r3, #3
 8011234:	e069      	b.n	801130a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f003 0304 	and.w	r3, r3, #4
 8011240:	2b00      	cmp	r3, #0
 8011242:	d051      	beq.n	80112e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	69db      	ldr	r3, [r3, #28]
 801124a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801124e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011252:	d149      	bne.n	80112e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801125c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011266:	e853 3f00 	ldrex	r3, [r3]
 801126a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801126e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	461a      	mov	r2, r3
 801127a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801127c:	637b      	str	r3, [r7, #52]	; 0x34
 801127e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011284:	e841 2300 	strex	r3, r2, [r1]
 8011288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128c:	2b00      	cmp	r3, #0
 801128e:	d1e6      	bne.n	801125e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3308      	adds	r3, #8
 8011296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	e853 3f00 	ldrex	r3, [r3]
 801129e:	613b      	str	r3, [r7, #16]
   return(result);
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	f023 0301 	bic.w	r3, r3, #1
 80112a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3308      	adds	r3, #8
 80112ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80112b0:	623a      	str	r2, [r7, #32]
 80112b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112b4:	69f9      	ldr	r1, [r7, #28]
 80112b6:	6a3a      	ldr	r2, [r7, #32]
 80112b8:	e841 2300 	strex	r3, r2, [r1]
 80112bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d1e5      	bne.n	8011290 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2220      	movs	r2, #32
 80112c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2220      	movs	r2, #32
 80112d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2220      	movs	r2, #32
 80112d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2200      	movs	r2, #0
 80112e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80112e4:	2303      	movs	r3, #3
 80112e6:	e010      	b.n	801130a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	69da      	ldr	r2, [r3, #28]
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	4013      	ands	r3, r2
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	bf0c      	ite	eq
 80112f8:	2301      	moveq	r3, #1
 80112fa:	2300      	movne	r3, #0
 80112fc:	b2db      	uxtb	r3, r3
 80112fe:	461a      	mov	r2, r3
 8011300:	79fb      	ldrb	r3, [r7, #7]
 8011302:	429a      	cmp	r2, r3
 8011304:	f43f af46 	beq.w	8011194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011308:	2300      	movs	r3, #0
}
 801130a:	4618      	mov	r0, r3
 801130c:	3770      	adds	r7, #112	; 0x70
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011312:	b480      	push	{r7}
 8011314:	b085      	sub	sp, #20
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011320:	2b01      	cmp	r3, #1
 8011322:	d101      	bne.n	8011328 <HAL_UARTEx_DisableFifoMode+0x16>
 8011324:	2302      	movs	r3, #2
 8011326:	e027      	b.n	8011378 <HAL_UARTEx_DisableFifoMode+0x66>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2224      	movs	r2, #36	; 0x24
 8011334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	681a      	ldr	r2, [r3, #0]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f022 0201 	bic.w	r2, r2, #1
 801134e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011356:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2200      	movs	r2, #0
 801135c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2220      	movs	r2, #32
 801136a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2200      	movs	r2, #0
 8011372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011376:	2300      	movs	r3, #0
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011394:	2b01      	cmp	r3, #1
 8011396:	d101      	bne.n	801139c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011398:	2302      	movs	r3, #2
 801139a:	e02d      	b.n	80113f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2201      	movs	r2, #1
 80113a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2224      	movs	r2, #36	; 0x24
 80113a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	681a      	ldr	r2, [r3, #0]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f022 0201 	bic.w	r2, r2, #1
 80113c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	683a      	ldr	r2, [r7, #0]
 80113d4:	430a      	orrs	r2, r1
 80113d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80113d8:	6878      	ldr	r0, [r7, #4]
 80113da:	f000 f84f 	bl	801147c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	68fa      	ldr	r2, [r7, #12]
 80113e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2220      	movs	r2, #32
 80113ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2200      	movs	r2, #0
 80113f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80113f6:	2300      	movs	r3, #0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3710      	adds	r7, #16
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b084      	sub	sp, #16
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011410:	2b01      	cmp	r3, #1
 8011412:	d101      	bne.n	8011418 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011414:	2302      	movs	r3, #2
 8011416:	e02d      	b.n	8011474 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2201      	movs	r2, #1
 801141c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	2224      	movs	r2, #36	; 0x24
 8011424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	681a      	ldr	r2, [r3, #0]
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	f022 0201 	bic.w	r2, r2, #1
 801143e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	430a      	orrs	r2, r1
 8011452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f811 	bl	801147c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2220      	movs	r2, #32
 8011466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011472:	2300      	movs	r3, #0
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}

0801147c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011488:	2b00      	cmp	r3, #0
 801148a:	d108      	bne.n	801149e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2201      	movs	r2, #1
 8011490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2201      	movs	r2, #1
 8011498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801149c:	e031      	b.n	8011502 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801149e:	2310      	movs	r3, #16
 80114a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80114a2:	2310      	movs	r3, #16
 80114a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	689b      	ldr	r3, [r3, #8]
 80114ac:	0e5b      	lsrs	r3, r3, #25
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	f003 0307 	and.w	r3, r3, #7
 80114b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	0f5b      	lsrs	r3, r3, #29
 80114be:	b2db      	uxtb	r3, r3
 80114c0:	f003 0307 	and.w	r3, r3, #7
 80114c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80114c6:	7bbb      	ldrb	r3, [r7, #14]
 80114c8:	7b3a      	ldrb	r2, [r7, #12]
 80114ca:	4911      	ldr	r1, [pc, #68]	; (8011510 <UARTEx_SetNbDataToProcess+0x94>)
 80114cc:	5c8a      	ldrb	r2, [r1, r2]
 80114ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80114d2:	7b3a      	ldrb	r2, [r7, #12]
 80114d4:	490f      	ldr	r1, [pc, #60]	; (8011514 <UARTEx_SetNbDataToProcess+0x98>)
 80114d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80114d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80114dc:	b29a      	uxth	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
 80114e6:	7b7a      	ldrb	r2, [r7, #13]
 80114e8:	4909      	ldr	r1, [pc, #36]	; (8011510 <UARTEx_SetNbDataToProcess+0x94>)
 80114ea:	5c8a      	ldrb	r2, [r1, r2]
 80114ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80114f0:	7b7a      	ldrb	r2, [r7, #13]
 80114f2:	4908      	ldr	r1, [pc, #32]	; (8011514 <UARTEx_SetNbDataToProcess+0x98>)
 80114f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80114f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80114fa:	b29a      	uxth	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011502:	bf00      	nop
 8011504:	3714      	adds	r7, #20
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	08026cb4 	.word	0x08026cb4
 8011514:	08026cbc 	.word	0x08026cbc

08011518 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	429a      	cmp	r2, r3
 801152c:	d201      	bcs.n	8011532 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	e000      	b.n	8011534 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8011532:	687b      	ldr	r3, [r7, #4]
    }
 8011534:	4618      	mov	r0, r3
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <_ZN3PinC1Ev>:
 *      Author: stefan
 */

#include "PinModel/Pin.hpp"

Pin::Pin(){}
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	719a      	strb	r2, [r3, #6]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	4618      	mov	r0, r3
 8011552:	370c      	adds	r7, #12
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr

0801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>:

Pin::Pin(GPIO_TypeDef* port, GPIO_Pin gpio_pin) : port(port), gpio_pin(gpio_pin){}
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	4613      	mov	r3, r2
 8011568:	80fb      	strh	r3, [r7, #6]
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	601a      	str	r2, [r3, #0]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	88fa      	ldrh	r2, [r7, #6]
 8011574:	809a      	strh	r2, [r3, #4]
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	2200      	movs	r2, #0
 801157a:	719a      	strb	r2, [r3, #6]
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	4618      	mov	r0, r3
 8011580:	3714      	adds	r7, #20
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <_ZN3Pin8inscribeERS_14Operation_Mode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, Operation_Mode mode){
 801158a:	b480      	push	{r7}
 801158c:	b083      	sub	sp, #12
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	460b      	mov	r3, r1
 8011594:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != Operation_Mode::NOT_USED){
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	799b      	ldrb	r3, [r3, #6]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d103      	bne.n	80115a6 <_ZN3Pin8inscribeERS_14Operation_Mode+0x1c>
		return;
	}
	pin.mode = mode;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	78fa      	ldrb	r2, [r7, #3]
 80115a2:	719a      	strb	r2, [r3, #6]
 80115a4:	e000      	b.n	80115a8 <_ZN3Pin8inscribeERS_14Operation_Mode+0x1e>
		return;
 80115a6:	bf00      	nop
}
 80115a8:	370c      	adds	r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b0:	4770      	bx	lr

080115b2 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f84c 	bl	8011658 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	4618      	mov	r0, r3
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}

080115ca <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80115ca:	b480      	push	{r7}
 80115cc:	b083      	sub	sp, #12
 80115ce:	af00      	add	r7, sp, #0
 80115d0:	6078      	str	r0, [r7, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4618      	mov	r0, r3
 80115d6:	370c      	adds	r7, #12
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
      vector(initializer_list<value_type> __l,
 80115e0:	b5b0      	push	{r4, r5, r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	1d38      	adds	r0, r7, #4
 80115ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80115ee:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	6839      	ldr	r1, [r7, #0]
 80115f4:	4618      	mov	r0, r3
 80115f6:	f000 f846 	bl	8011686 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
	_M_range_initialize(__l.begin(), __l.end(),
 80115fa:	1d3b      	adds	r3, r7, #4
 80115fc:	4618      	mov	r0, r3
 80115fe:	f000 f86a 	bl	80116d6 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 8011602:	4604      	mov	r4, r0
 8011604:	1d3b      	adds	r3, r7, #4
 8011606:	4618      	mov	r0, r3
 8011608:	f000 f871 	bl	80116ee <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 801160c:	4602      	mov	r2, r0
 801160e:	462b      	mov	r3, r5
 8011610:	4621      	mov	r1, r4
 8011612:	68f8      	ldr	r0, [r7, #12]
 8011614:	f000 f891 	bl	801173a <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
      }
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	4618      	mov	r0, r3
 801161c:	3718      	adds	r7, #24
 801161e:	46bd      	mov	sp, r7
 8011620:	bdb0      	pop	{r4, r5, r7, pc}

08011622 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011622:	b5b0      	push	{r4, r5, r7, lr}
 8011624:	b082      	sub	sp, #8
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681c      	ldr	r4, [r3, #0]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	4618      	mov	r0, r3
 8011636:	f000 f8b9 	bl	80117ac <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 801163a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801163c:	461a      	mov	r2, r3
 801163e:	4629      	mov	r1, r5
 8011640:	4620      	mov	r0, r4
 8011642:	f000 f8be 	bl	80117c2 <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
      }
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	4618      	mov	r0, r3
 801164a:	f000 f82b 	bl	80116a4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bdb0      	pop	{r4, r5, r7, pc}

08011658 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	4618      	mov	r0, r3
 8011664:	370c      	adds	r7, #12
 8011666:	46bd      	mov	sp, r7
 8011668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166c:	4770      	bx	lr

0801166e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801166e:	b580      	push	{r7, lr}
 8011670:	b082      	sub	sp, #8
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7ff ffa7 	bl	80115ca <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4618      	mov	r0, r3
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8011686:	b580      	push	{r7, lr}
 8011688:	b082      	sub	sp, #8
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
 801168e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6839      	ldr	r1, [r7, #0]
 8011694:	4618      	mov	r0, r3
 8011696:	f000 f8a2 	bl	80117de <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	4618      	mov	r0, r3
 801169e:	3708      	adds	r7, #8
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	689a      	ldr	r2, [r3, #8]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	1ad3      	subs	r3, r2, r3
 80116ba:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80116bc:	461a      	mov	r2, r3
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 f89f 	bl	8011802 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7ff ffd1 	bl	801166e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	3708      	adds	r7, #8
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}

080116d6 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80116d6:	b480      	push	{r7}
 80116d8:	b083      	sub	sp, #12
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4618      	mov	r0, r3
 80116e4:	370c      	adds	r7, #12
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80116ee:	b590      	push	{r4, r7, lr}
 80116f0:	b083      	sub	sp, #12
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7ff ffed 	bl	80116d6 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 80116fc:	4604      	mov	r4, r0
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f892 	bl	8011828 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 8011704:	4603      	mov	r3, r0
 8011706:	009b      	lsls	r3, r3, #2
 8011708:	4423      	add	r3, r4
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	bd90      	pop	{r4, r7, pc}

08011712 <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8011712:	b5b0      	push	{r4, r5, r7, lr}
 8011714:	b082      	sub	sp, #8
 8011716:	af00      	add	r7, sp, #0
 8011718:	6078      	str	r0, [r7, #4]
 801171a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 801171c:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 801171e:	1d3b      	adds	r3, r7, #4
 8011720:	4618      	mov	r0, r3
 8011722:	f000 f88d 	bl	8011840 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 8011726:	462a      	mov	r2, r5
 8011728:	6839      	ldr	r1, [r7, #0]
 801172a:	4620      	mov	r0, r4
 801172c:	f000 f892 	bl	8011854 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 8011730:	4603      	mov	r3, r0
    }
 8011732:	4618      	mov	r0, r3
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bdb0      	pop	{r4, r5, r7, pc}

0801173a <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 801173a:	b590      	push	{r4, r7, lr}
 801173c:	b087      	sub	sp, #28
 801173e:	af00      	add	r7, sp, #0
 8011740:	60f8      	str	r0, [r7, #12]
 8011742:	60b9      	str	r1, [r7, #8]
 8011744:	607a      	str	r2, [r7, #4]
 8011746:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	68b8      	ldr	r0, [r7, #8]
 801174c:	f7ff ffe1 	bl	8011712 <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 8011750:	4603      	mov	r3, r0
 8011752:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8011754:	68fc      	ldr	r4, [r7, #12]
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	4618      	mov	r0, r3
 801175a:	f000 f827 	bl	80117ac <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 801175e:	4603      	mov	r3, r0
 8011760:	4619      	mov	r1, r3
 8011762:	6978      	ldr	r0, [r7, #20]
 8011764:	f000 f886 	bl	8011874 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 8011768:	4603      	mov	r3, r0
 801176a:	4619      	mov	r1, r3
 801176c:	4620      	mov	r0, r4
 801176e:	f000 f8a9 	bl	80118c4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 8011772:	4602      	mov	r2, r0
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	441a      	add	r2, r3
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	4618      	mov	r0, r3
 801178e:	f000 f80d 	bl	80117ac <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 8011792:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8011794:	4622      	mov	r2, r4
 8011796:	6879      	ldr	r1, [r7, #4]
 8011798:	68b8      	ldr	r0, [r7, #8]
 801179a:	f000 f8a7 	bl	80118ec <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 801179e:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	605a      	str	r2, [r3, #4]
	}
 80117a4:	bf00      	nop
 80117a6:	371c      	adds	r7, #28
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd90      	pop	{r4, r7, pc}

080117ac <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	4618      	mov	r0, r3
 80117b8:	370c      	adds	r7, #12
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr

080117c2 <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b084      	sub	sp, #16
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	60f8      	str	r0, [r7, #12]
 80117ca:	60b9      	str	r1, [r7, #8]
 80117cc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80117ce:	68b9      	ldr	r1, [r7, #8]
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f000 f89c 	bl	801190e <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 80117d6:	bf00      	nop
 80117d8:	3710      	adds	r7, #16
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80117de:	b580      	push	{r7, lr}
 80117e0:	b082      	sub	sp, #8
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 f8a5 	bl	801193a <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	4618      	mov	r0, r3
 80117f4:	f000 f8af 	bl	8011956 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4618      	mov	r0, r3
 80117fc:	3708      	adds	r7, #8
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}

08011802 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011802:	b580      	push	{r7, lr}
 8011804:	b084      	sub	sp, #16
 8011806:	af00      	add	r7, sp, #0
 8011808:	60f8      	str	r0, [r7, #12]
 801180a:	60b9      	str	r1, [r7, #8]
 801180c:	607a      	str	r2, [r7, #4]
	if (__p)
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d005      	beq.n	8011820 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	68b9      	ldr	r1, [r7, #8]
 801181a:	4618      	mov	r0, r3
 801181c:	f000 f8af 	bl	801197e <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 8011820:	bf00      	nop
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}

08011828 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	4618      	mov	r0, r3
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8011848:	4618      	mov	r0, r3
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8011854:	b480      	push	{r7}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8011860:	68ba      	ldr	r2, [r7, #8]
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	1ad3      	subs	r3, r2, r3
 8011866:	109b      	asrs	r3, r3, #2
    }
 8011868:	4618      	mov	r0, r3
 801186a:	3714      	adds	r7, #20
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr

08011874 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8011874:	b590      	push	{r4, r7, lr}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 801187e:	f107 030c 	add.w	r3, r7, #12
 8011882:	6839      	ldr	r1, [r7, #0]
 8011884:	4618      	mov	r0, r3
 8011886:	f000 f858 	bl	801193a <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 801188a:	f107 030c 	add.w	r3, r7, #12
 801188e:	4618      	mov	r0, r3
 8011890:	f000 f8a0 	bl	80119d4 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 8011894:	4602      	mov	r2, r0
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	4293      	cmp	r3, r2
 801189a:	bf8c      	ite	hi
 801189c:	2301      	movhi	r3, #1
 801189e:	2300      	movls	r3, #0
 80118a0:	b2dc      	uxtb	r4, r3
 80118a2:	f107 030c 	add.w	r3, r7, #12
 80118a6:	4618      	mov	r0, r3
 80118a8:	f7ff fe8f 	bl	80115ca <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 80118ac:	2c00      	cmp	r4, #0
 80118ae:	d002      	beq.n	80118b6 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 80118b0:	4803      	ldr	r0, [pc, #12]	; (80118c0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 80118b2:	f014 fcc0 	bl	8026236 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 80118b6:	687b      	ldr	r3, [r7, #4]
      }
 80118b8:	4618      	mov	r0, r3
 80118ba:	3714      	adds	r7, #20
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd90      	pop	{r4, r7, pc}
 80118c0:	08026620 	.word	0x08026620

080118c4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
 80118cc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d006      	beq.n	80118e2 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6839      	ldr	r1, [r7, #0]
 80118d8:	4618      	mov	r0, r3
 80118da:	f000 f895 	bl	8011a08 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 80118de:	4603      	mov	r3, r0
 80118e0:	e000      	b.n	80118e4 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 80118e2:	2300      	movs	r3, #0
      }
 80118e4:	4618      	mov	r0, r3
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	607a      	str	r2, [r7, #4]
 80118f8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	68b9      	ldr	r1, [r7, #8]
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f000 f8a2 	bl	8011a48 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 8011904:	4603      	mov	r3, r0
 8011906:	4618      	mov	r0, r3
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801190e:	b580      	push	{r7, lr}
 8011910:	b082      	sub	sp, #8
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
 8011916:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8011918:	f7ef fd96 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801191c:	4603      	mov	r3, r0
 801191e:	2b00      	cmp	r3, #0
 8011920:	d004      	beq.n	801192c <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8011922:	6839      	ldr	r1, [r7, #0]
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f8a1 	bl	8011a6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 801192a:	e003      	b.n	8011934 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
	__destroy(__first, __last);
 801192c:	6839      	ldr	r1, [r7, #0]
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f8b4 	bl	8011a9c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 8011934:	3708      	adds	r7, #8
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801193a:	b580      	push	{r7, lr}
 801193c:	b082      	sub	sp, #8
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 f8b3 	bl	8011ab2 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}

08011956 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011956:	b480      	push	{r7}
 8011958:	b083      	sub	sp, #12
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2200      	movs	r2, #0
 8011962:	601a      	str	r2, [r3, #0]
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2200      	movs	r2, #0
 8011968:	605a      	str	r2, [r3, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	609a      	str	r2, [r3, #8]
	{ }
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801197e:	b580      	push	{r7, lr}
 8011980:	b088      	sub	sp, #32
 8011982:	af00      	add	r7, sp, #0
 8011984:	60f8      	str	r0, [r7, #12]
 8011986:	60b9      	str	r1, [r7, #8]
 8011988:	607a      	str	r2, [r7, #4]
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	61fb      	str	r3, [r7, #28]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	61bb      	str	r3, [r7, #24]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011996:	f7ef fd57 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801199a:	4603      	mov	r3, r0
 801199c:	2b00      	cmp	r3, #0
 801199e:	d003      	beq.n	80119a8 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80119a0:	69b8      	ldr	r0, [r7, #24]
 80119a2:	f014 fb7d 	bl	80260a0 <_ZdlPv>
	    return;
 80119a6:	e005      	b.n	80119b4 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80119a8:	697a      	ldr	r2, [r7, #20]
 80119aa:	69b9      	ldr	r1, [r7, #24]
 80119ac:	69f8      	ldr	r0, [r7, #28]
 80119ae:	f000 f8c2 	bl	8011b36 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80119b2:	bf00      	nop
 80119b4:	bf00      	nop
 80119b6:	3720      	adds	r7, #32
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80119c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr

080119d4 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b084      	sub	sp, #16
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80119dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80119e0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	f7ff ffea 	bl	80119bc <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 80119e8:	4603      	mov	r3, r0
 80119ea:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80119ec:	f107 0208 	add.w	r2, r7, #8
 80119f0:	f107 030c 	add.w	r3, r7, #12
 80119f4:	4611      	mov	r1, r2
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fd8e 	bl	8011518 <_ZSt3minIjERKT_S2_S2_>
 80119fc:	4603      	mov	r3, r0
 80119fe:	681b      	ldr	r3, [r3, #0]
      }
 8011a00:	4618      	mov	r0, r3
 8011a02:	3710      	adds	r7, #16
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8011a1a:	f7ef fd15 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d006      	beq.n	8011a32 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	009b      	lsls	r3, r3, #2
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f014 fb3d 	bl	80260a8 <_Znwj>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	e006      	b.n	8011a40 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8011a32:	2200      	movs	r2, #0
 8011a34:	68b9      	ldr	r1, [r7, #8]
 8011a36:	68f8      	ldr	r0, [r7, #12]
 8011a38:	f000 f88c 	bl	8011b54 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	bf00      	nop
      { return __a.allocate(__n); }
 8011a40:	4618      	mov	r0, r3
 8011a42:	3710      	adds	r7, #16
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	60f8      	str	r0, [r7, #12]
 8011a50:	60b9      	str	r1, [r7, #8]
 8011a52:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011a54:	2301      	movs	r3, #1
 8011a56:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	68b9      	ldr	r1, [r7, #8]
 8011a5c:	68f8      	ldr	r0, [r7, #12]
 8011a5e:	f000 f834 	bl	8011aca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 8011a62:	4603      	mov	r3, r0
    }
 8011a64:	4618      	mov	r0, r3
 8011a66:	3718      	adds	r7, #24
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}

08011a6c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d00a      	beq.n	8011a94 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 f843 	bl	8011b0a <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 8011a84:	4603      	mov	r3, r0
 8011a86:	4618      	mov	r0, r3
 8011a88:	f000 f84a 	bl	8011b20 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	3304      	adds	r3, #4
 8011a90:	607b      	str	r3, [r7, #4]
 8011a92:	e7f0      	b.n	8011a76 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 8011a94:	bf00      	nop
 8011a96:	3708      	adds	r7, #8
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}

08011a9c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8011a9c:	b480      	push	{r7}
 8011a9e:	b083      	sub	sp, #12
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
 8011aa4:	6039      	str	r1, [r7, #0]
 8011aa6:	bf00      	nop
 8011aa8:	370c      	adds	r7, #12
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab0:	4770      	bx	lr

08011ab2 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8011ab2:	b480      	push	{r7}
 8011ab4:	b083      	sub	sp, #12
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
 8011aba:	6039      	str	r1, [r7, #0]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b086      	sub	sp, #24
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	60f8      	str	r0, [r7, #12]
 8011ad2:	60b9      	str	r1, [r7, #8]
 8011ad4:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d00e      	beq.n	8011b00 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8011ae2:	6978      	ldr	r0, [r7, #20]
 8011ae4:	f000 f811 	bl	8011b0a <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	68f9      	ldr	r1, [r7, #12]
 8011aec:	4618      	mov	r0, r3
 8011aee:	f000 f850 	bl	8011b92 <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	3304      	adds	r3, #4
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	3304      	adds	r3, #4
 8011afc:	617b      	str	r3, [r7, #20]
 8011afe:	e7ec      	b.n	8011ada <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 8011b00:	697b      	ldr	r3, [r7, #20]
	}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011b0a:	b480      	push	{r7}
 8011b0c:	b083      	sub	sp, #12
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	4618      	mov	r0, r3
 8011b16:	370c      	adds	r7, #12
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b082      	sub	sp, #8
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	f000 f847 	bl	8011bbc <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 8011b2e:	bf00      	nop
 8011b30:	3708      	adds	r7, #8
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8011b36:	b580      	push	{r7, lr}
 8011b38:	b084      	sub	sp, #16
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	60f8      	str	r0, [r7, #12]
 8011b3e:	60b9      	str	r1, [r7, #8]
 8011b40:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4619      	mov	r1, r3
 8011b48:	68b8      	ldr	r0, [r7, #8]
 8011b4a:	f014 faab 	bl	80260a4 <_ZdlPvj>
      }
 8011b4e:	3710      	adds	r7, #16
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}

08011b54 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b084      	sub	sp, #16
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8011b60:	68f8      	ldr	r0, [r7, #12]
 8011b62:	f000 f835 	bl	8011bd0 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 8011b66:	4602      	mov	r2, r0
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	bf8c      	ite	hi
 8011b6e:	2301      	movhi	r3, #1
 8011b70:	2300      	movls	r3, #0
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d001      	beq.n	8011b7c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8011b78:	f014 fb5a 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	009b      	lsls	r3, r3, #2
 8011b80:	4618      	mov	r0, r3
 8011b82:	f014 fa91 	bl	80260a8 <_Znwj>
 8011b86:	4603      	mov	r3, r0
 8011b88:	bf00      	nop
      }
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3710      	adds	r7, #16
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8011b92:	b590      	push	{r4, r7, lr}
 8011b94:	b083      	sub	sp, #12
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8011b9c:	6838      	ldr	r0, [r7, #0]
 8011b9e:	f000 f823 	bl	8011be8 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	2004      	movs	r0, #4
 8011baa:	f7ef fc55 	bl	8001458 <_ZnwjPv>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	6823      	ldr	r3, [r4, #0]
 8011bb2:	6013      	str	r3, [r2, #0]
 8011bb4:	bf00      	nop
 8011bb6:	370c      	adds	r7, #12
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd90      	pop	{r4, r7, pc}

08011bbc <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8011bbc:	b480      	push	{r7}
 8011bbe:	b083      	sub	sp, #12
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
    }
 8011bc4:	bf00      	nop
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8011bd8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8011bdc:	4618      	mov	r0, r3
 8011bde:	370c      	adds	r7, #12
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr

08011be8 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	370c      	adds	r7, #12
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr
	...

08011c00 <_Z41__static_initialization_and_destruction_0ii>:

		default:
			break;
		}
	}
}
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b0f4      	sub	sp, #464	; 0x1d0
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011c0a:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8011c0e:	6018      	str	r0, [r3, #0]
 8011c10:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011c14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8011c18:	6019      	str	r1, [r3, #0]
 8011c1a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011c1e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	2b01      	cmp	r3, #1
 8011c26:	f040 832c 	bne.w	8012282 <_Z41__static_initialization_and_destruction_0ii+0x682>
 8011c2a:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8011c2e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	f040 8322 	bne.w	8012282 <_Z41__static_initialization_and_destruction_0ii+0x682>
Pin PE2(GPIOE,GPIO_Pin::PIN_2);
 8011c3e:	2204      	movs	r2, #4
 8011c40:	49ba      	ldr	r1, [pc, #744]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011c42:	48bb      	ldr	r0, [pc, #748]	; (8011f30 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8011c44:	f7ff fc8a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE3(GPIOE,GPIO_Pin::PIN_3);
 8011c48:	2208      	movs	r2, #8
 8011c4a:	49b8      	ldr	r1, [pc, #736]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011c4c:	48b9      	ldr	r0, [pc, #740]	; (8011f34 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8011c4e:	f7ff fc85 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE4(GPIOE,GPIO_Pin::PIN_4);
 8011c52:	2210      	movs	r2, #16
 8011c54:	49b5      	ldr	r1, [pc, #724]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011c56:	48b8      	ldr	r0, [pc, #736]	; (8011f38 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8011c58:	f7ff fc80 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE5(GPIOE,GPIO_Pin::PIN_5);
 8011c5c:	2220      	movs	r2, #32
 8011c5e:	49b3      	ldr	r1, [pc, #716]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011c60:	48b6      	ldr	r0, [pc, #728]	; (8011f3c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8011c62:	f7ff fc7b 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE6(GPIOE,GPIO_Pin::PIN_6);
 8011c66:	2240      	movs	r2, #64	; 0x40
 8011c68:	49b0      	ldr	r1, [pc, #704]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011c6a:	48b5      	ldr	r0, [pc, #724]	; (8011f40 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8011c6c:	f7ff fc76 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC13(GPIOC,GPIO_Pin::PIN_13);
 8011c70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011c74:	49b3      	ldr	r1, [pc, #716]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011c76:	48b4      	ldr	r0, [pc, #720]	; (8011f48 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8011c78:	f7ff fc70 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC14(GPIOC,GPIO_Pin::PIN_14);
 8011c7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011c80:	49b0      	ldr	r1, [pc, #704]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011c82:	48b2      	ldr	r0, [pc, #712]	; (8011f4c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8011c84:	f7ff fc6a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC15(GPIOC,GPIO_Pin::PIN_15);
 8011c88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011c8c:	49ad      	ldr	r1, [pc, #692]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011c8e:	48b0      	ldr	r0, [pc, #704]	; (8011f50 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8011c90:	f7ff fc64 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF0(GPIOF,GPIO_Pin::PIN_0);
 8011c94:	2201      	movs	r2, #1
 8011c96:	49af      	ldr	r1, [pc, #700]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011c98:	48af      	ldr	r0, [pc, #700]	; (8011f58 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8011c9a:	f7ff fc5f 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF1(GPIOF,GPIO_Pin::PIN_1);
 8011c9e:	2202      	movs	r2, #2
 8011ca0:	49ac      	ldr	r1, [pc, #688]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011ca2:	48ae      	ldr	r0, [pc, #696]	; (8011f5c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8011ca4:	f7ff fc5a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF2(GPIOF,GPIO_Pin::PIN_2);
 8011ca8:	2204      	movs	r2, #4
 8011caa:	49aa      	ldr	r1, [pc, #680]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cac:	48ac      	ldr	r0, [pc, #688]	; (8011f60 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8011cae:	f7ff fc55 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF3(GPIOF,GPIO_Pin::PIN_3);
 8011cb2:	2208      	movs	r2, #8
 8011cb4:	49a7      	ldr	r1, [pc, #668]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cb6:	48ab      	ldr	r0, [pc, #684]	; (8011f64 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8011cb8:	f7ff fc50 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF4(GPIOF,GPIO_Pin::PIN_4);
 8011cbc:	2210      	movs	r2, #16
 8011cbe:	49a5      	ldr	r1, [pc, #660]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cc0:	48a9      	ldr	r0, [pc, #676]	; (8011f68 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8011cc2:	f7ff fc4b 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF5(GPIOF,GPIO_Pin::PIN_5);
 8011cc6:	2220      	movs	r2, #32
 8011cc8:	49a2      	ldr	r1, [pc, #648]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cca:	48a8      	ldr	r0, [pc, #672]	; (8011f6c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8011ccc:	f7ff fc46 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF6(GPIOF,GPIO_Pin::PIN_6);
 8011cd0:	2240      	movs	r2, #64	; 0x40
 8011cd2:	49a0      	ldr	r1, [pc, #640]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cd4:	48a6      	ldr	r0, [pc, #664]	; (8011f70 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8011cd6:	f7ff fc41 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF7(GPIOF,GPIO_Pin::PIN_7);
 8011cda:	2280      	movs	r2, #128	; 0x80
 8011cdc:	499d      	ldr	r1, [pc, #628]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cde:	48a5      	ldr	r0, [pc, #660]	; (8011f74 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8011ce0:	f7ff fc3c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF8(GPIOF,GPIO_Pin::PIN_8);
 8011ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ce8:	499a      	ldr	r1, [pc, #616]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cea:	48a3      	ldr	r0, [pc, #652]	; (8011f78 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8011cec:	f7ff fc36 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF9(GPIOF,GPIO_Pin::PIN_9);
 8011cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cf4:	4997      	ldr	r1, [pc, #604]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011cf6:	48a1      	ldr	r0, [pc, #644]	; (8011f7c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8011cf8:	f7ff fc30 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF10(GPIOF,GPIO_Pin::PIN_10);
 8011cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011d00:	4994      	ldr	r1, [pc, #592]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011d02:	489f      	ldr	r0, [pc, #636]	; (8011f80 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8011d04:	f7ff fc2a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH0(GPIOH,GPIO_Pin::PIN_0);
 8011d08:	2201      	movs	r2, #1
 8011d0a:	499e      	ldr	r1, [pc, #632]	; (8011f84 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011d0c:	489e      	ldr	r0, [pc, #632]	; (8011f88 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8011d0e:	f7ff fc25 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH1(GPIOH,GPIO_Pin::PIN_1);
 8011d12:	2202      	movs	r2, #2
 8011d14:	499b      	ldr	r1, [pc, #620]	; (8011f84 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8011d16:	489d      	ldr	r0, [pc, #628]	; (8011f8c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8011d18:	f7ff fc20 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC0(GPIOC,GPIO_Pin::PIN_0);
 8011d1c:	2201      	movs	r2, #1
 8011d1e:	4989      	ldr	r1, [pc, #548]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011d20:	489b      	ldr	r0, [pc, #620]	; (8011f90 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8011d22:	f7ff fc1b 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC1(GPIOC,GPIO_Pin::PIN_1);
 8011d26:	2202      	movs	r2, #2
 8011d28:	4986      	ldr	r1, [pc, #536]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011d2a:	489a      	ldr	r0, [pc, #616]	; (8011f94 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8011d2c:	f7ff fc16 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC2(GPIOC,GPIO_Pin::PIN_2);
 8011d30:	2204      	movs	r2, #4
 8011d32:	4984      	ldr	r1, [pc, #528]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011d34:	4898      	ldr	r0, [pc, #608]	; (8011f98 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8011d36:	f7ff fc11 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC3(GPIOC,GPIO_Pin::PIN_3);
 8011d3a:	2208      	movs	r2, #8
 8011d3c:	4981      	ldr	r1, [pc, #516]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011d3e:	4897      	ldr	r0, [pc, #604]	; (8011f9c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8011d40:	f7ff fc0c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA0(GPIOA,GPIO_Pin::PIN_0);
 8011d44:	2201      	movs	r2, #1
 8011d46:	4996      	ldr	r1, [pc, #600]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d48:	4896      	ldr	r0, [pc, #600]	; (8011fa4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8011d4a:	f7ff fc07 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA1(GPIOA,GPIO_Pin::PIN_1);
 8011d4e:	2202      	movs	r2, #2
 8011d50:	4993      	ldr	r1, [pc, #588]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d52:	4895      	ldr	r0, [pc, #596]	; (8011fa8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8011d54:	f7ff fc02 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA2(GPIOA,GPIO_Pin::PIN_2);
 8011d58:	2204      	movs	r2, #4
 8011d5a:	4991      	ldr	r1, [pc, #580]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d5c:	4893      	ldr	r0, [pc, #588]	; (8011fac <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8011d5e:	f7ff fbfd 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA3(GPIOA,GPIO_Pin::PIN_3);
 8011d62:	2208      	movs	r2, #8
 8011d64:	498e      	ldr	r1, [pc, #568]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d66:	4892      	ldr	r0, [pc, #584]	; (8011fb0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8011d68:	f7ff fbf8 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA4(GPIOA,GPIO_Pin::PIN_4);
 8011d6c:	2210      	movs	r2, #16
 8011d6e:	498c      	ldr	r1, [pc, #560]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d70:	4890      	ldr	r0, [pc, #576]	; (8011fb4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8011d72:	f7ff fbf3 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA5(GPIOA,GPIO_Pin::PIN_5);
 8011d76:	2220      	movs	r2, #32
 8011d78:	4989      	ldr	r1, [pc, #548]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d7a:	488f      	ldr	r0, [pc, #572]	; (8011fb8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8011d7c:	f7ff fbee 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA6(GPIOA,GPIO_Pin::PIN_6);
 8011d80:	2240      	movs	r2, #64	; 0x40
 8011d82:	4987      	ldr	r1, [pc, #540]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d84:	488d      	ldr	r0, [pc, #564]	; (8011fbc <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8011d86:	f7ff fbe9 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA7(GPIOA,GPIO_Pin::PIN_7);
 8011d8a:	2280      	movs	r2, #128	; 0x80
 8011d8c:	4984      	ldr	r1, [pc, #528]	; (8011fa0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8011d8e:	488c      	ldr	r0, [pc, #560]	; (8011fc0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8011d90:	f7ff fbe4 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC4(GPIOC,GPIO_Pin::PIN_4);
 8011d94:	2210      	movs	r2, #16
 8011d96:	496b      	ldr	r1, [pc, #428]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011d98:	488a      	ldr	r0, [pc, #552]	; (8011fc4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8011d9a:	f7ff fbdf 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC5(GPIOC,GPIO_Pin::PIN_5);
 8011d9e:	2220      	movs	r2, #32
 8011da0:	4968      	ldr	r1, [pc, #416]	; (8011f44 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8011da2:	4889      	ldr	r0, [pc, #548]	; (8011fc8 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8011da4:	f7ff fbda 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB0(GPIOB,GPIO_Pin::PIN_0);
 8011da8:	2201      	movs	r2, #1
 8011daa:	4988      	ldr	r1, [pc, #544]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011dac:	4888      	ldr	r0, [pc, #544]	; (8011fd0 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8011dae:	f7ff fbd5 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB1(GPIOB,GPIO_Pin::PIN_1);
 8011db2:	2202      	movs	r2, #2
 8011db4:	4985      	ldr	r1, [pc, #532]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011db6:	4887      	ldr	r0, [pc, #540]	; (8011fd4 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8011db8:	f7ff fbd0 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB2(GPIOB,GPIO_Pin::PIN_2);
 8011dbc:	2204      	movs	r2, #4
 8011dbe:	4983      	ldr	r1, [pc, #524]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011dc0:	4885      	ldr	r0, [pc, #532]	; (8011fd8 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8011dc2:	f7ff fbcb 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF11(GPIOF,GPIO_Pin::PIN_11);
 8011dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011dca:	4962      	ldr	r1, [pc, #392]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011dcc:	4883      	ldr	r0, [pc, #524]	; (8011fdc <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8011dce:	f7ff fbc5 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF12(GPIOF,GPIO_Pin::PIN_12);
 8011dd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011dd6:	495f      	ldr	r1, [pc, #380]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011dd8:	4881      	ldr	r0, [pc, #516]	; (8011fe0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8011dda:	f7ff fbbf 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF13(GPIOF,GPIO_Pin::PIN_13);
 8011dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011de2:	495c      	ldr	r1, [pc, #368]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011de4:	487f      	ldr	r0, [pc, #508]	; (8011fe4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8011de6:	f7ff fbb9 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF14(GPIOF,GPIO_Pin::PIN_14);
 8011dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011dee:	4959      	ldr	r1, [pc, #356]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011df0:	487d      	ldr	r0, [pc, #500]	; (8011fe8 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8011df2:	f7ff fbb3 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF15(GPIOF,GPIO_Pin::PIN_15);
 8011df6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011dfa:	4956      	ldr	r1, [pc, #344]	; (8011f54 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8011dfc:	487b      	ldr	r0, [pc, #492]	; (8011fec <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8011dfe:	f7ff fbad 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG0(GPIOG,GPIO_Pin::PIN_0);
 8011e02:	2201      	movs	r2, #1
 8011e04:	497a      	ldr	r1, [pc, #488]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8011e06:	487b      	ldr	r0, [pc, #492]	; (8011ff4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8011e08:	f7ff fba8 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG1(GPIOG,GPIO_Pin::PIN_1);
 8011e0c:	2202      	movs	r2, #2
 8011e0e:	4978      	ldr	r1, [pc, #480]	; (8011ff0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8011e10:	4879      	ldr	r0, [pc, #484]	; (8011ff8 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8011e12:	f7ff fba3 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE7(GPIOE,GPIO_Pin::PIN_7);
 8011e16:	2280      	movs	r2, #128	; 0x80
 8011e18:	4944      	ldr	r1, [pc, #272]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e1a:	4878      	ldr	r0, [pc, #480]	; (8011ffc <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8011e1c:	f7ff fb9e 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE8(GPIOE,GPIO_Pin::PIN_8);
 8011e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011e24:	4941      	ldr	r1, [pc, #260]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e26:	4876      	ldr	r0, [pc, #472]	; (8012000 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8011e28:	f7ff fb98 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE9(GPIOE,GPIO_Pin::PIN_9);
 8011e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e30:	493e      	ldr	r1, [pc, #248]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e32:	4874      	ldr	r0, [pc, #464]	; (8012004 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8011e34:	f7ff fb92 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE10(GPIOE,GPIO_Pin::PIN_10);
 8011e38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e3c:	493b      	ldr	r1, [pc, #236]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e3e:	4872      	ldr	r0, [pc, #456]	; (8012008 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8011e40:	f7ff fb8c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE11(GPIOE,GPIO_Pin::PIN_11);
 8011e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e48:	4938      	ldr	r1, [pc, #224]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e4a:	4870      	ldr	r0, [pc, #448]	; (801200c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8011e4c:	f7ff fb86 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE12(GPIOE,GPIO_Pin::PIN_12);
 8011e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e54:	4935      	ldr	r1, [pc, #212]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e56:	486e      	ldr	r0, [pc, #440]	; (8012010 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8011e58:	f7ff fb80 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE13(GPIOE,GPIO_Pin::PIN_13);
 8011e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011e60:	4932      	ldr	r1, [pc, #200]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e62:	486c      	ldr	r0, [pc, #432]	; (8012014 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8011e64:	f7ff fb7a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE14(GPIOE,GPIO_Pin::PIN_14);
 8011e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011e6c:	492f      	ldr	r1, [pc, #188]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e6e:	486a      	ldr	r0, [pc, #424]	; (8012018 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8011e70:	f7ff fb74 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE15(GPIOE,GPIO_Pin::PIN_15);
 8011e74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011e78:	492c      	ldr	r1, [pc, #176]	; (8011f2c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8011e7a:	4868      	ldr	r0, [pc, #416]	; (801201c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8011e7c:	f7ff fb6e 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB10(GPIOB,GPIO_Pin::PIN_10);
 8011e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011e84:	4951      	ldr	r1, [pc, #324]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011e86:	4866      	ldr	r0, [pc, #408]	; (8012020 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8011e88:	f7ff fb68 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB11(GPIOB,GPIO_Pin::PIN_11);
 8011e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e90:	494e      	ldr	r1, [pc, #312]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011e92:	4864      	ldr	r0, [pc, #400]	; (8012024 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8011e94:	f7ff fb62 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB12(GPIOB,GPIO_Pin::PIN_12);
 8011e98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011e9c:	494b      	ldr	r1, [pc, #300]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011e9e:	4862      	ldr	r0, [pc, #392]	; (8012028 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8011ea0:	f7ff fb5c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB13(GPIOB,GPIO_Pin::PIN_13);
 8011ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011ea8:	4948      	ldr	r1, [pc, #288]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011eaa:	4860      	ldr	r0, [pc, #384]	; (801202c <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8011eac:	f7ff fb56 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB14(GPIOB,GPIO_Pin::PIN_14);
 8011eb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011eb4:	4945      	ldr	r1, [pc, #276]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011eb6:	485e      	ldr	r0, [pc, #376]	; (8012030 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8011eb8:	f7ff fb50 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB15(GPIOB,GPIO_Pin::PIN_15);
 8011ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011ec0:	4942      	ldr	r1, [pc, #264]	; (8011fcc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8011ec2:	485c      	ldr	r0, [pc, #368]	; (8012034 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8011ec4:	f7ff fb4a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD8(GPIOD,GPIO_Pin::PIN_8);
 8011ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011ecc:	495a      	ldr	r1, [pc, #360]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011ece:	485b      	ldr	r0, [pc, #364]	; (801203c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8011ed0:	f7ff fb44 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD9(GPIOD,GPIO_Pin::PIN_9);
 8011ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ed8:	4957      	ldr	r1, [pc, #348]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011eda:	4859      	ldr	r0, [pc, #356]	; (8012040 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8011edc:	f7ff fb3e 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD10(GPIOD,GPIO_Pin::PIN_10);
 8011ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011ee4:	4954      	ldr	r1, [pc, #336]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011ee6:	4857      	ldr	r0, [pc, #348]	; (8012044 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8011ee8:	f7ff fb38 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD11(GPIOD,GPIO_Pin::PIN_11);
 8011eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ef0:	4951      	ldr	r1, [pc, #324]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011ef2:	4855      	ldr	r0, [pc, #340]	; (8012048 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8011ef4:	f7ff fb32 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD12(GPIOD,GPIO_Pin::PIN_12);
 8011ef8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011efc:	494e      	ldr	r1, [pc, #312]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011efe:	4853      	ldr	r0, [pc, #332]	; (801204c <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8011f00:	f7ff fb2c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD13(GPIOD,GPIO_Pin::PIN_13);
 8011f04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011f08:	494b      	ldr	r1, [pc, #300]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011f0a:	4851      	ldr	r0, [pc, #324]	; (8012050 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8011f0c:	f7ff fb26 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD14(GPIOD,GPIO_Pin::PIN_14);
 8011f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011f14:	4948      	ldr	r1, [pc, #288]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011f16:	484f      	ldr	r0, [pc, #316]	; (8012054 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8011f18:	f7ff fb20 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD15(GPIOD,GPIO_Pin::PIN_15);
 8011f1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011f20:	4945      	ldr	r1, [pc, #276]	; (8012038 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8011f22:	484d      	ldr	r0, [pc, #308]	; (8012058 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8011f24:	f7ff fb1a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
 8011f28:	e098      	b.n	801205c <_Z41__static_initialization_and_destruction_0ii+0x45c>
 8011f2a:	bf00      	nop
 8011f2c:	58021000 	.word	0x58021000
 8011f30:	24000d94 	.word	0x24000d94
 8011f34:	24000d9c 	.word	0x24000d9c
 8011f38:	24000da4 	.word	0x24000da4
 8011f3c:	24000dac 	.word	0x24000dac
 8011f40:	24000db4 	.word	0x24000db4
 8011f44:	58020800 	.word	0x58020800
 8011f48:	24000dbc 	.word	0x24000dbc
 8011f4c:	24000dc4 	.word	0x24000dc4
 8011f50:	24000dcc 	.word	0x24000dcc
 8011f54:	58021400 	.word	0x58021400
 8011f58:	24000dd4 	.word	0x24000dd4
 8011f5c:	24000ddc 	.word	0x24000ddc
 8011f60:	24000de4 	.word	0x24000de4
 8011f64:	24000dec 	.word	0x24000dec
 8011f68:	24000df4 	.word	0x24000df4
 8011f6c:	24000dfc 	.word	0x24000dfc
 8011f70:	24000e04 	.word	0x24000e04
 8011f74:	24000e0c 	.word	0x24000e0c
 8011f78:	24000e14 	.word	0x24000e14
 8011f7c:	24000e1c 	.word	0x24000e1c
 8011f80:	24000e24 	.word	0x24000e24
 8011f84:	58021c00 	.word	0x58021c00
 8011f88:	24000e2c 	.word	0x24000e2c
 8011f8c:	24000e34 	.word	0x24000e34
 8011f90:	24000e3c 	.word	0x24000e3c
 8011f94:	24000e44 	.word	0x24000e44
 8011f98:	24000e4c 	.word	0x24000e4c
 8011f9c:	24000e54 	.word	0x24000e54
 8011fa0:	58020000 	.word	0x58020000
 8011fa4:	24000e5c 	.word	0x24000e5c
 8011fa8:	24000e64 	.word	0x24000e64
 8011fac:	24000e6c 	.word	0x24000e6c
 8011fb0:	24000e74 	.word	0x24000e74
 8011fb4:	24000e7c 	.word	0x24000e7c
 8011fb8:	24000e84 	.word	0x24000e84
 8011fbc:	24000e8c 	.word	0x24000e8c
 8011fc0:	24000e94 	.word	0x24000e94
 8011fc4:	24000e9c 	.word	0x24000e9c
 8011fc8:	24000ea4 	.word	0x24000ea4
 8011fcc:	58020400 	.word	0x58020400
 8011fd0:	24000eac 	.word	0x24000eac
 8011fd4:	24000eb4 	.word	0x24000eb4
 8011fd8:	24000ebc 	.word	0x24000ebc
 8011fdc:	24000ec4 	.word	0x24000ec4
 8011fe0:	24000ecc 	.word	0x24000ecc
 8011fe4:	24000ed4 	.word	0x24000ed4
 8011fe8:	24000edc 	.word	0x24000edc
 8011fec:	24000ee4 	.word	0x24000ee4
 8011ff0:	58021800 	.word	0x58021800
 8011ff4:	24000eec 	.word	0x24000eec
 8011ff8:	24000ef4 	.word	0x24000ef4
 8011ffc:	24000efc 	.word	0x24000efc
 8012000:	24000f04 	.word	0x24000f04
 8012004:	24000f0c 	.word	0x24000f0c
 8012008:	24000f14 	.word	0x24000f14
 801200c:	24000f1c 	.word	0x24000f1c
 8012010:	24000f24 	.word	0x24000f24
 8012014:	24000f2c 	.word	0x24000f2c
 8012018:	24000f34 	.word	0x24000f34
 801201c:	24000f3c 	.word	0x24000f3c
 8012020:	24000f44 	.word	0x24000f44
 8012024:	24000f4c 	.word	0x24000f4c
 8012028:	24000f54 	.word	0x24000f54
 801202c:	24000f5c 	.word	0x24000f5c
 8012030:	24000f64 	.word	0x24000f64
 8012034:	24000f6c 	.word	0x24000f6c
 8012038:	58020c00 	.word	0x58020c00
 801203c:	24000f74 	.word	0x24000f74
 8012040:	24000f7c 	.word	0x24000f7c
 8012044:	24000f84 	.word	0x24000f84
 8012048:	24000f8c 	.word	0x24000f8c
 801204c:	24000f94 	.word	0x24000f94
 8012050:	24000f9c 	.word	0x24000f9c
 8012054:	24000fa4 	.word	0x24000fa4
 8012058:	24000fac 	.word	0x24000fac
Pin PG2(GPIOG,GPIO_Pin::PIN_2);
 801205c:	2204      	movs	r2, #4
 801205e:	4995      	ldr	r1, [pc, #596]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012060:	4895      	ldr	r0, [pc, #596]	; (80122b8 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 8012062:	f7ff fa7b 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG3(GPIOG,GPIO_Pin::PIN_3);
 8012066:	2208      	movs	r2, #8
 8012068:	4992      	ldr	r1, [pc, #584]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 801206a:	4894      	ldr	r0, [pc, #592]	; (80122bc <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 801206c:	f7ff fa76 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG4(GPIOG,GPIO_Pin::PIN_4);
 8012070:	2210      	movs	r2, #16
 8012072:	4990      	ldr	r1, [pc, #576]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012074:	4892      	ldr	r0, [pc, #584]	; (80122c0 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 8012076:	f7ff fa71 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG5(GPIOG,GPIO_Pin::PIN_5);
 801207a:	2220      	movs	r2, #32
 801207c:	498d      	ldr	r1, [pc, #564]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 801207e:	4891      	ldr	r0, [pc, #580]	; (80122c4 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 8012080:	f7ff fa6c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG6(GPIOG,GPIO_Pin::PIN_6);
 8012084:	2240      	movs	r2, #64	; 0x40
 8012086:	498b      	ldr	r1, [pc, #556]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012088:	488f      	ldr	r0, [pc, #572]	; (80122c8 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 801208a:	f7ff fa67 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG7(GPIOG,GPIO_Pin::PIN_7);
 801208e:	2280      	movs	r2, #128	; 0x80
 8012090:	4988      	ldr	r1, [pc, #544]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012092:	488e      	ldr	r0, [pc, #568]	; (80122cc <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 8012094:	f7ff fa62 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG8(GPIOG,GPIO_Pin::PIN_8);
 8012098:	f44f 7280 	mov.w	r2, #256	; 0x100
 801209c:	4985      	ldr	r1, [pc, #532]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 801209e:	488c      	ldr	r0, [pc, #560]	; (80122d0 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 80120a0:	f7ff fa5c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC6(GPIOC,GPIO_Pin::PIN_6);
 80120a4:	2240      	movs	r2, #64	; 0x40
 80120a6:	498b      	ldr	r1, [pc, #556]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80120a8:	488b      	ldr	r0, [pc, #556]	; (80122d8 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 80120aa:	f7ff fa57 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC7(GPIOC,GPIO_Pin::PIN_7);
 80120ae:	2280      	movs	r2, #128	; 0x80
 80120b0:	4988      	ldr	r1, [pc, #544]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80120b2:	488a      	ldr	r0, [pc, #552]	; (80122dc <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 80120b4:	f7ff fa52 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC8(GPIOC,GPIO_Pin::PIN_8);
 80120b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80120bc:	4985      	ldr	r1, [pc, #532]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80120be:	4888      	ldr	r0, [pc, #544]	; (80122e0 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 80120c0:	f7ff fa4c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC9(GPIOC,GPIO_Pin::PIN_9);
 80120c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120c8:	4982      	ldr	r1, [pc, #520]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 80120ca:	4886      	ldr	r0, [pc, #536]	; (80122e4 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 80120cc:	f7ff fa46 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA8(GPIOA,GPIO_Pin::PIN_8);
 80120d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80120d4:	4984      	ldr	r1, [pc, #528]	; (80122e8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80120d6:	4885      	ldr	r0, [pc, #532]	; (80122ec <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 80120d8:	f7ff fa40 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA9(GPIOA,GPIO_Pin::PIN_9);
 80120dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80120e0:	4981      	ldr	r1, [pc, #516]	; (80122e8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80120e2:	4883      	ldr	r0, [pc, #524]	; (80122f0 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 80120e4:	f7ff fa3a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA10(GPIOA,GPIO_Pin::PIN_10);
 80120e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80120ec:	497e      	ldr	r1, [pc, #504]	; (80122e8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80120ee:	4881      	ldr	r0, [pc, #516]	; (80122f4 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 80120f0:	f7ff fa34 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA11(GPIOA,GPIO_Pin::PIN_11);
 80120f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120f8:	497b      	ldr	r1, [pc, #492]	; (80122e8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 80120fa:	487f      	ldr	r0, [pc, #508]	; (80122f8 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 80120fc:	f7ff fa2e 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA12(GPIOA,GPIO_Pin::PIN_12);
 8012100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012104:	4978      	ldr	r1, [pc, #480]	; (80122e8 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 8012106:	487d      	ldr	r0, [pc, #500]	; (80122fc <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 8012108:	f7ff fa28 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC10(GPIOC,GPIO_Pin::PIN_10);
 801210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012110:	4970      	ldr	r1, [pc, #448]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 8012112:	487b      	ldr	r0, [pc, #492]	; (8012300 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 8012114:	f7ff fa22 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC11(GPIOC,GPIO_Pin::PIN_11);
 8012118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801211c:	496d      	ldr	r1, [pc, #436]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 801211e:	4879      	ldr	r0, [pc, #484]	; (8012304 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 8012120:	f7ff fa1c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC12(GPIOC,GPIO_Pin::PIN_12);
 8012124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012128:	496a      	ldr	r1, [pc, #424]	; (80122d4 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 801212a:	4877      	ldr	r0, [pc, #476]	; (8012308 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 801212c:	f7ff fa16 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD0(GPIOD,GPIO_Pin::PIN_0);
 8012130:	2201      	movs	r2, #1
 8012132:	4976      	ldr	r1, [pc, #472]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8012134:	4876      	ldr	r0, [pc, #472]	; (8012310 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 8012136:	f7ff fa11 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD1(GPIOD,GPIO_Pin::PIN_1);
 801213a:	2202      	movs	r2, #2
 801213c:	4973      	ldr	r1, [pc, #460]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 801213e:	4875      	ldr	r0, [pc, #468]	; (8012314 <_Z41__static_initialization_and_destruction_0ii+0x714>)
 8012140:	f7ff fa0c 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD2(GPIOD,GPIO_Pin::PIN_2);
 8012144:	2204      	movs	r2, #4
 8012146:	4971      	ldr	r1, [pc, #452]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8012148:	4873      	ldr	r0, [pc, #460]	; (8012318 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 801214a:	f7ff fa07 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD3(GPIOD,GPIO_Pin::PIN_3);
 801214e:	2208      	movs	r2, #8
 8012150:	496e      	ldr	r1, [pc, #440]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8012152:	4872      	ldr	r0, [pc, #456]	; (801231c <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 8012154:	f7ff fa02 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD4(GPIOD,GPIO_Pin::PIN_4);
 8012158:	2210      	movs	r2, #16
 801215a:	496c      	ldr	r1, [pc, #432]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 801215c:	4870      	ldr	r0, [pc, #448]	; (8012320 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 801215e:	f7ff f9fd 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD5(GPIOD,GPIO_Pin::PIN_5);
 8012162:	2220      	movs	r2, #32
 8012164:	4969      	ldr	r1, [pc, #420]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8012166:	486f      	ldr	r0, [pc, #444]	; (8012324 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 8012168:	f7ff f9f8 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD6(GPIOD,GPIO_Pin::PIN_6);
 801216c:	2240      	movs	r2, #64	; 0x40
 801216e:	4967      	ldr	r1, [pc, #412]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 8012170:	486d      	ldr	r0, [pc, #436]	; (8012328 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 8012172:	f7ff f9f3 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD7(GPIOD,GPIO_Pin::PIN_7);
 8012176:	2280      	movs	r2, #128	; 0x80
 8012178:	4964      	ldr	r1, [pc, #400]	; (801230c <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 801217a:	486c      	ldr	r0, [pc, #432]	; (801232c <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 801217c:	f7ff f9ee 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG9(GPIOG,GPIO_Pin::PIN_9);
 8012180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012184:	494b      	ldr	r1, [pc, #300]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012186:	486a      	ldr	r0, [pc, #424]	; (8012330 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 8012188:	f7ff f9e8 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG10(GPIOG,GPIO_Pin::PIN_10);
 801218c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012190:	4948      	ldr	r1, [pc, #288]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 8012192:	4868      	ldr	r0, [pc, #416]	; (8012334 <_Z41__static_initialization_and_destruction_0ii+0x734>)
 8012194:	f7ff f9e2 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG11(GPIOG,GPIO_Pin::PIN_11);
 8012198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801219c:	4945      	ldr	r1, [pc, #276]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 801219e:	4866      	ldr	r0, [pc, #408]	; (8012338 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 80121a0:	f7ff f9dc 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG12(GPIOG,GPIO_Pin::PIN_12);
 80121a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80121a8:	4942      	ldr	r1, [pc, #264]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80121aa:	4864      	ldr	r0, [pc, #400]	; (801233c <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 80121ac:	f7ff f9d6 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG13(GPIOG,GPIO_Pin::PIN_13);
 80121b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80121b4:	493f      	ldr	r1, [pc, #252]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80121b6:	4862      	ldr	r0, [pc, #392]	; (8012340 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 80121b8:	f7ff f9d0 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG14(GPIOG,GPIO_Pin::PIN_14);
 80121bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80121c0:	493c      	ldr	r1, [pc, #240]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80121c2:	4860      	ldr	r0, [pc, #384]	; (8012344 <_Z41__static_initialization_and_destruction_0ii+0x744>)
 80121c4:	f7ff f9ca 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG15(GPIOG,GPIO_Pin::PIN_15);
 80121c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80121cc:	4939      	ldr	r1, [pc, #228]	; (80122b4 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 80121ce:	485e      	ldr	r0, [pc, #376]	; (8012348 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 80121d0:	f7ff f9c4 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB4(GPIOB,GPIO_Pin::PIN_4);
 80121d4:	2210      	movs	r2, #16
 80121d6:	495d      	ldr	r1, [pc, #372]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80121d8:	485d      	ldr	r0, [pc, #372]	; (8012350 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 80121da:	f7ff f9bf 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB5(GPIOB,GPIO_Pin::PIN_5);
 80121de:	2220      	movs	r2, #32
 80121e0:	495a      	ldr	r1, [pc, #360]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80121e2:	485c      	ldr	r0, [pc, #368]	; (8012354 <_Z41__static_initialization_and_destruction_0ii+0x754>)
 80121e4:	f7ff f9ba 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB6(GPIOB,GPIO_Pin::PIN_6);
 80121e8:	2240      	movs	r2, #64	; 0x40
 80121ea:	4958      	ldr	r1, [pc, #352]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80121ec:	485a      	ldr	r0, [pc, #360]	; (8012358 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 80121ee:	f7ff f9b5 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB7(GPIOB,GPIO_Pin::PIN_7);
 80121f2:	2280      	movs	r2, #128	; 0x80
 80121f4:	4955      	ldr	r1, [pc, #340]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 80121f6:	4859      	ldr	r0, [pc, #356]	; (801235c <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 80121f8:	f7ff f9b0 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB8(GPIOB,GPIO_Pin::PIN_8);
 80121fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012200:	4952      	ldr	r1, [pc, #328]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 8012202:	4857      	ldr	r0, [pc, #348]	; (8012360 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 8012204:	f7ff f9aa 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB9(GPIOB,GPIO_Pin::PIN_9);
 8012208:	f44f 7200 	mov.w	r2, #512	; 0x200
 801220c:	494f      	ldr	r1, [pc, #316]	; (801234c <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 801220e:	4855      	ldr	r0, [pc, #340]	; (8012364 <_Z41__static_initialization_and_destruction_0ii+0x764>)
 8012210:	f7ff f9a4 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE0(GPIOE,GPIO_Pin::PIN_0);
 8012214:	2201      	movs	r2, #1
 8012216:	4954      	ldr	r1, [pc, #336]	; (8012368 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 8012218:	4854      	ldr	r0, [pc, #336]	; (801236c <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 801221a:	f7ff f99f 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE1(GPIOE,GPIO_Pin::PIN_1);
 801221e:	2202      	movs	r2, #2
 8012220:	4951      	ldr	r1, [pc, #324]	; (8012368 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 8012222:	4853      	ldr	r0, [pc, #332]	; (8012370 <_Z41__static_initialization_and_destruction_0ii+0x770>)
 8012224:	f7ff f99a 	bl	801155c <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 8012228:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801222c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012230:	4a50      	ldr	r2, [pc, #320]	; (8012374 <_Z41__static_initialization_and_destruction_0ii+0x774>)
 8012232:	4618      	mov	r0, r3
 8012234:	4611      	mov	r1, r2
 8012236:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 801223a:	461a      	mov	r2, r3
 801223c:	f014 f84c 	bl	80262d8 <memcpy>
 8012240:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012244:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012248:	f107 0214 	add.w	r2, r7, #20
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012252:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8012256:	226e      	movs	r2, #110	; 0x6e
 8012258:	605a      	str	r2, [r3, #4]
 801225a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801225e:	4618      	mov	r0, r3
 8012260:	f7ff f9a7 	bl	80115b2 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 8012264:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8012268:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 801226c:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 8012270:	ca06      	ldmia	r2, {r1, r2}
 8012272:	4841      	ldr	r0, [pc, #260]	; (8012378 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 8012274:	f7ff f9b4 	bl	80115e0 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 8012278:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801227c:	4618      	mov	r0, r3
 801227e:	f7ff f9a4 	bl	80115ca <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 8012282:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012286:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10b      	bne.n	80122a8 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 8012290:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8012294:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801229e:	4293      	cmp	r3, r2
 80122a0:	d102      	bne.n	80122a8 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 80122a2:	4835      	ldr	r0, [pc, #212]	; (8012378 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 80122a4:	f7ff f9bd 	bl	8011622 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 80122a8:	bf00      	nop
 80122aa:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	58021800 	.word	0x58021800
 80122b8:	24000fb4 	.word	0x24000fb4
 80122bc:	24000fbc 	.word	0x24000fbc
 80122c0:	24000fc4 	.word	0x24000fc4
 80122c4:	24000fcc 	.word	0x24000fcc
 80122c8:	24000fd4 	.word	0x24000fd4
 80122cc:	24000fdc 	.word	0x24000fdc
 80122d0:	24000fe4 	.word	0x24000fe4
 80122d4:	58020800 	.word	0x58020800
 80122d8:	24000fec 	.word	0x24000fec
 80122dc:	24000ff4 	.word	0x24000ff4
 80122e0:	24000ffc 	.word	0x24000ffc
 80122e4:	24001004 	.word	0x24001004
 80122e8:	58020000 	.word	0x58020000
 80122ec:	2400100c 	.word	0x2400100c
 80122f0:	24001014 	.word	0x24001014
 80122f4:	2400101c 	.word	0x2400101c
 80122f8:	24001024 	.word	0x24001024
 80122fc:	2400102c 	.word	0x2400102c
 8012300:	24001034 	.word	0x24001034
 8012304:	2400103c 	.word	0x2400103c
 8012308:	24001044 	.word	0x24001044
 801230c:	58020c00 	.word	0x58020c00
 8012310:	2400104c 	.word	0x2400104c
 8012314:	24001054 	.word	0x24001054
 8012318:	2400105c 	.word	0x2400105c
 801231c:	24001064 	.word	0x24001064
 8012320:	2400106c 	.word	0x2400106c
 8012324:	24001074 	.word	0x24001074
 8012328:	2400107c 	.word	0x2400107c
 801232c:	24001084 	.word	0x24001084
 8012330:	2400108c 	.word	0x2400108c
 8012334:	24001094 	.word	0x24001094
 8012338:	2400109c 	.word	0x2400109c
 801233c:	240010a4 	.word	0x240010a4
 8012340:	240010ac 	.word	0x240010ac
 8012344:	240010b4 	.word	0x240010b4
 8012348:	240010bc 	.word	0x240010bc
 801234c:	58020400 	.word	0x58020400
 8012350:	240010c4 	.word	0x240010c4
 8012354:	240010cc 	.word	0x240010cc
 8012358:	240010d4 	.word	0x240010d4
 801235c:	240010dc 	.word	0x240010dc
 8012360:	240010e4 	.word	0x240010e4
 8012364:	240010ec 	.word	0x240010ec
 8012368:	58021000 	.word	0x58021000
 801236c:	240010f4 	.word	0x240010f4
 8012370:	240010fc 	.word	0x240010fc
 8012374:	08026654 	.word	0x08026654
 8012378:	24001104 	.word	0x24001104

0801237c <_GLOBAL__sub_I__ZN3PinC2Ev>:
 801237c:	b580      	push	{r7, lr}
 801237e:	af00      	add	r7, sp, #0
 8012380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012384:	2001      	movs	r0, #1
 8012386:	f7ff fc3b 	bl	8011c00 <_Z41__static_initialization_and_destruction_0ii>
 801238a:	bd80      	pop	{r7, pc}

0801238c <_GLOBAL__sub_D__ZN3PinC2Ev>:
 801238c:	b580      	push	{r7, lr}
 801238e:	af00      	add	r7, sp, #0
 8012390:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012394:	2000      	movs	r0, #0
 8012396:	f7ff fc33 	bl	8011c00 <_Z41__static_initialization_and_destruction_0ii>
 801239a:	bd80      	pop	{r7, pc}

0801239c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f000 fb65 	bl	8012a74 <_ZNSaImED1Ev>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 80123b4:	b480      	push	{r7}
 80123b6:	b083      	sub	sp, #12
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681a      	ldr	r2, [r3, #0]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d109      	bne.n	80123de <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	889a      	ldrh	r2, [r3, #4]
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	889b      	ldrh	r3, [r3, #4]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	bf34      	ite	cc
 80123d6:	2301      	movcc	r3, #1
 80123d8:	2300      	movcs	r3, #0
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	e008      	b.n	80123f0 <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	429a      	cmp	r2, r3
 80123e8:	bf34      	ite	cc
 80123ea:	2301      	movcc	r3, #1
 80123ec:	2300      	movcs	r3, #0
 80123ee:	b2db      	uxtb	r3, r3
	}
 80123f0:	4618      	mov	r0, r3
 80123f2:	370c      	adds	r7, #12
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr

080123fc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 fbeb 	bl	8012be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4618      	mov	r0, r3
 801240e:	3708      	adds	r7, #8
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}

08012414 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8012414:	b580      	push	{r7, lr}
 8012416:	b082      	sub	sp, #8
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	4618      	mov	r0, r3
 8012420:	f000 fbc9 	bl	8012bb6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4618      	mov	r0, r3
 8012428:	3708      	adds	r7, #8
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}

0801242e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 801242e:	b580      	push	{r7, lr}
 8012430:	b082      	sub	sp, #8
 8012432:	af00      	add	r7, sp, #0
 8012434:	6078      	str	r0, [r7, #4]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff ffeb 	bl	8012414 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	4618      	mov	r0, r3
 8012442:	3708      	adds	r7, #8
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f000 fbcf 	bl	8012bf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
extern ADC_HandleTypeDef hadc3;

forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, ADC::Instance> ADC::active_instances = {};

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 8012462:	b580      	push	{r7, lr}
 8012464:	b084      	sub	sp, #16
 8012466:	af00      	add	r7, sp, #0
 8012468:	60f8      	str	r0, [r7, #12]
 801246a:	60b9      	str	r1, [r7, #8]
 801246c:	607a      	str	r2, [r7, #4]
 801246e:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	68ba      	ldr	r2, [r7, #8]
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	605a      	str	r2, [r3, #4]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	609a      	str	r2, [r3, #8]
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	330c      	adds	r3, #12
 8012486:	69b9      	ldr	r1, [r7, #24]
 8012488:	4618      	mov	r0, r3
 801248a:	f000 fbc9 	bl	8012c20 <_ZNSt6vectorImSaImEEC1ERKS1_>
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <_ZN3ADC8InitDataC1ERKS0_>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
 80124a0:	6039      	str	r1, [r7, #0]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	685a      	ldr	r2, [r3, #4]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	605a      	str	r2, [r3, #4]
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	689a      	ldr	r2, [r3, #8]
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	609a      	str	r2, [r3, #8]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f103 020c 	add.w	r2, r3, #12
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	330c      	adds	r3, #12
 80124c4:	4619      	mov	r1, r3
 80124c6:	4610      	mov	r0, r2
 80124c8:	f000 fbaa 	bl	8012c20 <_ZNSt6vectorImSaImEEC1ERKS1_>
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	4618      	mov	r0, r3
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <_ZN3ADC8InitDataD1Ev>:
 80124d6:	b580      	push	{r7, lr}
 80124d8:	b082      	sub	sp, #8
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	330c      	adds	r3, #12
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 faea 	bl	8012abc <_ZNSt6vectorImSaImEED1Ev>
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	4618      	mov	r0, r3
 80124ec:	3708      	adds	r7, #8
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}

080124f2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 80124f2:	b580      	push	{r7, lr}
 80124f4:	b084      	sub	sp, #16
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	60f8      	str	r0, [r7, #12]
 80124fa:	60b9      	str	r1, [r7, #8]
 80124fc:	607a      	str	r2, [r7, #4]
 80124fe:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	68ba      	ldr	r2, [r7, #8]
 8012504:	601a      	str	r2, [r3, #0]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	687a      	ldr	r2, [r7, #4]
 801250a:	605a      	str	r2, [r3, #4]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	683a      	ldr	r2, [r7, #0]
 8012510:	3308      	adds	r3, #8
 8012512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012516:	e883 0003 	stmia.w	r3, {r0, r1}
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	3310      	adds	r3, #16
 801251e:	69b9      	ldr	r1, [r7, #24]
 8012520:	4618      	mov	r0, r3
 8012522:	f7ff ffb9 	bl	8012498 <_ZN3ADC8InitDataC1ERKS0_>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2200      	movs	r2, #0
 801252a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	4618      	mov	r0, r3
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <_ZN3ADC10Peripheral13is_registeredEv>:

bool ADC::Peripheral::is_registered() {
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
	return init_data.channels.size();
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	331c      	adds	r3, #28
 8012544:	4618      	mov	r0, r3
 8012546:	f000 fad4 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801254a:	4603      	mov	r3, r0
 801254c:	2b00      	cmp	r3, #0
 801254e:	bf14      	ite	ne
 8012550:	2301      	movne	r3, #1
 8012552:	2300      	moveq	r3, #0
 8012554:	b2db      	uxtb	r3, r3
}
 8012556:	4618      	mov	r0, r3
 8012558:	3708      	adds	r7, #8
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 801255e:	b480      	push	{r7}
 8012560:	b085      	sub	sp, #20
 8012562:	af00      	add	r7, sp, #0
 8012564:	60f8      	str	r0, [r7, #12]
 8012566:	60b9      	str	r1, [r7, #8]
 8012568:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	68ba      	ldr	r2, [r7, #8]
 801256e:	601a      	str	r2, [r3, #0]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	687a      	ldr	r2, [r7, #4]
 8012574:	605a      	str	r2, [r3, #4]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	4618      	mov	r0, r3
 801257a:	3714      	adds	r7, #20
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr

08012584 <_ZN3ADC8inscribeE3Pin>:

optional<uint8_t> ADC::inscribe(Pin pin) {
 8012584:	b590      	push	{r4, r7, lr}
 8012586:	b089      	sub	sp, #36	; 0x24
 8012588:	af00      	add	r7, sp, #0
 801258a:	463b      	mov	r3, r7
 801258c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (not available_instances.contains(pin)) {
 8012590:	463b      	mov	r3, r7
 8012592:	4619      	mov	r1, r3
 8012594:	4836      	ldr	r0, [pc, #216]	; (8012670 <_ZN3ADC8inscribeE3Pin+0xec>)
 8012596:	f000 fb80 	bl	8012c9a <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>
 801259a:	4603      	mov	r3, r0
 801259c:	f083 0301 	eor.w	r3, r3, #1
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d008      	beq.n	80125b8 <_ZN3ADC8inscribeE3Pin+0x34>
		return nullopt;
 80125a6:	f107 0314 	add.w	r3, r7, #20
 80125aa:	4621      	mov	r1, r4
 80125ac:	4618      	mov	r0, r3
 80125ae:	f000 fbcb 	bl	8012d48 <_ZNSt8optionalIhEC1ESt9nullopt_t>
 80125b2:	8abb      	ldrh	r3, [r7, #20]
 80125b4:	823b      	strh	r3, [r7, #16]
 80125b6:	e04f      	b.n	8012658 <_ZN3ADC8inscribeE3Pin+0xd4>
	}

	Pin::inscribe(pin, ANALOG);
 80125b8:	463b      	mov	r3, r7
 80125ba:	2103      	movs	r1, #3
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fe ffe4 	bl	801158a <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = id_manager.front();
 80125c2:	482c      	ldr	r0, [pc, #176]	; (8012674 <_ZN3ADC8inscribeE3Pin+0xf0>)
 80125c4:	f000 fbce 	bl	8012d64 <_ZNSt12forward_listIhSaIhEE5frontEv>
 80125c8:	4603      	mov	r3, r0
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	73fb      	strb	r3, [r7, #15]
	active_instances[id] = available_instances[pin];
 80125ce:	463b      	mov	r3, r7
 80125d0:	4619      	mov	r1, r3
 80125d2:	4827      	ldr	r0, [pc, #156]	; (8012670 <_ZN3ADC8inscribeE3Pin+0xec>)
 80125d4:	f000 fc32 	bl	8012e3c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
 80125d8:	4604      	mov	r4, r0
 80125da:	f107 030f 	add.w	r3, r7, #15
 80125de:	4619      	mov	r1, r3
 80125e0:	4825      	ldr	r0, [pc, #148]	; (8012678 <_ZN3ADC8inscribeE3Pin+0xf4>)
 80125e2:	f000 fbcf 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80125e6:	4603      	mov	r3, r0
 80125e8:	4622      	mov	r2, r4
 80125ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80125ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	id_manager.pop_front();
 80125f0:	4820      	ldr	r0, [pc, #128]	; (8012674 <_ZN3ADC8inscribeE3Pin+0xf0>)
 80125f2:	f000 fc7f 	bl	8012ef4 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	InitData& init_data = active_instances[id].peripheral->init_data;
 80125f6:	f107 030f 	add.w	r3, r7, #15
 80125fa:	4619      	mov	r1, r3
 80125fc:	481e      	ldr	r0, [pc, #120]	; (8012678 <_ZN3ADC8inscribeE3Pin+0xf4>)
 80125fe:	f000 fbc1 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8012602:	4603      	mov	r3, r0
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3310      	adds	r3, #16
 8012608:	61fb      	str	r3, [r7, #28]
	active_instances[id].rank = init_data.channels.size();
 801260a:	69fb      	ldr	r3, [r7, #28]
 801260c:	330c      	adds	r3, #12
 801260e:	4618      	mov	r0, r3
 8012610:	f000 fa6f 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8012614:	4604      	mov	r4, r0
 8012616:	f107 030f 	add.w	r3, r7, #15
 801261a:	4619      	mov	r1, r3
 801261c:	4816      	ldr	r0, [pc, #88]	; (8012678 <_ZN3ADC8inscribeE3Pin+0xf4>)
 801261e:	f000 fbb1 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8012622:	4603      	mov	r3, r0
 8012624:	609c      	str	r4, [r3, #8]
	init_data.channels.push_back(active_instances[id].channel);
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	f103 040c 	add.w	r4, r3, #12
 801262c:	f107 030f 	add.w	r3, r7, #15
 8012630:	4619      	mov	r1, r3
 8012632:	4811      	ldr	r0, [pc, #68]	; (8012678 <_ZN3ADC8inscribeE3Pin+0xf4>)
 8012634:	f000 fba6 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8012638:	4603      	mov	r3, r0
 801263a:	3304      	adds	r3, #4
 801263c:	4619      	mov	r1, r3
 801263e:	4620      	mov	r0, r4
 8012640:	f000 fc66 	bl	8012f10 <_ZNSt6vectorImSaImEE9push_backERKm>
	return id;
 8012644:	f107 020f 	add.w	r2, r7, #15
 8012648:	f107 0318 	add.w	r3, r7, #24
 801264c:	4611      	mov	r1, r2
 801264e:	4618      	mov	r0, r3
 8012650:	f000 fc83 	bl	8012f5a <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 8012654:	8b3b      	ldrh	r3, [r7, #24]
 8012656:	823b      	strh	r3, [r7, #16]
}
 8012658:	2300      	movs	r3, #0
 801265a:	7c3a      	ldrb	r2, [r7, #16]
 801265c:	f362 0307 	bfi	r3, r2, #0, #8
 8012660:	7c7a      	ldrb	r2, [r7, #17]
 8012662:	f362 230f 	bfi	r3, r2, #8, #8
 8012666:	4618      	mov	r0, r3
 8012668:	3724      	adds	r7, #36	; 0x24
 801266a:	46bd      	mov	sp, r7
 801266c:	bd90      	pop	{r4, r7, pc}
 801266e:	bf00      	nop
 8012670:	240013c8 	.word	0x240013c8
 8012674:	24001110 	.word	0x24001110
 8012678:	24001114 	.word	0x24001114

0801267c <_ZN3ADC5startEv>:

void ADC::start() {
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
	for(Peripheral& peripheral : peripherals) {
 8012682:	4b0e      	ldr	r3, [pc, #56]	; (80126bc <_ZN3ADC5startEv+0x40>)
 8012684:	60bb      	str	r3, [r7, #8]
 8012686:	4b0d      	ldr	r3, [pc, #52]	; (80126bc <_ZN3ADC5startEv+0x40>)
 8012688:	60fb      	str	r3, [r7, #12]
 801268a:	4b0d      	ldr	r3, [pc, #52]	; (80126c0 <_ZN3ADC5startEv+0x44>)
 801268c:	607b      	str	r3, [r7, #4]
 801268e:	68fa      	ldr	r2, [r7, #12]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	429a      	cmp	r2, r3
 8012694:	d00e      	beq.n	80126b4 <_ZN3ADC5startEv+0x38>
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	603b      	str	r3, [r7, #0]
		if (peripheral.is_registered()) {
 801269a:	6838      	ldr	r0, [r7, #0]
 801269c:	f7ff ff4c 	bl	8012538 <_ZN3ADC10Peripheral13is_registeredEv>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d002      	beq.n	80126ac <_ZN3ADC5startEv+0x30>
			ADC::init(peripheral);
 80126a6:	6838      	ldr	r0, [r7, #0]
 80126a8:	f000 f916 	bl	80128d8 <_ZN3ADC4initERNS_10PeripheralE>
	for(Peripheral& peripheral : peripherals) {
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	332c      	adds	r3, #44	; 0x2c
 80126b0:	60fb      	str	r3, [r7, #12]
 80126b2:	e7ec      	b.n	801268e <_ZN3ADC5startEv+0x12>
		}
	}
}
 80126b4:	bf00      	nop
 80126b6:	3710      	adds	r7, #16
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	24001344 	.word	0x24001344
 80126c0:	240013c8 	.word	0x240013c8

080126c4 <_ZN3ADC7turn_onEh>:

void ADC::turn_on(uint8_t id){
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b086      	sub	sp, #24
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	71fb      	strb	r3, [r7, #7]
	if (not active_instances.contains(id)) {
 80126ce:	1dfb      	adds	r3, r7, #7
 80126d0:	4619      	mov	r1, r3
 80126d2:	4829      	ldr	r0, [pc, #164]	; (8012778 <_ZN3ADC7turn_onEh+0xb4>)
 80126d4:	f000 fc55 	bl	8012f82 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 80126d8:	4603      	mov	r3, r0
 80126da:	f083 0301 	eor.w	r3, r3, #1
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d13e      	bne.n	8012762 <_ZN3ADC7turn_onEh+0x9e>
		return;
	}

	Peripheral* peripheral = active_instances[id].peripheral;
 80126e4:	1dfb      	adds	r3, r7, #7
 80126e6:	4619      	mov	r1, r3
 80126e8:	4823      	ldr	r0, [pc, #140]	; (8012778 <_ZN3ADC7turn_onEh+0xb4>)
 80126ea:	f000 fb4b 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80126ee:	4603      	mov	r3, r0
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	617b      	str	r3, [r7, #20]
	if (peripheral->is_on) {
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d133      	bne.n	8012766 <_ZN3ADC7turn_onEh+0xa2>
		return;
	}

	uint32_t buffer_length = peripheral->init_data.channels.size();
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	331c      	adds	r3, #28
 8012702:	4618      	mov	r0, r3
 8012704:	f000 f9f5 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8012708:	6138      	str	r0, [r7, #16]
	if (HAL_ADC_Start_DMA(peripheral->handle, (uint32_t*) peripheral->dma_stream, buffer_length) != HAL_OK) {
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	6818      	ldr	r0, [r3, #0]
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	685b      	ldr	r3, [r3, #4]
 8012712:	693a      	ldr	r2, [r7, #16]
 8012714:	4619      	mov	r1, r3
 8012716:	f7f3 faa5 	bl	8005c64 <HAL_ADC_Start_DMA>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	bf14      	ite	ne
 8012720:	2301      	movne	r3, #1
 8012722:	2300      	moveq	r3, #0
 8012724:	b2db      	uxtb	r3, r3
 8012726:	2b00      	cmp	r3, #0
 8012728:	d11f      	bne.n	801276a <_ZN3ADC7turn_onEh+0xa6>
		return; //TODO: Error handler
	}

	LowPowerTimer& timer = peripheral->timer;
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	3308      	adds	r3, #8
 801272e:	60fb      	str	r3, [r7, #12]
	if (HAL_LPTIM_TimeOut_Start_IT(timer.handle, timer.period, timer.period / 2) != HAL_OK) {
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	6818      	ldr	r0, [r3, #0]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	889b      	ldrh	r3, [r3, #4]
 8012738:	4619      	mov	r1, r3
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	889b      	ldrh	r3, [r3, #4]
 801273e:	085b      	lsrs	r3, r3, #1
 8012740:	b29b      	uxth	r3, r3
 8012742:	461a      	mov	r2, r3
 8012744:	f7f8 fb14 	bl	800ad70 <HAL_LPTIM_TimeOut_Start_IT>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	bf14      	ite	ne
 801274e:	2301      	movne	r3, #1
 8012750:	2300      	moveq	r3, #0
 8012752:	b2db      	uxtb	r3, r3
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10a      	bne.n	801276e <_ZN3ADC7turn_onEh+0xaa>
		return; //TODO: Error handler
	}
	peripheral->is_on = true;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2201      	movs	r2, #1
 801275c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8012760:	e006      	b.n	8012770 <_ZN3ADC7turn_onEh+0xac>
		return;
 8012762:	bf00      	nop
 8012764:	e004      	b.n	8012770 <_ZN3ADC7turn_onEh+0xac>
		return;
 8012766:	bf00      	nop
 8012768:	e002      	b.n	8012770 <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 801276a:	bf00      	nop
 801276c:	e000      	b.n	8012770 <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 801276e:	bf00      	nop
}
 8012770:	3718      	adds	r7, #24
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	24001114 	.word	0x24001114
 801277c:	00000000 	.word	0x00000000

08012780 <_ZN3ADC9get_valueEh>:

optional<float> ADC::get_value(uint8_t id) {
 8012780:	b590      	push	{r4, r7, lr}
 8012782:	b089      	sub	sp, #36	; 0x24
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	460b      	mov	r3, r1
 801278a:	70fb      	strb	r3, [r7, #3]
	if (not active_instances.contains(id)) {
 801278c:	1cfb      	adds	r3, r7, #3
 801278e:	4619      	mov	r1, r3
 8012790:	482f      	ldr	r0, [pc, #188]	; (8012850 <_ZN3ADC9get_valueEh+0xd0>)
 8012792:	f000 fbf6 	bl	8012f82 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 8012796:	4603      	mov	r3, r0
 8012798:	f083 0301 	eor.w	r3, r3, #1
 801279c:	b2db      	uxtb	r3, r3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d004      	beq.n	80127ac <_ZN3ADC9get_valueEh+0x2c>
		return nullopt;
 80127a2:	4621      	mov	r1, r4
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f000 fc43 	bl	8013030 <_ZNSt8optionalIfEC1ESt9nullopt_t>
 80127aa:	e03f      	b.n	801282c <_ZN3ADC9get_valueEh+0xac>
	}

	Instance& instance = active_instances[id];
 80127ac:	1cfb      	adds	r3, r7, #3
 80127ae:	4619      	mov	r1, r3
 80127b0:	4827      	ldr	r0, [pc, #156]	; (8012850 <_ZN3ADC9get_valueEh+0xd0>)
 80127b2:	f000 fae7 	bl	8012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80127b6:	61f8      	str	r0, [r7, #28]
	uint16_t raw = instance.peripheral->dma_stream[instance.rank];
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	685a      	ldr	r2, [r3, #4]
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	689b      	ldr	r3, [r3, #8]
 80127c2:	005b      	lsls	r3, r3, #1
 80127c4:	4413      	add	r3, r2
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	837b      	strh	r3, [r7, #26]
	if(instance.peripheral->handle == &hadc3) {
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	4a20      	ldr	r2, [pc, #128]	; (8012854 <_ZN3ADC9get_valueEh+0xd4>)
 80127d2:	4293      	cmp	r3, r2
 80127d4:	d115      	bne.n	8012802 <_ZN3ADC9get_valueEh+0x82>
		return raw / MAX_12BIT * MAX_VOLTAGE;
 80127d6:	8b7b      	ldrh	r3, [r7, #26]
 80127d8:	ee07 3a90 	vmov	s15, r3
 80127dc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80127e0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8012838 <_ZN3ADC9get_valueEh+0xb8>
 80127e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80127e8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012840 <_ZN3ADC9get_valueEh+0xc0>
 80127ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80127f0:	ed87 7b02 	vstr	d7, [r7, #8]
 80127f4:	f107 0308 	add.w	r3, r7, #8
 80127f8:	4619      	mov	r1, r3
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fc26 	bl	801304c <_ZNSt8optionalIfEC1IdLb1EEEOT_>
	}
	else {
		return raw / MAX_16BIT * MAX_VOLTAGE;
	}
	return nullopt;
}
 8012800:	e014      	b.n	801282c <_ZN3ADC9get_valueEh+0xac>
		return raw / MAX_16BIT * MAX_VOLTAGE;
 8012802:	8b7b      	ldrh	r3, [r7, #26]
 8012804:	ee07 3a90 	vmov	s15, r3
 8012808:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801280c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8012848 <_ZN3ADC9get_valueEh+0xc8>
 8012810:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012814:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8012840 <_ZN3ADC9get_valueEh+0xc0>
 8012818:	ee27 7b06 	vmul.f64	d7, d7, d6
 801281c:	ed87 7b04 	vstr	d7, [r7, #16]
 8012820:	f107 0310 	add.w	r3, r7, #16
 8012824:	4619      	mov	r1, r3
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 fc10 	bl	801304c <_ZNSt8optionalIfEC1IdLb1EEEOT_>
}
 801282c:	6878      	ldr	r0, [r7, #4]
 801282e:	3724      	adds	r7, #36	; 0x24
 8012830:	46bd      	mov	sp, r7
 8012832:	bd90      	pop	{r4, r7, pc}
 8012834:	f3af 8000 	nop.w
 8012838:	00000000 	.word	0x00000000
 801283c:	40affe00 	.word	0x40affe00
 8012840:	66666666 	.word	0x66666666
 8012844:	400a6666 	.word	0x400a6666
 8012848:	00000000 	.word	0x00000000
 801284c:	40efffe0 	.word	0x40efffe0
 8012850:	24001114 	.word	0x24001114
 8012854:	2400027c 	.word	0x2400027c

08012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 8012858:	b480      	push	{r7}
 801285a:	b083      	sub	sp, #12
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	370c      	adds	r7, #12
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 801286e:	b590      	push	{r4, r7, lr}
 8012870:	b083      	sub	sp, #12
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f7ff ffed 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 801287e:	4603      	mov	r3, r0
 8012880:	681c      	ldr	r4, [r3, #0]
 8012882:	6838      	ldr	r0, [r7, #0]
 8012884:	f7ff ffe8 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8012888:	4603      	mov	r3, r0
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	429c      	cmp	r4, r3
 801288e:	bf0c      	ite	eq
 8012890:	2301      	moveq	r3, #1
 8012892:	2300      	movne	r3, #0
 8012894:	b2db      	uxtb	r3, r3
 8012896:	4618      	mov	r0, r3
 8012898:	370c      	adds	r7, #12
 801289a:	46bd      	mov	sp, r7
 801289c:	bd90      	pop	{r4, r7, pc}

0801289e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801289e:	b480      	push	{r7}
 80128a0:	b083      	sub	sp, #12
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	1d1a      	adds	r2, r3, #4
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	601a      	str	r2, [r3, #0]
	return *this;
 80128b0:	687b      	ldr	r3, [r7, #4]
      }
 80128b2:	4618      	mov	r0, r3
 80128b4:	370c      	adds	r7, #12
 80128b6:	46bd      	mov	sp, r7
 80128b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128bc:	4770      	bx	lr

080128be <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80128be:	b480      	push	{r7}
 80128c0:	b083      	sub	sp, #12
 80128c2:	af00      	add	r7, sp, #0
 80128c4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	4618      	mov	r0, r3
 80128cc:	370c      	adds	r7, #12
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr
	...

080128d8 <_ZN3ADC4initERNS_10PeripheralE>:

void ADC::init(Peripheral& peripheral) {
 80128d8:	b580      	push	{r7, lr}
 80128da:	b09a      	sub	sp, #104	; 0x68
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]


	  ADC_MultiModeTypeDef multimode = {0};
 80128e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80128e4:	2200      	movs	r2, #0
 80128e6:	601a      	str	r2, [r3, #0]
 80128e8:	605a      	str	r2, [r3, #4]
 80128ea:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80128ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80128f0:	2224      	movs	r2, #36	; 0x24
 80128f2:	2100      	movs	r1, #0
 80128f4:	4618      	mov	r0, r3
 80128f6:	f013 fd17 	bl	8026328 <memset>
	  ADC_HandleTypeDef& adc_handle = *peripheral.handle;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	663b      	str	r3, [r7, #96]	; 0x60
	  InitData init_data = peripheral.init_data;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	f103 0210 	add.w	r2, r3, #16
 8012906:	f107 0310 	add.w	r3, r7, #16
 801290a:	4611      	mov	r1, r2
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff fdc3 	bl	8012498 <_ZN3ADC8InitDataC1ERKS0_>

	  adc_handle.Instance = init_data.adc;
 8012912:	693a      	ldr	r2, [r7, #16]
 8012914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012916:	601a      	str	r2, [r3, #0]
	  adc_handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8012918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801291a:	2200      	movs	r2, #0
 801291c:	605a      	str	r2, [r3, #4]
	  adc_handle.Init.Resolution = init_data.resolution;
 801291e:	697a      	ldr	r2, [r7, #20]
 8012920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012922:	609a      	str	r2, [r3, #8]
	  adc_handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8012924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012926:	2201      	movs	r2, #1
 8012928:	611a      	str	r2, [r3, #16]
	  adc_handle.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 801292a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801292c:	2208      	movs	r2, #8
 801292e:	615a      	str	r2, [r3, #20]
	  adc_handle.Init.LowPowerAutoWait = DISABLE;
 8012930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012932:	2200      	movs	r2, #0
 8012934:	761a      	strb	r2, [r3, #24]
	  adc_handle.Init.ContinuousConvMode = DISABLE;
 8012936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012938:	2200      	movs	r2, #0
 801293a:	765a      	strb	r2, [r3, #25]
	  adc_handle.Init.NbrOfConversion = init_data.channels.size();
 801293c:	f107 0310 	add.w	r3, r7, #16
 8012940:	330c      	adds	r3, #12
 8012942:	4618      	mov	r0, r3
 8012944:	f000 f8d5 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8012948:	4602      	mov	r2, r0
 801294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801294c:	61da      	str	r2, [r3, #28]
	  adc_handle.Init.DiscontinuousConvMode = DISABLE;
 801294e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012950:	2200      	movs	r2, #0
 8012952:	f883 2020 	strb.w	r2, [r3, #32]
	  adc_handle.Init.ExternalTrigConv = init_data.external_trigger;
 8012956:	69ba      	ldr	r2, [r7, #24]
 8012958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801295a:	629a      	str	r2, [r3, #40]	; 0x28
	  adc_handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 801295c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801295e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012962:	62da      	str	r2, [r3, #44]	; 0x2c
	  adc_handle.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8012964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012966:	2203      	movs	r2, #3
 8012968:	631a      	str	r2, [r3, #48]	; 0x30
	  adc_handle.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801296a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801296c:	2200      	movs	r2, #0
 801296e:	63da      	str	r2, [r3, #60]	; 0x3c
	  adc_handle.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8012970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012972:	2200      	movs	r2, #0
 8012974:	641a      	str	r2, [r3, #64]	; 0x40
	  adc_handle.Init.OversamplingMode = DISABLE;
 8012976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012978:	2200      	movs	r2, #0
 801297a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	  if (HAL_ADC_Init(&adc_handle) != HAL_OK) {
 801297e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012980:	f7f2 ff68 	bl	8005854 <HAL_ADC_Init>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
	    //TODO: Error handler
	  }

	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8012988:	2300      	movs	r3, #0
 801298a:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_ADCEx_MultiModeConfigChannel(&adc_handle, &multimode) != HAL_OK) {
 801298c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012990:	4619      	mov	r1, r3
 8012992:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012994:	f7f4 fc32 	bl	80071fc <HAL_ADCEx_MultiModeConfigChannel>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
	    //TODO: Error handler
	  }


	  uint8_t counter = 0;
 801299c:	2300      	movs	r3, #0
 801299e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  for(uint32_t channel : peripheral.init_data.channels) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	331c      	adds	r3, #28
 80129a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80129a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80129aa:	f000 fb63 	bl	8013074 <_ZNSt6vectorImSaImEE5beginEv>
 80129ae:	4603      	mov	r3, r0
 80129b0:	60fb      	str	r3, [r7, #12]
 80129b2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80129b4:	f000 fb6e 	bl	8013094 <_ZNSt6vectorImSaImEE3endEv>
 80129b8:	4603      	mov	r3, r0
 80129ba:	60bb      	str	r3, [r7, #8]
 80129bc:	f107 0208 	add.w	r2, r7, #8
 80129c0:	f107 030c 	add.w	r3, r7, #12
 80129c4:	4611      	mov	r1, r2
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff ff51 	bl	801286e <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 80129cc:	4603      	mov	r3, r0
 80129ce:	f083 0301 	eor.w	r3, r3, #1
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d02e      	beq.n	8012a36 <_ZN3ADC4initERNS_10PeripheralE+0x15e>
 80129d8:	f107 030c 	add.w	r3, r7, #12
 80129dc:	4618      	mov	r0, r3
 80129de:	f7ff ff6e 	bl	80128be <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 80129e2:	4603      	mov	r3, r0
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	65bb      	str	r3, [r7, #88]	; 0x58
		  sConfig.Channel = channel;
 80129e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80129ea:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  sConfig.Rank = ranks[counter];
 80129ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80129f0:	4a15      	ldr	r2, [pc, #84]	; (8012a48 <_ZN3ADC4initERNS_10PeripheralE+0x170>)
 80129f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80129f8:	2300      	movs	r3, #0
 80129fa:	633b      	str	r3, [r7, #48]	; 0x30
	  	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80129fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012a00:	637b      	str	r3, [r7, #52]	; 0x34
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8012a02:	2304      	movs	r3, #4
 8012a04:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  sConfig.Offset = 0;
 8012a06:	2300      	movs	r3, #0
 8012a08:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  sConfig.OffsetSignedSaturation = DISABLE;
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
 8012a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012a14:	4619      	mov	r1, r3
 8012a16:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8012a18:	f7f3 fc62 	bl	80062e0 <HAL_ADC_ConfigChannel>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	2b00      	cmp	r3, #0
	  		  //TODO: Error handler
	  	  }
	  	  counter++;
 8012a20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012a24:	3301      	adds	r3, #1
 8012a26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  for(uint32_t channel : peripheral.init_data.channels) {
 8012a2a:	f107 030c 	add.w	r3, r7, #12
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7ff ff35 	bl	801289e <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 8012a34:	e7c2      	b.n	80129bc <_ZN3ADC4initERNS_10PeripheralE+0xe4>
	  InitData init_data = peripheral.init_data;
 8012a36:	f107 0310 	add.w	r3, r7, #16
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ff fd4b 	bl	80124d6 <_ZN3ADC8InitDataD1Ev>
	  }
}
 8012a40:	bf00      	nop
 8012a42:	3768      	adds	r7, #104	; 0x68
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	24000018 	.word	0x24000018

08012a4c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8012a4c:	b480      	push	{r7}
 8012a4e:	b083      	sub	sp, #12
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d201      	bcs.n	8012a66 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	e000      	b.n	8012a68 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8012a66:	687b      	ldr	r3, [r7, #4]
    }
 8012a68:	4618      	mov	r0, r3
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr

08012a74 <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012a74:	b480      	push	{r7}
 8012a76:	b083      	sub	sp, #12
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b082      	sub	sp, #8
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	689a      	ldr	r2, [r3, #8]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f000 fb1a 	bl	80130de <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7ff fc75 	bl	801239c <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}

08012abc <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8012abc:	b5b0      	push	{r4, r5, r7, lr}
 8012abe:	b082      	sub	sp, #8
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681c      	ldr	r4, [r3, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f000 fb18 	bl	8013104 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8012ad4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	4629      	mov	r1, r5
 8012ada:	4620      	mov	r0, r4
 8012adc:	f000 fb1d 	bl	801311a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7ff ffd1 	bl	8012a8a <_ZNSt12_Vector_baseImSaImEED1Ev>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	4618      	mov	r0, r3
 8012aec:	3708      	adds	r7, #8
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bdb0      	pop	{r4, r5, r7, pc}

08012af2 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012af2:	b480      	push	{r7}
 8012af4:	b083      	sub	sp, #12
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	685a      	ldr	r2, [r3, #4]
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	1ad3      	subs	r3, r2, r3
 8012b04:	109b      	asrs	r3, r3, #2
 8012b06:	4618      	mov	r0, r3
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr

08012b12 <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8012b12:	b580      	push	{r7, lr}
 8012b14:	b082      	sub	sp, #8
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fb0b 	bl	8013136 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4618      	mov	r0, r3
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}

08012b2a <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8012b2a:	b480      	push	{r7}
 8012b2c:	b083      	sub	sp, #12
 8012b2e:	af00      	add	r7, sp, #0
 8012b30:	6078      	str	r0, [r7, #4]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	4618      	mov	r0, r3
 8012b36:	370c      	adds	r7, #12
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr

08012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  @param  __al  An allocator object.
       *
       *  Create a %forward_list consisting of copies of the elements
       *  in the initializer_list @a __il.  This is linear in __il.size().
       */
      forward_list(std::initializer_list<_Tp> __il,
 8012b40:	b590      	push	{r4, r7, lr}
 8012b42:	b087      	sub	sp, #28
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	1d38      	adds	r0, r7, #4
 8012b4a:	e880 0006 	stmia.w	r0, {r1, r2}
 8012b4e:	603b      	str	r3, [r7, #0]
		   const _Alloc& __al = _Alloc())
      : _Base(_Node_alloc_type(__al))
 8012b50:	68fc      	ldr	r4, [r7, #12]
 8012b52:	f107 0314 	add.w	r3, r7, #20
 8012b56:	6839      	ldr	r1, [r7, #0]
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f000 faf7 	bl	801314c <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>
 8012b5e:	f107 0314 	add.w	r3, r7, #20
 8012b62:	4619      	mov	r1, r3
 8012b64:	4620      	mov	r0, r4
 8012b66:	f000 fb15 	bl	8013194 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>
 8012b6a:	f107 0314 	add.w	r3, r7, #20
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 faf9 	bl	8013166 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
      { _M_range_initialize(__il.begin(), __il.end()); }
 8012b74:	1d3b      	adds	r3, r7, #4
 8012b76:	4618      	mov	r0, r3
 8012b78:	f000 fb32 	bl	80131e0 <_ZNKSt16initializer_listIhE5beginEv>
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	1d3b      	adds	r3, r7, #4
 8012b80:	4618      	mov	r0, r3
 8012b82:	f000 fb39 	bl	80131f8 <_ZNKSt16initializer_listIhE3endEv>
 8012b86:	4603      	mov	r3, r0
 8012b88:	461a      	mov	r2, r3
 8012b8a:	4621      	mov	r1, r4
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f000 fb44 	bl	801321a <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	4618      	mov	r0, r3
 8012b96:	371c      	adds	r7, #28
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd90      	pop	{r4, r7, pc}

08012b9c <_ZNSt12forward_listIhSaIhEED1Ev>:

      /**
       *  @brief  The forward_list dtor.
       */
      ~forward_list() noexcept
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
      { }
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f000 fb07 	bl	80131ba <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3708      	adds	r7, #8
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b082      	sub	sp, #8
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fb4a 	bl	8013258 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ef fa2e 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	3304      	adds	r3, #4
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ee fc51 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
 8012be0:	b480      	push	{r7}
 8012be2:	b083      	sub	sp, #12
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	4618      	mov	r0, r3
 8012bec:	370c      	adds	r7, #12
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr

08012bf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8012bf6:	b580      	push	{r7, lr}
 8012bf8:	b082      	sub	sp, #8
 8012bfa:	af00      	add	r7, sp, #0
 8012bfc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8012bfe:	6878      	ldr	r0, [r7, #4]
 8012c00:	f000 fb55 	bl	80132ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8012c04:	4603      	mov	r3, r0
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 fb31 	bl	8013270 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7ff fbf3 	bl	80123fc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3708      	adds	r7, #8
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}

08012c20 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8012c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8012c2a:	687c      	ldr	r4, [r7, #4]
 8012c2c:	6838      	ldr	r0, [r7, #0]
 8012c2e:	f7ff ff60 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8012c32:	4605      	mov	r5, r0
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f000 fb53 	bl	80132e2 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	f107 030c 	add.w	r3, r7, #12
 8012c42:	4611      	mov	r1, r2
 8012c44:	4618      	mov	r0, r3
 8012c46:	f000 fb3e 	bl	80132c6 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8012c4a:	f107 030c 	add.w	r3, r7, #12
 8012c4e:	461a      	mov	r2, r3
 8012c50:	4629      	mov	r1, r5
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 fb50 	bl	80132f8 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 8012c58:	f107 030c 	add.w	r3, r7, #12
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7ff ff09 	bl	8012a74 <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012c62:	6838      	ldr	r0, [r7, #0]
 8012c64:	f000 fb5c 	bl	8013320 <_ZNKSt6vectorImSaImEE5beginEv>
 8012c68:	4605      	mov	r5, r0
 8012c6a:	6838      	ldr	r0, [r7, #0]
 8012c6c:	f000 fb68 	bl	8013340 <_ZNKSt6vectorImSaImEE3endEv>
 8012c70:	4606      	mov	r6, r0
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f000 fa43 	bl	8013104 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8012c7e:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8012c80:	4622      	mov	r2, r4
 8012c82:	4631      	mov	r1, r6
 8012c84:	4628      	mov	r0, r5
 8012c86:	f000 fb6c 	bl	8013362 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8012c8a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	605a      	str	r2, [r3, #4]
      }
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	4618      	mov	r0, r3
 8012c94:	3714      	adds	r7, #20
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012c9a <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b084      	sub	sp, #16
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f000 fb6b 	bl	8013384 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	60bb      	str	r3, [r7, #8]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f000 fba1 	bl	80133fc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	60fb      	str	r3, [r7, #12]
 8012cbe:	f107 020c 	add.w	r2, r7, #12
 8012cc2:	f107 0308 	add.w	r3, r7, #8
 8012cc6:	4611      	mov	r1, r2
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f000 fba8 	bl	801341e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	f083 0301 	eor.w	r3, r3, #1
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7ff ffed 	bl	8012cde <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	2200      	movs	r2, #0
 8012d08:	705a      	strb	r2, [r3, #1]
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3708      	adds	r7, #8
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}

08012d14 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b082      	sub	sp, #8
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7ff ffe8 	bl	8012cf4 <_ZNSt22_Optional_payload_baseIhEC1Ev>
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4618      	mov	r0, r3
 8012d28:	3708      	adds	r7, #8
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}

08012d2e <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7ff ffeb 	bl	8012d14 <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <_ZNSt8optionalIhEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	7039      	strb	r1, [r7, #0]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff ffea 	bl	8012d2e <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <_ZNSt12forward_listIhSaIhEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %forward_list.
       */
      reference
      front()
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
      {
	_Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	60fb      	str	r3, [r7, #12]
	return *__front->_M_valptr();
 8012d72:	68f8      	ldr	r0, [r7, #12]
 8012d74:	f000 fb67 	bl	8013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8012d78:	4603      	mov	r3, r0
      }
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	3710      	adds	r7, #16
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	bd80      	pop	{r7, pc}
	...

08012d84 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8012d84:	b590      	push	{r4, r7, lr}
 8012d86:	b08b      	sub	sp, #44	; 0x2c
 8012d88:	af02      	add	r7, sp, #8
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8012d8e:	6839      	ldr	r1, [r7, #0]
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f000 fb66 	bl	8013462 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 8012d96:	4603      	mov	r3, r0
 8012d98:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f000 fb70 	bl	8013480 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8012da0:	4603      	mov	r3, r0
 8012da2:	60fb      	str	r3, [r7, #12]
 8012da4:	f107 020c 	add.w	r2, r7, #12
 8012da8:	f107 0308 	add.w	r3, r7, #8
 8012dac:	4611      	mov	r1, r2
 8012dae:	4618      	mov	r0, r3
 8012db0:	f000 fb73 	bl	801349a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 8012db4:	4603      	mov	r3, r0
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d112      	bne.n	8012de0 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x5c>
 8012dba:	6878      	ldr	r0, [r7, #4]
 8012dbc:	f000 fb81 	bl	80134c2 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 8012dc0:	f107 0308 	add.w	r3, r7, #8
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f000 fb89 	bl	80134dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	461a      	mov	r2, r3
 8012dce:	f107 0310 	add.w	r3, r7, #16
 8012dd2:	6839      	ldr	r1, [r7, #0]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f000 fb8f 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x60>
 8012de0:	2301      	movs	r3, #1
 8012de2:	e000      	b.n	8012de6 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x62>
 8012de4:	2300      	movs	r3, #0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d01b      	beq.n	8012e22 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8012dea:	687c      	ldr	r4, [r7, #4]
 8012dec:	f107 0208 	add.w	r2, r7, #8
 8012df0:	f107 0314 	add.w	r3, r7, #20
 8012df4:	4611      	mov	r1, r2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f000 fba2 	bl	8013540 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8012dfc:	f107 0318 	add.w	r3, r7, #24
 8012e00:	6839      	ldr	r1, [r7, #0]
 8012e02:	4618      	mov	r0, r3
 8012e04:	f000 fb8d 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8012e08:	f107 0218 	add.w	r2, r7, #24
 8012e0c:	f107 031c 	add.w	r3, r7, #28
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	4613      	mov	r3, r2
 8012e14:	4a08      	ldr	r2, [pc, #32]	; (8012e38 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0xb4>)
 8012e16:	6979      	ldr	r1, [r7, #20]
 8012e18:	4620      	mov	r0, r4
 8012e1a:	f000 fba1 	bl	8013560 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8012e22:	f107 0308 	add.w	r3, r7, #8
 8012e26:	4618      	mov	r0, r3
 8012e28:	f000 fb58 	bl	80134dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	3304      	adds	r3, #4
      }
 8012e30:	4618      	mov	r0, r3
 8012e32:	3724      	adds	r7, #36	; 0x24
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd90      	pop	{r4, r7, pc}
 8012e38:	08026cc4 	.word	0x08026cc4

08012e3c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>:
      operator[](const key_type& __k)
 8012e3c:	b590      	push	{r4, r7, lr}
 8012e3e:	b08b      	sub	sp, #44	; 0x2c
 8012e40:	af02      	add	r7, sp, #8
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8012e46:	6839      	ldr	r1, [r7, #0]
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 fbc7 	bl	80135dc <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 fbd1 	bl	80135fa <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	60fb      	str	r3, [r7, #12]
 8012e5c:	f107 020c 	add.w	r2, r7, #12
 8012e60:	f107 0308 	add.w	r3, r7, #8
 8012e64:	4611      	mov	r1, r2
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 fbd4 	bl	8013614 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d112      	bne.n	8012e98 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x5c>
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 fbe2 	bl	801363c <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>
 8012e78:	f107 0308 	add.w	r3, r7, #8
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f000 fbea 	bl	8013656 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 8012e82:	4603      	mov	r3, r0
 8012e84:	461a      	mov	r2, r3
 8012e86:	f107 0310 	add.w	r3, r7, #16
 8012e8a:	6839      	ldr	r1, [r7, #0]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 fbf0 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012e92:	4603      	mov	r3, r0
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d001      	beq.n	8012e9c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x60>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e000      	b.n	8012e9e <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x62>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d01b      	beq.n	8012eda <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8012ea2:	687c      	ldr	r4, [r7, #4]
 8012ea4:	f107 0208 	add.w	r2, r7, #8
 8012ea8:	f107 0314 	add.w	r3, r7, #20
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 fbfd 	bl	80136ae <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 8012eb4:	f107 0318 	add.w	r3, r7, #24
 8012eb8:	6839      	ldr	r1, [r7, #0]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f000 fbe8 	bl	8013690 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8012ec0:	f107 0218 	add.w	r2, r7, #24
 8012ec4:	f107 031c 	add.w	r3, r7, #28
 8012ec8:	9300      	str	r3, [sp, #0]
 8012eca:	4613      	mov	r3, r2
 8012ecc:	4a08      	ldr	r2, [pc, #32]	; (8012ef0 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0xb4>)
 8012ece:	6979      	ldr	r1, [r7, #20]
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f000 fbfc 	bl	80136ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8012eda:	f107 0308 	add.w	r3, r7, #8
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f000 fbb9 	bl	8013656 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	3308      	adds	r3, #8
      }
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3724      	adds	r7, #36	; 0x24
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd90      	pop	{r4, r7, pc}
 8012ef0:	08026cc4 	.word	0x08026cc4

08012ef4 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front()
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b082      	sub	sp, #8
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
      { this->_M_erase_after(&this->_M_impl._M_head); }
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	4611      	mov	r1, r2
 8012f02:	4618      	mov	r0, r3
 8012f04:	f000 fc21 	bl	801374a <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>
 8012f08:	bf00      	nop
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <_ZNSt6vectorImSaImEE9push_backERKm>:
      push_back(const value_type& __x)
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d00c      	beq.n	8012f40 <_ZNSt6vectorImSaImEE9push_backERKm+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	683a      	ldr	r2, [r7, #0]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	f000 fc42 	bl	80137b8 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	1d1a      	adds	r2, r3, #4
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	605a      	str	r2, [r3, #4]
      }
 8012f3e:	e008      	b.n	8012f52 <_ZNSt6vectorImSaImEE9push_backERKm+0x42>
	  _M_realloc_insert(end(), __x);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 f8a7 	bl	8013094 <_ZNSt6vectorImSaImEE3endEv>
 8012f46:	4603      	mov	r3, r0
 8012f48:	683a      	ldr	r2, [r7, #0]
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 fc45 	bl	80137dc <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 8012f52:	bf00      	nop
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
	optional(_Up&& __t)
 8012f5a:	b5b0      	push	{r4, r5, r7, lr}
 8012f5c:	b082      	sub	sp, #8
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
 8012f62:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8012f64:	687c      	ldr	r4, [r7, #4]
 8012f66:	6838      	ldr	r0, [r7, #0]
 8012f68:	f000 fcb4 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	461a      	mov	r2, r3
 8012f70:	4629      	mov	r1, r5
 8012f72:	4620      	mov	r0, r4
 8012f74:	f000 fcca 	bl	801390c <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	4618      	mov	r0, r3
 8012f7c:	3708      	adds	r7, #8
 8012f7e:	46bd      	mov	sp, r7
 8012f80:	bdb0      	pop	{r4, r5, r7, pc}

08012f82 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 8012f82:	b580      	push	{r7, lr}
 8012f84:	b084      	sub	sp, #16
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6839      	ldr	r1, [r7, #0]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 fcd0 	bl	8013936 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 8012f96:	4603      	mov	r3, r0
 8012f98:	60bb      	str	r3, [r7, #8]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f000 fd06 	bl	80139ae <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	60fb      	str	r3, [r7, #12]
 8012fa6:	f107 020c 	add.w	r2, r7, #12
 8012faa:	f107 0308 	add.w	r3, r7, #8
 8012fae:	4611      	mov	r1, r2
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f000 fd0d 	bl	80139d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	f083 0301 	eor.w	r3, r3, #1
 8012fbc:	b2db      	uxtb	r3, r3
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3710      	adds	r7, #16
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}

08012fc6 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 8012fc6:	b480      	push	{r7}
 8012fc8:	b083      	sub	sp, #12
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	6078      	str	r0, [r7, #4]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	370c      	adds	r7, #12
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fda:	4770      	bx	lr

08012fdc <_ZNSt22_Optional_payload_baseIfEC1Ev>:
      _Optional_payload_base() = default;
 8012fdc:	b580      	push	{r7, lr}
 8012fde:	b082      	sub	sp, #8
 8012fe0:	af00      	add	r7, sp, #0
 8012fe2:	6078      	str	r0, [r7, #4]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7ff ffed 	bl	8012fc6 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	711a      	strb	r2, [r3, #4]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3708      	adds	r7, #8
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	4618      	mov	r0, r3
 8013008:	f7ff ffe8 	bl	8012fdc <_ZNSt22_Optional_payload_baseIfEC1Ev>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8013016:	b580      	push	{r7, lr}
 8013018:	b082      	sub	sp, #8
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff ffeb 	bl	8012ffc <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	4618      	mov	r0, r3
 801302a:	3708      	adds	r7, #8
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <_ZNSt8optionalIfEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	7039      	strb	r1, [r7, #0]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	4618      	mov	r0, r3
 801303e:	f7ff ffea 	bl	8013016 <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	4618      	mov	r0, r3
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <_ZNSt8optionalIfEC1IdLb1EEEOT_>:
	optional(_Up&& __t)
 801304c:	b5b0      	push	{r4, r5, r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8013056:	687c      	ldr	r4, [r7, #4]
 8013058:	6838      	ldr	r0, [r7, #0]
 801305a:	f000 fccd 	bl	80139f8 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	4629      	mov	r1, r5
 8013064:	4620      	mov	r0, r4
 8013066:	f000 fce3 	bl	8013a30 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	4618      	mov	r0, r3
 801306e:	3708      	adds	r7, #8
 8013070:	46bd      	mov	sp, r7
 8013072:	bdb0      	pop	{r4, r5, r7, pc}

08013074 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8013074:	b580      	push	{r7, lr}
 8013076:	b084      	sub	sp, #16
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	f107 030c 	add.w	r3, r7, #12
 8013082:	4611      	mov	r1, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f000 fce8 	bl	8013a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	1d1a      	adds	r2, r3, #4
 80130a0:	f107 030c 	add.w	r3, r7, #12
 80130a4:	4611      	mov	r1, r2
 80130a6:	4618      	mov	r0, r3
 80130a8:	f000 fcd7 	bl	8013a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	4618      	mov	r0, r3
 80130b0:	3710      	adds	r7, #16
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80130b6:	b480      	push	{r7}
 80130b8:	b083      	sub	sp, #12
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2200      	movs	r2, #0
 80130c2:	601a      	str	r2, [r3, #0]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2200      	movs	r2, #0
 80130c8:	605a      	str	r2, [r3, #4]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	2200      	movs	r2, #0
 80130ce:	609a      	str	r2, [r3, #8]
	{ }
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	4618      	mov	r0, r3
 80130d4:	370c      	adds	r7, #12
 80130d6:	46bd      	mov	sp, r7
 80130d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130dc:	4770      	bx	lr

080130de <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 80130de:	b580      	push	{r7, lr}
 80130e0:	b084      	sub	sp, #16
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	60f8      	str	r0, [r7, #12]
 80130e6:	60b9      	str	r1, [r7, #8]
 80130e8:	607a      	str	r2, [r7, #4]
	if (__p)
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d005      	beq.n	80130fc <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	68b9      	ldr	r1, [r7, #8]
 80130f6:	4618      	mov	r0, r3
 80130f8:	f000 fcbf 	bl	8013a7a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 80130fc:	bf00      	nop
 80130fe:	3710      	adds	r7, #16
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8013104:	b480      	push	{r7}
 8013106:	b083      	sub	sp, #12
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	4618      	mov	r0, r3
 8013110:	370c      	adds	r7, #12
 8013112:	46bd      	mov	sp, r7
 8013114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013118:	4770      	bx	lr

0801311a <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801311a:	b580      	push	{r7, lr}
 801311c:	b084      	sub	sp, #16
 801311e:	af00      	add	r7, sp, #0
 8013120:	60f8      	str	r0, [r7, #12]
 8013122:	60b9      	str	r1, [r7, #8]
 8013124:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8013126:	68b9      	ldr	r1, [r7, #8]
 8013128:	68f8      	ldr	r0, [r7, #12]
 801312a:	f000 fcc5 	bl	8013ab8 <_ZSt8_DestroyIPmEvT_S1_>
    }
 801312e:	bf00      	nop
 8013130:	3710      	adds	r7, #16
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}

08013136 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8013136:	b480      	push	{r7}
 8013138:	b083      	sub	sp, #12
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	4618      	mov	r0, r3
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801314c:	b580      	push	{r7, lr}
 801314e:	b082      	sub	sp, #8
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	6039      	str	r1, [r7, #0]
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	f000 fcc4 	bl	8013ae4 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	4618      	mov	r0, r3
 8013160:	3708      	adds	r7, #8
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013166:	b480      	push	{r7}
 8013168:	b083      	sub	sp, #12
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	4618      	mov	r0, r3
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr

0801317c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>:
      struct _Fwd_list_impl
 801317c:	b580      	push	{r7, lr}
 801317e:	b082      	sub	sp, #8
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7ff ffee 	bl	8013166 <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4618      	mov	r0, r3
 801318e:	3708      	adds	r7, #8
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>:
      _Fwd_list_base(_Node_alloc_type&& __a)
 8013194:	b590      	push	{r4, r7, lr}
 8013196:	b083      	sub	sp, #12
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a)) { }
 801319e:	687c      	ldr	r4, [r7, #4]
 80131a0:	6838      	ldr	r0, [r7, #0]
 80131a2:	f000 fcaa 	bl	8013afa <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 80131a6:	4603      	mov	r3, r0
 80131a8:	4619      	mov	r1, r3
 80131aa:	4620      	mov	r0, r4
 80131ac:	f000 fcbe 	bl	8013b2c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	4618      	mov	r0, r3
 80131b4:	370c      	adds	r7, #12
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd90      	pop	{r4, r7, pc}

080131ba <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>:
      ~_Fwd_list_base()
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b082      	sub	sp, #8
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
      { _M_erase_after(&_M_impl._M_head, nullptr); }
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2200      	movs	r2, #0
 80131c6:	4619      	mov	r1, r3
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 fcc8 	bl	8013b5e <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7ff ffd3 	bl	801317c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	4618      	mov	r0, r3
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <_ZNKSt16initializer_listIhE5beginEv>:
      begin() const noexcept { return _M_array; }
 80131e0:	b480      	push	{r7}
 80131e2:	b083      	sub	sp, #12
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4618      	mov	r0, r3
 80131ee:	370c      	adds	r7, #12
 80131f0:	46bd      	mov	sp, r7
 80131f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f6:	4770      	bx	lr

080131f8 <_ZNKSt16initializer_listIhE3endEv>:
      end() const noexcept { return begin() + size(); }
 80131f8:	b590      	push	{r4, r7, lr}
 80131fa:	b083      	sub	sp, #12
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7ff ffed 	bl	80131e0 <_ZNKSt16initializer_listIhE5beginEv>
 8013206:	4604      	mov	r4, r0
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 fcd3 	bl	8013bb4 <_ZNKSt16initializer_listIhE4sizeEv>
 801320e:	4603      	mov	r3, r0
 8013210:	4423      	add	r3, r4
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	bd90      	pop	{r4, r7, pc}

0801321a <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>:

  // Called by the range constructor to implement [23.3.4.2]/9
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      forward_list<_Tp, _Alloc>::
 801321a:	b580      	push	{r7, lr}
 801321c:	b086      	sub	sp, #24
 801321e:	af00      	add	r7, sp, #0
 8013220:	60f8      	str	r0, [r7, #12]
 8013222:	60b9      	str	r1, [r7, #8]
 8013224:	607a      	str	r2, [r7, #4]
      _M_range_initialize(_InputIterator __first, _InputIterator __last)
      {
	_Node_base* __to = &this->_M_impl._M_head;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 801322a:	68ba      	ldr	r2, [r7, #8]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	429a      	cmp	r2, r3
 8013230:	d00e      	beq.n	8013250 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x36>
	  {
	    __to->_M_next = this->_M_create_node(*__first);
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	68b9      	ldr	r1, [r7, #8]
 8013236:	4618      	mov	r0, r3
 8013238:	f000 fcd5 	bl	8013be6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 801323c:	4602      	mov	r2, r0
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	601a      	str	r2, [r3, #0]
	    __to = __to->_M_next;
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	3301      	adds	r3, #1
 801324c:	60bb      	str	r3, [r7, #8]
 801324e:	e7ec      	b.n	801322a <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x10>
	  }
      }
 8013250:	bf00      	nop
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f000 fce8 	bl	8013c36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	3708      	adds	r7, #8
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d012      	beq.n	80132a6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8013280:	6838      	ldr	r0, [r7, #0]
 8013282:	f000 fce3 	bl	8013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013286:	4603      	mov	r3, r0
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f7ff fff0 	bl	8013270 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8013290:	6838      	ldr	r0, [r7, #0]
 8013292:	f000 fce7 	bl	8013c64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013296:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8013298:	6839      	ldr	r1, [r7, #0]
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f000 fcee 	bl	8013c7c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80132a4:	e7e9      	b.n	801327a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 80132a6:	bf00      	nop
 80132a8:	3710      	adds	r7, #16
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80132ae:	b480      	push	{r7}
 80132b0:	b083      	sub	sp, #12
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	4618      	mov	r0, r3
 80132bc:	370c      	adds	r7, #12
 80132be:	46bd      	mov	sp, r7
 80132c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c4:	4770      	bx	lr

080132c6 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 80132c6:	b580      	push	{r7, lr}
 80132c8:	b082      	sub	sp, #8
 80132ca:	af00      	add	r7, sp, #0
 80132cc:	6078      	str	r0, [r7, #4]
 80132ce:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	6839      	ldr	r1, [r7, #0]
 80132d4:	4618      	mov	r0, r3
 80132d6:	f000 fce2 	bl	8013c9e <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80132e2:	b480      	push	{r7}
 80132e4:	b083      	sub	sp, #12
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	4618      	mov	r0, r3
 80132ee:	370c      	adds	r7, #12
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr

080132f8 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b084      	sub	sp, #16
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	60b9      	str	r1, [r7, #8]
 8013302:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	6879      	ldr	r1, [r7, #4]
 8013308:	4618      	mov	r0, r3
 801330a:	f000 fcd5 	bl	8013cb8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 801330e:	68b9      	ldr	r1, [r7, #8]
 8013310:	68f8      	ldr	r0, [r7, #12]
 8013312:	f000 fce3 	bl	8013cdc <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	f107 030c 	add.w	r3, r7, #12
 801332e:	4611      	mov	r1, r2
 8013330:	4618      	mov	r0, r3
 8013332:	f000 fcee 	bl	8013d12 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	4618      	mov	r0, r3
 801333a:	3710      	adds	r7, #16
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	1d1a      	adds	r2, r3, #4
 801334c:	f107 030c 	add.w	r3, r7, #12
 8013350:	4611      	mov	r1, r2
 8013352:	4618      	mov	r0, r3
 8013354:	f000 fcdd 	bl	8013d12 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	4618      	mov	r0, r3
 801335c:	3710      	adds	r7, #16
 801335e:	46bd      	mov	sp, r7
 8013360:	bd80      	pop	{r7, pc}

08013362 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8013362:	b580      	push	{r7, lr}
 8013364:	b084      	sub	sp, #16
 8013366:	af00      	add	r7, sp, #0
 8013368:	60f8      	str	r0, [r7, #12]
 801336a:	60b9      	str	r1, [r7, #8]
 801336c:	607a      	str	r2, [r7, #4]
 801336e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	68b9      	ldr	r1, [r7, #8]
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f000 fcdc 	bl	8013d32 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 801337a:	4603      	mov	r3, r0
 801337c:	4618      	mov	r0, r3
 801337e:	3710      	adds	r7, #16
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013384:	b590      	push	{r4, r7, lr}
 8013386:	b085      	sub	sp, #20
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 fce1 	bl	8013d56 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8013394:	4604      	mov	r4, r0
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f000 fce9 	bl	8013d6e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801339c:	4602      	mov	r2, r0
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	4621      	mov	r1, r4
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 fcef 	bl	8013d86 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>
 80133a8:	4603      	mov	r3, r0
 80133aa:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 f825 	bl	80133fc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80133b2:	4603      	mov	r3, r0
 80133b4:	60fb      	str	r3, [r7, #12]
 80133b6:	f107 020c 	add.w	r2, r7, #12
 80133ba:	f107 0308 	add.w	r3, r7, #8
 80133be:	4611      	mov	r1, r2
 80133c0:	4618      	mov	r0, r3
 80133c2:	f000 f82c 	bl	801341e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 80133c6:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d10d      	bne.n	80133e8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x64>
	      || _M_impl._M_key_compare(__k,
 80133cc:	687c      	ldr	r4, [r7, #4]
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 fd09 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80133d6:	4603      	mov	r3, r0
 80133d8:	461a      	mov	r2, r3
 80133da:	6839      	ldr	r1, [r7, #0]
 80133dc:	4620      	mov	r0, r4
 80133de:	f000 f948 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d004      	beq.n	80133f2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f000 f807 	bl	80133fc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80133ee:	4603      	mov	r3, r0
 80133f0:	e000      	b.n	80133f4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x70>
 80133f2:	68bb      	ldr	r3, [r7, #8]
    }
 80133f4:	4618      	mov	r0, r3
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	bd90      	pop	{r4, r7, pc}

080133fc <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	1d1a      	adds	r2, r3, #4
 8013408:	f107 030c 	add.w	r3, r7, #12
 801340c:	4611      	mov	r1, r2
 801340e:	4618      	mov	r0, r3
 8013410:	f000 fcf6 	bl	8013e00 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801341e:	b480      	push	{r7}
 8013420:	b083      	sub	sp, #12
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
 8013426:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	429a      	cmp	r2, r3
 8013432:	bf0c      	ite	eq
 8013434:	2301      	moveq	r3, #1
 8013436:	2300      	movne	r3, #0
 8013438:	b2db      	uxtb	r3, r3
 801343a:	4618      	mov	r0, r3
 801343c:	370c      	adds	r7, #12
 801343e:	46bd      	mov	sp, r7
 8013440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013444:	4770      	bx	lr

08013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>:
      _M_valptr() noexcept
 8013446:	b580      	push	{r7, lr}
 8013448:	b082      	sub	sp, #8
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	3304      	adds	r3, #4
 8013452:	4618      	mov	r0, r3
 8013454:	f000 fce3 	bl	8013e1e <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>
 8013458:	4603      	mov	r3, r0
 801345a:	4618      	mov	r0, r3
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8013462:	b580      	push	{r7, lr}
 8013464:	b082      	sub	sp, #8
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6839      	ldr	r1, [r7, #0]
 8013470:	4618      	mov	r0, r3
 8013472:	f000 fce0 	bl	8013e36 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 8013476:	4603      	mov	r3, r0
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	4618      	mov	r0, r3
 801348c:	f000 fcea 	bl	8013e64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8013490:	4603      	mov	r3, r0
 8013492:	4618      	mov	r0, r3
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}

0801349a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801349a:	b480      	push	{r7}
 801349c:	b083      	sub	sp, #12
 801349e:	af00      	add	r7, sp, #0
 80134a0:	6078      	str	r0, [r7, #4]
 80134a2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681a      	ldr	r2, [r3, #0]
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	bf0c      	ite	eq
 80134b0:	2301      	moveq	r3, #1
 80134b2:	2300      	movne	r3, #0
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	4618      	mov	r0, r3
 80134b8:	370c      	adds	r7, #12
 80134ba:	46bd      	mov	sp, r7
 80134bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c0:	4770      	bx	lr

080134c2 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 80134c2:	b590      	push	{r4, r7, lr}
 80134c4:	b083      	sub	sp, #12
 80134c6:	af00      	add	r7, sp, #0
 80134c8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f000 fcda 	bl	8013e86 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 80134d2:	bf00      	nop
 80134d4:	4620      	mov	r0, r4
 80134d6:	370c      	adds	r7, #12
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd90      	pop	{r4, r7, pc}

080134dc <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80134dc:	b580      	push	{r7, lr}
 80134de:	b082      	sub	sp, #8
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	4618      	mov	r0, r3
 80134ea:	f000 fcd7 	bl	8013e9c <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 80134ee:	4603      	mov	r3, r0
 80134f0:	4618      	mov	r0, r3
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}

080134f8 <_ZNKSt4lessIhEclERKhS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	60b9      	str	r1, [r7, #8]
 8013502:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	781a      	ldrb	r2, [r3, #0]
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	bf34      	ite	cc
 8013510:	2301      	movcc	r3, #1
 8013512:	2300      	movcs	r3, #0
 8013514:	b2db      	uxtb	r3, r3
 8013516:	4618      	mov	r0, r3
 8013518:	3714      	adds	r7, #20
 801351a:	46bd      	mov	sp, r7
 801351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013520:	4770      	bx	lr

08013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8013522:	b580      	push	{r7, lr}
 8013524:	b082      	sub	sp, #8
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6839      	ldr	r1, [r7, #0]
 8013530:	4618      	mov	r0, r3
 8013532:	f000 fcc1 	bl	8013eb8 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4618      	mov	r0, r3
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	601a      	str	r2, [r3, #0]
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	4618      	mov	r0, r3
 8013556:	370c      	adds	r7, #12
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013560:	b5b0      	push	{r4, r5, r7, lr}
 8013562:	b088      	sub	sp, #32
 8013564:	af00      	add	r7, sp, #0
 8013566:	60f8      	str	r0, [r7, #12]
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	607a      	str	r2, [r7, #4]
 801356c:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f000 fcb1 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013574:	4604      	mov	r4, r0
 8013576:	6838      	ldr	r0, [r7, #0]
 8013578:	f000 fcb8 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801357c:	4605      	mov	r5, r0
 801357e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013580:	f000 fcbf 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013584:	4603      	mov	r3, r0
 8013586:	462a      	mov	r2, r5
 8013588:	4621      	mov	r1, r4
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f000 fcc4 	bl	8013f18 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8013590:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8013592:	69f8      	ldr	r0, [r7, #28]
 8013594:	f000 fe06 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013598:	4603      	mov	r3, r0
 801359a:	f107 0010 	add.w	r0, r7, #16
 801359e:	68ba      	ldr	r2, [r7, #8]
 80135a0:	68f9      	ldr	r1, [r7, #12]
 80135a2:	f000 fcdc 	bl	8013f5e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d007      	beq.n	80135bc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80135ac:	6939      	ldr	r1, [r7, #16]
 80135ae:	697a      	ldr	r2, [r7, #20]
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	68f8      	ldr	r0, [r7, #12]
 80135b4:	f000 fe09 	bl	80141ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80135b8:	4603      	mov	r3, r0
 80135ba:	e00b      	b.n	80135d4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 80135bc:	69f9      	ldr	r1, [r7, #28]
 80135be:	68f8      	ldr	r0, [r7, #12]
 80135c0:	f000 fb5c 	bl	8013c7c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 80135c4:	693a      	ldr	r2, [r7, #16]
 80135c6:	f107 0318 	add.w	r3, r7, #24
 80135ca:	4611      	mov	r1, r2
 80135cc:	4618      	mov	r0, r3
 80135ce:	f000 fe39 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80135d2:	69bb      	ldr	r3, [r7, #24]
      }
 80135d4:	4618      	mov	r0, r3
 80135d6:	3720      	adds	r7, #32
 80135d8:	46bd      	mov	sp, r7
 80135da:	bdb0      	pop	{r4, r5, r7, pc}

080135dc <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6839      	ldr	r1, [r7, #0]
 80135ea:	4618      	mov	r0, r3
 80135ec:	f000 fe39 	bl	8014262 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>
 80135f0:	4603      	mov	r3, r0
 80135f2:	4618      	mov	r0, r3
 80135f4:	3708      	adds	r7, #8
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}

080135fa <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80135fa:	b580      	push	{r7, lr}
 80135fc:	b082      	sub	sp, #8
 80135fe:	af00      	add	r7, sp, #0
 8013600:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4618      	mov	r0, r3
 8013606:	f000 fe43 	bl	8014290 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 801360a:	4603      	mov	r3, r0
 801360c:	4618      	mov	r0, r3
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8013614:	b480      	push	{r7}
 8013616:	b083      	sub	sp, #12
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	429a      	cmp	r2, r3
 8013628:	bf0c      	ite	eq
 801362a:	2301      	moveq	r3, #1
 801362c:	2300      	movne	r3, #0
 801362e:	b2db      	uxtb	r3, r3
 8013630:	4618      	mov	r0, r3
 8013632:	370c      	adds	r7, #12
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr

0801363c <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>:
      key_comp() const
 801363c:	b590      	push	{r4, r7, lr}
 801363e:	b083      	sub	sp, #12
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	4618      	mov	r0, r3
 8013648:	f000 fe33 	bl	80142b2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 801364c:	bf00      	nop
 801364e:	4620      	mov	r0, r4
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	bd90      	pop	{r4, r7, pc}

08013656 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013656:	b580      	push	{r7, lr}
 8013658:	b082      	sub	sp, #8
 801365a:	af00      	add	r7, sp, #0
 801365c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	4618      	mov	r0, r3
 8013664:	f000 fe30 	bl	80142c8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8013668:	4603      	mov	r3, r0
 801366a:	4618      	mov	r0, r3
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}

08013672 <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8013672:	b580      	push	{r7, lr}
 8013674:	b084      	sub	sp, #16
 8013676:	af00      	add	r7, sp, #0
 8013678:	60f8      	str	r0, [r7, #12]
 801367a:	60b9      	str	r1, [r7, #8]
 801367c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 801367e:	6879      	ldr	r1, [r7, #4]
 8013680:	68b8      	ldr	r0, [r7, #8]
 8013682:	f7fe fe97 	bl	80123b4 <_ZNK3PinltERKS_>
 8013686:	4603      	mov	r3, r0
 8013688:	4618      	mov	r0, r3
 801368a:	3710      	adds	r7, #16
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>:
	tuple(const _Elements&... __elements)
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6839      	ldr	r1, [r7, #0]
 801369e:	4618      	mov	r0, r3
 80136a0:	f000 fe20 	bl	80142e4 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	4618      	mov	r0, r3
 80136a8:	3708      	adds	r7, #8
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}

080136ae <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80136ae:	b480      	push	{r7}
 80136b0:	b083      	sub	sp, #12
 80136b2:	af00      	add	r7, sp, #0
 80136b4:	6078      	str	r0, [r7, #4]
 80136b6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	601a      	str	r2, [r3, #0]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	4618      	mov	r0, r3
 80136c4:	370c      	adds	r7, #12
 80136c6:	46bd      	mov	sp, r7
 80136c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136cc:	4770      	bx	lr

080136ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80136ce:	b5b0      	push	{r4, r5, r7, lr}
 80136d0:	b088      	sub	sp, #32
 80136d2:	af00      	add	r7, sp, #0
 80136d4:	60f8      	str	r0, [r7, #12]
 80136d6:	60b9      	str	r1, [r7, #8]
 80136d8:	607a      	str	r2, [r7, #4]
 80136da:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f000 fbfa 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80136e2:	4604      	mov	r4, r0
 80136e4:	6838      	ldr	r0, [r7, #0]
 80136e6:	f000 fe0c 	bl	8014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80136ea:	4605      	mov	r5, r0
 80136ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136ee:	f000 fc08 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80136f2:	4603      	mov	r3, r0
 80136f4:	462a      	mov	r2, r5
 80136f6:	4621      	mov	r1, r4
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f000 fe0d 	bl	8014318 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80136fe:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8013700:	69f8      	ldr	r0, [r7, #28]
 8013702:	f000 ff4f 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8013706:	4603      	mov	r3, r0
 8013708:	f107 0010 	add.w	r0, r7, #16
 801370c:	68ba      	ldr	r2, [r7, #8]
 801370e:	68f9      	ldr	r1, [r7, #12]
 8013710:	f000 fe25 	bl	801435e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
	    if (__res.second)
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d007      	beq.n	801372a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801371a:	6939      	ldr	r1, [r7, #16]
 801371c:	697a      	ldr	r2, [r7, #20]
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	68f8      	ldr	r0, [r7, #12]
 8013722:	f000 ff52 	bl	80145ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8013726:	4603      	mov	r3, r0
 8013728:	e00b      	b.n	8013742 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 801372a:	69f9      	ldr	r1, [r7, #28]
 801372c:	68f8      	ldr	r0, [r7, #12]
 801372e:	f000 ff89 	bl	8014644 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8013732:	693a      	ldr	r2, [r7, #16]
 8013734:	f107 0318 	add.w	r3, r7, #24
 8013738:	4611      	mov	r1, r2
 801373a:	4618      	mov	r0, r3
 801373c:	f000 ff93 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013740:	69bb      	ldr	r3, [r7, #24]
      }
 8013742:	4618      	mov	r0, r3
 8013744:	3720      	adds	r7, #32
 8013746:	46bd      	mov	sp, r7
 8013748:	bdb0      	pop	{r4, r5, r7, pc}

0801374a <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>:
    _Fwd_list_base<_Tp, _Alloc>::
 801374a:	b590      	push	{r4, r7, lr}
 801374c:	b085      	sub	sp, #20
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	6039      	str	r1, [r7, #0]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	60fb      	str	r3, [r7, #12]
      __pos->_M_next = __curr->_M_next;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	601a      	str	r2, [r3, #0]
      _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 ff8e 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8013768:	4604      	mov	r4, r0
 801376a:	68f8      	ldr	r0, [r7, #12]
 801376c:	f7ff fe6b 	bl	8013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8013770:	4603      	mov	r3, r0
 8013772:	4619      	mov	r1, r3
 8013774:	4620      	mov	r0, r4
 8013776:	f000 ff90 	bl	801469a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
      _M_put_node(__curr);
 801377a:	68f9      	ldr	r1, [r7, #12]
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 ffa4 	bl	80146ca <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      return __pos->_M_next;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	681b      	ldr	r3, [r3, #0]
    }
 8013786:	4618      	mov	r0, r3
 8013788:	3714      	adds	r7, #20
 801378a:	46bd      	mov	sp, r7
 801378c:	bd90      	pop	{r4, r7, pc}

0801378e <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801378e:	b590      	push	{r4, r7, lr}
 8013790:	b083      	sub	sp, #12
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013798:	6838      	ldr	r0, [r7, #0]
 801379a:	f000 ffac 	bl	80146f6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801379e:	4603      	mov	r3, r0
 80137a0:	681c      	ldr	r4, [r3, #0]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4619      	mov	r1, r3
 80137a6:	2004      	movs	r0, #4
 80137a8:	f7ed fe56 	bl	8001458 <_ZnwjPv>
 80137ac:	4603      	mov	r3, r0
 80137ae:	601c      	str	r4, [r3, #0]
 80137b0:	4618      	mov	r0, r3
 80137b2:	370c      	adds	r7, #12
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd90      	pop	{r4, r7, pc}

080137b8 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 ff96 	bl	80146f6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80137ca:	4603      	mov	r3, r0
 80137cc:	4619      	mov	r1, r3
 80137ce:	68b8      	ldr	r0, [r7, #8]
 80137d0:	f7ff ffdd 	bl	801378e <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80137d4:	bf00      	nop
 80137d6:	3710      	adds	r7, #16
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80137dc:	b5b0      	push	{r4, r5, r7, lr}
 80137de:	b08c      	sub	sp, #48	; 0x30
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80137e8:	4a39      	ldr	r2, [pc, #228]	; (80138d0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xf4>)
 80137ea:	2101      	movs	r1, #1
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 ff8d 	bl	801470c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 80137f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8013800:	68f8      	ldr	r0, [r7, #12]
 8013802:	f7ff fc37 	bl	8013074 <_ZNSt6vectorImSaImEE5beginEv>
 8013806:	4603      	mov	r3, r0
 8013808:	617b      	str	r3, [r7, #20]
 801380a:	f107 0214 	add.w	r2, r7, #20
 801380e:	f107 0308 	add.w	r3, r7, #8
 8013812:	4611      	mov	r1, r2
 8013814:	4618      	mov	r0, r3
 8013816:	f000 ffc0 	bl	801479a <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801381a:	4603      	mov	r3, r0
 801381c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013822:	4618      	mov	r0, r3
 8013824:	f000 ffce 	bl	80147c4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8013828:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801382a:	69fb      	ldr	r3, [r7, #28]
 801382c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 801382e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8013830:	6a3b      	ldr	r3, [r7, #32]
 8013832:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8013834:	69fa      	ldr	r2, [r7, #28]
 8013836:	18d5      	adds	r5, r2, r3
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f000 ff5c 	bl	80146f6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801383e:	4603      	mov	r3, r0
 8013840:	461a      	mov	r2, r3
 8013842:	4629      	mov	r1, r5
 8013844:	4620      	mov	r0, r4
 8013846:	f7ff ffb7 	bl	80137b8 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 801384a:	2300      	movs	r3, #0
 801384c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801384e:	f107 0308 	add.w	r3, r7, #8
 8013852:	4618      	mov	r0, r3
 8013854:	f7ff f800 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8013858:	4603      	mov	r3, r0
 801385a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	4618      	mov	r0, r3
 8013860:	f7ff fc50 	bl	8013104 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8013864:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8013866:	69fa      	ldr	r2, [r7, #28]
 8013868:	4621      	mov	r1, r4
 801386a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801386c:	f000 ffbe 	bl	80147ec <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8013870:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	3304      	adds	r3, #4
 8013876:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013878:	f107 0308 	add.w	r3, r7, #8
 801387c:	4618      	mov	r0, r3
 801387e:	f7fe ffeb 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8013882:	4603      	mov	r3, r0
 8013884:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	4618      	mov	r0, r3
 801388a:	f7ff fc3b 	bl	8013104 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801388e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8013890:	69ba      	ldr	r2, [r7, #24]
 8013892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013894:	4620      	mov	r0, r4
 8013896:	f000 ffa9 	bl	80147ec <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 801389a:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 801389c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	689a      	ldr	r2, [r3, #8]
 80138a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80138a8:	461a      	mov	r2, r3
 80138aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80138ac:	f7ff fc17 	bl	80130de <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	69fa      	ldr	r2, [r7, #28]
 80138b4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	69ba      	ldr	r2, [r7, #24]
 80138ba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80138bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138be:	009b      	lsls	r3, r3, #2
 80138c0:	69fa      	ldr	r2, [r7, #28]
 80138c2:	441a      	add	r2, r3
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	609a      	str	r2, [r3, #8]
    }
 80138c8:	bf00      	nop
 80138ca:	3730      	adds	r7, #48	; 0x30
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bdb0      	pop	{r4, r5, r7, pc}
 80138d0:	0802680c 	.word	0x0802680c

080138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	4618      	mov	r0, r3
 80138e0:	370c      	adds	r7, #12
 80138e2:	46bd      	mov	sp, r7
 80138e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e8:	4770      	bx	lr

080138ea <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80138ea:	b590      	push	{r4, r7, lr}
 80138ec:	b085      	sub	sp, #20
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	60f8      	str	r0, [r7, #12]
 80138f2:	7239      	strb	r1, [r7, #8]
 80138f4:	607a      	str	r2, [r7, #4]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	4621      	mov	r1, r4
 80138fc:	4618      	mov	r0, r3
 80138fe:	f000 ff9b 	bl	8014838 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	4618      	mov	r0, r3
 8013906:	3714      	adds	r7, #20
 8013908:	46bd      	mov	sp, r7
 801390a:	bd90      	pop	{r4, r7, pc}

0801390c <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801390c:	b5b0      	push	{r4, r5, r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	7239      	strb	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8013918:	68fc      	ldr	r4, [r7, #12]
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff ffda 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8013920:	4603      	mov	r3, r0
 8013922:	461a      	mov	r2, r3
 8013924:	4629      	mov	r1, r5
 8013926:	4620      	mov	r0, r4
 8013928:	f7ff ffdf 	bl	80138ea <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bdb0      	pop	{r4, r5, r7, pc}

08013936 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013936:	b590      	push	{r4, r7, lr}
 8013938:	b085      	sub	sp, #20
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
 801393e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f000 ff91 	bl	8014868 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8013946:	4604      	mov	r4, r0
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f000 ff99 	bl	8014880 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801394e:	4602      	mov	r2, r0
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	4621      	mov	r1, r4
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 ff9f 	bl	8014898 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 801395a:	4603      	mov	r3, r0
 801395c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 f825 	bl	80139ae <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8013964:	4603      	mov	r3, r0
 8013966:	60fb      	str	r3, [r7, #12]
 8013968:	f107 020c 	add.w	r2, r7, #12
 801396c:	f107 0308 	add.w	r3, r7, #8
 8013970:	4611      	mov	r1, r2
 8013972:	4618      	mov	r0, r3
 8013974:	f000 f82c 	bl	80139d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 8013978:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801397a:	2b00      	cmp	r3, #0
 801397c:	d10d      	bne.n	801399a <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801397e:	687c      	ldr	r4, [r7, #4]
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	4618      	mov	r0, r3
 8013984:	f000 ffb9 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013988:	4603      	mov	r3, r0
 801398a:	461a      	mov	r2, r3
 801398c:	6839      	ldr	r1, [r7, #0]
 801398e:	4620      	mov	r0, r4
 8013990:	f7ff fdb2 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d004      	beq.n	80139a4 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f000 f807 	bl	80139ae <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 80139a0:	4603      	mov	r3, r0
 80139a2:	e000      	b.n	80139a6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 80139a4:	68bb      	ldr	r3, [r7, #8]
    }
 80139a6:	4618      	mov	r0, r3
 80139a8:	3714      	adds	r7, #20
 80139aa:	46bd      	mov	sp, r7
 80139ac:	bd90      	pop	{r4, r7, pc}

080139ae <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80139ae:	b580      	push	{r7, lr}
 80139b0:	b084      	sub	sp, #16
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	1d1a      	adds	r2, r3, #4
 80139ba:	f107 030c 	add.w	r3, r7, #12
 80139be:	4611      	mov	r1, r2
 80139c0:	4618      	mov	r0, r3
 80139c2:	f000 ffa6 	bl	8014912 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	4618      	mov	r0, r3
 80139ca:	3710      	adds	r7, #16
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681a      	ldr	r2, [r3, #0]
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	bf0c      	ite	eq
 80139e6:	2301      	moveq	r3, #1
 80139e8:	2300      	movne	r3, #0
 80139ea:	b2db      	uxtb	r3, r3
 80139ec:	4618      	mov	r0, r3
 80139ee:	370c      	adds	r7, #12
 80139f0:	46bd      	mov	sp, r7
 80139f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f6:	4770      	bx	lr

080139f8 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	4618      	mov	r0, r3
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr

08013a0e <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8013a0e:	b590      	push	{r4, r7, lr}
 8013a10:	b085      	sub	sp, #20
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	60f8      	str	r0, [r7, #12]
 8013a16:	7239      	strb	r1, [r7, #8]
 8013a18:	607a      	str	r2, [r7, #4]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	687a      	ldr	r2, [r7, #4]
 8013a1e:	4621      	mov	r1, r4
 8013a20:	4618      	mov	r0, r3
 8013a22:	f000 ff9b 	bl	801495c <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3714      	adds	r7, #20
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd90      	pop	{r4, r7, pc}

08013a30 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8013a30:	b5b0      	push	{r4, r5, r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	7239      	strb	r1, [r7, #8]
 8013a3a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8013a3c:	68fc      	ldr	r4, [r7, #12]
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f7ff ffda 	bl	80139f8 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8013a44:	4603      	mov	r3, r0
 8013a46:	461a      	mov	r2, r3
 8013a48:	4629      	mov	r1, r5
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f7ff ffdf 	bl	8013a0e <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	4618      	mov	r0, r3
 8013a54:	3710      	adds	r7, #16
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bdb0      	pop	{r4, r5, r7, pc}

08013a5a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013a5a:	b480      	push	{r7}
 8013a5c:	b083      	sub	sp, #12
 8013a5e:	af00      	add	r7, sp, #0
 8013a60:	6078      	str	r0, [r7, #4]
 8013a62:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	370c      	adds	r7, #12
 8013a72:	46bd      	mov	sp, r7
 8013a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a78:	4770      	bx	lr

08013a7a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013a7a:	b580      	push	{r7, lr}
 8013a7c:	b088      	sub	sp, #32
 8013a7e:	af00      	add	r7, sp, #0
 8013a80:	60f8      	str	r0, [r7, #12]
 8013a82:	60b9      	str	r1, [r7, #8]
 8013a84:	607a      	str	r2, [r7, #4]
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	61fb      	str	r3, [r7, #28]
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	61bb      	str	r3, [r7, #24]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8013a92:	f7ed fcd9 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8013a96:	4603      	mov	r3, r0
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d003      	beq.n	8013aa4 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 8013a9c:	69b8      	ldr	r0, [r7, #24]
 8013a9e:	f012 faff 	bl	80260a0 <_ZdlPv>
	    return;
 8013aa2:	e005      	b.n	8013ab0 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8013aa4:	697a      	ldr	r2, [r7, #20]
 8013aa6:	69b9      	ldr	r1, [r7, #24]
 8013aa8:	69f8      	ldr	r0, [r7, #28]
 8013aaa:	f001 fc86 	bl	80153ba <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 8013aae:	bf00      	nop
 8013ab0:	bf00      	nop
 8013ab2:	3720      	adds	r7, #32
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8013ac2:	f7ed fcc1 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d004      	beq.n	8013ad6 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8013acc:	6839      	ldr	r1, [r7, #0]
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f000 ff5c 	bl	801498c <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 8013ad4:	e003      	b.n	8013ade <_ZSt8_DestroyIPmEvT_S1_+0x26>
	__destroy(__first, __last);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 ff6f 	bl	80149bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8013ade:	3708      	adds	r7, #8
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>:
 8013ae4:	b480      	push	{r7}
 8013ae6:	b083      	sub	sp, #12
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	4618      	mov	r0, r3
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8013afa:	b480      	push	{r7}
 8013afc:	b083      	sub	sp, #12
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	4618      	mov	r0, r3
 8013b06:	370c      	adds	r7, #12
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr

08013b10 <_ZNSt19_Fwd_list_node_baseC1Ev>:
    _Fwd_list_node_base() = default;
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	4618      	mov	r0, r3
 8013b22:	370c      	adds	r7, #12
 8013b24:	46bd      	mov	sp, r7
 8013b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b2a:	4770      	bx	lr

08013b2c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>:
	_Fwd_list_impl(_Node_alloc_type&& __a)
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a)), _M_head()
 8013b36:	6838      	ldr	r0, [r7, #0]
 8013b38:	f7ff ffdf 	bl	8013afa <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	4619      	mov	r1, r3
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 ff46 	bl	80149d2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	601a      	str	r2, [r3, #0]
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff ffde 	bl	8013b10 <_ZNSt19_Fwd_list_node_baseC1Ev>
	{ }
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	4618      	mov	r0, r3
 8013b58:	3708      	adds	r7, #8
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	bd80      	pop	{r7, pc}

08013b5e <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>:
    _Fwd_list_base<_Tp, _Alloc>::
 8013b5e:	b590      	push	{r4, r7, lr}
 8013b60:	b087      	sub	sp, #28
 8013b62:	af00      	add	r7, sp, #0
 8013b64:	60f8      	str	r0, [r7, #12]
 8013b66:	60b9      	str	r1, [r7, #8]
 8013b68:	607a      	str	r2, [r7, #4]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	617b      	str	r3, [r7, #20]
      while (__curr != __last)
 8013b70:	697a      	ldr	r2, [r7, #20]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d015      	beq.n	8013ba4 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x46>
	  _Node* __temp = __curr;
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	613b      	str	r3, [r7, #16]
	  __curr = static_cast<_Node*>(__curr->_M_next);
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	617b      	str	r3, [r7, #20]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8013b82:	68f8      	ldr	r0, [r7, #12]
 8013b84:	f000 fd7e 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8013b88:	4604      	mov	r4, r0
 8013b8a:	6938      	ldr	r0, [r7, #16]
 8013b8c:	f7ff fc5b 	bl	8013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8013b90:	4603      	mov	r3, r0
 8013b92:	4619      	mov	r1, r3
 8013b94:	4620      	mov	r0, r4
 8013b96:	f000 fd80 	bl	801469a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__temp);
 8013b9a:	6939      	ldr	r1, [r7, #16]
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f000 fd94 	bl	80146ca <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      while (__curr != __last)
 8013ba2:	e7e5      	b.n	8013b70 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x12>
      __pos->_M_next = __last;
 8013ba4:	68bb      	ldr	r3, [r7, #8]
 8013ba6:	687a      	ldr	r2, [r7, #4]
 8013ba8:	601a      	str	r2, [r3, #0]
      return __last;
 8013baa:	687b      	ldr	r3, [r7, #4]
    }
 8013bac:	4618      	mov	r0, r3
 8013bae:	371c      	adds	r7, #28
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd90      	pop	{r4, r7, pc}

08013bb4 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <_ZNSt14_Fwd_list_nodeIhEC1Ev>:
      _Fwd_list_node() = default;
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff ff9a 	bl	8013b10 <_ZNSt19_Fwd_list_node_baseC1Ev>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	4618      	mov	r0, r3
 8013be0:	3708      	adds	r7, #8
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 8013be6:	b5b0      	push	{r4, r5, r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
 8013bee:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 8013bf0:	6878      	ldr	r0, [r7, #4]
 8013bf2:	f000 fefc 	bl	80149ee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 8013bf6:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	2008      	movs	r0, #8
 8013bfe:	f7ed fc2b 	bl	8001458 <_ZnwjPv>
 8013c02:	4603      	mov	r3, r0
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff ffe1 	bl	8013bcc <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 fd3a 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8013c10:	4604      	mov	r4, r0
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f7ff fc17 	bl	8013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8013c18:	4605      	mov	r5, r0
 8013c1a:	6838      	ldr	r0, [r7, #0]
 8013c1c:	f000 fefc 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8013c20:	4603      	mov	r3, r0
 8013c22:	461a      	mov	r2, r3
 8013c24:	4629      	mov	r1, r5
 8013c26:	4620      	mov	r0, r4
 8013c28:	f000 ff17 	bl	8014a5a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>
	  return __node;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bdb0      	pop	{r4, r5, r7, pc}

08013c36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
 8013c36:	b480      	push	{r7}
 8013c38:	b083      	sub	sp, #12
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	4618      	mov	r0, r3
 8013c42:	370c      	adds	r7, #12
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	370c      	adds	r7, #12
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	689b      	ldr	r3, [r3, #8]
 8013c70:	4618      	mov	r0, r3
 8013c72:	370c      	adds	r7, #12
 8013c74:	46bd      	mov	sp, r7
 8013c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7a:	4770      	bx	lr

08013c7c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8013c86:	6839      	ldr	r1, [r7, #0]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fef8 	bl	8014a7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8013c8e:	6839      	ldr	r1, [r7, #0]
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f000 ff09 	bl	8014aa8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8013c96:	bf00      	nop
 8013c98:	3708      	adds	r7, #8
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bd80      	pop	{r7, pc}

08013c9e <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 8013c9e:	b580      	push	{r7, lr}
 8013ca0:	b082      	sub	sp, #8
 8013ca2:	af00      	add	r7, sp, #0
 8013ca4:	6078      	str	r0, [r7, #4]
 8013ca6:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8013ca8:	6839      	ldr	r1, [r7, #0]
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f000 ff0e 	bl	8014acc <_ZNSaImEC1ERKS_>
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8013cc2:	6839      	ldr	r1, [r7, #0]
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f000 ff01 	bl	8014acc <_ZNSaImEC1ERKS_>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7ff f9f2 	bl	80130b6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8013ce6:	6839      	ldr	r1, [r7, #0]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 fd6b 	bl	80147c4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8013cee:	4602      	mov	r2, r0
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	441a      	add	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	609a      	str	r2, [r3, #8]
      }
 8013d0a:	bf00      	nop
 8013d0c:	3708      	adds	r7, #8
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}

08013d12 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013d12:	b480      	push	{r7}
 8013d14:	b083      	sub	sp, #12
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
 8013d1a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	601a      	str	r2, [r3, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	4618      	mov	r0, r3
 8013d28:	370c      	adds	r7, #12
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b086      	sub	sp, #24
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	60f8      	str	r0, [r7, #12]
 8013d3a:	60b9      	str	r1, [r7, #8]
 8013d3c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	68b9      	ldr	r1, [r7, #8]
 8013d46:	68f8      	ldr	r0, [r7, #12]
 8013d48:	f000 fece 	bl	8014ae8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 8013d4c:	4603      	mov	r3, r0
    }
 8013d4e:	4618      	mov	r0, r3
 8013d50:	3718      	adds	r7, #24
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}

08013d56 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8013d56:	b480      	push	{r7}
 8013d58:	b083      	sub	sp, #12
 8013d5a:	af00      	add	r7, sp, #0
 8013d5c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	689b      	ldr	r3, [r3, #8]
      }
 8013d62:	4618      	mov	r0, r3
 8013d64:	370c      	adds	r7, #12
 8013d66:	46bd      	mov	sp, r7
 8013d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6c:	4770      	bx	lr

08013d6e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8013d6e:	b480      	push	{r7}
 8013d70:	b083      	sub	sp, #12
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	3304      	adds	r3, #4
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	370c      	adds	r7, #12
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr

08013d86 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013d86:	b590      	push	{r4, r7, lr}
 8013d88:	b087      	sub	sp, #28
 8013d8a:	af00      	add	r7, sp, #0
 8013d8c:	60f8      	str	r0, [r7, #12]
 8013d8e:	60b9      	str	r1, [r7, #8]
 8013d90:	607a      	str	r2, [r7, #4]
 8013d92:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d01b      	beq.n	8013dd2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8013d9a:	68fc      	ldr	r4, [r7, #12]
 8013d9c:	68b8      	ldr	r0, [r7, #8]
 8013d9e:	f000 fc01 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8013da2:	4603      	mov	r3, r0
 8013da4:	683a      	ldr	r2, [r7, #0]
 8013da6:	4619      	mov	r1, r3
 8013da8:	4620      	mov	r0, r4
 8013daa:	f7ff fc62 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8013dae:	4603      	mov	r3, r0
 8013db0:	f083 0301 	eor.w	r3, r3, #1
 8013db4:	b2db      	uxtb	r3, r3
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d006      	beq.n	8013dc8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	607b      	str	r3, [r7, #4]
 8013dbe:	68b8      	ldr	r0, [r7, #8]
 8013dc0:	f000 fea2 	bl	8014b08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8013dc4:	60b8      	str	r0, [r7, #8]
 8013dc6:	e7e5      	b.n	8013d94 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8013dc8:	68b8      	ldr	r0, [r7, #8]
 8013dca:	f000 fea9 	bl	8014b20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8013dce:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8013dd0:	e7e0      	b.n	8013d94 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
      return const_iterator(__y);
 8013dd2:	f107 0314 	add.w	r3, r7, #20
 8013dd6:	6879      	ldr	r1, [r7, #4]
 8013dd8:	4618      	mov	r0, r3
 8013dda:	f000 f811 	bl	8013e00 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8013dde:	697b      	ldr	r3, [r7, #20]
    }
 8013de0:	4618      	mov	r0, r3
 8013de2:	371c      	adds	r7, #28
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd90      	pop	{r4, r7, pc}

08013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fbd7 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8013df6:	4603      	mov	r3, r0
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	683a      	ldr	r2, [r7, #0]
 8013e0e:	601a      	str	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	370c      	adds	r7, #12
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr

08013e1e <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8013e1e:	b580      	push	{r7, lr}
 8013e20:	b082      	sub	sp, #8
 8013e22:	af00      	add	r7, sp, #0
 8013e24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 fe86 	bl	8014b38 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3708      	adds	r7, #8
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8013e36:	b590      	push	{r4, r7, lr}
 8013e38:	b083      	sub	sp, #12
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	6078      	str	r0, [r7, #4]
 8013e3e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8013e40:	6878      	ldr	r0, [r7, #4]
 8013e42:	f7ff fa34 	bl	80132ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8013e46:	4604      	mov	r4, r0
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f000 fe80 	bl	8014b4e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8013e4e:	4602      	mov	r2, r0
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	4621      	mov	r1, r4
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f000 fe86 	bl	8014b66 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	370c      	adds	r7, #12
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd90      	pop	{r4, r7, pc}

08013e64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b084      	sub	sp, #16
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	1d1a      	adds	r2, r3, #4
 8013e70:	f107 030c 	add.w	r3, r7, #12
 8013e74:	4611      	mov	r1, r2
 8013e76:	4618      	mov	r0, r3
 8013e78:	f000 f9e4 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}

08013e86 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 8013e86:	b480      	push	{r7}
 8013e88:	b083      	sub	sp, #12
 8013e8a:	af00      	add	r7, sp, #0
 8013e8c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8013e8e:	bf00      	nop
 8013e90:	4618      	mov	r0, r3
 8013e92:	370c      	adds	r7, #12
 8013e94:	46bd      	mov	sp, r7
 8013e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9a:	4770      	bx	lr

08013e9c <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b082      	sub	sp, #8
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	3310      	adds	r3, #16
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f000 fe8d 	bl	8014bc8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	4618      	mov	r0, r3
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}

08013eb8 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6839      	ldr	r1, [r7, #0]
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f000 fe8a 	bl	8014be0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013ed6:	b480      	push	{r7}
 8013ed8:	b083      	sub	sp, #12
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	370c      	adds	r7, #12
 8013ee4:	46bd      	mov	sp, r7
 8013ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eea:	4770      	bx	lr

08013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013eec:	b480      	push	{r7}
 8013eee:	b083      	sub	sp, #12
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	370c      	adds	r7, #12
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013f02:	b480      	push	{r7}
 8013f04:	b083      	sub	sp, #12
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	370c      	adds	r7, #12
 8013f10:	46bd      	mov	sp, r7
 8013f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f16:	4770      	bx	lr

08013f18 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8013f18:	b5b0      	push	{r4, r5, r7, lr}
 8013f1a:	b088      	sub	sp, #32
 8013f1c:	af02      	add	r7, sp, #8
 8013f1e:	60f8      	str	r0, [r7, #12]
 8013f20:	60b9      	str	r1, [r7, #8]
 8013f22:	607a      	str	r2, [r7, #4]
 8013f24:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8013f26:	68f8      	ldr	r0, [r7, #12]
 8013f28:	f000 fe69 	bl	8014bfe <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 8013f2c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8013f2e:	68b8      	ldr	r0, [r7, #8]
 8013f30:	f7ff ffd1 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013f34:	4604      	mov	r4, r0
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff ffd8 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013f3c:	4605      	mov	r5, r0
 8013f3e:	6838      	ldr	r0, [r7, #0]
 8013f40:	f7ff ffdf 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013f44:	4603      	mov	r3, r0
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	462b      	mov	r3, r5
 8013f4a:	4622      	mov	r2, r4
 8013f4c:	6979      	ldr	r1, [r7, #20]
 8013f4e:	68f8      	ldr	r0, [r7, #12]
 8013f50:	f000 fe66 	bl	8014c20 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8013f54:	697b      	ldr	r3, [r7, #20]
	}
 8013f56:	4618      	mov	r0, r3
 8013f58:	3718      	adds	r7, #24
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bdb0      	pop	{r4, r5, r7, pc}

08013f5e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013f5e:	b590      	push	{r4, r7, lr}
 8013f60:	b08d      	sub	sp, #52	; 0x34
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	60f8      	str	r0, [r7, #12]
 8013f66:	60b9      	str	r1, [r7, #8]
 8013f68:	607a      	str	r2, [r7, #4]
 8013f6a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8013f6c:	1d3b      	adds	r3, r7, #4
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f000 fe83 	bl	8014c7a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>
 8013f74:	4603      	mov	r3, r0
 8013f76:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8013f78:	69bc      	ldr	r4, [r7, #24]
 8013f7a:	68b8      	ldr	r0, [r7, #8]
 8013f7c:	f000 fde7 	bl	8014b4e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8013f80:	4603      	mov	r3, r0
 8013f82:	429c      	cmp	r4, r3
 8013f84:	bf0c      	ite	eq
 8013f86:	2301      	moveq	r3, #1
 8013f88:	2300      	movne	r3, #0
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d030      	beq.n	8013ff2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8013f90:	68b8      	ldr	r0, [r7, #8]
 8013f92:	f000 fe83 	bl	8014c9c <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 8013f96:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d013      	beq.n	8013fc4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8013f9c:	68bc      	ldr	r4, [r7, #8]
 8013f9e:	68b8      	ldr	r0, [r7, #8]
 8013fa0:	f000 fe88 	bl	8014cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f000 fca6 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f7ff fa9f 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d001      	beq.n	8013fc4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e000      	b.n	8013fc6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8013fc4:	2300      	movs	r3, #0
	  if (size() > 0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d00c      	beq.n	8013fe4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8013fca:	2300      	movs	r3, #0
 8013fcc:	61fb      	str	r3, [r7, #28]
 8013fce:	68b8      	ldr	r0, [r7, #8]
 8013fd0:	f000 fe70 	bl	8014cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	f107 031c 	add.w	r3, r7, #28
 8013fda:	4619      	mov	r1, r3
 8013fdc:	68f8      	ldr	r0, [r7, #12]
 8013fde:	f000 fe75 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8013fe2:	e0db      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	683a      	ldr	r2, [r7, #0]
 8013fe8:	68b9      	ldr	r1, [r7, #8]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f000 fe84 	bl	8014cf8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8013ff0:	e0d4      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8013ff2:	68bc      	ldr	r4, [r7, #8]
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f000 fc7f 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	461a      	mov	r2, r3
 8014000:	6839      	ldr	r1, [r7, #0]
 8014002:	4620      	mov	r0, r4
 8014004:	f7ff fa78 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d057      	beq.n	80140be <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8014012:	69bc      	ldr	r4, [r7, #24]
 8014014:	68b8      	ldr	r0, [r7, #8]
 8014016:	f000 fef4 	bl	8014e02 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801401a:	4603      	mov	r3, r0
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	429c      	cmp	r4, r3
 8014020:	bf0c      	ite	eq
 8014022:	2301      	moveq	r3, #1
 8014024:	2300      	movne	r3, #0
 8014026:	b2db      	uxtb	r3, r3
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00d      	beq.n	8014048 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801402c:	68b8      	ldr	r0, [r7, #8]
 801402e:	f000 fee8 	bl	8014e02 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8014032:	4604      	mov	r4, r0
 8014034:	68b8      	ldr	r0, [r7, #8]
 8014036:	f000 fee4 	bl	8014e02 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801403a:	4603      	mov	r3, r0
 801403c:	461a      	mov	r2, r3
 801403e:	4621      	mov	r1, r4
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f000 feea 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014046:	e0a9      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8014048:	68bc      	ldr	r4, [r7, #8]
 801404a:	f107 0314 	add.w	r3, r7, #20
 801404e:	4618      	mov	r0, r3
 8014050:	f000 fefc 	bl	8014e4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
 8014054:	4603      	mov	r3, r0
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	4618      	mov	r0, r3
 801405a:	f000 fc4e 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801405e:	4603      	mov	r3, r0
 8014060:	683a      	ldr	r2, [r7, #0]
 8014062:	4619      	mov	r1, r3
 8014064:	4620      	mov	r0, r4
 8014066:	f7ff fa47 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801406a:	4603      	mov	r3, r0
 801406c:	2b00      	cmp	r3, #0
 801406e:	d01f      	beq.n	80140b0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	4618      	mov	r0, r3
 8014074:	f7ff fdea 	bl	8013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	bf0c      	ite	eq
 801407e:	2301      	moveq	r3, #1
 8014080:	2300      	movne	r3, #0
 8014082:	b2db      	uxtb	r3, r3
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00a      	beq.n	801409e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8014088:	2300      	movs	r3, #0
 801408a:	623b      	str	r3, [r7, #32]
 801408c:	f107 0214 	add.w	r2, r7, #20
 8014090:	f107 0320 	add.w	r3, r7, #32
 8014094:	4619      	mov	r1, r3
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f000 fe18 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801409c:	e07e      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801409e:	f107 0218 	add.w	r2, r7, #24
 80140a2:	f107 0318 	add.w	r3, r7, #24
 80140a6:	4619      	mov	r1, r3
 80140a8:	68f8      	ldr	r0, [r7, #12]
 80140aa:	f000 feb6 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80140ae:	e075      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	68b9      	ldr	r1, [r7, #8]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f000 fe1e 	bl	8014cf8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 80140bc:	e06e      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80140be:	68bc      	ldr	r4, [r7, #8]
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	4618      	mov	r0, r3
 80140c4:	f000 fc19 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80140c8:	4603      	mov	r3, r0
 80140ca:	683a      	ldr	r2, [r7, #0]
 80140cc:	4619      	mov	r1, r3
 80140ce:	4620      	mov	r0, r4
 80140d0:	f7ff fa12 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d056      	beq.n	8014188 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80140de:	69bc      	ldr	r4, [r7, #24]
 80140e0:	68b8      	ldr	r0, [r7, #8]
 80140e2:	f000 fde7 	bl	8014cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80140e6:	4603      	mov	r3, r0
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	429c      	cmp	r4, r3
 80140ec:	bf0c      	ite	eq
 80140ee:	2301      	moveq	r3, #1
 80140f0:	2300      	movne	r3, #0
 80140f2:	b2db      	uxtb	r3, r3
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d00c      	beq.n	8014112 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80140f8:	2300      	movs	r3, #0
 80140fa:	627b      	str	r3, [r7, #36]	; 0x24
 80140fc:	68b8      	ldr	r0, [r7, #8]
 80140fe:	f000 fdd9 	bl	8014cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8014102:	4602      	mov	r2, r0
 8014104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014108:	4619      	mov	r1, r3
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f000 fdde 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014110:	e044      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014112:	68bc      	ldr	r4, [r7, #8]
 8014114:	f107 0310 	add.w	r3, r7, #16
 8014118:	4618      	mov	r0, r3
 801411a:	f000 fea8 	bl	8014e6e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>
 801411e:	4603      	mov	r3, r0
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	4618      	mov	r0, r3
 8014124:	f000 fbe9 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014128:	4603      	mov	r3, r0
 801412a:	461a      	mov	r2, r3
 801412c:	6839      	ldr	r1, [r7, #0]
 801412e:	4620      	mov	r0, r4
 8014130:	f7ff f9e2 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014134:	4603      	mov	r3, r0
 8014136:	2b00      	cmp	r3, #0
 8014138:	d01f      	beq.n	801417a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff fd85 	bl	8013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014142:	4603      	mov	r3, r0
 8014144:	2b00      	cmp	r3, #0
 8014146:	bf0c      	ite	eq
 8014148:	2301      	moveq	r3, #1
 801414a:	2300      	movne	r3, #0
 801414c:	b2db      	uxtb	r3, r3
 801414e:	2b00      	cmp	r3, #0
 8014150:	d00a      	beq.n	8014168 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8014152:	2300      	movs	r3, #0
 8014154:	62bb      	str	r3, [r7, #40]	; 0x28
 8014156:	f107 0218 	add.w	r2, r7, #24
 801415a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801415e:	4619      	mov	r1, r3
 8014160:	68f8      	ldr	r0, [r7, #12]
 8014162:	f000 fdb3 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014166:	e019      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8014168:	f107 0210 	add.w	r2, r7, #16
 801416c:	f107 0310 	add.w	r3, r7, #16
 8014170:	4619      	mov	r1, r3
 8014172:	68f8      	ldr	r0, [r7, #12]
 8014174:	f000 fe51 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014178:	e010      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	68b9      	ldr	r1, [r7, #8]
 8014180:	4618      	mov	r0, r3
 8014182:	f000 fdb9 	bl	8014cf8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8014186:	e009      	b.n	801419c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8014188:	2300      	movs	r3, #0
 801418a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801418c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014190:	f107 0318 	add.w	r3, r7, #24
 8014194:	4619      	mov	r1, r3
 8014196:	68f8      	ldr	r0, [r7, #12]
 8014198:	f000 fe7a 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	3734      	adds	r7, #52	; 0x34
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd90      	pop	{r4, r7, pc}

080141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f000 fe85 	bl	8014ebc <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 80141b2:	4602      	mov	r2, r0
 80141b4:	f107 030c 	add.w	r3, r7, #12
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f000 fe8c 	bl	8014ed8 <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>
 80141c0:	4603      	mov	r3, r0
      }
 80141c2:	4618      	mov	r0, r3
 80141c4:	3710      	adds	r7, #16
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80141ca:	b5b0      	push	{r4, r5, r7, lr}
 80141cc:	b086      	sub	sp, #24
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	60f8      	str	r0, [r7, #12]
 80141d2:	60b9      	str	r1, [r7, #8]
 80141d4:	607a      	str	r2, [r7, #4]
 80141d6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80141d8:	68bb      	ldr	r3, [r7, #8]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d117      	bne.n	801420e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80141de:	68f8      	ldr	r0, [r7, #12]
 80141e0:	f000 fcb5 	bl	8014b4e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 80141e4:	4602      	mov	r2, r0
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d010      	beq.n	801420e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80141ec:	68fc      	ldr	r4, [r7, #12]
 80141ee:	6838      	ldr	r0, [r7, #0]
 80141f0:	f7ff ffd8 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80141f4:	4605      	mov	r5, r0
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f000 fb7f 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80141fc:	4603      	mov	r3, r0
 80141fe:	461a      	mov	r2, r3
 8014200:	4629      	mov	r1, r5
 8014202:	4620      	mov	r0, r4
 8014204:	f7ff f978 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014208:	4603      	mov	r3, r0
 801420a:	2b00      	cmp	r3, #0
 801420c:	d001      	beq.n	8014212 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 801420e:	2301      	movs	r3, #1
 8014210:	e000      	b.n	8014214 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8014212:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8014214:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801421a:	7df8      	ldrb	r0, [r7, #23]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	6839      	ldr	r1, [r7, #0]
 8014220:	f011 ffab 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	695b      	ldr	r3, [r3, #20]
 8014228:	1c5a      	adds	r2, r3, #1
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801422e:	f107 0310 	add.w	r3, r7, #16
 8014232:	6839      	ldr	r1, [r7, #0]
 8014234:	4618      	mov	r0, r3
 8014236:	f000 f805 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801423a:	693b      	ldr	r3, [r7, #16]
    }
 801423c:	4618      	mov	r0, r3
 801423e:	3718      	adds	r7, #24
 8014240:	46bd      	mov	sp, r7
 8014242:	bdb0      	pop	{r4, r5, r7, pc}

08014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014244:	b480      	push	{r7}
 8014246:	b083      	sub	sp, #12
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	601a      	str	r2, [r3, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	4618      	mov	r0, r3
 8014258:	370c      	adds	r7, #12
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 8014262:	b590      	push	{r4, r7, lr}
 8014264:	b083      	sub	sp, #12
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f000 fe3f 	bl	8014ef0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8014272:	4604      	mov	r4, r0
 8014274:	6878      	ldr	r0, [r7, #4]
 8014276:	f000 fe47 	bl	8014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801427a:	4602      	mov	r2, r0
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	4621      	mov	r1, r4
 8014280:	6878      	ldr	r0, [r7, #4]
 8014282:	f000 fe4d 	bl	8014f20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>
 8014286:	4603      	mov	r3, r0
 8014288:	4618      	mov	r0, r3
 801428a:	370c      	adds	r7, #12
 801428c:	46bd      	mov	sp, r7
 801428e:	bd90      	pop	{r4, r7, pc}

08014290 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8014290:	b580      	push	{r7, lr}
 8014292:	b084      	sub	sp, #16
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	1d1a      	adds	r2, r3, #4
 801429c:	f107 030c 	add.w	r3, r7, #12
 80142a0:	4611      	mov	r1, r2
 80142a2:	4618      	mov	r0, r3
 80142a4:	f000 f9df 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	4618      	mov	r0, r3
 80142ac:	3710      	adds	r7, #16
 80142ae:	46bd      	mov	sp, r7
 80142b0:	bd80      	pop	{r7, pc}

080142b2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 80142b2:	b480      	push	{r7}
 80142b4:	b083      	sub	sp, #12
 80142b6:	af00      	add	r7, sp, #0
 80142b8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80142ba:	bf00      	nop
 80142bc:	4618      	mov	r0, r3
 80142be:	370c      	adds	r7, #12
 80142c0:	46bd      	mov	sp, r7
 80142c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c6:	4770      	bx	lr

080142c8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	3310      	adds	r3, #16
 80142d4:	4618      	mov	r0, r3
 80142d6:	f000 fe54 	bl	8014f82 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 80142da:	4603      	mov	r3, r0
 80142dc:	4618      	mov	r0, r3
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>:
      constexpr _Tuple_impl(const _Head& __head)
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
 80142ec:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6839      	ldr	r1, [r7, #0]
 80142f2:	4618      	mov	r0, r3
 80142f4:	f000 fe51 	bl	8014f9a <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	4618      	mov	r0, r3
 80142fc:	3708      	adds	r7, #8
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014302:	b480      	push	{r7}
 8014304:	b083      	sub	sp, #12
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	370c      	adds	r7, #12
 8014310:	46bd      	mov	sp, r7
 8014312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014316:	4770      	bx	lr

08014318 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8014318:	b5b0      	push	{r4, r5, r7, lr}
 801431a:	b088      	sub	sp, #32
 801431c:	af02      	add	r7, sp, #8
 801431e:	60f8      	str	r0, [r7, #12]
 8014320:	60b9      	str	r1, [r7, #8]
 8014322:	607a      	str	r2, [r7, #4]
 8014324:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8014326:	68f8      	ldr	r0, [r7, #12]
 8014328:	f000 fe46 	bl	8014fb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 801432c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801432e:	68b8      	ldr	r0, [r7, #8]
 8014330:	f7ff fdd1 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8014334:	4604      	mov	r4, r0
 8014336:	6878      	ldr	r0, [r7, #4]
 8014338:	f7ff ffe3 	bl	8014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801433c:	4605      	mov	r5, r0
 801433e:	6838      	ldr	r0, [r7, #0]
 8014340:	f7ff fddf 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014344:	4603      	mov	r3, r0
 8014346:	9300      	str	r3, [sp, #0]
 8014348:	462b      	mov	r3, r5
 801434a:	4622      	mov	r2, r4
 801434c:	6979      	ldr	r1, [r7, #20]
 801434e:	68f8      	ldr	r0, [r7, #12]
 8014350:	f000 fe43 	bl	8014fda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8014354:	697b      	ldr	r3, [r7, #20]
	}
 8014356:	4618      	mov	r0, r3
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bdb0      	pop	{r4, r5, r7, pc}

0801435e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801435e:	b590      	push	{r4, r7, lr}
 8014360:	b08d      	sub	sp, #52	; 0x34
 8014362:	af00      	add	r7, sp, #0
 8014364:	60f8      	str	r0, [r7, #12]
 8014366:	60b9      	str	r1, [r7, #8]
 8014368:	607a      	str	r2, [r7, #4]
 801436a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801436c:	1d3b      	adds	r3, r7, #4
 801436e:	4618      	mov	r0, r3
 8014370:	f000 fe60 	bl	8015034 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 8014374:	4603      	mov	r3, r0
 8014376:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8014378:	69bc      	ldr	r4, [r7, #24]
 801437a:	68b8      	ldr	r0, [r7, #8]
 801437c:	f000 fdc4 	bl	8014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8014380:	4603      	mov	r3, r0
 8014382:	429c      	cmp	r4, r3
 8014384:	bf0c      	ite	eq
 8014386:	2301      	moveq	r3, #1
 8014388:	2300      	movne	r3, #0
 801438a:	b2db      	uxtb	r3, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	d030      	beq.n	80143f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8014390:	68b8      	ldr	r0, [r7, #8]
 8014392:	f000 fe60 	bl	8015056 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8014396:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8014398:	2b00      	cmp	r3, #0
 801439a:	d013      	beq.n	80143c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 801439c:	68bc      	ldr	r4, [r7, #8]
 801439e:	68b8      	ldr	r0, [r7, #8]
 80143a0:	f000 fe65 	bl	801506e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80143a4:	4603      	mov	r3, r0
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7ff fd1d 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80143ae:	4603      	mov	r3, r0
 80143b0:	683a      	ldr	r2, [r7, #0]
 80143b2:	4619      	mov	r1, r3
 80143b4:	4620      	mov	r0, r4
 80143b6:	f7ff f95c 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d001      	beq.n	80143c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 80143c4:	2300      	movs	r3, #0
	  if (size() > 0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d00c      	beq.n	80143e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80143ca:	2300      	movs	r3, #0
 80143cc:	61fb      	str	r3, [r7, #28]
 80143ce:	68b8      	ldr	r0, [r7, #8]
 80143d0:	f000 fe4d 	bl	801506e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80143d4:	4602      	mov	r2, r0
 80143d6:	f107 031c 	add.w	r3, r7, #28
 80143da:	4619      	mov	r1, r3
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f000 fc75 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80143e2:	e0db      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	683a      	ldr	r2, [r7, #0]
 80143e8:	68b9      	ldr	r1, [r7, #8]
 80143ea:	4618      	mov	r0, r3
 80143ec:	f000 fe4b 	bl	8015086 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80143f0:	e0d4      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80143f2:	68bc      	ldr	r4, [r7, #8]
 80143f4:	69bb      	ldr	r3, [r7, #24]
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7ff fcf6 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80143fc:	4603      	mov	r3, r0
 80143fe:	461a      	mov	r2, r3
 8014400:	6839      	ldr	r1, [r7, #0]
 8014402:	4620      	mov	r0, r4
 8014404:	f7ff f935 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014408:	4603      	mov	r3, r0
 801440a:	2b00      	cmp	r3, #0
 801440c:	d057      	beq.n	80144be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8014412:	69bc      	ldr	r4, [r7, #24]
 8014414:	68b8      	ldr	r0, [r7, #8]
 8014416:	f000 febb 	bl	8015190 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 801441a:	4603      	mov	r3, r0
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	429c      	cmp	r4, r3
 8014420:	bf0c      	ite	eq
 8014422:	2301      	moveq	r3, #1
 8014424:	2300      	movne	r3, #0
 8014426:	b2db      	uxtb	r3, r3
 8014428:	2b00      	cmp	r3, #0
 801442a:	d00d      	beq.n	8014448 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801442c:	68b8      	ldr	r0, [r7, #8]
 801442e:	f000 feaf 	bl	8015190 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8014432:	4604      	mov	r4, r0
 8014434:	68b8      	ldr	r0, [r7, #8]
 8014436:	f000 feab 	bl	8015190 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 801443a:	4603      	mov	r3, r0
 801443c:	461a      	mov	r2, r3
 801443e:	4621      	mov	r1, r4
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f000 fcea 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014446:	e0a9      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8014448:	68bc      	ldr	r4, [r7, #8]
 801444a:	f107 0314 	add.w	r3, r7, #20
 801444e:	4618      	mov	r0, r3
 8014450:	f000 feaa 	bl	80151a8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 8014454:	4603      	mov	r3, r0
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	f7ff fcc5 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801445e:	4603      	mov	r3, r0
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	4619      	mov	r1, r3
 8014464:	4620      	mov	r0, r4
 8014466:	f7ff f904 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d01f      	beq.n	80144b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	4618      	mov	r0, r3
 8014474:	f000 fea9 	bl	80151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014478:	4603      	mov	r3, r0
 801447a:	2b00      	cmp	r3, #0
 801447c:	bf0c      	ite	eq
 801447e:	2301      	moveq	r3, #1
 8014480:	2300      	movne	r3, #0
 8014482:	b2db      	uxtb	r3, r3
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00a      	beq.n	801449e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8014488:	2300      	movs	r3, #0
 801448a:	623b      	str	r3, [r7, #32]
 801448c:	f107 0214 	add.w	r2, r7, #20
 8014490:	f107 0320 	add.w	r3, r7, #32
 8014494:	4619      	mov	r1, r3
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	f000 fc18 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801449c:	e07e      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801449e:	f107 0218 	add.w	r2, r7, #24
 80144a2:	f107 0318 	add.w	r3, r7, #24
 80144a6:	4619      	mov	r1, r3
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f000 fcb6 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80144ae:	e075      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	683a      	ldr	r2, [r7, #0]
 80144b4:	68b9      	ldr	r1, [r7, #8]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f000 fde5 	bl	8015086 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80144bc:	e06e      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80144be:	68bc      	ldr	r4, [r7, #8]
 80144c0:	69bb      	ldr	r3, [r7, #24]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7ff fc90 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80144c8:	4603      	mov	r3, r0
 80144ca:	683a      	ldr	r2, [r7, #0]
 80144cc:	4619      	mov	r1, r3
 80144ce:	4620      	mov	r0, r4
 80144d0:	f7ff f8cf 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80144d4:	4603      	mov	r3, r0
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d056      	beq.n	8014588 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80144de:	69bc      	ldr	r4, [r7, #24]
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f000 fdc4 	bl	801506e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80144e6:	4603      	mov	r3, r0
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	429c      	cmp	r4, r3
 80144ec:	bf0c      	ite	eq
 80144ee:	2301      	moveq	r3, #1
 80144f0:	2300      	movne	r3, #0
 80144f2:	b2db      	uxtb	r3, r3
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d00c      	beq.n	8014512 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80144f8:	2300      	movs	r3, #0
 80144fa:	627b      	str	r3, [r7, #36]	; 0x24
 80144fc:	68b8      	ldr	r0, [r7, #8]
 80144fe:	f000 fdb6 	bl	801506e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8014502:	4602      	mov	r2, r0
 8014504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014508:	4619      	mov	r1, r3
 801450a:	68f8      	ldr	r0, [r7, #12]
 801450c:	f000 fbde 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014510:	e044      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8014512:	68bc      	ldr	r4, [r7, #8]
 8014514:	f107 0310 	add.w	r3, r7, #16
 8014518:	4618      	mov	r0, r3
 801451a:	f000 fe62 	bl	80151e2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 801451e:	4603      	mov	r3, r0
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	4618      	mov	r0, r3
 8014524:	f7ff fc60 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014528:	4603      	mov	r3, r0
 801452a:	461a      	mov	r2, r3
 801452c:	6839      	ldr	r1, [r7, #0]
 801452e:	4620      	mov	r0, r4
 8014530:	f7ff f89f 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d01f      	beq.n	801457a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	4618      	mov	r0, r3
 801453e:	f000 fe44 	bl	80151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	bf0c      	ite	eq
 8014548:	2301      	moveq	r3, #1
 801454a:	2300      	movne	r3, #0
 801454c:	b2db      	uxtb	r3, r3
 801454e:	2b00      	cmp	r3, #0
 8014550:	d00a      	beq.n	8014568 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8014552:	2300      	movs	r3, #0
 8014554:	62bb      	str	r3, [r7, #40]	; 0x28
 8014556:	f107 0218 	add.w	r2, r7, #24
 801455a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801455e:	4619      	mov	r1, r3
 8014560:	68f8      	ldr	r0, [r7, #12]
 8014562:	f000 fbb3 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8014566:	e019      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8014568:	f107 0210 	add.w	r2, r7, #16
 801456c:	f107 0310 	add.w	r3, r7, #16
 8014570:	4619      	mov	r1, r3
 8014572:	68f8      	ldr	r0, [r7, #12]
 8014574:	f000 fc51 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8014578:	e010      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	68b9      	ldr	r1, [r7, #8]
 8014580:	4618      	mov	r0, r3
 8014582:	f000 fd80 	bl	8015086 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8014586:	e009      	b.n	801459c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8014588:	2300      	movs	r3, #0
 801458a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801458c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014590:	f107 0318 	add.w	r3, r7, #24
 8014594:	4619      	mov	r1, r3
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f000 fc7a 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	3734      	adds	r7, #52	; 0x34
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd90      	pop	{r4, r7, pc}

080145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f000 fe29 	bl	8015204 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 80145b2:	4602      	mov	r2, r0
 80145b4:	f107 030c 	add.w	r3, r7, #12
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 fe30 	bl	8015220 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 80145c0:	4603      	mov	r3, r0
      }
 80145c2:	4618      	mov	r0, r3
 80145c4:	3710      	adds	r7, #16
 80145c6:	46bd      	mov	sp, r7
 80145c8:	bd80      	pop	{r7, pc}

080145ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80145ca:	b5b0      	push	{r4, r5, r7, lr}
 80145cc:	b086      	sub	sp, #24
 80145ce:	af00      	add	r7, sp, #0
 80145d0:	60f8      	str	r0, [r7, #12]
 80145d2:	60b9      	str	r1, [r7, #8]
 80145d4:	607a      	str	r2, [r7, #4]
 80145d6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d117      	bne.n	801460e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f000 fc92 	bl	8014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80145e4:	4602      	mov	r2, r0
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	4293      	cmp	r3, r2
 80145ea:	d010      	beq.n	801460e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80145ec:	68fc      	ldr	r4, [r7, #12]
 80145ee:	6838      	ldr	r0, [r7, #0]
 80145f0:	f7ff ffd8 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80145f4:	4605      	mov	r5, r0
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7ff fbf6 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80145fc:	4603      	mov	r3, r0
 80145fe:	461a      	mov	r2, r3
 8014600:	4629      	mov	r1, r5
 8014602:	4620      	mov	r0, r4
 8014604:	f7ff f835 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d001      	beq.n	8014612 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 801460e:	2301      	movs	r3, #1
 8014610:	e000      	b.n	8014614 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8014612:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8014614:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801461a:	7df8      	ldrb	r0, [r7, #23]
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	6839      	ldr	r1, [r7, #0]
 8014620:	f011 fdab 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	695b      	ldr	r3, [r3, #20]
 8014628:	1c5a      	adds	r2, r3, #1
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801462e:	f107 0310 	add.w	r3, r7, #16
 8014632:	6839      	ldr	r1, [r7, #0]
 8014634:	4618      	mov	r0, r3
 8014636:	f000 f816 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801463a:	693b      	ldr	r3, [r7, #16]
    }
 801463c:	4618      	mov	r0, r3
 801463e:	3718      	adds	r7, #24
 8014640:	46bd      	mov	sp, r7
 8014642:	bdb0      	pop	{r4, r5, r7, pc}

08014644 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014644:	b580      	push	{r7, lr}
 8014646:	b082      	sub	sp, #8
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801464e:	6839      	ldr	r1, [r7, #0]
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f000 fdf1 	bl	8015238 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8014656:	6839      	ldr	r1, [r7, #0]
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f000 fe02 	bl	8015262 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 801465e:	bf00      	nop
 8014660:	3708      	adds	r7, #8
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}

08014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014666:	b480      	push	{r7}
 8014668:	b083      	sub	sp, #12
 801466a:	af00      	add	r7, sp, #0
 801466c:	6078      	str	r0, [r7, #4]
 801466e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	683a      	ldr	r2, [r7, #0]
 8014674:	601a      	str	r2, [r3, #0]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	4618      	mov	r0, r3
 801467a:	370c      	adds	r7, #12
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() noexcept
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	4618      	mov	r0, r3
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr

0801469a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801469a:	b580      	push	{r7, lr}
 801469c:	b082      	sub	sp, #8
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
 80146a2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80146a4:	6838      	ldr	r0, [r7, #0]
 80146a6:	f000 fdee 	bl	8015286 <_ZSt10destroy_atIhEvPT_>
	}
 80146aa:	bf00      	nop
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b082      	sub	sp, #8
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fded 	bl	801529a <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 80146c0:	4603      	mov	r3, r0
 80146c2:	4618      	mov	r0, r3
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}

080146ca <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>:
      _M_put_node(_Node* __p)
 80146ca:	b580      	push	{r7, lr}
 80146cc:	b084      	sub	sp, #16
 80146ce:	af00      	add	r7, sp, #0
 80146d0:	6078      	str	r0, [r7, #4]
 80146d2:	6039      	str	r1, [r7, #0]
	auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);
 80146d4:	6838      	ldr	r0, [r7, #0]
 80146d6:	f7ff ffec 	bl	80146b2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>
 80146da:	60f8      	str	r0, [r7, #12]
	_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff ffd1 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80146e2:	4603      	mov	r3, r0
 80146e4:	2201      	movs	r2, #1
 80146e6:	68f9      	ldr	r1, [r7, #12]
 80146e8:	4618      	mov	r0, r3
 80146ea:	f000 fde2 	bl	80152b2 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>
      }
 80146ee:	bf00      	nop
 80146f0:	3710      	adds	r7, #16
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd80      	pop	{r7, pc}

080146f6 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80146f6:	b480      	push	{r7}
 80146f8:	b083      	sub	sp, #12
 80146fa:	af00      	add	r7, sp, #0
 80146fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	370c      	adds	r7, #12
 8014704:	46bd      	mov	sp, r7
 8014706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801470a:	4770      	bx	lr

0801470c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801470c:	b590      	push	{r4, r7, lr}
 801470e:	b087      	sub	sp, #28
 8014710:	af00      	add	r7, sp, #0
 8014712:	60f8      	str	r0, [r7, #12]
 8014714:	60b9      	str	r1, [r7, #8]
 8014716:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8014718:	68f8      	ldr	r0, [r7, #12]
 801471a:	f000 fde9 	bl	80152f0 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801471e:	4604      	mov	r4, r0
 8014720:	68f8      	ldr	r0, [r7, #12]
 8014722:	f7fe f9e6 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8014726:	4603      	mov	r3, r0
 8014728:	1ae2      	subs	r2, r4, r3
 801472a:	68bb      	ldr	r3, [r7, #8]
 801472c:	429a      	cmp	r2, r3
 801472e:	bf34      	ite	cc
 8014730:	2301      	movcc	r3, #1
 8014732:	2300      	movcs	r3, #0
 8014734:	b2db      	uxtb	r3, r3
 8014736:	2b00      	cmp	r3, #0
 8014738:	d002      	beq.n	8014740 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801473a:	6878      	ldr	r0, [r7, #4]
 801473c:	f011 fd7b 	bl	8026236 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8014740:	68f8      	ldr	r0, [r7, #12]
 8014742:	f7fe f9d6 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8014746:	4604      	mov	r4, r0
 8014748:	68f8      	ldr	r0, [r7, #12]
 801474a:	f7fe f9d2 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 801474e:	4603      	mov	r3, r0
 8014750:	613b      	str	r3, [r7, #16]
 8014752:	f107 0208 	add.w	r2, r7, #8
 8014756:	f107 0310 	add.w	r3, r7, #16
 801475a:	4611      	mov	r1, r2
 801475c:	4618      	mov	r0, r3
 801475e:	f7fe f975 	bl	8012a4c <_ZSt3maxIjERKT_S2_S2_>
 8014762:	4603      	mov	r3, r0
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	4423      	add	r3, r4
 8014768:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801476a:	68f8      	ldr	r0, [r7, #12]
 801476c:	f7fe f9c1 	bl	8012af2 <_ZNKSt6vectorImSaImEE4sizeEv>
 8014770:	4602      	mov	r2, r0
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	4293      	cmp	r3, r2
 8014776:	d306      	bcc.n	8014786 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f000 fdb9 	bl	80152f0 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801477e:	4602      	mov	r2, r0
 8014780:	697b      	ldr	r3, [r7, #20]
 8014782:	4293      	cmp	r3, r2
 8014784:	d904      	bls.n	8014790 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f000 fdb2 	bl	80152f0 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801478c:	4603      	mov	r3, r0
 801478e:	e000      	b.n	8014792 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 8014790:	697b      	ldr	r3, [r7, #20]
      }
 8014792:	4618      	mov	r0, r3
 8014794:	371c      	adds	r7, #28
 8014796:	46bd      	mov	sp, r7
 8014798:	bd90      	pop	{r4, r7, pc}

0801479a <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801479a:	b590      	push	{r4, r7, lr}
 801479c:	b083      	sub	sp, #12
 801479e:	af00      	add	r7, sp, #0
 80147a0:	6078      	str	r0, [r7, #4]
 80147a2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7fe f857 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80147aa:	4603      	mov	r3, r0
 80147ac:	681c      	ldr	r4, [r3, #0]
 80147ae:	6838      	ldr	r0, [r7, #0]
 80147b0:	f7fe f852 	bl	8012858 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80147b4:	4603      	mov	r3, r0
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	1ae3      	subs	r3, r4, r3
 80147ba:	109b      	asrs	r3, r3, #2
 80147bc:	4618      	mov	r0, r3
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd90      	pop	{r4, r7, pc}

080147c4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d006      	beq.n	80147e2 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6839      	ldr	r1, [r7, #0]
 80147d8:	4618      	mov	r0, r3
 80147da:	f000 fd9a 	bl	8015312 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80147de:	4603      	mov	r3, r0
 80147e0:	e000      	b.n	80147e4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 80147e2:	2300      	movs	r3, #0
      }
 80147e4:	4618      	mov	r0, r3
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80147ec:	b590      	push	{r4, r7, lr}
 80147ee:	b087      	sub	sp, #28
 80147f0:	af02      	add	r7, sp, #8
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80147fa:	f88d 4000 	strb.w	r4, [sp]
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	68b9      	ldr	r1, [r7, #8]
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f000 fda4 	bl	8015352 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 801480a:	4603      	mov	r3, r0
      }
 801480c:	4618      	mov	r0, r3
 801480e:	3714      	adds	r7, #20
 8014810:	46bd      	mov	sp, r7
 8014812:	bd90      	pop	{r4, r7, pc}

08014814 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8014814:	b580      	push	{r7, lr}
 8014816:	b084      	sub	sp, #16
 8014818:	af00      	add	r7, sp, #0
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	7239      	strb	r1, [r7, #8]
 801481e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7ff f857 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8014826:	4603      	mov	r3, r0
 8014828:	781a      	ldrb	r2, [r3, #0]
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	701a      	strb	r2, [r3, #0]
	    { }
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	4618      	mov	r0, r3
 8014832:	3710      	adds	r7, #16
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8014838:	b5b0      	push	{r4, r5, r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	7239      	strb	r1, [r7, #8]
 8014842:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8014844:	68fc      	ldr	r4, [r7, #12]
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f7ff f844 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801484c:	4603      	mov	r3, r0
 801484e:	461a      	mov	r2, r3
 8014850:	4629      	mov	r1, r5
 8014852:	4620      	mov	r0, r4
 8014854:	f7ff ffde 	bl	8014814 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2201      	movs	r2, #1
 801485c:	705a      	strb	r2, [r3, #1]
	{ }
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	4618      	mov	r0, r3
 8014862:	3710      	adds	r7, #16
 8014864:	46bd      	mov	sp, r7
 8014866:	bdb0      	pop	{r4, r5, r7, pc}

08014868 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	689b      	ldr	r3, [r3, #8]
      }
 8014874:	4618      	mov	r0, r3
 8014876:	370c      	adds	r7, #12
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8014880:	b480      	push	{r7}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	3304      	adds	r3, #4
 801488c:	4618      	mov	r0, r3
 801488e:	370c      	adds	r7, #12
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr

08014898 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014898:	b590      	push	{r4, r7, lr}
 801489a:	b087      	sub	sp, #28
 801489c:	af00      	add	r7, sp, #0
 801489e:	60f8      	str	r0, [r7, #12]
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	607a      	str	r2, [r7, #4]
 80148a4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d01b      	beq.n	80148e4 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80148ac:	68fc      	ldr	r4, [r7, #12]
 80148ae:	68b8      	ldr	r0, [r7, #8]
 80148b0:	f7ff fc78 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80148b4:	4603      	mov	r3, r0
 80148b6:	683a      	ldr	r2, [r7, #0]
 80148b8:	4619      	mov	r1, r3
 80148ba:	4620      	mov	r0, r4
 80148bc:	f7fe fe1c 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 80148c0:	4603      	mov	r3, r0
 80148c2:	f083 0301 	eor.w	r3, r3, #1
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d006      	beq.n	80148da <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	607b      	str	r3, [r7, #4]
 80148d0:	68b8      	ldr	r0, [r7, #8]
 80148d2:	f000 fd5a 	bl	801538a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80148d6:	60b8      	str	r0, [r7, #8]
 80148d8:	e7e5      	b.n	80148a6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80148da:	68b8      	ldr	r0, [r7, #8]
 80148dc:	f000 fd61 	bl	80153a2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80148e0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80148e2:	e7e0      	b.n	80148a6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80148e4:	f107 0314 	add.w	r3, r7, #20
 80148e8:	6879      	ldr	r1, [r7, #4]
 80148ea:	4618      	mov	r0, r3
 80148ec:	f000 f811 	bl	8014912 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80148f0:	697b      	ldr	r3, [r7, #20]
    }
 80148f2:	4618      	mov	r0, r3
 80148f4:	371c      	adds	r7, #28
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd90      	pop	{r4, r7, pc}

080148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80148fa:	b580      	push	{r7, lr}
 80148fc:	b082      	sub	sp, #8
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f7ff fc4e 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8014908:	4603      	mov	r3, r0
 801490a:	4618      	mov	r0, r3
 801490c:	3708      	adds	r7, #8
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014912:	b480      	push	{r7}
 8014914:	b083      	sub	sp, #12
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
 801491a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	683a      	ldr	r2, [r7, #0]
 8014920:	601a      	str	r2, [r3, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	4618      	mov	r0, r3
 8014926:	370c      	adds	r7, #12
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr

08014930 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	7239      	strb	r1, [r7, #8]
 801493a:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f7ff f85b 	bl	80139f8 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8014942:	4603      	mov	r3, r0
 8014944:	ed93 7b00 	vldr	d7, [r3]
 8014948:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	edc3 7a00 	vstr	s15, [r3]
	    { }
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}

0801495c <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801495c:	b5b0      	push	{r4, r5, r7, lr}
 801495e:	b084      	sub	sp, #16
 8014960:	af00      	add	r7, sp, #0
 8014962:	60f8      	str	r0, [r7, #12]
 8014964:	7239      	strb	r1, [r7, #8]
 8014966:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8014968:	68fc      	ldr	r4, [r7, #12]
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ff f844 	bl	80139f8 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8014970:	4603      	mov	r3, r0
 8014972:	461a      	mov	r2, r3
 8014974:	4629      	mov	r1, r5
 8014976:	4620      	mov	r0, r4
 8014978:	f7ff ffda 	bl	8014930 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2201      	movs	r2, #1
 8014980:	711a      	strb	r2, [r3, #4]
	{ }
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	4618      	mov	r0, r3
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bdb0      	pop	{r4, r5, r7, pc}

0801498c <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	429a      	cmp	r2, r3
 801499c:	d00a      	beq.n	80149b4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 801499e:	6878      	ldr	r0, [r7, #4]
 80149a0:	f000 fd1a 	bl	80153d8 <_ZSt11__addressofImEPT_RS0_>
 80149a4:	4603      	mov	r3, r0
 80149a6:	4618      	mov	r0, r3
 80149a8:	f000 fd21 	bl	80153ee <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	3304      	adds	r3, #4
 80149b0:	607b      	str	r3, [r7, #4]
 80149b2:	e7f0      	b.n	8014996 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 80149b4:	bf00      	nop
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
 80149c6:	bf00      	nop
 80149c8:	370c      	adds	r7, #12
 80149ca:	46bd      	mov	sp, r7
 80149cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d0:	4770      	bx	lr

080149d2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80149d2:	b580      	push	{r7, lr}
 80149d4:	b082      	sub	sp, #8
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	6078      	str	r0, [r7, #4]
 80149da:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80149dc:	6839      	ldr	r1, [r7, #0]
 80149de:	6878      	ldr	r0, [r7, #4]
 80149e0:	f000 fd10 	bl	8015404 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	4618      	mov	r0, r3
 80149e8:	3708      	adds	r7, #8
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>:
      _M_get_node()
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b084      	sub	sp, #16
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
	auto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f7ff fe44 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80149fc:	4603      	mov	r3, r0
 80149fe:	2101      	movs	r1, #1
 8014a00:	4618      	mov	r0, r3
 8014a02:	f000 fd0b 	bl	801541c <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>
 8014a06:	60f8      	str	r0, [r7, #12]
	return std::__to_address(__ptr);
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f000 fd27 	bl	801545c <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>
 8014a0e:	4603      	mov	r3, r0
      }
 8014a10:	4618      	mov	r0, r3
 8014a12:	3710      	adds	r7, #16
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014a18:	b480      	push	{r7}
 8014a1a:	b083      	sub	sp, #12
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	4618      	mov	r0, r3
 8014a24:	370c      	adds	r7, #12
 8014a26:	46bd      	mov	sp, r7
 8014a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2c:	4770      	bx	lr

08014a2e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8014a2e:	b590      	push	{r4, r7, lr}
 8014a30:	b083      	sub	sp, #12
 8014a32:	af00      	add	r7, sp, #0
 8014a34:	6078      	str	r0, [r7, #4]
 8014a36:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8014a38:	6838      	ldr	r0, [r7, #0]
 8014a3a:	f7ff ffed 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	781c      	ldrb	r4, [r3, #0]
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	4619      	mov	r1, r3
 8014a46:	2001      	movs	r0, #1
 8014a48:	f7ec fd06 	bl	8001458 <_ZnwjPv>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	4622      	mov	r2, r4
 8014a50:	701a      	strb	r2, [r3, #0]
 8014a52:	4618      	mov	r0, r3
 8014a54:	370c      	adds	r7, #12
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd90      	pop	{r4, r7, pc}

08014a5a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b084      	sub	sp, #16
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	60f8      	str	r0, [r7, #12]
 8014a62:	60b9      	str	r1, [r7, #8]
 8014a64:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7ff ffd6 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	4619      	mov	r1, r3
 8014a70:	68b8      	ldr	r0, [r7, #8]
 8014a72:	f7ff ffdc 	bl	8014a2e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8014a76:	bf00      	nop
 8014a78:	3710      	adds	r7, #16
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014a7e:	b590      	push	{r4, r7, lr}
 8014a80:	b083      	sub	sp, #12
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6078      	str	r0, [r7, #4]
 8014a86:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8014a88:	6878      	ldr	r0, [r7, #4]
 8014a8a:	f000 fcf2 	bl	8015472 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8014a8e:	4604      	mov	r4, r0
 8014a90:	6838      	ldr	r0, [r7, #0]
 8014a92:	f7ff fa03 	bl	8013e9c <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8014a96:	4603      	mov	r3, r0
 8014a98:	4619      	mov	r1, r3
 8014a9a:	4620      	mov	r0, r4
 8014a9c:	f000 fcf4 	bl	8015488 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8014aa0:	bf00      	nop
 8014aa2:	370c      	adds	r7, #12
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd90      	pop	{r4, r7, pc}

08014aa8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 fcdd 	bl	8015472 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	2201      	movs	r2, #1
 8014abc:	6839      	ldr	r1, [r7, #0]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f000 fcee 	bl	80154a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 8014ac4:	bf00      	nop
 8014ac6:	3708      	adds	r7, #8
 8014ac8:	46bd      	mov	sp, r7
 8014aca:	bd80      	pop	{r7, pc}

08014acc <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b082      	sub	sp, #8
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f000 fd00 	bl	80154de <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b084      	sub	sp, #16
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8014af4:	687a      	ldr	r2, [r7, #4]
 8014af6:	68b9      	ldr	r1, [r7, #8]
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f000 fcfc 	bl	80154f6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8014afe:	4603      	mov	r3, r0
 8014b00:	4618      	mov	r0, r3
 8014b02:	3710      	adds	r7, #16
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014b08:	b480      	push	{r7}
 8014b0a:	b083      	sub	sp, #12
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	689b      	ldr	r3, [r3, #8]
 8014b14:	4618      	mov	r0, r3
 8014b16:	370c      	adds	r7, #12
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1e:	4770      	bx	lr

08014b20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014b20:	b480      	push	{r7}
 8014b22:	b083      	sub	sp, #12
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	370c      	adds	r7, #12
 8014b30:	46bd      	mov	sp, r7
 8014b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b36:	4770      	bx	lr

08014b38 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>:
      _M_addr() noexcept
 8014b38:	b480      	push	{r7}
 8014b3a:	b083      	sub	sp, #12
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8014b40:	687b      	ldr	r3, [r7, #4]
      }
 8014b42:	4618      	mov	r0, r3
 8014b44:	370c      	adds	r7, #12
 8014b46:	46bd      	mov	sp, r7
 8014b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4c:	4770      	bx	lr

08014b4e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8014b4e:	b480      	push	{r7}
 8014b50:	b083      	sub	sp, #12
 8014b52:	af00      	add	r7, sp, #0
 8014b54:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3304      	adds	r3, #4
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	370c      	adds	r7, #12
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b64:	4770      	bx	lr

08014b66 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014b66:	b590      	push	{r4, r7, lr}
 8014b68:	b087      	sub	sp, #28
 8014b6a:	af00      	add	r7, sp, #0
 8014b6c:	60f8      	str	r0, [r7, #12]
 8014b6e:	60b9      	str	r1, [r7, #8]
 8014b70:	607a      	str	r2, [r7, #4]
 8014b72:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d01b      	beq.n	8014bb2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8014b7a:	68fc      	ldr	r4, [r7, #12]
 8014b7c:	68b8      	ldr	r0, [r7, #8]
 8014b7e:	f7ff fb11 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8014b82:	4603      	mov	r3, r0
 8014b84:	683a      	ldr	r2, [r7, #0]
 8014b86:	4619      	mov	r1, r3
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f7fe fcb5 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	f083 0301 	eor.w	r3, r3, #1
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d006      	beq.n	8014ba8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	607b      	str	r3, [r7, #4]
 8014b9e:	68b8      	ldr	r0, [r7, #8]
 8014ba0:	f7ff f860 	bl	8013c64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014ba4:	60b8      	str	r0, [r7, #8]
 8014ba6:	e7e5      	b.n	8014b74 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8014ba8:	68b8      	ldr	r0, [r7, #8]
 8014baa:	f7ff f84f 	bl	8013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014bae:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8014bb0:	e7e0      	b.n	8014b74 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8014bb2:	f107 0314 	add.w	r3, r7, #20
 8014bb6:	6879      	ldr	r1, [r7, #4]
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff fb43 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8014bbe:	697b      	ldr	r3, [r7, #20]
    }
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	371c      	adds	r7, #28
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd90      	pop	{r4, r7, pc}

08014bc8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fca8 	bl	8015526 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8014be0:	b480      	push	{r7}
 8014be2:	b083      	sub	sp, #12
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	683a      	ldr	r2, [r7, #0]
 8014bee:	601a      	str	r2, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	370c      	adds	r7, #12
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bfc:	4770      	bx	lr

08014bfe <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8014bfe:	b580      	push	{r7, lr}
 8014c00:	b082      	sub	sp, #8
 8014c02:	af00      	add	r7, sp, #0
 8014c04:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8014c06:	6878      	ldr	r0, [r7, #4]
 8014c08:	f000 fc33 	bl	8015472 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	2101      	movs	r1, #1
 8014c10:	4618      	mov	r0, r3
 8014c12:	f000 fc93 	bl	801553c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>
 8014c16:	4603      	mov	r3, r0
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3708      	adds	r7, #8
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8014c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c24:	b086      	sub	sp, #24
 8014c26:	af02      	add	r7, sp, #8
 8014c28:	60f8      	str	r0, [r7, #12]
 8014c2a:	60b9      	str	r1, [r7, #8]
 8014c2c:	607a      	str	r2, [r7, #4]
 8014c2e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	4619      	mov	r1, r3
 8014c34:	2020      	movs	r0, #32
 8014c36:	f7ec fc0f 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	f000 fc19 	bl	8015472 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8014c40:	4604      	mov	r4, r0
 8014c42:	68b8      	ldr	r0, [r7, #8]
 8014c44:	f7ff f92a 	bl	8013e9c <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8014c48:	4605      	mov	r5, r0
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f7ff f943 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8014c50:	4606      	mov	r6, r0
 8014c52:	6838      	ldr	r0, [r7, #0]
 8014c54:	f7ff f94a 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8014c58:	4680      	mov	r8, r0
 8014c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c5c:	f7ff f951 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014c60:	4603      	mov	r3, r0
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	4643      	mov	r3, r8
 8014c66:	4632      	mov	r2, r6
 8014c68:	4629      	mov	r1, r5
 8014c6a:	4620      	mov	r0, r4
 8014c6c:	f000 fcc0 	bl	80155f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8014c70:	bf00      	nop
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014c7a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b084      	sub	sp, #16
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	f107 030c 	add.w	r3, r7, #12
 8014c8a:	4611      	mov	r1, r2
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7ff fad9 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	4618      	mov	r0, r3
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8014c9c:	b480      	push	{r7}
 8014c9e:	b083      	sub	sp, #12
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	695b      	ldr	r3, [r3, #20]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	370c      	adds	r7, #12
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr

08014cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8014cb4:	b480      	push	{r7}
 8014cb6:	b083      	sub	sp, #12
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	3310      	adds	r3, #16
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	370c      	adds	r7, #12
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	601a      	str	r2, [r3, #0]
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 fca1 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	681a      	ldr	r2, [r3, #0]
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	605a      	str	r2, [r3, #4]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	3710      	adds	r7, #16
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}

08014cf8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014cf8:	b590      	push	{r4, r7, lr}
 8014cfa:	b08b      	sub	sp, #44	; 0x2c
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	60f8      	str	r0, [r7, #12]
 8014d00:	60b9      	str	r1, [r7, #8]
 8014d02:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8014d04:	68b8      	ldr	r0, [r7, #8]
 8014d06:	f7fe fad2 	bl	80132ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8014d0e:	68b8      	ldr	r0, [r7, #8]
 8014d10:	f7ff ff1d 	bl	8014b4e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8014d14:	4603      	mov	r3, r0
 8014d16:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8014d18:	2301      	movs	r3, #1
 8014d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d020      	beq.n	8014d66 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8014d28:	68bc      	ldr	r4, [r7, #8]
 8014d2a:	69bb      	ldr	r3, [r7, #24]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7ff fa39 	bl	80141a4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8014d32:	4603      	mov	r3, r0
 8014d34:	461a      	mov	r2, r3
 8014d36:	6879      	ldr	r1, [r7, #4]
 8014d38:	4620      	mov	r0, r4
 8014d3a:	f7fe fbdd 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8014d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d005      	beq.n	8014d58 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8014d4c:	69bb      	ldr	r3, [r7, #24]
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7fe ff88 	bl	8013c64 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014d54:	4603      	mov	r3, r0
 8014d56:	e004      	b.n	8014d62 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7fe ff76 	bl	8013c4c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014d60:	4603      	mov	r3, r0
 8014d62:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8014d64:	e7db      	b.n	8014d1e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8014d66:	697a      	ldr	r2, [r7, #20]
 8014d68:	f107 0310 	add.w	r3, r7, #16
 8014d6c:	4611      	mov	r1, r2
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7ff fa68 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8014d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d01d      	beq.n	8014db8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8014d7c:	68b8      	ldr	r0, [r7, #8]
 8014d7e:	f000 fc5e 	bl	801563e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 8014d82:	4603      	mov	r3, r0
 8014d84:	61fb      	str	r3, [r7, #28]
 8014d86:	f107 021c 	add.w	r2, r7, #28
 8014d8a:	f107 0310 	add.w	r3, r7, #16
 8014d8e:	4611      	mov	r1, r2
 8014d90:	4618      	mov	r0, r3
 8014d92:	f7fe fb82 	bl	801349a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 8014d96:	4603      	mov	r3, r0
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d008      	beq.n	8014dae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8014d9c:	f107 0214 	add.w	r2, r7, #20
 8014da0:	f107 0318 	add.w	r3, r7, #24
 8014da4:	4619      	mov	r1, r3
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f000 fc5a 	bl	8015660 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8014dac:	e025      	b.n	8014dfa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8014dae:	f107 0310 	add.w	r3, r7, #16
 8014db2:	4618      	mov	r0, r3
 8014db4:	f000 f84a 	bl	8014e4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8014db8:	68bc      	ldr	r4, [r7, #8]
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f7ff fd9c 	bl	80148fa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	4619      	mov	r1, r3
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f7fe fb95 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d008      	beq.n	8014de6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8014dd4:	f107 0214 	add.w	r2, r7, #20
 8014dd8:	f107 0318 	add.w	r3, r7, #24
 8014ddc:	4619      	mov	r1, r3
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f000 fc3e 	bl	8015660 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8014de4:	e009      	b.n	8014dfa <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8014de6:	2300      	movs	r3, #0
 8014de8:	623b      	str	r3, [r7, #32]
 8014dea:	f107 0220 	add.w	r2, r7, #32
 8014dee:	f107 0310 	add.w	r3, r7, #16
 8014df2:	4619      	mov	r1, r3
 8014df4:	68f8      	ldr	r0, [r7, #12]
 8014df6:	f000 f84b 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8014dfa:	68f8      	ldr	r0, [r7, #12]
 8014dfc:	372c      	adds	r7, #44	; 0x2c
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd90      	pop	{r4, r7, pc}

08014e02 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8014e02:	b480      	push	{r7}
 8014e04:	b083      	sub	sp, #12
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	330c      	adds	r3, #12
 8014e0e:	4618      	mov	r0, r3
 8014e10:	370c      	adds	r7, #12
 8014e12:	46bd      	mov	sp, r7
 8014e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e18:	4770      	bx	lr

08014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8014e1a:	b580      	push	{r7, lr}
 8014e1c:	b084      	sub	sp, #16
 8014e1e:	af00      	add	r7, sp, #0
 8014e20:	60f8      	str	r0, [r7, #12]
 8014e22:	60b9      	str	r1, [r7, #8]
 8014e24:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8014e26:	68b8      	ldr	r0, [r7, #8]
 8014e28:	f000 fbfe 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	681a      	ldr	r2, [r3, #0]
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	601a      	str	r2, [r3, #0]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 fbf7 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	681a      	ldr	r2, [r3, #0]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	605a      	str	r2, [r3, #4]
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	4618      	mov	r0, r3
 8014e46:	3710      	adds	r7, #16
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}

08014e4c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b082      	sub	sp, #8
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f011 f98c 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8014e5e:	4602      	mov	r2, r0
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	601a      	str	r2, [r3, #0]
	return *this;
 8014e64:	687b      	ldr	r3, [r7, #4]
      }
 8014e66:	4618      	mov	r0, r3
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b082      	sub	sp, #8
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f011 f979 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8014e80:	4602      	mov	r2, r0
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	601a      	str	r2, [r3, #0]
	return *this;
 8014e86:	687b      	ldr	r3, [r7, #4]
      }
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b084      	sub	sp, #16
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	60f8      	str	r0, [r7, #12]
 8014e98:	60b9      	str	r1, [r7, #8]
 8014e9a:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8014e9c:	68b8      	ldr	r0, [r7, #8]
 8014e9e:	f000 fbc3 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	601a      	str	r2, [r3, #0]
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	605a      	str	r2, [r3, #4]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	3710      	adds	r7, #16
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}

08014ebc <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3310      	adds	r3, #16
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f000 fbe2 	bl	8015692 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3708      	adds	r7, #8
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd80      	pop	{r7, pc}

08014ed8 <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	689b      	ldr	r3, [r3, #8]
 8014efc:	4618      	mov	r0, r3
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8014f08:	b480      	push	{r7}
 8014f0a:	b083      	sub	sp, #12
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	3304      	adds	r3, #4
 8014f14:	4618      	mov	r0, r3
 8014f16:	370c      	adds	r7, #12
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1e:	4770      	bx	lr

08014f20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014f20:	b590      	push	{r4, r7, lr}
 8014f22:	b087      	sub	sp, #28
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	60f8      	str	r0, [r7, #12]
 8014f28:	60b9      	str	r1, [r7, #8]
 8014f2a:	607a      	str	r2, [r7, #4]
 8014f2c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d01b      	beq.n	8014f6c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8014f34:	68fc      	ldr	r4, [r7, #12]
 8014f36:	68b8      	ldr	r0, [r7, #8]
 8014f38:	f7ff fb34 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	683a      	ldr	r2, [r7, #0]
 8014f40:	4619      	mov	r1, r3
 8014f42:	4620      	mov	r0, r4
 8014f44:	f7fe fb95 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	f083 0301 	eor.w	r3, r3, #1
 8014f4e:	b2db      	uxtb	r3, r3
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d006      	beq.n	8014f62 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	607b      	str	r3, [r7, #4]
 8014f58:	68b8      	ldr	r0, [r7, #8]
 8014f5a:	f000 fba6 	bl	80156aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014f5e:	60b8      	str	r0, [r7, #8]
 8014f60:	e7e5      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8014f62:	68b8      	ldr	r0, [r7, #8]
 8014f64:	f000 f931 	bl	80151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014f68:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8014f6a:	e7e0      	b.n	8014f2e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8014f6c:	f107 0314 	add.w	r3, r7, #20
 8014f70:	6879      	ldr	r1, [r7, #4]
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7ff fb77 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8014f78:	697b      	ldr	r3, [r7, #20]
    }
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	371c      	adds	r7, #28
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd90      	pop	{r4, r7, pc}

08014f82 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8014f82:	b580      	push	{r7, lr}
 8014f84:	b082      	sub	sp, #8
 8014f86:	af00      	add	r7, sp, #0
 8014f88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8014f8a:	6878      	ldr	r0, [r7, #4]
 8014f8c:	f000 fb99 	bl	80156c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8014f90:	4603      	mov	r3, r0
 8014f92:	4618      	mov	r0, r3
 8014f94:	3708      	adds	r7, #8
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 8014f9a:	b480      	push	{r7}
 8014f9c:	b083      	sub	sp, #12
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	6078      	str	r0, [r7, #4]
 8014fa2:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	683a      	ldr	r2, [r7, #0]
 8014fa8:	601a      	str	r2, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	4618      	mov	r0, r3
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f000 fb89 	bl	80156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	2101      	movs	r1, #1
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f000 fb8f 	bl	80156ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3708      	adds	r7, #8
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}

08014fda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8014fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fde:	b086      	sub	sp, #24
 8014fe0:	af02      	add	r7, sp, #8
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	60b9      	str	r1, [r7, #8]
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	4619      	mov	r1, r3
 8014fee:	2024      	movs	r0, #36	; 0x24
 8014ff0:	f7ec fa32 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8014ff4:	68f8      	ldr	r0, [r7, #12]
 8014ff6:	f000 fb6f 	bl	80156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	68b8      	ldr	r0, [r7, #8]
 8014ffe:	f7ff f963 	bl	80142c8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8015002:	4605      	mov	r5, r0
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f7fe ff66 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801500a:	4606      	mov	r6, r0
 801500c:	6838      	ldr	r0, [r7, #0]
 801500e:	f7ff f978 	bl	8014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8015012:	4680      	mov	r8, r0
 8015014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015016:	f7fe ff74 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801501a:	4603      	mov	r3, r0
 801501c:	9300      	str	r3, [sp, #0]
 801501e:	4643      	mov	r3, r8
 8015020:	4632      	mov	r2, r6
 8015022:	4629      	mov	r1, r5
 8015024:	4620      	mov	r0, r4
 8015026:	f000 fbbf 	bl	80157a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 801502a:	bf00      	nop
 801502c:	3710      	adds	r7, #16
 801502e:	46bd      	mov	sp, r7
 8015030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015034 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	f107 030c 	add.w	r3, r7, #12
 8015044:	4611      	mov	r1, r2
 8015046:	4618      	mov	r0, r3
 8015048:	f7ff fb0d 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	4618      	mov	r0, r3
 8015050:	3710      	adds	r7, #16
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8015056:	b480      	push	{r7}
 8015058:	b083      	sub	sp, #12
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	695b      	ldr	r3, [r3, #20]
 8015062:	4618      	mov	r0, r3
 8015064:	370c      	adds	r7, #12
 8015066:	46bd      	mov	sp, r7
 8015068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506c:	4770      	bx	lr

0801506e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801506e:	b480      	push	{r7}
 8015070:	b083      	sub	sp, #12
 8015072:	af00      	add	r7, sp, #0
 8015074:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	3310      	adds	r3, #16
 801507a:	4618      	mov	r0, r3
 801507c:	370c      	adds	r7, #12
 801507e:	46bd      	mov	sp, r7
 8015080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015084:	4770      	bx	lr

08015086 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015086:	b590      	push	{r4, r7, lr}
 8015088:	b08b      	sub	sp, #44	; 0x2c
 801508a:	af00      	add	r7, sp, #0
 801508c:	60f8      	str	r0, [r7, #12]
 801508e:	60b9      	str	r1, [r7, #8]
 8015090:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8015092:	68b8      	ldr	r0, [r7, #8]
 8015094:	f7ff ff2c 	bl	8014ef0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8015098:	4603      	mov	r3, r0
 801509a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801509c:	68b8      	ldr	r0, [r7, #8]
 801509e:	f7ff ff33 	bl	8014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80150a2:	4603      	mov	r3, r0
 80150a4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80150a6:	2301      	movs	r3, #1
 80150a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80150ac:	69bb      	ldr	r3, [r7, #24]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d020      	beq.n	80150f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80150b6:	68bc      	ldr	r4, [r7, #8]
 80150b8:	69bb      	ldr	r3, [r7, #24]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7ff fa72 	bl	80145a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80150c0:	4603      	mov	r3, r0
 80150c2:	461a      	mov	r2, r3
 80150c4:	6879      	ldr	r1, [r7, #4]
 80150c6:	4620      	mov	r0, r4
 80150c8:	f7fe fad3 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80150cc:	4603      	mov	r3, r0
 80150ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80150d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d005      	beq.n	80150e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	4618      	mov	r0, r3
 80150de:	f000 fae4 	bl	80156aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80150e2:	4603      	mov	r3, r0
 80150e4:	e004      	b.n	80150f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 80150e6:	69bb      	ldr	r3, [r7, #24]
 80150e8:	4618      	mov	r0, r3
 80150ea:	f000 f86e 	bl	80151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80150ee:	4603      	mov	r3, r0
 80150f0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80150f2:	e7db      	b.n	80150ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 80150f4:	697a      	ldr	r2, [r7, #20]
 80150f6:	f107 0310 	add.w	r3, r7, #16
 80150fa:	4611      	mov	r1, r2
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7ff fab2 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8015102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015106:	2b00      	cmp	r3, #0
 8015108:	d01d      	beq.n	8015146 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 801510a:	68b8      	ldr	r0, [r7, #8]
 801510c:	f000 fb68 	bl	80157e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8015110:	4603      	mov	r3, r0
 8015112:	61fb      	str	r3, [r7, #28]
 8015114:	f107 021c 	add.w	r2, r7, #28
 8015118:	f107 0310 	add.w	r3, r7, #16
 801511c:	4611      	mov	r1, r2
 801511e:	4618      	mov	r0, r3
 8015120:	f7fe fa78 	bl	8013614 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8015124:	4603      	mov	r3, r0
 8015126:	2b00      	cmp	r3, #0
 8015128:	d008      	beq.n	801513c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 801512a:	f107 0214 	add.w	r2, r7, #20
 801512e:	f107 0318 	add.w	r3, r7, #24
 8015132:	4619      	mov	r1, r3
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f000 fb64 	bl	8015802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 801513a:	e025      	b.n	8015188 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 801513c:	f107 0310 	add.w	r3, r7, #16
 8015140:	4618      	mov	r0, r3
 8015142:	f000 f831 	bl	80151a8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8015146:	68bc      	ldr	r4, [r7, #8]
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	4618      	mov	r0, r3
 801514c:	f7fe fe4c 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015150:	4603      	mov	r3, r0
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	4619      	mov	r1, r3
 8015156:	4620      	mov	r0, r4
 8015158:	f7fe fa8b 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d008      	beq.n	8015174 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8015162:	f107 0214 	add.w	r2, r7, #20
 8015166:	f107 0318 	add.w	r3, r7, #24
 801516a:	4619      	mov	r1, r3
 801516c:	68f8      	ldr	r0, [r7, #12]
 801516e:	f000 fb48 	bl	8015802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8015172:	e009      	b.n	8015188 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8015174:	2300      	movs	r3, #0
 8015176:	623b      	str	r3, [r7, #32]
 8015178:	f107 0220 	add.w	r2, r7, #32
 801517c:	f107 0310 	add.w	r3, r7, #16
 8015180:	4619      	mov	r1, r3
 8015182:	68f8      	ldr	r0, [r7, #12]
 8015184:	f7ff fe84 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015188:	68f8      	ldr	r0, [r7, #12]
 801518a:	372c      	adds	r7, #44	; 0x2c
 801518c:	46bd      	mov	sp, r7
 801518e:	bd90      	pop	{r4, r7, pc}

08015190 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8015190:	b480      	push	{r7}
 8015192:	b083      	sub	sp, #12
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	330c      	adds	r3, #12
 801519c:	4618      	mov	r0, r3
 801519e:	370c      	adds	r7, #12
 80151a0:	46bd      	mov	sp, r7
 80151a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a6:	4770      	bx	lr

080151a8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f010 ffde 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80151ba:	4602      	mov	r2, r0
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	601a      	str	r2, [r3, #0]
	return *this;
 80151c0:	687b      	ldr	r3, [r7, #4]
      }
 80151c2:	4618      	mov	r0, r3
 80151c4:	3708      	adds	r7, #8
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}

080151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80151ca:	b480      	push	{r7}
 80151cc:	b083      	sub	sp, #12
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	68db      	ldr	r3, [r3, #12]
 80151d6:	4618      	mov	r0, r3
 80151d8:	370c      	adds	r7, #12
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr

080151e2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80151e2:	b580      	push	{r7, lr}
 80151e4:	b082      	sub	sp, #8
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	4618      	mov	r0, r3
 80151f0:	f010 ffbf 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80151f4:	4602      	mov	r2, r0
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	601a      	str	r2, [r3, #0]
	return *this;
 80151fa:	687b      	ldr	r3, [r7, #4]
      }
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3310      	adds	r3, #16
 8015210:	4618      	mov	r0, r3
 8015212:	f000 fb0f 	bl	8015834 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8015216:	4603      	mov	r3, r0
 8015218:	4618      	mov	r0, r3
 801521a:	3708      	adds	r7, #8
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8015220:	b480      	push	{r7}
 8015222:	b083      	sub	sp, #12
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	4618      	mov	r0, r3
 801522e:	370c      	adds	r7, #12
 8015230:	46bd      	mov	sp, r7
 8015232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015236:	4770      	bx	lr

08015238 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015238:	b590      	push	{r4, r7, lr}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
 801523e:	6078      	str	r0, [r7, #4]
 8015240:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f000 fa48 	bl	80156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8015248:	4604      	mov	r4, r0
 801524a:	6838      	ldr	r0, [r7, #0]
 801524c:	f7ff f83c 	bl	80142c8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8015250:	4603      	mov	r3, r0
 8015252:	4619      	mov	r1, r3
 8015254:	4620      	mov	r0, r4
 8015256:	f000 faf9 	bl	801584c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 801525a:	bf00      	nop
 801525c:	370c      	adds	r7, #12
 801525e:	46bd      	mov	sp, r7
 8015260:	bd90      	pop	{r4, r7, pc}

08015262 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015262:	b580      	push	{r7, lr}
 8015264:	b082      	sub	sp, #8
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
 801526a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f000 fa33 	bl	80156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8015272:	4603      	mov	r3, r0
 8015274:	2201      	movs	r2, #1
 8015276:	6839      	ldr	r1, [r7, #0]
 8015278:	4618      	mov	r0, r3
 801527a:	f000 faf3 	bl	8015864 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 801527e:	bf00      	nop
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}

08015286 <_ZSt10destroy_atIhEvPT_>:
    destroy_at(_Tp* __location)
 8015286:	b480      	push	{r7}
 8015288:	b083      	sub	sp, #12
 801528a:	af00      	add	r7, sp, #0
 801528c:	6078      	str	r0, [r7, #4]
    }
 801528e:	bf00      	nop
 8015290:	370c      	adds	r7, #12
 8015292:	46bd      	mov	sp, r7
 8015294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015298:	4770      	bx	lr

0801529a <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 801529a:	b580      	push	{r7, lr}
 801529c:	b082      	sub	sp, #8
 801529e:	af00      	add	r7, sp, #0
 80152a0:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 fafd 	bl	80158a2 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 80152a8:	4603      	mov	r3, r0
 80152aa:	4618      	mov	r0, r3
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}

080152b2 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80152b2:	b580      	push	{r7, lr}
 80152b4:	b088      	sub	sp, #32
 80152b6:	af00      	add	r7, sp, #0
 80152b8:	60f8      	str	r0, [r7, #12]
 80152ba:	60b9      	str	r1, [r7, #8]
 80152bc:	607a      	str	r2, [r7, #4]
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	61fb      	str	r3, [r7, #28]
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	61bb      	str	r3, [r7, #24]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80152ca:	f7ec f8bd 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d003      	beq.n	80152dc <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80152d4:	69b8      	ldr	r0, [r7, #24]
 80152d6:	f010 fee3 	bl	80260a0 <_ZdlPv>
	    return;
 80152da:	e005      	b.n	80152e8 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80152dc:	697a      	ldr	r2, [r7, #20]
 80152de:	69b9      	ldr	r1, [r7, #24]
 80152e0:	69f8      	ldr	r0, [r7, #28]
 80152e2:	f000 fc32 	bl	8015b4a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80152e6:	bf00      	nop
 80152e8:	bf00      	nop
 80152ea:	3720      	adds	r7, #32
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7fd fff1 	bl	80132e2 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8015300:	4603      	mov	r3, r0
 8015302:	4618      	mov	r0, r3
 8015304:	f000 fae4 	bl	80158d0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8015308:	4603      	mov	r3, r0
 801530a:	4618      	mov	r0, r3
 801530c:	3708      	adds	r7, #8
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}

08015312 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8015312:	b580      	push	{r7, lr}
 8015314:	b084      	sub	sp, #16
 8015316:	af00      	add	r7, sp, #0
 8015318:	6078      	str	r0, [r7, #4]
 801531a:	6039      	str	r1, [r7, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	60fb      	str	r3, [r7, #12]
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8015324:	f7ec f890 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015328:	4603      	mov	r3, r0
 801532a:	2b00      	cmp	r3, #0
 801532c:	d006      	beq.n	801533c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	009b      	lsls	r3, r3, #2
 8015332:	4618      	mov	r0, r3
 8015334:	f010 feb8 	bl	80260a8 <_Znwj>
 8015338:	4603      	mov	r3, r0
 801533a:	e006      	b.n	801534a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801533c:	2200      	movs	r2, #0
 801533e:	68b9      	ldr	r1, [r7, #8]
 8015340:	68f8      	ldr	r0, [r7, #12]
 8015342:	f000 fc11 	bl	8015b68 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8015346:	4603      	mov	r3, r0
 8015348:	bf00      	nop
      { return __a.allocate(__n); }
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}

08015352 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8015352:	b580      	push	{r7, lr}
 8015354:	b084      	sub	sp, #16
 8015356:	af00      	add	r7, sp, #0
 8015358:	60f8      	str	r0, [r7, #12]
 801535a:	60b9      	str	r1, [r7, #8]
 801535c:	607a      	str	r2, [r7, #4]
 801535e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	687a      	ldr	r2, [r7, #4]
 8015364:	68b9      	ldr	r1, [r7, #8]
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	f000 facc 	bl	8015904 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 801536c:	4603      	mov	r3, r0
      }
 801536e:	4618      	mov	r0, r3
 8015370:	3710      	adds	r7, #16
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8015376:	b480      	push	{r7}
 8015378:	b083      	sub	sp, #12
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
    }
 801537e:	bf00      	nop
 8015380:	370c      	adds	r7, #12
 8015382:	46bd      	mov	sp, r7
 8015384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015388:	4770      	bx	lr

0801538a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801538a:	b480      	push	{r7}
 801538c:	b083      	sub	sp, #12
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	689b      	ldr	r3, [r3, #8]
 8015396:	4618      	mov	r0, r3
 8015398:	370c      	adds	r7, #12
 801539a:	46bd      	mov	sp, r7
 801539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a0:	4770      	bx	lr

080153a2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80153a2:	b480      	push	{r7}
 80153a4:	b083      	sub	sp, #12
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	4618      	mov	r0, r3
 80153b0:	370c      	adds	r7, #12
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr

080153ba <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b084      	sub	sp, #16
 80153be:	af00      	add	r7, sp, #0
 80153c0:	60f8      	str	r0, [r7, #12]
 80153c2:	60b9      	str	r1, [r7, #8]
 80153c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	4619      	mov	r1, r3
 80153cc:	68b8      	ldr	r0, [r7, #8]
 80153ce:	f010 fe69 	bl	80260a4 <_ZdlPvj>
      }
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80153d8:	b480      	push	{r7}
 80153da:	b083      	sub	sp, #12
 80153dc:	af00      	add	r7, sp, #0
 80153de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	4618      	mov	r0, r3
 80153e4:	370c      	adds	r7, #12
 80153e6:	46bd      	mov	sp, r7
 80153e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ec:	4770      	bx	lr

080153ee <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b082      	sub	sp, #8
 80153f2:	af00      	add	r7, sp, #0
 80153f4:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f7ff ffbd 	bl	8015376 <_ZSt10destroy_atImEvPT_>
    }
 80153fc:	bf00      	nop
 80153fe:	3708      	adds	r7, #8
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8015404:	b480      	push	{r7}
 8015406:	b083      	sub	sp, #12
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	370c      	adds	r7, #12
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr

0801541c <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
 8015424:	6039      	str	r1, [r7, #0]
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	60fb      	str	r3, [r7, #12]
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801542e:	f7ec f80b 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d006      	beq.n	8015446 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	00db      	lsls	r3, r3, #3
 801543c:	4618      	mov	r0, r3
 801543e:	f010 fe33 	bl	80260a8 <_Znwj>
 8015442:	4603      	mov	r3, r0
 8015444:	e006      	b.n	8015454 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8015446:	2200      	movs	r2, #0
 8015448:	68b9      	ldr	r1, [r7, #8]
 801544a:	68f8      	ldr	r0, [r7, #12]
 801544c:	f000 fbd4 	bl	8015bf8 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>
 8015450:	4603      	mov	r3, r0
 8015452:	bf00      	nop
      { return __a.allocate(__n); }
 8015454:	4618      	mov	r0, r3
 8015456:	3710      	adds	r7, #16
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8015464:	687b      	ldr	r3, [r7, #4]
    }
 8015466:	4618      	mov	r0, r3
 8015468:	370c      	adds	r7, #12
 801546a:	46bd      	mov	sp, r7
 801546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015470:	4770      	bx	lr

08015472 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8015472:	b480      	push	{r7}
 8015474:	b083      	sub	sp, #12
 8015476:	af00      	add	r7, sp, #0
 8015478:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	370c      	adds	r7, #12
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8015488:	b580      	push	{r7, lr}
 801548a:	b082      	sub	sp, #8
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8015492:	6838      	ldr	r0, [r7, #0]
 8015494:	f000 fa53 	bl	801593e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 8015498:	bf00      	nop
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}

080154a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b088      	sub	sp, #32
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	607a      	str	r2, [r7, #4]
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	61fb      	str	r3, [r7, #28]
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	61bb      	str	r3, [r7, #24]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80154b8:	f7eb ffc6 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80154bc:	4603      	mov	r3, r0
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d003      	beq.n	80154ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80154c2:	69b8      	ldr	r0, [r7, #24]
 80154c4:	f010 fdec 	bl	80260a0 <_ZdlPv>
	    return;
 80154c8:	e005      	b.n	80154d6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80154ca:	697a      	ldr	r2, [r7, #20]
 80154cc:	69b9      	ldr	r1, [r7, #24]
 80154ce:	69f8      	ldr	r0, [r7, #28]
 80154d0:	f000 fbb1 	bl	8015c36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80154d4:	bf00      	nop
 80154d6:	bf00      	nop
 80154d8:	3720      	adds	r7, #32
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}

080154de <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
 80154e6:	6039      	str	r1, [r7, #0]
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	4618      	mov	r0, r3
 80154ec:	370c      	adds	r7, #12
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 80154f6:	b590      	push	{r4, r7, lr}
 80154f8:	b085      	sub	sp, #20
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	60f8      	str	r0, [r7, #12]
 80154fe:	60b9      	str	r1, [r7, #8]
 8015500:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8015502:	68f8      	ldr	r0, [r7, #12]
 8015504:	f000 fa25 	bl	8015952 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8015508:	4604      	mov	r4, r0
 801550a:	68b8      	ldr	r0, [r7, #8]
 801550c:	f000 fa21 	bl	8015952 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8015510:	4603      	mov	r3, r0
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	4619      	mov	r1, r3
 8015516:	4620      	mov	r0, r4
 8015518:	f000 fa26 	bl	8015968 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 801551c:	4603      	mov	r3, r0
    }
 801551e:	4618      	mov	r0, r3
 8015520:	3714      	adds	r7, #20
 8015522:	46bd      	mov	sp, r7
 8015524:	bd90      	pop	{r4, r7, pc}

08015526 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8015526:	b480      	push	{r7}
 8015528:	b083      	sub	sp, #12
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr

0801553c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
 8015544:	6039      	str	r1, [r7, #0]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	60fb      	str	r3, [r7, #12]
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801554e:	f7eb ff7b 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d006      	beq.n	8015566 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	015b      	lsls	r3, r3, #5
 801555c:	4618      	mov	r0, r3
 801555e:	f010 fda3 	bl	80260a8 <_Znwj>
 8015562:	4603      	mov	r3, r0
 8015564:	e006      	b.n	8015574 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8015566:	2200      	movs	r2, #0
 8015568:	68b9      	ldr	r1, [r7, #8]
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f000 fb9c 	bl	8015ca8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>
 8015570:	4603      	mov	r3, r0
 8015572:	bf00      	nop
      { return __a.allocate(__n); }
 8015574:	4618      	mov	r0, r3
 8015576:	3710      	adds	r7, #16
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <_ZNSt5tupleIJRKhEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	683a      	ldr	r2, [r7, #0]
 801558a:	4611      	mov	r1, r2
 801558c:	4618      	mov	r0, r3
 801558e:	f000 fa0e 	bl	80159ae <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	4618      	mov	r0, r3
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801559c:	b5b0      	push	{r4, r5, r7, lr}
 801559e:	b088      	sub	sp, #32
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80155aa:	68b8      	ldr	r0, [r7, #8]
 80155ac:	f7fe fc93 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7fe fc9b 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80155b6:	4602      	mov	r2, r0
 80155b8:	f107 0318 	add.w	r3, r7, #24
 80155bc:	4611      	mov	r1, r2
 80155be:	4618      	mov	r0, r3
 80155c0:	f7ff ffdc 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 80155c4:	f107 0418 	add.w	r4, r7, #24
 80155c8:	6838      	ldr	r0, [r7, #0]
 80155ca:	f7fe fc9a 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	4619      	mov	r1, r3
 80155d2:	2010      	movs	r0, #16
 80155d4:	f7eb ff40 	bl	8001458 <_ZnwjPv>
 80155d8:	4605      	mov	r5, r0
 80155da:	7f3b      	ldrb	r3, [r7, #28]
 80155dc:	4622      	mov	r2, r4
 80155de:	7d39      	ldrb	r1, [r7, #20]
 80155e0:	4628      	mov	r0, r5
 80155e2:	f000 fa1b 	bl	8015a1c <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80155e6:	462b      	mov	r3, r5
 80155e8:	4618      	mov	r0, r3
 80155ea:	3720      	adds	r7, #32
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bdb0      	pop	{r4, r5, r7, pc}

080155f0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80155f0:	b5b0      	push	{r4, r5, r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	607a      	str	r2, [r7, #4]
 80155fc:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7fe fc69 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8015604:	4604      	mov	r4, r0
 8015606:	6838      	ldr	r0, [r7, #0]
 8015608:	f7fe fc70 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801560c:	4605      	mov	r5, r0
 801560e:	6a38      	ldr	r0, [r7, #32]
 8015610:	f7fe fc77 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8015614:	4603      	mov	r3, r0
 8015616:	462a      	mov	r2, r5
 8015618:	4621      	mov	r1, r4
 801561a:	68b8      	ldr	r0, [r7, #8]
 801561c:	f7ff ffbe 	bl	801559c <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8015620:	bf00      	nop
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bdb0      	pop	{r4, r5, r7, pc}

08015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015628:	b480      	push	{r7}
 801562a:	b083      	sub	sp, #12
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	4618      	mov	r0, r3
 8015634:	370c      	adds	r7, #12
 8015636:	46bd      	mov	sp, r7
 8015638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801563c:	4770      	bx	lr

0801563e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801563e:	b580      	push	{r7, lr}
 8015640:	b084      	sub	sp, #16
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	68da      	ldr	r2, [r3, #12]
 801564a:	f107 030c 	add.w	r3, r7, #12
 801564e:	4611      	mov	r1, r2
 8015650:	4618      	mov	r0, r3
 8015652:	f7fe fdf7 	bl	8014244 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	4618      	mov	r0, r3
 801565a:	3710      	adds	r7, #16
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8015660:	b580      	push	{r7, lr}
 8015662:	b084      	sub	sp, #16
 8015664:	af00      	add	r7, sp, #0
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801566c:	68b8      	ldr	r0, [r7, #8]
 801566e:	f000 f9e9 	bl	8015a44 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8015672:	4603      	mov	r3, r0
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	601a      	str	r2, [r3, #0]
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7ff ffd4 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8015680:	4603      	mov	r3, r0
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	605a      	str	r2, [r3, #4]
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	4618      	mov	r0, r3
 801568c:	3710      	adds	r7, #16
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8015692:	b580      	push	{r7, lr}
 8015694:	b082      	sub	sp, #8
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f9dd 	bl	8015a5a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 80156a0:	4603      	mov	r3, r0
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80156aa:	b480      	push	{r7}
 80156ac:	b083      	sub	sp, #12
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	689b      	ldr	r3, [r3, #8]
 80156b6:	4618      	mov	r0, r3
 80156b8:	370c      	adds	r7, #12
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr

080156c2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 80156c2:	b480      	push	{r7}
 80156c4:	b083      	sub	sp, #12
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	4618      	mov	r0, r3
 80156ce:	370c      	adds	r7, #12
 80156d0:	46bd      	mov	sp, r7
 80156d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d6:	4770      	bx	lr

080156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	4618      	mov	r0, r3
 80156e4:	370c      	adds	r7, #12
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr

080156ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b084      	sub	sp, #16
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	6078      	str	r0, [r7, #4]
 80156f6:	6039      	str	r1, [r7, #0]
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	60fb      	str	r3, [r7, #12]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8015700:	f7eb fea2 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015704:	4603      	mov	r3, r0
 8015706:	2b00      	cmp	r3, #0
 8015708:	d009      	beq.n	801571e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801570a:	68ba      	ldr	r2, [r7, #8]
 801570c:	4613      	mov	r3, r2
 801570e:	00db      	lsls	r3, r3, #3
 8015710:	4413      	add	r3, r2
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	4618      	mov	r0, r3
 8015716:	f010 fcc7 	bl	80260a8 <_Znwj>
 801571a:	4603      	mov	r3, r0
 801571c:	e006      	b.n	801572c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801571e:	2200      	movs	r2, #0
 8015720:	68b9      	ldr	r1, [r7, #8]
 8015722:	68f8      	ldr	r0, [r7, #12]
 8015724:	f000 faf9 	bl	8015d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 8015728:	4603      	mov	r3, r0
 801572a:	bf00      	nop
      { return __a.allocate(__n); }
 801572c:	4618      	mov	r0, r3
 801572e:	3710      	adds	r7, #16
 8015730:	46bd      	mov	sp, r7
 8015732:	bd80      	pop	{r7, pc}

08015734 <_ZNSt5tupleIJRK3PinEEC1EOS3_>:
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	6039      	str	r1, [r7, #0]
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	683a      	ldr	r2, [r7, #0]
 8015742:	4611      	mov	r1, r2
 8015744:	4618      	mov	r0, r3
 8015746:	f000 f993 	bl	8015a70 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	4618      	mov	r0, r3
 801574e:	3708      	adds	r7, #8
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}

08015754 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8015754:	b5b0      	push	{r4, r5, r7, lr}
 8015756:	b088      	sub	sp, #32
 8015758:	af00      	add	r7, sp, #0
 801575a:	60f8      	str	r0, [r7, #12]
 801575c:	60b9      	str	r1, [r7, #8]
 801575e:	607a      	str	r2, [r7, #4]
 8015760:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8015762:	68b8      	ldr	r0, [r7, #8]
 8015764:	f7fe fbb7 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f7fe fdca 	bl	8014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801576e:	4602      	mov	r2, r0
 8015770:	f107 0318 	add.w	r3, r7, #24
 8015774:	4611      	mov	r1, r2
 8015776:	4618      	mov	r0, r3
 8015778:	f7ff ffdc 	bl	8015734 <_ZNSt5tupleIJRK3PinEEC1EOS3_>
 801577c:	f107 0418 	add.w	r4, r7, #24
 8015780:	6838      	ldr	r0, [r7, #0]
 8015782:	f7fe fbbe 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	4619      	mov	r1, r3
 801578a:	2014      	movs	r0, #20
 801578c:	f7eb fe64 	bl	8001458 <_ZnwjPv>
 8015790:	4605      	mov	r5, r0
 8015792:	7f3b      	ldrb	r3, [r7, #28]
 8015794:	4622      	mov	r2, r4
 8015796:	7d39      	ldrb	r1, [r7, #20]
 8015798:	4628      	mov	r0, r5
 801579a:	f000 f9a2 	bl	8015ae2 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 801579e:	462b      	mov	r3, r5
 80157a0:	4618      	mov	r0, r3
 80157a2:	3720      	adds	r7, #32
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bdb0      	pop	{r4, r5, r7, pc}

080157a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80157a8:	b5b0      	push	{r4, r5, r7, lr}
 80157aa:	b084      	sub	sp, #16
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	60f8      	str	r0, [r7, #12]
 80157b0:	60b9      	str	r1, [r7, #8]
 80157b2:	607a      	str	r2, [r7, #4]
 80157b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f7fe fb8d 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80157bc:	4604      	mov	r4, r0
 80157be:	6838      	ldr	r0, [r7, #0]
 80157c0:	f7fe fd9f 	bl	8014302 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80157c4:	4605      	mov	r5, r0
 80157c6:	6a38      	ldr	r0, [r7, #32]
 80157c8:	f7fe fb9b 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80157cc:	4603      	mov	r3, r0
 80157ce:	462a      	mov	r2, r5
 80157d0:	4621      	mov	r1, r4
 80157d2:	68b8      	ldr	r0, [r7, #8]
 80157d4:	f7ff ffbe 	bl	8015754 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80157d8:	bf00      	nop
 80157da:	3710      	adds	r7, #16
 80157dc:	46bd      	mov	sp, r7
 80157de:	bdb0      	pop	{r4, r5, r7, pc}

080157e0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	68da      	ldr	r2, [r3, #12]
 80157ec:	f107 030c 	add.w	r3, r7, #12
 80157f0:	4611      	mov	r1, r2
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fe ff37 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	4618      	mov	r0, r3
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}

08015802 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8015802:	b580      	push	{r7, lr}
 8015804:	b084      	sub	sp, #16
 8015806:	af00      	add	r7, sp, #0
 8015808:	60f8      	str	r0, [r7, #12]
 801580a:	60b9      	str	r1, [r7, #8]
 801580c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801580e:	68b8      	ldr	r0, [r7, #8]
 8015810:	f000 f97b 	bl	8015b0a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8015814:	4603      	mov	r3, r0
 8015816:	681a      	ldr	r2, [r3, #0]
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	601a      	str	r2, [r3, #0]
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7ff ff03 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8015822:	4603      	mov	r3, r0
 8015824:	681a      	ldr	r2, [r3, #0]
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	605a      	str	r2, [r3, #4]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	4618      	mov	r0, r3
 801582e:	3710      	adds	r7, #16
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f000 f96f 	bl	8015b20 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8015842:	4603      	mov	r3, r0
 8015844:	4618      	mov	r0, r3
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801584c:	b580      	push	{r7, lr}
 801584e:	b082      	sub	sp, #8
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8015856:	6838      	ldr	r0, [r7, #0]
 8015858:	f000 f96d 	bl	8015b36 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}

08015864 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8015864:	b580      	push	{r7, lr}
 8015866:	b088      	sub	sp, #32
 8015868:	af00      	add	r7, sp, #0
 801586a:	60f8      	str	r0, [r7, #12]
 801586c:	60b9      	str	r1, [r7, #8]
 801586e:	607a      	str	r2, [r7, #4]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	61fb      	str	r3, [r7, #28]
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	61bb      	str	r3, [r7, #24]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801587c:	f7eb fde4 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	d003      	beq.n	801588e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8015886:	69b8      	ldr	r0, [r7, #24]
 8015888:	f010 fc0a 	bl	80260a0 <_ZdlPv>
	    return;
 801588c:	e005      	b.n	801589a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801588e:	697a      	ldr	r2, [r7, #20]
 8015890:	69b9      	ldr	r1, [r7, #24]
 8015892:	69f8      	ldr	r0, [r7, #28]
 8015894:	f000 fa88 	bl	8015da8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8015898:	bf00      	nop
 801589a:	bf00      	nop
 801589c:	3720      	adds	r7, #32
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd80      	pop	{r7, pc}

080158a2 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80158a2:	b480      	push	{r7}
 80158a4:	b083      	sub	sp, #12
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	4618      	mov	r0, r3
 80158ae:	370c      	adds	r7, #12
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr

080158b8 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80158b8:	b480      	push	{r7}
 80158ba:	b083      	sub	sp, #12
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80158c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80158c4:	4618      	mov	r0, r3
 80158c6:	370c      	adds	r7, #12
 80158c8:	46bd      	mov	sp, r7
 80158ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ce:	4770      	bx	lr

080158d0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b084      	sub	sp, #16
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80158d8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80158dc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f7ff ffea 	bl	80158b8 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 80158e4:	4603      	mov	r3, r0
 80158e6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80158e8:	f107 0208 	add.w	r2, r7, #8
 80158ec:	f107 030c 	add.w	r3, r7, #12
 80158f0:	4611      	mov	r1, r2
 80158f2:	4618      	mov	r0, r3
 80158f4:	f7fb fe10 	bl	8011518 <_ZSt3minIjERKT_S2_S2_>
 80158f8:	4603      	mov	r3, r0
 80158fa:	681b      	ldr	r3, [r3, #0]
      }
 80158fc:	4618      	mov	r0, r3
 80158fe:	3710      	adds	r7, #16
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}

08015904 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8015904:	b5b0      	push	{r4, r5, r7, lr}
 8015906:	b084      	sub	sp, #16
 8015908:	af00      	add	r7, sp, #0
 801590a:	60f8      	str	r0, [r7, #12]
 801590c:	60b9      	str	r1, [r7, #8]
 801590e:	607a      	str	r2, [r7, #4]
 8015910:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f000 f947 	bl	8015ba6 <_ZSt12__niter_baseIPmET_S1_>
 8015918:	4604      	mov	r4, r0
 801591a:	68b8      	ldr	r0, [r7, #8]
 801591c:	f000 f943 	bl	8015ba6 <_ZSt12__niter_baseIPmET_S1_>
 8015920:	4605      	mov	r5, r0
 8015922:	6878      	ldr	r0, [r7, #4]
 8015924:	f000 f93f 	bl	8015ba6 <_ZSt12__niter_baseIPmET_S1_>
 8015928:	4602      	mov	r2, r0
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	4629      	mov	r1, r5
 801592e:	4620      	mov	r0, r4
 8015930:	f000 f944 	bl	8015bbc <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8015934:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8015936:	4618      	mov	r0, r3
 8015938:	3710      	adds	r7, #16
 801593a:	46bd      	mov	sp, r7
 801593c:	bdb0      	pop	{r4, r5, r7, pc}

0801593e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801593e:	b480      	push	{r7}
 8015940:	b083      	sub	sp, #12
 8015942:	af00      	add	r7, sp, #0
 8015944:	6078      	str	r0, [r7, #4]
    }
 8015946:	bf00      	nop
 8015948:	370c      	adds	r7, #12
 801594a:	46bd      	mov	sp, r7
 801594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015950:	4770      	bx	lr

08015952 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8015952:	b480      	push	{r7}
 8015954:	b083      	sub	sp, #12
 8015956:	af00      	add	r7, sp, #0
 8015958:	6078      	str	r0, [r7, #4]
    { return __it; }
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8015968:	b5b0      	push	{r4, r5, r7, lr}
 801596a:	b084      	sub	sp, #16
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f000 f96d 	bl	8015c54 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801597a:	4604      	mov	r4, r0
 801597c:	68b8      	ldr	r0, [r7, #8]
 801597e:	f000 f969 	bl	8015c54 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8015982:	4605      	mov	r5, r0
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	f000 f90d 	bl	8015ba6 <_ZSt12__niter_baseIPmET_S1_>
 801598c:	4603      	mov	r3, r0
 801598e:	461a      	mov	r2, r3
 8015990:	4629      	mov	r1, r5
 8015992:	4620      	mov	r0, r4
 8015994:	f000 f96c 	bl	8015c70 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 8015998:	4602      	mov	r2, r0
 801599a:	1d3b      	adds	r3, r7, #4
 801599c:	4611      	mov	r1, r2
 801599e:	4618      	mov	r0, r3
 80159a0:	f000 f976 	bl	8015c90 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 80159a4:	4603      	mov	r3, r0
    }
 80159a6:	4618      	mov	r0, r3
 80159a8:	3710      	adds	r7, #16
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bdb0      	pop	{r4, r5, r7, pc}

080159ae <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80159ae:	b590      	push	{r4, r7, lr}
 80159b0:	b083      	sub	sp, #12
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6078      	str	r0, [r7, #4]
 80159b6:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80159b8:	687c      	ldr	r4, [r7, #4]
 80159ba:	6838      	ldr	r0, [r7, #0]
 80159bc:	f000 f993 	bl	8015ce6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 80159c0:	4603      	mov	r3, r0
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ff f828 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80159c8:	4603      	mov	r3, r0
 80159ca:	4619      	mov	r1, r3
 80159cc:	4620      	mov	r0, r4
 80159ce:	f7ff f907 	bl	8014be0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	4618      	mov	r0, r3
 80159d6:	370c      	adds	r7, #12
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd90      	pop	{r4, r7, pc}

080159dc <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	607a      	str	r2, [r7, #4]
 80159e8:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80159ea:	68b8      	ldr	r0, [r7, #8]
 80159ec:	f000 f988 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80159f0:	4603      	mov	r3, r0
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7ff f810 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80159f8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80159fa:	781a      	ldrb	r2, [r3, #0]
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	701a      	strb	r2, [r3, #0]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2200      	movs	r2, #0
 8015a04:	605a      	str	r2, [r3, #4]
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	2200      	movs	r2, #0
 8015a0a:	609a      	str	r2, [r3, #8]
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	2200      	movs	r2, #0
 8015a10:	60da      	str	r2, [r3, #12]
      { }
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	4618      	mov	r0, r3
 8015a16:	3710      	adds	r7, #16
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8015a1c:	b5b0      	push	{r4, r5, r7, lr}
 8015a1e:	b086      	sub	sp, #24
 8015a20:	af02      	add	r7, sp, #8
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	7239      	strb	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
 8015a28:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8015a2a:	463a      	mov	r2, r7
 8015a2c:	f88d 4000 	strb.w	r4, [sp]
 8015a30:	462b      	mov	r3, r5
 8015a32:	6879      	ldr	r1, [r7, #4]
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	f7ff ffd1 	bl	80159dc <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3710      	adds	r7, #16
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bdb0      	pop	{r4, r5, r7, pc}

08015a44 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	370c      	adds	r7, #12
 8015a52:	46bd      	mov	sp, r7
 8015a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a58:	4770      	bx	lr

08015a5a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8015a5a:	b480      	push	{r7}
 8015a5c:	b083      	sub	sp, #12
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	4618      	mov	r0, r3
 8015a66:	370c      	adds	r7, #12
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6e:	4770      	bx	lr

08015a70 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8015a70:	b590      	push	{r4, r7, lr}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
 8015a78:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8015a7a:	687c      	ldr	r4, [r7, #4]
 8015a7c:	6838      	ldr	r0, [r7, #0]
 8015a7e:	f000 f96e 	bl	8015d5e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 8015a82:	4603      	mov	r3, r0
 8015a84:	4618      	mov	r0, r3
 8015a86:	f000 f977 	bl	8015d78 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	4620      	mov	r0, r4
 8015a90:	f7ff fa83 	bl	8014f9a <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	4618      	mov	r0, r3
 8015a98:	370c      	adds	r7, #12
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd90      	pop	{r4, r7, pc}

08015a9e <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8015a9e:	b580      	push	{r7, lr}
 8015aa0:	b084      	sub	sp, #16
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	60f8      	str	r0, [r7, #12]
 8015aa6:	60b9      	str	r1, [r7, #8]
 8015aa8:	607a      	str	r2, [r7, #4]
 8015aaa:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8015aac:	68b8      	ldr	r0, [r7, #8]
 8015aae:	f000 f96e 	bl	8015d8e <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f000 f95f 	bl	8015d78 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 8015aba:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ac2:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	609a      	str	r2, [r3, #8]
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	60da      	str	r2, [r3, #12]
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	611a      	str	r2, [r3, #16]
      { }
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	4618      	mov	r0, r3
 8015adc:	3710      	adds	r7, #16
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}

08015ae2 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8015ae2:	b5b0      	push	{r4, r5, r7, lr}
 8015ae4:	b086      	sub	sp, #24
 8015ae6:	af02      	add	r7, sp, #8
 8015ae8:	60f8      	str	r0, [r7, #12]
 8015aea:	7239      	strb	r1, [r7, #8]
 8015aec:	607a      	str	r2, [r7, #4]
 8015aee:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8015af0:	463a      	mov	r2, r7
 8015af2:	f88d 4000 	strb.w	r4, [sp]
 8015af6:	462b      	mov	r3, r5
 8015af8:	6879      	ldr	r1, [r7, #4]
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f7ff ffcf 	bl	8015a9e <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bdb0      	pop	{r4, r5, r7, pc}

08015b0a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015b0a:	b480      	push	{r7}
 8015b0c:	b083      	sub	sp, #12
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	4618      	mov	r0, r3
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1e:	4770      	bx	lr

08015b20 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8015b20:	b480      	push	{r7}
 8015b22:	b083      	sub	sp, #12
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	370c      	adds	r7, #12
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr

08015b36 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8015b36:	b480      	push	{r7}
 8015b38:	b083      	sub	sp, #12
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
    }
 8015b3e:	bf00      	nop
 8015b40:	370c      	adds	r7, #12
 8015b42:	46bd      	mov	sp, r7
 8015b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b48:	4770      	bx	lr

08015b4a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b084      	sub	sp, #16
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	60b9      	str	r1, [r7, #8]
 8015b54:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	00db      	lsls	r3, r3, #3
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	68b8      	ldr	r0, [r7, #8]
 8015b5e:	f010 faa1 	bl	80260a4 <_ZdlPvj>
      }
 8015b62:	3710      	adds	r7, #16
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}

08015b68 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b084      	sub	sp, #16
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	60f8      	str	r0, [r7, #12]
 8015b70:	60b9      	str	r1, [r7, #8]
 8015b72:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8015b74:	68f8      	ldr	r0, [r7, #12]
 8015b76:	f000 f929 	bl	8015dcc <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 8015b7a:	4602      	mov	r2, r0
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	4293      	cmp	r3, r2
 8015b80:	bf8c      	ite	hi
 8015b82:	2301      	movhi	r3, #1
 8015b84:	2300      	movls	r3, #0
 8015b86:	b2db      	uxtb	r3, r3
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d001      	beq.n	8015b90 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015b8c:	f010 fb50 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015b90:	68bb      	ldr	r3, [r7, #8]
 8015b92:	009b      	lsls	r3, r3, #2
 8015b94:	4618      	mov	r0, r3
 8015b96:	f010 fa87 	bl	80260a8 <_Znwj>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	bf00      	nop
      }
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3710      	adds	r7, #16
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}

08015ba6 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 8015ba6:	b480      	push	{r7}
 8015ba8:	b083      	sub	sp, #12
 8015baa:	af00      	add	r7, sp, #0
 8015bac:	6078      	str	r0, [r7, #4]
    { return __it; }
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	370c      	adds	r7, #12
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bba:	4770      	bx	lr

08015bbc <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b086      	sub	sp, #24
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	607a      	str	r2, [r7, #4]
 8015bc8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8015bca:	68ba      	ldr	r2, [r7, #8]
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	1ad3      	subs	r3, r2, r3
 8015bd0:	109b      	asrs	r3, r3, #2
 8015bd2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	dd06      	ble.n	8015be8 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	009b      	lsls	r3, r3, #2
 8015bde:	461a      	mov	r2, r3
 8015be0:	68f9      	ldr	r1, [r7, #12]
 8015be2:	6878      	ldr	r0, [r7, #4]
 8015be4:	f010 fb86 	bl	80262f4 <memmove>
      return __result + __count;
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	687a      	ldr	r2, [r7, #4]
 8015bee:	4413      	add	r3, r2
    }
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3718      	adds	r7, #24
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}

08015bf8 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	b084      	sub	sp, #16
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	60f8      	str	r0, [r7, #12]
 8015c00:	60b9      	str	r1, [r7, #8]
 8015c02:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8015c04:	68f8      	ldr	r0, [r7, #12]
 8015c06:	f000 f8ed 	bl	8015de4 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	bf8c      	ite	hi
 8015c12:	2301      	movhi	r3, #1
 8015c14:	2300      	movls	r3, #0
 8015c16:	b2db      	uxtb	r3, r3
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d001      	beq.n	8015c20 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015c1c:	f010 fb08 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	00db      	lsls	r3, r3, #3
 8015c24:	4618      	mov	r0, r3
 8015c26:	f010 fa3f 	bl	80260a8 <_Znwj>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	bf00      	nop
      }
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3710      	adds	r7, #16
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b084      	sub	sp, #16
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	60f8      	str	r0, [r7, #12]
 8015c3e:	60b9      	str	r1, [r7, #8]
 8015c40:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	015b      	lsls	r3, r3, #5
 8015c46:	4619      	mov	r1, r3
 8015c48:	68b8      	ldr	r0, [r7, #8]
 8015c4a:	f010 fa2b 	bl	80260a4 <_ZdlPvj>
      }
 8015c4e:	3710      	adds	r7, #16
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 8015c5c:	1d3b      	adds	r3, r7, #4
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f000 f8cc 	bl	8015dfc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 8015c64:	4603      	mov	r3, r0
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3708      	adds	r7, #8
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	68b9      	ldr	r1, [r7, #8]
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f000 f8c6 	bl	8015e12 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 8015c86:	4603      	mov	r3, r0
 8015c88:	4618      	mov	r0, r3
 8015c8a:	3710      	adds	r7, #16
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd80      	pop	{r7, pc}

08015c90 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8015c90:	b480      	push	{r7}
 8015c92:	b083      	sub	sp, #12
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]
    { return __res; }
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	370c      	adds	r7, #12
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b084      	sub	sp, #16
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	60b9      	str	r1, [r7, #8]
 8015cb2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f000 f8c9 	bl	8015e4c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>
 8015cba:	4602      	mov	r2, r0
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	bf8c      	ite	hi
 8015cc2:	2301      	movhi	r3, #1
 8015cc4:	2300      	movls	r3, #0
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d001      	beq.n	8015cd0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015ccc:	f010 fab0 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	015b      	lsls	r3, r3, #5
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f010 f9e7 	bl	80260a8 <_Znwj>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	bf00      	nop
      }
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3710      	adds	r7, #16
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}

08015ce6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8015ce6:	b580      	push	{r7, lr}
 8015ce8:	b082      	sub	sp, #8
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f000 f8b7 	bl	8015e64 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	3708      	adds	r7, #8
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f000 f8b6 	bl	8015e7c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8015d10:	4603      	mov	r3, r0
 8015d12:	4618      	mov	r0, r3
 8015d14:	3708      	adds	r7, #8
 8015d16:	46bd      	mov	sp, r7
 8015d18:	bd80      	pop	{r7, pc}

08015d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8015d1a:	b580      	push	{r7, lr}
 8015d1c:	b084      	sub	sp, #16
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	60f8      	str	r0, [r7, #12]
 8015d22:	60b9      	str	r1, [r7, #8]
 8015d24:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8015d26:	68f8      	ldr	r0, [r7, #12]
 8015d28:	f000 f8b4 	bl	8015e94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	4293      	cmp	r3, r2
 8015d32:	bf8c      	ite	hi
 8015d34:	2301      	movhi	r3, #1
 8015d36:	2300      	movls	r3, #0
 8015d38:	b2db      	uxtb	r3, r3
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d001      	beq.n	8015d42 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8015d3e:	f010 fa77 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8015d42:	68ba      	ldr	r2, [r7, #8]
 8015d44:	4613      	mov	r3, r2
 8015d46:	00db      	lsls	r3, r3, #3
 8015d48:	4413      	add	r3, r2
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f010 f9ab 	bl	80260a8 <_Znwj>
 8015d52:	4603      	mov	r3, r0
 8015d54:	bf00      	nop
      }
 8015d56:	4618      	mov	r0, r3
 8015d58:	3710      	adds	r7, #16
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8015d5e:	b580      	push	{r7, lr}
 8015d60:	b082      	sub	sp, #8
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f000 f8a1 	bl	8015eb0 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	4618      	mov	r0, r3
 8015d72:	3708      	adds	r7, #8
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015d78:	b480      	push	{r7}
 8015d7a:	b083      	sub	sp, #12
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	4618      	mov	r0, r3
 8015d84:	370c      	adds	r7, #12
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr

08015d8e <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b082      	sub	sp, #8
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f000 f895 	bl	8015ec8 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	4618      	mov	r0, r3
 8015da2:	3708      	adds	r7, #8
 8015da4:	46bd      	mov	sp, r7
 8015da6:	bd80      	pop	{r7, pc}

08015da8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b084      	sub	sp, #16
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	60f8      	str	r0, [r7, #12]
 8015db0:	60b9      	str	r1, [r7, #8]
 8015db2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	4613      	mov	r3, r2
 8015db8:	00db      	lsls	r3, r3, #3
 8015dba:	4413      	add	r3, r2
 8015dbc:	009b      	lsls	r3, r3, #2
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	68b8      	ldr	r0, [r7, #8]
 8015dc2:	f010 f96f 	bl	80260a4 <_ZdlPvj>
      }
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015dcc:	b480      	push	{r7}
 8015dce:	b083      	sub	sp, #12
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015dd4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8015dd8:	4618      	mov	r0, r3
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr

08015de4 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015dec:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8015df0:	4618      	mov	r0, r3
 8015df2:	370c      	adds	r7, #12
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr

08015dfc <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	4618      	mov	r0, r3
 8015e08:	370c      	adds	r7, #12
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr

08015e12 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b084      	sub	sp, #16
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	60f8      	str	r0, [r7, #12]
 8015e1a:	60b9      	str	r1, [r7, #8]
 8015e1c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8015e1e:	f7eb fb13 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d006      	beq.n	8015e36 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	68b9      	ldr	r1, [r7, #8]
 8015e2c:	68f8      	ldr	r0, [r7, #12]
 8015e2e:	f000 f857 	bl	8015ee0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 8015e32:	4603      	mov	r3, r0
 8015e34:	e006      	b.n	8015e44 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	68b9      	ldr	r1, [r7, #8]
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f000 f873 	bl	8015f26 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8015e40:	4603      	mov	r3, r0
 8015e42:	bf00      	nop
    }
 8015e44:	4618      	mov	r0, r3
 8015e46:	3710      	adds	r7, #16
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015e54:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8015e58:	4618      	mov	r0, r3
 8015e5a:	370c      	adds	r7, #12
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8015e64:	b480      	push	{r7}
 8015e66:	b083      	sub	sp, #12
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	4618      	mov	r0, r3
 8015e72:	370c      	adds	r7, #12
 8015e74:	46bd      	mov	sp, r7
 8015e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7a:	4770      	bx	lr

08015e7c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f7ff ff2e 	bl	8015ce6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	3708      	adds	r7, #8
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8015e94:	b480      	push	{r7}
 8015e96:	b083      	sub	sp, #12
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8015e9c:	4b03      	ldr	r3, [pc, #12]	; (8015eac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	370c      	adds	r7, #12
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea8:	4770      	bx	lr
 8015eaa:	bf00      	nop
 8015eac:	038e38e3 	.word	0x038e38e3

08015eb0 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8015eb0:	b480      	push	{r7}
 8015eb2:	b083      	sub	sp, #12
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	370c      	adds	r7, #12
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec6:	4770      	bx	lr

08015ec8 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b082      	sub	sp, #8
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f7ff ff44 	bl	8015d5e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	4618      	mov	r0, r3
 8015eda:	3708      	adds	r7, #8
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bd80      	pop	{r7, pc}

08015ee0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8015ee0:	b480      	push	{r7}
 8015ee2:	b087      	sub	sp, #28
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8015eec:	68ba      	ldr	r2, [r7, #8]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	109b      	asrs	r3, r3, #2
 8015ef4:	617b      	str	r3, [r7, #20]
 8015ef6:	697b      	ldr	r3, [r7, #20]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	dd0d      	ble.n	8015f18 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	681a      	ldr	r2, [r3, #0]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	601a      	str	r2, [r3, #0]
	      ++__first;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	3304      	adds	r3, #4
 8015f08:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	3304      	adds	r3, #4
 8015f0e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	3b01      	subs	r3, #1
 8015f14:	617b      	str	r3, [r7, #20]
 8015f16:	e7ee      	b.n	8015ef6 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 8015f18:	687b      	ldr	r3, [r7, #4]
	}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	371c      	adds	r7, #28
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr

08015f26 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b086      	sub	sp, #24
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	60f8      	str	r0, [r7, #12]
 8015f2e:	60b9      	str	r1, [r7, #8]
 8015f30:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8015f32:	68ba      	ldr	r2, [r7, #8]
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	1ad3      	subs	r3, r2, r3
 8015f38:	109b      	asrs	r3, r3, #2
 8015f3a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d006      	beq.n	8015f50 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	009b      	lsls	r3, r3, #2
 8015f46:	461a      	mov	r2, r3
 8015f48:	68f9      	ldr	r1, [r7, #12]
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f010 f9d2 	bl	80262f4 <memmove>
	  return __result + _Num;
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	009b      	lsls	r3, r3, #2
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	4413      	add	r3, r2
	}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3718      	adds	r7, #24
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <_Z41__static_initialization_and_destruction_0ii>:
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b0c6      	sub	sp, #280	; 0x118
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015f6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015f6e:	6018      	str	r0, [r3, #0]
 8015f70:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015f74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8015f78:	6019      	str	r1, [r3, #0]
 8015f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015f7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d142      	bne.n	801600e <_Z41__static_initialization_and_destruction_0ii+0xae>
 8015f88:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015f8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f96:	4293      	cmp	r3, r2
 8015f98:	d139      	bne.n	801600e <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8015f9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8015fa2:	4a28      	ldr	r2, [pc, #160]	; (8016044 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015fac:	461a      	mov	r2, r3
 8015fae:	f010 f993 	bl	80262d8 <memcpy>
 8015fb2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015fb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015fba:	f107 0214 	add.w	r2, r7, #20
 8015fbe:	601a      	str	r2, [r3, #0]
 8015fc0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8015fc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8015fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fcc:	605a      	str	r2, [r3, #4]
 8015fce:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7fc fd9d 	bl	8012b12 <_ZNSaIhEC1Ev>
 8015fd8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8015fdc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8015fe0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8015fe4:	ca06      	ldmia	r2, {r1, r2}
 8015fe6:	4818      	ldr	r0, [pc, #96]	; (8016048 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8015fe8:	f7fc fdaa 	bl	8012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8015fec:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7fc fd9a 	bl	8012b2a <_ZNSaIhED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = {};
 8015ff6:	4b15      	ldr	r3, [pc, #84]	; (801604c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8015ff8:	461a      	mov	r2, r3
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	6013      	str	r3, [r2, #0]
 8015ffe:	6053      	str	r3, [r2, #4]
 8016000:	6093      	str	r3, [r2, #8]
 8016002:	60d3      	str	r3, [r2, #12]
 8016004:	6113      	str	r3, [r2, #16]
 8016006:	6153      	str	r3, [r2, #20]
 8016008:	4810      	ldr	r0, [pc, #64]	; (801604c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801600a:	f7fc fa10 	bl	801242e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 801600e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016012:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d10e      	bne.n	801603a <_Z41__static_initialization_and_destruction_0ii+0xda>
 801601c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8016020:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801602a:	4293      	cmp	r3, r2
 801602c:	d105      	bne.n	801603a <_Z41__static_initialization_and_destruction_0ii+0xda>
 801602e:	4807      	ldr	r0, [pc, #28]	; (801604c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8016030:	f7fc fa0a 	bl	8012448 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8016034:	4804      	ldr	r0, [pc, #16]	; (8016048 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8016036:	f7fc fdb1 	bl	8012b9c <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801603a:	bf00      	nop
 801603c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	08026828 	.word	0x08026828
 8016048:	24001110 	.word	0x24001110
 801604c:	24001114 	.word	0x24001114

08016050 <_GLOBAL__sub_I__ZN3ADC10id_managerE>:
 8016050:	b580      	push	{r7, lr}
 8016052:	af00      	add	r7, sp, #0
 8016054:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016058:	2001      	movs	r0, #1
 801605a:	f7ff ff81 	bl	8015f60 <_Z41__static_initialization_and_destruction_0ii>
 801605e:	bd80      	pop	{r7, pc}

08016060 <_GLOBAL__sub_D__ZN3ADC10id_managerE>:
 8016060:	b580      	push	{r7, lr}
 8016062:	af00      	add	r7, sp, #0
 8016064:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016068:	2000      	movs	r0, #0
 801606a:	f7ff ff79 	bl	8015f60 <_Z41__static_initialization_and_destruction_0ii>
 801606e:	bd80      	pop	{r7, pc}

08016070 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8016070:	b480      	push	{r7}
 8016072:	b083      	sub	sp, #12
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	689b      	ldr	r3, [r3, #8]
 801607c:	2b00      	cmp	r3, #0
 801607e:	bf0c      	ite	eq
 8016080:	2301      	moveq	r3, #1
 8016082:	2300      	movne	r3, #0
 8016084:	b2db      	uxtb	r3, r3
 8016086:	4618      	mov	r0, r3
 8016088:	370c      	adds	r7, #12
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr

08016092 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8016092:	b580      	push	{r7, lr}
 8016094:	b082      	sub	sp, #8
 8016096:	af00      	add	r7, sp, #0
 8016098:	6078      	str	r0, [r7, #4]
 801609a:	6878      	ldr	r0, [r7, #4]
 801609c:	f000 f8cb 	bl	8016236 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	4618      	mov	r0, r3
 80160a4:	3708      	adds	r7, #8
 80160a6:	46bd      	mov	sp, r7
 80160a8:	bd80      	pop	{r7, pc}

080160aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>:
      _Rb_tree() = default;
 80160aa:	b580      	push	{r7, lr}
 80160ac:	b082      	sub	sp, #8
 80160ae:	af00      	add	r7, sp, #0
 80160b0:	6078      	str	r0, [r7, #4]
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	4618      	mov	r0, r3
 80160b6:	f000 f8a9 	bl	801620c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	4618      	mov	r0, r3
 80160be:	3708      	adds	r7, #8
 80160c0:	46bd      	mov	sp, r7
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>:
      map() = default;
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ff ffeb 	bl	80160aa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EEC1Ev>
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	4618      	mov	r0, r3
 80160d8:	3708      	adds	r7, #8
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>:
      ~map() = default;
 80160de:	b580      	push	{r7, lr}
 80160e0:	b082      	sub	sp, #8
 80160e2:	af00      	add	r7, sp, #0
 80160e4:	6078      	str	r0, [r7, #4]
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f000 f8af 	bl	801624c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	4618      	mov	r0, r3
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <HAL_GPIO_EXTI_Callback>:
#include "EXTI/EXTI.hpp"

forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin) {
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	80fb      	strh	r3, [r7, #6]
	ExternalInterrupt::Instance& exti = ExternalInterrupt::instances[GPIO_Pin];
 8016102:	1dbb      	adds	r3, r7, #6
 8016104:	4619      	mov	r1, r3
 8016106:	4808      	ldr	r0, [pc, #32]	; (8016128 <HAL_GPIO_EXTI_Callback+0x30>)
 8016108:	f000 f8b6 	bl	8016278 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801610c:	60f8      	str	r0, [r7, #12]
	if (exti.is_on) {
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	7c1b      	ldrb	r3, [r3, #16]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <HAL_GPIO_EXTI_Callback+0x26>
		exti.action();
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	4618      	mov	r0, r3
 801611a:	f000 f909 	bl	8016330 <_ZNKSt8functionIFvvEEclEv>
	}
}
 801611e:	bf00      	nop
 8016120:	3710      	adds	r7, #16
 8016122:	46bd      	mov	sp, r7
 8016124:	bd80      	pop	{r7, pc}
 8016126:	bf00      	nop
 8016128:	240013e0 	.word	0x240013e0

0801612c <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE>:

optional<uint8_t> ExternalInterrupt::inscribe(Pin& pin, function<void()>&& action) {
 801612c:	b590      	push	{r4, r7, lr}
 801612e:	b087      	sub	sp, #28
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	6039      	str	r1, [r7, #0]
	if (not instances.contains(pin.gpio_pin)) {
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	889b      	ldrh	r3, [r3, #4]
 801613a:	817b      	strh	r3, [r7, #10]
 801613c:	f107 030a 	add.w	r3, r7, #10
 8016140:	4619      	mov	r1, r3
 8016142:	4828      	ldr	r0, [pc, #160]	; (80161e4 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xb8>)
 8016144:	f000 f90a 	bl	801635c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8containsERS5_>
 8016148:	4603      	mov	r3, r0
 801614a:	f083 0301 	eor.w	r3, r3, #1
 801614e:	b2db      	uxtb	r3, r3
 8016150:	2b00      	cmp	r3, #0
 8016152:	d008      	beq.n	8016166 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0x3a>
		return nullopt;
 8016154:	f107 0310 	add.w	r3, r7, #16
 8016158:	4621      	mov	r1, r4
 801615a:	4618      	mov	r0, r3
 801615c:	f7fc fdf4 	bl	8012d48 <_ZNSt8optionalIhEC1ESt9nullopt_t>
 8016160:	8a3b      	ldrh	r3, [r7, #16]
 8016162:	81bb      	strh	r3, [r7, #12]
 8016164:	e032      	b.n	80161cc <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xa0>
	}

	Pin::inscribe(pin, ALTERNATIVE);
 8016166:	2104      	movs	r1, #4
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7fb fa0e 	bl	801158a <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = id_manager.front();
 801616e:	481e      	ldr	r0, [pc, #120]	; (80161e8 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xbc>)
 8016170:	f7fc fdf8 	bl	8012d64 <_ZNSt12forward_listIhSaIhEE5frontEv>
 8016174:	4603      	mov	r3, r0
 8016176:	781b      	ldrb	r3, [r3, #0]
 8016178:	727b      	strb	r3, [r7, #9]
	id_manager.pop_front();
 801617a:	481b      	ldr	r0, [pc, #108]	; (80161e8 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xbc>)
 801617c:	f7fc feba 	bl	8012ef4 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	service_ids[id] = pin;
 8016180:	f107 0309 	add.w	r3, r7, #9
 8016184:	4619      	mov	r1, r3
 8016186:	4819      	ldr	r0, [pc, #100]	; (80161ec <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xc0>)
 8016188:	f000 f90a 	bl	80163a0 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801618c:	4603      	mov	r3, r0
 801618e:	687a      	ldr	r2, [r7, #4]
 8016190:	6811      	ldr	r1, [r2, #0]
 8016192:	6019      	str	r1, [r3, #0]
 8016194:	8891      	ldrh	r1, [r2, #4]
 8016196:	7992      	ldrb	r2, [r2, #6]
 8016198:	8099      	strh	r1, [r3, #4]
 801619a:	719a      	strb	r2, [r3, #6]
	instances[pin.gpio_pin].action = action;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	889b      	ldrh	r3, [r3, #4]
 80161a0:	827b      	strh	r3, [r7, #18]
 80161a2:	f107 0312 	add.w	r3, r7, #18
 80161a6:	4619      	mov	r1, r3
 80161a8:	480e      	ldr	r0, [pc, #56]	; (80161e4 <_ZN17ExternalInterrupt8inscribeER3PinOSt8functionIFvvEE+0xb8>)
 80161aa:	f000 f955 	bl	8016458 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt>
 80161ae:	4603      	mov	r3, r0
 80161b0:	6839      	ldr	r1, [r7, #0]
 80161b2:	4618      	mov	r0, r3
 80161b4:	f000 f9b0 	bl	8016518 <_ZNSt8functionIFvvEEaSERKS1_>

	return id;
 80161b8:	f107 0209 	add.w	r2, r7, #9
 80161bc:	f107 0314 	add.w	r3, r7, #20
 80161c0:	4611      	mov	r1, r2
 80161c2:	4618      	mov	r0, r3
 80161c4:	f7fc fec9 	bl	8012f5a <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 80161c8:	8abb      	ldrh	r3, [r7, #20]
 80161ca:	81bb      	strh	r3, [r7, #12]
}
 80161cc:	2300      	movs	r3, #0
 80161ce:	7b3a      	ldrb	r2, [r7, #12]
 80161d0:	f362 0307 	bfi	r3, r2, #0, #8
 80161d4:	7b7a      	ldrb	r2, [r7, #13]
 80161d6:	f362 230f 	bfi	r3, r2, #8, #8
 80161da:	4618      	mov	r0, r3
 80161dc:	371c      	adds	r7, #28
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd90      	pop	{r4, r7, pc}
 80161e2:	bf00      	nop
 80161e4:	240013e0 	.word	0x240013e0
 80161e8:	2400112c 	.word	0x2400112c
 80161ec:	24001130 	.word	0x24001130

080161f0 <_ZNSt8functionIFvvEEC1EDn>:
      function(nullptr_t) noexcept
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	4618      	mov	r0, r3
 80161fe:	f7eb f99a 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	4618      	mov	r0, r3
 8016206:	3708      	adds	r7, #8
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f000 f99a 	bl	801654e <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	4618      	mov	r0, r3
 801621e:	f7eb ff03 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	3304      	adds	r3, #4
 8016226:	4618      	mov	r0, r3
 8016228:	f7eb f926 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	4618      	mov	r0, r3
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}

08016236 <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8016236:	b480      	push	{r7}
 8016238:	b083      	sub	sp, #12
 801623a:	af00      	add	r7, sp, #0
 801623c:	6078      	str	r0, [r7, #4]
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	4618      	mov	r0, r3
 8016242:	370c      	adds	r7, #12
 8016244:	46bd      	mov	sp, r7
 8016246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624a:	4770      	bx	lr

0801624c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f9a5 	bl	80165a4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801625a:	4603      	mov	r3, r0
 801625c:	4619      	mov	r1, r3
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	f000 f981 	bl	8016566 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff ff13 	bl	8016092 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
	...

08016278 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8016278:	b590      	push	{r4, r7, lr}
 801627a:	b08b      	sub	sp, #44	; 0x2c
 801627c:	af02      	add	r7, sp, #8
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8016282:	6839      	ldr	r1, [r7, #0]
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f000 f999 	bl	80165bc <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 801628a:	4603      	mov	r3, r0
 801628c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801628e:	6878      	ldr	r0, [r7, #4]
 8016290:	f000 f9a3 	bl	80165da <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 8016294:	4603      	mov	r3, r0
 8016296:	60fb      	str	r3, [r7, #12]
 8016298:	f107 020c 	add.w	r2, r7, #12
 801629c:	f107 0308 	add.w	r3, r7, #8
 80162a0:	4611      	mov	r1, r2
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 f9a6 	bl	80165f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d112      	bne.n	80162d4 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 80162ae:	6878      	ldr	r0, [r7, #4]
 80162b0:	f000 f9b4 	bl	801661c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 80162b4:	f107 0308 	add.w	r3, r7, #8
 80162b8:	4618      	mov	r0, r3
 80162ba:	f000 f9bc 	bl	8016636 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 80162be:	4603      	mov	r3, r0
 80162c0:	461a      	mov	r2, r3
 80162c2:	f107 0310 	add.w	r3, r7, #16
 80162c6:	6839      	ldr	r1, [r7, #0]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f000 f9c2 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d001      	beq.n	80162d8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 80162d4:	2301      	movs	r3, #1
 80162d6:	e000      	b.n	80162da <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 80162d8:	2300      	movs	r3, #0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d01b      	beq.n	8016316 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80162de:	687c      	ldr	r4, [r7, #4]
 80162e0:	f107 0208 	add.w	r2, r7, #8
 80162e4:	f107 0314 	add.w	r3, r7, #20
 80162e8:	4611      	mov	r1, r2
 80162ea:	4618      	mov	r0, r3
 80162ec:	f000 f9d5 	bl	801669a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 80162f0:	f107 0318 	add.w	r3, r7, #24
 80162f4:	6839      	ldr	r1, [r7, #0]
 80162f6:	4618      	mov	r0, r3
 80162f8:	f000 f9c0 	bl	801667c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80162fc:	f107 0218 	add.w	r2, r7, #24
 8016300:	f107 031c 	add.w	r3, r7, #28
 8016304:	9300      	str	r3, [sp, #0]
 8016306:	4613      	mov	r3, r2
 8016308:	4a08      	ldr	r2, [pc, #32]	; (801632c <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 801630a:	6979      	ldr	r1, [r7, #20]
 801630c:	4620      	mov	r0, r4
 801630e:	f000 f9d4 	bl	80166ba <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8016312:	4603      	mov	r3, r0
 8016314:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8016316:	f107 0308 	add.w	r3, r7, #8
 801631a:	4618      	mov	r0, r3
 801631c:	f000 f98b 	bl	8016636 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 8016320:	4603      	mov	r3, r0
 8016322:	3304      	adds	r3, #4
      }
 8016324:	4618      	mov	r0, r3
 8016326:	3724      	adds	r7, #36	; 0x24
 8016328:	46bd      	mov	sp, r7
 801632a:	bd90      	pop	{r4, r7, pc}
 801632c:	08026cc4 	.word	0x08026cc4

08016330 <_ZNKSt8functionIFvvEEclEv>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8016330:	b580      	push	{r7, lr}
 8016332:	b082      	sub	sp, #8
 8016334:	af00      	add	r7, sp, #0
 8016336:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	4618      	mov	r0, r3
 801633c:	f7ff fe98 	bl	8016070 <_ZNKSt14_Function_base8_M_emptyEv>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	d001      	beq.n	801634a <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 8016346:	f00f ff79 	bl	802623c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	68db      	ldr	r3, [r3, #12]
 801634e:	687a      	ldr	r2, [r7, #4]
 8016350:	4610      	mov	r0, r2
 8016352:	4798      	blx	r3
 8016354:	bf00      	nop
    }
 8016356:	3708      	adds	r7, #8
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}

0801635c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 801635c:	b580      	push	{r7, lr}
 801635e:	b084      	sub	sp, #16
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	6839      	ldr	r1, [r7, #0]
 801636a:	4618      	mov	r0, r3
 801636c:	f000 f9e3 	bl	8016736 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_>
 8016370:	4603      	mov	r3, r0
 8016372:	60bb      	str	r3, [r7, #8]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	4618      	mov	r0, r3
 8016378:	f000 fa19 	bl	80167ae <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 801637c:	4603      	mov	r3, r0
 801637e:	60fb      	str	r3, [r7, #12]
 8016380:	f107 020c 	add.w	r2, r7, #12
 8016384:	f107 0308 	add.w	r3, r7, #8
 8016388:	4611      	mov	r1, r2
 801638a:	4618      	mov	r0, r3
 801638c:	f000 fa20 	bl	80167d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8016390:	4603      	mov	r3, r0
 8016392:	f083 0301 	eor.w	r3, r3, #1
 8016396:	b2db      	uxtb	r3, r3
 8016398:	4618      	mov	r0, r3
 801639a:	3710      	adds	r7, #16
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}

080163a0 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 80163a0:	b590      	push	{r4, r7, lr}
 80163a2:	b08b      	sub	sp, #44	; 0x2c
 80163a4:	af02      	add	r7, sp, #8
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80163aa:	6839      	ldr	r1, [r7, #0]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fa23 	bl	80167f8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 80163b2:	4603      	mov	r3, r0
 80163b4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 fa2d 	bl	8016816 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 80163bc:	4603      	mov	r3, r0
 80163be:	60fb      	str	r3, [r7, #12]
 80163c0:	f107 020c 	add.w	r2, r7, #12
 80163c4:	f107 0308 	add.w	r3, r7, #8
 80163c8:	4611      	mov	r1, r2
 80163ca:	4618      	mov	r0, r3
 80163cc:	f000 fa30 	bl	8016830 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 80163d0:	4603      	mov	r3, r0
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d112      	bne.n	80163fc <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 80163d6:	6878      	ldr	r0, [r7, #4]
 80163d8:	f000 fa3e 	bl	8016858 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 80163dc:	f107 0308 	add.w	r3, r7, #8
 80163e0:	4618      	mov	r0, r3
 80163e2:	f000 fa46 	bl	8016872 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 80163e6:	4603      	mov	r3, r0
 80163e8:	461a      	mov	r2, r3
 80163ea:	f107 0310 	add.w	r3, r7, #16
 80163ee:	6839      	ldr	r1, [r7, #0]
 80163f0:	4618      	mov	r0, r3
 80163f2:	f7fd f881 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 80163f6:	4603      	mov	r3, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d001      	beq.n	8016400 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 80163fc:	2301      	movs	r3, #1
 80163fe:	e000      	b.n	8016402 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 8016400:	2300      	movs	r3, #0
 8016402:	2b00      	cmp	r3, #0
 8016404:	d01b      	beq.n	801643e <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8016406:	687c      	ldr	r4, [r7, #4]
 8016408:	f107 0208 	add.w	r2, r7, #8
 801640c:	f107 0314 	add.w	r3, r7, #20
 8016410:	4611      	mov	r1, r2
 8016412:	4618      	mov	r0, r3
 8016414:	f000 fa3b 	bl	801688e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 8016418:	f107 0318 	add.w	r3, r7, #24
 801641c:	6839      	ldr	r1, [r7, #0]
 801641e:	4618      	mov	r0, r3
 8016420:	f7fd f87f 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8016424:	f107 0218 	add.w	r2, r7, #24
 8016428:	f107 031c 	add.w	r3, r7, #28
 801642c:	9300      	str	r3, [sp, #0]
 801642e:	4613      	mov	r3, r2
 8016430:	4a08      	ldr	r2, [pc, #32]	; (8016454 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 8016432:	6979      	ldr	r1, [r7, #20]
 8016434:	4620      	mov	r0, r4
 8016436:	f000 fa3a 	bl	80168ae <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 801643a:	4603      	mov	r3, r0
 801643c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801643e:	f107 0308 	add.w	r3, r7, #8
 8016442:	4618      	mov	r0, r3
 8016444:	f000 fa15 	bl	8016872 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>
 8016448:	4603      	mov	r3, r0
 801644a:	3304      	adds	r3, #4
      }
 801644c:	4618      	mov	r0, r3
 801644e:	3724      	adds	r7, #36	; 0x24
 8016450:	46bd      	mov	sp, r7
 8016452:	bd90      	pop	{r4, r7, pc}
 8016454:	08026cc4 	.word	0x08026cc4

08016458 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt>:
      operator[](key_type&& __k)
 8016458:	b590      	push	{r4, r7, lr}
 801645a:	b08b      	sub	sp, #44	; 0x2c
 801645c:	af02      	add	r7, sp, #8
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8016462:	6839      	ldr	r1, [r7, #0]
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f000 f8a9 	bl	80165bc <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 801646a:	4603      	mov	r3, r0
 801646c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 f8b3 	bl	80165da <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>
 8016474:	4603      	mov	r3, r0
 8016476:	60fb      	str	r3, [r7, #12]
 8016478:	f107 020c 	add.w	r2, r7, #12
 801647c:	f107 0308 	add.w	r3, r7, #8
 8016480:	4611      	mov	r1, r2
 8016482:	4618      	mov	r0, r3
 8016484:	f000 f8b6 	bl	80165f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8016488:	4603      	mov	r3, r0
 801648a:	2b00      	cmp	r3, #0
 801648c:	d112      	bne.n	80164b4 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x5c>
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 f8c4 	bl	801661c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8016494:	f107 0308 	add.w	r3, r7, #8
 8016498:	4618      	mov	r0, r3
 801649a:	f000 f8cc 	bl	8016636 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 801649e:	4603      	mov	r3, r0
 80164a0:	461a      	mov	r2, r3
 80164a2:	f107 0310 	add.w	r3, r7, #16
 80164a6:	6839      	ldr	r1, [r7, #0]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f000 f8d2 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 80164ae:	4603      	mov	r3, r0
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d001      	beq.n	80164b8 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x60>
 80164b4:	2301      	movs	r3, #1
 80164b6:	e000      	b.n	80164ba <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0x62>
 80164b8:	2300      	movs	r3, #0
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d01f      	beq.n	80164fe <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80164be:	687c      	ldr	r4, [r7, #4]
 80164c0:	f107 0208 	add.w	r2, r7, #8
 80164c4:	f107 0314 	add.w	r3, r7, #20
 80164c8:	4611      	mov	r1, r2
 80164ca:	4618      	mov	r0, r3
 80164cc:	f000 f8e5 	bl	801669a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					std::forward_as_tuple(std::move(__k)),
 80164d0:	6838      	ldr	r0, [r7, #0]
 80164d2:	f000 fa2a 	bl	801692a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>
 80164d6:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80164d8:	f107 0318 	add.w	r3, r7, #24
 80164dc:	4611      	mov	r1, r2
 80164de:	4618      	mov	r0, r3
 80164e0:	f000 fa2e 	bl	8016940 <_ZSt16forward_as_tupleIJtEESt5tupleIJDpOT_EES3_>
 80164e4:	f107 0218 	add.w	r2, r7, #24
 80164e8:	f107 031c 	add.w	r3, r7, #28
 80164ec:	9300      	str	r3, [sp, #0]
 80164ee:	4613      	mov	r3, r2
 80164f0:	4a08      	ldr	r2, [pc, #32]	; (8016514 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEixEOt+0xbc>)
 80164f2:	6979      	ldr	r1, [r7, #20]
 80164f4:	4620      	mov	r0, r4
 80164f6:	f000 fa34 	bl	8016962 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 80164fa:	4603      	mov	r3, r0
 80164fc:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80164fe:	f107 0308 	add.w	r3, r7, #8
 8016502:	4618      	mov	r0, r3
 8016504:	f000 f897 	bl	8016636 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>
 8016508:	4603      	mov	r3, r0
 801650a:	3304      	adds	r3, #4
      }
 801650c:	4618      	mov	r0, r3
 801650e:	3724      	adds	r7, #36	; 0x24
 8016510:	46bd      	mov	sp, r7
 8016512:	bd90      	pop	{r4, r7, pc}
 8016514:	08026cc4 	.word	0x08026cc4

08016518 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 8016518:	b580      	push	{r7, lr}
 801651a:	b086      	sub	sp, #24
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
 8016520:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8016522:	f107 0308 	add.w	r3, r7, #8
 8016526:	6839      	ldr	r1, [r7, #0]
 8016528:	4618      	mov	r0, r3
 801652a:	f000 fa58 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
 801652e:	f107 0308 	add.w	r3, r7, #8
 8016532:	6879      	ldr	r1, [r7, #4]
 8016534:	4618      	mov	r0, r3
 8016536:	f000 fa74 	bl	8016a22 <_ZNSt8functionIFvvEE4swapERS1_>
 801653a:	f107 0308 	add.w	r3, r7, #8
 801653e:	4618      	mov	r0, r3
 8016540:	f7eb f826 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 8016544:	687b      	ldr	r3, [r7, #4]
      }
 8016546:	4618      	mov	r0, r3
 8016548:	3718      	adds	r7, #24
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <_ZNSaISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801654e:	b580      	push	{r7, lr}
 8016550:	b082      	sub	sp, #8
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa84 	bl	8016a64 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	4618      	mov	r0, r3
 8016560:	3708      	adds	r7, #8
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}

08016566 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016566:	b580      	push	{r7, lr}
 8016568:	b084      	sub	sp, #16
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]
 801656e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d012      	beq.n	801659c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 8016576:	6838      	ldr	r0, [r7, #0]
 8016578:	f000 fa7f 	bl	8016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801657c:	4603      	mov	r3, r0
 801657e:	4619      	mov	r1, r3
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7ff fff0 	bl	8016566 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 8016586:	6838      	ldr	r0, [r7, #0]
 8016588:	f000 fa83 	bl	8016a92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801658c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801658e:	6839      	ldr	r1, [r7, #0]
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f000 fa8a 	bl	8016aaa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801659a:	e7e9      	b.n	8016570 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 801659c:	bf00      	nop
 801659e:	3710      	adds	r7, #16
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd80      	pop	{r7, pc}

080165a4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	689b      	ldr	r3, [r3, #8]
 80165b0:	4618      	mov	r0, r3
 80165b2:	370c      	adds	r7, #12
 80165b4:	46bd      	mov	sp, r7
 80165b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ba:	4770      	bx	lr

080165bc <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 80165bc:	b580      	push	{r7, lr}
 80165be:	b082      	sub	sp, #8
 80165c0:	af00      	add	r7, sp, #0
 80165c2:	6078      	str	r0, [r7, #4]
 80165c4:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6839      	ldr	r1, [r7, #0]
 80165ca:	4618      	mov	r0, r3
 80165cc:	f000 fa7e 	bl	8016acc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 80165d0:	4603      	mov	r3, r0
 80165d2:	4618      	mov	r0, r3
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80165da:	b580      	push	{r7, lr}
 80165dc:	b082      	sub	sp, #8
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	4618      	mov	r0, r3
 80165e6:	f000 fa88 	bl	8016afa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80165ea:	4603      	mov	r3, r0
 80165ec:	4618      	mov	r0, r3
 80165ee:	3708      	adds	r7, #8
 80165f0:	46bd      	mov	sp, r7
 80165f2:	bd80      	pop	{r7, pc}

080165f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	683b      	ldr	r3, [r7, #0]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	429a      	cmp	r2, r3
 8016608:	bf0c      	ite	eq
 801660a:	2301      	moveq	r3, #1
 801660c:	2300      	movne	r3, #0
 801660e:	b2db      	uxtb	r3, r3
 8016610:	4618      	mov	r0, r3
 8016612:	370c      	adds	r7, #12
 8016614:	46bd      	mov	sp, r7
 8016616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661a:	4770      	bx	lr

0801661c <_ZNKSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 801661c:	b590      	push	{r4, r7, lr}
 801661e:	b083      	sub	sp, #12
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	4618      	mov	r0, r3
 8016628:	f000 fa78 	bl	8016b1c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 801662c:	bf00      	nop
 801662e:	4620      	mov	r0, r4
 8016630:	370c      	adds	r7, #12
 8016632:	46bd      	mov	sp, r7
 8016634:	bd90      	pop	{r4, r7, pc}

08016636 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8016636:	b580      	push	{r7, lr}
 8016638:	b082      	sub	sp, #8
 801663a:	af00      	add	r7, sp, #0
 801663c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4618      	mov	r0, r3
 8016644:	f000 fa75 	bl	8016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8016648:	4603      	mov	r3, r0
 801664a:	4618      	mov	r0, r3
 801664c:	3708      	adds	r7, #8
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}

08016652 <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8016652:	b480      	push	{r7}
 8016654:	b085      	sub	sp, #20
 8016656:	af00      	add	r7, sp, #0
 8016658:	60f8      	str	r0, [r7, #12]
 801665a:	60b9      	str	r1, [r7, #8]
 801665c:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	881a      	ldrh	r2, [r3, #0]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	881b      	ldrh	r3, [r3, #0]
 8016666:	429a      	cmp	r2, r3
 8016668:	bf34      	ite	cc
 801666a:	2301      	movcc	r3, #1
 801666c:	2300      	movcs	r3, #0
 801666e:	b2db      	uxtb	r3, r3
 8016670:	4618      	mov	r0, r3
 8016672:	3714      	adds	r7, #20
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	6839      	ldr	r1, [r7, #0]
 801668a:	4618      	mov	r0, r3
 801668c:	f000 fa5f 	bl	8016b4e <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	4618      	mov	r0, r3
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801669a:	b480      	push	{r7}
 801669c:	b083      	sub	sp, #12
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
 80166a2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80166a4:	683b      	ldr	r3, [r7, #0]
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	601a      	str	r2, [r3, #0]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	4618      	mov	r0, r3
 80166b0:	370c      	adds	r7, #12
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80166ba:	b5b0      	push	{r4, r5, r7, lr}
 80166bc:	b088      	sub	sp, #32
 80166be:	af00      	add	r7, sp, #0
 80166c0:	60f8      	str	r0, [r7, #12]
 80166c2:	60b9      	str	r1, [r7, #8]
 80166c4:	607a      	str	r2, [r7, #4]
 80166c6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80166c8:	6878      	ldr	r0, [r7, #4]
 80166ca:	f7fd fc04 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80166ce:	4604      	mov	r4, r0
 80166d0:	6838      	ldr	r0, [r7, #0]
 80166d2:	f000 fa4b 	bl	8016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80166d6:	4605      	mov	r5, r0
 80166d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166da:	f7fd fc12 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80166de:	4603      	mov	r3, r0
 80166e0:	462a      	mov	r2, r5
 80166e2:	4621      	mov	r1, r4
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	f000 fa4c 	bl	8016b82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80166ea:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80166ec:	69f8      	ldr	r0, [r7, #28]
 80166ee:	f000 fb8e 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80166f2:	4603      	mov	r3, r0
 80166f4:	f107 0010 	add.w	r0, r7, #16
 80166f8:	68ba      	ldr	r2, [r7, #8]
 80166fa:	68f9      	ldr	r1, [r7, #12]
 80166fc:	f000 fa64 	bl	8016bc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d007      	beq.n	8016716 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8016706:	6939      	ldr	r1, [r7, #16]
 8016708:	697a      	ldr	r2, [r7, #20]
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	68f8      	ldr	r0, [r7, #12]
 801670e:	f000 fb91 	bl	8016e34 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8016712:	4603      	mov	r3, r0
 8016714:	e00b      	b.n	801672e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8016716:	69f9      	ldr	r1, [r7, #28]
 8016718:	68f8      	ldr	r0, [r7, #12]
 801671a:	f000 fbc8 	bl	8016eae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 801671e:	693a      	ldr	r2, [r7, #16]
 8016720:	f107 0318 	add.w	r3, r7, #24
 8016724:	4611      	mov	r1, r2
 8016726:	4618      	mov	r0, r3
 8016728:	f000 fbd2 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801672c:	69bb      	ldr	r3, [r7, #24]
      }
 801672e:	4618      	mov	r0, r3
 8016730:	3720      	adds	r7, #32
 8016732:	46bd      	mov	sp, r7
 8016734:	bdb0      	pop	{r4, r5, r7, pc}

08016736 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016736:	b590      	push	{r4, r7, lr}
 8016738:	b085      	sub	sp, #20
 801673a:	af00      	add	r7, sp, #0
 801673c:	6078      	str	r0, [r7, #4]
 801673e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	f000 fbd4 	bl	8016eee <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8016746:	4604      	mov	r4, r0
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 fbdc 	bl	8016f06 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801674e:	4602      	mov	r2, r0
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	4621      	mov	r1, r4
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f000 fbe2 	bl	8016f1e <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 801675a:	4603      	mov	r3, r0
 801675c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 f825 	bl	80167ae <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 8016764:	4603      	mov	r3, r0
 8016766:	60fb      	str	r3, [r7, #12]
 8016768:	f107 020c 	add.w	r2, r7, #12
 801676c:	f107 0308 	add.w	r3, r7, #8
 8016770:	4611      	mov	r1, r2
 8016772:	4618      	mov	r0, r3
 8016774:	f000 f82c 	bl	80167d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8016778:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801677a:	2b00      	cmp	r3, #0
 801677c:	d10d      	bne.n	801679a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801677e:	687c      	ldr	r4, [r7, #4]
 8016780:	68bb      	ldr	r3, [r7, #8]
 8016782:	4618      	mov	r0, r3
 8016784:	f000 fbfc 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016788:	4603      	mov	r3, r0
 801678a:	461a      	mov	r2, r3
 801678c:	6839      	ldr	r1, [r7, #0]
 801678e:	4620      	mov	r0, r4
 8016790:	f7ff ff5f 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016794:	4603      	mov	r3, r0
 8016796:	2b00      	cmp	r3, #0
 8016798:	d004      	beq.n	80167a4 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f000 f807 	bl	80167ae <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80167a0:	4603      	mov	r3, r0
 80167a2:	e000      	b.n	80167a6 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4findERS1_+0x70>
 80167a4:	68bb      	ldr	r3, [r7, #8]
    }
 80167a6:	4618      	mov	r0, r3
 80167a8:	3714      	adds	r7, #20
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd90      	pop	{r4, r7, pc}

080167ae <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80167ae:	b580      	push	{r7, lr}
 80167b0:	b084      	sub	sp, #16
 80167b2:	af00      	add	r7, sp, #0
 80167b4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	1d1a      	adds	r2, r3, #4
 80167ba:	f107 030c 	add.w	r3, r7, #12
 80167be:	4611      	mov	r1, r2
 80167c0:	4618      	mov	r0, r3
 80167c2:	f000 fbe9 	bl	8016f98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	4618      	mov	r0, r3
 80167ca:	3710      	adds	r7, #16
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80167d0:	b480      	push	{r7}
 80167d2:	b083      	sub	sp, #12
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681a      	ldr	r2, [r3, #0]
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	429a      	cmp	r2, r3
 80167e4:	bf0c      	ite	eq
 80167e6:	2301      	moveq	r3, #1
 80167e8:	2300      	movne	r3, #0
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	4618      	mov	r0, r3
 80167ee:	370c      	adds	r7, #12
 80167f0:	46bd      	mov	sp, r7
 80167f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f6:	4770      	bx	lr

080167f8 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
 8016800:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	6839      	ldr	r1, [r7, #0]
 8016806:	4618      	mov	r0, r3
 8016808:	f000 fbd5 	bl	8016fb6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 801680c:	4603      	mov	r3, r0
 801680e:	4618      	mov	r0, r3
 8016810:	3708      	adds	r7, #8
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016816:	b580      	push	{r7, lr}
 8016818:	b082      	sub	sp, #8
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	4618      	mov	r0, r3
 8016822:	f000 fbdf 	bl	8016fe4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 8016826:	4603      	mov	r3, r0
 8016828:	4618      	mov	r0, r3
 801682a:	3708      	adds	r7, #8
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	429a      	cmp	r2, r3
 8016844:	bf0c      	ite	eq
 8016846:	2301      	moveq	r3, #1
 8016848:	2300      	movne	r3, #0
 801684a:	b2db      	uxtb	r3, r3
 801684c:	4618      	mov	r0, r3
 801684e:	370c      	adds	r7, #12
 8016850:	46bd      	mov	sp, r7
 8016852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016856:	4770      	bx	lr

08016858 <_ZNKSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 8016858:	b590      	push	{r4, r7, lr}
 801685a:	b083      	sub	sp, #12
 801685c:	af00      	add	r7, sp, #0
 801685e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f000 fbcf 	bl	8017006 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 8016868:	bf00      	nop
 801686a:	4620      	mov	r0, r4
 801686c:	370c      	adds	r7, #12
 801686e:	46bd      	mov	sp, r7
 8016870:	bd90      	pop	{r4, r7, pc}

08016872 <_ZNKSt17_Rb_tree_iteratorISt4pairIKh3PinEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8016872:	b580      	push	{r7, lr}
 8016874:	b082      	sub	sp, #8
 8016876:	af00      	add	r7, sp, #0
 8016878:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	4618      	mov	r0, r3
 8016880:	f000 fbcc 	bl	801701c <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8016884:	4603      	mov	r3, r0
 8016886:	4618      	mov	r0, r3
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}

0801688e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh3PinEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801688e:	b480      	push	{r7}
 8016890:	b083      	sub	sp, #12
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
 8016896:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	681a      	ldr	r2, [r3, #0]
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	601a      	str	r2, [r3, #0]
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	4618      	mov	r0, r3
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80168ae:	b5b0      	push	{r4, r5, r7, lr}
 80168b0:	b088      	sub	sp, #32
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	60f8      	str	r0, [r7, #12]
 80168b6:	60b9      	str	r1, [r7, #8]
 80168b8:	607a      	str	r2, [r7, #4]
 80168ba:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7fd fb0a 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80168c2:	4604      	mov	r4, r0
 80168c4:	6838      	ldr	r0, [r7, #0]
 80168c6:	f7fd fb11 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80168ca:	4605      	mov	r5, r0
 80168cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168ce:	f7fd fb18 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80168d2:	4603      	mov	r3, r0
 80168d4:	462a      	mov	r2, r5
 80168d6:	4621      	mov	r1, r4
 80168d8:	68f8      	ldr	r0, [r7, #12]
 80168da:	f000 fbad 	bl	8017038 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80168de:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80168e0:	69f8      	ldr	r0, [r7, #28]
 80168e2:	f000 fcef 	bl	80172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80168e6:	4603      	mov	r3, r0
 80168e8:	f107 0010 	add.w	r0, r7, #16
 80168ec:	68ba      	ldr	r2, [r7, #8]
 80168ee:	68f9      	ldr	r1, [r7, #12]
 80168f0:	f000 fbc5 	bl	801707e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 80168f4:	697b      	ldr	r3, [r7, #20]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d007      	beq.n	801690a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80168fa:	6939      	ldr	r1, [r7, #16]
 80168fc:	697a      	ldr	r2, [r7, #20]
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	68f8      	ldr	r0, [r7, #12]
 8016902:	f000 fcf2 	bl	80172ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 8016906:	4603      	mov	r3, r0
 8016908:	e00b      	b.n	8016922 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 801690a:	69f9      	ldr	r1, [r7, #28]
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	f000 f8cc 	bl	8016aaa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8016912:	693a      	ldr	r2, [r7, #16]
 8016914:	f107 0318 	add.w	r3, r7, #24
 8016918:	4611      	mov	r1, r2
 801691a:	4618      	mov	r0, r3
 801691c:	f000 fd22 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8016920:	69bb      	ldr	r3, [r7, #24]
      }
 8016922:	4618      	mov	r0, r3
 8016924:	3720      	adds	r7, #32
 8016926:	46bd      	mov	sp, r7
 8016928:	bdb0      	pop	{r4, r5, r7, pc}

0801692a <_ZSt4moveIRtEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 801692a:	b480      	push	{r7}
 801692c:	b083      	sub	sp, #12
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	4618      	mov	r0, r3
 8016936:	370c      	adds	r7, #12
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <_ZSt16forward_as_tupleIJtEESt5tupleIJDpOT_EES3_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801694a:	6838      	ldr	r0, [r7, #0]
 801694c:	f000 fd19 	bl	8017382 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8016950:	4603      	mov	r3, r0
 8016952:	4619      	mov	r1, r3
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f000 fd1f 	bl	8017398 <_ZNSt5tupleIJOtEEC1IJtELb1ELb1EEEDpOT_>
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}

08016962 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016962:	b5b0      	push	{r4, r5, r7, lr}
 8016964:	b088      	sub	sp, #32
 8016966:	af00      	add	r7, sp, #0
 8016968:	60f8      	str	r0, [r7, #12]
 801696a:	60b9      	str	r1, [r7, #8]
 801696c:	607a      	str	r2, [r7, #4]
 801696e:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f7fd fab0 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8016976:	4604      	mov	r4, r0
 8016978:	6838      	ldr	r0, [r7, #0]
 801697a:	f000 fd20 	bl	80173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801697e:	4605      	mov	r5, r0
 8016980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016982:	f7fd fabe 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8016986:	4603      	mov	r3, r0
 8016988:	462a      	mov	r2, r5
 801698a:	4621      	mov	r1, r4
 801698c:	68f8      	ldr	r0, [r7, #12]
 801698e:	f000 fd21 	bl	80173d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8016992:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8016994:	69f8      	ldr	r0, [r7, #28]
 8016996:	f000 fa3a 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801699a:	4603      	mov	r3, r0
 801699c:	f107 0010 	add.w	r0, r7, #16
 80169a0:	68ba      	ldr	r2, [r7, #8]
 80169a2:	68f9      	ldr	r1, [r7, #12]
 80169a4:	f000 f910 	bl	8016bc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d007      	beq.n	80169be <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80169ae:	6939      	ldr	r1, [r7, #16]
 80169b0:	697a      	ldr	r2, [r7, #20]
 80169b2:	69fb      	ldr	r3, [r7, #28]
 80169b4:	68f8      	ldr	r0, [r7, #12]
 80169b6:	f000 fa3d 	bl	8016e34 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80169ba:	4603      	mov	r3, r0
 80169bc:	e00b      	b.n	80169d6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 80169be:	69f9      	ldr	r1, [r7, #28]
 80169c0:	68f8      	ldr	r0, [r7, #12]
 80169c2:	f000 fa74 	bl	8016eae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 80169c6:	693a      	ldr	r2, [r7, #16]
 80169c8:	f107 0318 	add.w	r3, r7, #24
 80169cc:	4611      	mov	r1, r2
 80169ce:	4618      	mov	r0, r3
 80169d0:	f000 fa7e 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80169d4:	69bb      	ldr	r3, [r7, #24]
      }
 80169d6:	4618      	mov	r0, r3
 80169d8:	3720      	adds	r7, #32
 80169da:	46bd      	mov	sp, r7
 80169dc:	bdb0      	pop	{r4, r5, r7, pc}

080169de <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f7ea fda3 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80169f0:	6838      	ldr	r0, [r7, #0]
 80169f2:	f000 fd12 	bl	801741a <_ZNKSt8functionIFvvEEcvbEv>
 80169f6:	4603      	mov	r3, r0
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d00d      	beq.n	8016a18 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	6878      	ldr	r0, [r7, #4]
 8016a02:	6839      	ldr	r1, [r7, #0]
 8016a04:	2202      	movs	r2, #2
 8016a06:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	68da      	ldr	r2, [r3, #12]
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	689a      	ldr	r2, [r3, #8]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	609a      	str	r2, [r3, #8]
    }
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3708      	adds	r7, #8
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}

08016a22 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8016a22:	b580      	push	{r7, lr}
 8016a24:	b082      	sub	sp, #8
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
 8016a2a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	683a      	ldr	r2, [r7, #0]
 8016a30:	4611      	mov	r1, r2
 8016a32:	4618      	mov	r0, r3
 8016a34:	f000 fd01 	bl	801743a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f103 0208 	add.w	r2, r3, #8
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	3308      	adds	r3, #8
 8016a42:	4619      	mov	r1, r3
 8016a44:	4610      	mov	r0, r2
 8016a46:	f000 fd1f 	bl	8017488 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	f103 020c 	add.w	r2, r3, #12
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	330c      	adds	r3, #12
 8016a54:	4619      	mov	r1, r3
 8016a56:	4610      	mov	r0, r2
 8016a58:	f000 fd35 	bl	80174c6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 8016a5c:	bf00      	nop
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	370c      	adds	r7, #12
 8016a72:	46bd      	mov	sp, r7
 8016a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a78:	4770      	bx	lr

08016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016a7a:	b480      	push	{r7}
 8016a7c:	b083      	sub	sp, #12
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	68db      	ldr	r3, [r3, #12]
 8016a86:	4618      	mov	r0, r3
 8016a88:	370c      	adds	r7, #12
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a90:	4770      	bx	lr

08016a92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016a92:	b480      	push	{r7}
 8016a94:	b083      	sub	sp, #12
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	689b      	ldr	r3, [r3, #8]
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	370c      	adds	r7, #12
 8016aa2:	46bd      	mov	sp, r7
 8016aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa8:	4770      	bx	lr

08016aaa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016aaa:	b580      	push	{r7, lr}
 8016aac:	b082      	sub	sp, #8
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	6078      	str	r0, [r7, #4]
 8016ab2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8016ab4:	6839      	ldr	r1, [r7, #0]
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f000 fd30 	bl	801751c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 8016abc:	6839      	ldr	r1, [r7, #0]
 8016abe:	6878      	ldr	r0, [r7, #4]
 8016ac0:	f000 fd41 	bl	8017546 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 8016ac4:	bf00      	nop
 8016ac6:	3708      	adds	r7, #8
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}

08016acc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8016acc:	b590      	push	{r4, r7, lr}
 8016ace:	b083      	sub	sp, #12
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f000 fd47 	bl	801756a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8016adc:	4604      	mov	r4, r0
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 fd4f 	bl	8017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8016ae4:	4602      	mov	r2, r0
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	4621      	mov	r1, r4
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f000 fd55 	bl	801759a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8016af0:	4603      	mov	r3, r0
 8016af2:	4618      	mov	r0, r3
 8016af4:	370c      	adds	r7, #12
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd90      	pop	{r4, r7, pc}

08016afa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016afa:	b580      	push	{r7, lr}
 8016afc:	b084      	sub	sp, #16
 8016afe:	af00      	add	r7, sp, #0
 8016b00:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	1d1a      	adds	r2, r3, #4
 8016b06:	f107 030c 	add.w	r3, r7, #12
 8016b0a:	4611      	mov	r1, r2
 8016b0c:	4618      	mov	r0, r3
 8016b0e:	f000 f9df 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8016b1c:	b480      	push	{r7}
 8016b1e:	b083      	sub	sp, #12
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8016b24:	bf00      	nop
 8016b26:	4618      	mov	r0, r3
 8016b28:	370c      	adds	r7, #12
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b30:	4770      	bx	lr

08016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8016b32:	b580      	push	{r7, lr}
 8016b34:	b082      	sub	sp, #8
 8016b36:	af00      	add	r7, sp, #0
 8016b38:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	3310      	adds	r3, #16
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f000 fd5c 	bl	80175fc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 8016b44:	4603      	mov	r3, r0
 8016b46:	4618      	mov	r0, r3
 8016b48:	3708      	adds	r7, #8
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bd80      	pop	{r7, pc}

08016b4e <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8016b4e:	b580      	push	{r7, lr}
 8016b50:	b082      	sub	sp, #8
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	6078      	str	r0, [r7, #4]
 8016b56:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	6839      	ldr	r1, [r7, #0]
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f000 fd59 	bl	8017614 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	4618      	mov	r0, r3
 8016b66:	3708      	adds	r7, #8
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016b6c:	b480      	push	{r7}
 8016b6e:	b083      	sub	sp, #12
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	4618      	mov	r0, r3
 8016b78:	370c      	adds	r7, #12
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr

08016b82 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8016b82:	b5b0      	push	{r4, r5, r7, lr}
 8016b84:	b088      	sub	sp, #32
 8016b86:	af02      	add	r7, sp, #8
 8016b88:	60f8      	str	r0, [r7, #12]
 8016b8a:	60b9      	str	r1, [r7, #8]
 8016b8c:	607a      	str	r2, [r7, #4]
 8016b8e:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8016b90:	68f8      	ldr	r0, [r7, #12]
 8016b92:	f000 fd4e 	bl	8017632 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8016b96:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8016b98:	68b8      	ldr	r0, [r7, #8]
 8016b9a:	f7fd f99c 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	6878      	ldr	r0, [r7, #4]
 8016ba2:	f7ff ffe3 	bl	8016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	6838      	ldr	r0, [r7, #0]
 8016baa:	f7fd f9aa 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	9300      	str	r3, [sp, #0]
 8016bb2:	462b      	mov	r3, r5
 8016bb4:	4622      	mov	r2, r4
 8016bb6:	6979      	ldr	r1, [r7, #20]
 8016bb8:	68f8      	ldr	r0, [r7, #12]
 8016bba:	f000 fd4b 	bl	8017654 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8016bbe:	697b      	ldr	r3, [r7, #20]
	}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3718      	adds	r7, #24
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	bdb0      	pop	{r4, r5, r7, pc}

08016bc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016bc8:	b590      	push	{r4, r7, lr}
 8016bca:	b08d      	sub	sp, #52	; 0x34
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
 8016bd4:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8016bd6:	1d3b      	adds	r3, r7, #4
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f000 fd68 	bl	80176ae <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 8016bde:	4603      	mov	r3, r0
 8016be0:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8016be2:	69bc      	ldr	r4, [r7, #24]
 8016be4:	68b8      	ldr	r0, [r7, #8]
 8016be6:	f000 fccc 	bl	8017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8016bea:	4603      	mov	r3, r0
 8016bec:	429c      	cmp	r4, r3
 8016bee:	bf0c      	ite	eq
 8016bf0:	2301      	moveq	r3, #1
 8016bf2:	2300      	movne	r3, #0
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d030      	beq.n	8016c5c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8016bfa:	68b8      	ldr	r0, [r7, #8]
 8016bfc:	f000 fd68 	bl	80176d0 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8016c00:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d013      	beq.n	8016c2e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8016c06:	68bc      	ldr	r4, [r7, #8]
 8016c08:	68b8      	ldr	r0, [r7, #8]
 8016c0a:	f000 fd6d 	bl	80176e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016c0e:	4603      	mov	r3, r0
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	4618      	mov	r0, r3
 8016c14:	f000 f9b4 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	683a      	ldr	r2, [r7, #0]
 8016c1c:	4619      	mov	r1, r3
 8016c1e:	4620      	mov	r0, r4
 8016c20:	f7ff fd17 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016c24:	4603      	mov	r3, r0
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d001      	beq.n	8016c2e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	e000      	b.n	8016c30 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8016c2e:	2300      	movs	r3, #0
	  if (size() > 0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d00c      	beq.n	8016c4e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8016c34:	2300      	movs	r3, #0
 8016c36:	61fb      	str	r3, [r7, #28]
 8016c38:	68b8      	ldr	r0, [r7, #8]
 8016c3a:	f000 fd55 	bl	80176e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016c3e:	4602      	mov	r2, r0
 8016c40:	f107 031c 	add.w	r3, r7, #28
 8016c44:	4619      	mov	r1, r3
 8016c46:	68f8      	ldr	r0, [r7, #12]
 8016c48:	f7fe f840 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016c4c:	e0db      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	683a      	ldr	r2, [r7, #0]
 8016c52:	68b9      	ldr	r1, [r7, #8]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f000 fd53 	bl	8017700 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016c5a:	e0d4      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8016c5c:	68bc      	ldr	r4, [r7, #8]
 8016c5e:	69bb      	ldr	r3, [r7, #24]
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 f98d 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016c66:	4603      	mov	r3, r0
 8016c68:	461a      	mov	r2, r3
 8016c6a:	6839      	ldr	r1, [r7, #0]
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	f7ff fcf0 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d057      	beq.n	8016d28 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8016c7c:	69bc      	ldr	r4, [r7, #24]
 8016c7e:	68b8      	ldr	r0, [r7, #8]
 8016c80:	f000 fdc3 	bl	801780a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8016c84:	4603      	mov	r3, r0
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	429c      	cmp	r4, r3
 8016c8a:	bf0c      	ite	eq
 8016c8c:	2301      	moveq	r3, #1
 8016c8e:	2300      	movne	r3, #0
 8016c90:	b2db      	uxtb	r3, r3
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d00d      	beq.n	8016cb2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8016c96:	68b8      	ldr	r0, [r7, #8]
 8016c98:	f000 fdb7 	bl	801780a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	68b8      	ldr	r0, [r7, #8]
 8016ca0:	f000 fdb3 	bl	801780a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	4621      	mov	r1, r4
 8016caa:	68f8      	ldr	r0, [r7, #12]
 8016cac:	f7fe f8b5 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016cb0:	e0a9      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8016cb2:	68bc      	ldr	r4, [r7, #8]
 8016cb4:	f107 0314 	add.w	r3, r7, #20
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f000 fdb2 	bl	8017822 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 f95c 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	683a      	ldr	r2, [r7, #0]
 8016ccc:	4619      	mov	r1, r3
 8016cce:	4620      	mov	r0, r4
 8016cd0:	f7ff fcbf 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d01f      	beq.n	8016d1a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f000 fdb1 	bl	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	bf0c      	ite	eq
 8016ce8:	2301      	moveq	r3, #1
 8016cea:	2300      	movne	r3, #0
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d00a      	beq.n	8016d08 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8016cf2:	2300      	movs	r3, #0
 8016cf4:	623b      	str	r3, [r7, #32]
 8016cf6:	f107 0214 	add.w	r2, r7, #20
 8016cfa:	f107 0320 	add.w	r3, r7, #32
 8016cfe:	4619      	mov	r1, r3
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f7fd ffe3 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016d06:	e07e      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8016d08:	f107 0218 	add.w	r2, r7, #24
 8016d0c:	f107 0318 	add.w	r3, r7, #24
 8016d10:	4619      	mov	r1, r3
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f7fe f881 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016d18:	e075      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	683a      	ldr	r2, [r7, #0]
 8016d1e:	68b9      	ldr	r1, [r7, #8]
 8016d20:	4618      	mov	r0, r3
 8016d22:	f000 fced 	bl	8017700 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016d26:	e06e      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8016d28:	68bc      	ldr	r4, [r7, #8]
 8016d2a:	69bb      	ldr	r3, [r7, #24]
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f000 f927 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016d32:	4603      	mov	r3, r0
 8016d34:	683a      	ldr	r2, [r7, #0]
 8016d36:	4619      	mov	r1, r3
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f7ff fc8a 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d056      	beq.n	8016df2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8016d44:	69bb      	ldr	r3, [r7, #24]
 8016d46:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8016d48:	69bc      	ldr	r4, [r7, #24]
 8016d4a:	68b8      	ldr	r0, [r7, #8]
 8016d4c:	f000 fccc 	bl	80176e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016d50:	4603      	mov	r3, r0
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bf0c      	ite	eq
 8016d58:	2301      	moveq	r3, #1
 8016d5a:	2300      	movne	r3, #0
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d00c      	beq.n	8016d7c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8016d62:	2300      	movs	r3, #0
 8016d64:	627b      	str	r3, [r7, #36]	; 0x24
 8016d66:	68b8      	ldr	r0, [r7, #8]
 8016d68:	f000 fcbe 	bl	80176e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016d6c:	4602      	mov	r2, r0
 8016d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d72:	4619      	mov	r1, r3
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f7fd ffa9 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016d7a:	e044      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8016d7c:	68bc      	ldr	r4, [r7, #8]
 8016d7e:	f107 0310 	add.w	r3, r7, #16
 8016d82:	4618      	mov	r0, r3
 8016d84:	f000 fd6a 	bl	801785c <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f000 f8f7 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016d92:	4603      	mov	r3, r0
 8016d94:	461a      	mov	r2, r3
 8016d96:	6839      	ldr	r1, [r7, #0]
 8016d98:	4620      	mov	r0, r4
 8016d9a:	f7ff fc5a 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d01f      	beq.n	8016de4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8016da4:	69bb      	ldr	r3, [r7, #24]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f000 fd4c 	bl	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016dac:	4603      	mov	r3, r0
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	bf0c      	ite	eq
 8016db2:	2301      	moveq	r3, #1
 8016db4:	2300      	movne	r3, #0
 8016db6:	b2db      	uxtb	r3, r3
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d00a      	beq.n	8016dd2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8016dc0:	f107 0218 	add.w	r2, r7, #24
 8016dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016dc8:	4619      	mov	r1, r3
 8016dca:	68f8      	ldr	r0, [r7, #12]
 8016dcc:	f7fd ff7e 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016dd0:	e019      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8016dd2:	f107 0210 	add.w	r2, r7, #16
 8016dd6:	f107 0310 	add.w	r3, r7, #16
 8016dda:	4619      	mov	r1, r3
 8016ddc:	68f8      	ldr	r0, [r7, #12]
 8016dde:	f7fe f81c 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016de2:	e010      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	683a      	ldr	r2, [r7, #0]
 8016de8:	68b9      	ldr	r1, [r7, #8]
 8016dea:	4618      	mov	r0, r3
 8016dec:	f000 fc88 	bl	8017700 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016df0:	e009      	b.n	8016e06 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8016df2:	2300      	movs	r3, #0
 8016df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016df6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016dfa:	f107 0318 	add.w	r3, r7, #24
 8016dfe:	4619      	mov	r1, r3
 8016e00:	68f8      	ldr	r0, [r7, #12]
 8016e02:	f7fe f845 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016e06:	68f8      	ldr	r0, [r7, #12]
 8016e08:	3734      	adds	r7, #52	; 0x34
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd90      	pop	{r4, r7, pc}

08016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8016e0e:	b580      	push	{r7, lr}
 8016e10:	b084      	sub	sp, #16
 8016e12:	af00      	add	r7, sp, #0
 8016e14:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 fd31 	bl	801787e <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	f107 030c 	add.w	r3, r7, #12
 8016e22:	4611      	mov	r1, r2
 8016e24:	4618      	mov	r0, r3
 8016e26:	f000 fd38 	bl	801789a <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8016e2a:	4603      	mov	r3, r0
      }
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3710      	adds	r7, #16
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016e34:	b5b0      	push	{r4, r5, r7, lr}
 8016e36:	b086      	sub	sp, #24
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	60f8      	str	r0, [r7, #12]
 8016e3c:	60b9      	str	r1, [r7, #8]
 8016e3e:	607a      	str	r2, [r7, #4]
 8016e40:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d117      	bne.n	8016e78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8016e48:	68f8      	ldr	r0, [r7, #12]
 8016e4a:	f000 fb9a 	bl	8017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8016e4e:	4602      	mov	r2, r0
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d010      	beq.n	8016e78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8016e56:	68fc      	ldr	r4, [r7, #12]
 8016e58:	6838      	ldr	r0, [r7, #0]
 8016e5a:	f7ff ffd8 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8016e5e:	4605      	mov	r5, r0
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f000 f88d 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016e66:	4603      	mov	r3, r0
 8016e68:	461a      	mov	r2, r3
 8016e6a:	4629      	mov	r1, r5
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	f7ff fbf0 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016e72:	4603      	mov	r3, r0
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d001      	beq.n	8016e7c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8016e78:	2301      	movs	r3, #1
 8016e7a:	e000      	b.n	8016e7e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8016e7c:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8016e7e:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8016e84:	7df8      	ldrb	r0, [r7, #23]
 8016e86:	687a      	ldr	r2, [r7, #4]
 8016e88:	6839      	ldr	r1, [r7, #0]
 8016e8a:	f00f f976 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	695b      	ldr	r3, [r3, #20]
 8016e92:	1c5a      	adds	r2, r3, #1
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8016e98:	f107 0310 	add.w	r3, r7, #16
 8016e9c:	6839      	ldr	r1, [r7, #0]
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f000 f816 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016ea4:	693b      	ldr	r3, [r7, #16]
    }
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3718      	adds	r7, #24
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bdb0      	pop	{r4, r5, r7, pc}

08016eae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016eae:	b580      	push	{r7, lr}
 8016eb0:	b082      	sub	sp, #8
 8016eb2:	af00      	add	r7, sp, #0
 8016eb4:	6078      	str	r0, [r7, #4]
 8016eb6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8016eb8:	6839      	ldr	r1, [r7, #0]
 8016eba:	6878      	ldr	r0, [r7, #4]
 8016ebc:	f000 fcf9 	bl	80178b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8016ec0:	6839      	ldr	r1, [r7, #0]
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 fd0a 	bl	80178dc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8016ec8:	bf00      	nop
 8016eca:	3708      	adds	r7, #8
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	bd80      	pop	{r7, pc}

08016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016ed0:	b480      	push	{r7}
 8016ed2:	b083      	sub	sp, #12
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
 8016ed8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	683a      	ldr	r2, [r7, #0]
 8016ede:	601a      	str	r2, [r3, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	370c      	adds	r7, #12
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eec:	4770      	bx	lr

08016eee <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8016eee:	b480      	push	{r7}
 8016ef0:	b083      	sub	sp, #12
 8016ef2:	af00      	add	r7, sp, #0
 8016ef4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	689b      	ldr	r3, [r3, #8]
      }
 8016efa:	4618      	mov	r0, r3
 8016efc:	370c      	adds	r7, #12
 8016efe:	46bd      	mov	sp, r7
 8016f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f04:	4770      	bx	lr

08016f06 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8016f06:	b480      	push	{r7}
 8016f08:	b083      	sub	sp, #12
 8016f0a:	af00      	add	r7, sp, #0
 8016f0c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	3304      	adds	r3, #4
 8016f12:	4618      	mov	r0, r3
 8016f14:	370c      	adds	r7, #12
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr

08016f1e <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016f1e:	b590      	push	{r4, r7, lr}
 8016f20:	b087      	sub	sp, #28
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	60f8      	str	r0, [r7, #12]
 8016f26:	60b9      	str	r1, [r7, #8]
 8016f28:	607a      	str	r2, [r7, #4]
 8016f2a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8016f2c:	68bb      	ldr	r3, [r7, #8]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d01b      	beq.n	8016f6a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8016f32:	68fc      	ldr	r4, [r7, #12]
 8016f34:	68b8      	ldr	r0, [r7, #8]
 8016f36:	f7ff ff6a 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	683a      	ldr	r2, [r7, #0]
 8016f3e:	4619      	mov	r1, r3
 8016f40:	4620      	mov	r0, r4
 8016f42:	f7ff fb86 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8016f46:	4603      	mov	r3, r0
 8016f48:	f083 0301 	eor.w	r3, r3, #1
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d006      	beq.n	8016f60 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8016f52:	68bb      	ldr	r3, [r7, #8]
 8016f54:	607b      	str	r3, [r7, #4]
 8016f56:	68b8      	ldr	r0, [r7, #8]
 8016f58:	f000 fcd2 	bl	8017900 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8016f5c:	60b8      	str	r0, [r7, #8]
 8016f5e:	e7e5      	b.n	8016f2c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8016f60:	68b8      	ldr	r0, [r7, #8]
 8016f62:	f000 fcd9 	bl	8017918 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8016f66:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8016f68:	e7e0      	b.n	8016f2c <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 8016f6a:	f107 0314 	add.w	r3, r7, #20
 8016f6e:	6879      	ldr	r1, [r7, #4]
 8016f70:	4618      	mov	r0, r3
 8016f72:	f000 f811 	bl	8016f98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8016f76:	697b      	ldr	r3, [r7, #20]
    }
 8016f78:	4618      	mov	r0, r3
 8016f7a:	371c      	adds	r7, #28
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd90      	pop	{r4, r7, pc}

08016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f7ff ff40 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	4618      	mov	r0, r3
 8016f92:	3708      	adds	r7, #8
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}

08016f98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016f98:	b480      	push	{r7}
 8016f9a:	b083      	sub	sp, #12
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	683a      	ldr	r2, [r7, #0]
 8016fa6:	601a      	str	r2, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	4618      	mov	r0, r3
 8016fac:	370c      	adds	r7, #12
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb4:	4770      	bx	lr

08016fb6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8016fb6:	b590      	push	{r4, r7, lr}
 8016fb8:	b083      	sub	sp, #12
 8016fba:	af00      	add	r7, sp, #0
 8016fbc:	6078      	str	r0, [r7, #4]
 8016fbe:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7ff faef 	bl	80165a4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8016fc6:	4604      	mov	r4, r0
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f000 fcb1 	bl	8017930 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	4621      	mov	r1, r4
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f000 fcb7 	bl	8017948 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	4618      	mov	r0, r3
 8016fde:	370c      	adds	r7, #12
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd90      	pop	{r4, r7, pc}

08016fe4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b084      	sub	sp, #16
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	1d1a      	adds	r2, r3, #4
 8016ff0:	f107 030c 	add.w	r3, r7, #12
 8016ff4:	4611      	mov	r1, r2
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f000 f9b4 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	4618      	mov	r0, r3
 8017000:	3710      	adds	r7, #16
 8017002:	46bd      	mov	sp, r7
 8017004:	bd80      	pop	{r7, pc}

08017006 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 8017006:	b480      	push	{r7}
 8017008:	b083      	sub	sp, #12
 801700a:	af00      	add	r7, sp, #0
 801700c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801700e:	bf00      	nop
 8017010:	4618      	mov	r0, r3
 8017012:	370c      	adds	r7, #12
 8017014:	46bd      	mov	sp, r7
 8017016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801701a:	4770      	bx	lr

0801701c <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr()
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	3310      	adds	r3, #16
 8017028:	4618      	mov	r0, r3
 801702a:	f000 fcbe 	bl	80179aa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 801702e:	4603      	mov	r3, r0
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}

08017038 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017038:	b5b0      	push	{r4, r5, r7, lr}
 801703a:	b088      	sub	sp, #32
 801703c:	af02      	add	r7, sp, #8
 801703e:	60f8      	str	r0, [r7, #12]
 8017040:	60b9      	str	r1, [r7, #8]
 8017042:	607a      	str	r2, [r7, #4]
 8017044:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017046:	68f8      	ldr	r0, [r7, #12]
 8017048:	f000 fcbb 	bl	80179c2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 801704c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801704e:	68b8      	ldr	r0, [r7, #8]
 8017050:	f7fc ff41 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017054:	4604      	mov	r4, r0
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f7fc ff48 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801705c:	4605      	mov	r5, r0
 801705e:	6838      	ldr	r0, [r7, #0]
 8017060:	f7fc ff4f 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017064:	4603      	mov	r3, r0
 8017066:	9300      	str	r3, [sp, #0]
 8017068:	462b      	mov	r3, r5
 801706a:	4622      	mov	r2, r4
 801706c:	6979      	ldr	r1, [r7, #20]
 801706e:	68f8      	ldr	r0, [r7, #12]
 8017070:	f000 fcb8 	bl	80179e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8017074:	697b      	ldr	r3, [r7, #20]
	}
 8017076:	4618      	mov	r0, r3
 8017078:	3718      	adds	r7, #24
 801707a:	46bd      	mov	sp, r7
 801707c:	bdb0      	pop	{r4, r5, r7, pc}

0801707e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801707e:	b590      	push	{r4, r7, lr}
 8017080:	b08d      	sub	sp, #52	; 0x34
 8017082:	af00      	add	r7, sp, #0
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
 801708a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801708c:	1d3b      	adds	r3, r7, #4
 801708e:	4618      	mov	r0, r3
 8017090:	f000 fcd5 	bl	8017a3e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>
 8017094:	4603      	mov	r3, r0
 8017096:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8017098:	69bc      	ldr	r4, [r7, #24]
 801709a:	68b8      	ldr	r0, [r7, #8]
 801709c:	f000 fc48 	bl	8017930 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 80170a0:	4603      	mov	r3, r0
 80170a2:	429c      	cmp	r4, r3
 80170a4:	bf0c      	ite	eq
 80170a6:	2301      	moveq	r3, #1
 80170a8:	2300      	movne	r3, #0
 80170aa:	b2db      	uxtb	r3, r3
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d030      	beq.n	8017112 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 80170b0:	68b8      	ldr	r0, [r7, #8]
 80170b2:	f000 fcd5 	bl	8017a60 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 80170b6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d013      	beq.n	80170e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80170bc:	68bc      	ldr	r4, [r7, #8]
 80170be:	68b8      	ldr	r0, [r7, #8]
 80170c0:	f000 fcda 	bl	8017a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 80170c4:	4603      	mov	r3, r0
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f000 fa1b 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80170ce:	4603      	mov	r3, r0
 80170d0:	683a      	ldr	r2, [r7, #0]
 80170d2:	4619      	mov	r1, r3
 80170d4:	4620      	mov	r0, r4
 80170d6:	f7fc fa0f 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 80170da:	4603      	mov	r3, r0
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d001      	beq.n	80170e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 80170e0:	2301      	movs	r3, #1
 80170e2:	e000      	b.n	80170e6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 80170e4:	2300      	movs	r3, #0
	  if (size() > 0
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d00c      	beq.n	8017104 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80170ea:	2300      	movs	r3, #0
 80170ec:	61fb      	str	r3, [r7, #28]
 80170ee:	68b8      	ldr	r0, [r7, #8]
 80170f0:	f000 fcc2 	bl	8017a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 80170f4:	4602      	mov	r2, r0
 80170f6:	f107 031c 	add.w	r3, r7, #28
 80170fa:	4619      	mov	r1, r3
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7fd fde5 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8017102:	e0db      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	683a      	ldr	r2, [r7, #0]
 8017108:	68b9      	ldr	r1, [r7, #8]
 801710a:	4618      	mov	r0, r3
 801710c:	f000 fcc0 	bl	8017a90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 8017110:	e0d4      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8017112:	68bc      	ldr	r4, [r7, #8]
 8017114:	69bb      	ldr	r3, [r7, #24]
 8017116:	4618      	mov	r0, r3
 8017118:	f000 f9f4 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801711c:	4603      	mov	r3, r0
 801711e:	461a      	mov	r2, r3
 8017120:	6839      	ldr	r1, [r7, #0]
 8017122:	4620      	mov	r0, r4
 8017124:	f7fc f9e8 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017128:	4603      	mov	r3, r0
 801712a:	2b00      	cmp	r3, #0
 801712c:	d057      	beq.n	80171de <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 801712e:	69bb      	ldr	r3, [r7, #24]
 8017130:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8017132:	69bc      	ldr	r4, [r7, #24]
 8017134:	68b8      	ldr	r0, [r7, #8]
 8017136:	f000 fd30 	bl	8017b9a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801713a:	4603      	mov	r3, r0
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	429c      	cmp	r4, r3
 8017140:	bf0c      	ite	eq
 8017142:	2301      	moveq	r3, #1
 8017144:	2300      	movne	r3, #0
 8017146:	b2db      	uxtb	r3, r3
 8017148:	2b00      	cmp	r3, #0
 801714a:	d00d      	beq.n	8017168 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801714c:	68b8      	ldr	r0, [r7, #8]
 801714e:	f000 fd24 	bl	8017b9a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 8017152:	4604      	mov	r4, r0
 8017154:	68b8      	ldr	r0, [r7, #8]
 8017156:	f000 fd20 	bl	8017b9a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801715a:	4603      	mov	r3, r0
 801715c:	461a      	mov	r2, r3
 801715e:	4621      	mov	r1, r4
 8017160:	68f8      	ldr	r0, [r7, #12]
 8017162:	f7fd fe5a 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8017166:	e0a9      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8017168:	68bc      	ldr	r4, [r7, #8]
 801716a:	f107 0314 	add.w	r3, r7, #20
 801716e:	4618      	mov	r0, r3
 8017170:	f000 fd1f 	bl	8017bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
 8017174:	4603      	mov	r3, r0
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4618      	mov	r0, r3
 801717a:	f000 f9c3 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801717e:	4603      	mov	r3, r0
 8017180:	683a      	ldr	r2, [r7, #0]
 8017182:	4619      	mov	r1, r3
 8017184:	4620      	mov	r0, r4
 8017186:	f7fc f9b7 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801718a:	4603      	mov	r3, r0
 801718c:	2b00      	cmp	r3, #0
 801718e:	d01f      	beq.n	80171d0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8017190:	697b      	ldr	r3, [r7, #20]
 8017192:	4618      	mov	r0, r3
 8017194:	f7ff fc71 	bl	8016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017198:	4603      	mov	r3, r0
 801719a:	2b00      	cmp	r3, #0
 801719c:	bf0c      	ite	eq
 801719e:	2301      	moveq	r3, #1
 80171a0:	2300      	movne	r3, #0
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d00a      	beq.n	80171be <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80171a8:	2300      	movs	r3, #0
 80171aa:	623b      	str	r3, [r7, #32]
 80171ac:	f107 0214 	add.w	r2, r7, #20
 80171b0:	f107 0320 	add.w	r3, r7, #32
 80171b4:	4619      	mov	r1, r3
 80171b6:	68f8      	ldr	r0, [r7, #12]
 80171b8:	f7fd fd88 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80171bc:	e07e      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80171be:	f107 0218 	add.w	r2, r7, #24
 80171c2:	f107 0318 	add.w	r3, r7, #24
 80171c6:	4619      	mov	r1, r3
 80171c8:	68f8      	ldr	r0, [r7, #12]
 80171ca:	f7fd fe26 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80171ce:	e075      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	683a      	ldr	r2, [r7, #0]
 80171d4:	68b9      	ldr	r1, [r7, #8]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f000 fc5a 	bl	8017a90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 80171dc:	e06e      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80171de:	68bc      	ldr	r4, [r7, #8]
 80171e0:	69bb      	ldr	r3, [r7, #24]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f000 f98e 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80171e8:	4603      	mov	r3, r0
 80171ea:	683a      	ldr	r2, [r7, #0]
 80171ec:	4619      	mov	r1, r3
 80171ee:	4620      	mov	r0, r4
 80171f0:	f7fc f982 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 80171f4:	4603      	mov	r3, r0
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d056      	beq.n	80172a8 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 80171fa:	69bb      	ldr	r3, [r7, #24]
 80171fc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80171fe:	69bc      	ldr	r4, [r7, #24]
 8017200:	68b8      	ldr	r0, [r7, #8]
 8017202:	f000 fc39 	bl	8017a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8017206:	4603      	mov	r3, r0
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	429c      	cmp	r4, r3
 801720c:	bf0c      	ite	eq
 801720e:	2301      	moveq	r3, #1
 8017210:	2300      	movne	r3, #0
 8017212:	b2db      	uxtb	r3, r3
 8017214:	2b00      	cmp	r3, #0
 8017216:	d00c      	beq.n	8017232 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8017218:	2300      	movs	r3, #0
 801721a:	627b      	str	r3, [r7, #36]	; 0x24
 801721c:	68b8      	ldr	r0, [r7, #8]
 801721e:	f000 fc2b 	bl	8017a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 8017222:	4602      	mov	r2, r0
 8017224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017228:	4619      	mov	r1, r3
 801722a:	68f8      	ldr	r0, [r7, #12]
 801722c:	f7fd fd4e 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8017230:	e044      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8017232:	68bc      	ldr	r4, [r7, #8]
 8017234:	f107 0310 	add.w	r3, r7, #16
 8017238:	4618      	mov	r0, r3
 801723a:	f000 fccb 	bl	8017bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>
 801723e:	4603      	mov	r3, r0
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	4618      	mov	r0, r3
 8017244:	f000 f95e 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8017248:	4603      	mov	r3, r0
 801724a:	461a      	mov	r2, r3
 801724c:	6839      	ldr	r1, [r7, #0]
 801724e:	4620      	mov	r0, r4
 8017250:	f7fc f952 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d01f      	beq.n	801729a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	4618      	mov	r0, r3
 801725e:	f7ff fc0c 	bl	8016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	bf0c      	ite	eq
 8017268:	2301      	moveq	r3, #1
 801726a:	2300      	movne	r3, #0
 801726c:	b2db      	uxtb	r3, r3
 801726e:	2b00      	cmp	r3, #0
 8017270:	d00a      	beq.n	8017288 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8017272:	2300      	movs	r3, #0
 8017274:	62bb      	str	r3, [r7, #40]	; 0x28
 8017276:	f107 0218 	add.w	r2, r7, #24
 801727a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801727e:	4619      	mov	r1, r3
 8017280:	68f8      	ldr	r0, [r7, #12]
 8017282:	f7fd fd23 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8017286:	e019      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8017288:	f107 0210 	add.w	r2, r7, #16
 801728c:	f107 0310 	add.w	r3, r7, #16
 8017290:	4619      	mov	r1, r3
 8017292:	68f8      	ldr	r0, [r7, #12]
 8017294:	f7fd fdc1 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8017298:	e010      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	683a      	ldr	r2, [r7, #0]
 801729e:	68b9      	ldr	r1, [r7, #8]
 80172a0:	4618      	mov	r0, r3
 80172a2:	f000 fbf5 	bl	8017a90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 80172a6:	e009      	b.n	80172bc <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80172a8:	2300      	movs	r3, #0
 80172aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80172b0:	f107 0318 	add.w	r3, r7, #24
 80172b4:	4619      	mov	r1, r3
 80172b6:	68f8      	ldr	r0, [r7, #12]
 80172b8:	f7fd fdea 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	3734      	adds	r7, #52	; 0x34
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd90      	pop	{r4, r7, pc}

080172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b084      	sub	sp, #16
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80172cc:	6878      	ldr	r0, [r7, #4]
 80172ce:	f000 fc92 	bl	8017bf6 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 80172d2:	4602      	mov	r2, r0
 80172d4:	f107 030c 	add.w	r3, r7, #12
 80172d8:	4611      	mov	r1, r2
 80172da:	4618      	mov	r0, r3
 80172dc:	f000 fc99 	bl	8017c12 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>
 80172e0:	4603      	mov	r3, r0
      }
 80172e2:	4618      	mov	r0, r3
 80172e4:	3710      	adds	r7, #16
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}

080172ea <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80172ea:	b5b0      	push	{r4, r5, r7, lr}
 80172ec:	b086      	sub	sp, #24
 80172ee:	af00      	add	r7, sp, #0
 80172f0:	60f8      	str	r0, [r7, #12]
 80172f2:	60b9      	str	r1, [r7, #8]
 80172f4:	607a      	str	r2, [r7, #4]
 80172f6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80172f8:	68bb      	ldr	r3, [r7, #8]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d117      	bne.n	801732e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80172fe:	68f8      	ldr	r0, [r7, #12]
 8017300:	f000 fb16 	bl	8017930 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8017304:	4602      	mov	r2, r0
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	4293      	cmp	r3, r2
 801730a:	d010      	beq.n	801732e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801730c:	68fc      	ldr	r4, [r7, #12]
 801730e:	6838      	ldr	r0, [r7, #0]
 8017310:	f7ff ffd8 	bl	80172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8017314:	4605      	mov	r5, r0
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f000 f8f4 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801731c:	4603      	mov	r3, r0
 801731e:	461a      	mov	r2, r3
 8017320:	4629      	mov	r1, r5
 8017322:	4620      	mov	r0, r4
 8017324:	f7fc f8e8 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d001      	beq.n	8017332 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 801732e:	2301      	movs	r3, #1
 8017330:	e000      	b.n	8017334 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8017332:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8017334:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801733a:	7df8      	ldrb	r0, [r7, #23]
 801733c:	687a      	ldr	r2, [r7, #4]
 801733e:	6839      	ldr	r1, [r7, #0]
 8017340:	f00e ff1b 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	695b      	ldr	r3, [r3, #20]
 8017348:	1c5a      	adds	r2, r3, #1
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801734e:	f107 0310 	add.w	r3, r7, #16
 8017352:	6839      	ldr	r1, [r7, #0]
 8017354:	4618      	mov	r0, r3
 8017356:	f000 f805 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 801735a:	693b      	ldr	r3, [r7, #16]
    }
 801735c:	4618      	mov	r0, r3
 801735e:	3718      	adds	r7, #24
 8017360:	46bd      	mov	sp, r7
 8017362:	bdb0      	pop	{r4, r5, r7, pc}

08017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017364:	b480      	push	{r7}
 8017366:	b083      	sub	sp, #12
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	683a      	ldr	r2, [r7, #0]
 8017372:	601a      	str	r2, [r3, #0]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	4618      	mov	r0, r3
 8017378:	370c      	adds	r7, #12
 801737a:	46bd      	mov	sp, r7
 801737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017380:	4770      	bx	lr

08017382 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017382:	b480      	push	{r7}
 8017384:	b083      	sub	sp, #12
 8017386:	af00      	add	r7, sp, #0
 8017388:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	4618      	mov	r0, r3
 801738e:	370c      	adds	r7, #12
 8017390:	46bd      	mov	sp, r7
 8017392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017396:	4770      	bx	lr

08017398 <_ZNSt5tupleIJOtEEC1IJtELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8017398:	b590      	push	{r4, r7, lr}
 801739a:	b083      	sub	sp, #12
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 80173a2:	687c      	ldr	r4, [r7, #4]
 80173a4:	6838      	ldr	r0, [r7, #0]
 80173a6:	f7ff ffec 	bl	8017382 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80173aa:	4603      	mov	r3, r0
 80173ac:	4619      	mov	r1, r3
 80173ae:	4620      	mov	r0, r4
 80173b0:	f000 fc3b 	bl	8017c2a <_ZNSt11_Tuple_implILj0EJOtEEC1ItEEOT_>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	4618      	mov	r0, r3
 80173b8:	370c      	adds	r7, #12
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd90      	pop	{r4, r7, pc}

080173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80173be:	b480      	push	{r7}
 80173c0:	b083      	sub	sp, #12
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	4618      	mov	r0, r3
 80173ca:	370c      	adds	r7, #12
 80173cc:	46bd      	mov	sp, r7
 80173ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d2:	4770      	bx	lr

080173d4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80173d4:	b5b0      	push	{r4, r5, r7, lr}
 80173d6:	b088      	sub	sp, #32
 80173d8:	af02      	add	r7, sp, #8
 80173da:	60f8      	str	r0, [r7, #12]
 80173dc:	60b9      	str	r1, [r7, #8]
 80173de:	607a      	str	r2, [r7, #4]
 80173e0:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80173e2:	68f8      	ldr	r0, [r7, #12]
 80173e4:	f000 f925 	bl	8017632 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 80173e8:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80173ea:	68b8      	ldr	r0, [r7, #8]
 80173ec:	f7fc fd73 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80173f0:	4604      	mov	r4, r0
 80173f2:	6878      	ldr	r0, [r7, #4]
 80173f4:	f7ff ffe3 	bl	80173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80173f8:	4605      	mov	r5, r0
 80173fa:	6838      	ldr	r0, [r7, #0]
 80173fc:	f7fc fd81 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017400:	4603      	mov	r3, r0
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	462b      	mov	r3, r5
 8017406:	4622      	mov	r2, r4
 8017408:	6979      	ldr	r1, [r7, #20]
 801740a:	68f8      	ldr	r0, [r7, #12]
 801740c:	f000 fc20 	bl	8017c50 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8017410:	697b      	ldr	r3, [r7, #20]
	}
 8017412:	4618      	mov	r0, r3
 8017414:	3718      	adds	r7, #24
 8017416:	46bd      	mov	sp, r7
 8017418:	bdb0      	pop	{r4, r5, r7, pc}

0801741a <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801741a:	b580      	push	{r7, lr}
 801741c:	b082      	sub	sp, #8
 801741e:	af00      	add	r7, sp, #0
 8017420:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	4618      	mov	r0, r3
 8017426:	f7fe fe23 	bl	8016070 <_ZNKSt14_Function_base8_M_emptyEv>
 801742a:	4603      	mov	r3, r0
 801742c:	f083 0301 	eor.w	r3, r3, #1
 8017430:	b2db      	uxtb	r3, r3
 8017432:	4618      	mov	r0, r3
 8017434:	3708      	adds	r7, #8
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}

0801743a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801743a:	b580      	push	{r7, lr}
 801743c:	b084      	sub	sp, #16
 801743e:	af00      	add	r7, sp, #0
 8017440:	6078      	str	r0, [r7, #4]
 8017442:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8017444:	6878      	ldr	r0, [r7, #4]
 8017446:	f000 fc30 	bl	8017caa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801744a:	4602      	mov	r2, r0
 801744c:	f107 0308 	add.w	r3, r7, #8
 8017450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017454:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8017458:	6838      	ldr	r0, [r7, #0]
 801745a:	f000 fc26 	bl	8017caa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801745e:	4602      	mov	r2, r0
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017466:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801746a:	f107 0308 	add.w	r3, r7, #8
 801746e:	4618      	mov	r0, r3
 8017470:	f000 fc1b 	bl	8017caa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8017474:	4602      	mov	r2, r0
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	e892 0003 	ldmia.w	r2, {r0, r1}
 801747c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8017480:	bf00      	nop
 8017482:	3710      	adds	r7, #16
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8017488:	b580      	push	{r7, lr}
 801748a:	b084      	sub	sp, #16
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
 8017490:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8017492:	6878      	ldr	r0, [r7, #4]
 8017494:	f000 fc14 	bl	8017cc0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8017498:	4603      	mov	r3, r0
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801749e:	6838      	ldr	r0, [r7, #0]
 80174a0:	f000 fc0e 	bl	8017cc0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80174a4:	4603      	mov	r3, r0
 80174a6:	681a      	ldr	r2, [r3, #0]
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80174ac:	f107 030c 	add.w	r3, r7, #12
 80174b0:	4618      	mov	r0, r3
 80174b2:	f000 fc05 	bl	8017cc0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80174b6:	4603      	mov	r3, r0
 80174b8:	681a      	ldr	r2, [r3, #0]
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	601a      	str	r2, [r3, #0]
    }
 80174be:	bf00      	nop
 80174c0:	3710      	adds	r7, #16
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
 80174ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f000 fc00 	bl	8017cd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80174d6:	4603      	mov	r3, r0
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80174dc:	6838      	ldr	r0, [r7, #0]
 80174de:	f000 fbfa 	bl	8017cd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80174e2:	4603      	mov	r3, r0
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80174ea:	f107 030c 	add.w	r3, r7, #12
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 fbf1 	bl	8017cd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80174f4:	4603      	mov	r3, r0
 80174f6:	681a      	ldr	r2, [r3, #0]
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	601a      	str	r2, [r3, #0]
    }
 80174fc:	bf00      	nop
 80174fe:	3710      	adds	r7, #16
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}

08017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8017504:	b580      	push	{r7, lr}
 8017506:	b082      	sub	sp, #8
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f7ff fed9 	bl	80172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8017512:	4603      	mov	r3, r0
 8017514:	4618      	mov	r0, r3
 8017516:	3708      	adds	r7, #8
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801751c:	b590      	push	{r4, r7, lr}
 801751e:	b083      	sub	sp, #12
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f000 fbe0 	bl	8017cec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801752c:	4604      	mov	r4, r0
 801752e:	6838      	ldr	r0, [r7, #0]
 8017530:	f7ff fd74 	bl	801701c <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8017534:	4603      	mov	r3, r0
 8017536:	4619      	mov	r1, r3
 8017538:	4620      	mov	r0, r4
 801753a:	f000 fbe2 	bl	8017d02 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>
      }
 801753e:	bf00      	nop
 8017540:	370c      	adds	r7, #12
 8017542:	46bd      	mov	sp, r7
 8017544:	bd90      	pop	{r4, r7, pc}

08017546 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8017546:	b580      	push	{r7, lr}
 8017548:	b082      	sub	sp, #8
 801754a:	af00      	add	r7, sp, #0
 801754c:	6078      	str	r0, [r7, #4]
 801754e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f000 fbcb 	bl	8017cec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8017556:	4603      	mov	r3, r0
 8017558:	2201      	movs	r2, #1
 801755a:	6839      	ldr	r1, [r7, #0]
 801755c:	4618      	mov	r0, r3
 801755e:	f000 fbdc 	bl	8017d1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>
 8017562:	bf00      	nop
 8017564:	3708      	adds	r7, #8
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}

0801756a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801756a:	b480      	push	{r7}
 801756c:	b083      	sub	sp, #12
 801756e:	af00      	add	r7, sp, #0
 8017570:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	689b      	ldr	r3, [r3, #8]
 8017576:	4618      	mov	r0, r3
 8017578:	370c      	adds	r7, #12
 801757a:	46bd      	mov	sp, r7
 801757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017580:	4770      	bx	lr

08017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8017582:	b480      	push	{r7}
 8017584:	b083      	sub	sp, #12
 8017586:	af00      	add	r7, sp, #0
 8017588:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	3304      	adds	r3, #4
 801758e:	4618      	mov	r0, r3
 8017590:	370c      	adds	r7, #12
 8017592:	46bd      	mov	sp, r7
 8017594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017598:	4770      	bx	lr

0801759a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801759a:	b590      	push	{r4, r7, lr}
 801759c:	b087      	sub	sp, #28
 801759e:	af00      	add	r7, sp, #0
 80175a0:	60f8      	str	r0, [r7, #12]
 80175a2:	60b9      	str	r1, [r7, #8]
 80175a4:	607a      	str	r2, [r7, #4]
 80175a6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d01b      	beq.n	80175e6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80175ae:	68fc      	ldr	r4, [r7, #12]
 80175b0:	68b8      	ldr	r0, [r7, #8]
 80175b2:	f7ff fc2c 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80175b6:	4603      	mov	r3, r0
 80175b8:	683a      	ldr	r2, [r7, #0]
 80175ba:	4619      	mov	r1, r3
 80175bc:	4620      	mov	r0, r4
 80175be:	f7ff f848 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 80175c2:	4603      	mov	r3, r0
 80175c4:	f083 0301 	eor.w	r3, r3, #1
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d006      	beq.n	80175dc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	607b      	str	r3, [r7, #4]
 80175d2:	68b8      	ldr	r0, [r7, #8]
 80175d4:	f000 fbc0 	bl	8017d58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80175d8:	60b8      	str	r0, [r7, #8]
 80175da:	e7e5      	b.n	80175a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80175dc:	68b8      	ldr	r0, [r7, #8]
 80175de:	f000 f931 	bl	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80175e2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80175e4:	e7e0      	b.n	80175a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 80175e6:	f107 0314 	add.w	r3, r7, #20
 80175ea:	6879      	ldr	r1, [r7, #4]
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7ff fc6f 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80175f2:	697b      	ldr	r3, [r7, #20]
    }
 80175f4:	4618      	mov	r0, r3
 80175f6:	371c      	adds	r7, #28
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd90      	pop	{r4, r7, pc}

080175fc <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f000 fbb3 	bl	8017d70 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 801760a:	4603      	mov	r3, r0
 801760c:	4618      	mov	r0, r3
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8017614:	b480      	push	{r7}
 8017616:	b083      	sub	sp, #12
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	601a      	str	r2, [r3, #0]
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	4618      	mov	r0, r3
 8017628:	370c      	adds	r7, #12
 801762a:	46bd      	mov	sp, r7
 801762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017630:	4770      	bx	lr

08017632 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8017632:	b580      	push	{r7, lr}
 8017634:	b082      	sub	sp, #8
 8017636:	af00      	add	r7, sp, #0
 8017638:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f000 fba3 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8017640:	4603      	mov	r3, r0
 8017642:	2101      	movs	r1, #1
 8017644:	4618      	mov	r0, r3
 8017646:	f000 fba9 	bl	8017d9c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 801764a:	4603      	mov	r3, r0
 801764c:	4618      	mov	r0, r3
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017658:	b086      	sub	sp, #24
 801765a:	af02      	add	r7, sp, #8
 801765c:	60f8      	str	r0, [r7, #12]
 801765e:	60b9      	str	r1, [r7, #8]
 8017660:	607a      	str	r2, [r7, #4]
 8017662:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017664:	68bb      	ldr	r3, [r7, #8]
 8017666:	4619      	mov	r1, r3
 8017668:	2028      	movs	r0, #40	; 0x28
 801766a:	f7e9 fef5 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801766e:	68f8      	ldr	r0, [r7, #12]
 8017670:	f000 fb89 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8017674:	4604      	mov	r4, r0
 8017676:	68b8      	ldr	r0, [r7, #8]
 8017678:	f7ff fa5b 	bl	8016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 801767c:	4605      	mov	r5, r0
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f7fc fc29 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017684:	4606      	mov	r6, r0
 8017686:	6838      	ldr	r0, [r7, #0]
 8017688:	f7ff fa70 	bl	8016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801768c:	4680      	mov	r8, r0
 801768e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017690:	f7fc fc37 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017694:	4603      	mov	r3, r0
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	4643      	mov	r3, r8
 801769a:	4632      	mov	r2, r6
 801769c:	4629      	mov	r1, r5
 801769e:	4620      	mov	r0, r4
 80176a0:	f000 fbd9 	bl	8017e56 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 80176a4:	bf00      	nop
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176ae <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80176ae:	b580      	push	{r7, lr}
 80176b0:	b084      	sub	sp, #16
 80176b2:	af00      	add	r7, sp, #0
 80176b4:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	f107 030c 	add.w	r3, r7, #12
 80176be:	4611      	mov	r1, r2
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7ff fc05 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	4618      	mov	r0, r3
 80176ca:	3710      	adds	r7, #16
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80176d0:	b480      	push	{r7}
 80176d2:	b083      	sub	sp, #12
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	695b      	ldr	r3, [r3, #20]
 80176dc:	4618      	mov	r0, r3
 80176de:	370c      	adds	r7, #12
 80176e0:	46bd      	mov	sp, r7
 80176e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e6:	4770      	bx	lr

080176e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80176e8:	b480      	push	{r7}
 80176ea:	b083      	sub	sp, #12
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	3310      	adds	r3, #16
 80176f4:	4618      	mov	r0, r3
 80176f6:	370c      	adds	r7, #12
 80176f8:	46bd      	mov	sp, r7
 80176fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fe:	4770      	bx	lr

08017700 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8017700:	b590      	push	{r4, r7, lr}
 8017702:	b08b      	sub	sp, #44	; 0x2c
 8017704:	af00      	add	r7, sp, #0
 8017706:	60f8      	str	r0, [r7, #12]
 8017708:	60b9      	str	r1, [r7, #8]
 801770a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801770c:	68b8      	ldr	r0, [r7, #8]
 801770e:	f7ff ff2c 	bl	801756a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8017712:	4603      	mov	r3, r0
 8017714:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8017716:	68b8      	ldr	r0, [r7, #8]
 8017718:	f7ff ff33 	bl	8017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801771c:	4603      	mov	r3, r0
 801771e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8017720:	2301      	movs	r3, #1
 8017722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8017726:	69bb      	ldr	r3, [r7, #24]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d020      	beq.n	801776e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801772c:	69bb      	ldr	r3, [r7, #24]
 801772e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8017730:	68bc      	ldr	r4, [r7, #8]
 8017732:	69bb      	ldr	r3, [r7, #24]
 8017734:	4618      	mov	r0, r3
 8017736:	f7ff fb6a 	bl	8016e0e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801773a:	4603      	mov	r3, r0
 801773c:	461a      	mov	r2, r3
 801773e:	6879      	ldr	r1, [r7, #4]
 8017740:	4620      	mov	r0, r4
 8017742:	f7fe ff86 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8017746:	4603      	mov	r3, r0
 8017748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801774c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017750:	2b00      	cmp	r3, #0
 8017752:	d005      	beq.n	8017760 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8017754:	69bb      	ldr	r3, [r7, #24]
 8017756:	4618      	mov	r0, r3
 8017758:	f000 fafe 	bl	8017d58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801775c:	4603      	mov	r3, r0
 801775e:	e004      	b.n	801776a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8017760:	69bb      	ldr	r3, [r7, #24]
 8017762:	4618      	mov	r0, r3
 8017764:	f000 f86e 	bl	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017768:	4603      	mov	r3, r0
 801776a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801776c:	e7db      	b.n	8017726 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801776e:	697a      	ldr	r2, [r7, #20]
 8017770:	f107 0310 	add.w	r3, r7, #16
 8017774:	4611      	mov	r1, r2
 8017776:	4618      	mov	r0, r3
 8017778:	f7ff fbaa 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801777c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017780:	2b00      	cmp	r3, #0
 8017782:	d01d      	beq.n	80177c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8017784:	68b8      	ldr	r0, [r7, #8]
 8017786:	f000 fb82 	bl	8017e8e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 801778a:	4603      	mov	r3, r0
 801778c:	61fb      	str	r3, [r7, #28]
 801778e:	f107 021c 	add.w	r2, r7, #28
 8017792:	f107 0310 	add.w	r3, r7, #16
 8017796:	4611      	mov	r1, r2
 8017798:	4618      	mov	r0, r3
 801779a:	f7fe ff2b 	bl	80165f4 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d008      	beq.n	80177b6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80177a4:	f107 0214 	add.w	r2, r7, #20
 80177a8:	f107 0318 	add.w	r3, r7, #24
 80177ac:	4619      	mov	r1, r3
 80177ae:	68f8      	ldr	r0, [r7, #12]
 80177b0:	f000 fb7e 	bl	8017eb0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 80177b4:	e025      	b.n	8017802 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80177b6:	f107 0310 	add.w	r3, r7, #16
 80177ba:	4618      	mov	r0, r3
 80177bc:	f000 f831 	bl	8017822 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80177c0:	68bc      	ldr	r4, [r7, #8]
 80177c2:	693b      	ldr	r3, [r7, #16]
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7ff fbdb 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80177ca:	4603      	mov	r3, r0
 80177cc:	687a      	ldr	r2, [r7, #4]
 80177ce:	4619      	mov	r1, r3
 80177d0:	4620      	mov	r0, r4
 80177d2:	f7fe ff3e 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 80177d6:	4603      	mov	r3, r0
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d008      	beq.n	80177ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80177dc:	f107 0214 	add.w	r2, r7, #20
 80177e0:	f107 0318 	add.w	r3, r7, #24
 80177e4:	4619      	mov	r1, r3
 80177e6:	68f8      	ldr	r0, [r7, #12]
 80177e8:	f000 fb62 	bl	8017eb0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 80177ec:	e009      	b.n	8017802 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80177ee:	2300      	movs	r3, #0
 80177f0:	623b      	str	r3, [r7, #32]
 80177f2:	f107 0220 	add.w	r2, r7, #32
 80177f6:	f107 0310 	add.w	r3, r7, #16
 80177fa:	4619      	mov	r1, r3
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	f7fd fb47 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8017802:	68f8      	ldr	r0, [r7, #12]
 8017804:	372c      	adds	r7, #44	; 0x2c
 8017806:	46bd      	mov	sp, r7
 8017808:	bd90      	pop	{r4, r7, pc}

0801780a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801780a:	b480      	push	{r7}
 801780c:	b083      	sub	sp, #12
 801780e:	af00      	add	r7, sp, #0
 8017810:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	330c      	adds	r3, #12
 8017816:	4618      	mov	r0, r3
 8017818:	370c      	adds	r7, #12
 801781a:	46bd      	mov	sp, r7
 801781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017820:	4770      	bx	lr

08017822 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8017822:	b580      	push	{r7, lr}
 8017824:	b082      	sub	sp, #8
 8017826:	af00      	add	r7, sp, #0
 8017828:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f00e fca1 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8017834:	4602      	mov	r2, r0
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	601a      	str	r2, [r3, #0]
	return *this;
 801783a:	687b      	ldr	r3, [r7, #4]
      }
 801783c:	4618      	mov	r0, r3
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017844:	b480      	push	{r7}
 8017846:	b083      	sub	sp, #12
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	68db      	ldr	r3, [r3, #12]
 8017850:	4618      	mov	r0, r3
 8017852:	370c      	adds	r7, #12
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr

0801785c <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	4618      	mov	r0, r3
 801786a:	f00e fc82 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801786e:	4602      	mov	r2, r0
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	601a      	str	r2, [r3, #0]
	return *this;
 8017874:	687b      	ldr	r3, [r7, #4]
      }
 8017876:	4618      	mov	r0, r3
 8017878:	3708      	adds	r7, #8
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}

0801787e <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 801787e:	b580      	push	{r7, lr}
 8017880:	b082      	sub	sp, #8
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	3310      	adds	r3, #16
 801788a:	4618      	mov	r0, r3
 801788c:	f000 fb29 	bl	8017ee2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 8017890:	4603      	mov	r3, r0
 8017892:	4618      	mov	r0, r3
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 801789a:	b480      	push	{r7}
 801789c:	b083      	sub	sp, #12
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
 80178a2:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	4618      	mov	r0, r3
 80178a8:	370c      	adds	r7, #12
 80178aa:	46bd      	mov	sp, r7
 80178ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b0:	4770      	bx	lr

080178b2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80178b2:	b590      	push	{r4, r7, lr}
 80178b4:	b083      	sub	sp, #12
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
 80178ba:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80178bc:	6878      	ldr	r0, [r7, #4]
 80178be:	f000 fa62 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80178c2:	4604      	mov	r4, r0
 80178c4:	6838      	ldr	r0, [r7, #0]
 80178c6:	f7ff f934 	bl	8016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 80178ca:	4603      	mov	r3, r0
 80178cc:	4619      	mov	r1, r3
 80178ce:	4620      	mov	r0, r4
 80178d0:	f000 fb13 	bl	8017efa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 80178d4:	bf00      	nop
 80178d6:	370c      	adds	r7, #12
 80178d8:	46bd      	mov	sp, r7
 80178da:	bd90      	pop	{r4, r7, pc}

080178dc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80178dc:	b580      	push	{r7, lr}
 80178de:	b082      	sub	sp, #8
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f000 fa4d 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2201      	movs	r2, #1
 80178f0:	6839      	ldr	r1, [r7, #0]
 80178f2:	4618      	mov	r0, r3
 80178f4:	f000 fb0d 	bl	8017f12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 80178f8:	bf00      	nop
 80178fa:	3708      	adds	r7, #8
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017900:	b480      	push	{r7}
 8017902:	b083      	sub	sp, #12
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	689b      	ldr	r3, [r3, #8]
 801790c:	4618      	mov	r0, r3
 801790e:	370c      	adds	r7, #12
 8017910:	46bd      	mov	sp, r7
 8017912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017916:	4770      	bx	lr

08017918 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017918:	b480      	push	{r7}
 801791a:	b083      	sub	sp, #12
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	68db      	ldr	r3, [r3, #12]
 8017924:	4618      	mov	r0, r3
 8017926:	370c      	adds	r7, #12
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr

08017930 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8017930:	b480      	push	{r7}
 8017932:	b083      	sub	sp, #12
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	3304      	adds	r3, #4
 801793c:	4618      	mov	r0, r3
 801793e:	370c      	adds	r7, #12
 8017940:	46bd      	mov	sp, r7
 8017942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017946:	4770      	bx	lr

08017948 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8017948:	b590      	push	{r4, r7, lr}
 801794a:	b087      	sub	sp, #28
 801794c:	af00      	add	r7, sp, #0
 801794e:	60f8      	str	r0, [r7, #12]
 8017950:	60b9      	str	r1, [r7, #8]
 8017952:	607a      	str	r2, [r7, #4]
 8017954:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d01b      	beq.n	8017994 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801795c:	68fc      	ldr	r4, [r7, #12]
 801795e:	68b8      	ldr	r0, [r7, #8]
 8017960:	f7ff fcb0 	bl	80172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8017964:	4603      	mov	r3, r0
 8017966:	683a      	ldr	r2, [r7, #0]
 8017968:	4619      	mov	r1, r3
 801796a:	4620      	mov	r0, r4
 801796c:	f7fb fdc4 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017970:	4603      	mov	r3, r0
 8017972:	f083 0301 	eor.w	r3, r3, #1
 8017976:	b2db      	uxtb	r3, r3
 8017978:	2b00      	cmp	r3, #0
 801797a:	d006      	beq.n	801798a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	607b      	str	r3, [r7, #4]
 8017980:	68b8      	ldr	r0, [r7, #8]
 8017982:	f7ff f886 	bl	8016a92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017986:	60b8      	str	r0, [r7, #8]
 8017988:	e7e5      	b.n	8017956 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801798a:	68b8      	ldr	r0, [r7, #8]
 801798c:	f7ff f875 	bl	8016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017990:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8017992:	e7e0      	b.n	8017956 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8017994:	f107 0314 	add.w	r3, r7, #20
 8017998:	6879      	ldr	r1, [r7, #4]
 801799a:	4618      	mov	r0, r3
 801799c:	f7ff fce2 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 80179a0:	697b      	ldr	r3, [r7, #20]
    }
 80179a2:	4618      	mov	r0, r3
 80179a4:	371c      	adds	r7, #28
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd90      	pop	{r4, r7, pc}

080179aa <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() noexcept
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b082      	sub	sp, #8
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f000 facc 	bl	8017f50 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 80179b8:	4603      	mov	r3, r0
 80179ba:	4618      	mov	r0, r3
 80179bc:	3708      	adds	r7, #8
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 80179c2:	b580      	push	{r7, lr}
 80179c4:	b082      	sub	sp, #8
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f000 f98e 	bl	8017cec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 80179d0:	4603      	mov	r3, r0
 80179d2:	2101      	movs	r1, #1
 80179d4:	4618      	mov	r0, r3
 80179d6:	f000 fac6 	bl	8017f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>
 80179da:	4603      	mov	r3, r0
 80179dc:	4618      	mov	r0, r3
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}

080179e4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80179e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e8:	b086      	sub	sp, #24
 80179ea:	af02      	add	r7, sp, #8
 80179ec:	60f8      	str	r0, [r7, #12]
 80179ee:	60b9      	str	r1, [r7, #8]
 80179f0:	607a      	str	r2, [r7, #4]
 80179f2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80179f4:	68bb      	ldr	r3, [r7, #8]
 80179f6:	4619      	mov	r1, r3
 80179f8:	201c      	movs	r0, #28
 80179fa:	f7e9 fd2d 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80179fe:	68f8      	ldr	r0, [r7, #12]
 8017a00:	f000 f974 	bl	8017cec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 8017a04:	4604      	mov	r4, r0
 8017a06:	68b8      	ldr	r0, [r7, #8]
 8017a08:	f7ff fb08 	bl	801701c <_ZNSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>
 8017a0c:	4605      	mov	r5, r0
 8017a0e:	6878      	ldr	r0, [r7, #4]
 8017a10:	f7fc fa61 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017a14:	4606      	mov	r6, r0
 8017a16:	6838      	ldr	r0, [r7, #0]
 8017a18:	f7fc fa68 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017a1c:	4680      	mov	r8, r0
 8017a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a20:	f7fc fa6f 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017a24:	4603      	mov	r3, r0
 8017a26:	9300      	str	r3, [sp, #0]
 8017a28:	4643      	mov	r3, r8
 8017a2a:	4632      	mov	r2, r6
 8017a2c:	4629      	mov	r1, r5
 8017a2e:	4620      	mov	r0, r4
 8017a30:	f000 fae6 	bl	8018000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8017a34:	bf00      	nop
 8017a36:	3710      	adds	r7, #16
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a3e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh3PinEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b084      	sub	sp, #16
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	681a      	ldr	r2, [r3, #0]
 8017a4a:	f107 030c 	add.w	r3, r7, #12
 8017a4e:	4611      	mov	r1, r2
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7ff fc87 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	4618      	mov	r0, r3
 8017a5a:	3710      	adds	r7, #16
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}

08017a60 <_ZNKSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017a60:	b480      	push	{r7}
 8017a62:	b083      	sub	sp, #12
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	695b      	ldr	r3, [r3, #20]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	370c      	adds	r7, #12
 8017a70:	46bd      	mov	sp, r7
 8017a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a76:	4770      	bx	lr

08017a78 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8017a78:	b480      	push	{r7}
 8017a7a:	b083      	sub	sp, #12
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	3310      	adds	r3, #16
 8017a84:	4618      	mov	r0, r3
 8017a86:	370c      	adds	r7, #12
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8e:	4770      	bx	lr

08017a90 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8017a90:	b590      	push	{r4, r7, lr}
 8017a92:	b08b      	sub	sp, #44	; 0x2c
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	60b9      	str	r1, [r7, #8]
 8017a9a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8017a9c:	68b8      	ldr	r0, [r7, #8]
 8017a9e:	f7fe fd81 	bl	80165a4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8017aa6:	68b8      	ldr	r0, [r7, #8]
 8017aa8:	f7ff ff42 	bl	8017930 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 8017aac:	4603      	mov	r3, r0
 8017aae:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8017ab6:	69bb      	ldr	r3, [r7, #24]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d020      	beq.n	8017afe <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8017abc:	69bb      	ldr	r3, [r7, #24]
 8017abe:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8017ac0:	68bc      	ldr	r4, [r7, #8]
 8017ac2:	69bb      	ldr	r3, [r7, #24]
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7ff fbfd 	bl	80172c4 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8017aca:	4603      	mov	r3, r0
 8017acc:	461a      	mov	r2, r3
 8017ace:	6879      	ldr	r1, [r7, #4]
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f7fb fd11 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8017adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d005      	beq.n	8017af0 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 8017ae4:	69bb      	ldr	r3, [r7, #24]
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f7fe ffd3 	bl	8016a92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017aec:	4603      	mov	r3, r0
 8017aee:	e004      	b.n	8017afa <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 8017af0:	69bb      	ldr	r3, [r7, #24]
 8017af2:	4618      	mov	r0, r3
 8017af4:	f7fe ffc1 	bl	8016a7a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017af8:	4603      	mov	r3, r0
 8017afa:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017afc:	e7db      	b.n	8017ab6 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8017afe:	697a      	ldr	r2, [r7, #20]
 8017b00:	f107 0310 	add.w	r3, r7, #16
 8017b04:	4611      	mov	r1, r2
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7ff fc2c 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d01d      	beq.n	8017b50 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8017b14:	68b8      	ldr	r0, [r7, #8]
 8017b16:	f000 fa8f 	bl	8018038 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	61fb      	str	r3, [r7, #28]
 8017b1e:	f107 021c 	add.w	r2, r7, #28
 8017b22:	f107 0310 	add.w	r3, r7, #16
 8017b26:	4611      	mov	r1, r2
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7fe fe81 	bl	8016830 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh3PinEES6_>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d008      	beq.n	8017b46 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8017b34:	f107 0214 	add.w	r2, r7, #20
 8017b38:	f107 0318 	add.w	r3, r7, #24
 8017b3c:	4619      	mov	r1, r3
 8017b3e:	68f8      	ldr	r0, [r7, #12]
 8017b40:	f000 fa8b 	bl	801805a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 8017b44:	e025      	b.n	8017b92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8017b46:	f107 0310 	add.w	r3, r7, #16
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f000 f831 	bl	8017bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8017b50:	68bc      	ldr	r4, [r7, #8]
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	4618      	mov	r0, r3
 8017b56:	f7ff fcd5 	bl	8017504 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	4619      	mov	r1, r3
 8017b60:	4620      	mov	r0, r4
 8017b62:	f7fb fcc9 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8017b66:	4603      	mov	r3, r0
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d008      	beq.n	8017b7e <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8017b6c:	f107 0214 	add.w	r2, r7, #20
 8017b70:	f107 0318 	add.w	r3, r7, #24
 8017b74:	4619      	mov	r1, r3
 8017b76:	68f8      	ldr	r0, [r7, #12]
 8017b78:	f000 fa6f 	bl	801805a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>
 8017b7c:	e009      	b.n	8017b92 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8017b7e:	2300      	movs	r3, #0
 8017b80:	623b      	str	r3, [r7, #32]
 8017b82:	f107 0220 	add.w	r2, r7, #32
 8017b86:	f107 0310 	add.w	r3, r7, #16
 8017b8a:	4619      	mov	r1, r3
 8017b8c:	68f8      	ldr	r0, [r7, #12]
 8017b8e:	f7fd f97f 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8017b92:	68f8      	ldr	r0, [r7, #12]
 8017b94:	372c      	adds	r7, #44	; 0x2c
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd90      	pop	{r4, r7, pc}

08017b9a <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8017b9a:	b480      	push	{r7}
 8017b9c:	b083      	sub	sp, #12
 8017b9e:	af00      	add	r7, sp, #0
 8017ba0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	330c      	adds	r3, #12
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	370c      	adds	r7, #12
 8017baa:	46bd      	mov	sp, r7
 8017bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb0:	4770      	bx	lr

08017bb2 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b082      	sub	sp, #8
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f00e fad9 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	601a      	str	r2, [r3, #0]
	return *this;
 8017bca:	687b      	ldr	r3, [r7, #4]
      }
 8017bcc:	4618      	mov	r0, r3
 8017bce:	3708      	adds	r7, #8
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	4618      	mov	r0, r3
 8017be2:	f00e fac6 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8017be6:	4602      	mov	r2, r0
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	601a      	str	r2, [r3, #0]
	return *this;
 8017bec:	687b      	ldr	r3, [r7, #4]
      }
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3708      	adds	r7, #8
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <_ZNKSt13_Rb_tree_nodeISt4pairIKh3PinEE9_M_valptrEv>:
      _M_valptr() const
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	3310      	adds	r3, #16
 8017c02:	4618      	mov	r0, r3
 8017c04:	f000 fa42 	bl	801808c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>
 8017c08:	4603      	mov	r3, r0
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3708      	adds	r7, #8
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}

08017c12 <_ZNKSt10_Select1stISt4pairIKh3PinEEclERKS3_>:
      operator()(const _Pair& __x) const
 8017c12:	b480      	push	{r7}
 8017c14:	b083      	sub	sp, #12
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
 8017c1a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8017c1c:	683b      	ldr	r3, [r7, #0]
 8017c1e:	4618      	mov	r0, r3
 8017c20:	370c      	adds	r7, #12
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr

08017c2a <_ZNSt11_Tuple_implILj0EJOtEEC1ItEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8017c2a:	b590      	push	{r4, r7, lr}
 8017c2c:	b083      	sub	sp, #12
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
 8017c32:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8017c34:	687c      	ldr	r4, [r7, #4]
 8017c36:	6838      	ldr	r0, [r7, #0]
 8017c38:	f7ff fba3 	bl	8017382 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8017c3c:	4603      	mov	r3, r0
 8017c3e:	4619      	mov	r1, r3
 8017c40:	4620      	mov	r0, r4
 8017c42:	f000 fa2f 	bl	80180a4 <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	370c      	adds	r7, #12
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd90      	pop	{r4, r7, pc}

08017c50 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOtEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c54:	b086      	sub	sp, #24
 8017c56:	af02      	add	r7, sp, #8
 8017c58:	60f8      	str	r0, [r7, #12]
 8017c5a:	60b9      	str	r1, [r7, #8]
 8017c5c:	607a      	str	r2, [r7, #4]
 8017c5e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017c60:	68bb      	ldr	r3, [r7, #8]
 8017c62:	4619      	mov	r1, r3
 8017c64:	2028      	movs	r0, #40	; 0x28
 8017c66:	f7e9 fbf7 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017c6a:	68f8      	ldr	r0, [r7, #12]
 8017c6c:	f000 f88b 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8017c70:	4604      	mov	r4, r0
 8017c72:	68b8      	ldr	r0, [r7, #8]
 8017c74:	f7fe ff5d 	bl	8016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8017c78:	4605      	mov	r5, r0
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f7fc f92b 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017c80:	4606      	mov	r6, r0
 8017c82:	6838      	ldr	r0, [r7, #0]
 8017c84:	f7ff fb9b 	bl	80173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8017c88:	4680      	mov	r8, r0
 8017c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017c8c:	f7fc f939 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017c90:	4603      	mov	r3, r0
 8017c92:	9300      	str	r3, [sp, #0]
 8017c94:	4643      	mov	r3, r8
 8017c96:	4632      	mov	r2, r6
 8017c98:	4629      	mov	r1, r5
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f000 fa4c 	bl	8018138 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOtEESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8017ca0:	bf00      	nop
 8017ca2:	3710      	adds	r7, #16
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017caa <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8017caa:	b480      	push	{r7}
 8017cac:	b083      	sub	sp, #12
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	370c      	adds	r7, #12
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbe:	4770      	bx	lr

08017cc0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8017cc0:	b480      	push	{r7}
 8017cc2:	b083      	sub	sp, #12
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	4618      	mov	r0, r3
 8017ccc:	370c      	adds	r7, #12
 8017cce:	46bd      	mov	sp, r7
 8017cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd4:	4770      	bx	lr

08017cd6 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8017cd6:	b480      	push	{r7}
 8017cd8:	b083      	sub	sp, #12
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	370c      	adds	r7, #12
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cea:	4770      	bx	lr

08017cec <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017cec:	b480      	push	{r7}
 8017cee:	b083      	sub	sp, #12
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	370c      	adds	r7, #12
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr

08017d02 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017d02:	b580      	push	{r7, lr}
 8017d04:	b082      	sub	sp, #8
 8017d06:	af00      	add	r7, sp, #0
 8017d08:	6078      	str	r0, [r7, #4]
 8017d0a:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017d0c:	6838      	ldr	r0, [r7, #0]
 8017d0e:	f000 fa2f 	bl	8018170 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>
	}
 8017d12:	bf00      	nop
 8017d14:	3708      	adds	r7, #8
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}

08017d1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017d1a:	b580      	push	{r7, lr}
 8017d1c:	b088      	sub	sp, #32
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	60f8      	str	r0, [r7, #12]
 8017d22:	60b9      	str	r1, [r7, #8]
 8017d24:	607a      	str	r2, [r7, #4]
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	61fb      	str	r3, [r7, #28]
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	61bb      	str	r3, [r7, #24]
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8017d32:	f7e9 fb89 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8017d36:	4603      	mov	r3, r0
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d003      	beq.n	8017d44 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 8017d3c:	69b8      	ldr	r0, [r7, #24]
 8017d3e:	f00e f9af 	bl	80260a0 <_ZdlPv>
	    return;
 8017d42:	e005      	b.n	8017d50 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8017d44:	697a      	ldr	r2, [r7, #20]
 8017d46:	69b9      	ldr	r1, [r7, #24]
 8017d48:	69f8      	ldr	r0, [r7, #28]
 8017d4a:	f000 fb4c 	bl	80183e6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 8017d4e:	bf00      	nop
 8017d50:	bf00      	nop
 8017d52:	3720      	adds	r7, #32
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8017d58:	b480      	push	{r7}
 8017d5a:	b083      	sub	sp, #12
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	689b      	ldr	r3, [r3, #8]
 8017d64:	4618      	mov	r0, r3
 8017d66:	370c      	adds	r7, #12
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6e:	4770      	bx	lr

08017d70 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	370c      	adds	r7, #12
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d84:	4770      	bx	lr

08017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017d86:	b480      	push	{r7}
 8017d88:	b083      	sub	sp, #12
 8017d8a:	af00      	add	r7, sp, #0
 8017d8c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	4618      	mov	r0, r3
 8017d92:	370c      	adds	r7, #12
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr

08017d9c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	60fb      	str	r3, [r7, #12]
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8017dae:	f7e9 fb4b 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8017db2:	4603      	mov	r3, r0
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d009      	beq.n	8017dcc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017db8:	68ba      	ldr	r2, [r7, #8]
 8017dba:	4613      	mov	r3, r2
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	4413      	add	r3, r2
 8017dc0:	00db      	lsls	r3, r3, #3
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f00e f970 	bl	80260a8 <_Znwj>
 8017dc8:	4603      	mov	r3, r0
 8017dca:	e006      	b.n	8017dda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8017dcc:	2200      	movs	r2, #0
 8017dce:	68b9      	ldr	r1, [r7, #8]
 8017dd0:	68f8      	ldr	r0, [r7, #12]
 8017dd2:	f000 fb1a 	bl	801840a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	bf00      	nop
      { return __a.allocate(__n); }
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3710      	adds	r7, #16
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8017de2:	b580      	push	{r7, lr}
 8017de4:	b082      	sub	sp, #8
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	6078      	str	r0, [r7, #4]
 8017dea:	6039      	str	r1, [r7, #0]
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	683a      	ldr	r2, [r7, #0]
 8017df0:	4611      	mov	r1, r2
 8017df2:	4618      	mov	r0, r3
 8017df4:	f000 f9c6 	bl	8018184 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}

08017e02 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8017e02:	b5b0      	push	{r4, r5, r7, lr}
 8017e04:	b088      	sub	sp, #32
 8017e06:	af00      	add	r7, sp, #0
 8017e08:	60f8      	str	r0, [r7, #12]
 8017e0a:	60b9      	str	r1, [r7, #8]
 8017e0c:	607a      	str	r2, [r7, #4]
 8017e0e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8017e10:	68b8      	ldr	r0, [r7, #8]
 8017e12:	f7fc f860 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f7fe fea8 	bl	8016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017e1c:	4602      	mov	r2, r0
 8017e1e:	f107 0318 	add.w	r3, r7, #24
 8017e22:	4611      	mov	r1, r2
 8017e24:	4618      	mov	r0, r3
 8017e26:	f7ff ffdc 	bl	8017de2 <_ZNSt5tupleIJRKtEEC1EOS2_>
 8017e2a:	f107 0418 	add.w	r4, r7, #24
 8017e2e:	6838      	ldr	r0, [r7, #0]
 8017e30:	f7fc f867 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	4619      	mov	r1, r3
 8017e38:	2018      	movs	r0, #24
 8017e3a:	f7e9 fb0d 	bl	8001458 <_ZnwjPv>
 8017e3e:	4605      	mov	r5, r0
 8017e40:	7f3b      	ldrb	r3, [r7, #28]
 8017e42:	4622      	mov	r2, r4
 8017e44:	7d39      	ldrb	r1, [r7, #20]
 8017e46:	4628      	mov	r0, r5
 8017e48:	f000 fa03 	bl	8018252 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8017e4c:	462b      	mov	r3, r5
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3720      	adds	r7, #32
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bdb0      	pop	{r4, r5, r7, pc}

08017e56 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8017e56:	b5b0      	push	{r4, r5, r7, lr}
 8017e58:	b084      	sub	sp, #16
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	60f8      	str	r0, [r7, #12]
 8017e5e:	60b9      	str	r1, [r7, #8]
 8017e60:	607a      	str	r2, [r7, #4]
 8017e62:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f7fc f836 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	6838      	ldr	r0, [r7, #0]
 8017e6e:	f7fe fe7d 	bl	8016b6c <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017e72:	4605      	mov	r5, r0
 8017e74:	6a38      	ldr	r0, [r7, #32]
 8017e76:	f7fc f844 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	462a      	mov	r2, r5
 8017e7e:	4621      	mov	r1, r4
 8017e80:	68b8      	ldr	r0, [r7, #8]
 8017e82:	f7ff ffbe 	bl	8017e02 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8017e86:	bf00      	nop
 8017e88:	3710      	adds	r7, #16
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bdb0      	pop	{r4, r5, r7, pc}

08017e8e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017e8e:	b580      	push	{r7, lr}
 8017e90:	b084      	sub	sp, #16
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	68da      	ldr	r2, [r3, #12]
 8017e9a:	f107 030c 	add.w	r3, r7, #12
 8017e9e:	4611      	mov	r1, r2
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7ff f815 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3710      	adds	r7, #16
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}

08017eb0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b084      	sub	sp, #16
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017ebc:	68b8      	ldr	r0, [r7, #8]
 8017ebe:	f000 f9dc 	bl	801827a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017ec2:	4603      	mov	r3, r0
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	601a      	str	r2, [r3, #0]
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f7fd fbac 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	681a      	ldr	r2, [r3, #0]
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	605a      	str	r2, [r3, #4]
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	4618      	mov	r0, r3
 8017edc:	3710      	adds	r7, #16
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	bd80      	pop	{r7, pc}

08017ee2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8017ee2:	b580      	push	{r7, lr}
 8017ee4:	b082      	sub	sp, #8
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f000 f9d0 	bl	8018290 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3708      	adds	r7, #8
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017efa:	b580      	push	{r7, lr}
 8017efc:	b082      	sub	sp, #8
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
 8017f02:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017f04:	6838      	ldr	r0, [r7, #0]
 8017f06:	f000 f9ce 	bl	80182a6 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 8017f0a:	bf00      	nop
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b088      	sub	sp, #32
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	60f8      	str	r0, [r7, #12]
 8017f1a:	60b9      	str	r1, [r7, #8]
 8017f1c:	607a      	str	r2, [r7, #4]
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	61fb      	str	r3, [r7, #28]
 8017f22:	68bb      	ldr	r3, [r7, #8]
 8017f24:	61bb      	str	r3, [r7, #24]
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8017f2a:	f7e9 fa8d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d003      	beq.n	8017f3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8017f34:	69b8      	ldr	r0, [r7, #24]
 8017f36:	f00e f8b3 	bl	80260a0 <_ZdlPv>
	    return;
 8017f3a:	e005      	b.n	8017f48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8017f3c:	697a      	ldr	r2, [r7, #20]
 8017f3e:	69b9      	ldr	r1, [r7, #24]
 8017f40:	69f8      	ldr	r0, [r7, #28]
 8017f42:	f000 faa9 	bl	8018498 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8017f46:	bf00      	nop
 8017f48:	bf00      	nop
 8017f4a:	3720      	adds	r7, #32
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() noexcept
 8017f50:	b480      	push	{r7}
 8017f52:	b083      	sub	sp, #12
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	370c      	adds	r7, #12
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f64:	4770      	bx	lr

08017f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 8017f66:	b580      	push	{r7, lr}
 8017f68:	b084      	sub	sp, #16
 8017f6a:	af00      	add	r7, sp, #0
 8017f6c:	6078      	str	r0, [r7, #4]
 8017f6e:	6039      	str	r1, [r7, #0]
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	60fb      	str	r3, [r7, #12]
 8017f74:	683b      	ldr	r3, [r7, #0]
 8017f76:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8017f78:	f7e9 fa66 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	2b00      	cmp	r3, #0
 8017f80:	d009      	beq.n	8017f96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8017f82:	68ba      	ldr	r2, [r7, #8]
 8017f84:	4613      	mov	r3, r2
 8017f86:	00db      	lsls	r3, r3, #3
 8017f88:	1a9b      	subs	r3, r3, r2
 8017f8a:	009b      	lsls	r3, r3, #2
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f00e f88b 	bl	80260a8 <_Znwj>
 8017f92:	4603      	mov	r3, r0
 8017f94:	e006      	b.n	8017fa4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8017f96:	2200      	movs	r2, #0
 8017f98:	68b9      	ldr	r1, [r7, #8]
 8017f9a:	68f8      	ldr	r0, [r7, #12]
 8017f9c:	f000 fa8e 	bl	80184bc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	bf00      	nop
      { return __a.allocate(__n); }
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	3710      	adds	r7, #16
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	bd80      	pop	{r7, pc}

08017fac <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8017fac:	b5b0      	push	{r4, r5, r7, lr}
 8017fae:	b088      	sub	sp, #32
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	60f8      	str	r0, [r7, #12]
 8017fb4:	60b9      	str	r1, [r7, #8]
 8017fb6:	607a      	str	r2, [r7, #4]
 8017fb8:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8017fba:	68b8      	ldr	r0, [r7, #8]
 8017fbc:	f7fb ff8b 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f7fb ff93 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8017fc6:	4602      	mov	r2, r0
 8017fc8:	f107 0318 	add.w	r3, r7, #24
 8017fcc:	4611      	mov	r1, r2
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fd fad4 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 8017fd4:	f107 0418 	add.w	r4, r7, #24
 8017fd8:	6838      	ldr	r0, [r7, #0]
 8017fda:	f7fb ff92 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	4619      	mov	r1, r3
 8017fe2:	200c      	movs	r0, #12
 8017fe4:	f7e9 fa38 	bl	8001458 <_ZnwjPv>
 8017fe8:	4605      	mov	r5, r0
 8017fea:	7f3b      	ldrb	r3, [r7, #28]
 8017fec:	4622      	mov	r2, r4
 8017fee:	7d39      	ldrb	r1, [r7, #20]
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	f000 f97f 	bl	80182f4 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8017ff6:	462b      	mov	r3, r5
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3720      	adds	r7, #32
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bdb0      	pop	{r4, r5, r7, pc}

08018000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh3PinEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018000:	b5b0      	push	{r4, r5, r7, lr}
 8018002:	b084      	sub	sp, #16
 8018004:	af00      	add	r7, sp, #0
 8018006:	60f8      	str	r0, [r7, #12]
 8018008:	60b9      	str	r1, [r7, #8]
 801800a:	607a      	str	r2, [r7, #4]
 801800c:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801800e:	6878      	ldr	r0, [r7, #4]
 8018010:	f7fb ff61 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8018014:	4604      	mov	r4, r0
 8018016:	6838      	ldr	r0, [r7, #0]
 8018018:	f7fb ff68 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801801c:	4605      	mov	r5, r0
 801801e:	6a38      	ldr	r0, [r7, #32]
 8018020:	f7fb ff6f 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8018024:	4603      	mov	r3, r0
 8018026:	462a      	mov	r2, r5
 8018028:	4621      	mov	r1, r4
 801802a:	68b8      	ldr	r0, [r7, #8]
 801802c:	f7ff ffbe 	bl	8017fac <_ZSt12construct_atISt4pairIKh3PinEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8018030:	bf00      	nop
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bdb0      	pop	{r4, r5, r7, pc}

08018038 <_ZNSt8_Rb_treeIhSt4pairIKh3PinESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8018038:	b580      	push	{r7, lr}
 801803a:	b084      	sub	sp, #16
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	68da      	ldr	r2, [r3, #12]
 8018044:	f107 030c 	add.w	r3, r7, #12
 8018048:	4611      	mov	r1, r2
 801804a:	4618      	mov	r0, r3
 801804c:	f7ff f98a 	bl	8017364 <_ZNSt17_Rb_tree_iteratorISt4pairIKh3PinEEC1EPSt18_Rb_tree_node_base>
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	4618      	mov	r0, r3
 8018054:	3710      	adds	r7, #16
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}

0801805a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh3PinEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801805a:	b580      	push	{r7, lr}
 801805c:	b084      	sub	sp, #16
 801805e:	af00      	add	r7, sp, #0
 8018060:	60f8      	str	r0, [r7, #12]
 8018062:	60b9      	str	r1, [r7, #8]
 8018064:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8018066:	68b8      	ldr	r0, [r7, #8]
 8018068:	f000 f958 	bl	801831c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801806c:	4603      	mov	r3, r0
 801806e:	681a      	ldr	r2, [r3, #0]
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	601a      	str	r2, [r3, #0]
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f7fd fad7 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801807a:	4603      	mov	r3, r0
 801807c:	681a      	ldr	r2, [r3, #0]
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	605a      	str	r2, [r3, #4]
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	4618      	mov	r0, r3
 8018086:	3710      	adds	r7, #16
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801808c:	b580      	push	{r7, lr}
 801808e:	b082      	sub	sp, #8
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8018094:	6878      	ldr	r0, [r7, #4]
 8018096:	f000 f94c 	bl	8018332 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>
 801809a:	4603      	mov	r3, r0
 801809c:	4618      	mov	r0, r3
 801809e:	3708      	adds	r7, #8
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}

080180a4 <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b082      	sub	sp, #8
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
 80180ac:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80180ae:	6838      	ldr	r0, [r7, #0]
 80180b0:	f7ff f967 	bl	8017382 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80180b4:	4602      	mov	r2, r0
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	601a      	str	r2, [r3, #0]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	4618      	mov	r0, r3
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}

080180c4 <_ZNSt5tupleIJOtEEC1EOS1_>:
      constexpr tuple(tuple&&) = default;
 80180c4:	b580      	push	{r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	6078      	str	r0, [r7, #4]
 80180cc:	6039      	str	r1, [r7, #0]
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	683a      	ldr	r2, [r7, #0]
 80180d2:	4611      	mov	r1, r2
 80180d4:	4618      	mov	r0, r3
 80180d6:	f000 f937 	bl	8018348 <_ZNSt11_Tuple_implILj0EJOtEEC1EOS1_>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	4618      	mov	r0, r3
 80180de:	3708      	adds	r7, #8
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOtEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80180e4:	b5b0      	push	{r4, r5, r7, lr}
 80180e6:	b088      	sub	sp, #32
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	607a      	str	r2, [r7, #4]
 80180f0:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80180f2:	68b8      	ldr	r0, [r7, #8]
 80180f4:	f7fb feef 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	f7ff f960 	bl	80173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80180fe:	4602      	mov	r2, r0
 8018100:	f107 0318 	add.w	r3, r7, #24
 8018104:	4611      	mov	r1, r2
 8018106:	4618      	mov	r0, r3
 8018108:	f7ff ffdc 	bl	80180c4 <_ZNSt5tupleIJOtEEC1EOS1_>
 801810c:	f107 0418 	add.w	r4, r7, #24
 8018110:	6838      	ldr	r0, [r7, #0]
 8018112:	f7fb fef6 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	4619      	mov	r1, r3
 801811a:	2018      	movs	r0, #24
 801811c:	f7e9 f99c 	bl	8001458 <_ZnwjPv>
 8018120:	4605      	mov	r5, r0
 8018122:	7f3b      	ldrb	r3, [r7, #28]
 8018124:	4622      	mov	r2, r4
 8018126:	7d39      	ldrb	r1, [r7, #20]
 8018128:	4628      	mov	r0, r5
 801812a:	f000 f948 	bl	80183be <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 801812e:	462b      	mov	r3, r5
 8018130:	4618      	mov	r0, r3
 8018132:	3720      	adds	r7, #32
 8018134:	46bd      	mov	sp, r7
 8018136:	bdb0      	pop	{r4, r5, r7, pc}

08018138 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOtEESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018138:	b5b0      	push	{r4, r5, r7, lr}
 801813a:	b084      	sub	sp, #16
 801813c:	af00      	add	r7, sp, #0
 801813e:	60f8      	str	r0, [r7, #12]
 8018140:	60b9      	str	r1, [r7, #8]
 8018142:	607a      	str	r2, [r7, #4]
 8018144:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f7fb fec5 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801814c:	4604      	mov	r4, r0
 801814e:	6838      	ldr	r0, [r7, #0]
 8018150:	f7ff f935 	bl	80173be <_ZSt7forwardISt5tupleIJOtEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8018154:	4605      	mov	r5, r0
 8018156:	6a38      	ldr	r0, [r7, #32]
 8018158:	f7fb fed3 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801815c:	4603      	mov	r3, r0
 801815e:	462a      	mov	r2, r5
 8018160:	4621      	mov	r1, r4
 8018162:	68b8      	ldr	r0, [r7, #8]
 8018164:	f7ff ffbe 	bl	80180e4 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJOtEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8018168:	bf00      	nop
 801816a:	3710      	adds	r7, #16
 801816c:	46bd      	mov	sp, r7
 801816e:	bdb0      	pop	{r4, r5, r7, pc}

08018170 <_ZSt10destroy_atISt4pairIKh3PinEEvPT_>:
    destroy_at(_Tp* __location)
 8018170:	b480      	push	{r7}
 8018172:	b083      	sub	sp, #12
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
    }
 8018178:	bf00      	nop
 801817a:	370c      	adds	r7, #12
 801817c:	46bd      	mov	sp, r7
 801817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018182:	4770      	bx	lr

08018184 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8018184:	b590      	push	{r4, r7, lr}
 8018186:	b083      	sub	sp, #12
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801818e:	687c      	ldr	r4, [r7, #4]
 8018190:	6838      	ldr	r0, [r7, #0]
 8018192:	f000 f95c 	bl	801844e <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8018196:	4603      	mov	r3, r0
 8018198:	4618      	mov	r0, r3
 801819a:	f000 f965 	bl	8018468 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 801819e:	4603      	mov	r3, r0
 80181a0:	4619      	mov	r1, r3
 80181a2:	4620      	mov	r0, r4
 80181a4:	f7ff fa36 	bl	8017614 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	4618      	mov	r0, r3
 80181ac:	370c      	adds	r7, #12
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd90      	pop	{r4, r7, pc}

080181b2 <_ZN17ExternalInterrupt8InstanceC1Ev>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 80181b2:	b580      	push	{r7, lr}
 80181b4:	b082      	sub	sp, #8
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	2100      	movs	r1, #0
 80181be:	4618      	mov	r0, r3
 80181c0:	f7fe f816 	bl	80161f0 <_ZNSt8functionIFvvEEC1EDn>
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	2201      	movs	r2, #1
 80181c8:	741a      	strb	r2, [r3, #16]
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	4618      	mov	r0, r3
 80181ce:	3708      	adds	r7, #8
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <_ZN17ExternalInterrupt8InstanceD1Ev>:
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7e9 f9d6 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	4618      	mov	r0, r3
 80181e8:	3708      	adds	r7, #8
 80181ea:	46bd      	mov	sp, r7
 80181ec:	bd80      	pop	{r7, pc}

080181ee <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80181ee:	b580      	push	{r7, lr}
 80181f0:	b084      	sub	sp, #16
 80181f2:	af00      	add	r7, sp, #0
 80181f4:	60f8      	str	r0, [r7, #12]
 80181f6:	60b9      	str	r1, [r7, #8]
 80181f8:	607a      	str	r2, [r7, #4]
 80181fa:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80181fc:	68b8      	ldr	r0, [r7, #8]
 80181fe:	f000 f93e 	bl	801847e <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8018202:	4603      	mov	r3, r0
 8018204:	4618      	mov	r0, r3
 8018206:	f000 f92f 	bl	8018468 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 801820a:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801820c:	881a      	ldrh	r2, [r3, #0]
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	801a      	strh	r2, [r3, #0]
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	3304      	adds	r3, #4
 8018216:	2200      	movs	r2, #0
 8018218:	601a      	str	r2, [r3, #0]
 801821a:	605a      	str	r2, [r3, #4]
 801821c:	609a      	str	r2, [r3, #8]
 801821e:	60da      	str	r2, [r3, #12]
 8018220:	611a      	str	r2, [r3, #16]
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	3304      	adds	r3, #4
 8018226:	4618      	mov	r0, r3
 8018228:	f7ff ffc3 	bl	80181b2 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	4618      	mov	r0, r3
 8018230:	3710      	adds	r7, #16
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}

08018236 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 8018236:	b580      	push	{r7, lr}
 8018238:	b082      	sub	sp, #8
 801823a:	af00      	add	r7, sp, #0
 801823c:	6078      	str	r0, [r7, #4]
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	3304      	adds	r3, #4
 8018242:	4618      	mov	r0, r3
 8018244:	f7ff ffc6 	bl	80181d4 <_ZN17ExternalInterrupt8InstanceD1Ev>
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	4618      	mov	r0, r3
 801824c:	3708      	adds	r7, #8
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}

08018252 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8018252:	b5b0      	push	{r4, r5, r7, lr}
 8018254:	b086      	sub	sp, #24
 8018256:	af02      	add	r7, sp, #8
 8018258:	60f8      	str	r0, [r7, #12]
 801825a:	7239      	strb	r1, [r7, #8]
 801825c:	607a      	str	r2, [r7, #4]
 801825e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8018260:	463a      	mov	r2, r7
 8018262:	f88d 4000 	strb.w	r4, [sp]
 8018266:	462b      	mov	r3, r5
 8018268:	6879      	ldr	r1, [r7, #4]
 801826a:	68f8      	ldr	r0, [r7, #12]
 801826c:	f7ff ffbf 	bl	80181ee <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	4618      	mov	r0, r3
 8018274:	3710      	adds	r7, #16
 8018276:	46bd      	mov	sp, r7
 8018278:	bdb0      	pop	{r4, r5, r7, pc}

0801827a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801827a:	b480      	push	{r7}
 801827c:	b083      	sub	sp, #12
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	4618      	mov	r0, r3
 8018286:	370c      	adds	r7, #12
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr

08018290 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8018290:	b480      	push	{r7}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	4618      	mov	r0, r3
 801829c:	370c      	adds	r7, #12
 801829e:	46bd      	mov	sp, r7
 80182a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a4:	4770      	bx	lr

080182a6 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 80182a6:	b580      	push	{r7, lr}
 80182a8:	b082      	sub	sp, #8
 80182aa:	af00      	add	r7, sp, #0
 80182ac:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 80182ae:	6878      	ldr	r0, [r7, #4]
 80182b0:	f7ff ffc1 	bl	8018236 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 80182b4:	bf00      	nop
 80182b6:	3708      	adds	r7, #8
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80182bc:	b580      	push	{r7, lr}
 80182be:	b084      	sub	sp, #16
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
 80182c8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80182ca:	68b8      	ldr	r0, [r7, #8]
 80182cc:	f7fd fd18 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80182d0:	4603      	mov	r3, r0
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fc fba0 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80182d8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80182da:	781a      	ldrb	r2, [r3, #0]
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	701a      	strb	r2, [r3, #0]
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	3304      	adds	r3, #4
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7f9 f92b 	bl	8011540 <_ZN3PinC1Ev>
      { }
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	4618      	mov	r0, r3
 80182ee:	3710      	adds	r7, #16
 80182f0:	46bd      	mov	sp, r7
 80182f2:	bd80      	pop	{r7, pc}

080182f4 <_ZNSt4pairIKh3PinEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 80182f4:	b5b0      	push	{r4, r5, r7, lr}
 80182f6:	b086      	sub	sp, #24
 80182f8:	af02      	add	r7, sp, #8
 80182fa:	60f8      	str	r0, [r7, #12]
 80182fc:	7239      	strb	r1, [r7, #8]
 80182fe:	607a      	str	r2, [r7, #4]
 8018300:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8018302:	463a      	mov	r2, r7
 8018304:	f88d 4000 	strb.w	r4, [sp]
 8018308:	462b      	mov	r3, r5
 801830a:	6879      	ldr	r1, [r7, #4]
 801830c:	68f8      	ldr	r0, [r7, #12]
 801830e:	f7ff ffd5 	bl	80182bc <_ZNSt4pairIKh3PinEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	4618      	mov	r0, r3
 8018316:	3710      	adds	r7, #16
 8018318:	46bd      	mov	sp, r7
 801831a:	bdb0      	pop	{r4, r5, r7, pc}

0801831c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh3PinEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801831c:	b480      	push	{r7}
 801831e:	b083      	sub	sp, #12
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	4618      	mov	r0, r3
 8018328:	370c      	adds	r7, #12
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr

08018332 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh3PinEE7_M_addrEv>:
      _M_addr() const noexcept
 8018332:	b480      	push	{r7}
 8018334:	b083      	sub	sp, #12
 8018336:	af00      	add	r7, sp, #0
 8018338:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	4618      	mov	r0, r3
 801833e:	370c      	adds	r7, #12
 8018340:	46bd      	mov	sp, r7
 8018342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018346:	4770      	bx	lr

08018348 <_ZNSt11_Tuple_implILj0EJOtEEC1EOS1_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8018348:	b590      	push	{r4, r7, lr}
 801834a:	b083      	sub	sp, #12
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
 8018350:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8018352:	687c      	ldr	r4, [r7, #4]
 8018354:	6838      	ldr	r0, [r7, #0]
 8018356:	f000 f8d3 	bl	8018500 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>
 801835a:	4603      	mov	r3, r0
 801835c:	4618      	mov	r0, r3
 801835e:	f000 f8dc 	bl	801851a <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018362:	4603      	mov	r3, r0
 8018364:	4619      	mov	r1, r3
 8018366:	4620      	mov	r0, r4
 8018368:	f7ff fe9c 	bl	80180a4 <_ZNSt10_Head_baseILj0EOtLb0EEC1ItEEOT_>
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	4618      	mov	r0, r3
 8018370:	370c      	adds	r7, #12
 8018372:	46bd      	mov	sp, r7
 8018374:	bd90      	pop	{r4, r7, pc}

08018376 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8018376:	b580      	push	{r7, lr}
 8018378:	b084      	sub	sp, #16
 801837a:	af00      	add	r7, sp, #0
 801837c:	60f8      	str	r0, [r7, #12]
 801837e:	60b9      	str	r1, [r7, #8]
 8018380:	607a      	str	r2, [r7, #4]
 8018382:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8018384:	68b8      	ldr	r0, [r7, #8]
 8018386:	f000 f8d3 	bl	8018530 <_ZSt3getILj0EJOtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>
 801838a:	4603      	mov	r3, r0
 801838c:	4618      	mov	r0, r3
 801838e:	f000 f8c4 	bl	801851a <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>
 8018392:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8018394:	881a      	ldrh	r2, [r3, #0]
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	801a      	strh	r2, [r3, #0]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	3304      	adds	r3, #4
 801839e:	2200      	movs	r2, #0
 80183a0:	601a      	str	r2, [r3, #0]
 80183a2:	605a      	str	r2, [r3, #4]
 80183a4:	609a      	str	r2, [r3, #8]
 80183a6:	60da      	str	r2, [r3, #12]
 80183a8:	611a      	str	r2, [r3, #16]
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	3304      	adds	r3, #4
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7ff feff 	bl	80181b2 <_ZN17ExternalInterrupt8InstanceC1Ev>
      { }
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	4618      	mov	r0, r3
 80183b8:	3710      	adds	r7, #16
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}

080183be <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 80183be:	b5b0      	push	{r4, r5, r7, lr}
 80183c0:	b086      	sub	sp, #24
 80183c2:	af02      	add	r7, sp, #8
 80183c4:	60f8      	str	r0, [r7, #12]
 80183c6:	7239      	strb	r1, [r7, #8]
 80183c8:	607a      	str	r2, [r7, #4]
 80183ca:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80183cc:	463a      	mov	r2, r7
 80183ce:	f88d 4000 	strb.w	r4, [sp]
 80183d2:	462b      	mov	r3, r5
 80183d4:	6879      	ldr	r1, [r7, #4]
 80183d6:	68f8      	ldr	r0, [r7, #12]
 80183d8:	f7ff ffcd 	bl	8018376 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IJOtEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	4618      	mov	r0, r3
 80183e0:	3710      	adds	r7, #16
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bdb0      	pop	{r4, r5, r7, pc}

080183e6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 80183e6:	b580      	push	{r7, lr}
 80183e8:	b084      	sub	sp, #16
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	60f8      	str	r0, [r7, #12]
 80183ee:	60b9      	str	r1, [r7, #8]
 80183f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80183f2:	687a      	ldr	r2, [r7, #4]
 80183f4:	4613      	mov	r3, r2
 80183f6:	00db      	lsls	r3, r3, #3
 80183f8:	1a9b      	subs	r3, r3, r2
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	4619      	mov	r1, r3
 80183fe:	68b8      	ldr	r0, [r7, #8]
 8018400:	f00d fe50 	bl	80260a4 <_ZdlPvj>
      }
 8018404:	3710      	adds	r7, #16
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}

0801840a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801840a:	b580      	push	{r7, lr}
 801840c:	b084      	sub	sp, #16
 801840e:	af00      	add	r7, sp, #0
 8018410:	60f8      	str	r0, [r7, #12]
 8018412:	60b9      	str	r1, [r7, #8]
 8018414:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8018416:	68f8      	ldr	r0, [r7, #12]
 8018418:	f000 f898 	bl	801854c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 801841c:	4602      	mov	r2, r0
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	4293      	cmp	r3, r2
 8018422:	bf8c      	ite	hi
 8018424:	2301      	movhi	r3, #1
 8018426:	2300      	movls	r3, #0
 8018428:	b2db      	uxtb	r3, r3
 801842a:	2b00      	cmp	r3, #0
 801842c:	d001      	beq.n	8018432 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801842e:	f00d feff 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018432:	68ba      	ldr	r2, [r7, #8]
 8018434:	4613      	mov	r3, r2
 8018436:	009b      	lsls	r3, r3, #2
 8018438:	4413      	add	r3, r2
 801843a:	00db      	lsls	r3, r3, #3
 801843c:	4618      	mov	r0, r3
 801843e:	f00d fe33 	bl	80260a8 <_Znwj>
 8018442:	4603      	mov	r3, r0
 8018444:	bf00      	nop
      }
 8018446:	4618      	mov	r0, r3
 8018448:	3710      	adds	r7, #16
 801844a:	46bd      	mov	sp, r7
 801844c:	bd80      	pop	{r7, pc}

0801844e <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801844e:	b580      	push	{r7, lr}
 8018450:	b082      	sub	sp, #8
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	4618      	mov	r0, r3
 801845a:	f000 f885 	bl	8018568 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 801845e:	4603      	mov	r3, r0
 8018460:	4618      	mov	r0, r3
 8018462:	3708      	adds	r7, #8
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}

08018468 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018468:	b480      	push	{r7}
 801846a:	b083      	sub	sp, #12
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	4618      	mov	r0, r3
 8018474:	370c      	adds	r7, #12
 8018476:	46bd      	mov	sp, r7
 8018478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847c:	4770      	bx	lr

0801847e <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 801847e:	b580      	push	{r7, lr}
 8018480:	b082      	sub	sp, #8
 8018482:	af00      	add	r7, sp, #0
 8018484:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	4618      	mov	r0, r3
 801848a:	f000 f879 	bl	8018580 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801848e:	4603      	mov	r3, r0
 8018490:	4618      	mov	r0, r3
 8018492:	3708      	adds	r7, #8
 8018494:	46bd      	mov	sp, r7
 8018496:	bd80      	pop	{r7, pc}

08018498 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8018498:	b580      	push	{r7, lr}
 801849a:	b084      	sub	sp, #16
 801849c:	af00      	add	r7, sp, #0
 801849e:	60f8      	str	r0, [r7, #12]
 80184a0:	60b9      	str	r1, [r7, #8]
 80184a2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	4613      	mov	r3, r2
 80184a8:	009b      	lsls	r3, r3, #2
 80184aa:	4413      	add	r3, r2
 80184ac:	00db      	lsls	r3, r3, #3
 80184ae:	4619      	mov	r1, r3
 80184b0:	68b8      	ldr	r0, [r7, #8]
 80184b2:	f00d fdf7 	bl	80260a4 <_ZdlPvj>
      }
 80184b6:	3710      	adds	r7, #16
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80184bc:	b580      	push	{r7, lr}
 80184be:	b084      	sub	sp, #16
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	60f8      	str	r0, [r7, #12]
 80184c4:	60b9      	str	r1, [r7, #8]
 80184c6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80184c8:	68f8      	ldr	r0, [r7, #12]
 80184ca:	f000 f865 	bl	8018598 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>
 80184ce:	4602      	mov	r2, r0
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	4293      	cmp	r3, r2
 80184d4:	bf8c      	ite	hi
 80184d6:	2301      	movhi	r3, #1
 80184d8:	2300      	movls	r3, #0
 80184da:	b2db      	uxtb	r3, r3
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d001      	beq.n	80184e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80184e0:	f00d fea6 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80184e4:	68ba      	ldr	r2, [r7, #8]
 80184e6:	4613      	mov	r3, r2
 80184e8:	00db      	lsls	r3, r3, #3
 80184ea:	1a9b      	subs	r3, r3, r2
 80184ec:	009b      	lsls	r3, r3, #2
 80184ee:	4618      	mov	r0, r3
 80184f0:	f00d fdda 	bl	80260a8 <_Znwj>
 80184f4:	4603      	mov	r3, r0
 80184f6:	bf00      	nop
      }
 80184f8:	4618      	mov	r0, r3
 80184fa:	3710      	adds	r7, #16
 80184fc:	46bd      	mov	sp, r7
 80184fe:	bd80      	pop	{r7, pc}

08018500 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	4618      	mov	r0, r3
 801850c:	f000 f852 	bl	80185b4 <_ZNSt10_Head_baseILj0EOtLb0EE7_M_headERS1_>
 8018510:	4603      	mov	r3, r0
 8018512:	4618      	mov	r0, r3
 8018514:	3708      	adds	r7, #8
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}

0801851a <_ZSt7forwardIOtEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801851a:	b480      	push	{r7}
 801851c:	b083      	sub	sp, #12
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4618      	mov	r0, r3
 8018526:	370c      	adds	r7, #12
 8018528:	46bd      	mov	sp, r7
 801852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801852e:	4770      	bx	lr

08018530 <_ZSt3getILj0EJOtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>:
    get(tuple<_Elements...>& __t) noexcept
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	4618      	mov	r0, r3
 801853c:	f000 f846 	bl	80185cc <_ZSt12__get_helperILj0EOtJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 8018540:	4603      	mov	r3, r0
 8018542:	4618      	mov	r0, r3
 8018544:	3708      	adds	r7, #8
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
	...

0801854c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018554:	4b03      	ldr	r3, [pc, #12]	; (8018564 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 8018556:	4618      	mov	r0, r3
 8018558:	370c      	adds	r7, #12
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr
 8018562:	bf00      	nop
 8018564:	03333333 	.word	0x03333333

08018568 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8018568:	b480      	push	{r7}
 801856a:	b083      	sub	sp, #12
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4618      	mov	r0, r3
 8018576:	370c      	adds	r7, #12
 8018578:	46bd      	mov	sp, r7
 801857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857e:	4770      	bx	lr

08018580 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8018580:	b580      	push	{r7, lr}
 8018582:	b082      	sub	sp, #8
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f7ff ff60 	bl	801844e <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 801858e:	4603      	mov	r3, r0
 8018590:	4618      	mov	r0, r3
 8018592:	3708      	adds	r7, #8
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018598:	b480      	push	{r7}
 801859a:	b083      	sub	sp, #12
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80185a0:	4b03      	ldr	r3, [pc, #12]	; (80185b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh3PinEEE11_M_max_sizeEv+0x18>)
      }
 80185a2:	4618      	mov	r0, r3
 80185a4:	370c      	adds	r7, #12
 80185a6:	46bd      	mov	sp, r7
 80185a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ac:	4770      	bx	lr
 80185ae:	bf00      	nop
 80185b0:	04924924 	.word	0x04924924

080185b4 <_ZNSt10_Head_baseILj0EOtLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80185b4:	b480      	push	{r7}
 80185b6:	b083      	sub	sp, #12
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4618      	mov	r0, r3
 80185c2:	370c      	adds	r7, #12
 80185c4:	46bd      	mov	sp, r7
 80185c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ca:	4770      	bx	lr

080185cc <_ZSt12__get_helperILj0EOtJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80185d4:	6878      	ldr	r0, [r7, #4]
 80185d6:	f7ff ff93 	bl	8018500 <_ZNSt11_Tuple_implILj0EJOtEE7_M_headERS1_>
 80185da:	4603      	mov	r3, r0
 80185dc:	4618      	mov	r0, r3
 80185de:	3708      	adds	r7, #8
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}

080185e4 <_Z41__static_initialization_and_destruction_0ii>:
		return nullopt; //TODO: error handler
	}

	Pin& pin = service_ids[id];
	return HAL_GPIO_ReadPin(GPIO_PORT, pin.gpio_pin);
}
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b0c6      	sub	sp, #280	; 0x118
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80185ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80185f2:	6018      	str	r0, [r3, #0]
 80185f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80185f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80185fc:	6019      	str	r1, [r3, #0]
 80185fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2b01      	cmp	r3, #1
 801860a:	d142      	bne.n	8018692 <_Z41__static_initialization_and_destruction_0ii+0xae>
 801860c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018610:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801861a:	4293      	cmp	r3, r2
 801861c:	d139      	bne.n	8018692 <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801861e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018626:	4a28      	ldr	r2, [pc, #160]	; (80186c8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8018628:	4618      	mov	r0, r3
 801862a:	4611      	mov	r1, r2
 801862c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018630:	461a      	mov	r2, r3
 8018632:	f00d fe51 	bl	80262d8 <memcpy>
 8018636:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801863a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801863e:	f107 0214 	add.w	r2, r7, #20
 8018642:	601a      	str	r2, [r3, #0]
 8018644:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018648:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801864c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018650:	605a      	str	r2, [r3, #4]
 8018652:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8018656:	4618      	mov	r0, r3
 8018658:	f7fa fa5b 	bl	8012b12 <_ZNSaIhEC1Ev>
 801865c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8018660:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8018664:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8018668:	ca06      	ldmia	r2, {r1, r2}
 801866a:	4818      	ldr	r0, [pc, #96]	; (80186cc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801866c:	f7fa fa68 	bl	8012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8018670:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8018674:	4618      	mov	r0, r3
 8018676:	f7fa fa58 	bl	8012b2a <_ZNSaIhED1Ev>
map<uint8_t, Pin> ExternalInterrupt::service_ids = {};
 801867a:	4b15      	ldr	r3, [pc, #84]	; (80186d0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801867c:	461a      	mov	r2, r3
 801867e:	2300      	movs	r3, #0
 8018680:	6013      	str	r3, [r2, #0]
 8018682:	6053      	str	r3, [r2, #4]
 8018684:	6093      	str	r3, [r2, #8]
 8018686:	60d3      	str	r3, [r2, #12]
 8018688:	6113      	str	r3, [r2, #16]
 801868a:	6153      	str	r3, [r2, #20]
 801868c:	4810      	ldr	r0, [pc, #64]	; (80186d0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801868e:	f7fd fd19 	bl	80160c4 <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 8018692:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018696:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d10e      	bne.n	80186be <_Z41__static_initialization_and_destruction_0ii+0xda>
 80186a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80186a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186ae:	4293      	cmp	r3, r2
 80186b0:	d105      	bne.n	80186be <_Z41__static_initialization_and_destruction_0ii+0xda>
 80186b2:	4807      	ldr	r0, [pc, #28]	; (80186d0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80186b4:	f7fd fd13 	bl	80160de <_ZNSt3mapIh3PinSt4lessIhESaISt4pairIKhS0_EEED1Ev>
forward_list<uint8_t> ExternalInterrupt::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80186b8:	4804      	ldr	r0, [pc, #16]	; (80186cc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80186ba:	f7fa fa6f 	bl	8012b9c <_ZNSt12forward_listIhSaIhEED1Ev>
}
 80186be:	bf00      	nop
 80186c0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	08026928 	.word	0x08026928
 80186cc:	2400112c 	.word	0x2400112c
 80186d0:	24001130 	.word	0x24001130

080186d4 <_GLOBAL__sub_I__ZN17ExternalInterrupt10id_managerE>:
 80186d4:	b580      	push	{r7, lr}
 80186d6:	af00      	add	r7, sp, #0
 80186d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80186dc:	2001      	movs	r0, #1
 80186de:	f7ff ff81 	bl	80185e4 <_Z41__static_initialization_and_destruction_0ii>
 80186e2:	bd80      	pop	{r7, pc}

080186e4 <_GLOBAL__sub_D__ZN17ExternalInterrupt10id_managerE>:
 80186e4:	b580      	push	{r7, lr}
 80186e6:	af00      	add	r7, sp, #0
 80186e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80186ec:	2000      	movs	r0, #0
 80186ee:	f7ff ff79 	bl	80185e4 <_Z41__static_initialization_and_destruction_0ii>
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 80186f4:	b480      	push	{r7}
 80186f6:	b083      	sub	sp, #12
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018702:	d205      	bcs.n	8018710 <_ZSt16__deque_buf_sizej+0x1c>
 8018704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	fbb2 f3f3 	udiv	r3, r2, r3
 801870e:	e000      	b.n	8018712 <_ZSt16__deque_buf_sizej+0x1e>
 8018710:	2301      	movs	r3, #1
 8018712:	4618      	mov	r0, r3
 8018714:	370c      	adds	r7, #12
 8018716:	46bd      	mov	sp, r7
 8018718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801871c:	4770      	bx	lr

0801871e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801871e:	b580      	push	{r7, lr}
 8018720:	b082      	sub	sp, #8
 8018722:	af00      	add	r7, sp, #0
 8018724:	6078      	str	r0, [r7, #4]
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f000 fab2 	bl	8018c90 <_ZNSaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEED1Ev>
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	4618      	mov	r0, r3
 8018730:	3708      	adds	r7, #8
 8018732:	46bd      	mov	sp, r7
 8018734:	bd80      	pop	{r7, pc}

08018736 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>:
      _Rb_tree() = default;
 8018736:	b580      	push	{r7, lr}
 8018738:	b082      	sub	sp, #8
 801873a:	af00      	add	r7, sp, #0
 801873c:	6078      	str	r0, [r7, #4]
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	4618      	mov	r0, r3
 8018742:	f000 fa90 	bl	8018c66 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	4618      	mov	r0, r3
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      set() : _M_t() { }
#else
      set() = default;
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	4618      	mov	r0, r3
 801875c:	f7ff ffeb 	bl	8018736 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EEC1Ev>
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	4618      	mov	r0, r3
 8018764:	3708      	adds	r7, #8
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}

0801876a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801876a:	b580      	push	{r7, lr}
 801876c:	b082      	sub	sp, #8
 801876e:	af00      	add	r7, sp, #0
 8018770:	6078      	str	r0, [r7, #4]
 8018772:	6878      	ldr	r0, [r7, #4]
 8018774:	f000 fac1 	bl	8018cfa <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEED1Ev>
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	4618      	mov	r0, r3
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}

08018782 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8018782:	b580      	push	{r7, lr}
 8018784:	b082      	sub	sp, #8
 8018786:	af00      	add	r7, sp, #0
 8018788:	6078      	str	r0, [r7, #4]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	4618      	mov	r0, r3
 801878e:	f000 fa9f 	bl	8018cd0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	4618      	mov	r0, r3
 8018796:	3708      	adds	r7, #8
 8018798:	46bd      	mov	sp, r7
 801879a:	bd80      	pop	{r7, pc}

0801879c <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7ff ffeb 	bl	8018782 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	4618      	mov	r0, r3
 80187b0:	3708      	adds	r7, #8
 80187b2:	46bd      	mov	sp, r7
 80187b4:	bd80      	pop	{r7, pc}

080187b6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80187b6:	b580      	push	{r7, lr}
 80187b8:	b082      	sub	sp, #8
 80187ba:	af00      	add	r7, sp, #0
 80187bc:	6078      	str	r0, [r7, #4]
 80187be:	6878      	ldr	r0, [r7, #4]
 80187c0:	f000 fad0 	bl	8018d64 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEED1Ev>
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	4618      	mov	r0, r3
 80187c8:	3708      	adds	r7, #8
 80187ca:	46bd      	mov	sp, r7
 80187cc:	bd80      	pop	{r7, pc}

080187ce <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 80187ce:	b580      	push	{r7, lr}
 80187d0:	b082      	sub	sp, #8
 80187d2:	af00      	add	r7, sp, #0
 80187d4:	6078      	str	r0, [r7, #4]
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	4618      	mov	r0, r3
 80187da:	f000 faae 	bl	8018d3a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	4618      	mov	r0, r3
 80187e2:	3708      	adds	r7, #8
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b082      	sub	sp, #8
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7ff ffeb 	bl	80187ce <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	4618      	mov	r0, r3
 80187fc:	3708      	adds	r7, #8
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}

08018802 <_ZN4Time10init_timerEP11TIM_TypeDefP17TIM_HandleTypeDefmm>:
map<TIM_HandleTypeDef*, Time::Alarm> Time::high_precision_alarms_by_timer;

uint64_t Time::global_tick = 0;
uint64_t Time::low_precision_tick = 0;

void Time::init_timer(TIM_TypeDef* tim, TIM_HandleTypeDef* htim,uint32_t prescaler, uint32_t period){
 8018802:	b580      	push	{r7, lr}
 8018804:	b08c      	sub	sp, #48	; 0x30
 8018806:	af00      	add	r7, sp, #0
 8018808:	60f8      	str	r0, [r7, #12]
 801880a:	60b9      	str	r1, [r7, #8]
 801880c:	607a      	str	r2, [r7, #4]
 801880e:	603b      	str	r3, [r7, #0]
	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018810:	f107 0320 	add.w	r3, r7, #32
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]
 8018818:	605a      	str	r2, [r3, #4]
 801881a:	609a      	str	r2, [r3, #8]
 801881c:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801881e:	f107 0314 	add.w	r3, r7, #20
 8018822:	2200      	movs	r2, #0
 8018824:	601a      	str	r2, [r3, #0]
 8018826:	605a      	str	r2, [r3, #4]
 8018828:	609a      	str	r2, [r3, #8]

	  htim->Instance = tim;
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	68fa      	ldr	r2, [r7, #12]
 801882e:	601a      	str	r2, [r3, #0]
	  htim->Init.Prescaler = prescaler;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	687a      	ldr	r2, [r7, #4]
 8018834:	605a      	str	r2, [r3, #4]
	  htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	2200      	movs	r2, #0
 801883a:	609a      	str	r2, [r3, #8]
	  htim->Init.Period = period;
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	683a      	ldr	r2, [r7, #0]
 8018840:	60da      	str	r2, [r3, #12]
	  htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	2200      	movs	r2, #0
 8018846:	611a      	str	r2, [r3, #16]
	  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	2200      	movs	r2, #0
 801884c:	619a      	str	r2, [r3, #24]
	  HAL_TIM_Base_Init(htim);
 801884e:	68b8      	ldr	r0, [r7, #8]
 8018850:	f7f6 f823 	bl	800e89a <HAL_TIM_Base_Init>

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018858:	623b      	str	r3, [r7, #32]
	  HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 801885a:	f107 0320 	add.w	r3, r7, #32
 801885e:	4619      	mov	r1, r3
 8018860:	68b8      	ldr	r0, [r7, #8]
 8018862:	f7f6 fd1b 	bl	800f29c <HAL_TIM_ConfigClockSource>

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018866:	2300      	movs	r3, #0
 8018868:	617b      	str	r3, [r7, #20]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801886a:	2300      	movs	r3, #0
 801886c:	61fb      	str	r3, [r7, #28]

	  HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 801886e:	f107 0314 	add.w	r3, r7, #20
 8018872:	4619      	mov	r1, r3
 8018874:	68b8      	ldr	r0, [r7, #8]
 8018876:	f7f7 fb81 	bl	800ff7c <HAL_TIMEx_MasterConfigSynchronization>

}
 801887a:	bf00      	nop
 801887c:	3730      	adds	r7, #48	; 0x30
 801887e:	46bd      	mov	sp, r7
 8018880:	bd80      	pop	{r7, pc}
	...

08018884 <_ZN4Time5startEv>:

void Time::start(){
 8018884:	b580      	push	{r7, lr}
 8018886:	b088      	sub	sp, #32
 8018888:	af00      	add	r7, sp, #0
	Time::init_timer(TIM2, &htim2, 0, HIGH_PRECISION_MAX_ARR);
 801888a:	f04f 33ff 	mov.w	r3, #4294967295
 801888e:	2200      	movs	r2, #0
 8018890:	4925      	ldr	r1, [pc, #148]	; (8018928 <_ZN4Time5startEv+0xa4>)
 8018892:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8018896:	f7ff ffb4 	bl	8018802 <_ZN4Time10init_timerEP11TIM_TypeDefP17TIM_HandleTypeDefmm>
	Time::init_timer(TIM5, &htim5, 0, HIGH_PRECISION_MAX_ARR);
 801889a:	f04f 33ff 	mov.w	r3, #4294967295
 801889e:	2200      	movs	r2, #0
 80188a0:	4922      	ldr	r1, [pc, #136]	; (801892c <_ZN4Time5startEv+0xa8>)
 80188a2:	4823      	ldr	r0, [pc, #140]	; (8018930 <_ZN4Time5startEv+0xac>)
 80188a4:	f7ff ffad 	bl	8018802 <_ZN4Time10init_timerEP11TIM_TypeDefP17TIM_HandleTypeDefmm>
	Time::init_timer(TIM24, &htim24, 0, HIGH_PRECISION_MAX_ARR);
 80188a8:	f04f 33ff 	mov.w	r3, #4294967295
 80188ac:	2200      	movs	r2, #0
 80188ae:	4921      	ldr	r1, [pc, #132]	; (8018934 <_ZN4Time5startEv+0xb0>)
 80188b0:	4821      	ldr	r0, [pc, #132]	; (8018938 <_ZN4Time5startEv+0xb4>)
 80188b2:	f7ff ffa6 	bl	8018802 <_ZN4Time10init_timerEP11TIM_TypeDefP17TIM_HandleTypeDefmm>
	Time::init_timer(TIM6, &htim6, 275, 1000);
 80188b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80188ba:	f240 1213 	movw	r2, #275	; 0x113
 80188be:	491f      	ldr	r1, [pc, #124]	; (801893c <_ZN4Time5startEv+0xb8>)
 80188c0:	481f      	ldr	r0, [pc, #124]	; (8018940 <_ZN4Time5startEv+0xbc>)
 80188c2:	f7ff ff9e 	bl	8018802 <_ZN4Time10init_timerEP11TIM_TypeDefP17TIM_HandleTypeDefmm>

	HAL_TIM_Base_Start_IT(global_timer);
 80188c6:	4b1f      	ldr	r3, [pc, #124]	; (8018944 <_ZN4Time5startEv+0xc0>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	4618      	mov	r0, r3
 80188cc:	f7f6 f83c 	bl	800e948 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(low_precision_timer);
 80188d0:	4b1d      	ldr	r3, [pc, #116]	; (8018948 <_ZN4Time5startEv+0xc4>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	4618      	mov	r0, r3
 80188d6:	f7f6 f837 	bl	800e948 <HAL_TIM_Base_Start_IT>

	Time::available_high_precision_timers.push(&htim24);
 80188da:	4b16      	ldr	r3, [pc, #88]	; (8018934 <_ZN4Time5startEv+0xb0>)
 80188dc:	603b      	str	r3, [r7, #0]
 80188de:	463b      	mov	r3, r7
 80188e0:	4619      	mov	r1, r3
 80188e2:	481a      	ldr	r0, [pc, #104]	; (801894c <_ZN4Time5startEv+0xc8>)
 80188e4:	f000 fa5e 	bl	8018da4 <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEE4pushEOS1_>
	Time::available_high_precision_timers.push(&htim5);
 80188e8:	4b10      	ldr	r3, [pc, #64]	; (801892c <_ZN4Time5startEv+0xa8>)
 80188ea:	607b      	str	r3, [r7, #4]
 80188ec:	1d3b      	adds	r3, r7, #4
 80188ee:	4619      	mov	r1, r3
 80188f0:	4816      	ldr	r0, [pc, #88]	; (801894c <_ZN4Time5startEv+0xc8>)
 80188f2:	f000 fa57 	bl	8018da4 <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEE4pushEOS1_>

	Time::high_precision_timers.insert(&htim24);
 80188f6:	4b0f      	ldr	r3, [pc, #60]	; (8018934 <_ZN4Time5startEv+0xb0>)
 80188f8:	613b      	str	r3, [r7, #16]
 80188fa:	f107 0308 	add.w	r3, r7, #8
 80188fe:	f107 0210 	add.w	r2, r7, #16
 8018902:	4913      	ldr	r1, [pc, #76]	; (8018950 <_ZN4Time5startEv+0xcc>)
 8018904:	4618      	mov	r0, r3
 8018906:	f000 fa5f 	bl	8018dc8 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EE6insertEOS1_>
	Time::high_precision_timers.insert(&htim5);
 801890a:	4b08      	ldr	r3, [pc, #32]	; (801892c <_ZN4Time5startEv+0xa8>)
 801890c:	61fb      	str	r3, [r7, #28]
 801890e:	f107 0314 	add.w	r3, r7, #20
 8018912:	f107 021c 	add.w	r2, r7, #28
 8018916:	490e      	ldr	r1, [pc, #56]	; (8018950 <_ZN4Time5startEv+0xcc>)
 8018918:	4618      	mov	r0, r3
 801891a:	f000 fa55 	bl	8018dc8 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EE6insertEOS1_>
}
 801891e:	bf00      	nop
 8018920:	3720      	adds	r7, #32
 8018922:	46bd      	mov	sp, r7
 8018924:	bd80      	pop	{r7, pc}
 8018926:	bf00      	nop
 8018928:	240008e0 	.word	0x240008e0
 801892c:	240009c4 	.word	0x240009c4
 8018930:	40000c00 	.word	0x40000c00
 8018934:	24000c24 	.word	0x24000c24
 8018938:	4000e400 	.word	0x4000e400
 801893c:	24000a10 	.word	0x24000a10
 8018940:	40001000 	.word	0x40001000
 8018944:	24000010 	.word	0x24000010
 8018948:	24000014 	.word	0x24000014
 801894c:	24001150 	.word	0x24001150
 8018950:	24001178 	.word	0x24001178

08018954 <_ZN4Time5AlarmD1Ev>:

private :
	static forward_list<uint8_t> high_precision_ids;
	static forward_list<uint8_t> low_precision_ids;

	struct Alarm {
 8018954:	b580      	push	{r7, lr}
 8018956:	b082      	sub	sp, #8
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	3308      	adds	r3, #8
 8018960:	4618      	mov	r0, r3
 8018962:	f7e8 fe15 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	4618      	mov	r0, r3
 801896a:	3708      	adds	r7, #8
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}

08018970 <_ZN4Time5AlarmaSERKS0_>:
 8018970:	b580      	push	{r7, lr}
 8018972:	b082      	sub	sp, #8
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
 8018978:	6039      	str	r1, [r7, #0]
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	681a      	ldr	r2, [r3, #0]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	601a      	str	r2, [r3, #0]
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	685a      	ldr	r2, [r3, #4]
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	605a      	str	r2, [r3, #4]
 801898a:	683b      	ldr	r3, [r7, #0]
 801898c:	f103 0208 	add.w	r2, r3, #8
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	3308      	adds	r3, #8
 8018994:	4611      	mov	r1, r2
 8018996:	4618      	mov	r0, r3
 8018998:	f7fd fdbe 	bl	8016518 <_ZNSt8functionIFvvEEaSERKS1_>
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	4618      	mov	r0, r3
 80189a0:	3708      	adds	r7, #8
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}

080189a6 <_ZN4Time5AlarmC1ERKS0_>:
 80189a6:	b580      	push	{r7, lr}
 80189a8:	b082      	sub	sp, #8
 80189aa:	af00      	add	r7, sp, #0
 80189ac:	6078      	str	r0, [r7, #4]
 80189ae:	6039      	str	r1, [r7, #0]
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	681a      	ldr	r2, [r3, #0]
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	601a      	str	r2, [r3, #0]
 80189b8:	683b      	ldr	r3, [r7, #0]
 80189ba:	685a      	ldr	r2, [r3, #4]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	605a      	str	r2, [r3, #4]
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f103 0208 	add.w	r2, r3, #8
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	3308      	adds	r3, #8
 80189ca:	4619      	mov	r1, r3
 80189cc:	4610      	mov	r0, r2
 80189ce:	f7fe f806 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	4618      	mov	r0, r3
 80189d6:	3708      	adds	r7, #8
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE>:
	Time::high_precision_alarms_by_timer.erase(alarm.tim);

	return true;
}

uint8_t Time::register_low_precision_alarm(uint32_t period_in_ms, function<void()> func){
 80189dc:	b590      	push	{r4, r7, lr}
 80189de:	b08b      	sub	sp, #44	; 0x2c
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
	uint16_t id = Time::low_precision_ids.front();
 80189e6:	481e      	ldr	r0, [pc, #120]	; (8018a60 <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE+0x84>)
 80189e8:	f7fa f9bc 	bl	8012d64 <_ZNSt12forward_listIhSaIhEE5frontEv>
 80189ec:	4603      	mov	r3, r0
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	84fb      	strh	r3, [r7, #38]	; 0x26
	Time::low_precision_ids.pop_front();
 80189f2:	481b      	ldr	r0, [pc, #108]	; (8018a60 <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE+0x84>)
 80189f4:	f7fa fa7e 	bl	8012ef4 <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	Time::Alarm alarm = {
			.period = period_in_ms,
			.tim = low_precision_timer,
			.alarm = func
	};
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	60fb      	str	r3, [r7, #12]
 80189fc:	4b19      	ldr	r3, [pc, #100]	; (8018a64 <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE+0x88>)
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	613b      	str	r3, [r7, #16]
 8018a02:	f107 030c 	add.w	r3, r7, #12
 8018a06:	3308      	adds	r3, #8
 8018a08:	6839      	ldr	r1, [r7, #0]
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7fd ffe7 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
	Time::low_precision_alarms_by_id[id] = alarm;
 8018a10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8018a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	4812      	ldr	r0, [pc, #72]	; (8018a68 <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE+0x8c>)
 8018a20:	f000 f9f0 	bl	8018e04 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh>
 8018a24:	4602      	mov	r2, r0
 8018a26:	f107 030c 	add.w	r3, r7, #12
 8018a2a:	4619      	mov	r1, r3
 8018a2c:	4610      	mov	r0, r2
 8018a2e:	f7ff ff9f 	bl	8018970 <_ZN4Time5AlarmaSERKS0_>
	Time::high_precision_ids.push_front(id);
 8018a32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018a3a:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8018a3e:	4619      	mov	r1, r3
 8018a40:	480a      	ldr	r0, [pc, #40]	; (8018a6c <_ZN4Time28register_low_precision_alarmEmSt8functionIFvvEE+0x90>)
 8018a42:	f000 fa9d 	bl	8018f80 <_ZNSt12forward_listIhSaIhEE10push_frontEOh>

	return id;
 8018a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a48:	b2dc      	uxtb	r4, r3
	};
 8018a4a:	f107 030c 	add.w	r3, r7, #12
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7ff ff80 	bl	8018954 <_ZN4Time5AlarmD1Ev>
	return id;
 8018a54:	4623      	mov	r3, r4
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	372c      	adds	r7, #44	; 0x2c
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd90      	pop	{r4, r7, pc}
 8018a5e:	bf00      	nop
 8018a60:	2400114c 	.word	0x2400114c
 8018a64:	24000014 	.word	0x24000014
 8018a68:	240011a8 	.word	0x240011a8
 8018a6c:	24001148 	.word	0x24001148

08018a70 <_ZN4Time21global_timer_callbackEv>:
		callback();
		Time::unregister_low_precision_alarm(id);
	});
}

void Time::global_timer_callback(){
 8018a70:	b480      	push	{r7}
 8018a72:	af00      	add	r7, sp, #0
	Time::global_tick += Time::HIGH_PRECISION_MAX_ARR;
 8018a74:	4b06      	ldr	r3, [pc, #24]	; (8018a90 <_ZN4Time21global_timer_callbackEv+0x20>)
 8018a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a7a:	1e50      	subs	r0, r2, #1
 8018a7c:	f143 0100 	adc.w	r1, r3, #0
 8018a80:	4b03      	ldr	r3, [pc, #12]	; (8018a90 <_ZN4Time21global_timer_callbackEv+0x20>)
 8018a82:	e9c3 0100 	strd	r0, r1, [r3]
}
 8018a86:	bf00      	nop
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a8e:	4770      	bx	lr
 8018a90:	240011d8 	.word	0x240011d8

08018a94 <_ZN4Time29high_precision_timer_callbackEP17TIM_HandleTypeDef>:

void Time::high_precision_timer_callback(TIM_HandleTypeDef* tim){
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
	Time::high_precision_alarms_by_timer[tim].alarm();
 8018a9c:	1d3b      	adds	r3, r7, #4
 8018a9e:	4619      	mov	r1, r3
 8018aa0:	4805      	ldr	r0, [pc, #20]	; (8018ab8 <_ZN4Time29high_precision_timer_callbackEP17TIM_HandleTypeDef+0x24>)
 8018aa2:	f000 fa0f 	bl	8018ec4 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	3308      	adds	r3, #8
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7fd fc40 	bl	8016330 <_ZNKSt8functionIFvvEEclEv>
}
 8018ab0:	bf00      	nop
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	240011c0 	.word	0x240011c0

08018abc <_ZNSt4pairIKhN4Time5AlarmEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b082      	sub	sp, #8
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
 8018ac4:	6039      	str	r1, [r7, #0]
 8018ac6:	683b      	ldr	r3, [r7, #0]
 8018ac8:	781a      	ldrb	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	701a      	strb	r2, [r3, #0]
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	1d1a      	adds	r2, r3, #4
 8018ad2:	683b      	ldr	r3, [r7, #0]
 8018ad4:	3304      	adds	r3, #4
 8018ad6:	4619      	mov	r1, r3
 8018ad8:	4610      	mov	r0, r2
 8018ada:	f7ff ff64 	bl	80189a6 <_ZN4Time5AlarmC1ERKS0_>
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3708      	adds	r7, #8
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <_ZNSt4pairIKhN4Time5AlarmEED1Ev>:
    struct pair
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b082      	sub	sp, #8
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	3304      	adds	r3, #4
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7ff ff2d 	bl	8018954 <_ZN4Time5AlarmD1Ev>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	4618      	mov	r0, r3
 8018afe:	3708      	adds	r7, #8
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <_ZN4Time28low_precision_timer_callbackEv>:

void Time::low_precision_timer_callback(){
 8018b04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018b08:	b090      	sub	sp, #64	; 0x40
 8018b0a:	af00      	add	r7, sp, #0
	for(auto pair : Time::low_precision_alarms_by_id){
 8018b0c:	4b2e      	ldr	r3, [pc, #184]	; (8018bc8 <_ZN4Time28low_precision_timer_callbackEv+0xc4>)
 8018b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018b10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018b12:	f000 fa4c 	bl	8018fae <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE5beginEv>
 8018b16:	4603      	mov	r3, r0
 8018b18:	61fb      	str	r3, [r7, #28]
 8018b1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018b1c:	f000 fa54 	bl	8018fc8 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8018b20:	4603      	mov	r3, r0
 8018b22:	61bb      	str	r3, [r7, #24]
 8018b24:	f107 0218 	add.w	r2, r7, #24
 8018b28:	f107 031c 	add.w	r3, r7, #28
 8018b2c:	4611      	mov	r1, r2
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f000 fa57 	bl	8018fe2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEES7_>
 8018b34:	4603      	mov	r3, r0
 8018b36:	f083 0301 	eor.w	r3, r3, #1
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d034      	beq.n	8018baa <_ZN4Time28low_precision_timer_callbackEv+0xa6>
 8018b40:	f107 031c 	add.w	r3, r7, #28
 8018b44:	4618      	mov	r0, r3
 8018b46:	f000 fa71 	bl	801902c <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEdeEv>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	f107 0320 	add.w	r3, r7, #32
 8018b50:	4611      	mov	r1, r2
 8018b52:	4618      	mov	r0, r3
 8018b54:	f7ff ffb2 	bl	8018abc <_ZNSt4pairIKhN4Time5AlarmEEC1ERKS3_>
		Time::Alarm alarm = pair.second;
 8018b58:	f107 0320 	add.w	r3, r7, #32
 8018b5c:	1d1a      	adds	r2, r3, #4
 8018b5e:	463b      	mov	r3, r7
 8018b60:	4611      	mov	r1, r2
 8018b62:	4618      	mov	r0, r3
 8018b64:	f7ff ff1f 	bl	80189a6 <_ZN4Time5AlarmC1ERKS0_>
		if(Time::low_precision_tick % alarm.period == 0)
 8018b68:	4b18      	ldr	r3, [pc, #96]	; (8018bcc <_ZN4Time28low_precision_timer_callbackEv+0xc8>)
 8018b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	2200      	movs	r2, #0
 8018b72:	4698      	mov	r8, r3
 8018b74:	4691      	mov	r9, r2
 8018b76:	4642      	mov	r2, r8
 8018b78:	464b      	mov	r3, r9
 8018b7a:	f7e7 fbc9 	bl	8000310 <__aeabi_uldivmod>
 8018b7e:	4313      	orrs	r3, r2
 8018b80:	d104      	bne.n	8018b8c <_ZN4Time28low_precision_timer_callbackEv+0x88>
			alarm.alarm();
 8018b82:	463b      	mov	r3, r7
 8018b84:	3308      	adds	r3, #8
 8018b86:	4618      	mov	r0, r3
 8018b88:	f7fd fbd2 	bl	8016330 <_ZNKSt8functionIFvvEEclEv>
		Time::Alarm alarm = pair.second;
 8018b8c:	463b      	mov	r3, r7
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ff fee0 	bl	8018954 <_ZN4Time5AlarmD1Ev>
	for(auto pair : Time::low_precision_alarms_by_id){
 8018b94:	f107 0320 	add.w	r3, r7, #32
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f7ff ffa5 	bl	8018ae8 <_ZNSt4pairIKhN4Time5AlarmEED1Ev>
 8018b9e:	f107 031c 	add.w	r3, r7, #28
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f000 fa31 	bl	801900a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEppEv>
 8018ba8:	e7bc      	b.n	8018b24 <_ZN4Time28low_precision_timer_callbackEv+0x20>
	}
	low_precision_tick += 1;
 8018baa:	4b08      	ldr	r3, [pc, #32]	; (8018bcc <_ZN4Time28low_precision_timer_callbackEv+0xc8>)
 8018bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bb0:	1c54      	adds	r4, r2, #1
 8018bb2:	f143 0500 	adc.w	r5, r3, #0
 8018bb6:	4b05      	ldr	r3, [pc, #20]	; (8018bcc <_ZN4Time28low_precision_timer_callbackEv+0xc8>)
 8018bb8:	e9c3 4500 	strd	r4, r5, [r3]
}
 8018bbc:	bf00      	nop
 8018bbe:	3740      	adds	r7, #64	; 0x40
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018bc6:	bf00      	nop
 8018bc8:	240011a8 	.word	0x240011a8
 8018bcc:	240011e0 	.word	0x240011e0

08018bd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	b082      	sub	sp, #8
 8018bd4:	af00      	add	r7, sp, #0
 8018bd6:	6078      	str	r0, [r7, #4]
	if(tim == Time::global_timer) {
 8018bd8:	687a      	ldr	r2, [r7, #4]
 8018bda:	4b0f      	ldr	r3, [pc, #60]	; (8018c18 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	429a      	cmp	r2, r3
 8018be0:	d102      	bne.n	8018be8 <HAL_TIM_PeriodElapsedCallback+0x18>
			Time::global_timer_callback();
 8018be2:	f7ff ff45 	bl	8018a70 <_ZN4Time21global_timer_callbackEv>
	}

	else if(Time::high_precision_timers.contains(tim)) {
			Time::high_precision_timer_callback(tim);
	}
}
 8018be6:	e013      	b.n	8018c10 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if(tim == Time::low_precision_timer) {
 8018be8:	687a      	ldr	r2, [r7, #4]
 8018bea:	4b0c      	ldr	r3, [pc, #48]	; (8018c1c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d102      	bne.n	8018bf8 <HAL_TIM_PeriodElapsedCallback+0x28>
			Time::low_precision_timer_callback();
 8018bf2:	f7ff ff87 	bl	8018b04 <_ZN4Time28low_precision_timer_callbackEv>
}
 8018bf6:	e00b      	b.n	8018c10 <HAL_TIM_PeriodElapsedCallback+0x40>
	else if(Time::high_precision_timers.contains(tim)) {
 8018bf8:	1d3b      	adds	r3, r7, #4
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	4808      	ldr	r0, [pc, #32]	; (8018c20 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8018bfe:	f000 fa23 	bl	8019048 <_ZNKSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EE8containsERKS1_>
 8018c02:	4603      	mov	r3, r0
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d003      	beq.n	8018c10 <HAL_TIM_PeriodElapsedCallback+0x40>
			Time::high_precision_timer_callback(tim);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ff ff42 	bl	8018a94 <_ZN4Time29high_precision_timer_callbackEP17TIM_HandleTypeDef>
}
 8018c10:	bf00      	nop
 8018c12:	3708      	adds	r7, #8
 8018c14:	46bd      	mov	sp, r7
 8018c16:	bd80      	pop	{r7, pc}
 8018c18:	24000010 	.word	0x24000010
 8018c1c:	24000014 	.word	0x24000014
 8018c20:	24001178 	.word	0x24001178

08018c24 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b082      	sub	sp, #8
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f000 fa43 	bl	80190ba <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EEC1Ev>
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	4618      	mov	r0, r3
 8018c38:	3708      	adds	r7, #8
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}

08018c3e <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>:
      stack(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	stack()
 8018c3e:	b580      	push	{r7, lr}
 8018c40:	b082      	sub	sp, #8
 8018c42:	af00      	add	r7, sp, #0
 8018c44:	6078      	str	r0, [r7, #4]
	: c() { }
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	4618      	mov	r0, r3
 8018c4a:	2328      	movs	r3, #40	; 0x28
 8018c4c:	461a      	mov	r2, r3
 8018c4e:	2100      	movs	r1, #0
 8018c50:	f00d fb6a 	bl	8026328 <memset>
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	4618      	mov	r0, r3
 8018c58:	f7ff ffe4 	bl	8018c24 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EEC1Ev>
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	4618      	mov	r0, r3
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}

08018c66 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8018c66:	b580      	push	{r7, lr}
 8018c68:	b082      	sub	sp, #8
 8018c6a:	af00      	add	r7, sp, #0
 8018c6c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 fa7b 	bl	801916a <_ZNSaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEC1Ev>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	4618      	mov	r0, r3
 8018c78:	f000 fa83 	bl	8019182 <_ZNSt20_Rb_tree_key_compareISt4lessIP17TIM_HandleTypeDefEEC1Ev>
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	3304      	adds	r3, #4
 8018c80:	4618      	mov	r0, r3
 8018c82:	f7e8 fbf9 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3708      	adds	r7, #8
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd80      	pop	{r7, pc}

08018c90 <_ZNSaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8018c90:	b480      	push	{r7}
 8018c92:	b083      	sub	sp, #12
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	370c      	adds	r7, #12
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca4:	4770      	bx	lr

08018ca6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8018ca6:	b580      	push	{r7, lr}
 8018ca8:	b082      	sub	sp, #8
 8018caa:	af00      	add	r7, sp, #0
 8018cac:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f000 fa91 	bl	80191d6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	4619      	mov	r1, r3
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f000 fa6d 	bl	8019198 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7ff fd2c 	bl	801871e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE13_Rb_tree_implIS5_Lb1EED1Ev>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4618      	mov	r0, r3
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f000 fa88 	bl	80191ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEC1Ev>
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7e9 f9a1 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	3304      	adds	r3, #4
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7e8 fbc4 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	3708      	adds	r7, #8
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}

08018cfa <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEED1Ev>:
 8018cfa:	b480      	push	{r7}
 8018cfc:	b083      	sub	sp, #12
 8018cfe:	af00      	add	r7, sp, #0
 8018d00:	6078      	str	r0, [r7, #4]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	4618      	mov	r0, r3
 8018d06:	370c      	adds	r7, #12
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0e:	4770      	bx	lr

08018d10 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b082      	sub	sp, #8
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8018d18:	6878      	ldr	r0, [r7, #4]
 8018d1a:	f000 fa93 	bl	8019244 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	4619      	mov	r1, r3
 8018d22:	6878      	ldr	r0, [r7, #4]
 8018d24:	f000 fa6f 	bl	8019206 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7ff fd1d 	bl	801876a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	4618      	mov	r0, r3
 8018d34:	3708      	adds	r7, #8
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}

08018d3a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8018d3a:	b580      	push	{r7, lr}
 8018d3c:	b082      	sub	sp, #8
 8018d3e:	af00      	add	r7, sp, #0
 8018d40:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8018d42:	6878      	ldr	r0, [r7, #4]
 8018d44:	f000 fa8a 	bl	801925c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEC1Ev>
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f000 fa19 	bl	8019182 <_ZNSt20_Rb_tree_key_compareISt4lessIP17TIM_HandleTypeDefEEC1Ev>
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	3304      	adds	r3, #4
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7e8 fb8f 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEED1Ev>:
 8018d64:	b480      	push	{r7}
 8018d66:	b083      	sub	sp, #12
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	4618      	mov	r0, r3
 8018d70:	370c      	adds	r7, #12
 8018d72:	46bd      	mov	sp, r7
 8018d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d78:	4770      	bx	lr

08018d7a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8018d7a:	b580      	push	{r7, lr}
 8018d7c:	b082      	sub	sp, #8
 8018d7e:	af00      	add	r7, sp, #0
 8018d80:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8018d82:	6878      	ldr	r0, [r7, #4]
 8018d84:	f000 fa95 	bl	80192b2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 fa71 	bl	8019274 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	4618      	mov	r0, r3
 8018d96:	f7ff fd0e 	bl	80187b6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	3708      	adds	r7, #8
 8018da0:	46bd      	mov	sp, r7
 8018da2:	bd80      	pop	{r7, pc}

08018da4 <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEE4pushEOS1_>:
      push(const value_type& __x)
      { c.push_back(__x); }

#if __cplusplus >= 201103L
      void
      push(value_type&& __x)
 8018da4:	b590      	push	{r4, r7, lr}
 8018da6:	b083      	sub	sp, #12
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	6039      	str	r1, [r7, #0]
      { c.push_back(std::move(__x)); }
 8018dae:	687c      	ldr	r4, [r7, #4]
 8018db0:	6838      	ldr	r0, [r7, #0]
 8018db2:	f000 fa8a 	bl	80192ca <_ZSt4moveIRP17TIM_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8018db6:	4603      	mov	r3, r0
 8018db8:	4619      	mov	r1, r3
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f000 fa90 	bl	80192e0 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE9push_backEOS1_>
 8018dc0:	bf00      	nop
 8018dc2:	370c      	adds	r7, #12
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd90      	pop	{r4, r7, pc}

08018dc8 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EE6insertEOS1_>:
	return std::pair<iterator, bool>(__p.first, __p.second);
      }

#if __cplusplus >= 201103L
      std::pair<iterator, bool>
      insert(value_type&& __x)
 8018dc8:	b590      	push	{r4, r7, lr}
 8018dca:	b087      	sub	sp, #28
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	60f8      	str	r0, [r7, #12]
 8018dd0:	60b9      	str	r1, [r7, #8]
 8018dd2:	607a      	str	r2, [r7, #4]
      {
	std::pair<typename _Rep_type::iterator, bool> __p =
	  _M_t._M_insert_unique(std::move(__x));
 8018dd4:	68bc      	ldr	r4, [r7, #8]
 8018dd6:	6878      	ldr	r0, [r7, #4]
 8018dd8:	f000 fa77 	bl	80192ca <_ZSt4moveIRP17TIM_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8018ddc:	4602      	mov	r2, r0
 8018dde:	f107 0310 	add.w	r3, r7, #16
 8018de2:	4621      	mov	r1, r4
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 fa8c 	bl	8019302 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>
	return std::pair<iterator, bool>(__p.first, __p.second);
 8018dea:	f107 0310 	add.w	r3, r7, #16
 8018dee:	1d1a      	adds	r2, r3, #4
 8018df0:	f107 0310 	add.w	r3, r7, #16
 8018df4:	4619      	mov	r1, r3
 8018df6:	68f8      	ldr	r0, [r7, #12]
 8018df8:	f000 fad2 	bl	80193a0 <_ZNSt4pairISt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>
      }
 8018dfc:	68f8      	ldr	r0, [r7, #12]
 8018dfe:	371c      	adds	r7, #28
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd90      	pop	{r4, r7, pc}

08018e04 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh>:
      operator[](key_type&& __k)
 8018e04:	b590      	push	{r4, r7, lr}
 8018e06:	b08b      	sub	sp, #44	; 0x2c
 8018e08:	af02      	add	r7, sp, #8
 8018e0a:	6078      	str	r0, [r7, #4]
 8018e0c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8018e0e:	6839      	ldr	r1, [r7, #0]
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	f000 fb0b 	bl	801942c <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 8018e16:	4603      	mov	r3, r0
 8018e18:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 f8d4 	bl	8018fc8 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8018e20:	4603      	mov	r3, r0
 8018e22:	60fb      	str	r3, [r7, #12]
 8018e24:	f107 020c 	add.w	r2, r7, #12
 8018e28:	f107 0308 	add.w	r3, r7, #8
 8018e2c:	4611      	mov	r1, r2
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f000 f8d7 	bl	8018fe2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEES7_>
 8018e34:	4603      	mov	r3, r0
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d112      	bne.n	8018e60 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh+0x5c>
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f000 fb05 	bl	801944a <_ZNKSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 8018e40:	f107 0308 	add.w	r3, r7, #8
 8018e44:	4618      	mov	r0, r3
 8018e46:	f000 f8f1 	bl	801902c <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEdeEv>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	461a      	mov	r2, r3
 8018e4e:	f107 0310 	add.w	r3, r7, #16
 8018e52:	6839      	ldr	r1, [r7, #0]
 8018e54:	4618      	mov	r0, r3
 8018e56:	f7fa fb4f 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8018e5a:	4603      	mov	r3, r0
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d001      	beq.n	8018e64 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh+0x60>
 8018e60:	2301      	movs	r3, #1
 8018e62:	e000      	b.n	8018e66 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh+0x62>
 8018e64:	2300      	movs	r3, #0
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d01f      	beq.n	8018eaa <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8018e6a:	687c      	ldr	r4, [r7, #4]
 8018e6c:	f107 0208 	add.w	r2, r7, #8
 8018e70:	f107 0314 	add.w	r3, r7, #20
 8018e74:	4611      	mov	r1, r2
 8018e76:	4618      	mov	r0, r3
 8018e78:	f000 fb05 	bl	8019486 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN4Time5AlarmEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					std::forward_as_tuple(std::move(__k)),
 8018e7c:	6838      	ldr	r0, [r7, #0]
 8018e7e:	f7e9 f984 	bl	800218a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8018e82:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8018e84:	f107 0318 	add.w	r3, r7, #24
 8018e88:	4611      	mov	r1, r2
 8018e8a:	4618      	mov	r0, r3
 8018e8c:	f000 faea 	bl	8019464 <_ZSt16forward_as_tupleIJhEESt5tupleIJDpOT_EES3_>
 8018e90:	f107 0218 	add.w	r2, r7, #24
 8018e94:	f107 031c 	add.w	r3, r7, #28
 8018e98:	9300      	str	r3, [sp, #0]
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	4a08      	ldr	r2, [pc, #32]	; (8018ec0 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEixEOh+0xbc>)
 8018e9e:	6979      	ldr	r1, [r7, #20]
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	f000 fb00 	bl	80194a6 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8018eaa:	f107 0308 	add.w	r3, r7, #8
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f000 f8bc 	bl	801902c <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEdeEv>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	3304      	adds	r3, #4
      }
 8018eb8:	4618      	mov	r0, r3
 8018eba:	3724      	adds	r7, #36	; 0x24
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd90      	pop	{r4, r7, pc}
 8018ec0:	08026cc4 	.word	0x08026cc4

08018ec4 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8018ec4:	b590      	push	{r4, r7, lr}
 8018ec6:	b08b      	sub	sp, #44	; 0x2c
 8018ec8:	af02      	add	r7, sp, #8
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8018ece:	6839      	ldr	r1, [r7, #0]
 8018ed0:	6878      	ldr	r0, [r7, #4]
 8018ed2:	f000 fb26 	bl	8019522 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f000 fb30 	bl	8019540 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	60fb      	str	r3, [r7, #12]
 8018ee4:	f107 020c 	add.w	r2, r7, #12
 8018ee8:	f107 0308 	add.w	r3, r7, #8
 8018eec:	4611      	mov	r1, r2
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f000 fb33 	bl	801955a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEES9_>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d114      	bne.n	8018f24 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8018efa:	6878      	ldr	r0, [r7, #4]
 8018efc:	f000 fb41 	bl	8019582 <_ZNKSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	681c      	ldr	r4, [r3, #0]
 8018f04:	f107 0308 	add.w	r3, r7, #8
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f000 fb47 	bl	801959c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEdeEv>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	f107 0310 	add.w	r3, r7, #16
 8018f16:	4621      	mov	r1, r4
 8018f18:	4618      	mov	r0, r3
 8018f1a:	f000 fb4d 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 8018f1e:	4603      	mov	r3, r0
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d001      	beq.n	8018f28 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8018f24:	2301      	movs	r3, #1
 8018f26:	e000      	b.n	8018f2a <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8018f28:	2300      	movs	r3, #0
 8018f2a:	2b00      	cmp	r3, #0
 8018f2c:	d01b      	beq.n	8018f66 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8018f2e:	687c      	ldr	r4, [r7, #4]
 8018f30:	f107 0208 	add.w	r2, r7, #8
 8018f34:	f107 0314 	add.w	r3, r7, #20
 8018f38:	4611      	mov	r1, r2
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f000 fb5e 	bl	80195fc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8018f40:	f107 0318 	add.w	r3, r7, #24
 8018f44:	6839      	ldr	r1, [r7, #0]
 8018f46:	4618      	mov	r0, r3
 8018f48:	f000 fb49 	bl	80195de <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8018f4c:	f107 0218 	add.w	r2, r7, #24
 8018f50:	f107 031c 	add.w	r3, r7, #28
 8018f54:	9300      	str	r3, [sp, #0]
 8018f56:	4613      	mov	r3, r2
 8018f58:	4a08      	ldr	r2, [pc, #32]	; (8018f7c <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8018f5a:	6979      	ldr	r1, [r7, #20]
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f000 fb5d 	bl	801961c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8018f62:	4603      	mov	r3, r0
 8018f64:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8018f66:	f107 0308 	add.w	r3, r7, #8
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f000 fb16 	bl	801959c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEdeEv>
 8018f70:	4603      	mov	r3, r0
 8018f72:	3304      	adds	r3, #4
      }
 8018f74:	4618      	mov	r0, r3
 8018f76:	3724      	adds	r7, #36	; 0x24
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd90      	pop	{r4, r7, pc}
 8018f7c:	08026cc4 	.word	0x08026cc4

08018f80 <_ZNSt12forward_listIhSaIhEE10push_frontEOh>:
      push_front(_Tp&& __val)
 8018f80:	b5b0      	push	{r4, r5, r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
 8018f88:	6039      	str	r1, [r7, #0]
      { this->_M_insert_after(cbefore_begin(), std::move(__val)); }
 8018f8a:	687c      	ldr	r4, [r7, #4]
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f000 fb83 	bl	8019698 <_ZNKSt12forward_listIhSaIhEE13cbefore_beginEv>
 8018f92:	4605      	mov	r5, r0
 8018f94:	6838      	ldr	r0, [r7, #0]
 8018f96:	f7e9 f8f8 	bl	800218a <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8018f9a:	4603      	mov	r3, r0
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	4629      	mov	r1, r5
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f000 fb89 	bl	80196b8 <_ZNSt14_Fwd_list_baseIhSaIhEE15_M_insert_afterIJhEEEPSt19_Fwd_list_node_baseSt24_Fwd_list_const_iteratorIhEDpOT_>
 8018fa6:	bf00      	nop
 8018fa8:	3708      	adds	r7, #8
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bdb0      	pop	{r4, r5, r7, pc}

08018fae <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8018fae:	b580      	push	{r7, lr}
 8018fb0:	b082      	sub	sp, #8
 8018fb2:	af00      	add	r7, sp, #0
 8018fb4:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f000 fb9b 	bl	80196f4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 8018fbe:	4603      	mov	r3, r0
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3708      	adds	r7, #8
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}

08018fc8 <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	b082      	sub	sp, #8
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f000 fb9f 	bl	8019716 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	4618      	mov	r0, r3
 8018fdc:	3708      	adds	r7, #8
 8018fde:	46bd      	mov	sp, r7
 8018fe0:	bd80      	pop	{r7, pc}

08018fe2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8018fe2:	b480      	push	{r7}
 8018fe4:	b083      	sub	sp, #12
 8018fe6:	af00      	add	r7, sp, #0
 8018fe8:	6078      	str	r0, [r7, #4]
 8018fea:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681a      	ldr	r2, [r3, #0]
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	429a      	cmp	r2, r3
 8018ff6:	bf0c      	ite	eq
 8018ff8:	2301      	moveq	r3, #1
 8018ffa:	2300      	movne	r3, #0
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	4618      	mov	r0, r3
 8019000:	370c      	adds	r7, #12
 8019002:	46bd      	mov	sp, r7
 8019004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019008:	4770      	bx	lr

0801900a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801900a:	b580      	push	{r7, lr}
 801900c:	b082      	sub	sp, #8
 801900e:	af00      	add	r7, sp, #0
 8019010:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	4618      	mov	r0, r3
 8019018:	f00d f8ab 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801901c:	4602      	mov	r2, r0
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	601a      	str	r2, [r3, #0]
	return *this;
 8019022:	687b      	ldr	r3, [r7, #4]
      }
 8019024:	4618      	mov	r0, r3
 8019026:	3708      	adds	r7, #8
 8019028:	46bd      	mov	sp, r7
 801902a:	bd80      	pop	{r7, pc}

0801902c <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801902c:	b580      	push	{r7, lr}
 801902e:	b082      	sub	sp, #8
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	4618      	mov	r0, r3
 801903a:	f000 fb7d 	bl	8019738 <_ZNSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>
 801903e:	4603      	mov	r3, r0
 8019040:	4618      	mov	r0, r3
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <_ZNKSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EE8containsERKS1_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of elements to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 8019048:	b580      	push	{r7, lr}
 801904a:	b084      	sub	sp, #16
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6839      	ldr	r1, [r7, #0]
 8019056:	4618      	mov	r0, r3
 8019058:	f000 fb7c 	bl	8019754 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>
 801905c:	4603      	mov	r3, r0
 801905e:	60bb      	str	r3, [r7, #8]
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	4618      	mov	r0, r3
 8019064:	f000 fbb5 	bl	80197d2 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8019068:	4603      	mov	r3, r0
 801906a:	60fb      	str	r3, [r7, #12]
 801906c:	f107 020c 	add.w	r2, r7, #12
 8019070:	f107 0308 	add.w	r3, r7, #8
 8019074:	4611      	mov	r1, r2
 8019076:	4618      	mov	r0, r3
 8019078:	f000 fbbc 	bl	80197f4 <_ZSteqRKSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefES4_>
 801907c:	4603      	mov	r3, r0
 801907e:	f083 0301 	eor.w	r3, r3, #1
 8019082:	b2db      	uxtb	r3, r3
 8019084:	4618      	mov	r0, r3
 8019086:	3710      	adds	r7, #16
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}

0801908c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801908c:	b480      	push	{r7}
 801908e:	b083      	sub	sp, #12
 8019090:	af00      	add	r7, sp, #0
 8019092:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	4618      	mov	r0, r3
 8019098:	370c      	adds	r7, #12
 801909a:	46bd      	mov	sp, r7
 801909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a0:	4770      	bx	lr

080190a2 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE11_Deque_implD1Ev>:
      struct _Deque_impl
 80190a2:	b580      	push	{r7, lr}
 80190a4:	b082      	sub	sp, #8
 80190a6:	af00      	add	r7, sp, #0
 80190a8:	6078      	str	r0, [r7, #4]
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f000 fbc6 	bl	801983c <_ZNSaIP17TIM_HandleTypeDefED1Ev>
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	4618      	mov	r0, r3
 80190b4:	3708      	adds	r7, #8
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}

080190ba <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EEC1Ev>:
      _Deque_base()
 80190ba:	b580      	push	{r7, lr}
 80190bc:	b082      	sub	sp, #8
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
      : _M_impl()
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	4618      	mov	r0, r3
 80190c6:	f000 fba9 	bl	801981c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 80190ca:	2100      	movs	r1, #0
 80190cc:	6878      	ldr	r0, [r7, #4]
 80190ce:	f000 fbc0 	bl	8019852 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE17_M_initialize_mapEj>
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	4618      	mov	r0, r3
 80190d6:	3708      	adds	r7, #8
 80190d8:	46bd      	mov	sp, r7
 80190da:	bd80      	pop	{r7, pc}

080190dc <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 80190dc:	b580      	push	{r7, lr}
 80190de:	b082      	sub	sp, #8
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d010      	beq.n	801910e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80190f4:	3304      	adds	r3, #4
 80190f6:	461a      	mov	r2, r3
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f000 fc0d 	bl	8019918 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_destroy_nodesEPPS1_S5_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	6819      	ldr	r1, [r3, #0]
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	685b      	ldr	r3, [r3, #4]
 8019106:	461a      	mov	r2, r3
 8019108:	6878      	ldr	r0, [r7, #4]
 801910a:	f000 fc1f 	bl	801994c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE17_M_deallocate_mapEPPS1_j>
    }
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	4618      	mov	r0, r3
 8019112:	f7ff ffc6 	bl	80190a2 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE11_Deque_implD1Ev>
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	4618      	mov	r0, r3
 801911a:	3708      	adds	r7, #8
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}

08019120 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 8019120:	b580      	push	{r7, lr}
 8019122:	b08a      	sub	sp, #40	; 0x28
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 8019128:	f107 0308 	add.w	r3, r7, #8
 801912c:	6879      	ldr	r1, [r7, #4]
 801912e:	4618      	mov	r0, r3
 8019130:	f000 fc28 	bl	8019984 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE5beginEv>
 8019134:	f107 0318 	add.w	r3, r7, #24
 8019138:	6879      	ldr	r1, [r7, #4]
 801913a:	4618      	mov	r0, r3
 801913c:	f000 fc31 	bl	80199a2 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE3endEv>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	4618      	mov	r0, r3
 8019144:	f000 fc3c 	bl	80199c0 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE19_M_get_Tp_allocatorEv>
 8019148:	4603      	mov	r3, r0
 801914a:	f107 0218 	add.w	r2, r7, #24
 801914e:	f107 0108 	add.w	r1, r7, #8
 8019152:	6878      	ldr	r0, [r7, #4]
 8019154:	f000 fc3f 	bl	80199d6 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	4618      	mov	r0, r3
 801915c:	f7ff ffbe 	bl	80190dc <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EED1Ev>
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	4618      	mov	r0, r3
 8019164:	3728      	adds	r7, #40	; 0x28
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}

0801916a <_ZNSaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801916a:	b580      	push	{r7, lr}
 801916c:	b082      	sub	sp, #8
 801916e:	af00      	add	r7, sp, #0
 8019170:	6078      	str	r0, [r7, #4]
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	f000 fc3c 	bl	80199f0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEC1Ev>
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	4618      	mov	r0, r3
 801917c:	3708      	adds	r7, #8
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}

08019182 <_ZNSt20_Rb_tree_key_compareISt4lessIP17TIM_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8019182:	b480      	push	{r7}
 8019184:	b083      	sub	sp, #12
 8019186:	af00      	add	r7, sp, #0
 8019188:	6078      	str	r0, [r7, #4]
      { }
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	4618      	mov	r0, r3
 801918e:	370c      	adds	r7, #12
 8019190:	46bd      	mov	sp, r7
 8019192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019196:	4770      	bx	lr

08019198 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80191a2:	683b      	ldr	r3, [r7, #0]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d012      	beq.n	80191ce <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0x36>
	  _M_erase(_S_right(__x));
 80191a8:	6838      	ldr	r0, [r7, #0]
 80191aa:	f000 fc2c 	bl	8019a06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 80191ae:	4603      	mov	r3, r0
 80191b0:	4619      	mov	r1, r3
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f7ff fff0 	bl	8019198 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E>
	  _Link_type __y = _S_left(__x);
 80191b8:	6838      	ldr	r0, [r7, #0]
 80191ba:	f000 fc30 	bl	8019a1e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 80191be:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80191c0:	6839      	ldr	r1, [r7, #0]
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f000 fc37 	bl	8019a36 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>
	  __x = __y;
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80191cc:	e7e9      	b.n	80191a2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E+0xa>
    }
 80191ce:	bf00      	nop
 80191d0:	3710      	adds	r7, #16
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}

080191d6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80191d6:	b480      	push	{r7}
 80191d8:	b083      	sub	sp, #12
 80191da:	af00      	add	r7, sp, #0
 80191dc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	689b      	ldr	r3, [r3, #8]
 80191e2:	4618      	mov	r0, r3
 80191e4:	370c      	adds	r7, #12
 80191e6:	46bd      	mov	sp, r7
 80191e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ec:	4770      	bx	lr

080191ee <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEC1Ev>:
 80191ee:	b580      	push	{r7, lr}
 80191f0:	b082      	sub	sp, #8
 80191f2:	af00      	add	r7, sp, #0
 80191f4:	6078      	str	r0, [r7, #4]
 80191f6:	6878      	ldr	r0, [r7, #4]
 80191f8:	f000 fc2e 	bl	8019a58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEC1Ev>
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	4618      	mov	r0, r3
 8019200:	3708      	adds	r7, #8
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}

08019206 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019206:	b580      	push	{r7, lr}
 8019208:	b084      	sub	sp, #16
 801920a:	af00      	add	r7, sp, #0
 801920c:	6078      	str	r0, [r7, #4]
 801920e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8019210:	683b      	ldr	r3, [r7, #0]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d012      	beq.n	801923c <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8019216:	6838      	ldr	r0, [r7, #0]
 8019218:	f000 fc29 	bl	8019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801921c:	4603      	mov	r3, r0
 801921e:	4619      	mov	r1, r3
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f7ff fff0 	bl	8019206 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8019226:	6838      	ldr	r0, [r7, #0]
 8019228:	f000 fc2d 	bl	8019a86 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801922c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801922e:	6839      	ldr	r1, [r7, #0]
 8019230:	6878      	ldr	r0, [r7, #4]
 8019232:	f000 fc34 	bl	8019a9e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801923a:	e7e9      	b.n	8019210 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801923c:	bf00      	nop
 801923e:	3710      	adds	r7, #16
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}

08019244 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8019244:	b480      	push	{r7}
 8019246:	b083      	sub	sp, #12
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	689b      	ldr	r3, [r3, #8]
 8019250:	4618      	mov	r0, r3
 8019252:	370c      	adds	r7, #12
 8019254:	46bd      	mov	sp, r7
 8019256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925a:	4770      	bx	lr

0801925c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEC1Ev>:
 801925c:	b580      	push	{r7, lr}
 801925e:	b082      	sub	sp, #8
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
 8019264:	6878      	ldr	r0, [r7, #4]
 8019266:	f000 fc2b 	bl	8019ac0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEC1Ev>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	4618      	mov	r0, r3
 801926e:	3708      	adds	r7, #8
 8019270:	46bd      	mov	sp, r7
 8019272:	bd80      	pop	{r7, pc}

08019274 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019274:	b580      	push	{r7, lr}
 8019276:	b084      	sub	sp, #16
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d012      	beq.n	80192aa <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8019284:	6838      	ldr	r0, [r7, #0]
 8019286:	f000 fc26 	bl	8019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801928a:	4603      	mov	r3, r0
 801928c:	4619      	mov	r1, r3
 801928e:	6878      	ldr	r0, [r7, #4]
 8019290:	f7ff fff0 	bl	8019274 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8019294:	6838      	ldr	r0, [r7, #0]
 8019296:	f000 fc2a 	bl	8019aee <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 801929a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801929c:	6839      	ldr	r1, [r7, #0]
 801929e:	6878      	ldr	r0, [r7, #4]
 80192a0:	f000 fc31 	bl	8019b06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80192a8:	e7e9      	b.n	801927e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 80192aa:	bf00      	nop
 80192ac:	3710      	adds	r7, #16
 80192ae:	46bd      	mov	sp, r7
 80192b0:	bd80      	pop	{r7, pc}

080192b2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80192b2:	b480      	push	{r7}
 80192b4:	b083      	sub	sp, #12
 80192b6:	af00      	add	r7, sp, #0
 80192b8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	689b      	ldr	r3, [r3, #8]
 80192be:	4618      	mov	r0, r3
 80192c0:	370c      	adds	r7, #12
 80192c2:	46bd      	mov	sp, r7
 80192c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c8:	4770      	bx	lr

080192ca <_ZSt4moveIRP17TIM_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80192ca:	b480      	push	{r7}
 80192cc:	b083      	sub	sp, #12
 80192ce:	af00      	add	r7, sp, #0
 80192d0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	4618      	mov	r0, r3
 80192d6:	370c      	adds	r7, #12
 80192d8:	46bd      	mov	sp, r7
 80192da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192de:	4770      	bx	lr

080192e0 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE9push_backEOS1_>:
	  _M_push_back_aux(__x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b082      	sub	sp, #8
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
 80192e8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80192ea:	6838      	ldr	r0, [r7, #0]
 80192ec:	f7ff ffed 	bl	80192ca <_ZSt4moveIRP17TIM_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80192f0:	4603      	mov	r3, r0
 80192f2:	4619      	mov	r1, r3
 80192f4:	6878      	ldr	r0, [r7, #4]
 80192f6:	f000 fc17 	bl	8019b28 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80192fa:	bf00      	nop
 80192fc:	3708      	adds	r7, #8
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}

08019302 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019302:	b5b0      	push	{r4, r5, r7, lr}
 8019304:	b08e      	sub	sp, #56	; 0x38
 8019306:	af02      	add	r7, sp, #8
 8019308:	60f8      	str	r0, [r7, #12]
 801930a:	60b9      	str	r1, [r7, #8]
 801930c:	607a      	str	r2, [r7, #4]
	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
 801930e:	f107 031c 	add.w	r3, r7, #28
 8019312:	6879      	ldr	r1, [r7, #4]
 8019314:	4618      	mov	r0, r3
 8019316:	f000 fcbf 	bl	8019c98 <_ZNKSt9_IdentityIP17TIM_HandleTypeDefEclERS1_>
 801931a:	4602      	mov	r2, r0
 801931c:	f107 0314 	add.w	r3, r7, #20
 8019320:	68b9      	ldr	r1, [r7, #8]
 8019322:	4618      	mov	r0, r3
 8019324:	f000 fc2e 	bl	8019b84 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>
      if (__res.second)
 8019328:	69bb      	ldr	r3, [r7, #24]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d022      	beq.n	8019374 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x72>
	  _Alloc_node __an(*this);
 801932e:	f107 0310 	add.w	r3, r7, #16
 8019332:	68b9      	ldr	r1, [r7, #8]
 8019334:	4618      	mov	r0, r3
 8019336:	f000 fcbb 	bl	8019cb0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>
	  return _Res(_M_insert_(__res.first, __res.second,
 801933a:	697c      	ldr	r4, [r7, #20]
 801933c:	69bd      	ldr	r5, [r7, #24]
 801933e:	6878      	ldr	r0, [r7, #4]
 8019340:	f000 fcc5 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8019344:	4602      	mov	r2, r0
 8019346:	f107 0310 	add.w	r3, r7, #16
 801934a:	9300      	str	r3, [sp, #0]
 801934c:	4613      	mov	r3, r2
 801934e:	462a      	mov	r2, r5
 8019350:	4621      	mov	r1, r4
 8019352:	68b8      	ldr	r0, [r7, #8]
 8019354:	f000 fcc6 	bl	8019ce4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_>
 8019358:	4603      	mov	r3, r0
 801935a:	623b      	str	r3, [r7, #32]
		      true);
 801935c:	2301      	movs	r3, #1
 801935e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019362:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8019366:	f107 0320 	add.w	r3, r7, #32
 801936a:	4619      	mov	r1, r3
 801936c:	68f8      	ldr	r0, [r7, #12]
 801936e:	f000 fd04 	bl	8019d7a <_ZNSt4pairISt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8019372:	e011      	b.n	8019398 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE16_M_insert_uniqueIS1_EESt4pairISt17_Rb_tree_iteratorIS1_EbEOT_+0x96>
      return _Res(iterator(__res.first), false);
 8019374:	697a      	ldr	r2, [r7, #20]
 8019376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801937a:	4611      	mov	r1, r2
 801937c:	4618      	mov	r0, r3
 801937e:	f000 fd15 	bl	8019dac <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEC1EPSt18_Rb_tree_node_base>
 8019382:	2300      	movs	r3, #0
 8019384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019388:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 801938c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019390:	4619      	mov	r1, r3
 8019392:	68f8      	ldr	r0, [r7, #12]
 8019394:	f000 fcf1 	bl	8019d7a <_ZNSt4pairISt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEbEC1IS3_bLb1EEEOT_OT0_>
    }
 8019398:	68f8      	ldr	r0, [r7, #12]
 801939a:	3730      	adds	r7, #48	; 0x30
 801939c:	46bd      	mov	sp, r7
 801939e:	bdb0      	pop	{r4, r5, r7, pc}

080193a0 <_ZNSt4pairISt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEbEC1IRSt17_Rb_tree_iteratorIS2_ERbLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80193a0:	b590      	push	{r4, r7, lr}
 80193a2:	b085      	sub	sp, #20
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	60f8      	str	r0, [r7, #12]
 80193a8:	60b9      	str	r1, [r7, #8]
 80193aa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80193ac:	68fc      	ldr	r4, [r7, #12]
 80193ae:	68b8      	ldr	r0, [r7, #8]
 80193b0:	f000 fd0b 	bl	8019dca <_ZSt7forwardIRSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS5_E4typeE>
 80193b4:	4603      	mov	r3, r0
 80193b6:	4619      	mov	r1, r3
 80193b8:	4620      	mov	r0, r4
 80193ba:	f000 fd1c 	bl	8019df6 <_ZNSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEC1ERKSt17_Rb_tree_iteratorIS1_E>
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f000 fd0e 	bl	8019de0 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>
 80193c4:	4603      	mov	r3, r0
 80193c6:	781a      	ldrb	r2, [r3, #0]
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	711a      	strb	r2, [r3, #4]
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	4618      	mov	r0, r3
 80193d0:	3714      	adds	r7, #20
 80193d2:	46bd      	mov	sp, r7
 80193d4:	bd90      	pop	{r4, r7, pc}

080193d6 <_ZNKSt5dequeIP17TIM_HandleTypeDefSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80193d6:	b580      	push	{r7, lr}
 80193d8:	b082      	sub	sp, #8
 80193da:	af00      	add	r7, sp, #0
 80193dc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	f103 0218 	add.w	r2, r3, #24
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	3308      	adds	r3, #8
 80193e8:	4619      	mov	r1, r3
 80193ea:	4610      	mov	r0, r2
 80193ec:	f000 fd13 	bl	8019e16 <_ZStmiRKSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_ES6_>
 80193f0:	4603      	mov	r3, r0
 80193f2:	4618      	mov	r0, r3
 80193f4:	3708      	adds	r7, #8
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80193fa:	b580      	push	{r7, lr}
 80193fc:	b086      	sub	sp, #24
 80193fe:	af00      	add	r7, sp, #0
 8019400:	6078      	str	r0, [r7, #4]
	iterator __tmp = end();
 8019402:	f107 0308 	add.w	r3, r7, #8
 8019406:	6879      	ldr	r1, [r7, #4]
 8019408:	4618      	mov	r0, r3
 801940a:	f000 faca 	bl	80199a2 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE3endEv>
	--__tmp;
 801940e:	f107 0308 	add.w	r3, r7, #8
 8019412:	4618      	mov	r0, r3
 8019414:	f000 fd23 	bl	8019e5e <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EmmEv>
	return *__tmp;
 8019418:	f107 0308 	add.w	r3, r7, #8
 801941c:	4618      	mov	r0, r3
 801941e:	f000 fd3d 	bl	8019e9c <_ZNKSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EdeEv>
 8019422:	4603      	mov	r3, r0
      }
 8019424:	4618      	mov	r0, r3
 8019426:	3718      	adds	r7, #24
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}

0801942c <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 801942c:	b580      	push	{r7, lr}
 801942e:	b082      	sub	sp, #8
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
 8019434:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6839      	ldr	r1, [r7, #0]
 801943a:	4618      	mov	r0, r3
 801943c:	f000 fd3a 	bl	8019eb4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 8019440:	4603      	mov	r3, r0
 8019442:	4618      	mov	r0, r3
 8019444:	3708      	adds	r7, #8
 8019446:	46bd      	mov	sp, r7
 8019448:	bd80      	pop	{r7, pc}

0801944a <_ZNKSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 801944a:	b590      	push	{r4, r7, lr}
 801944c:	b083      	sub	sp, #12
 801944e:	af00      	add	r7, sp, #0
 8019450:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	4618      	mov	r0, r3
 8019456:	f000 fd44 	bl	8019ee2 <_ZNKSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 801945a:	bf00      	nop
 801945c:	4620      	mov	r0, r4
 801945e:	370c      	adds	r7, #12
 8019460:	46bd      	mov	sp, r7
 8019462:	bd90      	pop	{r4, r7, pc}

08019464 <_ZSt16forward_as_tupleIJhEESt5tupleIJDpOT_EES3_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
 801946c:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801946e:	6838      	ldr	r0, [r7, #0]
 8019470:	f7fa fa30 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8019474:	4603      	mov	r3, r0
 8019476:	4619      	mov	r1, r3
 8019478:	6878      	ldr	r0, [r7, #4]
 801947a:	f000 fd3d 	bl	8019ef8 <_ZNSt5tupleIJOhEEC1IJhELb1ELb1EEEDpOT_>
 801947e:	6878      	ldr	r0, [r7, #4]
 8019480:	3708      	adds	r7, #8
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}

08019486 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN4Time5AlarmEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8019486:	b480      	push	{r7}
 8019488:	b083      	sub	sp, #12
 801948a:	af00      	add	r7, sp, #0
 801948c:	6078      	str	r0, [r7, #4]
 801948e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8019490:	683b      	ldr	r3, [r7, #0]
 8019492:	681a      	ldr	r2, [r3, #0]
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	601a      	str	r2, [r3, #0]
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	4618      	mov	r0, r3
 801949c:	370c      	adds	r7, #12
 801949e:	46bd      	mov	sp, r7
 80194a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a4:	4770      	bx	lr

080194a6 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80194a6:	b5b0      	push	{r4, r5, r7, lr}
 80194a8:	b088      	sub	sp, #32
 80194aa:	af00      	add	r7, sp, #0
 80194ac:	60f8      	str	r0, [r7, #12]
 80194ae:	60b9      	str	r1, [r7, #8]
 80194b0:	607a      	str	r2, [r7, #4]
 80194b2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80194b4:	6878      	ldr	r0, [r7, #4]
 80194b6:	f7fa fd0e 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80194ba:	4604      	mov	r4, r0
 80194bc:	6838      	ldr	r0, [r7, #0]
 80194be:	f000 fd2e 	bl	8019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80194c2:	4605      	mov	r5, r0
 80194c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80194c6:	f7fa fd1c 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80194ca:	4603      	mov	r3, r0
 80194cc:	462a      	mov	r2, r5
 80194ce:	4621      	mov	r1, r4
 80194d0:	68f8      	ldr	r0, [r7, #12]
 80194d2:	f000 fd2f 	bl	8019f34 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80194d6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80194d8:	69f8      	ldr	r0, [r7, #28]
 80194da:	f000 fe71 	bl	801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80194de:	4603      	mov	r3, r0
 80194e0:	f107 0010 	add.w	r0, r7, #16
 80194e4:	68ba      	ldr	r2, [r7, #8]
 80194e6:	68f9      	ldr	r1, [r7, #12]
 80194e8:	f000 fd47 	bl	8019f7a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 80194ec:	697b      	ldr	r3, [r7, #20]
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d007      	beq.n	8019502 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80194f2:	6939      	ldr	r1, [r7, #16]
 80194f4:	697a      	ldr	r2, [r7, #20]
 80194f6:	69fb      	ldr	r3, [r7, #28]
 80194f8:	68f8      	ldr	r0, [r7, #12]
 80194fa:	f000 fe74 	bl	801a1e6 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 80194fe:	4603      	mov	r3, r0
 8019500:	e00b      	b.n	801951a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8019502:	69f9      	ldr	r1, [r7, #28]
 8019504:	68f8      	ldr	r0, [r7, #12]
 8019506:	f000 faca 	bl	8019a9e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 801950a:	693a      	ldr	r2, [r7, #16]
 801950c:	f107 0318 	add.w	r3, r7, #24
 8019510:	4611      	mov	r1, r2
 8019512:	4618      	mov	r0, r3
 8019514:	f000 fea4 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 8019518:	69bb      	ldr	r3, [r7, #24]
      }
 801951a:	4618      	mov	r0, r3
 801951c:	3720      	adds	r7, #32
 801951e:	46bd      	mov	sp, r7
 8019520:	bdb0      	pop	{r4, r5, r7, pc}

08019522 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8019522:	b580      	push	{r7, lr}
 8019524:	b082      	sub	sp, #8
 8019526:	af00      	add	r7, sp, #0
 8019528:	6078      	str	r0, [r7, #4]
 801952a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	6839      	ldr	r1, [r7, #0]
 8019530:	4618      	mov	r0, r3
 8019532:	f000 fea4 	bl	801a27e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8019536:	4603      	mov	r3, r0
 8019538:	4618      	mov	r0, r3
 801953a:	3708      	adds	r7, #8
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	4618      	mov	r0, r3
 801954c:	f000 feae 	bl	801a2ac <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8019550:	4603      	mov	r3, r0
 8019552:	4618      	mov	r0, r3
 8019554:	3708      	adds	r7, #8
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}

0801955a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801955a:	b480      	push	{r7}
 801955c:	b083      	sub	sp, #12
 801955e:	af00      	add	r7, sp, #0
 8019560:	6078      	str	r0, [r7, #4]
 8019562:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681a      	ldr	r2, [r3, #0]
 8019568:	683b      	ldr	r3, [r7, #0]
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	429a      	cmp	r2, r3
 801956e:	bf0c      	ite	eq
 8019570:	2301      	moveq	r3, #1
 8019572:	2300      	movne	r3, #0
 8019574:	b2db      	uxtb	r3, r3
 8019576:	4618      	mov	r0, r3
 8019578:	370c      	adds	r7, #12
 801957a:	46bd      	mov	sp, r7
 801957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019580:	4770      	bx	lr

08019582 <_ZNKSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8019582:	b590      	push	{r4, r7, lr}
 8019584:	b083      	sub	sp, #12
 8019586:	af00      	add	r7, sp, #0
 8019588:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	4618      	mov	r0, r3
 801958e:	f000 fe9e 	bl	801a2ce <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8019592:	bf00      	nop
 8019594:	4620      	mov	r0, r4
 8019596:	370c      	adds	r7, #12
 8019598:	46bd      	mov	sp, r7
 801959a:	bd90      	pop	{r4, r7, pc}

0801959c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801959c:	b580      	push	{r7, lr}
 801959e:	b082      	sub	sp, #8
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	4618      	mov	r0, r3
 80195aa:	f000 fe9b 	bl	801a2e4 <_ZNSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>
 80195ae:	4603      	mov	r3, r0
 80195b0:	4618      	mov	r0, r3
 80195b2:	3708      	adds	r7, #8
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bd80      	pop	{r7, pc}

080195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 80195b8:	b480      	push	{r7}
 80195ba:	b085      	sub	sp, #20
 80195bc:	af00      	add	r7, sp, #0
 80195be:	60f8      	str	r0, [r7, #12]
 80195c0:	60b9      	str	r1, [r7, #8]
 80195c2:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 80195c4:	68ba      	ldr	r2, [r7, #8]
 80195c6:	687b      	ldr	r3, [r7, #4]
 80195c8:	429a      	cmp	r2, r3
 80195ca:	bf34      	ite	cc
 80195cc:	2301      	movcc	r3, #1
 80195ce:	2300      	movcs	r3, #0
 80195d0:	b2db      	uxtb	r3, r3
      }
 80195d2:	4618      	mov	r0, r3
 80195d4:	3714      	adds	r7, #20
 80195d6:	46bd      	mov	sp, r7
 80195d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195dc:	4770      	bx	lr

080195de <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 80195de:	b580      	push	{r7, lr}
 80195e0:	b082      	sub	sp, #8
 80195e2:	af00      	add	r7, sp, #0
 80195e4:	6078      	str	r0, [r7, #4]
 80195e6:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	6839      	ldr	r1, [r7, #0]
 80195ec:	4618      	mov	r0, r3
 80195ee:	f000 fe87 	bl	801a300 <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	4618      	mov	r0, r3
 80195f6:	3708      	adds	r7, #8
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}

080195fc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80195fc:	b480      	push	{r7}
 80195fe:	b083      	sub	sp, #12
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
 8019604:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	681a      	ldr	r2, [r3, #0]
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	601a      	str	r2, [r3, #0]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	4618      	mov	r0, r3
 8019612:	370c      	adds	r7, #12
 8019614:	46bd      	mov	sp, r7
 8019616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961a:	4770      	bx	lr

0801961c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801961c:	b5b0      	push	{r4, r5, r7, lr}
 801961e:	b088      	sub	sp, #32
 8019620:	af00      	add	r7, sp, #0
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	607a      	str	r2, [r7, #4]
 8019628:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801962a:	6878      	ldr	r0, [r7, #4]
 801962c:	f7fa fc53 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8019630:	4604      	mov	r4, r0
 8019632:	6838      	ldr	r0, [r7, #0]
 8019634:	f000 fe73 	bl	801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8019638:	4605      	mov	r5, r0
 801963a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801963c:	f7fa fc61 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8019640:	4603      	mov	r3, r0
 8019642:	462a      	mov	r2, r5
 8019644:	4621      	mov	r1, r4
 8019646:	68f8      	ldr	r0, [r7, #12]
 8019648:	f000 fe74 	bl	801a334 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 801964c:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801964e:	69f8      	ldr	r0, [r7, #28]
 8019650:	f000 ffc2 	bl	801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8019654:	4603      	mov	r3, r0
 8019656:	f107 0010 	add.w	r0, r7, #16
 801965a:	68ba      	ldr	r2, [r7, #8]
 801965c:	68f9      	ldr	r1, [r7, #12]
 801965e:	f000 fe8c 	bl	801a37a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d007      	beq.n	8019678 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8019668:	6939      	ldr	r1, [r7, #16]
 801966a:	697a      	ldr	r2, [r7, #20]
 801966c:	69fb      	ldr	r3, [r7, #28]
 801966e:	68f8      	ldr	r0, [r7, #12]
 8019670:	f000 ffc5 	bl	801a5fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8019674:	4603      	mov	r3, r0
 8019676:	e00b      	b.n	8019690 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8019678:	69f9      	ldr	r1, [r7, #28]
 801967a:	68f8      	ldr	r0, [r7, #12]
 801967c:	f000 fa43 	bl	8019b06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8019680:	693a      	ldr	r2, [r7, #16]
 8019682:	f107 0318 	add.w	r3, r7, #24
 8019686:	4611      	mov	r1, r2
 8019688:	4618      	mov	r0, r3
 801968a:	f000 fff7 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801968e:	69bb      	ldr	r3, [r7, #24]
      }
 8019690:	4618      	mov	r0, r3
 8019692:	3720      	adds	r7, #32
 8019694:	46bd      	mov	sp, r7
 8019696:	bdb0      	pop	{r4, r5, r7, pc}

08019698 <_ZNKSt12forward_listIhSaIhEE13cbefore_beginEv>:
      cbefore_begin() const noexcept
 8019698:	b580      	push	{r7, lr}
 801969a:	b084      	sub	sp, #16
 801969c:	af00      	add	r7, sp, #0
 801969e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_head); }
 80196a0:	687a      	ldr	r2, [r7, #4]
 80196a2:	f107 030c 	add.w	r3, r7, #12
 80196a6:	4611      	mov	r1, r2
 80196a8:	4618      	mov	r0, r3
 80196aa:	f001 f81a 	bl	801a6e2 <_ZNSt24_Fwd_list_const_iteratorIhEC1EPKSt19_Fwd_list_node_base>
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	4618      	mov	r0, r3
 80196b2:	3710      	adds	r7, #16
 80196b4:	46bd      	mov	sp, r7
 80196b6:	bd80      	pop	{r7, pc}

080196b8 <_ZNSt14_Fwd_list_baseIhSaIhEE15_M_insert_afterIJhEEEPSt19_Fwd_list_node_baseSt24_Fwd_list_const_iteratorIhEDpOT_>:
      _Fwd_list_base<_Tp, _Alloc>::
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b086      	sub	sp, #24
 80196bc:	af00      	add	r7, sp, #0
 80196be:	60f8      	str	r0, [r7, #12]
 80196c0:	60b9      	str	r1, [r7, #8]
 80196c2:	607a      	str	r2, [r7, #4]
	_Fwd_list_node_base* __to
 80196c4:	68bb      	ldr	r3, [r7, #8]
 80196c6:	617b      	str	r3, [r7, #20]
	_Node* __thing = _M_create_node(std::forward<_Args>(__args)...);
 80196c8:	6878      	ldr	r0, [r7, #4]
 80196ca:	f7fa f903 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80196ce:	4603      	mov	r3, r0
 80196d0:	4619      	mov	r1, r3
 80196d2:	68f8      	ldr	r0, [r7, #12]
 80196d4:	f001 f814 	bl	801a700 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 80196d8:	6138      	str	r0, [r7, #16]
	__thing->_M_next = __to->_M_next;
 80196da:	697b      	ldr	r3, [r7, #20]
 80196dc:	681a      	ldr	r2, [r3, #0]
 80196de:	693b      	ldr	r3, [r7, #16]
 80196e0:	601a      	str	r2, [r3, #0]
	__to->_M_next = __thing;
 80196e2:	697b      	ldr	r3, [r7, #20]
 80196e4:	693a      	ldr	r2, [r7, #16]
 80196e6:	601a      	str	r2, [r3, #0]
	return __to->_M_next;
 80196e8:	697b      	ldr	r3, [r7, #20]
 80196ea:	681b      	ldr	r3, [r3, #0]
      }
 80196ec:	4618      	mov	r0, r3
 80196ee:	3718      	adds	r7, #24
 80196f0:	46bd      	mov	sp, r7
 80196f2:	bd80      	pop	{r7, pc}

080196f4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	68da      	ldr	r2, [r3, #12]
 8019700:	f107 030c 	add.w	r3, r7, #12
 8019704:	4611      	mov	r1, r2
 8019706:	4618      	mov	r0, r3
 8019708:	f000 fdaa 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	4618      	mov	r0, r3
 8019710:	3710      	adds	r7, #16
 8019712:	46bd      	mov	sp, r7
 8019714:	bd80      	pop	{r7, pc}

08019716 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8019716:	b580      	push	{r7, lr}
 8019718:	b084      	sub	sp, #16
 801971a:	af00      	add	r7, sp, #0
 801971c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	1d1a      	adds	r2, r3, #4
 8019722:	f107 030c 	add.w	r3, r7, #12
 8019726:	4611      	mov	r1, r2
 8019728:	4618      	mov	r0, r3
 801972a:	f000 fd99 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	4618      	mov	r0, r3
 8019732:	3710      	adds	r7, #16
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <_ZNSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>:
      _M_valptr()
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	3310      	adds	r3, #16
 8019744:	4618      	mov	r0, r3
 8019746:	f001 f803 	bl	801a750 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE6_M_ptrEv>
 801974a:	4603      	mov	r3, r0
 801974c:	4618      	mov	r0, r3
 801974e:	3708      	adds	r7, #8
 8019750:	46bd      	mov	sp, r7
 8019752:	bd80      	pop	{r7, pc}

08019754 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019754:	b5b0      	push	{r4, r5, r7, lr}
 8019756:	b084      	sub	sp, #16
 8019758:	af00      	add	r7, sp, #0
 801975a:	6078      	str	r0, [r7, #4]
 801975c:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801975e:	6878      	ldr	r0, [r7, #4]
 8019760:	f001 f802 	bl	801a768 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8019764:	4604      	mov	r4, r0
 8019766:	6878      	ldr	r0, [r7, #4]
 8019768:	f001 f80a 	bl	801a780 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 801976c:	4602      	mov	r2, r0
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	4621      	mov	r1, r4
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f001 f810 	bl	801a798 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_>
 8019778:	4603      	mov	r3, r0
 801977a:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801977c:	6878      	ldr	r0, [r7, #4]
 801977e:	f000 f828 	bl	80197d2 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 8019782:	4603      	mov	r3, r0
 8019784:	60fb      	str	r3, [r7, #12]
 8019786:	f107 020c 	add.w	r2, r7, #12
 801978a:	f107 0308 	add.w	r3, r7, #8
 801978e:	4611      	mov	r1, r2
 8019790:	4618      	mov	r0, r3
 8019792:	f000 f82f 	bl	80197f4 <_ZSteqRKSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefES4_>
 8019796:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8019798:	2b00      	cmp	r3, #0
 801979a:	d110      	bne.n	80197be <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x6a>
	      || _M_impl._M_key_compare(__k,
 801979c:	687c      	ldr	r4, [r7, #4]
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	4618      	mov	r0, r3
 80197a6:	f001 f82a 	bl	801a7fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80197aa:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	461a      	mov	r2, r3
 80197b0:	4629      	mov	r1, r5
 80197b2:	4620      	mov	r0, r4
 80197b4:	f7ff ff00 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d004      	beq.n	80197c8 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80197be:	6878      	ldr	r0, [r7, #4]
 80197c0:	f000 f807 	bl	80197d2 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>
 80197c4:	4603      	mov	r3, r0
 80197c6:	e000      	b.n	80197ca <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE4findERKS1_+0x76>
 80197c8:	68bb      	ldr	r3, [r7, #8]
    }
 80197ca:	4618      	mov	r0, r3
 80197cc:	3710      	adds	r7, #16
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bdb0      	pop	{r4, r5, r7, pc}

080197d2 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80197d2:	b580      	push	{r7, lr}
 80197d4:	b084      	sub	sp, #16
 80197d6:	af00      	add	r7, sp, #0
 80197d8:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	1d1a      	adds	r2, r3, #4
 80197de:	f107 030c 	add.w	r3, r7, #12
 80197e2:	4611      	mov	r1, r2
 80197e4:	4618      	mov	r0, r3
 80197e6:	f001 f816 	bl	801a816 <_ZNSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEC1EPKSt18_Rb_tree_node_base>
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	4618      	mov	r0, r3
 80197ee:	3710      	adds	r7, #16
 80197f0:	46bd      	mov	sp, r7
 80197f2:	bd80      	pop	{r7, pc}

080197f4 <_ZSteqRKSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80197f4:	b480      	push	{r7}
 80197f6:	b083      	sub	sp, #12
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
 80197fc:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	429a      	cmp	r2, r3
 8019808:	bf0c      	ite	eq
 801980a:	2301      	moveq	r3, #1
 801980c:	2300      	movne	r3, #0
 801980e:	b2db      	uxtb	r3, r3
 8019810:	4618      	mov	r0, r3
 8019812:	370c      	adds	r7, #12
 8019814:	46bd      	mov	sp, r7
 8019816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981a:	4770      	bx	lr

0801981c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f001 f805 	bl	801a834 <_ZNSaIP17TIM_HandleTypeDefEC1Ev>
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	4618      	mov	r0, r3
 801982e:	f001 f80d 	bl	801a84c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_Deque_impl_dataC1Ev>
	{ }
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	4618      	mov	r0, r3
 8019836:	3708      	adds	r7, #8
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <_ZNSaIP17TIM_HandleTypeDefED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801983c:	b480      	push	{r7}
 801983e:	b083      	sub	sp, #12
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	4618      	mov	r0, r3
 8019848:	370c      	adds	r7, #12
 801984a:	46bd      	mov	sp, r7
 801984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019850:	4770      	bx	lr

08019852 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8019852:	b590      	push	{r4, r7, lr}
 8019854:	b089      	sub	sp, #36	; 0x24
 8019856:	af00      	add	r7, sp, #0
 8019858:	6078      	str	r0, [r7, #4]
 801985a:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 801985c:	2004      	movs	r0, #4
 801985e:	f7fe ff49 	bl	80186f4 <_ZSt16__deque_buf_sizej>
 8019862:	4602      	mov	r2, r0
 8019864:	683b      	ldr	r3, [r7, #0]
 8019866:	fbb3 f3f2 	udiv	r3, r3, r2
 801986a:	3301      	adds	r3, #1
 801986c:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 801986e:	2308      	movs	r3, #8
 8019870:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8019872:	69fb      	ldr	r3, [r7, #28]
 8019874:	3302      	adds	r3, #2
 8019876:	613b      	str	r3, [r7, #16]
 8019878:	f107 0210 	add.w	r2, r7, #16
 801987c:	f107 030c 	add.w	r3, r7, #12
 8019880:	4611      	mov	r1, r2
 8019882:	4618      	mov	r0, r3
 8019884:	f7f9 f8e2 	bl	8012a4c <_ZSt3maxIjERKT_S2_S2_>
 8019888:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 801988a:	681a      	ldr	r2, [r3, #0]
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	685b      	ldr	r3, [r3, #4]
 8019894:	4619      	mov	r1, r3
 8019896:	6878      	ldr	r0, [r7, #4]
 8019898:	f000 fff1 	bl	801a87e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_allocate_mapEj>
 801989c:	4602      	mov	r2, r0
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	6859      	ldr	r1, [r3, #4]
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	1acb      	subs	r3, r1, r3
 80198ae:	085b      	lsrs	r3, r3, #1
 80198b0:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 80198b2:	4413      	add	r3, r2
 80198b4:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	009b      	lsls	r3, r3, #2
 80198ba:	69ba      	ldr	r2, [r7, #24]
 80198bc:	4413      	add	r3, r2
 80198be:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 80198c0:	697a      	ldr	r2, [r7, #20]
 80198c2:	69b9      	ldr	r1, [r7, #24]
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f000 fff7 	bl	801a8b8 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_create_nodesEPPS1_S5_>
      this->_M_impl._M_start._M_set_node(__nstart);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	3308      	adds	r3, #8
 80198ce:	69b9      	ldr	r1, [r7, #24]
 80198d0:	4618      	mov	r0, r3
 80198d2:	f001 f80b 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	f103 0218 	add.w	r2, r3, #24
 80198dc:	697b      	ldr	r3, [r7, #20]
 80198de:	3b04      	subs	r3, #4
 80198e0:	4619      	mov	r1, r3
 80198e2:	4610      	mov	r0, r2
 80198e4:	f001 f802 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	68da      	ldr	r2, [r3, #12]
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 80198f4:	2004      	movs	r0, #4
 80198f6:	f7fe fefd 	bl	80186f4 <_ZSt16__deque_buf_sizej>
 80198fa:	4602      	mov	r2, r0
 80198fc:	683b      	ldr	r3, [r7, #0]
 80198fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8019902:	fb01 f202 	mul.w	r2, r1, r2
 8019906:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	619a      	str	r2, [r3, #24]
    }
 8019910:	bf00      	nop
 8019912:	3724      	adds	r7, #36	; 0x24
 8019914:	46bd      	mov	sp, r7
 8019916:	bd90      	pop	{r4, r7, pc}

08019918 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_destroy_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 8019918:	b580      	push	{r7, lr}
 801991a:	b086      	sub	sp, #24
 801991c:	af00      	add	r7, sp, #0
 801991e:	60f8      	str	r0, [r7, #12]
 8019920:	60b9      	str	r1, [r7, #8]
 8019922:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8019924:	68bb      	ldr	r3, [r7, #8]
 8019926:	617b      	str	r3, [r7, #20]
 8019928:	697a      	ldr	r2, [r7, #20]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	429a      	cmp	r2, r3
 801992e:	d209      	bcs.n	8019944 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x2c>
	_M_deallocate_node(*__n);
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	4619      	mov	r1, r3
 8019936:	68f8      	ldr	r0, [r7, #12]
 8019938:	f000 fff1 	bl	801a91e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE18_M_deallocate_nodeEPS1_>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 801993c:	697b      	ldr	r3, [r7, #20]
 801993e:	3304      	adds	r3, #4
 8019940:	617b      	str	r3, [r7, #20]
 8019942:	e7f1      	b.n	8019928 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_destroy_nodesEPPS1_S5_+0x10>
    }
 8019944:	bf00      	nop
 8019946:	3718      	adds	r7, #24
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}

0801994c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE17_M_deallocate_mapEPPS1_j>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 801994c:	b580      	push	{r7, lr}
 801994e:	b086      	sub	sp, #24
 8019950:	af00      	add	r7, sp, #0
 8019952:	60f8      	str	r0, [r7, #12]
 8019954:	60b9      	str	r1, [r7, #8]
 8019956:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8019958:	f107 0314 	add.w	r3, r7, #20
 801995c:	68f9      	ldr	r1, [r7, #12]
 801995e:	4618      	mov	r0, r3
 8019960:	f000 fff0 	bl	801a944 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8019964:	f107 0314 	add.w	r3, r7, #20
 8019968:	687a      	ldr	r2, [r7, #4]
 801996a:	68b9      	ldr	r1, [r7, #8]
 801996c:	4618      	mov	r0, r3
 801996e:	f001 f805 	bl	801a97c <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE10deallocateERS3_PS2_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8019972:	f107 0314 	add.w	r3, r7, #20
 8019976:	4618      	mov	r0, r3
 8019978:	f000 fff5 	bl	801a966 <_ZNSaIPP17TIM_HandleTypeDefED1Ev>
      }
 801997c:	bf00      	nop
 801997e:	3718      	adds	r7, #24
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 801998e:	683b      	ldr	r3, [r7, #0]
 8019990:	3308      	adds	r3, #8
 8019992:	4619      	mov	r1, r3
 8019994:	6878      	ldr	r0, [r7, #4]
 8019996:	f001 f810 	bl	801a9ba <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1ERKS4_>
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	3708      	adds	r7, #8
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}

080199a2 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80199a2:	b580      	push	{r7, lr}
 80199a4:	b082      	sub	sp, #8
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
 80199aa:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	3318      	adds	r3, #24
 80199b0:	4619      	mov	r1, r3
 80199b2:	6878      	ldr	r0, [r7, #4]
 80199b4:	f001 f801 	bl	801a9ba <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1ERKS4_>
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	3708      	adds	r7, #8
 80199bc:	46bd      	mov	sp, r7
 80199be:	bd80      	pop	{r7, pc}

080199c0 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80199c0:	b480      	push	{r7}
 80199c2:	b083      	sub	sp, #12
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	4618      	mov	r0, r3
 80199cc:	370c      	adds	r7, #12
 80199ce:	46bd      	mov	sp, r7
 80199d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d4:	4770      	bx	lr

080199d6 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE15_M_destroy_dataESt15_Deque_iteratorIS1_RS1_PS1_ES7_RKS2_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 80199d6:	b480      	push	{r7}
 80199d8:	b08d      	sub	sp, #52	; 0x34
 80199da:	af00      	add	r7, sp, #0
 80199dc:	60f8      	str	r0, [r7, #12]
 80199de:	60b9      	str	r1, [r7, #8]
 80199e0:	607a      	str	r2, [r7, #4]
 80199e2:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 80199e4:	bf00      	nop
 80199e6:	3734      	adds	r7, #52	; 0x34
 80199e8:	46bd      	mov	sp, r7
 80199ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ee:	4770      	bx	lr

080199f0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80199f0:	b480      	push	{r7}
 80199f2:	b083      	sub	sp, #12
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	6078      	str	r0, [r7, #4]
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	4618      	mov	r0, r3
 80199fc:	370c      	adds	r7, #12
 80199fe:	46bd      	mov	sp, r7
 8019a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a04:	4770      	bx	lr

08019a06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019a06:	b480      	push	{r7}
 8019a08:	b083      	sub	sp, #12
 8019a0a:	af00      	add	r7, sp, #0
 8019a0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	68db      	ldr	r3, [r3, #12]
 8019a12:	4618      	mov	r0, r3
 8019a14:	370c      	adds	r7, #12
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr

08019a1e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019a1e:	b480      	push	{r7}
 8019a20:	b083      	sub	sp, #12
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	689b      	ldr	r3, [r3, #8]
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	370c      	adds	r7, #12
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a34:	4770      	bx	lr

08019a36 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019a36:	b580      	push	{r7, lr}
 8019a38:	b082      	sub	sp, #8
 8019a3a:	af00      	add	r7, sp, #0
 8019a3c:	6078      	str	r0, [r7, #4]
 8019a3e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8019a40:	6839      	ldr	r1, [r7, #0]
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	f000 ffd5 	bl	801a9f2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>
	_M_put_node(__p);
 8019a48:	6839      	ldr	r1, [r7, #0]
 8019a4a:	6878      	ldr	r0, [r7, #4]
 8019a4c:	f000 ffe6 	bl	801aa1c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>
      }
 8019a50:	bf00      	nop
 8019a52:	3708      	adds	r7, #8
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEC1Ev>:
 8019a58:	b480      	push	{r7}
 8019a5a:	b083      	sub	sp, #12
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	4618      	mov	r0, r3
 8019a64:	370c      	adds	r7, #12
 8019a66:	46bd      	mov	sp, r7
 8019a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6c:	4770      	bx	lr

08019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019a6e:	b480      	push	{r7}
 8019a70:	b083      	sub	sp, #12
 8019a72:	af00      	add	r7, sp, #0
 8019a74:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	68db      	ldr	r3, [r3, #12]
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	370c      	adds	r7, #12
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a84:	4770      	bx	lr

08019a86 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019a86:	b480      	push	{r7}
 8019a88:	b083      	sub	sp, #12
 8019a8a:	af00      	add	r7, sp, #0
 8019a8c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	689b      	ldr	r3, [r3, #8]
 8019a92:	4618      	mov	r0, r3
 8019a94:	370c      	adds	r7, #12
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr

08019a9e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b082      	sub	sp, #8
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
 8019aa6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8019aa8:	6839      	ldr	r1, [r7, #0]
 8019aaa:	6878      	ldr	r0, [r7, #4]
 8019aac:	f000 ffc8 	bl	801aa40 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8019ab0:	6839      	ldr	r1, [r7, #0]
 8019ab2:	6878      	ldr	r0, [r7, #4]
 8019ab4:	f000 ffd9 	bl	801aa6a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8019ab8:	bf00      	nop
 8019aba:	3708      	adds	r7, #8
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}

08019ac0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEC1Ev>:
 8019ac0:	b480      	push	{r7}
 8019ac2:	b083      	sub	sp, #12
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	4618      	mov	r0, r3
 8019acc:	370c      	adds	r7, #12
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad4:	4770      	bx	lr

08019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019ad6:	b480      	push	{r7}
 8019ad8:	b083      	sub	sp, #12
 8019ada:	af00      	add	r7, sp, #0
 8019adc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	68db      	ldr	r3, [r3, #12]
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	370c      	adds	r7, #12
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aec:	4770      	bx	lr

08019aee <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019aee:	b480      	push	{r7}
 8019af0:	b083      	sub	sp, #12
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	689b      	ldr	r3, [r3, #8]
 8019afa:	4618      	mov	r0, r3
 8019afc:	370c      	adds	r7, #12
 8019afe:	46bd      	mov	sp, r7
 8019b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b04:	4770      	bx	lr

08019b06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019b06:	b580      	push	{r7, lr}
 8019b08:	b082      	sub	sp, #8
 8019b0a:	af00      	add	r7, sp, #0
 8019b0c:	6078      	str	r0, [r7, #4]
 8019b0e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8019b10:	6839      	ldr	r1, [r7, #0]
 8019b12:	6878      	ldr	r0, [r7, #4]
 8019b14:	f000 ffbb 	bl	801aa8e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8019b18:	6839      	ldr	r1, [r7, #0]
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f000 ffcc 	bl	801aab8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8019b20:	bf00      	nop
 8019b22:	3708      	adds	r7, #8
 8019b24:	46bd      	mov	sp, r7
 8019b26:	bd80      	pop	{r7, pc}

08019b28 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename deque<_Tp, _Alloc>::reference
#else
      void
#endif
      deque<_Tp, _Alloc>::
 8019b28:	b5b0      	push	{r4, r5, r7, lr}
 8019b2a:	b082      	sub	sp, #8
 8019b2c:	af00      	add	r7, sp, #0
 8019b2e:	6078      	str	r0, [r7, #4]
 8019b30:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish._M_cur
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	6a1b      	ldr	r3, [r3, #32]
 8019b3a:	3b04      	subs	r3, #4
	if (this->_M_impl._M_finish._M_cur
 8019b3c:	429a      	cmp	r2, r3
 8019b3e:	d011      	beq.n	8019b64 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3c>
	  {
	    _Alloc_traits::construct(this->_M_impl,
 8019b40:	687c      	ldr	r4, [r7, #4]
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	699d      	ldr	r5, [r3, #24]
 8019b46:	6838      	ldr	r0, [r7, #0]
 8019b48:	f000 f8c1 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	461a      	mov	r2, r3
 8019b50:	4629      	mov	r1, r5
 8019b52:	4620      	mov	r0, r4
 8019b54:	f000 ffd7 	bl	801ab06 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish._M_cur;
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	699b      	ldr	r3, [r3, #24]
 8019b5c:	1d1a      	adds	r2, r3, #4
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	619a      	str	r2, [r3, #24]
 8019b62:	e007      	b.n	8019b74 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x4c>
	  }
	else
	  _M_push_back_aux(std::forward<_Args>(__args)...);
 8019b64:	6838      	ldr	r0, [r7, #0]
 8019b66:	f000 f8b2 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	4619      	mov	r1, r3
 8019b6e:	6878      	ldr	r0, [r7, #4]
 8019b70:	f000 ffdc 	bl	801ab2c <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>
#if __cplusplus > 201402L
	return back();
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	f7ff fc40 	bl	80193fa <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE4backEv>
 8019b7a:	4603      	mov	r3, r0
#endif
      }
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3708      	adds	r7, #8
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bdb0      	pop	{r4, r5, r7, pc}

08019b84 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019b84:	b5b0      	push	{r4, r5, r7, lr}
 8019b86:	b08a      	sub	sp, #40	; 0x28
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	60f8      	str	r0, [r7, #12]
 8019b8c:	60b9      	str	r1, [r7, #8]
 8019b8e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8019b90:	68b8      	ldr	r0, [r7, #8]
 8019b92:	f7ff fb20 	bl	80191d6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>
 8019b96:	4603      	mov	r3, r0
 8019b98:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8019b9a:	68b8      	ldr	r0, [r7, #8]
 8019b9c:	f001 f80a 	bl	801abb4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8019ba4:	2301      	movs	r3, #1
 8019ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8019baa:	69bb      	ldr	r3, [r7, #24]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d023      	beq.n	8019bf8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x74>
	  __y = __x;
 8019bb0:	69bb      	ldr	r3, [r7, #24]
 8019bb2:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8019bb4:	68bc      	ldr	r4, [r7, #8]
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	681d      	ldr	r5, [r3, #0]
 8019bba:	69bb      	ldr	r3, [r7, #24]
 8019bbc:	4618      	mov	r0, r3
 8019bbe:	f001 f805 	bl	801abcc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	461a      	mov	r2, r3
 8019bc8:	4629      	mov	r1, r5
 8019bca:	4620      	mov	r0, r4
 8019bcc:	f7ff fcf4 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8019bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d005      	beq.n	8019bea <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x66>
 8019bde:	69bb      	ldr	r3, [r7, #24]
 8019be0:	4618      	mov	r0, r3
 8019be2:	f7ff ff1c 	bl	8019a1e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPSt18_Rb_tree_node_base>
 8019be6:	4603      	mov	r3, r0
 8019be8:	e004      	b.n	8019bf4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x70>
 8019bea:	69bb      	ldr	r3, [r7, #24]
 8019bec:	4618      	mov	r0, r3
 8019bee:	f7ff ff0a 	bl	8019a06 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPSt18_Rb_tree_node_base>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8019bf6:	e7d8      	b.n	8019baa <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x26>
      iterator __j = iterator(__y);
 8019bf8:	697a      	ldr	r2, [r7, #20]
 8019bfa:	f107 0310 	add.w	r3, r7, #16
 8019bfe:	4611      	mov	r1, r2
 8019c00:	4618      	mov	r0, r3
 8019c02:	f000 f8d3 	bl	8019dac <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8019c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d01d      	beq.n	8019c4a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xc6>
	  if (__j == begin())
 8019c0e:	68b8      	ldr	r0, [r7, #8]
 8019c10:	f000 ffef 	bl	801abf2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>
 8019c14:	4603      	mov	r3, r0
 8019c16:	61fb      	str	r3, [r7, #28]
 8019c18:	f107 021c 	add.w	r2, r7, #28
 8019c1c:	f107 0310 	add.w	r3, r7, #16
 8019c20:	4611      	mov	r1, r2
 8019c22:	4618      	mov	r0, r3
 8019c24:	f000 fff6 	bl	801ac14 <_ZSteqRKSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefES4_>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d008      	beq.n	8019c40 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xbc>
	    return _Res(__x, __y);
 8019c2e:	f107 0214 	add.w	r2, r7, #20
 8019c32:	f107 0318 	add.w	r3, r7, #24
 8019c36:	4619      	mov	r1, r3
 8019c38:	68f8      	ldr	r0, [r7, #12]
 8019c3a:	f000 ffff 	bl	801ac3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIP17TIM_HandleTypeDefERS1_Lb1EEEOT_OT0_>
 8019c3e:	e027      	b.n	8019c90 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x10c>
	    --__j;
 8019c40:	f107 0310 	add.w	r3, r7, #16
 8019c44:	4618      	mov	r0, r3
 8019c46:	f001 f812 	bl	801ac6e <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8019c4a:	68bc      	ldr	r4, [r7, #8]
 8019c4c:	693b      	ldr	r3, [r7, #16]
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f000 fdd5 	bl	801a7fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019c54:	4603      	mov	r3, r0
 8019c56:	6819      	ldr	r1, [r3, #0]
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	461a      	mov	r2, r3
 8019c5e:	4620      	mov	r0, r4
 8019c60:	f7ff fcaa 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 8019c64:	4603      	mov	r3, r0
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d008      	beq.n	8019c7c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0xf8>
	return _Res(__x, __y);
 8019c6a:	f107 0214 	add.w	r2, r7, #20
 8019c6e:	f107 0318 	add.w	r3, r7, #24
 8019c72:	4619      	mov	r1, r3
 8019c74:	68f8      	ldr	r0, [r7, #12]
 8019c76:	f000 ffe1 	bl	801ac3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIP17TIM_HandleTypeDefERS1_Lb1EEEOT_OT0_>
 8019c7a:	e009      	b.n	8019c90 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE24_M_get_insert_unique_posERKS1_+0x10c>
      return _Res(__j._M_node, 0);
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	623b      	str	r3, [r7, #32]
 8019c80:	f107 0220 	add.w	r2, r7, #32
 8019c84:	f107 0310 	add.w	r3, r7, #16
 8019c88:	4619      	mov	r1, r3
 8019c8a:	68f8      	ldr	r0, [r7, #12]
 8019c8c:	f7fb f900 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8019c90:	68f8      	ldr	r0, [r7, #12]
 8019c92:	3728      	adds	r7, #40	; 0x28
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bdb0      	pop	{r4, r5, r7, pc}

08019c98 <_ZNKSt9_IdentityIP17TIM_HandleTypeDefEclERS1_>:
      operator()(_Tp& __x) const
 8019c98:	b480      	push	{r7}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
 8019ca0:	6039      	str	r1, [r7, #0]
      { return __x; }
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	370c      	adds	r7, #12
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cae:	4770      	bx	lr

08019cb0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeC1ERS7_>:
	_Alloc_node(_Rb_tree& __t)
 8019cb0:	b480      	push	{r7}
 8019cb2:	b083      	sub	sp, #12
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	683a      	ldr	r2, [r7, #0]
 8019cbe:	601a      	str	r2, [r3, #0]
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	370c      	adds	r7, #12
 8019cc6:	46bd      	mov	sp, r7
 8019cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ccc:	4770      	bx	lr

08019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019cce:	b480      	push	{r7}
 8019cd0:	b083      	sub	sp, #12
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	4618      	mov	r0, r3
 8019cda:	370c      	adds	r7, #12
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce2:	4770      	bx	lr

08019ce4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019ce4:	b5b0      	push	{r4, r5, r7, lr}
 8019ce6:	b088      	sub	sp, #32
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	607a      	str	r2, [r7, #4]
 8019cf0:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019cf2:	68bb      	ldr	r3, [r7, #8]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d11c      	bne.n	8019d32 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_+0x4e>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019cf8:	68f8      	ldr	r0, [r7, #12]
 8019cfa:	f000 ff5b 	bl	801abb4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	4293      	cmp	r3, r2
 8019d04:	d015      	beq.n	8019d32 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_+0x4e>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019d06:	68fc      	ldr	r4, [r7, #12]
 8019d08:	f107 0310 	add.w	r3, r7, #16
 8019d0c:	6839      	ldr	r1, [r7, #0]
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f7ff ffc2 	bl	8019c98 <_ZNKSt9_IdentityIP17TIM_HandleTypeDefEclERS1_>
 8019d14:	4603      	mov	r3, r0
 8019d16:	681d      	ldr	r5, [r3, #0]
							_S_key(__p)));
 8019d18:	6878      	ldr	r0, [r7, #4]
 8019d1a:	f000 fd70 	bl	801a7fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019d1e:	4603      	mov	r3, r0
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	461a      	mov	r2, r3
 8019d24:	4629      	mov	r1, r5
 8019d26:	4620      	mov	r0, r4
 8019d28:	f7ff fc46 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	d001      	beq.n	8019d36 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_+0x52>
 8019d32:	2301      	movs	r3, #1
 8019d34:	e000      	b.n	8019d38 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE10_M_insert_IS1_NS7_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS1_EPSt18_Rb_tree_node_baseSD_OT_RT0_+0x54>
 8019d36:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019d38:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8019d3a:	6838      	ldr	r0, [r7, #0]
 8019d3c:	f7ff ffc7 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8019d40:	4603      	mov	r3, r0
 8019d42:	4619      	mov	r1, r3
 8019d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d46:	f000 ffa3 	bl	801ac90 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIS1_EEPSt13_Rb_tree_nodeIS1_EOT_>
 8019d4a:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8019d50:	7ff8      	ldrb	r0, [r7, #31]
 8019d52:	687a      	ldr	r2, [r7, #4]
 8019d54:	69b9      	ldr	r1, [r7, #24]
 8019d56:	f00c fa10 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	695b      	ldr	r3, [r3, #20]
 8019d5e:	1c5a      	adds	r2, r3, #1
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8019d64:	f107 0314 	add.w	r3, r7, #20
 8019d68:	69b9      	ldr	r1, [r7, #24]
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f000 f81e 	bl	8019dac <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEC1EPSt18_Rb_tree_node_base>
 8019d70:	697b      	ldr	r3, [r7, #20]
      }
 8019d72:	4618      	mov	r0, r3
 8019d74:	3720      	adds	r7, #32
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bdb0      	pop	{r4, r5, r7, pc}

08019d7a <_ZNSt4pairISt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEbEC1IS3_bLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8019d7a:	b580      	push	{r7, lr}
 8019d7c:	b084      	sub	sp, #16
 8019d7e:	af00      	add	r7, sp, #0
 8019d80:	60f8      	str	r0, [r7, #12]
 8019d82:	60b9      	str	r1, [r7, #8]
 8019d84:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8019d86:	68b8      	ldr	r0, [r7, #8]
 8019d88:	f000 ff96 	bl	801acb8 <_ZSt7forwardISt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS4_E4typeE>
 8019d8c:	4602      	mov	r2, r0
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	6812      	ldr	r2, [r2, #0]
 8019d92:	601a      	str	r2, [r3, #0]
 8019d94:	6878      	ldr	r0, [r7, #4]
 8019d96:	f7ff f979 	bl	801908c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	781a      	ldrb	r2, [r3, #0]
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	711a      	strb	r2, [r3, #4]
 8019da2:	68fb      	ldr	r3, [r7, #12]
 8019da4:	4618      	mov	r0, r3
 8019da6:	3710      	adds	r7, #16
 8019da8:	46bd      	mov	sp, r7
 8019daa:	bd80      	pop	{r7, pc}

08019dac <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019dac:	b480      	push	{r7}
 8019dae:	b083      	sub	sp, #12
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
 8019db4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	683a      	ldr	r2, [r7, #0]
 8019dba:	601a      	str	r2, [r3, #0]
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	370c      	adds	r7, #12
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc8:	4770      	bx	lr

08019dca <_ZSt7forwardIRSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019dca:	b480      	push	{r7}
 8019dcc:	b083      	sub	sp, #12
 8019dce:	af00      	add	r7, sp, #0
 8019dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	370c      	adds	r7, #12
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dde:	4770      	bx	lr

08019de0 <_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019de0:	b480      	push	{r7}
 8019de2:	b083      	sub	sp, #12
 8019de4:	af00      	add	r7, sp, #0
 8019de6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	4618      	mov	r0, r3
 8019dec:	370c      	adds	r7, #12
 8019dee:	46bd      	mov	sp, r7
 8019df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df4:	4770      	bx	lr

08019df6 <_ZNSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEC1ERKSt17_Rb_tree_iteratorIS1_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8019df6:	b480      	push	{r7}
 8019df8:	b083      	sub	sp, #12
 8019dfa:	af00      	add	r7, sp, #0
 8019dfc:	6078      	str	r0, [r7, #4]
 8019dfe:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8019e00:	683b      	ldr	r3, [r7, #0]
 8019e02:	681a      	ldr	r2, [r3, #0]
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	601a      	str	r2, [r3, #0]
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	370c      	adds	r7, #12
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e14:	4770      	bx	lr

08019e16 <_ZStmiRKSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_ES6_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8019e16:	b580      	push	{r7, lr}
 8019e18:	b082      	sub	sp, #8
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	6078      	str	r0, [r7, #4]
 8019e1e:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 8019e20:	f000 ff55 	bl	801acce <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E14_S_buffer_sizeEv>
 8019e24:	4603      	mov	r3, r0
 8019e26:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	68da      	ldr	r2, [r3, #12]
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	68db      	ldr	r3, [r3, #12]
 8019e30:	1ad3      	subs	r3, r2, r3
 8019e32:	109b      	asrs	r3, r3, #2
 8019e34:	3b01      	subs	r3, #1
 8019e36:	fb01 f303 	mul.w	r3, r1, r3
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	6811      	ldr	r1, [r2, #0]
 8019e3e:	687a      	ldr	r2, [r7, #4]
 8019e40:	6852      	ldr	r2, [r2, #4]
 8019e42:	1a8a      	subs	r2, r1, r2
 8019e44:	1092      	asrs	r2, r2, #2
 8019e46:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8019e48:	683a      	ldr	r2, [r7, #0]
 8019e4a:	6891      	ldr	r1, [r2, #8]
 8019e4c:	683a      	ldr	r2, [r7, #0]
 8019e4e:	6812      	ldr	r2, [r2, #0]
 8019e50:	1a8a      	subs	r2, r1, r2
 8019e52:	1092      	asrs	r2, r2, #2
 8019e54:	4413      	add	r3, r2
      }
 8019e56:	4618      	mov	r0, r3
 8019e58:	3708      	adds	r7, #8
 8019e5a:	46bd      	mov	sp, r7
 8019e5c:	bd80      	pop	{r7, pc}

08019e5e <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8019e5e:	b580      	push	{r7, lr}
 8019e60:	b082      	sub	sp, #8
 8019e62:	af00      	add	r7, sp, #0
 8019e64:	6078      	str	r0, [r7, #4]
	if (_M_cur == _M_first)
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	681a      	ldr	r2, [r3, #0]
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	429a      	cmp	r2, r3
 8019e70:	d10a      	bne.n	8019e88 <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EmmEv+0x2a>
	    _M_set_node(_M_node - 1);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	68db      	ldr	r3, [r3, #12]
 8019e76:	3b04      	subs	r3, #4
 8019e78:	4619      	mov	r1, r3
 8019e7a:	6878      	ldr	r0, [r7, #4]
 8019e7c:	f000 fd36 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
	    _M_cur = _M_last;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	689a      	ldr	r2, [r3, #8]
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	601a      	str	r2, [r3, #0]
	--_M_cur;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	1f1a      	subs	r2, r3, #4
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	601a      	str	r2, [r3, #0]
	return *this;
 8019e92:	687b      	ldr	r3, [r7, #4]
      }
 8019e94:	4618      	mov	r0, r3
 8019e96:	3708      	adds	r7, #8
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <_ZNKSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8019e9c:	b480      	push	{r7}
 8019e9e:	b083      	sub	sp, #12
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	370c      	adds	r7, #12
 8019eac:	46bd      	mov	sp, r7
 8019eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb2:	4770      	bx	lr

08019eb4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8019eb4:	b590      	push	{r4, r7, lr}
 8019eb6:	b083      	sub	sp, #12
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
 8019ebc:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8019ebe:	6878      	ldr	r0, [r7, #4]
 8019ec0:	f7ff f9c0 	bl	8019244 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8019ec4:	4604      	mov	r4, r0
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f000 ff13 	bl	801acf2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8019ecc:	4602      	mov	r2, r0
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	4621      	mov	r1, r4
 8019ed2:	6878      	ldr	r0, [r7, #4]
 8019ed4:	f000 ff19 	bl	801ad0a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8019ed8:	4603      	mov	r3, r0
 8019eda:	4618      	mov	r0, r3
 8019edc:	370c      	adds	r7, #12
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd90      	pop	{r4, r7, pc}

08019ee2 <_ZNKSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 8019ee2:	b480      	push	{r7}
 8019ee4:	b083      	sub	sp, #12
 8019ee6:	af00      	add	r7, sp, #0
 8019ee8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8019eea:	bf00      	nop
 8019eec:	4618      	mov	r0, r3
 8019eee:	370c      	adds	r7, #12
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef6:	4770      	bx	lr

08019ef8 <_ZNSt5tupleIJOhEEC1IJhELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8019ef8:	b590      	push	{r4, r7, lr}
 8019efa:	b083      	sub	sp, #12
 8019efc:	af00      	add	r7, sp, #0
 8019efe:	6078      	str	r0, [r7, #4]
 8019f00:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8019f02:	687c      	ldr	r4, [r7, #4]
 8019f04:	6838      	ldr	r0, [r7, #0]
 8019f06:	f7f9 fce5 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	4619      	mov	r1, r3
 8019f0e:	4620      	mov	r0, r4
 8019f10:	f000 ff2c 	bl	801ad6c <_ZNSt11_Tuple_implILj0EJOhEEC1IhEEOT_>
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	4618      	mov	r0, r3
 8019f18:	370c      	adds	r7, #12
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd90      	pop	{r4, r7, pc}

08019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019f1e:	b480      	push	{r7}
 8019f20:	b083      	sub	sp, #12
 8019f22:	af00      	add	r7, sp, #0
 8019f24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	4618      	mov	r0, r3
 8019f2a:	370c      	adds	r7, #12
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f32:	4770      	bx	lr

08019f34 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8019f34:	b5b0      	push	{r4, r5, r7, lr}
 8019f36:	b088      	sub	sp, #32
 8019f38:	af02      	add	r7, sp, #8
 8019f3a:	60f8      	str	r0, [r7, #12]
 8019f3c:	60b9      	str	r1, [r7, #8]
 8019f3e:	607a      	str	r2, [r7, #4]
 8019f40:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8019f42:	68f8      	ldr	r0, [r7, #12]
 8019f44:	f000 ff25 	bl	801ad92 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 8019f48:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8019f4a:	68b8      	ldr	r0, [r7, #8]
 8019f4c:	f7f9 ffc3 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f50:	4604      	mov	r4, r0
 8019f52:	6878      	ldr	r0, [r7, #4]
 8019f54:	f7ff ffe3 	bl	8019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8019f58:	4605      	mov	r5, r0
 8019f5a:	6838      	ldr	r0, [r7, #0]
 8019f5c:	f7f9 ffd1 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8019f60:	4603      	mov	r3, r0
 8019f62:	9300      	str	r3, [sp, #0]
 8019f64:	462b      	mov	r3, r5
 8019f66:	4622      	mov	r2, r4
 8019f68:	6979      	ldr	r1, [r7, #20]
 8019f6a:	68f8      	ldr	r0, [r7, #12]
 8019f6c:	f000 ff22 	bl	801adb4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8019f70:	697b      	ldr	r3, [r7, #20]
	}
 8019f72:	4618      	mov	r0, r3
 8019f74:	3718      	adds	r7, #24
 8019f76:	46bd      	mov	sp, r7
 8019f78:	bdb0      	pop	{r4, r5, r7, pc}

08019f7a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019f7a:	b590      	push	{r4, r7, lr}
 8019f7c:	b08d      	sub	sp, #52	; 0x34
 8019f7e:	af00      	add	r7, sp, #0
 8019f80:	60f8      	str	r0, [r7, #12]
 8019f82:	60b9      	str	r1, [r7, #8]
 8019f84:	607a      	str	r2, [r7, #4]
 8019f86:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8019f88:	1d3b      	adds	r3, r7, #4
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	f000 ff3f 	bl	801ae0e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN4Time5AlarmEEE13_M_const_castEv>
 8019f90:	4603      	mov	r3, r0
 8019f92:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8019f94:	69bc      	ldr	r4, [r7, #24]
 8019f96:	68b8      	ldr	r0, [r7, #8]
 8019f98:	f000 feab 	bl	801acf2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8019f9c:	4603      	mov	r3, r0
 8019f9e:	429c      	cmp	r4, r3
 8019fa0:	bf0c      	ite	eq
 8019fa2:	2301      	moveq	r3, #1
 8019fa4:	2300      	movne	r3, #0
 8019fa6:	b2db      	uxtb	r3, r3
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d030      	beq.n	801a00e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8019fac:	68b8      	ldr	r0, [r7, #8]
 8019fae:	f000 fb80 	bl	801a6b2 <_ZNKSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 8019fb2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d013      	beq.n	8019fe0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8019fb8:	68bc      	ldr	r4, [r7, #8]
 8019fba:	68b8      	ldr	r0, [r7, #8]
 8019fbc:	f000 ff38 	bl	801ae30 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8019fc0:	4603      	mov	r3, r0
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f000 fb68 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	683a      	ldr	r2, [r7, #0]
 8019fce:	4619      	mov	r1, r3
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f7f9 fa91 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d001      	beq.n	8019fe0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8019fdc:	2301      	movs	r3, #1
 8019fde:	e000      	b.n	8019fe2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8019fe0:	2300      	movs	r3, #0
	  if (size() > 0
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d00c      	beq.n	801a000 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	61fb      	str	r3, [r7, #28]
 8019fea:	68b8      	ldr	r0, [r7, #8]
 8019fec:	f000 ff20 	bl	801ae30 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8019ff0:	4602      	mov	r2, r0
 8019ff2:	f107 031c 	add.w	r3, r7, #28
 8019ff6:	4619      	mov	r1, r3
 8019ff8:	68f8      	ldr	r0, [r7, #12]
 8019ffa:	f7fa fe67 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019ffe:	e0db      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	683a      	ldr	r2, [r7, #0]
 801a004:	68b9      	ldr	r1, [r7, #8]
 801a006:	4618      	mov	r0, r3
 801a008:	f000 ff1e 	bl	801ae48 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801a00c:	e0d4      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801a00e:	68bc      	ldr	r4, [r7, #8]
 801a010:	69bb      	ldr	r3, [r7, #24]
 801a012:	4618      	mov	r0, r3
 801a014:	f000 fb41 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a018:	4603      	mov	r3, r0
 801a01a:	461a      	mov	r2, r3
 801a01c:	6839      	ldr	r1, [r7, #0]
 801a01e:	4620      	mov	r0, r4
 801a020:	f7f9 fa6a 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801a024:	4603      	mov	r3, r0
 801a026:	2b00      	cmp	r3, #0
 801a028:	d057      	beq.n	801a0da <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 801a02a:	69bb      	ldr	r3, [r7, #24]
 801a02c:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801a02e:	69bc      	ldr	r4, [r7, #24]
 801a030:	68b8      	ldr	r0, [r7, #8]
 801a032:	f000 ff8e 	bl	801af52 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801a036:	4603      	mov	r3, r0
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	429c      	cmp	r4, r3
 801a03c:	bf0c      	ite	eq
 801a03e:	2301      	moveq	r3, #1
 801a040:	2300      	movne	r3, #0
 801a042:	b2db      	uxtb	r3, r3
 801a044:	2b00      	cmp	r3, #0
 801a046:	d00d      	beq.n	801a064 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801a048:	68b8      	ldr	r0, [r7, #8]
 801a04a:	f000 ff82 	bl	801af52 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801a04e:	4604      	mov	r4, r0
 801a050:	68b8      	ldr	r0, [r7, #8]
 801a052:	f000 ff7e 	bl	801af52 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 801a056:	4603      	mov	r3, r0
 801a058:	461a      	mov	r2, r3
 801a05a:	4621      	mov	r1, r4
 801a05c:	68f8      	ldr	r0, [r7, #12]
 801a05e:	f7fa fedc 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a062:	e0a9      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801a064:	68bc      	ldr	r4, [r7, #8]
 801a066:	f107 0314 	add.w	r3, r7, #20
 801a06a:	4618      	mov	r0, r3
 801a06c:	f000 ff7d 	bl	801af6a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEmmEv>
 801a070:	4603      	mov	r3, r0
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	4618      	mov	r0, r3
 801a076:	f000 fb10 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a07a:	4603      	mov	r3, r0
 801a07c:	683a      	ldr	r2, [r7, #0]
 801a07e:	4619      	mov	r1, r3
 801a080:	4620      	mov	r0, r4
 801a082:	f7f9 fa39 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801a086:	4603      	mov	r3, r0
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d01f      	beq.n	801a0cc <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	4618      	mov	r0, r3
 801a090:	f7ff fced 	bl	8019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801a094:	4603      	mov	r3, r0
 801a096:	2b00      	cmp	r3, #0
 801a098:	bf0c      	ite	eq
 801a09a:	2301      	moveq	r3, #1
 801a09c:	2300      	movne	r3, #0
 801a09e:	b2db      	uxtb	r3, r3
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d00a      	beq.n	801a0ba <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	623b      	str	r3, [r7, #32]
 801a0a8:	f107 0214 	add.w	r2, r7, #20
 801a0ac:	f107 0320 	add.w	r3, r7, #32
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	68f8      	ldr	r0, [r7, #12]
 801a0b4:	f7fa fe0a 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a0b8:	e07e      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801a0ba:	f107 0218 	add.w	r2, r7, #24
 801a0be:	f107 0318 	add.w	r3, r7, #24
 801a0c2:	4619      	mov	r1, r3
 801a0c4:	68f8      	ldr	r0, [r7, #12]
 801a0c6:	f7fa fea8 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a0ca:	e075      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	683a      	ldr	r2, [r7, #0]
 801a0d0:	68b9      	ldr	r1, [r7, #8]
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f000 feb8 	bl	801ae48 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801a0d8:	e06e      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801a0da:	68bc      	ldr	r4, [r7, #8]
 801a0dc:	69bb      	ldr	r3, [r7, #24]
 801a0de:	4618      	mov	r0, r3
 801a0e0:	f000 fadb 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	683a      	ldr	r2, [r7, #0]
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	f7f9 fa04 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d056      	beq.n	801a1a4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 801a0f6:	69bb      	ldr	r3, [r7, #24]
 801a0f8:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801a0fa:	69bc      	ldr	r4, [r7, #24]
 801a0fc:	68b8      	ldr	r0, [r7, #8]
 801a0fe:	f000 fe97 	bl	801ae30 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801a102:	4603      	mov	r3, r0
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	429c      	cmp	r4, r3
 801a108:	bf0c      	ite	eq
 801a10a:	2301      	moveq	r3, #1
 801a10c:	2300      	movne	r3, #0
 801a10e:	b2db      	uxtb	r3, r3
 801a110:	2b00      	cmp	r3, #0
 801a112:	d00c      	beq.n	801a12e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801a114:	2300      	movs	r3, #0
 801a116:	627b      	str	r3, [r7, #36]	; 0x24
 801a118:	68b8      	ldr	r0, [r7, #8]
 801a11a:	f000 fe89 	bl	801ae30 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 801a11e:	4602      	mov	r2, r0
 801a120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a124:	4619      	mov	r1, r3
 801a126:	68f8      	ldr	r0, [r7, #12]
 801a128:	f7fa fdd0 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a12c:	e044      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801a12e:	68bc      	ldr	r4, [r7, #8]
 801a130:	f107 0310 	add.w	r3, r7, #16
 801a134:	4618      	mov	r0, r3
 801a136:	f7fe ff68 	bl	801900a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEppEv>
 801a13a:	4603      	mov	r3, r0
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	4618      	mov	r0, r3
 801a140:	f000 faab 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a144:	4603      	mov	r3, r0
 801a146:	461a      	mov	r2, r3
 801a148:	6839      	ldr	r1, [r7, #0]
 801a14a:	4620      	mov	r0, r4
 801a14c:	f7f9 f9d4 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801a150:	4603      	mov	r3, r0
 801a152:	2b00      	cmp	r3, #0
 801a154:	d01f      	beq.n	801a196 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801a156:	69bb      	ldr	r3, [r7, #24]
 801a158:	4618      	mov	r0, r3
 801a15a:	f7ff fc88 	bl	8019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801a15e:	4603      	mov	r3, r0
 801a160:	2b00      	cmp	r3, #0
 801a162:	bf0c      	ite	eq
 801a164:	2301      	moveq	r3, #1
 801a166:	2300      	movne	r3, #0
 801a168:	b2db      	uxtb	r3, r3
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d00a      	beq.n	801a184 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801a16e:	2300      	movs	r3, #0
 801a170:	62bb      	str	r3, [r7, #40]	; 0x28
 801a172:	f107 0218 	add.w	r2, r7, #24
 801a176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a17a:	4619      	mov	r1, r3
 801a17c:	68f8      	ldr	r0, [r7, #12]
 801a17e:	f7fa fda5 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a182:	e019      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801a184:	f107 0210 	add.w	r2, r7, #16
 801a188:	f107 0310 	add.w	r3, r7, #16
 801a18c:	4619      	mov	r1, r3
 801a18e:	68f8      	ldr	r0, [r7, #12]
 801a190:	f7fa fe43 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a194:	e010      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	683a      	ldr	r2, [r7, #0]
 801a19a:	68b9      	ldr	r1, [r7, #8]
 801a19c:	4618      	mov	r0, r3
 801a19e:	f000 fe53 	bl	801ae48 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 801a1a2:	e009      	b.n	801a1b8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a1a8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a1ac:	f107 0318 	add.w	r3, r7, #24
 801a1b0:	4619      	mov	r1, r3
 801a1b2:	68f8      	ldr	r0, [r7, #12]
 801a1b4:	f7fa fe6c 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801a1b8:	68f8      	ldr	r0, [r7, #12]
 801a1ba:	3734      	adds	r7, #52	; 0x34
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bd90      	pop	{r4, r7, pc}

0801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b084      	sub	sp, #16
 801a1c4:	af00      	add	r7, sp, #0
 801a1c6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801a1c8:	6878      	ldr	r0, [r7, #4]
 801a1ca:	f000 fedf 	bl	801af8c <_ZNKSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>
 801a1ce:	4602      	mov	r2, r0
 801a1d0:	f107 030c 	add.w	r3, r7, #12
 801a1d4:	4611      	mov	r1, r2
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f000 fee6 	bl	801afa8 <_ZNKSt10_Select1stISt4pairIKhN4Time5AlarmEEEclERKS4_>
 801a1dc:	4603      	mov	r3, r0
      }
 801a1de:	4618      	mov	r0, r3
 801a1e0:	3710      	adds	r7, #16
 801a1e2:	46bd      	mov	sp, r7
 801a1e4:	bd80      	pop	{r7, pc}

0801a1e6 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801a1e6:	b5b0      	push	{r4, r5, r7, lr}
 801a1e8:	b086      	sub	sp, #24
 801a1ea:	af00      	add	r7, sp, #0
 801a1ec:	60f8      	str	r0, [r7, #12]
 801a1ee:	60b9      	str	r1, [r7, #8]
 801a1f0:	607a      	str	r2, [r7, #4]
 801a1f2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d117      	bne.n	801a22a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801a1fa:	68f8      	ldr	r0, [r7, #12]
 801a1fc:	f000 fd79 	bl	801acf2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801a200:	4602      	mov	r2, r0
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	4293      	cmp	r3, r2
 801a206:	d010      	beq.n	801a22a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801a208:	68fc      	ldr	r4, [r7, #12]
 801a20a:	6838      	ldr	r0, [r7, #0]
 801a20c:	f7ff ffd8 	bl	801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801a210:	4605      	mov	r5, r0
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	f000 fa41 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a218:	4603      	mov	r3, r0
 801a21a:	461a      	mov	r2, r3
 801a21c:	4629      	mov	r1, r5
 801a21e:	4620      	mov	r0, r4
 801a220:	f7f9 f96a 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801a224:	4603      	mov	r3, r0
 801a226:	2b00      	cmp	r3, #0
 801a228:	d001      	beq.n	801a22e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 801a22a:	2301      	movs	r3, #1
 801a22c:	e000      	b.n	801a230 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 801a22e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801a230:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801a236:	7df8      	ldrb	r0, [r7, #23]
 801a238:	687a      	ldr	r2, [r7, #4]
 801a23a:	6839      	ldr	r1, [r7, #0]
 801a23c:	f00b ff9d 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	695b      	ldr	r3, [r3, #20]
 801a244:	1c5a      	adds	r2, r3, #1
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801a24a:	f107 0310 	add.w	r3, r7, #16
 801a24e:	6839      	ldr	r1, [r7, #0]
 801a250:	4618      	mov	r0, r3
 801a252:	f000 f805 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801a256:	693b      	ldr	r3, [r7, #16]
    }
 801a258:	4618      	mov	r0, r3
 801a25a:	3718      	adds	r7, #24
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bdb0      	pop	{r4, r5, r7, pc}

0801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801a260:	b480      	push	{r7}
 801a262:	b083      	sub	sp, #12
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
 801a268:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	683a      	ldr	r2, [r7, #0]
 801a26e:	601a      	str	r2, [r3, #0]
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	4618      	mov	r0, r3
 801a274:	370c      	adds	r7, #12
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr

0801a27e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 801a27e:	b590      	push	{r4, r7, lr}
 801a280:	b083      	sub	sp, #12
 801a282:	af00      	add	r7, sp, #0
 801a284:	6078      	str	r0, [r7, #4]
 801a286:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f7ff f812 	bl	80192b2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 801a28e:	4604      	mov	r4, r0
 801a290:	6878      	ldr	r0, [r7, #4]
 801a292:	f000 fe95 	bl	801afc0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 801a296:	4602      	mov	r2, r0
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	4621      	mov	r1, r4
 801a29c:	6878      	ldr	r0, [r7, #4]
 801a29e:	f000 fe9b 	bl	801afd8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	370c      	adds	r7, #12
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd90      	pop	{r4, r7, pc}

0801a2ac <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b084      	sub	sp, #16
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	1d1a      	adds	r2, r3, #4
 801a2b8:	f107 030c 	add.w	r3, r7, #12
 801a2bc:	4611      	mov	r1, r2
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f000 f9dc 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3710      	adds	r7, #16
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}

0801a2ce <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 801a2ce:	b480      	push	{r7}
 801a2d0:	b083      	sub	sp, #12
 801a2d2:	af00      	add	r7, sp, #0
 801a2d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801a2d6:	bf00      	nop
 801a2d8:	4618      	mov	r0, r3
 801a2da:	370c      	adds	r7, #12
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2e2:	4770      	bx	lr

0801a2e4 <_ZNSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>:
      _M_valptr()
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b082      	sub	sp, #8
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	3310      	adds	r3, #16
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f000 fea4 	bl	801b03e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE6_M_ptrEv>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	3708      	adds	r7, #8
 801a2fc:	46bd      	mov	sp, r7
 801a2fe:	bd80      	pop	{r7, pc}

0801a300 <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 801a300:	b580      	push	{r7, lr}
 801a302:	b082      	sub	sp, #8
 801a304:	af00      	add	r7, sp, #0
 801a306:	6078      	str	r0, [r7, #4]
 801a308:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	6839      	ldr	r1, [r7, #0]
 801a30e:	4618      	mov	r0, r3
 801a310:	f000 fea1 	bl	801b056 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	4618      	mov	r0, r3
 801a318:	3708      	adds	r7, #8
 801a31a:	46bd      	mov	sp, r7
 801a31c:	bd80      	pop	{r7, pc}

0801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801a31e:	b480      	push	{r7}
 801a320:	b083      	sub	sp, #12
 801a322:	af00      	add	r7, sp, #0
 801a324:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	4618      	mov	r0, r3
 801a32a:	370c      	adds	r7, #12
 801a32c:	46bd      	mov	sp, r7
 801a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a332:	4770      	bx	lr

0801a334 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801a334:	b5b0      	push	{r4, r5, r7, lr}
 801a336:	b088      	sub	sp, #32
 801a338:	af02      	add	r7, sp, #8
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	60b9      	str	r1, [r7, #8]
 801a33e:	607a      	str	r2, [r7, #4]
 801a340:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801a342:	68f8      	ldr	r0, [r7, #12]
 801a344:	f000 fe96 	bl	801b074 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 801a348:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801a34a:	68b8      	ldr	r0, [r7, #8]
 801a34c:	f7f9 fdc3 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801a350:	4604      	mov	r4, r0
 801a352:	6878      	ldr	r0, [r7, #4]
 801a354:	f7ff ffe3 	bl	801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801a358:	4605      	mov	r5, r0
 801a35a:	6838      	ldr	r0, [r7, #0]
 801a35c:	f7f9 fdd1 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801a360:	4603      	mov	r3, r0
 801a362:	9300      	str	r3, [sp, #0]
 801a364:	462b      	mov	r3, r5
 801a366:	4622      	mov	r2, r4
 801a368:	6979      	ldr	r1, [r7, #20]
 801a36a:	68f8      	ldr	r0, [r7, #12]
 801a36c:	f000 fe93 	bl	801b096 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 801a370:	697b      	ldr	r3, [r7, #20]
	}
 801a372:	4618      	mov	r0, r3
 801a374:	3718      	adds	r7, #24
 801a376:	46bd      	mov	sp, r7
 801a378:	bdb0      	pop	{r4, r5, r7, pc}

0801a37a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801a37a:	b5b0      	push	{r4, r5, r7, lr}
 801a37c:	b08c      	sub	sp, #48	; 0x30
 801a37e:	af00      	add	r7, sp, #0
 801a380:	60f8      	str	r0, [r7, #12]
 801a382:	60b9      	str	r1, [r7, #8]
 801a384:	607a      	str	r2, [r7, #4]
 801a386:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801a388:	1d3b      	adds	r3, r7, #4
 801a38a:	4618      	mov	r0, r3
 801a38c:	f000 feb0 	bl	801b0f0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE13_M_const_castEv>
 801a390:	4603      	mov	r3, r0
 801a392:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801a394:	69bc      	ldr	r4, [r7, #24]
 801a396:	68b8      	ldr	r0, [r7, #8]
 801a398:	f000 fe12 	bl	801afc0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 801a39c:	4603      	mov	r3, r0
 801a39e:	429c      	cmp	r4, r3
 801a3a0:	bf0c      	ite	eq
 801a3a2:	2301      	moveq	r3, #1
 801a3a4:	2300      	movne	r3, #0
 801a3a6:	b2db      	uxtb	r3, r3
 801a3a8:	2b00      	cmp	r3, #0
 801a3aa:	d032      	beq.n	801a412 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 801a3ac:	68b8      	ldr	r0, [r7, #8]
 801a3ae:	f000 f98c 	bl	801a6ca <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 801a3b2:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d015      	beq.n	801a3e4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 801a3b8:	68bc      	ldr	r4, [r7, #8]
 801a3ba:	68b8      	ldr	r0, [r7, #8]
 801a3bc:	f000 fea9 	bl	801b112 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	f000 feb0 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a3ca:	4603      	mov	r3, r0
 801a3cc:	6819      	ldr	r1, [r3, #0]
 801a3ce:	683b      	ldr	r3, [r7, #0]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	461a      	mov	r2, r3
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	f7ff f8ef 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d001      	beq.n	801a3e4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 801a3e0:	2301      	movs	r3, #1
 801a3e2:	e000      	b.n	801a3e6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 801a3e4:	2300      	movs	r3, #0
	  if (size() > 0
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d00c      	beq.n	801a404 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	61fb      	str	r3, [r7, #28]
 801a3ee:	68b8      	ldr	r0, [r7, #8]
 801a3f0:	f000 fe8f 	bl	801b112 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	f107 031c 	add.w	r3, r7, #28
 801a3fa:	4619      	mov	r1, r3
 801a3fc:	68f8      	ldr	r0, [r7, #12]
 801a3fe:	f7fa fc65 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a402:	e0e5      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	683a      	ldr	r2, [r7, #0]
 801a408:	68b9      	ldr	r1, [r7, #8]
 801a40a:	4618      	mov	r0, r3
 801a40c:	f000 fe99 	bl	801b142 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 801a410:	e0de      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801a412:	68bc      	ldr	r4, [r7, #8]
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	681d      	ldr	r5, [r3, #0]
 801a418:	69bb      	ldr	r3, [r7, #24]
 801a41a:	4618      	mov	r0, r3
 801a41c:	f000 fe85 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a420:	4603      	mov	r3, r0
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	461a      	mov	r2, r3
 801a426:	4629      	mov	r1, r5
 801a428:	4620      	mov	r0, r4
 801a42a:	f7ff f8c5 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a42e:	4603      	mov	r3, r0
 801a430:	2b00      	cmp	r3, #0
 801a432:	d059      	beq.n	801a4e8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 801a434:	69bb      	ldr	r3, [r7, #24]
 801a436:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801a438:	69bc      	ldr	r4, [r7, #24]
 801a43a:	68b8      	ldr	r0, [r7, #8]
 801a43c:	f000 ff0b 	bl	801b256 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 801a440:	4603      	mov	r3, r0
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	429c      	cmp	r4, r3
 801a446:	bf0c      	ite	eq
 801a448:	2301      	moveq	r3, #1
 801a44a:	2300      	movne	r3, #0
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d00d      	beq.n	801a46e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 801a452:	68b8      	ldr	r0, [r7, #8]
 801a454:	f000 feff 	bl	801b256 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 801a458:	4604      	mov	r4, r0
 801a45a:	68b8      	ldr	r0, [r7, #8]
 801a45c:	f000 fefb 	bl	801b256 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 801a460:	4603      	mov	r3, r0
 801a462:	461a      	mov	r2, r3
 801a464:	4621      	mov	r1, r4
 801a466:	68f8      	ldr	r0, [r7, #12]
 801a468:	f7fa fcd7 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a46c:	e0b0      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801a46e:	68bc      	ldr	r4, [r7, #8]
 801a470:	f107 0314 	add.w	r3, r7, #20
 801a474:	4618      	mov	r0, r3
 801a476:	f000 fefa 	bl	801b26e <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEmmEv>
 801a47a:	4603      	mov	r3, r0
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4618      	mov	r0, r3
 801a480:	f000 fe53 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a484:	4603      	mov	r3, r0
 801a486:	6819      	ldr	r1, [r3, #0]
 801a488:	683b      	ldr	r3, [r7, #0]
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	461a      	mov	r2, r3
 801a48e:	4620      	mov	r0, r4
 801a490:	f7ff f892 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a494:	4603      	mov	r3, r0
 801a496:	2b00      	cmp	r3, #0
 801a498:	d01f      	beq.n	801a4da <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 801a49a:	697b      	ldr	r3, [r7, #20]
 801a49c:	4618      	mov	r0, r3
 801a49e:	f7ff fb1a 	bl	8019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801a4a2:	4603      	mov	r3, r0
 801a4a4:	2b00      	cmp	r3, #0
 801a4a6:	bf0c      	ite	eq
 801a4a8:	2301      	moveq	r3, #1
 801a4aa:	2300      	movne	r3, #0
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d00a      	beq.n	801a4c8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	623b      	str	r3, [r7, #32]
 801a4b6:	f107 0214 	add.w	r2, r7, #20
 801a4ba:	f107 0320 	add.w	r3, r7, #32
 801a4be:	4619      	mov	r1, r3
 801a4c0:	68f8      	ldr	r0, [r7, #12]
 801a4c2:	f7fa fc03 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a4c6:	e083      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 801a4c8:	f107 0218 	add.w	r2, r7, #24
 801a4cc:	f107 0318 	add.w	r3, r7, #24
 801a4d0:	4619      	mov	r1, r3
 801a4d2:	68f8      	ldr	r0, [r7, #12]
 801a4d4:	f7fa fca1 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a4d8:	e07a      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	683a      	ldr	r2, [r7, #0]
 801a4de:	68b9      	ldr	r1, [r7, #8]
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f000 fe2e 	bl	801b142 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 801a4e6:	e073      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801a4e8:	68bc      	ldr	r4, [r7, #8]
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f000 fe1c 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	6819      	ldr	r1, [r3, #0]
 801a4f6:	683b      	ldr	r3, [r7, #0]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	461a      	mov	r2, r3
 801a4fc:	4620      	mov	r0, r4
 801a4fe:	f7ff f85b 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a502:	4603      	mov	r3, r0
 801a504:	2b00      	cmp	r3, #0
 801a506:	d059      	beq.n	801a5bc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 801a508:	69bb      	ldr	r3, [r7, #24]
 801a50a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801a50c:	69bc      	ldr	r4, [r7, #24]
 801a50e:	68b8      	ldr	r0, [r7, #8]
 801a510:	f000 fdff 	bl	801b112 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 801a514:	4603      	mov	r3, r0
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	429c      	cmp	r4, r3
 801a51a:	bf0c      	ite	eq
 801a51c:	2301      	moveq	r3, #1
 801a51e:	2300      	movne	r3, #0
 801a520:	b2db      	uxtb	r3, r3
 801a522:	2b00      	cmp	r3, #0
 801a524:	d00c      	beq.n	801a540 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 801a526:	2300      	movs	r3, #0
 801a528:	627b      	str	r3, [r7, #36]	; 0x24
 801a52a:	68b8      	ldr	r0, [r7, #8]
 801a52c:	f000 fdf1 	bl	801b112 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 801a530:	4602      	mov	r2, r0
 801a532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a536:	4619      	mov	r1, r3
 801a538:	68f8      	ldr	r0, [r7, #12]
 801a53a:	f7fa fbc7 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a53e:	e047      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801a540:	68bc      	ldr	r4, [r7, #8]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	681d      	ldr	r5, [r3, #0]
 801a546:	f107 0310 	add.w	r3, r7, #16
 801a54a:	4618      	mov	r0, r3
 801a54c:	f000 fea0 	bl	801b290 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEppEv>
 801a550:	4603      	mov	r3, r0
 801a552:	681b      	ldr	r3, [r3, #0]
 801a554:	4618      	mov	r0, r3
 801a556:	f000 fde8 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a55a:	4603      	mov	r3, r0
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	461a      	mov	r2, r3
 801a560:	4629      	mov	r1, r5
 801a562:	4620      	mov	r0, r4
 801a564:	f7ff f828 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a568:	4603      	mov	r3, r0
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d01f      	beq.n	801a5ae <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 801a56e:	69bb      	ldr	r3, [r7, #24]
 801a570:	4618      	mov	r0, r3
 801a572:	f7ff fab0 	bl	8019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801a576:	4603      	mov	r3, r0
 801a578:	2b00      	cmp	r3, #0
 801a57a:	bf0c      	ite	eq
 801a57c:	2301      	moveq	r3, #1
 801a57e:	2300      	movne	r3, #0
 801a580:	b2db      	uxtb	r3, r3
 801a582:	2b00      	cmp	r3, #0
 801a584:	d00a      	beq.n	801a59c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 801a586:	2300      	movs	r3, #0
 801a588:	62bb      	str	r3, [r7, #40]	; 0x28
 801a58a:	f107 0218 	add.w	r2, r7, #24
 801a58e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a592:	4619      	mov	r1, r3
 801a594:	68f8      	ldr	r0, [r7, #12]
 801a596:	f7fa fb99 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801a59a:	e019      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 801a59c:	f107 0210 	add.w	r2, r7, #16
 801a5a0:	f107 0310 	add.w	r3, r7, #16
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	68f8      	ldr	r0, [r7, #12]
 801a5a8:	f7fa fc37 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801a5ac:	e010      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	683a      	ldr	r2, [r7, #0]
 801a5b2:	68b9      	ldr	r1, [r7, #8]
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	f000 fdc4 	bl	801b142 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 801a5ba:	e009      	b.n	801a5d0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 801a5bc:	2300      	movs	r3, #0
 801a5be:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a5c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801a5c4:	f107 0318 	add.w	r3, r7, #24
 801a5c8:	4619      	mov	r1, r3
 801a5ca:	68f8      	ldr	r0, [r7, #12]
 801a5cc:	f7fa fc60 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801a5d0:	68f8      	ldr	r0, [r7, #12]
 801a5d2:	3730      	adds	r7, #48	; 0x30
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bdb0      	pop	{r4, r5, r7, pc}

0801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801a5e0:	6878      	ldr	r0, [r7, #4]
 801a5e2:	f000 fe66 	bl	801b2b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>
 801a5e6:	4602      	mov	r2, r0
 801a5e8:	f107 030c 	add.w	r3, r7, #12
 801a5ec:	4611      	mov	r1, r2
 801a5ee:	4618      	mov	r0, r3
 801a5f0:	f000 fe6d 	bl	801b2ce <_ZNKSt10_Select1stISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEclERKS6_>
 801a5f4:	4603      	mov	r3, r0
      }
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	3710      	adds	r7, #16
 801a5fa:	46bd      	mov	sp, r7
 801a5fc:	bd80      	pop	{r7, pc}

0801a5fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801a5fe:	b5b0      	push	{r4, r5, r7, lr}
 801a600:	b086      	sub	sp, #24
 801a602:	af00      	add	r7, sp, #0
 801a604:	60f8      	str	r0, [r7, #12]
 801a606:	60b9      	str	r1, [r7, #8]
 801a608:	607a      	str	r2, [r7, #4]
 801a60a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d119      	bne.n	801a646 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801a612:	68f8      	ldr	r0, [r7, #12]
 801a614:	f000 fcd4 	bl	801afc0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 801a618:	4602      	mov	r2, r0
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	4293      	cmp	r3, r2
 801a61e:	d012      	beq.n	801a646 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 801a620:	68fc      	ldr	r4, [r7, #12]
 801a622:	6838      	ldr	r0, [r7, #0]
 801a624:	f7ff ffd8 	bl	801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801a628:	4603      	mov	r3, r0
 801a62a:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 801a62c:	6878      	ldr	r0, [r7, #4]
 801a62e:	f000 fd7c 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801a632:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	461a      	mov	r2, r3
 801a638:	4629      	mov	r1, r5
 801a63a:	4620      	mov	r0, r4
 801a63c:	f7fe ffbc 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a640:	4603      	mov	r3, r0
 801a642:	2b00      	cmp	r3, #0
 801a644:	d001      	beq.n	801a64a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 801a646:	2301      	movs	r3, #1
 801a648:	e000      	b.n	801a64c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 801a64a:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801a64c:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801a652:	7df8      	ldrb	r0, [r7, #23]
 801a654:	687a      	ldr	r2, [r7, #4]
 801a656:	6839      	ldr	r1, [r7, #0]
 801a658:	f00b fd8f 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	695b      	ldr	r3, [r3, #20]
 801a660:	1c5a      	adds	r2, r3, #1
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801a666:	f107 0310 	add.w	r3, r7, #16
 801a66a:	6839      	ldr	r1, [r7, #0]
 801a66c:	4618      	mov	r0, r3
 801a66e:	f000 f805 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801a672:	693b      	ldr	r3, [r7, #16]
    }
 801a674:	4618      	mov	r0, r3
 801a676:	3718      	adds	r7, #24
 801a678:	46bd      	mov	sp, r7
 801a67a:	bdb0      	pop	{r4, r5, r7, pc}

0801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801a67c:	b480      	push	{r7}
 801a67e:	b083      	sub	sp, #12
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
 801a684:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	683a      	ldr	r2, [r7, #0]
 801a68a:	601a      	str	r2, [r3, #0]
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	4618      	mov	r0, r3
 801a690:	370c      	adds	r7, #12
 801a692:	46bd      	mov	sp, r7
 801a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a698:	4770      	bx	lr

0801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801a69a:	b580      	push	{r7, lr}
 801a69c:	b082      	sub	sp, #8
 801a69e:	af00      	add	r7, sp, #0
 801a6a0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801a6a2:	6878      	ldr	r0, [r7, #4]
 801a6a4:	f7ff fd8c 	bl	801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	3708      	adds	r7, #8
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd80      	pop	{r7, pc}

0801a6b2 <_ZNKSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801a6b2:	b480      	push	{r7}
 801a6b4:	b083      	sub	sp, #12
 801a6b6:	af00      	add	r7, sp, #0
 801a6b8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	695b      	ldr	r3, [r3, #20]
 801a6be:	4618      	mov	r0, r3
 801a6c0:	370c      	adds	r7, #12
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6c8:	4770      	bx	lr

0801a6ca <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801a6ca:	b480      	push	{r7}
 801a6cc:	b083      	sub	sp, #12
 801a6ce:	af00      	add	r7, sp, #0
 801a6d0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	695b      	ldr	r3, [r3, #20]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	370c      	adds	r7, #12
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6e0:	4770      	bx	lr

0801a6e2 <_ZNSt24_Fwd_list_const_iteratorIhEC1EPKSt19_Fwd_list_node_base>:
      _Fwd_list_const_iterator(const _Fwd_list_node_base* __n)  noexcept
 801a6e2:	b480      	push	{r7}
 801a6e4:	b083      	sub	sp, #12
 801a6e6:	af00      	add	r7, sp, #0
 801a6e8:	6078      	str	r0, [r7, #4]
 801a6ea:	6039      	str	r1, [r7, #0]
      : _M_node(__n) { }
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	683a      	ldr	r2, [r7, #0]
 801a6f0:	601a      	str	r2, [r3, #0]
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	370c      	adds	r7, #12
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fe:	4770      	bx	lr

0801a700 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 801a700:	b5b0      	push	{r4, r5, r7, lr}
 801a702:	b084      	sub	sp, #16
 801a704:	af00      	add	r7, sp, #0
 801a706:	6078      	str	r0, [r7, #4]
 801a708:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7fa f96f 	bl	80149ee <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 801a710:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	4619      	mov	r1, r3
 801a716:	2008      	movs	r0, #8
 801a718:	f7e6 fe9e 	bl	8001458 <_ZnwjPv>
 801a71c:	4603      	mov	r3, r0
 801a71e:	4618      	mov	r0, r3
 801a720:	f7f9 fa54 	bl	8013bcc <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 801a724:	6878      	ldr	r0, [r7, #4]
 801a726:	f7f9 ffad 	bl	8014684 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 801a72a:	4604      	mov	r4, r0
 801a72c:	68f8      	ldr	r0, [r7, #12]
 801a72e:	f7f8 fe8a 	bl	8013446 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 801a732:	4605      	mov	r5, r0
 801a734:	6838      	ldr	r0, [r7, #0]
 801a736:	f7f9 f8cd 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801a73a:	4603      	mov	r3, r0
 801a73c:	461a      	mov	r2, r3
 801a73e:	4629      	mov	r1, r5
 801a740:	4620      	mov	r0, r4
 801a742:	f000 fe40 	bl	801b3c6 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJhEEEvRS2_PT_DpOT0_>
	  return __node;
 801a746:	68fb      	ldr	r3, [r7, #12]
	}
 801a748:	4618      	mov	r0, r3
 801a74a:	3710      	adds	r7, #16
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bdb0      	pop	{r4, r5, r7, pc}

0801a750 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801a750:	b580      	push	{r7, lr}
 801a752:	b082      	sub	sp, #8
 801a754:	af00      	add	r7, sp, #0
 801a756:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801a758:	6878      	ldr	r0, [r7, #4]
 801a75a:	f000 fe46 	bl	801b3ea <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE7_M_addrEv>
 801a75e:	4603      	mov	r3, r0
 801a760:	4618      	mov	r0, r3
 801a762:	3708      	adds	r7, #8
 801a764:	46bd      	mov	sp, r7
 801a766:	bd80      	pop	{r7, pc}

0801a768 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801a768:	b480      	push	{r7}
 801a76a:	b083      	sub	sp, #12
 801a76c:	af00      	add	r7, sp, #0
 801a76e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	689b      	ldr	r3, [r3, #8]
      }
 801a774:	4618      	mov	r0, r3
 801a776:	370c      	adds	r7, #12
 801a778:	46bd      	mov	sp, r7
 801a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a77e:	4770      	bx	lr

0801a780 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801a780:	b480      	push	{r7}
 801a782:	b083      	sub	sp, #12
 801a784:	af00      	add	r7, sp, #0
 801a786:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	3304      	adds	r3, #4
 801a78c:	4618      	mov	r0, r3
 801a78e:	370c      	adds	r7, #12
 801a790:	46bd      	mov	sp, r7
 801a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a796:	4770      	bx	lr

0801a798 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801a798:	b590      	push	{r4, r7, lr}
 801a79a:	b087      	sub	sp, #28
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	60f8      	str	r0, [r7, #12]
 801a7a0:	60b9      	str	r1, [r7, #8]
 801a7a2:	607a      	str	r2, [r7, #4]
 801a7a4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801a7a6:	68bb      	ldr	r3, [r7, #8]
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d01d      	beq.n	801a7e8 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801a7ac:	68fc      	ldr	r4, [r7, #12]
 801a7ae:	68b8      	ldr	r0, [r7, #8]
 801a7b0:	f000 fa0c 	bl	801abcc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	6819      	ldr	r1, [r3, #0]
 801a7b8:	683b      	ldr	r3, [r7, #0]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	461a      	mov	r2, r3
 801a7be:	4620      	mov	r0, r4
 801a7c0:	f7fe fefa 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801a7c4:	4603      	mov	r3, r0
 801a7c6:	f083 0301 	eor.w	r3, r3, #1
 801a7ca:	b2db      	uxtb	r3, r3
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d006      	beq.n	801a7de <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_+0x46>
	  __y = __x, __x = _S_left(__x);
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	607b      	str	r3, [r7, #4]
 801a7d4:	68b8      	ldr	r0, [r7, #8]
 801a7d6:	f000 fe13 	bl	801b400 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801a7da:	60b8      	str	r0, [r7, #8]
 801a7dc:	e7e3      	b.n	801a7a6 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_+0xe>
	  __x = _S_right(__x);
 801a7de:	68b8      	ldr	r0, [r7, #8]
 801a7e0:	f000 fe1a 	bl	801b418 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801a7e4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801a7e6:	e7de      	b.n	801a7a6 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS1_EPKSt18_Rb_tree_node_baseRKS1_+0xe>
      return const_iterator(__y);
 801a7e8:	f107 0314 	add.w	r3, r7, #20
 801a7ec:	6879      	ldr	r1, [r7, #4]
 801a7ee:	4618      	mov	r0, r3
 801a7f0:	f000 f811 	bl	801a816 <_ZNSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEC1EPKSt18_Rb_tree_node_base>
 801a7f4:	697b      	ldr	r3, [r7, #20]
    }
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	371c      	adds	r7, #28
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd90      	pop	{r4, r7, pc}

0801a7fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801a7fe:	b580      	push	{r7, lr}
 801a800:	b082      	sub	sp, #8
 801a802:	af00      	add	r7, sp, #0
 801a804:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801a806:	6878      	ldr	r0, [r7, #4]
 801a808:	f000 f9e0 	bl	801abcc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>
 801a80c:	4603      	mov	r3, r0
 801a80e:	4618      	mov	r0, r3
 801a810:	3708      	adds	r7, #8
 801a812:	46bd      	mov	sp, r7
 801a814:	bd80      	pop	{r7, pc}

0801a816 <_ZNSt23_Rb_tree_const_iteratorIP17TIM_HandleTypeDefEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801a816:	b480      	push	{r7}
 801a818:	b083      	sub	sp, #12
 801a81a:	af00      	add	r7, sp, #0
 801a81c:	6078      	str	r0, [r7, #4]
 801a81e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	683a      	ldr	r2, [r7, #0]
 801a824:	601a      	str	r2, [r3, #0]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	4618      	mov	r0, r3
 801a82a:	370c      	adds	r7, #12
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr

0801a834 <_ZNSaIP17TIM_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801a834:	b580      	push	{r7, lr}
 801a836:	b082      	sub	sp, #8
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	6878      	ldr	r0, [r7, #4]
 801a83e:	f000 fdf7 	bl	801b430 <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefEC1Ev>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	4618      	mov	r0, r3
 801a846:	3708      	adds	r7, #8
 801a848:	46bd      	mov	sp, r7
 801a84a:	bd80      	pop	{r7, pc}

0801a84c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b082      	sub	sp, #8
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	2200      	movs	r2, #0
 801a858:	601a      	str	r2, [r3, #0]
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	2200      	movs	r2, #0
 801a85e:	605a      	str	r2, [r3, #4]
 801a860:	687b      	ldr	r3, [r7, #4]
 801a862:	3308      	adds	r3, #8
 801a864:	4618      	mov	r0, r3
 801a866:	f000 fdee 	bl	801b446 <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1Ev>
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	3318      	adds	r3, #24
 801a86e:	4618      	mov	r0, r3
 801a870:	f000 fde9 	bl	801b446 <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1Ev>
	{ }
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	4618      	mov	r0, r3
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}

0801a87e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 801a87e:	b590      	push	{r4, r7, lr}
 801a880:	b085      	sub	sp, #20
 801a882:	af00      	add	r7, sp, #0
 801a884:	6078      	str	r0, [r7, #4]
 801a886:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 801a888:	f107 030c 	add.w	r3, r7, #12
 801a88c:	6879      	ldr	r1, [r7, #4]
 801a88e:	4618      	mov	r0, r3
 801a890:	f000 f858 	bl	801a944 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 801a894:	f107 030c 	add.w	r3, r7, #12
 801a898:	6839      	ldr	r1, [r7, #0]
 801a89a:	4618      	mov	r0, r3
 801a89c:	f000 fdea 	bl	801b474 <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE8allocateERS3_j>
 801a8a0:	4604      	mov	r4, r0
 801a8a2:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 801a8a4:	f107 030c 	add.w	r3, r7, #12
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f000 f85c 	bl	801a966 <_ZNSaIPP17TIM_HandleTypeDefED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 801a8ae:	4623      	mov	r3, r4
      }
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	3714      	adds	r7, #20
 801a8b4:	46bd      	mov	sp, r7
 801a8b6:	bd90      	pop	{r4, r7, pc}

0801a8b8 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_create_nodesEPPS1_S5_>:
    _Deque_base<_Tp, _Alloc>::
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b086      	sub	sp, #24
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	60f8      	str	r0, [r7, #12]
 801a8c0:	60b9      	str	r1, [r7, #8]
 801a8c2:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 801a8c4:	68bb      	ldr	r3, [r7, #8]
 801a8c6:	617b      	str	r3, [r7, #20]
 801a8c8:	697a      	ldr	r2, [r7, #20]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	429a      	cmp	r2, r3
 801a8ce:	d209      	bcs.n	801a8e4 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_create_nodesEPPS1_S5_+0x2c>
	    *__cur = this->_M_allocate_node();
 801a8d0:	68f8      	ldr	r0, [r7, #12]
 801a8d2:	f000 fd3f 	bl	801b354 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_allocate_nodeEv>
 801a8d6:	4602      	mov	r2, r0
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 801a8dc:	697b      	ldr	r3, [r7, #20]
 801a8de:	3304      	adds	r3, #4
 801a8e0:	617b      	str	r3, [r7, #20]
 801a8e2:	e7f1      	b.n	801a8c8 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_create_nodesEPPS1_S5_+0x10>
    }
 801a8e4:	bf00      	nop
 801a8e6:	3718      	adds	r7, #24
 801a8e8:	46bd      	mov	sp, r7
 801a8ea:	bd80      	pop	{r7, pc}

0801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 801a8ec:	b590      	push	{r4, r7, lr}
 801a8ee:	b083      	sub	sp, #12
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	683a      	ldr	r2, [r7, #0]
 801a8fa:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	685c      	ldr	r4, [r3, #4]
 801a908:	f000 f9e1 	bl	801acce <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E14_S_buffer_sizeEv>
 801a90c:	4603      	mov	r3, r0
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	18e2      	adds	r2, r4, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	609a      	str	r2, [r3, #8]
      }
 801a916:	bf00      	nop
 801a918:	370c      	adds	r7, #12
 801a91a:	46bd      	mov	sp, r7
 801a91c:	bd90      	pop	{r4, r7, pc}

0801a91e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE18_M_deallocate_nodeEPS1_>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 801a91e:	b590      	push	{r4, r7, lr}
 801a920:	b083      	sub	sp, #12
 801a922:	af00      	add	r7, sp, #0
 801a924:	6078      	str	r0, [r7, #4]
 801a926:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 801a928:	687c      	ldr	r4, [r7, #4]
 801a92a:	2004      	movs	r0, #4
 801a92c:	f7fd fee2 	bl	80186f4 <_ZSt16__deque_buf_sizej>
 801a930:	4603      	mov	r3, r0
 801a932:	461a      	mov	r2, r3
 801a934:	6839      	ldr	r1, [r7, #0]
 801a936:	4620      	mov	r0, r4
 801a938:	f000 fdbc 	bl	801b4b4 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE10deallocateERS2_PS1_j>
      }
 801a93c:	bf00      	nop
 801a93e:	370c      	adds	r7, #12
 801a940:	46bd      	mov	sp, r7
 801a942:	bd90      	pop	{r4, r7, pc}

0801a944 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 801a944:	b580      	push	{r7, lr}
 801a946:	b082      	sub	sp, #8
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
 801a94c:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 801a94e:	6838      	ldr	r0, [r7, #0]
 801a950:	f000 fdcf 	bl	801b4f2 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE19_M_get_Tp_allocatorEv>
 801a954:	4603      	mov	r3, r0
 801a956:	4619      	mov	r1, r3
 801a958:	6878      	ldr	r0, [r7, #4]
 801a95a:	f000 fdd5 	bl	801b508 <_ZNSaIPP17TIM_HandleTypeDefEC1IS0_EERKSaIT_E>
 801a95e:	6878      	ldr	r0, [r7, #4]
 801a960:	3708      	adds	r7, #8
 801a962:	46bd      	mov	sp, r7
 801a964:	bd80      	pop	{r7, pc}

0801a966 <_ZNSaIPP17TIM_HandleTypeDefED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801a966:	b480      	push	{r7}
 801a968:	b083      	sub	sp, #12
 801a96a:	af00      	add	r7, sp, #0
 801a96c:	6078      	str	r0, [r7, #4]
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	4618      	mov	r0, r3
 801a972:	370c      	adds	r7, #12
 801a974:	46bd      	mov	sp, r7
 801a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a97a:	4770      	bx	lr

0801a97c <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b088      	sub	sp, #32
 801a980:	af00      	add	r7, sp, #0
 801a982:	60f8      	str	r0, [r7, #12]
 801a984:	60b9      	str	r1, [r7, #8]
 801a986:	607a      	str	r2, [r7, #4]
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	61fb      	str	r3, [r7, #28]
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	61bb      	str	r3, [r7, #24]
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801a994:	f7e6 fd58 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801a998:	4603      	mov	r3, r0
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d003      	beq.n	801a9a6 <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 801a99e:	69b8      	ldr	r0, [r7, #24]
 801a9a0:	f00b fb7e 	bl	80260a0 <_ZdlPv>
	    return;
 801a9a4:	e005      	b.n	801a9b2 <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801a9a6:	697a      	ldr	r2, [r7, #20]
 801a9a8:	69b9      	ldr	r1, [r7, #24]
 801a9aa:	69f8      	ldr	r0, [r7, #28]
 801a9ac:	f001 f915 	bl	801bbda <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 801a9b0:	bf00      	nop
 801a9b2:	bf00      	nop
 801a9b4:	3720      	adds	r7, #32
 801a9b6:	46bd      	mov	sp, r7
 801a9b8:	bd80      	pop	{r7, pc}

0801a9ba <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1ERKS4_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 801a9ba:	b480      	push	{r7}
 801a9bc:	b083      	sub	sp, #12
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	6078      	str	r0, [r7, #4]
 801a9c2:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 801a9c4:	683b      	ldr	r3, [r7, #0]
 801a9c6:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 801a9cc:	683b      	ldr	r3, [r7, #0]
 801a9ce:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	605a      	str	r2, [r3, #4]
 801a9d4:	683b      	ldr	r3, [r7, #0]
 801a9d6:	689a      	ldr	r2, [r3, #8]
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	609a      	str	r2, [r3, #8]
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	68da      	ldr	r2, [r3, #12]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	60da      	str	r2, [r3, #12]
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	370c      	adds	r7, #12
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f0:	4770      	bx	lr

0801a9f2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801a9f2:	b590      	push	{r4, r7, lr}
 801a9f4:	b083      	sub	sp, #12
 801a9f6:	af00      	add	r7, sp, #0
 801a9f8:	6078      	str	r0, [r7, #4]
 801a9fa:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801a9fc:	6878      	ldr	r0, [r7, #4]
 801a9fe:	f000 fd90 	bl	801b522 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 801aa02:	4604      	mov	r4, r0
 801aa04:	6838      	ldr	r0, [r7, #0]
 801aa06:	f000 fd97 	bl	801b538 <_ZNSt13_Rb_tree_nodeIP17TIM_HandleTypeDefE9_M_valptrEv>
 801aa0a:	4603      	mov	r3, r0
 801aa0c:	4619      	mov	r1, r3
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f000 fda0 	bl	801b554 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE7destroyIS2_EEvRS4_PT_>
      }
 801aa14:	bf00      	nop
 801aa16:	370c      	adds	r7, #12
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd90      	pop	{r4, r7, pc}

0801aa1c <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS1_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b082      	sub	sp, #8
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
 801aa24:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801aa26:	6878      	ldr	r0, [r7, #4]
 801aa28:	f000 fd7b 	bl	801b522 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 801aa2c:	4603      	mov	r3, r0
 801aa2e:	2201      	movs	r2, #1
 801aa30:	6839      	ldr	r1, [r7, #0]
 801aa32:	4618      	mov	r0, r3
 801aa34:	f000 fd9a 	bl	801b56c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE10deallocateERS4_PS3_j>
 801aa38:	bf00      	nop
 801aa3a:	3708      	adds	r7, #8
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	bd80      	pop	{r7, pc}

0801aa40 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801aa40:	b590      	push	{r4, r7, lr}
 801aa42:	b083      	sub	sp, #12
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	6078      	str	r0, [r7, #4]
 801aa48:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801aa4a:	6878      	ldr	r0, [r7, #4]
 801aa4c:	f000 fdad 	bl	801b5aa <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801aa50:	4604      	mov	r4, r0
 801aa52:	6838      	ldr	r0, [r7, #0]
 801aa54:	f7fe fe70 	bl	8019738 <_ZNSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	4619      	mov	r1, r3
 801aa5c:	4620      	mov	r0, r4
 801aa5e:	f000 fdaf 	bl	801b5c0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE7destroyIS5_EEvRS7_PT_>
      }
 801aa62:	bf00      	nop
 801aa64:	370c      	adds	r7, #12
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd90      	pop	{r4, r7, pc}

0801aa6a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801aa6a:	b580      	push	{r7, lr}
 801aa6c:	b082      	sub	sp, #8
 801aa6e:	af00      	add	r7, sp, #0
 801aa70:	6078      	str	r0, [r7, #4]
 801aa72:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f000 fd98 	bl	801b5aa <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	2201      	movs	r2, #1
 801aa7e:	6839      	ldr	r1, [r7, #0]
 801aa80:	4618      	mov	r0, r3
 801aa82:	f000 fda9 	bl	801b5d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE10deallocateERS7_PS6_j>
 801aa86:	bf00      	nop
 801aa88:	3708      	adds	r7, #8
 801aa8a:	46bd      	mov	sp, r7
 801aa8c:	bd80      	pop	{r7, pc}

0801aa8e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801aa8e:	b590      	push	{r4, r7, lr}
 801aa90:	b083      	sub	sp, #12
 801aa92:	af00      	add	r7, sp, #0
 801aa94:	6078      	str	r0, [r7, #4]
 801aa96:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	f000 fdbc 	bl	801b616 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 801aa9e:	4604      	mov	r4, r0
 801aaa0:	6838      	ldr	r0, [r7, #0]
 801aaa2:	f7ff fc1f 	bl	801a2e4 <_ZNSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>
 801aaa6:	4603      	mov	r3, r0
 801aaa8:	4619      	mov	r1, r3
 801aaaa:	4620      	mov	r0, r4
 801aaac:	f000 fdbe 	bl	801b62c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE7destroyIS7_EEvRS9_PT_>
      }
 801aab0:	bf00      	nop
 801aab2:	370c      	adds	r7, #12
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd90      	pop	{r4, r7, pc}

0801aab8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801aab8:	b580      	push	{r7, lr}
 801aaba:	b082      	sub	sp, #8
 801aabc:	af00      	add	r7, sp, #0
 801aabe:	6078      	str	r0, [r7, #4]
 801aac0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801aac2:	6878      	ldr	r0, [r7, #4]
 801aac4:	f000 fda7 	bl	801b616 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 801aac8:	4603      	mov	r3, r0
 801aaca:	2201      	movs	r2, #1
 801aacc:	6839      	ldr	r1, [r7, #0]
 801aace:	4618      	mov	r0, r3
 801aad0:	f000 fdb8 	bl	801b644 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE10deallocateERS9_PS8_j>
 801aad4:	bf00      	nop
 801aad6:	3708      	adds	r7, #8
 801aad8:	46bd      	mov	sp, r7
 801aada:	bd80      	pop	{r7, pc}

0801aadc <_ZSt12construct_atIP17TIM_HandleTypeDefJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801aadc:	b590      	push	{r4, r7, lr}
 801aade:	b083      	sub	sp, #12
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
 801aae4:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801aae6:	6838      	ldr	r0, [r7, #0]
 801aae8:	f7ff f8f1 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801aaec:	4603      	mov	r3, r0
 801aaee:	681c      	ldr	r4, [r3, #0]
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	4619      	mov	r1, r3
 801aaf4:	2004      	movs	r0, #4
 801aaf6:	f7e6 fcaf 	bl	8001458 <_ZnwjPv>
 801aafa:	4603      	mov	r3, r0
 801aafc:	601c      	str	r4, [r3, #0]
 801aafe:	4618      	mov	r0, r3
 801ab00:	370c      	adds	r7, #12
 801ab02:	46bd      	mov	sp, r7
 801ab04:	bd90      	pop	{r4, r7, pc}

0801ab06 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801ab06:	b580      	push	{r7, lr}
 801ab08:	b084      	sub	sp, #16
 801ab0a:	af00      	add	r7, sp, #0
 801ab0c:	60f8      	str	r0, [r7, #12]
 801ab0e:	60b9      	str	r1, [r7, #8]
 801ab10:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801ab12:	6878      	ldr	r0, [r7, #4]
 801ab14:	f7ff f8db 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801ab18:	4603      	mov	r3, r0
 801ab1a:	4619      	mov	r1, r3
 801ab1c:	68b8      	ldr	r0, [r7, #8]
 801ab1e:	f7ff ffdd 	bl	801aadc <_ZSt12construct_atIP17TIM_HandleTypeDefJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801ab22:	bf00      	nop
 801ab24:	3710      	adds	r7, #16
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
	...

0801ab2c <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 801ab2c:	b5b0      	push	{r4, r5, r7, lr}
 801ab2e:	b082      	sub	sp, #8
 801ab30:	af00      	add	r7, sp, #0
 801ab32:	6078      	str	r0, [r7, #4]
 801ab34:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 801ab36:	6878      	ldr	r0, [r7, #4]
 801ab38:	f7fe fc4d 	bl	80193d6 <_ZNKSt5dequeIP17TIM_HandleTypeDefSaIS1_EE4sizeEv>
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	6878      	ldr	r0, [r7, #4]
 801ab40:	f000 fbdc 	bl	801b2fc <_ZNKSt5dequeIP17TIM_HandleTypeDefSaIS1_EE8max_sizeEv>
 801ab44:	4603      	mov	r3, r0
 801ab46:	429c      	cmp	r4, r3
 801ab48:	bf0c      	ite	eq
 801ab4a:	2301      	moveq	r3, #1
 801ab4c:	2300      	movne	r3, #0
 801ab4e:	b2db      	uxtb	r3, r3
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d002      	beq.n	801ab5a <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x2e>
	  __throw_length_error(
 801ab54:	4816      	ldr	r0, [pc, #88]	; (801abb0 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE16_M_push_back_auxIJS1_EEEvDpOT_+0x84>)
 801ab56:	f00b fb6e 	bl	8026236 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 801ab5a:	2101      	movs	r1, #1
 801ab5c:	6878      	ldr	r0, [r7, #4]
 801ab5e:	f000 fbde 	bl	801b31e <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 801ab62:	687a      	ldr	r2, [r7, #4]
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab68:	1d1c      	adds	r4, r3, #4
 801ab6a:	4610      	mov	r0, r2
 801ab6c:	f000 fbf2 	bl	801b354 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_allocate_nodeEv>
 801ab70:	4603      	mov	r3, r0
 801ab72:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 801ab74:	687c      	ldr	r4, [r7, #4]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	699d      	ldr	r5, [r3, #24]
 801ab7a:	6838      	ldr	r0, [r7, #0]
 801ab7c:	f7ff f8a7 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801ab80:	4603      	mov	r3, r0
 801ab82:	461a      	mov	r2, r3
 801ab84:	4629      	mov	r1, r5
 801ab86:	4620      	mov	r0, r4
 801ab88:	f7ff ffbd 	bl	801ab06 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f103 0218 	add.w	r2, r3, #24
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ab96:	3304      	adds	r3, #4
 801ab98:	4619      	mov	r1, r3
 801ab9a:	4610      	mov	r0, r2
 801ab9c:	f7ff fea6 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	69da      	ldr	r2, [r3, #28]
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 801aba8:	bf00      	nop
 801abaa:	3708      	adds	r7, #8
 801abac:	46bd      	mov	sp, r7
 801abae:	bdb0      	pop	{r4, r5, r7, pc}
 801abb0:	08026a28 	.word	0x08026a28

0801abb4 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801abb4:	b480      	push	{r7}
 801abb6:	b083      	sub	sp, #12
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	3304      	adds	r3, #4
 801abc0:	4618      	mov	r0, r3
 801abc2:	370c      	adds	r7, #12
 801abc4:	46bd      	mov	sp, r7
 801abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abca:	4770      	bx	lr

0801abcc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE6_S_keyEPKSt13_Rb_tree_nodeIS1_E>:
      _S_key(_Const_Link_type __x)
 801abcc:	b580      	push	{r7, lr}
 801abce:	b084      	sub	sp, #16
 801abd0:	af00      	add	r7, sp, #0
 801abd2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f000 fd54 	bl	801b682 <_ZNKSt13_Rb_tree_nodeIP17TIM_HandleTypeDefE9_M_valptrEv>
 801abda:	4602      	mov	r2, r0
 801abdc:	f107 030c 	add.w	r3, r7, #12
 801abe0:	4611      	mov	r1, r2
 801abe2:	4618      	mov	r0, r3
 801abe4:	f000 fd5b 	bl	801b69e <_ZNKSt9_IdentityIP17TIM_HandleTypeDefEclERKS1_>
 801abe8:	4603      	mov	r3, r0
      }
 801abea:	4618      	mov	r0, r3
 801abec:	3710      	adds	r7, #16
 801abee:	46bd      	mov	sp, r7
 801abf0:	bd80      	pop	{r7, pc}

0801abf2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801abf2:	b580      	push	{r7, lr}
 801abf4:	b084      	sub	sp, #16
 801abf6:	af00      	add	r7, sp, #0
 801abf8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	68da      	ldr	r2, [r3, #12]
 801abfe:	f107 030c 	add.w	r3, r7, #12
 801ac02:	4611      	mov	r1, r2
 801ac04:	4618      	mov	r0, r3
 801ac06:	f7ff f8d1 	bl	8019dac <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEC1EPSt18_Rb_tree_node_base>
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	3710      	adds	r7, #16
 801ac10:	46bd      	mov	sp, r7
 801ac12:	bd80      	pop	{r7, pc}

0801ac14 <_ZSteqRKSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801ac14:	b480      	push	{r7}
 801ac16:	b083      	sub	sp, #12
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
 801ac1c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681a      	ldr	r2, [r3, #0]
 801ac22:	683b      	ldr	r3, [r7, #0]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	429a      	cmp	r2, r3
 801ac28:	bf0c      	ite	eq
 801ac2a:	2301      	moveq	r3, #1
 801ac2c:	2300      	movne	r3, #0
 801ac2e:	b2db      	uxtb	r3, r3
 801ac30:	4618      	mov	r0, r3
 801ac32:	370c      	adds	r7, #12
 801ac34:	46bd      	mov	sp, r7
 801ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac3a:	4770      	bx	lr

0801ac3c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIP17TIM_HandleTypeDefERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	60f8      	str	r0, [r7, #12]
 801ac44:	60b9      	str	r1, [r7, #8]
 801ac46:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801ac48:	68b8      	ldr	r0, [r7, #8]
 801ac4a:	f000 fd34 	bl	801b6b6 <_ZSt7forwardIRPSt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>
 801ac4e:	4603      	mov	r3, r0
 801ac50:	681a      	ldr	r2, [r3, #0]
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	601a      	str	r2, [r3, #0]
 801ac56:	6878      	ldr	r0, [r7, #4]
 801ac58:	f7fa fce6 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801ac5c:	4603      	mov	r3, r0
 801ac5e:	681a      	ldr	r2, [r3, #0]
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	605a      	str	r2, [r3, #4]
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	4618      	mov	r0, r3
 801ac68:	3710      	adds	r7, #16
 801ac6a:	46bd      	mov	sp, r7
 801ac6c:	bd80      	pop	{r7, pc}

0801ac6e <_ZNSt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801ac6e:	b580      	push	{r7, lr}
 801ac70:	b082      	sub	sp, #8
 801ac72:	af00      	add	r7, sp, #0
 801ac74:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	681b      	ldr	r3, [r3, #0]
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f00b fa7b 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801ac80:	4602      	mov	r2, r0
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	601a      	str	r2, [r3, #0]
	return *this;
 801ac86:	687b      	ldr	r3, [r7, #4]
      }
 801ac88:	4618      	mov	r0, r3
 801ac8a:	3708      	adds	r7, #8
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <_ZNKSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_Alloc_nodeclIS1_EEPSt13_Rb_tree_nodeIS1_EOT_>:
	  operator()(_Arg&& __arg) const
 801ac90:	b590      	push	{r4, r7, lr}
 801ac92:	b083      	sub	sp, #12
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
 801ac98:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681c      	ldr	r4, [r3, #0]
 801ac9e:	6838      	ldr	r0, [r7, #0]
 801aca0:	f7ff f815 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801aca4:	4603      	mov	r3, r0
 801aca6:	4619      	mov	r1, r3
 801aca8:	4620      	mov	r0, r4
 801acaa:	f000 fd0f 	bl	801b6cc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>
 801acae:	4603      	mov	r3, r0
 801acb0:	4618      	mov	r0, r3
 801acb2:	370c      	adds	r7, #12
 801acb4:	46bd      	mov	sp, r7
 801acb6:	bd90      	pop	{r4, r7, pc}

0801acb8 <_ZSt7forwardISt17_Rb_tree_iteratorIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801acb8:	b480      	push	{r7}
 801acba:	b083      	sub	sp, #12
 801acbc:	af00      	add	r7, sp, #0
 801acbe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	4618      	mov	r0, r3
 801acc4:	370c      	adds	r7, #12
 801acc6:	46bd      	mov	sp, r7
 801acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801accc:	4770      	bx	lr

0801acce <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 801acce:	b580      	push	{r7, lr}
 801acd0:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 801acd2:	2004      	movs	r0, #4
 801acd4:	f7fd fd0e 	bl	80186f4 <_ZSt16__deque_buf_sizej>
 801acd8:	4603      	mov	r3, r0
 801acda:	4618      	mov	r0, r3
 801acdc:	bd80      	pop	{r7, pc}

0801acde <_ZSt10destroy_atIP17TIM_HandleTypeDefEvPT_>:
    destroy_at(_Tp* __location)
 801acde:	b480      	push	{r7}
 801ace0:	b083      	sub	sp, #12
 801ace2:	af00      	add	r7, sp, #0
 801ace4:	6078      	str	r0, [r7, #4]
    }
 801ace6:	bf00      	nop
 801ace8:	370c      	adds	r7, #12
 801acea:	46bd      	mov	sp, r7
 801acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acf0:	4770      	bx	lr

0801acf2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801acf2:	b480      	push	{r7}
 801acf4:	b083      	sub	sp, #12
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	3304      	adds	r3, #4
 801acfe:	4618      	mov	r0, r3
 801ad00:	370c      	adds	r7, #12
 801ad02:	46bd      	mov	sp, r7
 801ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad08:	4770      	bx	lr

0801ad0a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ad0a:	b590      	push	{r4, r7, lr}
 801ad0c:	b087      	sub	sp, #28
 801ad0e:	af00      	add	r7, sp, #0
 801ad10:	60f8      	str	r0, [r7, #12]
 801ad12:	60b9      	str	r1, [r7, #8]
 801ad14:	607a      	str	r2, [r7, #4]
 801ad16:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ad18:	68bb      	ldr	r3, [r7, #8]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d01b      	beq.n	801ad56 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801ad1e:	68fc      	ldr	r4, [r7, #12]
 801ad20:	68b8      	ldr	r0, [r7, #8]
 801ad22:	f7ff fa4d 	bl	801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801ad26:	4603      	mov	r3, r0
 801ad28:	683a      	ldr	r2, [r7, #0]
 801ad2a:	4619      	mov	r1, r3
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f7f8 fbe3 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ad32:	4603      	mov	r3, r0
 801ad34:	f083 0301 	eor.w	r3, r3, #1
 801ad38:	b2db      	uxtb	r3, r3
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d006      	beq.n	801ad4c <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	607b      	str	r3, [r7, #4]
 801ad42:	68b8      	ldr	r0, [r7, #8]
 801ad44:	f7fe fe9f 	bl	8019a86 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ad48:	60b8      	str	r0, [r7, #8]
 801ad4a:	e7e5      	b.n	801ad18 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801ad4c:	68b8      	ldr	r0, [r7, #8]
 801ad4e:	f7fe fe8e 	bl	8019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801ad52:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801ad54:	e7e0      	b.n	801ad18 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801ad56:	f107 0314 	add.w	r3, r7, #20
 801ad5a:	6879      	ldr	r1, [r7, #4]
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	f7ff fa7f 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801ad62:	697b      	ldr	r3, [r7, #20]
    }
 801ad64:	4618      	mov	r0, r3
 801ad66:	371c      	adds	r7, #28
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd90      	pop	{r4, r7, pc}

0801ad6c <_ZNSt11_Tuple_implILj0EJOhEEC1IhEEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 801ad6c:	b590      	push	{r4, r7, lr}
 801ad6e:	b083      	sub	sp, #12
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801ad76:	687c      	ldr	r4, [r7, #4]
 801ad78:	6838      	ldr	r0, [r7, #0]
 801ad7a:	f7f8 fdab 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	4619      	mov	r1, r3
 801ad82:	4620      	mov	r0, r4
 801ad84:	f000 fcb9 	bl	801b6fa <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	370c      	adds	r7, #12
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd90      	pop	{r4, r7, pc}

0801ad92 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 801ad92:	b580      	push	{r7, lr}
 801ad94:	b082      	sub	sp, #8
 801ad96:	af00      	add	r7, sp, #0
 801ad98:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801ad9a:	6878      	ldr	r0, [r7, #4]
 801ad9c:	f000 fc05 	bl	801b5aa <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801ada0:	4603      	mov	r3, r0
 801ada2:	2101      	movs	r1, #1
 801ada4:	4618      	mov	r0, r3
 801ada6:	f000 fcb8 	bl	801b71a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE8allocateERS7_j>
 801adaa:	4603      	mov	r3, r0
 801adac:	4618      	mov	r0, r3
 801adae:	3708      	adds	r7, #8
 801adb0:	46bd      	mov	sp, r7
 801adb2:	bd80      	pop	{r7, pc}

0801adb4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOhEESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adb8:	b086      	sub	sp, #24
 801adba:	af02      	add	r7, sp, #8
 801adbc:	60f8      	str	r0, [r7, #12]
 801adbe:	60b9      	str	r1, [r7, #8]
 801adc0:	607a      	str	r2, [r7, #4]
 801adc2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801adc4:	68bb      	ldr	r3, [r7, #8]
 801adc6:	4619      	mov	r1, r3
 801adc8:	202c      	movs	r0, #44	; 0x2c
 801adca:	f7e6 fb45 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801adce:	68f8      	ldr	r0, [r7, #12]
 801add0:	f000 fbeb 	bl	801b5aa <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801add4:	4604      	mov	r4, r0
 801add6:	68b8      	ldr	r0, [r7, #8]
 801add8:	f7fe fcae 	bl	8019738 <_ZNSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>
 801addc:	4605      	mov	r5, r0
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f7f9 f879 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801ade4:	4606      	mov	r6, r0
 801ade6:	6838      	ldr	r0, [r7, #0]
 801ade8:	f7ff f899 	bl	8019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801adec:	4680      	mov	r8, r0
 801adee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801adf0:	f7f9 f887 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801adf4:	4603      	mov	r3, r0
 801adf6:	9300      	str	r3, [sp, #0]
 801adf8:	4643      	mov	r3, r8
 801adfa:	4632      	mov	r2, r6
 801adfc:	4629      	mov	r1, r5
 801adfe:	4620      	mov	r0, r4
 801ae00:	f000 fce7 	bl	801b7d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOhEESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 801ae04:	bf00      	nop
 801ae06:	3710      	adds	r7, #16
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ae0e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN4Time5AlarmEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801ae0e:	b580      	push	{r7, lr}
 801ae10:	b084      	sub	sp, #16
 801ae12:	af00      	add	r7, sp, #0
 801ae14:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	681a      	ldr	r2, [r3, #0]
 801ae1a:	f107 030c 	add.w	r3, r7, #12
 801ae1e:	4611      	mov	r1, r2
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7ff fa1d 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	3710      	adds	r7, #16
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}

0801ae30 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801ae30:	b480      	push	{r7}
 801ae32:	b083      	sub	sp, #12
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	3310      	adds	r3, #16
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	370c      	adds	r7, #12
 801ae40:	46bd      	mov	sp, r7
 801ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae46:	4770      	bx	lr

0801ae48 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ae48:	b590      	push	{r4, r7, lr}
 801ae4a:	b08b      	sub	sp, #44	; 0x2c
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	60f8      	str	r0, [r7, #12]
 801ae50:	60b9      	str	r1, [r7, #8]
 801ae52:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801ae54:	68b8      	ldr	r0, [r7, #8]
 801ae56:	f7fe f9f5 	bl	8019244 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801ae5e:	68b8      	ldr	r0, [r7, #8]
 801ae60:	f7ff ff47 	bl	801acf2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801ae64:	4603      	mov	r3, r0
 801ae66:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801ae68:	2301      	movs	r3, #1
 801ae6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801ae6e:	69bb      	ldr	r3, [r7, #24]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d020      	beq.n	801aeb6 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801ae74:	69bb      	ldr	r3, [r7, #24]
 801ae76:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801ae78:	68bc      	ldr	r4, [r7, #8]
 801ae7a:	69bb      	ldr	r3, [r7, #24]
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7ff f99f 	bl	801a1c0 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801ae82:	4603      	mov	r3, r0
 801ae84:	461a      	mov	r2, r3
 801ae86:	6879      	ldr	r1, [r7, #4]
 801ae88:	4620      	mov	r0, r4
 801ae8a:	f7f8 fb35 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801ae94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d005      	beq.n	801aea8 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 801ae9c:	69bb      	ldr	r3, [r7, #24]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f7fe fdf1 	bl	8019a86 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801aea4:	4603      	mov	r3, r0
 801aea6:	e004      	b.n	801aeb2 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 801aea8:	69bb      	ldr	r3, [r7, #24]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	f7fe fddf 	bl	8019a6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801aeb0:	4603      	mov	r3, r0
 801aeb2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801aeb4:	e7db      	b.n	801ae6e <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801aeb6:	697a      	ldr	r2, [r7, #20]
 801aeb8:	f107 0310 	add.w	r3, r7, #16
 801aebc:	4611      	mov	r1, r2
 801aebe:	4618      	mov	r0, r3
 801aec0:	f7ff f9ce 	bl	801a260 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801aec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aec8:	2b00      	cmp	r3, #0
 801aeca:	d01d      	beq.n	801af08 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801aecc:	68b8      	ldr	r0, [r7, #8]
 801aece:	f7fe fc11 	bl	80196f4 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 801aed2:	4603      	mov	r3, r0
 801aed4:	61fb      	str	r3, [r7, #28]
 801aed6:	f107 021c 	add.w	r2, r7, #28
 801aeda:	f107 0310 	add.w	r3, r7, #16
 801aede:	4611      	mov	r1, r2
 801aee0:	4618      	mov	r0, r3
 801aee2:	f7fe f87e 	bl	8018fe2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEES7_>
 801aee6:	4603      	mov	r3, r0
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d008      	beq.n	801aefe <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801aeec:	f107 0214 	add.w	r2, r7, #20
 801aef0:	f107 0318 	add.w	r3, r7, #24
 801aef4:	4619      	mov	r1, r3
 801aef6:	68f8      	ldr	r0, [r7, #12]
 801aef8:	f000 fc87 	bl	801b80a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>
 801aefc:	e025      	b.n	801af4a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801aefe:	f107 0310 	add.w	r3, r7, #16
 801af02:	4618      	mov	r0, r3
 801af04:	f000 f831 	bl	801af6a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801af08:	68bc      	ldr	r4, [r7, #8]
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	4618      	mov	r0, r3
 801af0e:	f7ff fbc4 	bl	801a69a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801af12:	4603      	mov	r3, r0
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	4619      	mov	r1, r3
 801af18:	4620      	mov	r0, r4
 801af1a:	f7f8 faed 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d008      	beq.n	801af36 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801af24:	f107 0214 	add.w	r2, r7, #20
 801af28:	f107 0318 	add.w	r3, r7, #24
 801af2c:	4619      	mov	r1, r3
 801af2e:	68f8      	ldr	r0, [r7, #12]
 801af30:	f000 fc6b 	bl	801b80a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>
 801af34:	e009      	b.n	801af4a <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801af36:	2300      	movs	r3, #0
 801af38:	623b      	str	r3, [r7, #32]
 801af3a:	f107 0220 	add.w	r2, r7, #32
 801af3e:	f107 0310 	add.w	r3, r7, #16
 801af42:	4619      	mov	r1, r3
 801af44:	68f8      	ldr	r0, [r7, #12]
 801af46:	f7f9 ffa3 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801af4a:	68f8      	ldr	r0, [r7, #12]
 801af4c:	372c      	adds	r7, #44	; 0x2c
 801af4e:	46bd      	mov	sp, r7
 801af50:	bd90      	pop	{r4, r7, pc}

0801af52 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801af52:	b480      	push	{r7}
 801af54:	b083      	sub	sp, #12
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	330c      	adds	r3, #12
 801af5e:	4618      	mov	r0, r3
 801af60:	370c      	adds	r7, #12
 801af62:	46bd      	mov	sp, r7
 801af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af68:	4770      	bx	lr

0801af6a <_ZNSt17_Rb_tree_iteratorISt4pairIKhN4Time5AlarmEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801af6a:	b580      	push	{r7, lr}
 801af6c:	b082      	sub	sp, #8
 801af6e:	af00      	add	r7, sp, #0
 801af70:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4618      	mov	r0, r3
 801af78:	f00b f8fd 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801af7c:	4602      	mov	r2, r0
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	601a      	str	r2, [r3, #0]
	return *this;
 801af82:	687b      	ldr	r3, [r7, #4]
      }
 801af84:	4618      	mov	r0, r3
 801af86:	3708      	adds	r7, #8
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}

0801af8c <_ZNKSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEE9_M_valptrEv>:
      _M_valptr() const
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b082      	sub	sp, #8
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	3310      	adds	r3, #16
 801af98:	4618      	mov	r0, r3
 801af9a:	f000 fc4f 	bl	801b83c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE6_M_ptrEv>
 801af9e:	4603      	mov	r3, r0
 801afa0:	4618      	mov	r0, r3
 801afa2:	3708      	adds	r7, #8
 801afa4:	46bd      	mov	sp, r7
 801afa6:	bd80      	pop	{r7, pc}

0801afa8 <_ZNKSt10_Select1stISt4pairIKhN4Time5AlarmEEEclERKS4_>:
      operator()(const _Pair& __x) const
 801afa8:	b480      	push	{r7}
 801afaa:	b083      	sub	sp, #12
 801afac:	af00      	add	r7, sp, #0
 801afae:	6078      	str	r0, [r7, #4]
 801afb0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	4618      	mov	r0, r3
 801afb6:	370c      	adds	r7, #12
 801afb8:	46bd      	mov	sp, r7
 801afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afbe:	4770      	bx	lr

0801afc0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801afc0:	b480      	push	{r7}
 801afc2:	b083      	sub	sp, #12
 801afc4:	af00      	add	r7, sp, #0
 801afc6:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	3304      	adds	r3, #4
 801afcc:	4618      	mov	r0, r3
 801afce:	370c      	adds	r7, #12
 801afd0:	46bd      	mov	sp, r7
 801afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd6:	4770      	bx	lr

0801afd8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801afd8:	b590      	push	{r4, r7, lr}
 801afda:	b087      	sub	sp, #28
 801afdc:	af00      	add	r7, sp, #0
 801afde:	60f8      	str	r0, [r7, #12]
 801afe0:	60b9      	str	r1, [r7, #8]
 801afe2:	607a      	str	r2, [r7, #4]
 801afe4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801afe6:	68bb      	ldr	r3, [r7, #8]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d01d      	beq.n	801b028 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801afec:	68fc      	ldr	r4, [r7, #12]
 801afee:	68b8      	ldr	r0, [r7, #8]
 801aff0:	f7ff faf2 	bl	801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801aff4:	4603      	mov	r3, r0
 801aff6:	6819      	ldr	r1, [r3, #0]
 801aff8:	683b      	ldr	r3, [r7, #0]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	461a      	mov	r2, r3
 801affe:	4620      	mov	r0, r4
 801b000:	f7fe fada 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801b004:	4603      	mov	r3, r0
 801b006:	f083 0301 	eor.w	r3, r3, #1
 801b00a:	b2db      	uxtb	r3, r3
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d006      	beq.n	801b01e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 801b010:	68bb      	ldr	r3, [r7, #8]
 801b012:	607b      	str	r3, [r7, #4]
 801b014:	68b8      	ldr	r0, [r7, #8]
 801b016:	f7fe fd6a 	bl	8019aee <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 801b01a:	60b8      	str	r0, [r7, #8]
 801b01c:	e7e3      	b.n	801afe6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 801b01e:	68b8      	ldr	r0, [r7, #8]
 801b020:	f7fe fd59 	bl	8019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801b024:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801b026:	e7de      	b.n	801afe6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 801b028:	f107 0314 	add.w	r3, r7, #20
 801b02c:	6879      	ldr	r1, [r7, #4]
 801b02e:	4618      	mov	r0, r3
 801b030:	f7ff fb24 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801b034:	697b      	ldr	r3, [r7, #20]
    }
 801b036:	4618      	mov	r0, r3
 801b038:	371c      	adds	r7, #28
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd90      	pop	{r4, r7, pc}

0801b03e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801b03e:	b580      	push	{r7, lr}
 801b040:	b082      	sub	sp, #8
 801b042:	af00      	add	r7, sp, #0
 801b044:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801b046:	6878      	ldr	r0, [r7, #4]
 801b048:	f000 fc04 	bl	801b854 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE7_M_addrEv>
 801b04c:	4603      	mov	r3, r0
 801b04e:	4618      	mov	r0, r3
 801b050:	3708      	adds	r7, #8
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}

0801b056 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 801b056:	b480      	push	{r7}
 801b058:	b083      	sub	sp, #12
 801b05a:	af00      	add	r7, sp, #0
 801b05c:	6078      	str	r0, [r7, #4]
 801b05e:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	683a      	ldr	r2, [r7, #0]
 801b064:	601a      	str	r2, [r3, #0]
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	4618      	mov	r0, r3
 801b06a:	370c      	adds	r7, #12
 801b06c:	46bd      	mov	sp, r7
 801b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b072:	4770      	bx	lr

0801b074 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801b07c:	6878      	ldr	r0, [r7, #4]
 801b07e:	f000 faca 	bl	801b616 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 801b082:	4603      	mov	r3, r0
 801b084:	2101      	movs	r1, #1
 801b086:	4618      	mov	r0, r3
 801b088:	f000 fbef 	bl	801b86a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE8allocateERS9_j>
 801b08c:	4603      	mov	r3, r0
 801b08e:	4618      	mov	r0, r3
 801b090:	3708      	adds	r7, #8
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}

0801b096 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801b096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b09a:	b086      	sub	sp, #24
 801b09c:	af02      	add	r7, sp, #8
 801b09e:	60f8      	str	r0, [r7, #12]
 801b0a0:	60b9      	str	r1, [r7, #8]
 801b0a2:	607a      	str	r2, [r7, #4]
 801b0a4:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801b0a6:	68bb      	ldr	r3, [r7, #8]
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	202c      	movs	r0, #44	; 0x2c
 801b0ac:	f7e6 f9d4 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801b0b0:	68f8      	ldr	r0, [r7, #12]
 801b0b2:	f000 fab0 	bl	801b616 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 801b0b6:	4604      	mov	r4, r0
 801b0b8:	68b8      	ldr	r0, [r7, #8]
 801b0ba:	f7ff f913 	bl	801a2e4 <_ZNSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>
 801b0be:	4605      	mov	r5, r0
 801b0c0:	6878      	ldr	r0, [r7, #4]
 801b0c2:	f7f8 ff08 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801b0c6:	4606      	mov	r6, r0
 801b0c8:	6838      	ldr	r0, [r7, #0]
 801b0ca:	f7ff f928 	bl	801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801b0ce:	4680      	mov	r8, r0
 801b0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0d2:	f7f8 ff16 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	9300      	str	r3, [sp, #0]
 801b0da:	4643      	mov	r3, r8
 801b0dc:	4632      	mov	r2, r6
 801b0de:	4629      	mov	r1, r5
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f000 fc1e 	bl	801b922 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 801b0e6:	bf00      	nop
 801b0e8:	3710      	adds	r7, #16
 801b0ea:	46bd      	mov	sp, r7
 801b0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b0f0 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	b084      	sub	sp, #16
 801b0f4:	af00      	add	r7, sp, #0
 801b0f6:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681a      	ldr	r2, [r3, #0]
 801b0fc:	f107 030c 	add.w	r3, r7, #12
 801b100:	4611      	mov	r1, r2
 801b102:	4618      	mov	r0, r3
 801b104:	f7ff faba 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	4618      	mov	r0, r3
 801b10c:	3710      	adds	r7, #16
 801b10e:	46bd      	mov	sp, r7
 801b110:	bd80      	pop	{r7, pc}

0801b112 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801b112:	b480      	push	{r7}
 801b114:	b083      	sub	sp, #12
 801b116:	af00      	add	r7, sp, #0
 801b118:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	3310      	adds	r3, #16
 801b11e:	4618      	mov	r0, r3
 801b120:	370c      	adds	r7, #12
 801b122:	46bd      	mov	sp, r7
 801b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b128:	4770      	bx	lr

0801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801b12a:	b580      	push	{r7, lr}
 801b12c:	b082      	sub	sp, #8
 801b12e:	af00      	add	r7, sp, #0
 801b130:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801b132:	6878      	ldr	r0, [r7, #4]
 801b134:	f7ff fa50 	bl	801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801b138:	4603      	mov	r3, r0
 801b13a:	4618      	mov	r0, r3
 801b13c:	3708      	adds	r7, #8
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}

0801b142 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801b142:	b5b0      	push	{r4, r5, r7, lr}
 801b144:	b08a      	sub	sp, #40	; 0x28
 801b146:	af00      	add	r7, sp, #0
 801b148:	60f8      	str	r0, [r7, #12]
 801b14a:	60b9      	str	r1, [r7, #8]
 801b14c:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801b14e:	68b8      	ldr	r0, [r7, #8]
 801b150:	f7fe f8af 	bl	80192b2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 801b154:	4603      	mov	r3, r0
 801b156:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801b158:	68b8      	ldr	r0, [r7, #8]
 801b15a:	f7ff ff31 	bl	801afc0 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 801b15e:	4603      	mov	r3, r0
 801b160:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801b162:	2301      	movs	r3, #1
 801b164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801b168:	69bb      	ldr	r3, [r7, #24]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d023      	beq.n	801b1b6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 801b16e:	69bb      	ldr	r3, [r7, #24]
 801b170:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801b172:	68bc      	ldr	r4, [r7, #8]
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681d      	ldr	r5, [r3, #0]
 801b178:	69bb      	ldr	r3, [r7, #24]
 801b17a:	4618      	mov	r0, r3
 801b17c:	f7ff fa2c 	bl	801a5d8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801b180:	4603      	mov	r3, r0
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	461a      	mov	r2, r3
 801b186:	4629      	mov	r1, r5
 801b188:	4620      	mov	r0, r4
 801b18a:	f7fe fa15 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801b18e:	4603      	mov	r3, r0
 801b190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801b194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d005      	beq.n	801b1a8 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 801b19c:	69bb      	ldr	r3, [r7, #24]
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f7fe fca5 	bl	8019aee <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	e004      	b.n	801b1b2 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 801b1a8:	69bb      	ldr	r3, [r7, #24]
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f7fe fc93 	bl	8019ad6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801b1b4:	e7d8      	b.n	801b168 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 801b1b6:	697a      	ldr	r2, [r7, #20]
 801b1b8:	f107 0310 	add.w	r3, r7, #16
 801b1bc:	4611      	mov	r1, r2
 801b1be:	4618      	mov	r0, r3
 801b1c0:	f7ff fa5c 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801b1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d01d      	beq.n	801b208 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 801b1cc:	68b8      	ldr	r0, [r7, #8]
 801b1ce:	f000 f8d3 	bl	801b378 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	61fb      	str	r3, [r7, #28]
 801b1d6:	f107 021c 	add.w	r2, r7, #28
 801b1da:	f107 0310 	add.w	r3, r7, #16
 801b1de:	4611      	mov	r1, r2
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7fe f9ba 	bl	801955a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEES9_>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	d008      	beq.n	801b1fe <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 801b1ec:	f107 0214 	add.w	r2, r7, #20
 801b1f0:	f107 0318 	add.w	r3, r7, #24
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	68f8      	ldr	r0, [r7, #12]
 801b1f8:	f000 fbaf 	bl	801b95a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17TIM_HandleTypeDefN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>
 801b1fc:	e027      	b.n	801b24e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 801b1fe:	f107 0310 	add.w	r3, r7, #16
 801b202:	4618      	mov	r0, r3
 801b204:	f000 f833 	bl	801b26e <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801b208:	68bc      	ldr	r4, [r7, #8]
 801b20a:	693b      	ldr	r3, [r7, #16]
 801b20c:	4618      	mov	r0, r3
 801b20e:	f7ff ff8c 	bl	801b12a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801b212:	4603      	mov	r3, r0
 801b214:	6819      	ldr	r1, [r3, #0]
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	461a      	mov	r2, r3
 801b21c:	4620      	mov	r0, r4
 801b21e:	f7fe f9cb 	bl	80195b8 <_ZNKSt4lessIP17TIM_HandleTypeDefEclES1_S1_>
 801b222:	4603      	mov	r3, r0
 801b224:	2b00      	cmp	r3, #0
 801b226:	d008      	beq.n	801b23a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 801b228:	f107 0214 	add.w	r2, r7, #20
 801b22c:	f107 0318 	add.w	r3, r7, #24
 801b230:	4619      	mov	r1, r3
 801b232:	68f8      	ldr	r0, [r7, #12]
 801b234:	f000 fb91 	bl	801b95a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17TIM_HandleTypeDefN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>
 801b238:	e009      	b.n	801b24e <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 801b23a:	2300      	movs	r3, #0
 801b23c:	623b      	str	r3, [r7, #32]
 801b23e:	f107 0220 	add.w	r2, r7, #32
 801b242:	f107 0310 	add.w	r3, r7, #16
 801b246:	4619      	mov	r1, r3
 801b248:	68f8      	ldr	r0, [r7, #12]
 801b24a:	f7f9 fe21 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801b24e:	68f8      	ldr	r0, [r7, #12]
 801b250:	3728      	adds	r7, #40	; 0x28
 801b252:	46bd      	mov	sp, r7
 801b254:	bdb0      	pop	{r4, r5, r7, pc}

0801b256 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801b256:	b480      	push	{r7}
 801b258:	b083      	sub	sp, #12
 801b25a:	af00      	add	r7, sp, #0
 801b25c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	330c      	adds	r3, #12
 801b262:	4618      	mov	r0, r3
 801b264:	370c      	adds	r7, #12
 801b266:	46bd      	mov	sp, r7
 801b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b26c:	4770      	bx	lr

0801b26e <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801b26e:	b580      	push	{r7, lr}
 801b270:	b082      	sub	sp, #8
 801b272:	af00      	add	r7, sp, #0
 801b274:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	681b      	ldr	r3, [r3, #0]
 801b27a:	4618      	mov	r0, r3
 801b27c:	f00a ff7b 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801b280:	4602      	mov	r2, r0
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	601a      	str	r2, [r3, #0]
	return *this;
 801b286:	687b      	ldr	r3, [r7, #4]
      }
 801b288:	4618      	mov	r0, r3
 801b28a:	3708      	adds	r7, #8
 801b28c:	46bd      	mov	sp, r7
 801b28e:	bd80      	pop	{r7, pc}

0801b290 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801b290:	b580      	push	{r7, lr}
 801b292:	b082      	sub	sp, #8
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	4618      	mov	r0, r3
 801b29e:	f00a ff68 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801b2a2:	4602      	mov	r2, r0
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	601a      	str	r2, [r3, #0]
	return *this;
 801b2a8:	687b      	ldr	r3, [r7, #4]
      }
 801b2aa:	4618      	mov	r0, r3
 801b2ac:	3708      	adds	r7, #8
 801b2ae:	46bd      	mov	sp, r7
 801b2b0:	bd80      	pop	{r7, pc}

0801b2b2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE9_M_valptrEv>:
      _M_valptr() const
 801b2b2:	b580      	push	{r7, lr}
 801b2b4:	b082      	sub	sp, #8
 801b2b6:	af00      	add	r7, sp, #0
 801b2b8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	3310      	adds	r3, #16
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f000 fb64 	bl	801b98c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE6_M_ptrEv>
 801b2c4:	4603      	mov	r3, r0
 801b2c6:	4618      	mov	r0, r3
 801b2c8:	3708      	adds	r7, #8
 801b2ca:	46bd      	mov	sp, r7
 801b2cc:	bd80      	pop	{r7, pc}

0801b2ce <_ZNKSt10_Select1stISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEclERKS6_>:
      operator()(const _Pair& __x) const
 801b2ce:	b480      	push	{r7}
 801b2d0:	b083      	sub	sp, #12
 801b2d2:	af00      	add	r7, sp, #0
 801b2d4:	6078      	str	r0, [r7, #4]
 801b2d6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801b2d8:	683b      	ldr	r3, [r7, #0]
 801b2da:	4618      	mov	r0, r3
 801b2dc:	370c      	adds	r7, #12
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e4:	4770      	bx	lr

0801b2e6 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b2e6:	b480      	push	{r7}
 801b2e8:	b083      	sub	sp, #12
 801b2ea:	af00      	add	r7, sp, #0
 801b2ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	370c      	adds	r7, #12
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2fa:	4770      	bx	lr

0801b2fc <_ZNKSt5dequeIP17TIM_HandleTypeDefSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b082      	sub	sp, #8
 801b300:	af00      	add	r7, sp, #0
 801b302:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	4618      	mov	r0, r3
 801b308:	f000 f8f3 	bl	801b4f2 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE19_M_get_Tp_allocatorEv>
 801b30c:	4603      	mov	r3, r0
 801b30e:	4618      	mov	r0, r3
 801b310:	f000 fb54 	bl	801b9bc <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE11_S_max_sizeERKS2_>
 801b314:	4603      	mov	r3, r0
 801b316:	4618      	mov	r0, r3
 801b318:	3708      	adds	r7, #8
 801b31a:	46bd      	mov	sp, r7
 801b31c:	bd80      	pop	{r7, pc}

0801b31e <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 801b31e:	b580      	push	{r7, lr}
 801b320:	b082      	sub	sp, #8
 801b322:	af00      	add	r7, sp, #0
 801b324:	6078      	str	r0, [r7, #4]
 801b326:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	1c5a      	adds	r2, r3, #1
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 801b330:	6879      	ldr	r1, [r7, #4]
 801b332:	6a48      	ldr	r0, [r1, #36]	; 0x24
 801b334:	6879      	ldr	r1, [r7, #4]
 801b336:	6809      	ldr	r1, [r1, #0]
 801b338:	1a41      	subs	r1, r0, r1
 801b33a:	1089      	asrs	r1, r1, #2
 801b33c:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 801b33e:	429a      	cmp	r2, r3
 801b340:	d904      	bls.n	801b34c <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 801b342:	2200      	movs	r2, #0
 801b344:	6839      	ldr	r1, [r7, #0]
 801b346:	6878      	ldr	r0, [r7, #4]
 801b348:	f000 fb82 	bl	801ba50 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb>
      }
 801b34c:	bf00      	nop
 801b34e:	3708      	adds	r7, #8
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}

0801b354 <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE16_M_allocate_nodeEv>:
      _M_allocate_node()
 801b354:	b590      	push	{r4, r7, lr}
 801b356:	b083      	sub	sp, #12
 801b358:	af00      	add	r7, sp, #0
 801b35a:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 801b35c:	687c      	ldr	r4, [r7, #4]
 801b35e:	2004      	movs	r0, #4
 801b360:	f7fd f9c8 	bl	80186f4 <_ZSt16__deque_buf_sizej>
 801b364:	4603      	mov	r3, r0
 801b366:	4619      	mov	r1, r3
 801b368:	4620      	mov	r0, r4
 801b36a:	f000 fc0b 	bl	801bb84 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8allocateERS2_j>
 801b36e:	4603      	mov	r3, r0
      }
 801b370:	4618      	mov	r0, r3
 801b372:	370c      	adds	r7, #12
 801b374:	46bd      	mov	sp, r7
 801b376:	bd90      	pop	{r4, r7, pc}

0801b378 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801b378:	b580      	push	{r7, lr}
 801b37a:	b084      	sub	sp, #16
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	68da      	ldr	r2, [r3, #12]
 801b384:	f107 030c 	add.w	r3, r7, #12
 801b388:	4611      	mov	r1, r2
 801b38a:	4618      	mov	r0, r3
 801b38c:	f7ff f976 	bl	801a67c <_ZNSt17_Rb_tree_iteratorISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEC1EPSt18_Rb_tree_node_base>
 801b390:	68fb      	ldr	r3, [r7, #12]
 801b392:	4618      	mov	r0, r3
 801b394:	3710      	adds	r7, #16
 801b396:	46bd      	mov	sp, r7
 801b398:	bd80      	pop	{r7, pc}

0801b39a <_ZSt12construct_atIhJhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801b39a:	b590      	push	{r4, r7, lr}
 801b39c:	b083      	sub	sp, #12
 801b39e:	af00      	add	r7, sp, #0
 801b3a0:	6078      	str	r0, [r7, #4]
 801b3a2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801b3a4:	6838      	ldr	r0, [r7, #0]
 801b3a6:	f7f8 fa95 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	781c      	ldrb	r4, [r3, #0]
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	4619      	mov	r1, r3
 801b3b2:	2001      	movs	r0, #1
 801b3b4:	f7e6 f850 	bl	8001458 <_ZnwjPv>
 801b3b8:	4603      	mov	r3, r0
 801b3ba:	4622      	mov	r2, r4
 801b3bc:	701a      	strb	r2, [r3, #0]
 801b3be:	4618      	mov	r0, r3
 801b3c0:	370c      	adds	r7, #12
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	bd90      	pop	{r4, r7, pc}

0801b3c6 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801b3c6:	b580      	push	{r7, lr}
 801b3c8:	b084      	sub	sp, #16
 801b3ca:	af00      	add	r7, sp, #0
 801b3cc:	60f8      	str	r0, [r7, #12]
 801b3ce:	60b9      	str	r1, [r7, #8]
 801b3d0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801b3d2:	6878      	ldr	r0, [r7, #4]
 801b3d4:	f7f8 fa7e 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801b3d8:	4603      	mov	r3, r0
 801b3da:	4619      	mov	r1, r3
 801b3dc:	68b8      	ldr	r0, [r7, #8]
 801b3de:	f7ff ffdc 	bl	801b39a <_ZSt12construct_atIhJhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 801b3e2:	bf00      	nop
 801b3e4:	3710      	adds	r7, #16
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}

0801b3ea <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE7_M_addrEv>:
      _M_addr() noexcept
 801b3ea:	b480      	push	{r7}
 801b3ec:	b083      	sub	sp, #12
 801b3ee:	af00      	add	r7, sp, #0
 801b3f0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	4618      	mov	r0, r3
 801b3f6:	370c      	adds	r7, #12
 801b3f8:	46bd      	mov	sp, r7
 801b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3fe:	4770      	bx	lr

0801b400 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801b400:	b480      	push	{r7}
 801b402:	b083      	sub	sp, #12
 801b404:	af00      	add	r7, sp, #0
 801b406:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	689b      	ldr	r3, [r3, #8]
 801b40c:	4618      	mov	r0, r3
 801b40e:	370c      	adds	r7, #12
 801b410:	46bd      	mov	sp, r7
 801b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b416:	4770      	bx	lr

0801b418 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801b418:	b480      	push	{r7}
 801b41a:	b083      	sub	sp, #12
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	68db      	ldr	r3, [r3, #12]
 801b424:	4618      	mov	r0, r3
 801b426:	370c      	adds	r7, #12
 801b428:	46bd      	mov	sp, r7
 801b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b42e:	4770      	bx	lr

0801b430 <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefEC1Ev>:
 801b430:	b480      	push	{r7}
 801b432:	b083      	sub	sp, #12
 801b434:	af00      	add	r7, sp, #0
 801b436:	6078      	str	r0, [r7, #4]
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	4618      	mov	r0, r3
 801b43c:	370c      	adds	r7, #12
 801b43e:	46bd      	mov	sp, r7
 801b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b444:	4770      	bx	lr

0801b446 <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_EC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 801b446:	b480      	push	{r7}
 801b448:	b083      	sub	sp, #12
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2200      	movs	r2, #0
 801b452:	601a      	str	r2, [r3, #0]
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	2200      	movs	r2, #0
 801b458:	605a      	str	r2, [r3, #4]
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2200      	movs	r2, #0
 801b45e:	609a      	str	r2, [r3, #8]
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	2200      	movs	r2, #0
 801b464:	60da      	str	r2, [r3, #12]
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	4618      	mov	r0, r3
 801b46a:	370c      	adds	r7, #12
 801b46c:	46bd      	mov	sp, r7
 801b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b472:	4770      	bx	lr

0801b474 <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 801b474:	b580      	push	{r7, lr}
 801b476:	b084      	sub	sp, #16
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6039      	str	r1, [r7, #0]
 801b47e:	687b      	ldr	r3, [r7, #4]
 801b480:	60fb      	str	r3, [r7, #12]
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801b486:	f7e5 ffdf 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b48a:	4603      	mov	r3, r0
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d006      	beq.n	801b49e <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801b490:	68bb      	ldr	r3, [r7, #8]
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	4618      	mov	r0, r3
 801b496:	f00a fe07 	bl	80260a8 <_Znwj>
 801b49a:	4603      	mov	r3, r0
 801b49c:	e006      	b.n	801b4ac <_ZNSt16allocator_traitsISaIPP17TIM_HandleTypeDefEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801b49e:	2200      	movs	r2, #0
 801b4a0:	68b9      	ldr	r1, [r7, #8]
 801b4a2:	68f8      	ldr	r0, [r7, #12]
 801b4a4:	f000 fd40 	bl	801bf28 <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE8allocateEjPKv>
 801b4a8:	4603      	mov	r3, r0
 801b4aa:	bf00      	nop
      { return __a.allocate(__n); }
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3710      	adds	r7, #16
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}

0801b4b4 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	b088      	sub	sp, #32
 801b4b8:	af00      	add	r7, sp, #0
 801b4ba:	60f8      	str	r0, [r7, #12]
 801b4bc:	60b9      	str	r1, [r7, #8]
 801b4be:	607a      	str	r2, [r7, #4]
 801b4c0:	68fb      	ldr	r3, [r7, #12]
 801b4c2:	61fb      	str	r3, [r7, #28]
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	61bb      	str	r3, [r7, #24]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801b4cc:	f7e5 ffbc 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b4d0:	4603      	mov	r3, r0
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d003      	beq.n	801b4de <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 801b4d6:	69b8      	ldr	r0, [r7, #24]
 801b4d8:	f00a fde2 	bl	80260a0 <_ZdlPv>
	    return;
 801b4dc:	e005      	b.n	801b4ea <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801b4de:	697a      	ldr	r2, [r7, #20]
 801b4e0:	69b9      	ldr	r1, [r7, #24]
 801b4e2:	69f8      	ldr	r0, [r7, #28]
 801b4e4:	f000 fd3f 	bl	801bf66 <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 801b4e8:	bf00      	nop
 801b4ea:	bf00      	nop
 801b4ec:	3720      	adds	r7, #32
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	bd80      	pop	{r7, pc}

0801b4f2 <_ZNKSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801b4f2:	b480      	push	{r7}
 801b4f4:	b083      	sub	sp, #12
 801b4f6:	af00      	add	r7, sp, #0
 801b4f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	370c      	adds	r7, #12
 801b500:	46bd      	mov	sp, r7
 801b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b506:	4770      	bx	lr

0801b508 <_ZNSaIPP17TIM_HandleTypeDefEC1IS0_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 801b508:	b580      	push	{r7, lr}
 801b50a:	b082      	sub	sp, #8
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	6078      	str	r0, [r7, #4]
 801b510:	6039      	str	r1, [r7, #0]
 801b512:	6878      	ldr	r0, [r7, #4]
 801b514:	f000 fb56 	bl	801bbc4 <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefEC1Ev>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	4618      	mov	r0, r3
 801b51c:	3708      	adds	r7, #8
 801b51e:	46bd      	mov	sp, r7
 801b520:	bd80      	pop	{r7, pc}

0801b522 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801b522:	b480      	push	{r7}
 801b524:	b083      	sub	sp, #12
 801b526:	af00      	add	r7, sp, #0
 801b528:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	4618      	mov	r0, r3
 801b52e:	370c      	adds	r7, #12
 801b530:	46bd      	mov	sp, r7
 801b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b536:	4770      	bx	lr

0801b538 <_ZNSt13_Rb_tree_nodeIP17TIM_HandleTypeDefE9_M_valptrEv>:
      _M_valptr()
 801b538:	b580      	push	{r7, lr}
 801b53a:	b082      	sub	sp, #8
 801b53c:	af00      	add	r7, sp, #0
 801b53e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	3310      	adds	r3, #16
 801b544:	4618      	mov	r0, r3
 801b546:	f000 fb57 	bl	801bbf8 <_ZN9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE6_M_ptrEv>
 801b54a:	4603      	mov	r3, r0
 801b54c:	4618      	mov	r0, r3
 801b54e:	3708      	adds	r7, #8
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}

0801b554 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE7destroyIS2_EEvRS4_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
 801b55c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801b55e:	6838      	ldr	r0, [r7, #0]
 801b560:	f7ff fbbd 	bl	801acde <_ZSt10destroy_atIP17TIM_HandleTypeDefEvPT_>
	}
 801b564:	bf00      	nop
 801b566:	3708      	adds	r7, #8
 801b568:	46bd      	mov	sp, r7
 801b56a:	bd80      	pop	{r7, pc}

0801b56c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b088      	sub	sp, #32
 801b570:	af00      	add	r7, sp, #0
 801b572:	60f8      	str	r0, [r7, #12]
 801b574:	60b9      	str	r1, [r7, #8]
 801b576:	607a      	str	r2, [r7, #4]
 801b578:	68fb      	ldr	r3, [r7, #12]
 801b57a:	61fb      	str	r3, [r7, #28]
 801b57c:	68bb      	ldr	r3, [r7, #8]
 801b57e:	61bb      	str	r3, [r7, #24]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801b584:	f7e5 ff60 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b588:	4603      	mov	r3, r0
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d003      	beq.n	801b596 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE10deallocateERS4_PS3_j+0x2a>
	    ::operator delete(__p);
 801b58e:	69b8      	ldr	r0, [r7, #24]
 801b590:	f00a fd86 	bl	80260a0 <_ZdlPv>
	    return;
 801b594:	e005      	b.n	801b5a2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE10deallocateERS4_PS3_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801b596:	697a      	ldr	r2, [r7, #20]
 801b598:	69b9      	ldr	r1, [r7, #24]
 801b59a:	69f8      	ldr	r0, [r7, #28]
 801b59c:	f000 fcfd 	bl	801bf9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE10deallocateEPS4_j>
      { __a.deallocate(__p, __n); }
 801b5a0:	bf00      	nop
 801b5a2:	bf00      	nop
 801b5a4:	3720      	adds	r7, #32
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	bd80      	pop	{r7, pc}

0801b5aa <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801b5aa:	b480      	push	{r7}
 801b5ac:	b083      	sub	sp, #12
 801b5ae:	af00      	add	r7, sp, #0
 801b5b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	370c      	adds	r7, #12
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5be:	4770      	bx	lr

0801b5c0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b082      	sub	sp, #8
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
 801b5c8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801b5ca:	6838      	ldr	r0, [r7, #0]
 801b5cc:	f000 fb20 	bl	801bc10 <_ZSt10destroy_atISt4pairIKhN4Time5AlarmEEEvPT_>
	}
 801b5d0:	bf00      	nop
 801b5d2:	3708      	adds	r7, #8
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}

0801b5d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b088      	sub	sp, #32
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	60f8      	str	r0, [r7, #12]
 801b5e0:	60b9      	str	r1, [r7, #8]
 801b5e2:	607a      	str	r2, [r7, #4]
 801b5e4:	68fb      	ldr	r3, [r7, #12]
 801b5e6:	61fb      	str	r3, [r7, #28]
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	61bb      	str	r3, [r7, #24]
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801b5f0:	f7e5 ff2a 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b5f4:	4603      	mov	r3, r0
 801b5f6:	2b00      	cmp	r3, #0
 801b5f8:	d003      	beq.n	801b602 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 801b5fa:	69b8      	ldr	r0, [r7, #24]
 801b5fc:	f00a fd50 	bl	80260a0 <_ZdlPv>
	    return;
 801b600:	e005      	b.n	801b60e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801b602:	697a      	ldr	r2, [r7, #20]
 801b604:	69b9      	ldr	r1, [r7, #24]
 801b606:	69f8      	ldr	r0, [r7, #28]
 801b608:	f000 fcd9 	bl	801bfbe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 801b60c:	bf00      	nop
 801b60e:	bf00      	nop
 801b610:	3720      	adds	r7, #32
 801b612:	46bd      	mov	sp, r7
 801b614:	bd80      	pop	{r7, pc}

0801b616 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 801b616:	b480      	push	{r7}
 801b618:	b083      	sub	sp, #12
 801b61a:	af00      	add	r7, sp, #0
 801b61c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	4618      	mov	r0, r3
 801b622:	370c      	adds	r7, #12
 801b624:	46bd      	mov	sp, r7
 801b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62a:	4770      	bx	lr

0801b62c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801b62c:	b580      	push	{r7, lr}
 801b62e:	b082      	sub	sp, #8
 801b630:	af00      	add	r7, sp, #0
 801b632:	6078      	str	r0, [r7, #4]
 801b634:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801b636:	6838      	ldr	r0, [r7, #0]
 801b638:	f000 fb03 	bl	801bc42 <_ZSt10destroy_atISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEvPT_>
	}
 801b63c:	bf00      	nop
 801b63e:	3708      	adds	r7, #8
 801b640:	46bd      	mov	sp, r7
 801b642:	bd80      	pop	{r7, pc}

0801b644 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801b644:	b580      	push	{r7, lr}
 801b646:	b088      	sub	sp, #32
 801b648:	af00      	add	r7, sp, #0
 801b64a:	60f8      	str	r0, [r7, #12]
 801b64c:	60b9      	str	r1, [r7, #8]
 801b64e:	607a      	str	r2, [r7, #4]
 801b650:	68fb      	ldr	r3, [r7, #12]
 801b652:	61fb      	str	r3, [r7, #28]
 801b654:	68bb      	ldr	r3, [r7, #8]
 801b656:	61bb      	str	r3, [r7, #24]
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801b65c:	f7e5 fef4 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b660:	4603      	mov	r3, r0
 801b662:	2b00      	cmp	r3, #0
 801b664:	d003      	beq.n	801b66e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 801b666:	69b8      	ldr	r0, [r7, #24]
 801b668:	f00a fd1a 	bl	80260a0 <_ZdlPv>
	    return;
 801b66c:	e005      	b.n	801b67a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801b66e:	697a      	ldr	r2, [r7, #20]
 801b670:	69b9      	ldr	r1, [r7, #24]
 801b672:	69f8      	ldr	r0, [r7, #28]
 801b674:	f000 fcb4 	bl	801bfe0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 801b678:	bf00      	nop
 801b67a:	bf00      	nop
 801b67c:	3720      	adds	r7, #32
 801b67e:	46bd      	mov	sp, r7
 801b680:	bd80      	pop	{r7, pc}

0801b682 <_ZNKSt13_Rb_tree_nodeIP17TIM_HandleTypeDefE9_M_valptrEv>:
      _M_valptr() const
 801b682:	b580      	push	{r7, lr}
 801b684:	b082      	sub	sp, #8
 801b686:	af00      	add	r7, sp, #0
 801b688:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	3310      	adds	r3, #16
 801b68e:	4618      	mov	r0, r3
 801b690:	f000 fae2 	bl	801bc58 <_ZNK9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE6_M_ptrEv>
 801b694:	4603      	mov	r3, r0
 801b696:	4618      	mov	r0, r3
 801b698:	3708      	adds	r7, #8
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd80      	pop	{r7, pc}

0801b69e <_ZNKSt9_IdentityIP17TIM_HandleTypeDefEclERKS1_>:
      operator()(const _Tp& __x) const
 801b69e:	b480      	push	{r7}
 801b6a0:	b083      	sub	sp, #12
 801b6a2:	af00      	add	r7, sp, #0
 801b6a4:	6078      	str	r0, [r7, #4]
 801b6a6:	6039      	str	r1, [r7, #0]
      { return __x; }
 801b6a8:	683b      	ldr	r3, [r7, #0]
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	370c      	adds	r7, #12
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6b4:	4770      	bx	lr

0801b6b6 <_ZSt7forwardIRPSt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801b6b6:	b480      	push	{r7}
 801b6b8:	b083      	sub	sp, #12
 801b6ba:	af00      	add	r7, sp, #0
 801b6bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	370c      	adds	r7, #12
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ca:	4770      	bx	lr

0801b6cc <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE14_M_create_nodeIJS1_EEEPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	b084      	sub	sp, #16
 801b6d0:	af00      	add	r7, sp, #0
 801b6d2:	6078      	str	r0, [r7, #4]
 801b6d4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801b6d6:	6878      	ldr	r0, [r7, #4]
 801b6d8:	f000 faca 	bl	801bc70 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>
 801b6dc:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801b6de:	6838      	ldr	r0, [r7, #0]
 801b6e0:	f7fe faf5 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	461a      	mov	r2, r3
 801b6e8:	68f9      	ldr	r1, [r7, #12]
 801b6ea:	6878      	ldr	r0, [r7, #4]
 801b6ec:	f000 fad1 	bl	801bc92 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>
	  return __tmp;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
	}
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	3710      	adds	r7, #16
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	bd80      	pop	{r7, pc}

0801b6fa <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>:
        constexpr _Head_base(_UHead&& __h)
 801b6fa:	b580      	push	{r7, lr}
 801b6fc:	b082      	sub	sp, #8
 801b6fe:	af00      	add	r7, sp, #0
 801b700:	6078      	str	r0, [r7, #4]
 801b702:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 801b704:	6838      	ldr	r0, [r7, #0]
 801b706:	f7f8 f8e5 	bl	80138d4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801b70a:	4602      	mov	r2, r0
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	601a      	str	r2, [r3, #0]
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	4618      	mov	r0, r3
 801b714:	3708      	adds	r7, #8
 801b716:	46bd      	mov	sp, r7
 801b718:	bd80      	pop	{r7, pc}

0801b71a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801b71a:	b580      	push	{r7, lr}
 801b71c:	b084      	sub	sp, #16
 801b71e:	af00      	add	r7, sp, #0
 801b720:	6078      	str	r0, [r7, #4]
 801b722:	6039      	str	r1, [r7, #0]
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	60fb      	str	r3, [r7, #12]
 801b728:	683b      	ldr	r3, [r7, #0]
 801b72a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801b72c:	f7e5 fe8c 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b730:	4603      	mov	r3, r0
 801b732:	2b00      	cmp	r3, #0
 801b734:	d008      	beq.n	801b748 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE8allocateERS7_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	222c      	movs	r2, #44	; 0x2c
 801b73a:	fb02 f303 	mul.w	r3, r2, r3
 801b73e:	4618      	mov	r0, r3
 801b740:	f00a fcb2 	bl	80260a8 <_Znwj>
 801b744:	4603      	mov	r3, r0
 801b746:	e006      	b.n	801b756 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE8allocateERS7_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801b748:	2200      	movs	r2, #0
 801b74a:	68b9      	ldr	r1, [r7, #8]
 801b74c:	68f8      	ldr	r0, [r7, #12]
 801b74e:	f000 fc98 	bl	801c082 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE8allocateEjPKv>
 801b752:	4603      	mov	r3, r0
 801b754:	bf00      	nop
      { return __a.allocate(__n); }
 801b756:	4618      	mov	r0, r3
 801b758:	3710      	adds	r7, #16
 801b75a:	46bd      	mov	sp, r7
 801b75c:	bd80      	pop	{r7, pc}

0801b75e <_ZNSt5tupleIJOhEEC1EOS1_>:
      constexpr tuple(tuple&&) = default;
 801b75e:	b580      	push	{r7, lr}
 801b760:	b082      	sub	sp, #8
 801b762:	af00      	add	r7, sp, #0
 801b764:	6078      	str	r0, [r7, #4]
 801b766:	6039      	str	r1, [r7, #0]
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	683a      	ldr	r2, [r7, #0]
 801b76c:	4611      	mov	r1, r2
 801b76e:	4618      	mov	r0, r3
 801b770:	f000 faaf 	bl	801bcd2 <_ZNSt11_Tuple_implILj0EJOhEEC1EOS1_>
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	4618      	mov	r0, r3
 801b778:	3708      	adds	r7, #8
 801b77a:	46bd      	mov	sp, r7
 801b77c:	bd80      	pop	{r7, pc}

0801b77e <_ZSt12construct_atISt4pairIKhN4Time5AlarmEEJRKSt21piecewise_construct_tSt5tupleIJOhEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801b77e:	b5b0      	push	{r4, r5, r7, lr}
 801b780:	b088      	sub	sp, #32
 801b782:	af00      	add	r7, sp, #0
 801b784:	60f8      	str	r0, [r7, #12]
 801b786:	60b9      	str	r1, [r7, #8]
 801b788:	607a      	str	r2, [r7, #4]
 801b78a:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801b78c:	68b8      	ldr	r0, [r7, #8]
 801b78e:	f7f8 fba2 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801b792:	6878      	ldr	r0, [r7, #4]
 801b794:	f7fe fbc3 	bl	8019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801b798:	4602      	mov	r2, r0
 801b79a:	f107 0318 	add.w	r3, r7, #24
 801b79e:	4611      	mov	r1, r2
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7ff ffdc 	bl	801b75e <_ZNSt5tupleIJOhEEC1EOS1_>
 801b7a6:	f107 0418 	add.w	r4, r7, #24
 801b7aa:	6838      	ldr	r0, [r7, #0]
 801b7ac:	f7f8 fba9 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801b7b0:	68fb      	ldr	r3, [r7, #12]
 801b7b2:	4619      	mov	r1, r3
 801b7b4:	201c      	movs	r0, #28
 801b7b6:	f7e5 fe4f 	bl	8001458 <_ZnwjPv>
 801b7ba:	4605      	mov	r5, r0
 801b7bc:	7f3b      	ldrb	r3, [r7, #28]
 801b7be:	4622      	mov	r2, r4
 801b7c0:	7d39      	ldrb	r1, [r7, #20]
 801b7c2:	4628      	mov	r0, r5
 801b7c4:	f000 facf 	bl	801bd66 <_ZNSt4pairIKhN4Time5AlarmEEC1IJOhEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 801b7c8:	462b      	mov	r3, r5
 801b7ca:	4618      	mov	r0, r3
 801b7cc:	3720      	adds	r7, #32
 801b7ce:	46bd      	mov	sp, r7
 801b7d0:	bdb0      	pop	{r4, r5, r7, pc}

0801b7d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJOhEESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801b7d2:	b5b0      	push	{r4, r5, r7, lr}
 801b7d4:	b084      	sub	sp, #16
 801b7d6:	af00      	add	r7, sp, #0
 801b7d8:	60f8      	str	r0, [r7, #12]
 801b7da:	60b9      	str	r1, [r7, #8]
 801b7dc:	607a      	str	r2, [r7, #4]
 801b7de:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801b7e0:	6878      	ldr	r0, [r7, #4]
 801b7e2:	f7f8 fb78 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	6838      	ldr	r0, [r7, #0]
 801b7ea:	f7fe fb98 	bl	8019f1e <_ZSt7forwardISt5tupleIJOhEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801b7ee:	4605      	mov	r5, r0
 801b7f0:	6a38      	ldr	r0, [r7, #32]
 801b7f2:	f7f8 fb86 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801b7f6:	4603      	mov	r3, r0
 801b7f8:	462a      	mov	r2, r5
 801b7fa:	4621      	mov	r1, r4
 801b7fc:	68b8      	ldr	r0, [r7, #8]
 801b7fe:	f7ff ffbe 	bl	801b77e <_ZSt12construct_atISt4pairIKhN4Time5AlarmEEJRKSt21piecewise_construct_tSt5tupleIJOhEES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801b802:	bf00      	nop
 801b804:	3710      	adds	r7, #16
 801b806:	46bd      	mov	sp, r7
 801b808:	bdb0      	pop	{r4, r5, r7, pc}

0801b80a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801b80a:	b580      	push	{r7, lr}
 801b80c:	b084      	sub	sp, #16
 801b80e:	af00      	add	r7, sp, #0
 801b810:	60f8      	str	r0, [r7, #12]
 801b812:	60b9      	str	r1, [r7, #8]
 801b814:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801b816:	68b8      	ldr	r0, [r7, #8]
 801b818:	f000 fab9 	bl	801bd8e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 801b81c:	4603      	mov	r3, r0
 801b81e:	681a      	ldr	r2, [r3, #0]
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	601a      	str	r2, [r3, #0]
 801b824:	6878      	ldr	r0, [r7, #4]
 801b826:	f7f9 feff 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801b82a:	4603      	mov	r3, r0
 801b82c:	681a      	ldr	r2, [r3, #0]
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	605a      	str	r2, [r3, #4]
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	4618      	mov	r0, r3
 801b836:	3710      	adds	r7, #16
 801b838:	46bd      	mov	sp, r7
 801b83a:	bd80      	pop	{r7, pc}

0801b83c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801b83c:	b580      	push	{r7, lr}
 801b83e:	b082      	sub	sp, #8
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801b844:	6878      	ldr	r0, [r7, #4]
 801b846:	f000 faad 	bl	801bda4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE7_M_addrEv>
 801b84a:	4603      	mov	r3, r0
 801b84c:	4618      	mov	r0, r3
 801b84e:	3708      	adds	r7, #8
 801b850:	46bd      	mov	sp, r7
 801b852:	bd80      	pop	{r7, pc}

0801b854 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE7_M_addrEv>:
      _M_addr() noexcept
 801b854:	b480      	push	{r7}
 801b856:	b083      	sub	sp, #12
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	4618      	mov	r0, r3
 801b860:	370c      	adds	r7, #12
 801b862:	46bd      	mov	sp, r7
 801b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b868:	4770      	bx	lr

0801b86a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 801b86a:	b580      	push	{r7, lr}
 801b86c:	b084      	sub	sp, #16
 801b86e:	af00      	add	r7, sp, #0
 801b870:	6078      	str	r0, [r7, #4]
 801b872:	6039      	str	r1, [r7, #0]
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	60fb      	str	r3, [r7, #12]
 801b878:	683b      	ldr	r3, [r7, #0]
 801b87a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801b87c:	f7e5 fde4 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801b880:	4603      	mov	r3, r0
 801b882:	2b00      	cmp	r3, #0
 801b884:	d008      	beq.n	801b898 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE8allocateERS9_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	222c      	movs	r2, #44	; 0x2c
 801b88a:	fb02 f303 	mul.w	r3, r2, r3
 801b88e:	4618      	mov	r0, r3
 801b890:	f00a fc0a 	bl	80260a8 <_Znwj>
 801b894:	4603      	mov	r3, r0
 801b896:	e006      	b.n	801b8a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE8allocateERS9_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801b898:	2200      	movs	r2, #0
 801b89a:	68b9      	ldr	r1, [r7, #8]
 801b89c:	68f8      	ldr	r0, [r7, #12]
 801b89e:	f000 fc43 	bl	801c128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE8allocateEjPKv>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	bf00      	nop
      { return __a.allocate(__n); }
 801b8a6:	4618      	mov	r0, r3
 801b8a8:	3710      	adds	r7, #16
 801b8aa:	46bd      	mov	sp, r7
 801b8ac:	bd80      	pop	{r7, pc}

0801b8ae <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>:
 801b8ae:	b580      	push	{r7, lr}
 801b8b0:	b082      	sub	sp, #8
 801b8b2:	af00      	add	r7, sp, #0
 801b8b4:	6078      	str	r0, [r7, #4]
 801b8b6:	6039      	str	r1, [r7, #0]
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	683a      	ldr	r2, [r7, #0]
 801b8bc:	4611      	mov	r1, r2
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f000 fa7b 	bl	801bdba <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>
 801b8c4:	687b      	ldr	r3, [r7, #4]
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	3708      	adds	r7, #8
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	bd80      	pop	{r7, pc}

0801b8ce <_ZSt12construct_atISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801b8ce:	b5b0      	push	{r4, r5, r7, lr}
 801b8d0:	b088      	sub	sp, #32
 801b8d2:	af00      	add	r7, sp, #0
 801b8d4:	60f8      	str	r0, [r7, #12]
 801b8d6:	60b9      	str	r1, [r7, #8]
 801b8d8:	607a      	str	r2, [r7, #4]
 801b8da:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801b8dc:	68b8      	ldr	r0, [r7, #8]
 801b8de:	f7f8 fafa 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801b8e2:	6878      	ldr	r0, [r7, #4]
 801b8e4:	f7fe fd1b 	bl	801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801b8e8:	4602      	mov	r2, r0
 801b8ea:	f107 0318 	add.w	r3, r7, #24
 801b8ee:	4611      	mov	r1, r2
 801b8f0:	4618      	mov	r0, r3
 801b8f2:	f7ff ffdc 	bl	801b8ae <_ZNSt5tupleIJRKP17TIM_HandleTypeDefEEC1EOS4_>
 801b8f6:	f107 0418 	add.w	r4, r7, #24
 801b8fa:	6838      	ldr	r0, [r7, #0]
 801b8fc:	f7f8 fb01 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	4619      	mov	r1, r3
 801b904:	201c      	movs	r0, #28
 801b906:	f7e5 fda7 	bl	8001458 <_ZnwjPv>
 801b90a:	4605      	mov	r5, r0
 801b90c:	7f3b      	ldrb	r3, [r7, #28]
 801b90e:	4622      	mov	r2, r4
 801b910:	7d39      	ldrb	r1, [r7, #20]
 801b912:	4628      	mov	r0, r5
 801b914:	f000 fa8d 	bl	801be32 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 801b918:	462b      	mov	r3, r5
 801b91a:	4618      	mov	r0, r3
 801b91c:	3720      	adds	r7, #32
 801b91e:	46bd      	mov	sp, r7
 801b920:	bdb0      	pop	{r4, r5, r7, pc}

0801b922 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801b922:	b5b0      	push	{r4, r5, r7, lr}
 801b924:	b084      	sub	sp, #16
 801b926:	af00      	add	r7, sp, #0
 801b928:	60f8      	str	r0, [r7, #12]
 801b92a:	60b9      	str	r1, [r7, #8]
 801b92c:	607a      	str	r2, [r7, #4]
 801b92e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	f7f8 fad0 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801b936:	4604      	mov	r4, r0
 801b938:	6838      	ldr	r0, [r7, #0]
 801b93a:	f7fe fcf0 	bl	801a31e <_ZSt7forwardISt5tupleIJRKP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 801b93e:	4605      	mov	r5, r0
 801b940:	6a38      	ldr	r0, [r7, #32]
 801b942:	f7f8 fade 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801b946:	4603      	mov	r3, r0
 801b948:	462a      	mov	r2, r5
 801b94a:	4621      	mov	r1, r4
 801b94c:	68b8      	ldr	r0, [r7, #8]
 801b94e:	f7ff ffbe 	bl	801b8ce <_ZSt12construct_atISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 801b952:	bf00      	nop
 801b954:	3710      	adds	r7, #16
 801b956:	46bd      	mov	sp, r7
 801b958:	bdb0      	pop	{r4, r5, r7, pc}

0801b95a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17TIM_HandleTypeDefN4Time5AlarmEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801b95a:	b580      	push	{r7, lr}
 801b95c:	b084      	sub	sp, #16
 801b95e:	af00      	add	r7, sp, #0
 801b960:	60f8      	str	r0, [r7, #12]
 801b962:	60b9      	str	r1, [r7, #8]
 801b964:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801b966:	68b8      	ldr	r0, [r7, #8]
 801b968:	f000 fa77 	bl	801be5a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEOT_RNSt16remove_referenceISB_E4typeE>
 801b96c:	4603      	mov	r3, r0
 801b96e:	681a      	ldr	r2, [r3, #0]
 801b970:	68fb      	ldr	r3, [r7, #12]
 801b972:	601a      	str	r2, [r3, #0]
 801b974:	6878      	ldr	r0, [r7, #4]
 801b976:	f7f9 fe57 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801b97a:	4603      	mov	r3, r0
 801b97c:	681a      	ldr	r2, [r3, #0]
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	605a      	str	r2, [r3, #4]
 801b982:	68fb      	ldr	r3, [r7, #12]
 801b984:	4618      	mov	r0, r3
 801b986:	3710      	adds	r7, #16
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801b994:	6878      	ldr	r0, [r7, #4]
 801b996:	f000 fa6b 	bl	801be70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE7_M_addrEv>
 801b99a:	4603      	mov	r3, r0
 801b99c:	4618      	mov	r0, r3
 801b99e:	3708      	adds	r7, #8
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	bd80      	pop	{r7, pc}

0801b9a4 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801b9a4:	b480      	push	{r7}
 801b9a6:	b083      	sub	sp, #12
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801b9ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	370c      	adds	r7, #12
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ba:	4770      	bx	lr

0801b9bc <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b084      	sub	sp, #16
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 801b9c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b9c8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801b9ca:	6878      	ldr	r0, [r7, #4]
 801b9cc:	f7ff ffea 	bl	801b9a4 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8max_sizeERKS2_>
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801b9d4:	f107 0208 	add.w	r2, r7, #8
 801b9d8:	f107 030c 	add.w	r3, r7, #12
 801b9dc:	4611      	mov	r1, r2
 801b9de:	4618      	mov	r0, r3
 801b9e0:	f7f5 fd9a 	bl	8011518 <_ZSt3minIjERKT_S2_S2_>
 801b9e4:	4603      	mov	r3, r0
 801b9e6:	681b      	ldr	r3, [r3, #0]
      }
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	3710      	adds	r7, #16
 801b9ec:	46bd      	mov	sp, r7
 801b9ee:	bd80      	pop	{r7, pc}

0801b9f0 <_ZSt4copyIPPP17TIM_HandleTypeDefS3_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 801b9f0:	b590      	push	{r4, r7, lr}
 801b9f2:	b085      	sub	sp, #20
 801b9f4:	af00      	add	r7, sp, #0
 801b9f6:	60f8      	str	r0, [r7, #12]
 801b9f8:	60b9      	str	r1, [r7, #8]
 801b9fa:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801b9fc:	68f8      	ldr	r0, [r7, #12]
 801b9fe:	f000 fa42 	bl	801be86 <_ZSt12__miter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801ba02:	4604      	mov	r4, r0
 801ba04:	68b8      	ldr	r0, [r7, #8]
 801ba06:	f000 fa3e 	bl	801be86 <_ZSt12__miter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	687a      	ldr	r2, [r7, #4]
 801ba0e:	4619      	mov	r1, r3
 801ba10:	4620      	mov	r0, r4
 801ba12:	f000 fa43 	bl	801be9c <_ZSt13__copy_move_aILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801ba16:	4603      	mov	r3, r0
    }
 801ba18:	4618      	mov	r0, r3
 801ba1a:	3714      	adds	r7, #20
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	bd90      	pop	{r4, r7, pc}

0801ba20 <_ZSt13copy_backwardIPPP17TIM_HandleTypeDefS3_ET0_T_S5_S4_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 801ba20:	b590      	push	{r4, r7, lr}
 801ba22:	b085      	sub	sp, #20
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	60f8      	str	r0, [r7, #12]
 801ba28:	60b9      	str	r1, [r7, #8]
 801ba2a:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801ba2c:	68f8      	ldr	r0, [r7, #12]
 801ba2e:	f000 fa2a 	bl	801be86 <_ZSt12__miter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801ba32:	4604      	mov	r4, r0
 801ba34:	68b8      	ldr	r0, [r7, #8]
 801ba36:	f000 fa26 	bl	801be86 <_ZSt12__miter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801ba3a:	4603      	mov	r3, r0
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	4619      	mov	r1, r3
 801ba40:	4620      	mov	r0, r4
 801ba42:	f000 fa4e 	bl	801bee2 <_ZSt22__copy_move_backward_aILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801ba46:	4603      	mov	r3, r0
    }
 801ba48:	4618      	mov	r0, r3
 801ba4a:	3714      	adds	r7, #20
 801ba4c:	46bd      	mov	sp, r7
 801ba4e:	bd90      	pop	{r4, r7, pc}

0801ba50 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 801ba50:	b590      	push	{r4, r7, lr}
 801ba52:	b08b      	sub	sp, #44	; 0x2c
 801ba54:	af00      	add	r7, sp, #0
 801ba56:	60f8      	str	r0, [r7, #12]
 801ba58:	60b9      	str	r1, [r7, #8]
 801ba5a:	4613      	mov	r3, r2
 801ba5c:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ba62:	68fb      	ldr	r3, [r7, #12]
 801ba64:	695b      	ldr	r3, [r3, #20]
 801ba66:	1ad3      	subs	r3, r2, r3
 801ba68:	109b      	asrs	r3, r3, #2
 801ba6a:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 801ba6c:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 801ba6e:	68bb      	ldr	r3, [r7, #8]
 801ba70:	6a3a      	ldr	r2, [r7, #32]
 801ba72:	4413      	add	r3, r2
 801ba74:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	685a      	ldr	r2, [r3, #4]
 801ba7a:	69fb      	ldr	r3, [r7, #28]
 801ba7c:	005b      	lsls	r3, r3, #1
 801ba7e:	429a      	cmp	r2, r3
 801ba80:	d92d      	bls.n	801bade <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	68fb      	ldr	r3, [r7, #12]
 801ba88:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 801ba8a:	69fb      	ldr	r3, [r7, #28]
 801ba8c:	1acb      	subs	r3, r1, r3
 801ba8e:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801ba90:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 801ba92:	79fb      	ldrb	r3, [r7, #7]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	d002      	beq.n	801ba9e <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x4e>
 801ba98:	68bb      	ldr	r3, [r7, #8]
 801ba9a:	009b      	lsls	r3, r3, #2
 801ba9c:	e000      	b.n	801baa0 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x50>
 801ba9e:	2300      	movs	r3, #0
 801baa0:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 801baa2:	4413      	add	r3, r2
 801baa4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	695b      	ldr	r3, [r3, #20]
 801baaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801baac:	429a      	cmp	r2, r3
 801baae:	d209      	bcs.n	801bac4 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 801bab4:	68fb      	ldr	r3, [r7, #12]
 801bab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 801bab8:	3304      	adds	r3, #4
 801baba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801babc:	4619      	mov	r1, r3
 801babe:	f7ff ff97 	bl	801b9f0 <_ZSt4copyIPPP17TIM_HandleTypeDefS3_ET0_T_S5_S4_>
 801bac2:	e048      	b.n	801bb56 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 801bacc:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 801bace:	6a3b      	ldr	r3, [r7, #32]
 801bad0:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 801bad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bad4:	4413      	add	r3, r2
 801bad6:	461a      	mov	r2, r3
 801bad8:	f7ff ffa2 	bl	801ba20 <_ZSt13copy_backwardIPPP17TIM_HandleTypeDefS3_ET0_T_S5_S4_>
 801badc:	e03b      	b.n	801bb56 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	3304      	adds	r3, #4
 801bae6:	f107 0208 	add.w	r2, r7, #8
 801baea:	4611      	mov	r1, r2
 801baec:	4618      	mov	r0, r3
 801baee:	f7f6 ffad 	bl	8012a4c <_ZSt3maxIjERKT_S2_S2_>
 801baf2:	4603      	mov	r3, r0
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 801baf8:	3302      	adds	r3, #2
 801bafa:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	69b9      	ldr	r1, [r7, #24]
 801bb00:	4618      	mov	r0, r3
 801bb02:	f7fe febc 	bl	801a87e <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE15_M_allocate_mapEj>
 801bb06:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 801bb08:	69ba      	ldr	r2, [r7, #24]
 801bb0a:	69fb      	ldr	r3, [r7, #28]
 801bb0c:	1ad3      	subs	r3, r2, r3
 801bb0e:	085b      	lsrs	r3, r3, #1
 801bb10:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 801bb12:	79fb      	ldrb	r3, [r7, #7]
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d002      	beq.n	801bb1e <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0xce>
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	009b      	lsls	r3, r3, #2
 801bb1c:	e000      	b.n	801bb20 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EE17_M_reallocate_mapEjb+0xd0>
 801bb1e:	2300      	movs	r3, #0
 801bb20:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 801bb22:	697a      	ldr	r2, [r7, #20]
 801bb24:	4413      	add	r3, r2
 801bb26:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 801bb2c:	68fb      	ldr	r3, [r7, #12]
 801bb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 801bb30:	3304      	adds	r3, #4
 801bb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb34:	4619      	mov	r1, r3
 801bb36:	f7ff ff5b 	bl	801b9f0 <_ZSt4copyIPPP17TIM_HandleTypeDefS3_ET0_T_S5_S4_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 801bb3a:	68f8      	ldr	r0, [r7, #12]
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	6819      	ldr	r1, [r3, #0]
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	685b      	ldr	r3, [r3, #4]
 801bb44:	461a      	mov	r2, r3
 801bb46:	f7fd ff01 	bl	801994c <_ZNSt11_Deque_baseIP17TIM_HandleTypeDefSaIS1_EE17_M_deallocate_mapEPPS1_j>

	  this->_M_impl._M_map = __new_map;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	697a      	ldr	r2, [r7, #20]
 801bb4e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	69ba      	ldr	r2, [r7, #24]
 801bb54:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	3308      	adds	r3, #8
 801bb5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	f7fe fec5 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 801bb62:	68fb      	ldr	r3, [r7, #12]
 801bb64:	f103 0018 	add.w	r0, r3, #24
 801bb68:	6a3a      	ldr	r2, [r7, #32]
 801bb6a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801bb6e:	4413      	add	r3, r2
 801bb70:	009b      	lsls	r3, r3, #2
 801bb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bb74:	4413      	add	r3, r2
 801bb76:	4619      	mov	r1, r3
 801bb78:	f7fe feb8 	bl	801a8ec <_ZNSt15_Deque_iteratorIP17TIM_HandleTypeDefRS1_PS1_E11_M_set_nodeEPS3_>
    }
 801bb7c:	bf00      	nop
 801bb7e:	372c      	adds	r7, #44	; 0x2c
 801bb80:	46bd      	mov	sp, r7
 801bb82:	bd90      	pop	{r4, r7, pc}

0801bb84 <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801bb84:	b580      	push	{r7, lr}
 801bb86:	b084      	sub	sp, #16
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
 801bb8c:	6039      	str	r1, [r7, #0]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	60fb      	str	r3, [r7, #12]
 801bb92:	683b      	ldr	r3, [r7, #0]
 801bb94:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801bb96:	f7e5 fc57 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d006      	beq.n	801bbae <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	009b      	lsls	r3, r3, #2
 801bba4:	4618      	mov	r0, r3
 801bba6:	f00a fa7f 	bl	80260a8 <_Znwj>
 801bbaa:	4603      	mov	r3, r0
 801bbac:	e006      	b.n	801bbbc <_ZNSt16allocator_traitsISaIP17TIM_HandleTypeDefEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801bbae:	2200      	movs	r2, #0
 801bbb0:	68b9      	ldr	r1, [r7, #8]
 801bbb2:	68f8      	ldr	r0, [r7, #12]
 801bbb4:	f000 fb2a 	bl	801c20c <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE8allocateEjPKv>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	bf00      	nop
      { return __a.allocate(__n); }
 801bbbc:	4618      	mov	r0, r3
 801bbbe:	3710      	adds	r7, #16
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	bd80      	pop	{r7, pc}

0801bbc4 <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefEC1Ev>:
 801bbc4:	b480      	push	{r7}
 801bbc6:	b083      	sub	sp, #12
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	4618      	mov	r0, r3
 801bbd0:	370c      	adds	r7, #12
 801bbd2:	46bd      	mov	sp, r7
 801bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbd8:	4770      	bx	lr

0801bbda <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 801bbda:	b580      	push	{r7, lr}
 801bbdc:	b084      	sub	sp, #16
 801bbde:	af00      	add	r7, sp, #0
 801bbe0:	60f8      	str	r0, [r7, #12]
 801bbe2:	60b9      	str	r1, [r7, #8]
 801bbe4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	009b      	lsls	r3, r3, #2
 801bbea:	4619      	mov	r1, r3
 801bbec:	68b8      	ldr	r0, [r7, #8]
 801bbee:	f00a fa59 	bl	80260a4 <_ZdlPvj>
      }
 801bbf2:	3710      	adds	r7, #16
 801bbf4:	46bd      	mov	sp, r7
 801bbf6:	bd80      	pop	{r7, pc}

0801bbf8 <_ZN9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE6_M_ptrEv>:
      _M_ptr() noexcept
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b082      	sub	sp, #8
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801bc00:	6878      	ldr	r0, [r7, #4]
 801bc02:	f000 f9bf 	bl	801bf84 <_ZN9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE7_M_addrEv>
 801bc06:	4603      	mov	r3, r0
 801bc08:	4618      	mov	r0, r3
 801bc0a:	3708      	adds	r7, #8
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	bd80      	pop	{r7, pc}

0801bc10 <_ZSt10destroy_atISt4pairIKhN4Time5AlarmEEEvPT_>:
    destroy_at(_Tp* __location)
 801bc10:	b580      	push	{r7, lr}
 801bc12:	b082      	sub	sp, #8
 801bc14:	af00      	add	r7, sp, #0
 801bc16:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 801bc18:	6878      	ldr	r0, [r7, #4]
 801bc1a:	f7fc ff65 	bl	8018ae8 <_ZNSt4pairIKhN4Time5AlarmEED1Ev>
    }
 801bc1e:	bf00      	nop
 801bc20:	3708      	adds	r7, #8
 801bc22:	46bd      	mov	sp, r7
 801bc24:	bd80      	pop	{r7, pc}

0801bc26 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEED1Ev>:
    struct pair
 801bc26:	b580      	push	{r7, lr}
 801bc28:	b082      	sub	sp, #8
 801bc2a:	af00      	add	r7, sp, #0
 801bc2c:	6078      	str	r0, [r7, #4]
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	3304      	adds	r3, #4
 801bc32:	4618      	mov	r0, r3
 801bc34:	f7fc fe8e 	bl	8018954 <_ZN4Time5AlarmD1Ev>
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	4618      	mov	r0, r3
 801bc3c:	3708      	adds	r7, #8
 801bc3e:	46bd      	mov	sp, r7
 801bc40:	bd80      	pop	{r7, pc}

0801bc42 <_ZSt10destroy_atISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEvPT_>:
    destroy_at(_Tp* __location)
 801bc42:	b580      	push	{r7, lr}
 801bc44:	b082      	sub	sp, #8
 801bc46:	af00      	add	r7, sp, #0
 801bc48:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 801bc4a:	6878      	ldr	r0, [r7, #4]
 801bc4c:	f7ff ffeb 	bl	801bc26 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEED1Ev>
    }
 801bc50:	bf00      	nop
 801bc52:	3708      	adds	r7, #8
 801bc54:	46bd      	mov	sp, r7
 801bc56:	bd80      	pop	{r7, pc}

0801bc58 <_ZNK9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE6_M_ptrEv>:
      _M_ptr() const noexcept
 801bc58:	b580      	push	{r7, lr}
 801bc5a:	b082      	sub	sp, #8
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801bc60:	6878      	ldr	r0, [r7, #4]
 801bc62:	f000 f9ce 	bl	801c002 <_ZNK9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE7_M_addrEv>
 801bc66:	4603      	mov	r3, r0
 801bc68:	4618      	mov	r0, r3
 801bc6a:	3708      	adds	r7, #8
 801bc6c:	46bd      	mov	sp, r7
 801bc6e:	bd80      	pop	{r7, pc}

0801bc70 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE11_M_get_nodeEv>:
      _M_get_node()
 801bc70:	b580      	push	{r7, lr}
 801bc72:	b082      	sub	sp, #8
 801bc74:	af00      	add	r7, sp, #0
 801bc76:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801bc78:	6878      	ldr	r0, [r7, #4]
 801bc7a:	f7ff fc52 	bl	801b522 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 801bc7e:	4603      	mov	r3, r0
 801bc80:	2101      	movs	r1, #1
 801bc82:	4618      	mov	r0, r3
 801bc84:	f000 f9c8 	bl	801c018 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE8allocateERS4_j>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	4618      	mov	r0, r3
 801bc8c:	3708      	adds	r7, #8
 801bc8e:	46bd      	mov	sp, r7
 801bc90:	bd80      	pop	{r7, pc}

0801bc92 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE17_M_construct_nodeIJS1_EEEvPSt13_Rb_tree_nodeIS1_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801bc92:	b5b0      	push	{r4, r5, r7, lr}
 801bc94:	b084      	sub	sp, #16
 801bc96:	af00      	add	r7, sp, #0
 801bc98:	60f8      	str	r0, [r7, #12]
 801bc9a:	60b9      	str	r1, [r7, #8]
 801bc9c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 801bc9e:	68bb      	ldr	r3, [r7, #8]
 801bca0:	4619      	mov	r1, r3
 801bca2:	2014      	movs	r0, #20
 801bca4:	f7e5 fbd8 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801bca8:	68f8      	ldr	r0, [r7, #12]
 801bcaa:	f7ff fc3a 	bl	801b522 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE21_M_get_Node_allocatorEv>
 801bcae:	4604      	mov	r4, r0
 801bcb0:	68b8      	ldr	r0, [r7, #8]
 801bcb2:	f7ff fc41 	bl	801b538 <_ZNSt13_Rb_tree_nodeIP17TIM_HandleTypeDefE9_M_valptrEv>
 801bcb6:	4605      	mov	r5, r0
 801bcb8:	6878      	ldr	r0, [r7, #4]
 801bcba:	f7fe f808 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	461a      	mov	r2, r3
 801bcc2:	4629      	mov	r1, r5
 801bcc4:	4620      	mov	r0, r4
 801bcc6:	f000 f9ca 	bl	801c05e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>
	}
 801bcca:	bf00      	nop
 801bccc:	3710      	adds	r7, #16
 801bcce:	46bd      	mov	sp, r7
 801bcd0:	bdb0      	pop	{r4, r5, r7, pc}

0801bcd2 <_ZNSt11_Tuple_implILj0EJOhEEC1EOS1_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801bcd2:	b590      	push	{r4, r7, lr}
 801bcd4:	b083      	sub	sp, #12
 801bcd6:	af00      	add	r7, sp, #0
 801bcd8:	6078      	str	r0, [r7, #4]
 801bcda:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801bcdc:	687c      	ldr	r4, [r7, #4]
 801bcde:	6838      	ldr	r0, [r7, #0]
 801bce0:	f000 f9f0 	bl	801c0c4 <_ZNSt11_Tuple_implILj0EJOhEE7_M_headERS1_>
 801bce4:	4603      	mov	r3, r0
 801bce6:	4618      	mov	r0, r3
 801bce8:	f000 f9f9 	bl	801c0de <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 801bcec:	4603      	mov	r3, r0
 801bcee:	4619      	mov	r1, r3
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f7ff fd02 	bl	801b6fa <_ZNSt10_Head_baseILj0EOhLb0EEC1IhEEOT_>
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	370c      	adds	r7, #12
 801bcfc:	46bd      	mov	sp, r7
 801bcfe:	bd90      	pop	{r4, r7, pc}

0801bd00 <_ZN4Time5AlarmC1Ev>:
 801bd00:	b580      	push	{r7, lr}
 801bd02:	b082      	sub	sp, #8
 801bd04:	af00      	add	r7, sp, #0
 801bd06:	6078      	str	r0, [r7, #4]
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	3308      	adds	r3, #8
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	f000 f9fe 	bl	801c10e <_ZNSt8functionIFvvEEC1Ev>
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	4618      	mov	r0, r3
 801bd16:	3708      	adds	r7, #8
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}

0801bd1c <_ZNSt4pairIKhN4Time5AlarmEEC1IJOhEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b084      	sub	sp, #16
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	60f8      	str	r0, [r7, #12]
 801bd24:	60b9      	str	r1, [r7, #8]
 801bd26:	607a      	str	r2, [r7, #4]
 801bd28:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801bd2a:	68b8      	ldr	r0, [r7, #8]
 801bd2c:	f000 f9e2 	bl	801c0f4 <_ZSt3getILj0EJOhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>
 801bd30:	4603      	mov	r3, r0
 801bd32:	4618      	mov	r0, r3
 801bd34:	f000 f9d3 	bl	801c0de <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>
 801bd38:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801bd3a:	781a      	ldrb	r2, [r3, #0]
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	701a      	strb	r2, [r3, #0]
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	3304      	adds	r3, #4
 801bd44:	2200      	movs	r2, #0
 801bd46:	601a      	str	r2, [r3, #0]
 801bd48:	605a      	str	r2, [r3, #4]
 801bd4a:	609a      	str	r2, [r3, #8]
 801bd4c:	60da      	str	r2, [r3, #12]
 801bd4e:	611a      	str	r2, [r3, #16]
 801bd50:	615a      	str	r2, [r3, #20]
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	3304      	adds	r3, #4
 801bd56:	4618      	mov	r0, r3
 801bd58:	f7ff ffd2 	bl	801bd00 <_ZN4Time5AlarmC1Ev>
      { }
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	4618      	mov	r0, r3
 801bd60:	3710      	adds	r7, #16
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}

0801bd66 <_ZNSt4pairIKhN4Time5AlarmEEC1IJOhEJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 801bd66:	b5b0      	push	{r4, r5, r7, lr}
 801bd68:	b086      	sub	sp, #24
 801bd6a:	af02      	add	r7, sp, #8
 801bd6c:	60f8      	str	r0, [r7, #12]
 801bd6e:	7239      	strb	r1, [r7, #8]
 801bd70:	607a      	str	r2, [r7, #4]
 801bd72:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801bd74:	463a      	mov	r2, r7
 801bd76:	f88d 4000 	strb.w	r4, [sp]
 801bd7a:	462b      	mov	r3, r5
 801bd7c:	6879      	ldr	r1, [r7, #4]
 801bd7e:	68f8      	ldr	r0, [r7, #12]
 801bd80:	f7ff ffcc 	bl	801bd1c <_ZNSt4pairIKhN4Time5AlarmEEC1IJOhEJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	4618      	mov	r0, r3
 801bd88:	3710      	adds	r7, #16
 801bd8a:	46bd      	mov	sp, r7
 801bd8c:	bdb0      	pop	{r4, r5, r7, pc}

0801bd8e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801bd8e:	b480      	push	{r7}
 801bd90:	b083      	sub	sp, #12
 801bd92:	af00      	add	r7, sp, #0
 801bd94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	4618      	mov	r0, r3
 801bd9a:	370c      	adds	r7, #12
 801bd9c:	46bd      	mov	sp, r7
 801bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda2:	4770      	bx	lr

0801bda4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN4Time5AlarmEEE7_M_addrEv>:
      _M_addr() const noexcept
 801bda4:	b480      	push	{r7}
 801bda6:	b083      	sub	sp, #12
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	4618      	mov	r0, r3
 801bdb0:	370c      	adds	r7, #12
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb8:	4770      	bx	lr

0801bdba <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 801bdba:	b590      	push	{r4, r7, lr}
 801bdbc:	b083      	sub	sp, #12
 801bdbe:	af00      	add	r7, sp, #0
 801bdc0:	6078      	str	r0, [r7, #4]
 801bdc2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801bdc4:	687c      	ldr	r4, [r7, #4]
 801bdc6:	6838      	ldr	r0, [r7, #0]
 801bdc8:	f000 f9cf 	bl	801c16a <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 801bdcc:	4603      	mov	r3, r0
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7ff fa89 	bl	801b2e6 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	4619      	mov	r1, r3
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f7ff f93c 	bl	801b056 <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EEC1ES3_>
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	4618      	mov	r0, r3
 801bde2:	370c      	adds	r7, #12
 801bde4:	46bd      	mov	sp, r7
 801bde6:	bd90      	pop	{r4, r7, pc}

0801bde8 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b084      	sub	sp, #16
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	60f8      	str	r0, [r7, #12]
 801bdf0:	60b9      	str	r1, [r7, #8]
 801bdf2:	607a      	str	r2, [r7, #4]
 801bdf4:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801bdf6:	68b8      	ldr	r0, [r7, #8]
 801bdf8:	f000 f9c4 	bl	801c184 <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 801bdfc:	4603      	mov	r3, r0
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7ff fa71 	bl	801b2e6 <_ZSt7forwardIRKP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 801be04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801be06:	681a      	ldr	r2, [r3, #0]
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	601a      	str	r2, [r3, #0]
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	3304      	adds	r3, #4
 801be10:	2200      	movs	r2, #0
 801be12:	601a      	str	r2, [r3, #0]
 801be14:	605a      	str	r2, [r3, #4]
 801be16:	609a      	str	r2, [r3, #8]
 801be18:	60da      	str	r2, [r3, #12]
 801be1a:	611a      	str	r2, [r3, #16]
 801be1c:	615a      	str	r2, [r3, #20]
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	3304      	adds	r3, #4
 801be22:	4618      	mov	r0, r3
 801be24:	f7ff ff6c 	bl	801bd00 <_ZN4Time5AlarmC1Ev>
      { }
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	4618      	mov	r0, r3
 801be2c:	3710      	adds	r7, #16
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}

0801be32 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 801be32:	b5b0      	push	{r4, r5, r7, lr}
 801be34:	b086      	sub	sp, #24
 801be36:	af02      	add	r7, sp, #8
 801be38:	60f8      	str	r0, [r7, #12]
 801be3a:	7239      	strb	r1, [r7, #8]
 801be3c:	607a      	str	r2, [r7, #4]
 801be3e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801be40:	463a      	mov	r2, r7
 801be42:	f88d 4000 	strb.w	r4, [sp]
 801be46:	462b      	mov	r3, r5
 801be48:	6879      	ldr	r1, [r7, #4]
 801be4a:	68f8      	ldr	r0, [r7, #12]
 801be4c:	f7ff ffcc 	bl	801bde8 <_ZNSt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	4618      	mov	r0, r3
 801be54:	3710      	adds	r7, #16
 801be56:	46bd      	mov	sp, r7
 801be58:	bdb0      	pop	{r4, r5, r7, pc}

0801be5a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801be5a:	b480      	push	{r7}
 801be5c:	b083      	sub	sp, #12
 801be5e:	af00      	add	r7, sp, #0
 801be60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801be62:	687b      	ldr	r3, [r7, #4]
 801be64:	4618      	mov	r0, r3
 801be66:	370c      	adds	r7, #12
 801be68:	46bd      	mov	sp, r7
 801be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be6e:	4770      	bx	lr

0801be70 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEE7_M_addrEv>:
      _M_addr() const noexcept
 801be70:	b480      	push	{r7}
 801be72:	b083      	sub	sp, #12
 801be74:	af00      	add	r7, sp, #0
 801be76:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	4618      	mov	r0, r3
 801be7c:	370c      	adds	r7, #12
 801be7e:	46bd      	mov	sp, r7
 801be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be84:	4770      	bx	lr

0801be86 <_ZSt12__miter_baseIPPP17TIM_HandleTypeDefET_S4_>:
    __miter_base(_Iterator __it)
 801be86:	b480      	push	{r7}
 801be88:	b083      	sub	sp, #12
 801be8a:	af00      	add	r7, sp, #0
 801be8c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801be8e:	687b      	ldr	r3, [r7, #4]
 801be90:	4618      	mov	r0, r3
 801be92:	370c      	adds	r7, #12
 801be94:	46bd      	mov	sp, r7
 801be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be9a:	4770      	bx	lr

0801be9c <_ZSt13__copy_move_aILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801be9c:	b5b0      	push	{r4, r5, r7, lr}
 801be9e:	b084      	sub	sp, #16
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	60f8      	str	r0, [r7, #12]
 801bea4:	60b9      	str	r1, [r7, #8]
 801bea6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801bea8:	68f8      	ldr	r0, [r7, #12]
 801beaa:	f000 f978 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801beae:	4604      	mov	r4, r0
 801beb0:	68b8      	ldr	r0, [r7, #8]
 801beb2:	f000 f974 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801beb6:	4605      	mov	r5, r0
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	4618      	mov	r0, r3
 801bebc:	f000 f96f 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801bec0:	4603      	mov	r3, r0
 801bec2:	461a      	mov	r2, r3
 801bec4:	4629      	mov	r1, r5
 801bec6:	4620      	mov	r0, r4
 801bec8:	f000 f974 	bl	801c1b4 <_ZSt14__copy_move_a1ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801becc:	4602      	mov	r2, r0
 801bece:	1d3b      	adds	r3, r7, #4
 801bed0:	4611      	mov	r1, r2
 801bed2:	4618      	mov	r0, r3
 801bed4:	f000 f97e 	bl	801c1d4 <_ZSt12__niter_wrapIPPP17TIM_HandleTypeDefET_RKS4_S4_>
 801bed8:	4603      	mov	r3, r0
    }
 801beda:	4618      	mov	r0, r3
 801bedc:	3710      	adds	r7, #16
 801bede:	46bd      	mov	sp, r7
 801bee0:	bdb0      	pop	{r4, r5, r7, pc}

0801bee2 <_ZSt22__copy_move_backward_aILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 801bee2:	b5b0      	push	{r4, r5, r7, lr}
 801bee4:	b084      	sub	sp, #16
 801bee6:	af00      	add	r7, sp, #0
 801bee8:	60f8      	str	r0, [r7, #12]
 801beea:	60b9      	str	r1, [r7, #8]
 801beec:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801beee:	68f8      	ldr	r0, [r7, #12]
 801bef0:	f000 f955 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801bef4:	4604      	mov	r4, r0
 801bef6:	68b8      	ldr	r0, [r7, #8]
 801bef8:	f000 f951 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801befc:	4605      	mov	r5, r0
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	4618      	mov	r0, r3
 801bf02:	f000 f94c 	bl	801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>
 801bf06:	4603      	mov	r3, r0
 801bf08:	461a      	mov	r2, r3
 801bf0a:	4629      	mov	r1, r5
 801bf0c:	4620      	mov	r0, r4
 801bf0e:	f000 f96d 	bl	801c1ec <_ZSt23__copy_move_backward_a1ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801bf12:	4602      	mov	r2, r0
 801bf14:	1d3b      	adds	r3, r7, #4
 801bf16:	4611      	mov	r1, r2
 801bf18:	4618      	mov	r0, r3
 801bf1a:	f000 f95b 	bl	801c1d4 <_ZSt12__niter_wrapIPPP17TIM_HandleTypeDefET_RKS4_S4_>
 801bf1e:	4603      	mov	r3, r0
    }
 801bf20:	4618      	mov	r0, r3
 801bf22:	3710      	adds	r7, #16
 801bf24:	46bd      	mov	sp, r7
 801bf26:	bdb0      	pop	{r4, r5, r7, pc}

0801bf28 <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b084      	sub	sp, #16
 801bf2c:	af00      	add	r7, sp, #0
 801bf2e:	60f8      	str	r0, [r7, #12]
 801bf30:	60b9      	str	r1, [r7, #8]
 801bf32:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801bf34:	68f8      	ldr	r0, [r7, #12]
 801bf36:	f000 f988 	bl	801c24a <_ZNK9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE11_M_max_sizeEv>
 801bf3a:	4602      	mov	r2, r0
 801bf3c:	68bb      	ldr	r3, [r7, #8]
 801bf3e:	4293      	cmp	r3, r2
 801bf40:	bf8c      	ite	hi
 801bf42:	2301      	movhi	r3, #1
 801bf44:	2300      	movls	r3, #0
 801bf46:	b2db      	uxtb	r3, r3
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d001      	beq.n	801bf50 <_ZN9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801bf4c:	f00a f970 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801bf50:	68bb      	ldr	r3, [r7, #8]
 801bf52:	009b      	lsls	r3, r3, #2
 801bf54:	4618      	mov	r0, r3
 801bf56:	f00a f8a7 	bl	80260a8 <_Znwj>
 801bf5a:	4603      	mov	r3, r0
 801bf5c:	bf00      	nop
      }
 801bf5e:	4618      	mov	r0, r3
 801bf60:	3710      	adds	r7, #16
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}

0801bf66 <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 801bf66:	b580      	push	{r7, lr}
 801bf68:	b084      	sub	sp, #16
 801bf6a:	af00      	add	r7, sp, #0
 801bf6c:	60f8      	str	r0, [r7, #12]
 801bf6e:	60b9      	str	r1, [r7, #8]
 801bf70:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	009b      	lsls	r3, r3, #2
 801bf76:	4619      	mov	r1, r3
 801bf78:	68b8      	ldr	r0, [r7, #8]
 801bf7a:	f00a f893 	bl	80260a4 <_ZdlPvj>
      }
 801bf7e:	3710      	adds	r7, #16
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bd80      	pop	{r7, pc}

0801bf84 <_ZN9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE7_M_addrEv>:
      _M_addr() noexcept
 801bf84:	b480      	push	{r7}
 801bf86:	b083      	sub	sp, #12
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	4618      	mov	r0, r3
 801bf90:	370c      	adds	r7, #12
 801bf92:	46bd      	mov	sp, r7
 801bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf98:	4770      	bx	lr

0801bf9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 801bf9a:	b580      	push	{r7, lr}
 801bf9c:	b084      	sub	sp, #16
 801bf9e:	af00      	add	r7, sp, #0
 801bfa0:	60f8      	str	r0, [r7, #12]
 801bfa2:	60b9      	str	r1, [r7, #8]
 801bfa4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801bfa6:	687a      	ldr	r2, [r7, #4]
 801bfa8:	4613      	mov	r3, r2
 801bfaa:	009b      	lsls	r3, r3, #2
 801bfac:	4413      	add	r3, r2
 801bfae:	009b      	lsls	r3, r3, #2
 801bfb0:	4619      	mov	r1, r3
 801bfb2:	68b8      	ldr	r0, [r7, #8]
 801bfb4:	f00a f876 	bl	80260a4 <_ZdlPvj>
      }
 801bfb8:	3710      	adds	r7, #16
 801bfba:	46bd      	mov	sp, r7
 801bfbc:	bd80      	pop	{r7, pc}

0801bfbe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 801bfbe:	b580      	push	{r7, lr}
 801bfc0:	b084      	sub	sp, #16
 801bfc2:	af00      	add	r7, sp, #0
 801bfc4:	60f8      	str	r0, [r7, #12]
 801bfc6:	60b9      	str	r1, [r7, #8]
 801bfc8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	222c      	movs	r2, #44	; 0x2c
 801bfce:	fb02 f303 	mul.w	r3, r2, r3
 801bfd2:	4619      	mov	r1, r3
 801bfd4:	68b8      	ldr	r0, [r7, #8]
 801bfd6:	f00a f865 	bl	80260a4 <_ZdlPvj>
      }
 801bfda:	3710      	adds	r7, #16
 801bfdc:	46bd      	mov	sp, r7
 801bfde:	bd80      	pop	{r7, pc}

0801bfe0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b084      	sub	sp, #16
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	222c      	movs	r2, #44	; 0x2c
 801bff0:	fb02 f303 	mul.w	r3, r2, r3
 801bff4:	4619      	mov	r1, r3
 801bff6:	68b8      	ldr	r0, [r7, #8]
 801bff8:	f00a f854 	bl	80260a4 <_ZdlPvj>
      }
 801bffc:	3710      	adds	r7, #16
 801bffe:	46bd      	mov	sp, r7
 801c000:	bd80      	pop	{r7, pc}

0801c002 <_ZNK9__gnu_cxx16__aligned_membufIP17TIM_HandleTypeDefE7_M_addrEv>:
      _M_addr() const noexcept
 801c002:	b480      	push	{r7}
 801c004:	b083      	sub	sp, #12
 801c006:	af00      	add	r7, sp, #0
 801c008:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	4618      	mov	r0, r3
 801c00e:	370c      	adds	r7, #12
 801c010:	46bd      	mov	sp, r7
 801c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c016:	4770      	bx	lr

0801c018 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 801c018:	b580      	push	{r7, lr}
 801c01a:	b084      	sub	sp, #16
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
 801c020:	6039      	str	r1, [r7, #0]
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	60fb      	str	r3, [r7, #12]
 801c026:	683b      	ldr	r3, [r7, #0]
 801c028:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801c02a:	f7e5 fa0d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801c02e:	4603      	mov	r3, r0
 801c030:	2b00      	cmp	r3, #0
 801c032:	d009      	beq.n	801c048 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE8allocateERS4_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801c034:	68ba      	ldr	r2, [r7, #8]
 801c036:	4613      	mov	r3, r2
 801c038:	009b      	lsls	r3, r3, #2
 801c03a:	4413      	add	r3, r2
 801c03c:	009b      	lsls	r3, r3, #2
 801c03e:	4618      	mov	r0, r3
 801c040:	f00a f832 	bl	80260a8 <_Znwj>
 801c044:	4603      	mov	r3, r0
 801c046:	e006      	b.n	801c056 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE8allocateERS4_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801c048:	2200      	movs	r2, #0
 801c04a:	68b9      	ldr	r1, [r7, #8]
 801c04c:	68f8      	ldr	r0, [r7, #12]
 801c04e:	f000 f99b 	bl	801c388 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE8allocateEjPKv>
 801c052:	4603      	mov	r3, r0
 801c054:	bf00      	nop
      { return __a.allocate(__n); }
 801c056:	4618      	mov	r0, r3
 801c058:	3710      	adds	r7, #16
 801c05a:	46bd      	mov	sp, r7
 801c05c:	bd80      	pop	{r7, pc}

0801c05e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEEE9constructIS2_JS2_EEEvRS4_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801c05e:	b580      	push	{r7, lr}
 801c060:	b084      	sub	sp, #16
 801c062:	af00      	add	r7, sp, #0
 801c064:	60f8      	str	r0, [r7, #12]
 801c066:	60b9      	str	r1, [r7, #8]
 801c068:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801c06a:	6878      	ldr	r0, [r7, #4]
 801c06c:	f7fd fe2f 	bl	8019cce <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801c070:	4603      	mov	r3, r0
 801c072:	4619      	mov	r1, r3
 801c074:	68b8      	ldr	r0, [r7, #8]
 801c076:	f7fe fd31 	bl	801aadc <_ZSt12construct_atIP17TIM_HandleTypeDefJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801c07a:	bf00      	nop
 801c07c:	3710      	adds	r7, #16
 801c07e:	46bd      	mov	sp, r7
 801c080:	bd80      	pop	{r7, pc}

0801c082 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801c082:	b580      	push	{r7, lr}
 801c084:	b084      	sub	sp, #16
 801c086:	af00      	add	r7, sp, #0
 801c088:	60f8      	str	r0, [r7, #12]
 801c08a:	60b9      	str	r1, [r7, #8]
 801c08c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801c08e:	68f8      	ldr	r0, [r7, #12]
 801c090:	f000 f8e8 	bl	801c264 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE11_M_max_sizeEv>
 801c094:	4602      	mov	r2, r0
 801c096:	68bb      	ldr	r3, [r7, #8]
 801c098:	4293      	cmp	r3, r2
 801c09a:	bf8c      	ite	hi
 801c09c:	2301      	movhi	r3, #1
 801c09e:	2300      	movls	r3, #0
 801c0a0:	b2db      	uxtb	r3, r3
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d001      	beq.n	801c0aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801c0a6:	f00a f8c3 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801c0aa:	68bb      	ldr	r3, [r7, #8]
 801c0ac:	222c      	movs	r2, #44	; 0x2c
 801c0ae:	fb02 f303 	mul.w	r3, r2, r3
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	f009 fff8 	bl	80260a8 <_Znwj>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	bf00      	nop
      }
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3710      	adds	r7, #16
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	bd80      	pop	{r7, pc}

0801c0c4 <_ZNSt11_Tuple_implILj0EJOhEE7_M_headERS1_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801c0c4:	b580      	push	{r7, lr}
 801c0c6:	b082      	sub	sp, #8
 801c0c8:	af00      	add	r7, sp, #0
 801c0ca:	6078      	str	r0, [r7, #4]
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	f000 f8d6 	bl	801c280 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	4618      	mov	r0, r3
 801c0d8:	3708      	adds	r7, #8
 801c0da:	46bd      	mov	sp, r7
 801c0dc:	bd80      	pop	{r7, pc}

0801c0de <_ZSt7forwardIOhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801c0de:	b480      	push	{r7}
 801c0e0:	b083      	sub	sp, #12
 801c0e2:	af00      	add	r7, sp, #0
 801c0e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	370c      	adds	r7, #12
 801c0ec:	46bd      	mov	sp, r7
 801c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f2:	4770      	bx	lr

0801c0f4 <_ZSt3getILj0EJOhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS5_>:
    get(tuple<_Elements...>& __t) noexcept
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b082      	sub	sp, #8
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	4618      	mov	r0, r3
 801c100:	f000 f8ca 	bl	801c298 <_ZSt12__get_helperILj0EOhJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>
 801c104:	4603      	mov	r3, r0
 801c106:	4618      	mov	r0, r3
 801c108:	3708      	adds	r7, #8
 801c10a:	46bd      	mov	sp, r7
 801c10c:	bd80      	pop	{r7, pc}

0801c10e <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 801c10e:	b580      	push	{r7, lr}
 801c110:	b082      	sub	sp, #8
 801c112:	af00      	add	r7, sp, #0
 801c114:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	4618      	mov	r0, r3
 801c11a:	f7e5 fa0c 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	4618      	mov	r0, r3
 801c122:	3708      	adds	r7, #8
 801c124:	46bd      	mov	sp, r7
 801c126:	bd80      	pop	{r7, pc}

0801c128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801c128:	b580      	push	{r7, lr}
 801c12a:	b084      	sub	sp, #16
 801c12c:	af00      	add	r7, sp, #0
 801c12e:	60f8      	str	r0, [r7, #12]
 801c130:	60b9      	str	r1, [r7, #8]
 801c132:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801c134:	68f8      	ldr	r0, [r7, #12]
 801c136:	f000 f8bb 	bl	801c2b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE11_M_max_sizeEv>
 801c13a:	4602      	mov	r2, r0
 801c13c:	68bb      	ldr	r3, [r7, #8]
 801c13e:	4293      	cmp	r3, r2
 801c140:	bf8c      	ite	hi
 801c142:	2301      	movhi	r3, #1
 801c144:	2300      	movls	r3, #0
 801c146:	b2db      	uxtb	r3, r3
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d001      	beq.n	801c150 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801c14c:	f00a f870 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801c150:	68bb      	ldr	r3, [r7, #8]
 801c152:	222c      	movs	r2, #44	; 0x2c
 801c154:	fb02 f303 	mul.w	r3, r2, r3
 801c158:	4618      	mov	r0, r3
 801c15a:	f009 ffa5 	bl	80260a8 <_Znwj>
 801c15e:	4603      	mov	r3, r0
 801c160:	bf00      	nop
      }
 801c162:	4618      	mov	r0, r3
 801c164:	3710      	adds	r7, #16
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}

0801c16a <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801c16a:	b580      	push	{r7, lr}
 801c16c:	b082      	sub	sp, #8
 801c16e:	af00      	add	r7, sp, #0
 801c170:	6078      	str	r0, [r7, #4]
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	4618      	mov	r0, r3
 801c176:	f000 f8a9 	bl	801c2cc <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>
 801c17a:	4603      	mov	r3, r0
 801c17c:	4618      	mov	r0, r3
 801c17e:	3708      	adds	r7, #8
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}

0801c184 <_ZSt3getILj0EJRKP17TIM_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 801c184:	b580      	push	{r7, lr}
 801c186:	b082      	sub	sp, #8
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	4618      	mov	r0, r3
 801c190:	f000 f8a8 	bl	801c2e4 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 801c194:	4603      	mov	r3, r0
 801c196:	4618      	mov	r0, r3
 801c198:	3708      	adds	r7, #8
 801c19a:	46bd      	mov	sp, r7
 801c19c:	bd80      	pop	{r7, pc}

0801c19e <_ZSt12__niter_baseIPPP17TIM_HandleTypeDefET_S4_>:
    __niter_base(_Iterator __it)
 801c19e:	b480      	push	{r7}
 801c1a0:	b083      	sub	sp, #12
 801c1a2:	af00      	add	r7, sp, #0
 801c1a4:	6078      	str	r0, [r7, #4]
    { return __it; }
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	370c      	adds	r7, #12
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b2:	4770      	bx	lr

0801c1b4 <_ZSt14__copy_move_a1ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b084      	sub	sp, #16
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	60f8      	str	r0, [r7, #12]
 801c1bc:	60b9      	str	r1, [r7, #8]
 801c1be:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801c1c0:	687a      	ldr	r2, [r7, #4]
 801c1c2:	68b9      	ldr	r1, [r7, #8]
 801c1c4:	68f8      	ldr	r0, [r7, #12]
 801c1c6:	f000 f899 	bl	801c2fc <_ZSt14__copy_move_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	3710      	adds	r7, #16
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd80      	pop	{r7, pc}

0801c1d4 <_ZSt12__niter_wrapIPPP17TIM_HandleTypeDefET_RKS4_S4_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801c1d4:	b480      	push	{r7}
 801c1d6:	b083      	sub	sp, #12
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
 801c1dc:	6039      	str	r1, [r7, #0]
    { return __res; }
 801c1de:	683b      	ldr	r3, [r7, #0]
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	370c      	adds	r7, #12
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ea:	4770      	bx	lr

0801c1ec <_ZSt23__copy_move_backward_a1ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b084      	sub	sp, #16
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	60f8      	str	r0, [r7, #12]
 801c1f4:	60b9      	str	r1, [r7, #8]
 801c1f6:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 801c1f8:	687a      	ldr	r2, [r7, #4]
 801c1fa:	68b9      	ldr	r1, [r7, #8]
 801c1fc:	68f8      	ldr	r0, [r7, #12]
 801c1fe:	f000 f89a 	bl	801c336 <_ZSt23__copy_move_backward_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>
 801c202:	4603      	mov	r3, r0
 801c204:	4618      	mov	r0, r3
 801c206:	3710      	adds	r7, #16
 801c208:	46bd      	mov	sp, r7
 801c20a:	bd80      	pop	{r7, pc}

0801c20c <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b084      	sub	sp, #16
 801c210:	af00      	add	r7, sp, #0
 801c212:	60f8      	str	r0, [r7, #12]
 801c214:	60b9      	str	r1, [r7, #8]
 801c216:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801c218:	68f8      	ldr	r0, [r7, #12]
 801c21a:	f000 f8a9 	bl	801c370 <_ZNK9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE11_M_max_sizeEv>
 801c21e:	4602      	mov	r2, r0
 801c220:	68bb      	ldr	r3, [r7, #8]
 801c222:	4293      	cmp	r3, r2
 801c224:	bf8c      	ite	hi
 801c226:	2301      	movhi	r3, #1
 801c228:	2300      	movls	r3, #0
 801c22a:	b2db      	uxtb	r3, r3
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d001      	beq.n	801c234 <_ZN9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801c230:	f009 fffe 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801c234:	68bb      	ldr	r3, [r7, #8]
 801c236:	009b      	lsls	r3, r3, #2
 801c238:	4618      	mov	r0, r3
 801c23a:	f009 ff35 	bl	80260a8 <_Znwj>
 801c23e:	4603      	mov	r3, r0
 801c240:	bf00      	nop
      }
 801c242:	4618      	mov	r0, r3
 801c244:	3710      	adds	r7, #16
 801c246:	46bd      	mov	sp, r7
 801c248:	bd80      	pop	{r7, pc}

0801c24a <_ZNK9__gnu_cxx13new_allocatorIPP17TIM_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801c24a:	b480      	push	{r7}
 801c24c:	b083      	sub	sp, #12
 801c24e:	af00      	add	r7, sp, #0
 801c250:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801c252:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801c256:	4618      	mov	r0, r3
 801c258:	370c      	adds	r7, #12
 801c25a:	46bd      	mov	sp, r7
 801c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c260:	4770      	bx	lr
	...

0801c264 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801c264:	b480      	push	{r7}
 801c266:	b083      	sub	sp, #12
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801c26c:	4b03      	ldr	r3, [pc, #12]	; (801c27c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN4Time5AlarmEEEE11_M_max_sizeEv+0x18>)
      }
 801c26e:	4618      	mov	r0, r3
 801c270:	370c      	adds	r7, #12
 801c272:	46bd      	mov	sp, r7
 801c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c278:	4770      	bx	lr
 801c27a:	bf00      	nop
 801c27c:	02e8ba2e 	.word	0x02e8ba2e

0801c280 <_ZNSt10_Head_baseILj0EOhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801c280:	b480      	push	{r7}
 801c282:	b083      	sub	sp, #12
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	4618      	mov	r0, r3
 801c28e:	370c      	adds	r7, #12
 801c290:	46bd      	mov	sp, r7
 801c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c296:	4770      	bx	lr

0801c298 <_ZSt12__get_helperILj0EOhJEERT0_RSt11_Tuple_implIXT_EJS1_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801c298:	b580      	push	{r7, lr}
 801c29a:	b082      	sub	sp, #8
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801c2a0:	6878      	ldr	r0, [r7, #4]
 801c2a2:	f7ff ff0f 	bl	801c0c4 <_ZNSt11_Tuple_implILj0EJOhEE7_M_headERS1_>
 801c2a6:	4603      	mov	r3, r0
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	3708      	adds	r7, #8
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bd80      	pop	{r7, pc}

0801c2b0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801c2b0:	b480      	push	{r7}
 801c2b2:	b083      	sub	sp, #12
 801c2b4:	af00      	add	r7, sp, #0
 801c2b6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801c2b8:	4b03      	ldr	r3, [pc, #12]	; (801c2c8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17TIM_HandleTypeDefN4Time5AlarmEEEE11_M_max_sizeEv+0x18>)
      }
 801c2ba:	4618      	mov	r0, r3
 801c2bc:	370c      	adds	r7, #12
 801c2be:	46bd      	mov	sp, r7
 801c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2c4:	4770      	bx	lr
 801c2c6:	bf00      	nop
 801c2c8:	02e8ba2e 	.word	0x02e8ba2e

0801c2cc <_ZNSt10_Head_baseILj0ERKP17TIM_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 801c2cc:	b480      	push	{r7}
 801c2ce:	b083      	sub	sp, #12
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	4618      	mov	r0, r3
 801c2da:	370c      	adds	r7, #12
 801c2dc:	46bd      	mov	sp, r7
 801c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e2:	4770      	bx	lr

0801c2e4 <_ZSt12__get_helperILj0ERKP17TIM_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801c2e4:	b580      	push	{r7, lr}
 801c2e6:	b082      	sub	sp, #8
 801c2e8:	af00      	add	r7, sp, #0
 801c2ea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 801c2ec:	6878      	ldr	r0, [r7, #4]
 801c2ee:	f7ff ff3c 	bl	801c16a <_ZNSt11_Tuple_implILj0EJRKP17TIM_HandleTypeDefEE7_M_headERS4_>
 801c2f2:	4603      	mov	r3, r0
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	3708      	adds	r7, #8
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	bd80      	pop	{r7, pc}

0801c2fc <_ZSt14__copy_move_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b084      	sub	sp, #16
 801c300:	af00      	add	r7, sp, #0
 801c302:	60f8      	str	r0, [r7, #12]
 801c304:	60b9      	str	r1, [r7, #8]
 801c306:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801c308:	f7e5 f89e 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801c30c:	4603      	mov	r3, r0
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d006      	beq.n	801c320 <_ZSt14__copy_move_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 801c312:	687a      	ldr	r2, [r7, #4]
 801c314:	68b9      	ldr	r1, [r7, #8]
 801c316:	68f8      	ldr	r0, [r7, #12]
 801c318:	f000 f858 	bl	801c3cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_>
 801c31c:	4603      	mov	r3, r0
 801c31e:	e006      	b.n	801c32e <_ZSt14__copy_move_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 801c320:	687a      	ldr	r2, [r7, #4]
 801c322:	68b9      	ldr	r1, [r7, #8]
 801c324:	68f8      	ldr	r0, [r7, #12]
 801c326:	f000 f874 	bl	801c412 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_>
 801c32a:	4603      	mov	r3, r0
 801c32c:	bf00      	nop
    }
 801c32e:	4618      	mov	r0, r3
 801c330:	3710      	adds	r7, #16
 801c332:	46bd      	mov	sp, r7
 801c334:	bd80      	pop	{r7, pc}

0801c336 <_ZSt23__copy_move_backward_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 801c336:	b580      	push	{r7, lr}
 801c338:	b084      	sub	sp, #16
 801c33a:	af00      	add	r7, sp, #0
 801c33c:	60f8      	str	r0, [r7, #12]
 801c33e:	60b9      	str	r1, [r7, #8]
 801c340:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801c342:	f7e5 f881 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801c346:	4603      	mov	r3, r0
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d006      	beq.n	801c35a <_ZSt23__copy_move_backward_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_+0x24>
	  __copy_move_b(__first, __last, __result);
 801c34c:	687a      	ldr	r2, [r7, #4]
 801c34e:	68b9      	ldr	r1, [r7, #8]
 801c350:	68f8      	ldr	r0, [r7, #12]
 801c352:	f000 f87b 	bl	801c44c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_>
 801c356:	4603      	mov	r3, r0
 801c358:	e006      	b.n	801c368 <_ZSt23__copy_move_backward_a2ILb0EPPP17TIM_HandleTypeDefS3_ET1_T0_S5_S4_+0x32>
				       _Category>::__copy_move_b(__first,
 801c35a:	687a      	ldr	r2, [r7, #4]
 801c35c:	68b9      	ldr	r1, [r7, #8]
 801c35e:	68f8      	ldr	r0, [r7, #12]
 801c360:	f000 f897 	bl	801c492 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_>
 801c364:	4603      	mov	r3, r0
								 __result);
 801c366:	bf00      	nop
    }
 801c368:	4618      	mov	r0, r3
 801c36a:	3710      	adds	r7, #16
 801c36c:	46bd      	mov	sp, r7
 801c36e:	bd80      	pop	{r7, pc}

0801c370 <_ZNK9__gnu_cxx13new_allocatorIP17TIM_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801c370:	b480      	push	{r7}
 801c372:	b083      	sub	sp, #12
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801c378:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801c37c:	4618      	mov	r0, r3
 801c37e:	370c      	adds	r7, #12
 801c380:	46bd      	mov	sp, r7
 801c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c386:	4770      	bx	lr

0801c388 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801c388:	b580      	push	{r7, lr}
 801c38a:	b084      	sub	sp, #16
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	60f8      	str	r0, [r7, #12]
 801c390:	60b9      	str	r1, [r7, #8]
 801c392:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801c394:	68f8      	ldr	r0, [r7, #12]
 801c396:	f000 f89f 	bl	801c4d8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE11_M_max_sizeEv>
 801c39a:	4602      	mov	r2, r0
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	4293      	cmp	r3, r2
 801c3a0:	bf8c      	ite	hi
 801c3a2:	2301      	movhi	r3, #1
 801c3a4:	2300      	movls	r3, #0
 801c3a6:	b2db      	uxtb	r3, r3
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d001      	beq.n	801c3b0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801c3ac:	f009 ff40 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801c3b0:	68ba      	ldr	r2, [r7, #8]
 801c3b2:	4613      	mov	r3, r2
 801c3b4:	009b      	lsls	r3, r3, #2
 801c3b6:	4413      	add	r3, r2
 801c3b8:	009b      	lsls	r3, r3, #2
 801c3ba:	4618      	mov	r0, r3
 801c3bc:	f009 fe74 	bl	80260a8 <_Znwj>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	bf00      	nop
      }
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	3710      	adds	r7, #16
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	bd80      	pop	{r7, pc}

0801c3cc <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 801c3cc:	b480      	push	{r7}
 801c3ce:	b087      	sub	sp, #28
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	60f8      	str	r0, [r7, #12]
 801c3d4:	60b9      	str	r1, [r7, #8]
 801c3d6:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801c3d8:	68ba      	ldr	r2, [r7, #8]
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	1ad3      	subs	r3, r2, r3
 801c3de:	109b      	asrs	r3, r3, #2
 801c3e0:	617b      	str	r3, [r7, #20]
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	dd0d      	ble.n	801c404 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_+0x38>
	      *__result = *__first;
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	681a      	ldr	r2, [r3, #0]
 801c3ec:	687b      	ldr	r3, [r7, #4]
 801c3ee:	601a      	str	r2, [r3, #0]
	      ++__first;
 801c3f0:	68fb      	ldr	r3, [r7, #12]
 801c3f2:	3304      	adds	r3, #4
 801c3f4:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	3304      	adds	r3, #4
 801c3fa:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 801c3fc:	697b      	ldr	r3, [r7, #20]
 801c3fe:	3b01      	subs	r3, #1
 801c400:	617b      	str	r3, [r7, #20]
 801c402:	e7ee      	b.n	801c3e2 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_+0x16>
	  return __result;
 801c404:	687b      	ldr	r3, [r7, #4]
	}
 801c406:	4618      	mov	r0, r3
 801c408:	371c      	adds	r7, #28
 801c40a:	46bd      	mov	sp, r7
 801c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c410:	4770      	bx	lr

0801c412 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801c412:	b580      	push	{r7, lr}
 801c414:	b086      	sub	sp, #24
 801c416:	af00      	add	r7, sp, #0
 801c418:	60f8      	str	r0, [r7, #12]
 801c41a:	60b9      	str	r1, [r7, #8]
 801c41c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801c41e:	68ba      	ldr	r2, [r7, #8]
 801c420:	68fb      	ldr	r3, [r7, #12]
 801c422:	1ad3      	subs	r3, r2, r3
 801c424:	109b      	asrs	r3, r3, #2
 801c426:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801c428:	697b      	ldr	r3, [r7, #20]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d006      	beq.n	801c43c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801c42e:	697b      	ldr	r3, [r7, #20]
 801c430:	009b      	lsls	r3, r3, #2
 801c432:	461a      	mov	r2, r3
 801c434:	68f9      	ldr	r1, [r7, #12]
 801c436:	6878      	ldr	r0, [r7, #4]
 801c438:	f009 ff5c 	bl	80262f4 <memmove>
	  return __result + _Num;
 801c43c:	697b      	ldr	r3, [r7, #20]
 801c43e:	009b      	lsls	r3, r3, #2
 801c440:	687a      	ldr	r2, [r7, #4]
 801c442:	4413      	add	r3, r2
	}
 801c444:	4618      	mov	r0, r3
 801c446:	3718      	adds	r7, #24
 801c448:	46bd      	mov	sp, r7
 801c44a:	bd80      	pop	{r7, pc}

0801c44c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_>:
	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 801c44c:	b480      	push	{r7}
 801c44e:	b087      	sub	sp, #28
 801c450:	af00      	add	r7, sp, #0
 801c452:	60f8      	str	r0, [r7, #12]
 801c454:	60b9      	str	r1, [r7, #8]
 801c456:	607a      	str	r2, [r7, #4]
	    __n = __last - __first;
 801c458:	68ba      	ldr	r2, [r7, #8]
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	1ad3      	subs	r3, r2, r3
 801c45e:	109b      	asrs	r3, r3, #2
 801c460:	617b      	str	r3, [r7, #20]
	  for (; __n > 0; --__n)
 801c462:	697b      	ldr	r3, [r7, #20]
 801c464:	2b00      	cmp	r3, #0
 801c466:	dd0d      	ble.n	801c484 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_+0x38>
	    *--__result = *--__last;
 801c468:	68bb      	ldr	r3, [r7, #8]
 801c46a:	3b04      	subs	r3, #4
 801c46c:	60bb      	str	r3, [r7, #8]
 801c46e:	68bb      	ldr	r3, [r7, #8]
 801c470:	681a      	ldr	r2, [r3, #0]
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	3b04      	subs	r3, #4
 801c476:	607b      	str	r3, [r7, #4]
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	601a      	str	r2, [r3, #0]
	  for (; __n > 0; --__n)
 801c47c:	697b      	ldr	r3, [r7, #20]
 801c47e:	3b01      	subs	r3, #1
 801c480:	617b      	str	r3, [r7, #20]
 801c482:	e7ee      	b.n	801c462 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPPP17TIM_HandleTypeDefS6_EET0_T_S8_S7_+0x16>
	  return __result;
 801c484:	687b      	ldr	r3, [r7, #4]
	}
 801c486:	4618      	mov	r0, r3
 801c488:	371c      	adds	r7, #28
 801c48a:	46bd      	mov	sp, r7
 801c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c490:	4770      	bx	lr

0801c492 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801c492:	b580      	push	{r7, lr}
 801c494:	b086      	sub	sp, #24
 801c496:	af00      	add	r7, sp, #0
 801c498:	60f8      	str	r0, [r7, #12]
 801c49a:	60b9      	str	r1, [r7, #8]
 801c49c:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801c49e:	68ba      	ldr	r2, [r7, #8]
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	1ad3      	subs	r3, r2, r3
 801c4a4:	109b      	asrs	r3, r3, #2
 801c4a6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801c4a8:	697b      	ldr	r3, [r7, #20]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d00a      	beq.n	801c4c4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPP17TIM_HandleTypeDefEEPT_PKS6_S9_S7_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 801c4ae:	697b      	ldr	r3, [r7, #20]
 801c4b0:	009b      	lsls	r3, r3, #2
 801c4b2:	425b      	negs	r3, r3
 801c4b4:	687a      	ldr	r2, [r7, #4]
 801c4b6:	18d0      	adds	r0, r2, r3
 801c4b8:	697b      	ldr	r3, [r7, #20]
 801c4ba:	009b      	lsls	r3, r3, #2
 801c4bc:	461a      	mov	r2, r3
 801c4be:	68f9      	ldr	r1, [r7, #12]
 801c4c0:	f009 ff18 	bl	80262f4 <memmove>
	  return __result - _Num;
 801c4c4:	697b      	ldr	r3, [r7, #20]
 801c4c6:	009b      	lsls	r3, r3, #2
 801c4c8:	425b      	negs	r3, r3
 801c4ca:	687a      	ldr	r2, [r7, #4]
 801c4cc:	4413      	add	r3, r2
	}
 801c4ce:	4618      	mov	r0, r3
 801c4d0:	3718      	adds	r7, #24
 801c4d2:	46bd      	mov	sp, r7
 801c4d4:	bd80      	pop	{r7, pc}
	...

0801c4d8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801c4d8:	b480      	push	{r7}
 801c4da:	b083      	sub	sp, #12
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801c4e0:	4b03      	ldr	r3, [pc, #12]	; (801c4f0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIP17TIM_HandleTypeDefEE11_M_max_sizeEv+0x18>)
      }
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	370c      	adds	r7, #12
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ec:	4770      	bx	lr
 801c4ee:	bf00      	nop
 801c4f0:	06666666 	.word	0x06666666

0801c4f4 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b082      	sub	sp, #8
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	4618      	mov	r0, r3
 801c500:	f7fc fc3b 	bl	8018d7a <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefSt4pairIKS1_N4Time5AlarmEESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	4618      	mov	r0, r3
 801c508:	3708      	adds	r7, #8
 801c50a:	46bd      	mov	sp, r7
 801c50c:	bd80      	pop	{r7, pc}

0801c50e <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
 801c50e:	b580      	push	{r7, lr}
 801c510:	b082      	sub	sp, #8
 801c512:	af00      	add	r7, sp, #0
 801c514:	6078      	str	r0, [r7, #4]
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	4618      	mov	r0, r3
 801c51a:	f7fc fbf9 	bl	8018d10 <_ZNSt8_Rb_treeIhSt4pairIKhN4Time5AlarmEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	4618      	mov	r0, r3
 801c522:	3708      	adds	r7, #8
 801c524:	46bd      	mov	sp, r7
 801c526:	bd80      	pop	{r7, pc}

0801c528 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EED1Ev>:
      ~set() = default;
 801c528:	b580      	push	{r7, lr}
 801c52a:	b082      	sub	sp, #8
 801c52c:	af00      	add	r7, sp, #0
 801c52e:	6078      	str	r0, [r7, #4]
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	4618      	mov	r0, r3
 801c534:	f7fc fbb7 	bl	8018ca6 <_ZNSt8_Rb_treeIP17TIM_HandleTypeDefS1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EED1Ev>
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	4618      	mov	r0, r3
 801c53c:	3708      	adds	r7, #8
 801c53e:	46bd      	mov	sp, r7
 801c540:	bd80      	pop	{r7, pc}

0801c542 <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEED1Ev>:
    class stack
 801c542:	b580      	push	{r7, lr}
 801c544:	b082      	sub	sp, #8
 801c546:	af00      	add	r7, sp, #0
 801c548:	6078      	str	r0, [r7, #4]
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	4618      	mov	r0, r3
 801c54e:	f7fc fde7 	bl	8019120 <_ZNSt5dequeIP17TIM_HandleTypeDefSaIS1_EED1Ev>
 801c552:	687b      	ldr	r3, [r7, #4]
 801c554:	4618      	mov	r0, r3
 801c556:	3708      	adds	r7, #8
 801c558:	46bd      	mov	sp, r7
 801c55a:	bd80      	pop	{r7, pc}

0801c55c <_Z41__static_initialization_and_destruction_0ii>:
 801c55c:	b580      	push	{r7, lr}
 801c55e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 801c562:	af00      	add	r7, sp, #0
 801c564:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c568:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801c56c:	6018      	str	r0, [r3, #0]
 801c56e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c572:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801c576:	6019      	str	r1, [r3, #0]
 801c578:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c57c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801c580:	681b      	ldr	r3, [r3, #0]
 801c582:	2b01      	cmp	r3, #1
 801c584:	d173      	bne.n	801c66e <_Z41__static_initialization_and_destruction_0ii+0x112>
 801c586:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c58a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c594:	4293      	cmp	r3, r2
 801c596:	d16a      	bne.n	801c66e <_Z41__static_initialization_and_destruction_0ii+0x112>
forward_list<uint8_t> Time::high_precision_ids = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801c598:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c59c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 801c5a0:	4a48      	ldr	r2, [pc, #288]	; (801c6c4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	4611      	mov	r1, r2
 801c5a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c5aa:	461a      	mov	r2, r3
 801c5ac:	f009 fe94 	bl	80262d8 <memcpy>
 801c5b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c5b4:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801c5b8:	f107 0210 	add.w	r2, r7, #16
 801c5bc:	601a      	str	r2, [r3, #0]
 801c5be:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c5c2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 801c5c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c5ca:	605a      	str	r2, [r3, #4]
 801c5cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	f7f6 fa9e 	bl	8012b12 <_ZNSaIhEC1Ev>
 801c5d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c5da:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801c5de:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 801c5e2:	ca06      	ldmia	r2, {r1, r2}
 801c5e4:	4838      	ldr	r0, [pc, #224]	; (801c6c8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 801c5e6:	f7f6 faab 	bl	8012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801c5ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	f7f6 fa9b 	bl	8012b2a <_ZNSaIhED1Ev>
forward_list<uint8_t> Time::low_precision_ids = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801c5f4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801c5fc:	4a31      	ldr	r2, [pc, #196]	; (801c6c4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 801c5fe:	4618      	mov	r0, r3
 801c600:	4611      	mov	r1, r2
 801c602:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c606:	461a      	mov	r2, r3
 801c608:	f009 fe66 	bl	80262d8 <memcpy>
 801c60c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c610:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801c614:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 801c618:	601a      	str	r2, [r3, #0]
 801c61a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c61e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801c622:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c626:	605a      	str	r2, [r3, #4]
 801c628:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c62c:	4618      	mov	r0, r3
 801c62e:	f7f6 fa70 	bl	8012b12 <_ZNSaIhEC1Ev>
 801c632:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c636:	f507 7208 	add.w	r2, r7, #544	; 0x220
 801c63a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 801c63e:	ca06      	ldmia	r2, {r1, r2}
 801c640:	4822      	ldr	r0, [pc, #136]	; (801c6cc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 801c642:	f7f6 fa7d 	bl	8012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801c646:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c64a:	4618      	mov	r0, r3
 801c64c:	f7f6 fa6d 	bl	8012b2a <_ZNSaIhED1Ev>
stack<TIM_HandleTypeDef*> Time::available_high_precision_timers;
 801c650:	481f      	ldr	r0, [pc, #124]	; (801c6d0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 801c652:	f7fc faf4 	bl	8018c3e <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEEC1IS4_vEEv>
set<TIM_HandleTypeDef*> Time::high_precision_timers;
 801c656:	481f      	ldr	r0, [pc, #124]	; (801c6d4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 801c658:	f7fc f87a 	bl	8018750 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EEC1Ev>
map<uint8_t, Time::Alarm> Time::high_precision_alarms_by_id;
 801c65c:	481e      	ldr	r0, [pc, #120]	; (801c6d8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801c65e:	f7fc f89d 	bl	801879c <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
map<uint8_t, Time::Alarm> Time::low_precision_alarms_by_id;
 801c662:	481e      	ldr	r0, [pc, #120]	; (801c6dc <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801c664:	f7fc f89a 	bl	801879c <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
map<TIM_HandleTypeDef*, Time::Alarm> Time::high_precision_alarms_by_timer;
 801c668:	481d      	ldr	r0, [pc, #116]	; (801c6e0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801c66a:	f7fc f8bd 	bl	80187e8 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 801c66e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c672:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	2b00      	cmp	r3, #0
 801c67a:	d11d      	bne.n	801c6b8 <_Z41__static_initialization_and_destruction_0ii+0x15c>
 801c67c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c680:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c68a:	4293      	cmp	r3, r2
 801c68c:	d114      	bne.n	801c6b8 <_Z41__static_initialization_and_destruction_0ii+0x15c>
 801c68e:	4814      	ldr	r0, [pc, #80]	; (801c6e0 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801c690:	f7ff ff30 	bl	801c4f4 <_ZNSt3mapIP17TIM_HandleTypeDefN4Time5AlarmESt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<uint8_t, Time::Alarm> Time::low_precision_alarms_by_id;
 801c694:	4811      	ldr	r0, [pc, #68]	; (801c6dc <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801c696:	f7ff ff3a 	bl	801c50e <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEED1Ev>
map<uint8_t, Time::Alarm> Time::high_precision_alarms_by_id;
 801c69a:	480f      	ldr	r0, [pc, #60]	; (801c6d8 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801c69c:	f7ff ff37 	bl	801c50e <_ZNSt3mapIhN4Time5AlarmESt4lessIhESaISt4pairIKhS1_EEED1Ev>
set<TIM_HandleTypeDef*> Time::high_precision_timers;
 801c6a0:	480c      	ldr	r0, [pc, #48]	; (801c6d4 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 801c6a2:	f7ff ff41 	bl	801c528 <_ZNSt3setIP17TIM_HandleTypeDefSt4lessIS1_ESaIS1_EED1Ev>
stack<TIM_HandleTypeDef*> Time::available_high_precision_timers;
 801c6a6:	480a      	ldr	r0, [pc, #40]	; (801c6d0 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 801c6a8:	f7ff ff4b 	bl	801c542 <_ZNSt5stackIP17TIM_HandleTypeDefSt5dequeIS1_SaIS1_EEED1Ev>
forward_list<uint8_t> Time::low_precision_ids = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801c6ac:	4807      	ldr	r0, [pc, #28]	; (801c6cc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 801c6ae:	f7f6 fa75 	bl	8012b9c <_ZNSt12forward_listIhSaIhEED1Ev>
forward_list<uint8_t> Time::high_precision_ids = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801c6b2:	4805      	ldr	r0, [pc, #20]	; (801c6c8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 801c6b4:	f7f6 fa72 	bl	8012b9c <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801c6b8:	bf00      	nop
 801c6ba:	f507 7708 	add.w	r7, r7, #544	; 0x220
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bd80      	pop	{r7, pc}
 801c6c2:	bf00      	nop
 801c6c4:	08026a58 	.word	0x08026a58
 801c6c8:	24001148 	.word	0x24001148
 801c6cc:	2400114c 	.word	0x2400114c
 801c6d0:	24001150 	.word	0x24001150
 801c6d4:	24001178 	.word	0x24001178
 801c6d8:	24001190 	.word	0x24001190
 801c6dc:	240011a8 	.word	0x240011a8
 801c6e0:	240011c0 	.word	0x240011c0

0801c6e4 <_GLOBAL__sub_I__ZN4Time12global_timerE>:
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	af00      	add	r7, sp, #0
 801c6e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c6ec:	2001      	movs	r0, #1
 801c6ee:	f7ff ff35 	bl	801c55c <_Z41__static_initialization_and_destruction_0ii>
 801c6f2:	bd80      	pop	{r7, pc}

0801c6f4 <_GLOBAL__sub_D__ZN4Time12global_timerE>:
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	af00      	add	r7, sp, #0
 801c6f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c6fc:	2000      	movs	r0, #0
 801c6fe:	f7ff ff2d 	bl	801c55c <_Z41__static_initialization_and_destruction_0ii>
 801c702:	bd80      	pop	{r7, pc}

0801c704 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 801c704:	b580      	push	{r7, lr}
 801c706:	b082      	sub	sp, #8
 801c708:	af00      	add	r7, sp, #0
 801c70a:	6078      	str	r0, [r7, #4]
 801c70c:	687b      	ldr	r3, [r7, #4]
 801c70e:	4618      	mov	r0, r3
 801c710:	f000 fa2d 	bl	801cb6e <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implC1Ev>
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	4618      	mov	r0, r3
 801c718:	3708      	adds	r7, #8
 801c71a:	46bd      	mov	sp, r7
 801c71c:	bd80      	pop	{r7, pc}

0801c71e <_ZNSt6vectorISt8functionIFvvEESaIS2_EEC1Ev>:
      vector() = default;
 801c71e:	b580      	push	{r7, lr}
 801c720:	b082      	sub	sp, #8
 801c722:	af00      	add	r7, sp, #0
 801c724:	6078      	str	r0, [r7, #4]
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	4618      	mov	r0, r3
 801c72a:	f7ff ffeb 	bl	801c704 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EEC1Ev>
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	4618      	mov	r0, r3
 801c732:	3708      	adds	r7, #8
 801c734:	46bd      	mov	sp, r7
 801c736:	bd80      	pop	{r7, pc}

0801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801c738:	b480      	push	{r7}
 801c73a:	b083      	sub	sp, #12
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	4618      	mov	r0, r3
 801c744:	370c      	adds	r7, #12
 801c746:	46bd      	mov	sp, r7
 801c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c74c:	4770      	bx	lr

0801c74e <_ZN9__gnu_cxxeqIPSt8functionIFvvEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 801c74e:	b590      	push	{r4, r7, lr}
 801c750:	b083      	sub	sp, #12
 801c752:	af00      	add	r7, sp, #0
 801c754:	6078      	str	r0, [r7, #4]
 801c756:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 801c758:	6878      	ldr	r0, [r7, #4]
 801c75a:	f7ff ffed 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801c75e:	4603      	mov	r3, r0
 801c760:	681c      	ldr	r4, [r3, #0]
 801c762:	6838      	ldr	r0, [r7, #0]
 801c764:	f7ff ffe8 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801c768:	4603      	mov	r3, r0
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	429c      	cmp	r4, r3
 801c76e:	bf0c      	ite	eq
 801c770:	2301      	moveq	r3, #1
 801c772:	2300      	movne	r3, #0
 801c774:	b2db      	uxtb	r3, r3
 801c776:	4618      	mov	r0, r3
 801c778:	370c      	adds	r7, #12
 801c77a:	46bd      	mov	sp, r7
 801c77c:	bd90      	pop	{r4, r7, pc}

0801c77e <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801c77e:	b480      	push	{r7}
 801c780:	b083      	sub	sp, #12
 801c782:	af00      	add	r7, sp, #0
 801c784:	6078      	str	r0, [r7, #4]
	++_M_current;
 801c786:	687b      	ldr	r3, [r7, #4]
 801c788:	681b      	ldr	r3, [r3, #0]
 801c78a:	f103 0210 	add.w	r2, r3, #16
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	601a      	str	r2, [r3, #0]
	return *this;
 801c792:	687b      	ldr	r3, [r7, #4]
      }
 801c794:	4618      	mov	r0, r3
 801c796:	370c      	adds	r7, #12
 801c798:	46bd      	mov	sp, r7
 801c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c79e:	4770      	bx	lr

0801c7a0 <_ZN5State6updateEv>:
 * Created by Alejandro
 */

#include <StateMachine/StateMachine.hpp>

void State::update() {
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b08a      	sub	sp, #40	; 0x28
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
	for (function<void()> action : actions) {
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	627b      	str	r3, [r7, #36]	; 0x24
 801c7ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c7ae:	f000 f9ee 	bl	801cb8e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE5beginEv>
 801c7b2:	4603      	mov	r3, r0
 801c7b4:	613b      	str	r3, [r7, #16]
 801c7b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c7b8:	f000 f9f9 	bl	801cbae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE3endEv>
 801c7bc:	4603      	mov	r3, r0
 801c7be:	60fb      	str	r3, [r7, #12]
 801c7c0:	f107 020c 	add.w	r2, r7, #12
 801c7c4:	f107 0310 	add.w	r3, r7, #16
 801c7c8:	4611      	mov	r1, r2
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f7ff ffbf 	bl	801c74e <_ZN9__gnu_cxxeqIPSt8functionIFvvEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	f083 0301 	eor.w	r3, r3, #1
 801c7d6:	b2db      	uxtb	r3, r3
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d023      	beq.n	801c824 <_ZN5State6updateEv+0x84>
 801c7dc:	f107 0310 	add.w	r3, r7, #16
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	f000 f9f5 	bl	801cbd0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEdeEv>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	f107 0314 	add.w	r3, r7, #20
 801c7ec:	4611      	mov	r1, r2
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f7fa f8f5 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
		if (action) {
 801c7f4:	f107 0314 	add.w	r3, r7, #20
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	f7fa fe0e 	bl	801741a <_ZNKSt8functionIFvvEEcvbEv>
 801c7fe:	4603      	mov	r3, r0
 801c800:	2b00      	cmp	r3, #0
 801c802:	d004      	beq.n	801c80e <_ZN5State6updateEv+0x6e>
			action();
 801c804:	f107 0314 	add.w	r3, r7, #20
 801c808:	4618      	mov	r0, r3
 801c80a:	f7f9 fd91 	bl	8016330 <_ZNKSt8functionIFvvEEclEv>
	for (function<void()> action : actions) {
 801c80e:	f107 0314 	add.w	r3, r7, #20
 801c812:	4618      	mov	r0, r3
 801c814:	f7e4 febc 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
 801c818:	f107 0310 	add.w	r3, r7, #16
 801c81c:	4618      	mov	r0, r3
 801c81e:	f7ff ffae 	bl	801c77e <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEppEv>
 801c822:	e7cd      	b.n	801c7c0 <_ZN5State6updateEv+0x20>
		}
	}
}
 801c824:	bf00      	nop
 801c826:	3728      	adds	r7, #40	; 0x28
 801c828:	46bd      	mov	sp, r7
 801c82a:	bd80      	pop	{r7, pc}

0801c82c <_ZN5StateC1Ev>:
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b082      	sub	sp, #8
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	461a      	mov	r2, r3
 801c838:	2300      	movs	r3, #0
 801c83a:	6013      	str	r3, [r2, #0]
 801c83c:	6053      	str	r3, [r2, #4]
 801c83e:	6093      	str	r3, [r2, #8]
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	4618      	mov	r0, r3
 801c844:	f7ff ff6b 	bl	801c71e <_ZNSt6vectorISt8functionIFvvEESaIS2_EEC1Ev>
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	4618      	mov	r0, r3
 801c84c:	3708      	adds	r7, #8
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd80      	pop	{r7, pc}

0801c852 <_ZN5StateaSEOS_>:
 801c852:	b580      	push	{r7, lr}
 801c854:	b082      	sub	sp, #8
 801c856:	af00      	add	r7, sp, #0
 801c858:	6078      	str	r0, [r7, #4]
 801c85a:	6039      	str	r1, [r7, #0]
 801c85c:	683a      	ldr	r2, [r7, #0]
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	4611      	mov	r1, r2
 801c862:	4618      	mov	r0, r3
 801c864:	f000 fa1c 	bl	801cca0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EEaSEOS4_>
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	4618      	mov	r0, r3
 801c86c:	3708      	adds	r7, #8
 801c86e:	46bd      	mov	sp, r7
 801c870:	bd80      	pop	{r7, pc}

0801c872 <_ZN12StateMachineC1Eh>:

StateMachine::StateMachine(uint8_t initial_state) :
 801c872:	b580      	push	{r7, lr}
 801c874:	b086      	sub	sp, #24
 801c876:	af00      	add	r7, sp, #0
 801c878:	6078      	str	r0, [r7, #4]
 801c87a:	460b      	mov	r3, r1
 801c87c:	70fb      	strb	r3, [r7, #3]
	initial_state(initial_state), current_state(initial_state) {
 801c87e:	78fa      	ldrb	r2, [r7, #3]
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	701a      	strb	r2, [r3, #0]
 801c884:	78fa      	ldrb	r2, [r7, #3]
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	705a      	strb	r2, [r3, #1]
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	3304      	adds	r3, #4
 801c88e:	4618      	mov	r0, r3
 801c890:	f7e4 fea4 	bl	80015dc <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEC1Ev>
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	331c      	adds	r3, #28
 801c898:	4618      	mov	r0, r3
 801c89a:	f7e4 fed2 	bl	8001642 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEC1Ev>
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	3334      	adds	r3, #52	; 0x34
 801c8a2:	4618      	mov	r0, r3
 801c8a4:	f7e4 ff00 	bl	80016a8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEC1Ev>
	states[initial_state] = State();
 801c8a8:	f107 030c 	add.w	r3, r7, #12
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	601a      	str	r2, [r3, #0]
 801c8b0:	605a      	str	r2, [r3, #4]
 801c8b2:	609a      	str	r2, [r3, #8]
 801c8b4:	f107 030c 	add.w	r3, r7, #12
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	f7ff ffb7 	bl	801c82c <_ZN5StateC1Ev>
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	3304      	adds	r3, #4
 801c8c2:	1cfa      	adds	r2, r7, #3
 801c8c4:	4611      	mov	r1, r2
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f000 f98e 	bl	801cbe8 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801c8cc:	4602      	mov	r2, r0
 801c8ce:	f107 030c 	add.w	r3, r7, #12
 801c8d2:	4619      	mov	r1, r3
 801c8d4:	4610      	mov	r0, r2
 801c8d6:	f7ff ffbc 	bl	801c852 <_ZN5StateaSEOS_>
 801c8da:	f107 030c 	add.w	r3, r7, #12
 801c8de:	4618      	mov	r0, r3
 801c8e0:	f7e6 fced 	bl	80032be <_ZN5StateD1Ev>
}
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	3718      	adds	r7, #24
 801c8ea:	46bd      	mov	sp, r7
 801c8ec:	bd80      	pop	{r7, pc}

0801c8ee <_ZN12StateMachine9add_stateEh>:

void StateMachine::add_state(uint8_t state) {
 801c8ee:	b580      	push	{r7, lr}
 801c8f0:	b086      	sub	sp, #24
 801c8f2:	af00      	add	r7, sp, #0
 801c8f4:	6078      	str	r0, [r7, #4]
 801c8f6:	460b      	mov	r3, r1
 801c8f8:	70fb      	strb	r3, [r7, #3]
	if (states.contains(state)) {
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	3304      	adds	r3, #4
 801c8fe:	1cfa      	adds	r2, r7, #3
 801c900:	4611      	mov	r1, r2
 801c902:	4618      	mov	r0, r3
 801c904:	f000 f9e1 	bl	801ccca <_ZNKSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>
 801c908:	4603      	mov	r3, r0
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d11e      	bne.n	801c94c <_ZN12StateMachine9add_stateEh+0x5e>
		return;
	}
	states[state] = State();
 801c90e:	f107 030c 	add.w	r3, r7, #12
 801c912:	2200      	movs	r2, #0
 801c914:	601a      	str	r2, [r3, #0]
 801c916:	605a      	str	r2, [r3, #4]
 801c918:	609a      	str	r2, [r3, #8]
 801c91a:	f107 030c 	add.w	r3, r7, #12
 801c91e:	4618      	mov	r0, r3
 801c920:	f7ff ff84 	bl	801c82c <_ZN5StateC1Ev>
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	3304      	adds	r3, #4
 801c928:	1cfa      	adds	r2, r7, #3
 801c92a:	4611      	mov	r1, r2
 801c92c:	4618      	mov	r0, r3
 801c92e:	f000 f95b 	bl	801cbe8 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801c932:	4602      	mov	r2, r0
 801c934:	f107 030c 	add.w	r3, r7, #12
 801c938:	4619      	mov	r1, r3
 801c93a:	4610      	mov	r0, r2
 801c93c:	f7ff ff89 	bl	801c852 <_ZN5StateaSEOS_>
 801c940:	f107 030c 	add.w	r3, r7, #12
 801c944:	4618      	mov	r0, r3
 801c946:	f7e6 fcba 	bl	80032be <_ZN5StateD1Ev>
 801c94a:	e000      	b.n	801c94e <_ZN12StateMachine9add_stateEh+0x60>
		return;
 801c94c:	bf00      	nop
}
 801c94e:	3718      	adds	r7, #24
 801c950:	46bd      	mov	sp, r7
 801c952:	bd80      	pop	{r7, pc}

0801c954 <_ZN12StateMachine17add_update_actionESt8functionIFvvEEh>:

void StateMachine::add_update_action(function<void()> action) {
	states[current_state].actions.push_back(action);
}

void StateMachine::add_update_action(function<void()> action, uint8_t state) {
 801c954:	b580      	push	{r7, lr}
 801c956:	b084      	sub	sp, #16
 801c958:	af00      	add	r7, sp, #0
 801c95a:	60f8      	str	r0, [r7, #12]
 801c95c:	60b9      	str	r1, [r7, #8]
 801c95e:	4613      	mov	r3, r2
 801c960:	71fb      	strb	r3, [r7, #7]
	states[state].actions.push_back(action);
 801c962:	68fb      	ldr	r3, [r7, #12]
 801c964:	3304      	adds	r3, #4
 801c966:	1dfa      	adds	r2, r7, #7
 801c968:	4611      	mov	r1, r2
 801c96a:	4618      	mov	r0, r3
 801c96c:	f000 f93c 	bl	801cbe8 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801c970:	4603      	mov	r3, r0
 801c972:	68b9      	ldr	r1, [r7, #8]
 801c974:	4618      	mov	r0, r3
 801c976:	f000 f9ca 	bl	801cd0e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE9push_backERKS2_>
}
 801c97a:	bf00      	nop
 801c97c:	3710      	adds	r7, #16
 801c97e:	46bd      	mov	sp, r7
 801c980:	bd80      	pop	{r7, pc}

0801c982 <_ZN12StateMachine16add_enter_actionEhhSt8functionIFvvEE>:

void StateMachine::add_enter_action(uint8_t old_state, uint8_t new_state,
		function<void()> action) {
 801c982:	b580      	push	{r7, lr}
 801c984:	b084      	sub	sp, #16
 801c986:	af00      	add	r7, sp, #0
 801c988:	60f8      	str	r0, [r7, #12]
 801c98a:	607b      	str	r3, [r7, #4]
 801c98c:	460b      	mov	r3, r1
 801c98e:	72fb      	strb	r3, [r7, #11]
 801c990:	4613      	mov	r3, r2
 801c992:	72bb      	strb	r3, [r7, #10]
	on_enter[old_state][new_state].push_back(action);
 801c994:	68fb      	ldr	r3, [r7, #12]
 801c996:	3334      	adds	r3, #52	; 0x34
 801c998:	f107 020b 	add.w	r2, r7, #11
 801c99c:	4611      	mov	r1, r2
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f000 f9dc 	bl	801cd5c <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	f107 030a 	add.w	r3, r7, #10
 801c9aa:	4619      	mov	r1, r3
 801c9ac:	4610      	mov	r0, r2
 801c9ae:	f000 fa31 	bl	801ce14 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_>
 801c9b2:	4603      	mov	r3, r0
 801c9b4:	6879      	ldr	r1, [r7, #4]
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	f000 f9a9 	bl	801cd0e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE9push_backERKS2_>
}
 801c9bc:	bf00      	nop
 801c9be:	3710      	adds	r7, #16
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd80      	pop	{r7, pc}

0801c9c4 <_ZN12StateMachine6updateEv>:
void StateMachine::add_transition(uint8_t old_state, uint8_t new_state,
		function<bool()> transition) {
	transitions[old_state][new_state] = transition;
}

void StateMachine::update() {
 801c9c4:	b580      	push	{r7, lr}
 801c9c6:	b082      	sub	sp, #8
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
	states[current_state].update();
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	1d1a      	adds	r2, r3, #4
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	3301      	adds	r3, #1
 801c9d4:	4619      	mov	r1, r3
 801c9d6:	4610      	mov	r0, r2
 801c9d8:	f000 f906 	bl	801cbe8 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_>
 801c9dc:	4603      	mov	r3, r0
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f7ff fede 	bl	801c7a0 <_ZN5State6updateEv>
	check_transitions();
 801c9e4:	6878      	ldr	r0, [r7, #4]
 801c9e6:	f000 f81a 	bl	801ca1e <_ZN12StateMachine17check_transitionsEv>
}
 801c9ea:	bf00      	nop
 801c9ec:	3708      	adds	r7, #8
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	bd80      	pop	{r7, pc}

0801c9f2 <_ZNSt4pairIKhSt8functionIFbvEEEC1ERKS4_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 801c9f2:	b580      	push	{r7, lr}
 801c9f4:	b082      	sub	sp, #8
 801c9f6:	af00      	add	r7, sp, #0
 801c9f8:	6078      	str	r0, [r7, #4]
 801c9fa:	6039      	str	r1, [r7, #0]
 801c9fc:	683b      	ldr	r3, [r7, #0]
 801c9fe:	781a      	ldrb	r2, [r3, #0]
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	701a      	strb	r2, [r3, #0]
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	1d1a      	adds	r2, r3, #4
 801ca08:	683b      	ldr	r3, [r7, #0]
 801ca0a:	3304      	adds	r3, #4
 801ca0c:	4619      	mov	r1, r3
 801ca0e:	4610      	mov	r0, r2
 801ca10:	f000 fb05 	bl	801d01e <_ZNSt8functionIFbvEEC1ERKS1_>
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	4618      	mov	r0, r3
 801ca18:	3708      	adds	r7, #8
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	bd80      	pop	{r7, pc}

0801ca1e <_ZN12StateMachine17check_transitionsEv>:

void StateMachine::check_transitions() {
 801ca1e:	b580      	push	{r7, lr}
 801ca20:	b08a      	sub	sp, #40	; 0x28
 801ca22:	af00      	add	r7, sp, #0
 801ca24:	6078      	str	r0, [r7, #4]
	for (auto const state_transition : transitions[current_state]) {
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	f103 021c 	add.w	r2, r3, #28
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	3301      	adds	r3, #1
 801ca30:	4619      	mov	r1, r3
 801ca32:	4610      	mov	r0, r2
 801ca34:	f000 fa4a 	bl	801cecc <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_>
 801ca38:	6278      	str	r0, [r7, #36]	; 0x24
 801ca3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca3c:	f000 faa2 	bl	801cf84 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEE5beginEv>
 801ca40:	4603      	mov	r3, r0
 801ca42:	60fb      	str	r3, [r7, #12]
 801ca44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ca46:	f000 faaa 	bl	801cf9e <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEE3endEv>
 801ca4a:	4603      	mov	r3, r0
 801ca4c:	60bb      	str	r3, [r7, #8]
 801ca4e:	f107 0208 	add.w	r2, r7, #8
 801ca52:	f107 030c 	add.w	r3, r7, #12
 801ca56:	4611      	mov	r1, r2
 801ca58:	4618      	mov	r0, r3
 801ca5a:	f000 faad 	bl	801cfb8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEES8_>
 801ca5e:	4603      	mov	r3, r0
 801ca60:	f083 0301 	eor.w	r3, r3, #1
 801ca64:	b2db      	uxtb	r3, r3
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	d024      	beq.n	801cab4 <_ZN12StateMachine17check_transitionsEv+0x96>
 801ca6a:	f107 030c 	add.w	r3, r7, #12
 801ca6e:	4618      	mov	r0, r3
 801ca70:	f000 fac7 	bl	801d002 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEdeEv>
 801ca74:	4602      	mov	r2, r0
 801ca76:	f107 0310 	add.w	r3, r7, #16
 801ca7a:	4611      	mov	r1, r2
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	f7ff ffb8 	bl	801c9f2 <_ZNSt4pairIKhSt8functionIFbvEEEC1ERKS4_>
		if (state_transition.second()) {
 801ca82:	f107 0310 	add.w	r3, r7, #16
 801ca86:	3304      	adds	r3, #4
 801ca88:	4618      	mov	r0, r3
 801ca8a:	f000 faea 	bl	801d062 <_ZNKSt8functionIFbvEEclEv>
 801ca8e:	4603      	mov	r3, r0
 801ca90:	2b00      	cmp	r3, #0
 801ca92:	d004      	beq.n	801ca9e <_ZN12StateMachine17check_transitionsEv+0x80>
			change_state(state_transition.first);
 801ca94:	7c3b      	ldrb	r3, [r7, #16]
 801ca96:	4619      	mov	r1, r3
 801ca98:	6878      	ldr	r0, [r7, #4]
 801ca9a:	f000 f80f 	bl	801cabc <_ZN12StateMachine12change_stateEh>
	for (auto const state_transition : transitions[current_state]) {
 801ca9e:	f107 0310 	add.w	r3, r7, #16
 801caa2:	4618      	mov	r0, r3
 801caa4:	f7e6 fed6 	bl	8003854 <_ZNSt4pairIKhSt8functionIFbvEEED1Ev>
 801caa8:	f107 030c 	add.w	r3, r7, #12
 801caac:	4618      	mov	r0, r3
 801caae:	f000 fa97 	bl	801cfe0 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEppEv>
 801cab2:	e7cc      	b.n	801ca4e <_ZN12StateMachine17check_transitionsEv+0x30>
		}
	}
}
 801cab4:	bf00      	nop
 801cab6:	3728      	adds	r7, #40	; 0x28
 801cab8:	46bd      	mov	sp, r7
 801caba:	bd80      	pop	{r7, pc}

0801cabc <_ZN12StateMachine12change_stateEh>:

void StateMachine::change_state(uint8_t new_state) {
 801cabc:	b580      	push	{r7, lr}
 801cabe:	b08a      	sub	sp, #40	; 0x28
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
 801cac4:	460b      	mov	r3, r1
 801cac6:	70fb      	strb	r3, [r7, #3]
	for (auto const action : on_enter[current_state][new_state]) {
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	3301      	adds	r3, #1
 801cad2:	4619      	mov	r1, r3
 801cad4:	4610      	mov	r0, r2
 801cad6:	f000 f941 	bl	801cd5c <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_>
 801cada:	4602      	mov	r2, r0
 801cadc:	1cfb      	adds	r3, r7, #3
 801cade:	4619      	mov	r1, r3
 801cae0:	4610      	mov	r0, r2
 801cae2:	f000 f997 	bl	801ce14 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_>
 801cae6:	6278      	str	r0, [r7, #36]	; 0x24
 801cae8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801caea:	f000 f850 	bl	801cb8e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE5beginEv>
 801caee:	4603      	mov	r3, r0
 801caf0:	613b      	str	r3, [r7, #16]
 801caf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801caf4:	f000 f85b 	bl	801cbae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE3endEv>
 801caf8:	4603      	mov	r3, r0
 801cafa:	60fb      	str	r3, [r7, #12]
 801cafc:	f107 020c 	add.w	r2, r7, #12
 801cb00:	f107 0310 	add.w	r3, r7, #16
 801cb04:	4611      	mov	r1, r2
 801cb06:	4618      	mov	r0, r3
 801cb08:	f7ff fe21 	bl	801c74e <_ZN9__gnu_cxxeqIPSt8functionIFvvEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	f083 0301 	eor.w	r3, r3, #1
 801cb12:	b2db      	uxtb	r3, r3
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d023      	beq.n	801cb60 <_ZN12StateMachine12change_stateEh+0xa4>
 801cb18:	f107 0310 	add.w	r3, r7, #16
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	f000 f857 	bl	801cbd0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEdeEv>
 801cb22:	4602      	mov	r2, r0
 801cb24:	f107 0314 	add.w	r3, r7, #20
 801cb28:	4611      	mov	r1, r2
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	f7f9 ff57 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
		if (action) {
 801cb30:	f107 0314 	add.w	r3, r7, #20
 801cb34:	4618      	mov	r0, r3
 801cb36:	f7fa fc70 	bl	801741a <_ZNKSt8functionIFvvEEcvbEv>
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	d004      	beq.n	801cb4a <_ZN12StateMachine12change_stateEh+0x8e>
			action();
 801cb40:	f107 0314 	add.w	r3, r7, #20
 801cb44:	4618      	mov	r0, r3
 801cb46:	f7f9 fbf3 	bl	8016330 <_ZNKSt8functionIFvvEEclEv>
	for (auto const action : on_enter[current_state][new_state]) {
 801cb4a:	f107 0314 	add.w	r3, r7, #20
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f7e4 fd1e 	bl	8001590 <_ZNSt8functionIFvvEED1Ev>
 801cb54:	f107 0310 	add.w	r3, r7, #16
 801cb58:	4618      	mov	r0, r3
 801cb5a:	f7ff fe10 	bl	801c77e <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEppEv>
 801cb5e:	e7cd      	b.n	801cafc <_ZN12StateMachine12change_stateEh+0x40>
		}
	}
	current_state = new_state;
 801cb60:	78fa      	ldrb	r2, [r7, #3]
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	705a      	strb	r2, [r3, #1]
}
 801cb66:	bf00      	nop
 801cb68:	3728      	adds	r7, #40	; 0x28
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd80      	pop	{r7, pc}

0801cb6e <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801cb6e:	b580      	push	{r7, lr}
 801cb70:	b082      	sub	sp, #8
 801cb72:	af00      	add	r7, sp, #0
 801cb74:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 801cb76:	6878      	ldr	r0, [r7, #4]
 801cb78:	f000 fa8a 	bl	801d090 <_ZNSaISt8functionIFvvEEEC1Ev>
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	4618      	mov	r0, r3
 801cb80:	f000 fa92 	bl	801d0a8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	4618      	mov	r0, r3
 801cb88:	3708      	adds	r7, #8
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}

0801cb8e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801cb8e:	b580      	push	{r7, lr}
 801cb90:	b084      	sub	sp, #16
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801cb96:	687a      	ldr	r2, [r7, #4]
 801cb98:	f107 030c 	add.w	r3, r7, #12
 801cb9c:	4611      	mov	r1, r2
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f000 fa96 	bl	801d0d0 <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	4618      	mov	r0, r3
 801cba8:	3710      	adds	r7, #16
 801cbaa:	46bd      	mov	sp, r7
 801cbac:	bd80      	pop	{r7, pc}

0801cbae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801cbae:	b580      	push	{r7, lr}
 801cbb0:	b084      	sub	sp, #16
 801cbb2:	af00      	add	r7, sp, #0
 801cbb4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	1d1a      	adds	r2, r3, #4
 801cbba:	f107 030c 	add.w	r3, r7, #12
 801cbbe:	4611      	mov	r1, r2
 801cbc0:	4618      	mov	r0, r3
 801cbc2:	f000 fa85 	bl	801d0d0 <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	4618      	mov	r0, r3
 801cbca:	3710      	adds	r7, #16
 801cbcc:	46bd      	mov	sp, r7
 801cbce:	bd80      	pop	{r7, pc}

0801cbd0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801cbd0:	b480      	push	{r7}
 801cbd2:	b083      	sub	sp, #12
 801cbd4:	af00      	add	r7, sp, #0
 801cbd6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	4618      	mov	r0, r3
 801cbde:	370c      	adds	r7, #12
 801cbe0:	46bd      	mov	sp, r7
 801cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe6:	4770      	bx	lr

0801cbe8 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_>:
      operator[](const key_type& __k)
 801cbe8:	b590      	push	{r4, r7, lr}
 801cbea:	b08b      	sub	sp, #44	; 0x2c
 801cbec:	af02      	add	r7, sp, #8
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801cbf2:	6839      	ldr	r1, [r7, #0]
 801cbf4:	6878      	ldr	r0, [r7, #4]
 801cbf6:	f000 fa7b 	bl	801d0f0 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>
 801cbfa:	4603      	mov	r3, r0
 801cbfc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801cbfe:	6878      	ldr	r0, [r7, #4]
 801cc00:	f000 fa85 	bl	801d10e <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE3endEv>
 801cc04:	4603      	mov	r3, r0
 801cc06:	60fb      	str	r3, [r7, #12]
 801cc08:	f107 020c 	add.w	r2, r7, #12
 801cc0c:	f107 0308 	add.w	r3, r7, #8
 801cc10:	4611      	mov	r1, r2
 801cc12:	4618      	mov	r0, r3
 801cc14:	f000 fa88 	bl	801d128 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh5StateEES6_>
 801cc18:	4603      	mov	r3, r0
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d112      	bne.n	801cc44 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x5c>
 801cc1e:	6878      	ldr	r0, [r7, #4]
 801cc20:	f000 fa96 	bl	801d150 <_ZNKSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>
 801cc24:	f107 0308 	add.w	r3, r7, #8
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f000 fa9e 	bl	801d16a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh5StateEEdeEv>
 801cc2e:	4603      	mov	r3, r0
 801cc30:	461a      	mov	r2, r3
 801cc32:	f107 0310 	add.w	r3, r7, #16
 801cc36:	6839      	ldr	r1, [r7, #0]
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f7f6 fc5d 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801cc3e:	4603      	mov	r3, r0
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d001      	beq.n	801cc48 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x60>
 801cc44:	2301      	movs	r3, #1
 801cc46:	e000      	b.n	801cc4a <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x62>
 801cc48:	2300      	movs	r3, #0
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	d01b      	beq.n	801cc86 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cc4e:	687c      	ldr	r4, [r7, #4]
 801cc50:	f107 0208 	add.w	r2, r7, #8
 801cc54:	f107 0314 	add.w	r3, r7, #20
 801cc58:	4611      	mov	r1, r2
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f000 fa93 	bl	801d186 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh5StateEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					    std::tuple<const key_type&>(__k),
 801cc60:	f107 0318 	add.w	r3, r7, #24
 801cc64:	6839      	ldr	r1, [r7, #0]
 801cc66:	4618      	mov	r0, r3
 801cc68:	f7f6 fc5b 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cc6c:	f107 0218 	add.w	r2, r7, #24
 801cc70:	f107 031c 	add.w	r3, r7, #28
 801cc74:	9300      	str	r3, [sp, #0]
 801cc76:	4613      	mov	r3, r2
 801cc78:	4a08      	ldr	r2, [pc, #32]	; (801cc9c <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEEixERS4_+0xb4>)
 801cc7a:	6979      	ldr	r1, [r7, #20]
 801cc7c:	4620      	mov	r0, r4
 801cc7e:	f000 fa92 	bl	801d1a6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 801cc82:	4603      	mov	r3, r0
 801cc84:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801cc86:	f107 0308 	add.w	r3, r7, #8
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f000 fa6d 	bl	801d16a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh5StateEEdeEv>
 801cc90:	4603      	mov	r3, r0
 801cc92:	3304      	adds	r3, #4
      }
 801cc94:	4618      	mov	r0, r3
 801cc96:	3724      	adds	r7, #36	; 0x24
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	bd90      	pop	{r4, r7, pc}
 801cc9c:	08026cc4 	.word	0x08026cc4

0801cca0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EEaSEOS4_>:
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 801cca0:	b590      	push	{r4, r7, lr}
 801cca2:	b085      	sub	sp, #20
 801cca4:	af00      	add	r7, sp, #0
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	6039      	str	r1, [r7, #0]
	constexpr bool __move_storage =
 801ccaa:	2301      	movs	r3, #1
 801ccac:	73fb      	strb	r3, [r7, #15]
	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 801ccae:	6838      	ldr	r0, [r7, #0]
 801ccb0:	f000 fab7 	bl	801d222 <_ZSt4moveIRSt6vectorISt8functionIFvvEESaIS3_EEEONSt16remove_referenceIT_E4typeEOS8_>
 801ccb4:	4603      	mov	r3, r0
 801ccb6:	4622      	mov	r2, r4
 801ccb8:	4619      	mov	r1, r3
 801ccba:	6878      	ldr	r0, [r7, #4]
 801ccbc:	f000 fabc 	bl	801d238 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE14_M_move_assignEOS4_St17integral_constantIbLb1EE>
	return *this;
 801ccc0:	687b      	ldr	r3, [r7, #4]
      }
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	3714      	adds	r7, #20
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	bd90      	pop	{r4, r7, pc}

0801ccca <_ZNKSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE8containsERS4_>:
      contains(const key_type& __x) const
 801ccca:	b580      	push	{r7, lr}
 801cccc:	b084      	sub	sp, #16
 801ccce:	af00      	add	r7, sp, #0
 801ccd0:	6078      	str	r0, [r7, #4]
 801ccd2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	6839      	ldr	r1, [r7, #0]
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f000 faeb 	bl	801d2b4 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>
 801ccde:	4603      	mov	r3, r0
 801cce0:	60bb      	str	r3, [r7, #8]
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	4618      	mov	r0, r3
 801cce6:	f000 fb21 	bl	801d32c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801ccea:	4603      	mov	r3, r0
 801ccec:	60fb      	str	r3, [r7, #12]
 801ccee:	f107 020c 	add.w	r2, r7, #12
 801ccf2:	f107 0308 	add.w	r3, r7, #8
 801ccf6:	4611      	mov	r1, r2
 801ccf8:	4618      	mov	r0, r3
 801ccfa:	f000 fb28 	bl	801d34e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh5StateEES6_>
 801ccfe:	4603      	mov	r3, r0
 801cd00:	f083 0301 	eor.w	r3, r3, #1
 801cd04:	b2db      	uxtb	r3, r3
 801cd06:	4618      	mov	r0, r3
 801cd08:	3710      	adds	r7, #16
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	bd80      	pop	{r7, pc}

0801cd0e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE9push_backERKS2_>:
      push_back(const value_type& __x)
 801cd0e:	b580      	push	{r7, lr}
 801cd10:	b082      	sub	sp, #8
 801cd12:	af00      	add	r7, sp, #0
 801cd14:	6078      	str	r0, [r7, #4]
 801cd16:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	685a      	ldr	r2, [r3, #4]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	689b      	ldr	r3, [r3, #8]
 801cd20:	429a      	cmp	r2, r3
 801cd22:	d00d      	beq.n	801cd40 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE9push_backERKS2_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	685b      	ldr	r3, [r3, #4]
 801cd2a:	683a      	ldr	r2, [r7, #0]
 801cd2c:	4619      	mov	r1, r3
 801cd2e:	f000 fb3a 	bl	801d3a6 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	685b      	ldr	r3, [r3, #4]
 801cd36:	f103 0210 	add.w	r2, r3, #16
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	605a      	str	r2, [r3, #4]
      }
 801cd3e:	e008      	b.n	801cd52 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE9push_backERKS2_+0x44>
	  _M_realloc_insert(end(), __x);
 801cd40:	6878      	ldr	r0, [r7, #4]
 801cd42:	f7ff ff34 	bl	801cbae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE3endEv>
 801cd46:	4603      	mov	r3, r0
 801cd48:	683a      	ldr	r2, [r7, #0]
 801cd4a:	4619      	mov	r1, r3
 801cd4c:	6878      	ldr	r0, [r7, #4]
 801cd4e:	f000 fb3d 	bl	801d3cc <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
      }
 801cd52:	bf00      	nop
 801cd54:	3708      	adds	r7, #8
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}
	...

0801cd5c <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_>:
      operator[](const key_type& __k)
 801cd5c:	b590      	push	{r4, r7, lr}
 801cd5e:	b08b      	sub	sp, #44	; 0x2c
 801cd60:	af02      	add	r7, sp, #8
 801cd62:	6078      	str	r0, [r7, #4]
 801cd64:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801cd66:	6839      	ldr	r1, [r7, #0]
 801cd68:	6878      	ldr	r0, [r7, #4]
 801cd6a:	f000 fbab 	bl	801d4c4 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE11lower_boundERS9_>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801cd72:	6878      	ldr	r0, [r7, #4]
 801cd74:	f000 fbb5 	bl	801d4e2 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE3endEv>
 801cd78:	4603      	mov	r3, r0
 801cd7a:	60fb      	str	r3, [r7, #12]
 801cd7c:	f107 020c 	add.w	r2, r7, #12
 801cd80:	f107 0308 	add.w	r3, r7, #8
 801cd84:	4611      	mov	r1, r2
 801cd86:	4618      	mov	r0, r3
 801cd88:	f000 fbb8 	bl	801d4fc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEESH_>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	d112      	bne.n	801cdb8 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_+0x5c>
 801cd92:	6878      	ldr	r0, [r7, #4]
 801cd94:	f000 fbc6 	bl	801d524 <_ZNKSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE8key_compEv>
 801cd98:	f107 0308 	add.w	r3, r7, #8
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f000 fbce 	bl	801d53e <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEdeEv>
 801cda2:	4603      	mov	r3, r0
 801cda4:	461a      	mov	r2, r3
 801cda6:	f107 0310 	add.w	r3, r7, #16
 801cdaa:	6839      	ldr	r1, [r7, #0]
 801cdac:	4618      	mov	r0, r3
 801cdae:	f7f6 fba3 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d001      	beq.n	801cdbc <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_+0x60>
 801cdb8:	2301      	movs	r3, #1
 801cdba:	e000      	b.n	801cdbe <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_+0x62>
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d01b      	beq.n	801cdfa <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cdc2:	687c      	ldr	r4, [r7, #4]
 801cdc4:	f107 0208 	add.w	r2, r7, #8
 801cdc8:	f107 0314 	add.w	r3, r7, #20
 801cdcc:	4611      	mov	r1, r2
 801cdce:	4618      	mov	r0, r3
 801cdd0:	f000 fbc3 	bl	801d55a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1ERKSt17_Rb_tree_iteratorISE_E>
					    std::tuple<const key_type&>(__k),
 801cdd4:	f107 0318 	add.w	r3, r7, #24
 801cdd8:	6839      	ldr	r1, [r7, #0]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f7f6 fba1 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cde0:	f107 0218 	add.w	r2, r7, #24
 801cde4:	f107 031c 	add.w	r3, r7, #28
 801cde8:	9300      	str	r3, [sp, #0]
 801cdea:	4613      	mov	r3, r2
 801cdec:	4a08      	ldr	r2, [pc, #32]	; (801ce10 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEEixERS9_+0xb4>)
 801cdee:	6979      	ldr	r1, [r7, #20]
 801cdf0:	4620      	mov	r0, r4
 801cdf2:	f000 fbc2 	bl	801d57a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEESt17_Rb_tree_iteratorISE_ESt23_Rb_tree_const_iteratorISE_EDpOT_>
 801cdf6:	4603      	mov	r3, r0
 801cdf8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801cdfa:	f107 0308 	add.w	r3, r7, #8
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f000 fb9d 	bl	801d53e <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEdeEv>
 801ce04:	4603      	mov	r3, r0
 801ce06:	3304      	adds	r3, #4
      }
 801ce08:	4618      	mov	r0, r3
 801ce0a:	3724      	adds	r7, #36	; 0x24
 801ce0c:	46bd      	mov	sp, r7
 801ce0e:	bd90      	pop	{r4, r7, pc}
 801ce10:	08026cc4 	.word	0x08026cc4

0801ce14 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_>:
      operator[](const key_type& __k)
 801ce14:	b590      	push	{r4, r7, lr}
 801ce16:	b08b      	sub	sp, #44	; 0x2c
 801ce18:	af02      	add	r7, sp, #8
 801ce1a:	6078      	str	r0, [r7, #4]
 801ce1c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801ce1e:	6839      	ldr	r1, [r7, #0]
 801ce20:	6878      	ldr	r0, [r7, #4]
 801ce22:	f000 fbe8 	bl	801d5f6 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE11lower_boundERS9_>
 801ce26:	4603      	mov	r3, r0
 801ce28:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801ce2a:	6878      	ldr	r0, [r7, #4]
 801ce2c:	f000 fbf2 	bl	801d614 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE3endEv>
 801ce30:	4603      	mov	r3, r0
 801ce32:	60fb      	str	r3, [r7, #12]
 801ce34:	f107 020c 	add.w	r2, r7, #12
 801ce38:	f107 0308 	add.w	r3, r7, #8
 801ce3c:	4611      	mov	r1, r2
 801ce3e:	4618      	mov	r0, r3
 801ce40:	f000 fbf5 	bl	801d62e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEESB_>
 801ce44:	4603      	mov	r3, r0
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d112      	bne.n	801ce70 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_+0x5c>
 801ce4a:	6878      	ldr	r0, [r7, #4]
 801ce4c:	f000 fc03 	bl	801d656 <_ZNKSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE8key_compEv>
 801ce50:	f107 0308 	add.w	r3, r7, #8
 801ce54:	4618      	mov	r0, r3
 801ce56:	f000 fc0b 	bl	801d670 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEdeEv>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	461a      	mov	r2, r3
 801ce5e:	f107 0310 	add.w	r3, r7, #16
 801ce62:	6839      	ldr	r1, [r7, #0]
 801ce64:	4618      	mov	r0, r3
 801ce66:	f7f6 fb47 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	d001      	beq.n	801ce74 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_+0x60>
 801ce70:	2301      	movs	r3, #1
 801ce72:	e000      	b.n	801ce76 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_+0x62>
 801ce74:	2300      	movs	r3, #0
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d01b      	beq.n	801ceb2 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801ce7a:	687c      	ldr	r4, [r7, #4]
 801ce7c:	f107 0208 	add.w	r2, r7, #8
 801ce80:	f107 0314 	add.w	r3, r7, #20
 801ce84:	4611      	mov	r1, r2
 801ce86:	4618      	mov	r0, r3
 801ce88:	f000 fc00 	bl	801d68c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1ERKSt17_Rb_tree_iteratorIS8_E>
					    std::tuple<const key_type&>(__k),
 801ce8c:	f107 0318 	add.w	r3, r7, #24
 801ce90:	6839      	ldr	r1, [r7, #0]
 801ce92:	4618      	mov	r0, r3
 801ce94:	f7f6 fb45 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801ce98:	f107 0218 	add.w	r2, r7, #24
 801ce9c:	f107 031c 	add.w	r3, r7, #28
 801cea0:	9300      	str	r3, [sp, #0]
 801cea2:	4613      	mov	r3, r2
 801cea4:	4a08      	ldr	r2, [pc, #32]	; (801cec8 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEixERS9_+0xb4>)
 801cea6:	6979      	ldr	r1, [r7, #20]
 801cea8:	4620      	mov	r0, r4
 801ceaa:	f000 fbff 	bl	801d6ac <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>
 801ceae:	4603      	mov	r3, r0
 801ceb0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801ceb2:	f107 0308 	add.w	r3, r7, #8
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f000 fbda 	bl	801d670 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEdeEv>
 801cebc:	4603      	mov	r3, r0
 801cebe:	3304      	adds	r3, #4
      }
 801cec0:	4618      	mov	r0, r3
 801cec2:	3724      	adds	r7, #36	; 0x24
 801cec4:	46bd      	mov	sp, r7
 801cec6:	bd90      	pop	{r4, r7, pc}
 801cec8:	08026cc4 	.word	0x08026cc4

0801cecc <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_>:
      operator[](const key_type& __k)
 801cecc:	b590      	push	{r4, r7, lr}
 801cece:	b08b      	sub	sp, #44	; 0x2c
 801ced0:	af02      	add	r7, sp, #8
 801ced2:	6078      	str	r0, [r7, #4]
 801ced4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801ced6:	6839      	ldr	r1, [r7, #0]
 801ced8:	6878      	ldr	r0, [r7, #4]
 801ceda:	f000 fc25 	bl	801d728 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE11lower_boundERS6_>
 801cede:	4603      	mov	r3, r0
 801cee0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801cee2:	6878      	ldr	r0, [r7, #4]
 801cee4:	f000 fc2f 	bl	801d746 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE3endEv>
 801cee8:	4603      	mov	r3, r0
 801ceea:	60fb      	str	r3, [r7, #12]
 801ceec:	f107 020c 	add.w	r2, r7, #12
 801cef0:	f107 0308 	add.w	r3, r7, #8
 801cef4:	4611      	mov	r1, r2
 801cef6:	4618      	mov	r0, r3
 801cef8:	f000 fc32 	bl	801d760 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEESE_>
 801cefc:	4603      	mov	r3, r0
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d112      	bne.n	801cf28 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_+0x5c>
 801cf02:	6878      	ldr	r0, [r7, #4]
 801cf04:	f000 fc40 	bl	801d788 <_ZNKSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE8key_compEv>
 801cf08:	f107 0308 	add.w	r3, r7, #8
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	f000 fc48 	bl	801d7a2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEdeEv>
 801cf12:	4603      	mov	r3, r0
 801cf14:	461a      	mov	r2, r3
 801cf16:	f107 0310 	add.w	r3, r7, #16
 801cf1a:	6839      	ldr	r1, [r7, #0]
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f7f6 faeb 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801cf22:	4603      	mov	r3, r0
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d001      	beq.n	801cf2c <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_+0x60>
 801cf28:	2301      	movs	r3, #1
 801cf2a:	e000      	b.n	801cf2e <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_+0x62>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d01b      	beq.n	801cf6a <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cf32:	687c      	ldr	r4, [r7, #4]
 801cf34:	f107 0208 	add.w	r2, r7, #8
 801cf38:	f107 0314 	add.w	r3, r7, #20
 801cf3c:	4611      	mov	r1, r2
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f000 fc3d 	bl	801d7be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1ERKSt17_Rb_tree_iteratorISB_E>
					    std::tuple<const key_type&>(__k),
 801cf44:	f107 0318 	add.w	r3, r7, #24
 801cf48:	6839      	ldr	r1, [r7, #0]
 801cf4a:	4618      	mov	r0, r3
 801cf4c:	f7f6 fae9 	bl	8013522 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801cf50:	f107 0218 	add.w	r2, r7, #24
 801cf54:	f107 031c 	add.w	r3, r7, #28
 801cf58:	9300      	str	r3, [sp, #0]
 801cf5a:	4613      	mov	r3, r2
 801cf5c:	4a08      	ldr	r2, [pc, #32]	; (801cf80 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEEixERS6_+0xb4>)
 801cf5e:	6979      	ldr	r1, [r7, #20]
 801cf60:	4620      	mov	r0, r4
 801cf62:	f000 fc3c 	bl	801d7de <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>
 801cf66:	4603      	mov	r3, r0
 801cf68:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801cf6a:	f107 0308 	add.w	r3, r7, #8
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f000 fc17 	bl	801d7a2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEdeEv>
 801cf74:	4603      	mov	r3, r0
 801cf76:	3304      	adds	r3, #4
      }
 801cf78:	4618      	mov	r0, r3
 801cf7a:	3724      	adds	r7, #36	; 0x24
 801cf7c:	46bd      	mov	sp, r7
 801cf7e:	bd90      	pop	{r4, r7, pc}
 801cf80:	08026cc4 	.word	0x08026cc4

0801cf84 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801cf84:	b580      	push	{r7, lr}
 801cf86:	b082      	sub	sp, #8
 801cf88:	af00      	add	r7, sp, #0
 801cf8a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 801cf8c:	687b      	ldr	r3, [r7, #4]
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f000 fc63 	bl	801d85a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE5beginEv>
 801cf94:	4603      	mov	r3, r0
 801cf96:	4618      	mov	r0, r3
 801cf98:	3708      	adds	r7, #8
 801cf9a:	46bd      	mov	sp, r7
 801cf9c:	bd80      	pop	{r7, pc}

0801cf9e <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801cf9e:	b580      	push	{r7, lr}
 801cfa0:	b082      	sub	sp, #8
 801cfa2:	af00      	add	r7, sp, #0
 801cfa4:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	4618      	mov	r0, r3
 801cfaa:	f000 fc67 	bl	801d87c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE3endEv>
 801cfae:	4603      	mov	r3, r0
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	3708      	adds	r7, #8
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bd80      	pop	{r7, pc}

0801cfb8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801cfb8:	b480      	push	{r7}
 801cfba:	b083      	sub	sp, #12
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	6078      	str	r0, [r7, #4]
 801cfc0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	681a      	ldr	r2, [r3, #0]
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	429a      	cmp	r2, r3
 801cfcc:	bf0c      	ite	eq
 801cfce:	2301      	moveq	r3, #1
 801cfd0:	2300      	movne	r3, #0
 801cfd2:	b2db      	uxtb	r3, r3
 801cfd4:	4618      	mov	r0, r3
 801cfd6:	370c      	adds	r7, #12
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfde:	4770      	bx	lr

0801cfe0 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b082      	sub	sp, #8
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	4618      	mov	r0, r3
 801cfee:	f009 f8c0 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801cff2:	4602      	mov	r2, r0
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	601a      	str	r2, [r3, #0]
	return *this;
 801cff8:	687b      	ldr	r3, [r7, #4]
      }
 801cffa:	4618      	mov	r0, r3
 801cffc:	3708      	adds	r7, #8
 801cffe:	46bd      	mov	sp, r7
 801d000:	bd80      	pop	{r7, pc}

0801d002 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801d002:	b580      	push	{r7, lr}
 801d004:	b082      	sub	sp, #8
 801d006:	af00      	add	r7, sp, #0
 801d008:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	4618      	mov	r0, r3
 801d010:	f7e6 fb8a 	bl	8003728 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEE9_M_valptrEv>
 801d014:	4603      	mov	r3, r0
 801d016:	4618      	mov	r0, r3
 801d018:	3708      	adds	r7, #8
 801d01a:	46bd      	mov	sp, r7
 801d01c:	bd80      	pop	{r7, pc}

0801d01e <_ZNSt8functionIFbvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 801d01e:	b580      	push	{r7, lr}
 801d020:	b082      	sub	sp, #8
 801d022:	af00      	add	r7, sp, #0
 801d024:	6078      	str	r0, [r7, #4]
 801d026:	6039      	str	r1, [r7, #0]
    : _Function_base()
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	4618      	mov	r0, r3
 801d02c:	f7e4 fa83 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 801d030:	6838      	ldr	r0, [r7, #0]
 801d032:	f000 fc34 	bl	801d89e <_ZNKSt8functionIFbvEEcvbEv>
 801d036:	4603      	mov	r3, r0
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d00d      	beq.n	801d058 <_ZNSt8functionIFbvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 801d03c:	683b      	ldr	r3, [r7, #0]
 801d03e:	689b      	ldr	r3, [r3, #8]
 801d040:	6878      	ldr	r0, [r7, #4]
 801d042:	6839      	ldr	r1, [r7, #0]
 801d044:	2202      	movs	r2, #2
 801d046:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801d048:	683b      	ldr	r3, [r7, #0]
 801d04a:	68da      	ldr	r2, [r3, #12]
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	689a      	ldr	r2, [r3, #8]
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	609a      	str	r2, [r3, #8]
    }
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	4618      	mov	r0, r3
 801d05c:	3708      	adds	r7, #8
 801d05e:	46bd      	mov	sp, r7
 801d060:	bd80      	pop	{r7, pc}

0801d062 <_ZNKSt8functionIFbvEEclEv>:
    function<_Res(_ArgTypes...)>::
 801d062:	b580      	push	{r7, lr}
 801d064:	b082      	sub	sp, #8
 801d066:	af00      	add	r7, sp, #0
 801d068:	6078      	str	r0, [r7, #4]
      if (_M_empty())
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	4618      	mov	r0, r3
 801d06e:	f7f8 ffff 	bl	8016070 <_ZNKSt14_Function_base8_M_emptyEv>
 801d072:	4603      	mov	r3, r0
 801d074:	2b00      	cmp	r3, #0
 801d076:	d001      	beq.n	801d07c <_ZNKSt8functionIFbvEEclEv+0x1a>
	__throw_bad_function_call();
 801d078:	f009 f8e0 	bl	802623c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	68db      	ldr	r3, [r3, #12]
 801d080:	687a      	ldr	r2, [r7, #4]
 801d082:	4610      	mov	r0, r2
 801d084:	4798      	blx	r3
 801d086:	4603      	mov	r3, r0
    }
 801d088:	4618      	mov	r0, r3
 801d08a:	3708      	adds	r7, #8
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}

0801d090 <_ZNSaISt8functionIFvvEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
 801d098:	6878      	ldr	r0, [r7, #4]
 801d09a:	f000 fc10 	bl	801d8be <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEEC1Ev>
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3708      	adds	r7, #8
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}

0801d0a8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 801d0a8:	b480      	push	{r7}
 801d0aa:	b083      	sub	sp, #12
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	2200      	movs	r2, #0
 801d0b4:	601a      	str	r2, [r3, #0]
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	605a      	str	r2, [r3, #4]
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	2200      	movs	r2, #0
 801d0c0:	609a      	str	r2, [r3, #8]
	{ }
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	370c      	adds	r7, #12
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ce:	4770      	bx	lr

0801d0d0 <_ZN9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801d0d0:	b480      	push	{r7}
 801d0d2:	b083      	sub	sp, #12
 801d0d4:	af00      	add	r7, sp, #0
 801d0d6:	6078      	str	r0, [r7, #4]
 801d0d8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801d0da:	683b      	ldr	r3, [r7, #0]
 801d0dc:	681a      	ldr	r2, [r3, #0]
 801d0de:	687b      	ldr	r3, [r7, #4]
 801d0e0:	601a      	str	r2, [r3, #0]
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	370c      	adds	r7, #12
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ee:	4770      	bx	lr

0801d0f0 <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b082      	sub	sp, #8
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
 801d0f8:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	6839      	ldr	r1, [r7, #0]
 801d0fe:	4618      	mov	r0, r3
 801d100:	f000 fbe8 	bl	801d8d4 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>
 801d104:	4603      	mov	r3, r0
 801d106:	4618      	mov	r0, r3
 801d108:	3708      	adds	r7, #8
 801d10a:	46bd      	mov	sp, r7
 801d10c:	bd80      	pop	{r7, pc}

0801d10e <_ZNSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d10e:	b580      	push	{r7, lr}
 801d110:	b082      	sub	sp, #8
 801d112:	af00      	add	r7, sp, #0
 801d114:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801d116:	687b      	ldr	r3, [r7, #4]
 801d118:	4618      	mov	r0, r3
 801d11a:	f000 fbf2 	bl	801d902 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801d11e:	4603      	mov	r3, r0
 801d120:	4618      	mov	r0, r3
 801d122:	3708      	adds	r7, #8
 801d124:	46bd      	mov	sp, r7
 801d126:	bd80      	pop	{r7, pc}

0801d128 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh5StateEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801d128:	b480      	push	{r7}
 801d12a:	b083      	sub	sp, #12
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	6078      	str	r0, [r7, #4]
 801d130:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	681a      	ldr	r2, [r3, #0]
 801d136:	683b      	ldr	r3, [r7, #0]
 801d138:	681b      	ldr	r3, [r3, #0]
 801d13a:	429a      	cmp	r2, r3
 801d13c:	bf0c      	ite	eq
 801d13e:	2301      	moveq	r3, #1
 801d140:	2300      	movne	r3, #0
 801d142:	b2db      	uxtb	r3, r3
 801d144:	4618      	mov	r0, r3
 801d146:	370c      	adds	r7, #12
 801d148:	46bd      	mov	sp, r7
 801d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d14e:	4770      	bx	lr

0801d150 <_ZNKSt3mapIh5StateSt4lessIhESaISt4pairIKhS0_EEE8key_compEv>:
      key_comp() const
 801d150:	b590      	push	{r4, r7, lr}
 801d152:	b083      	sub	sp, #12
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	4618      	mov	r0, r3
 801d15c:	f000 fbe2 	bl	801d924 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>
 801d160:	bf00      	nop
 801d162:	4620      	mov	r0, r4
 801d164:	370c      	adds	r7, #12
 801d166:	46bd      	mov	sp, r7
 801d168:	bd90      	pop	{r4, r7, pc}

0801d16a <_ZNKSt17_Rb_tree_iteratorISt4pairIKh5StateEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801d16a:	b580      	push	{r7, lr}
 801d16c:	b082      	sub	sp, #8
 801d16e:	af00      	add	r7, sp, #0
 801d170:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	4618      	mov	r0, r3
 801d178:	f7e5 ffaf 	bl	80030da <_ZNSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>
 801d17c:	4603      	mov	r3, r0
 801d17e:	4618      	mov	r0, r3
 801d180:	3708      	adds	r7, #8
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}

0801d186 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh5StateEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801d186:	b480      	push	{r7}
 801d188:	b083      	sub	sp, #12
 801d18a:	af00      	add	r7, sp, #0
 801d18c:	6078      	str	r0, [r7, #4]
 801d18e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801d190:	683b      	ldr	r3, [r7, #0]
 801d192:	681a      	ldr	r2, [r3, #0]
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	601a      	str	r2, [r3, #0]
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	4618      	mov	r0, r3
 801d19c:	370c      	adds	r7, #12
 801d19e:	46bd      	mov	sp, r7
 801d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1a4:	4770      	bx	lr

0801d1a6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d1a6:	b5b0      	push	{r4, r5, r7, lr}
 801d1a8:	b088      	sub	sp, #32
 801d1aa:	af00      	add	r7, sp, #0
 801d1ac:	60f8      	str	r0, [r7, #12]
 801d1ae:	60b9      	str	r1, [r7, #8]
 801d1b0:	607a      	str	r2, [r7, #4]
 801d1b2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801d1b4:	6878      	ldr	r0, [r7, #4]
 801d1b6:	f7f6 fe8e 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d1ba:	4604      	mov	r4, r0
 801d1bc:	6838      	ldr	r0, [r7, #0]
 801d1be:	f7f6 fe95 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d1c2:	4605      	mov	r5, r0
 801d1c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d1c6:	f7f6 fe9c 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d1ca:	4603      	mov	r3, r0
 801d1cc:	462a      	mov	r2, r5
 801d1ce:	4621      	mov	r1, r4
 801d1d0:	68f8      	ldr	r0, [r7, #12]
 801d1d2:	f000 fbb2 	bl	801d93a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 801d1d6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801d1d8:	69f8      	ldr	r0, [r7, #28]
 801d1da:	f000 fcf4 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801d1de:	4603      	mov	r3, r0
 801d1e0:	f107 0010 	add.w	r0, r7, #16
 801d1e4:	68ba      	ldr	r2, [r7, #8]
 801d1e6:	68f9      	ldr	r1, [r7, #12]
 801d1e8:	f000 fbca 	bl	801d980 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>
	    if (__res.second)
 801d1ec:	697b      	ldr	r3, [r7, #20]
 801d1ee:	2b00      	cmp	r3, #0
 801d1f0:	d007      	beq.n	801d202 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801d1f2:	6939      	ldr	r1, [r7, #16]
 801d1f4:	697a      	ldr	r2, [r7, #20]
 801d1f6:	69fb      	ldr	r3, [r7, #28]
 801d1f8:	68f8      	ldr	r0, [r7, #12]
 801d1fa:	f000 fcf7 	bl	801dbec <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 801d1fe:	4603      	mov	r3, r0
 801d200:	e00b      	b.n	801d21a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 801d202:	69f9      	ldr	r1, [r7, #28]
 801d204:	68f8      	ldr	r0, [r7, #12]
 801d206:	f7e5 fa1c 	bl	8002642 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 801d20a:	693a      	ldr	r2, [r7, #16]
 801d20c:	f107 0318 	add.w	r3, r7, #24
 801d210:	4611      	mov	r1, r2
 801d212:	4618      	mov	r0, r3
 801d214:	f000 fd27 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801d218:	69bb      	ldr	r3, [r7, #24]
      }
 801d21a:	4618      	mov	r0, r3
 801d21c:	3720      	adds	r7, #32
 801d21e:	46bd      	mov	sp, r7
 801d220:	bdb0      	pop	{r4, r5, r7, pc}

0801d222 <_ZSt4moveIRSt6vectorISt8functionIFvvEESaIS3_EEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801d222:	b480      	push	{r7}
 801d224:	b083      	sub	sp, #12
 801d226:	af00      	add	r7, sp, #0
 801d228:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	4618      	mov	r0, r3
 801d22e:	370c      	adds	r7, #12
 801d230:	46bd      	mov	sp, r7
 801d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d236:	4770      	bx	lr

0801d238 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE14_M_move_assignEOS4_St17integral_constantIbLb1EE>:
    private:
      // Constant-time move assignment when source object's memory can be
      // moved, either because the source's allocator will move too
      // or because the allocators are equal.
      void
      _M_move_assign(vector&& __x, true_type) noexcept
 801d238:	b590      	push	{r4, r7, lr}
 801d23a:	b089      	sub	sp, #36	; 0x24
 801d23c:	af00      	add	r7, sp, #0
 801d23e:	60f8      	str	r0, [r7, #12]
 801d240:	60b9      	str	r1, [r7, #8]
 801d242:	713a      	strb	r2, [r7, #4]
      {
	vector __tmp(get_allocator());
 801d244:	68fa      	ldr	r2, [r7, #12]
 801d246:	f107 031c 	add.w	r3, r7, #28
 801d24a:	4611      	mov	r1, r2
 801d24c:	4618      	mov	r0, r3
 801d24e:	f000 fd19 	bl	801dc84 <_ZNKSt12_Vector_baseISt8functionIFvvEESaIS2_EE13get_allocatorEv>
 801d252:	f107 021c 	add.w	r2, r7, #28
 801d256:	f107 0310 	add.w	r3, r7, #16
 801d25a:	4611      	mov	r1, r2
 801d25c:	4618      	mov	r0, r3
 801d25e:	f000 fd22 	bl	801dca6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EEC1ERKS3_>
 801d262:	f107 031c 	add.w	r3, r7, #28
 801d266:	4618      	mov	r0, r3
 801d268:	f7e4 fc9a 	bl	8001ba0 <_ZNSaISt8functionIFvvEEED1Ev>
	this->_M_impl._M_swap_data(__x._M_impl);
 801d26c:	68fb      	ldr	r3, [r7, #12]
 801d26e:	68ba      	ldr	r2, [r7, #8]
 801d270:	4611      	mov	r1, r2
 801d272:	4618      	mov	r0, r3
 801d274:	f000 fd26 	bl	801dcc4 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	__tmp._M_impl._M_swap_data(__x._M_impl);
 801d278:	68ba      	ldr	r2, [r7, #8]
 801d27a:	f107 0310 	add.w	r3, r7, #16
 801d27e:	4611      	mov	r1, r2
 801d280:	4618      	mov	r0, r3
 801d282:	f000 fd1f 	bl	801dcc4 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>
	std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	4618      	mov	r0, r3
 801d28a:	f7e4 fea8 	bl	8001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801d28e:	4604      	mov	r4, r0
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	4618      	mov	r0, r3
 801d294:	f7e4 fea3 	bl	8001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801d298:	4603      	mov	r3, r0
 801d29a:	4619      	mov	r1, r3
 801d29c:	4620      	mov	r0, r4
 801d29e:	f000 fd2f 	bl	801dd00 <_ZSt15__alloc_on_moveISaISt8functionIFvvEEEEvRT_S5_>
	vector __tmp(get_allocator());
 801d2a2:	f107 0310 	add.w	r3, r7, #16
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	f7e4 fc9e 	bl	8001be8 <_ZNSt6vectorISt8functionIFvvEESaIS2_EED1Ev>
      }
 801d2ac:	bf00      	nop
 801d2ae:	3724      	adds	r7, #36	; 0x24
 801d2b0:	46bd      	mov	sp, r7
 801d2b2:	bd90      	pop	{r4, r7, pc}

0801d2b4 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d2b4:	b590      	push	{r4, r7, lr}
 801d2b6:	b085      	sub	sp, #20
 801d2b8:	af00      	add	r7, sp, #0
 801d2ba:	6078      	str	r0, [r7, #4]
 801d2bc:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f000 fd2a 	bl	801dd18 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801d2c4:	4604      	mov	r4, r0
 801d2c6:	6878      	ldr	r0, [r7, #4]
 801d2c8:	f000 fd32 	bl	801dd30 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801d2cc:	4602      	mov	r2, r0
 801d2ce:	683b      	ldr	r3, [r7, #0]
 801d2d0:	4621      	mov	r1, r4
 801d2d2:	6878      	ldr	r0, [r7, #4]
 801d2d4:	f000 fd38 	bl	801dd48 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>
 801d2d8:	4603      	mov	r3, r0
 801d2da:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801d2dc:	6878      	ldr	r0, [r7, #4]
 801d2de:	f000 f825 	bl	801d32c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	60fb      	str	r3, [r7, #12]
 801d2e6:	f107 020c 	add.w	r2, r7, #12
 801d2ea:	f107 0308 	add.w	r3, r7, #8
 801d2ee:	4611      	mov	r1, r2
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	f000 f82c 	bl	801d34e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh5StateEES6_>
 801d2f6:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d10d      	bne.n	801d318 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801d2fc:	687c      	ldr	r4, [r7, #4]
 801d2fe:	68bb      	ldr	r3, [r7, #8]
 801d300:	4618      	mov	r0, r3
 801d302:	f000 fd52 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801d306:	4603      	mov	r3, r0
 801d308:	461a      	mov	r2, r3
 801d30a:	6839      	ldr	r1, [r7, #0]
 801d30c:	4620      	mov	r0, r4
 801d30e:	f7f6 f8f3 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801d312:	4603      	mov	r3, r0
 801d314:	2b00      	cmp	r3, #0
 801d316:	d004      	beq.n	801d322 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 801d318:	6878      	ldr	r0, [r7, #4]
 801d31a:	f000 f807 	bl	801d32c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>
 801d31e:	4603      	mov	r3, r0
 801d320:	e000      	b.n	801d324 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4findERS1_+0x70>
 801d322:	68bb      	ldr	r3, [r7, #8]
    }
 801d324:	4618      	mov	r0, r3
 801d326:	3714      	adds	r7, #20
 801d328:	46bd      	mov	sp, r7
 801d32a:	bd90      	pop	{r4, r7, pc}

0801d32c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 801d32c:	b580      	push	{r7, lr}
 801d32e:	b084      	sub	sp, #16
 801d330:	af00      	add	r7, sp, #0
 801d332:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	1d1a      	adds	r2, r3, #4
 801d338:	f107 030c 	add.w	r3, r7, #12
 801d33c:	4611      	mov	r1, r2
 801d33e:	4618      	mov	r0, r3
 801d340:	f000 fd3f 	bl	801ddc2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh5StateEEC1EPKSt18_Rb_tree_node_base>
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	4618      	mov	r0, r3
 801d348:	3710      	adds	r7, #16
 801d34a:	46bd      	mov	sp, r7
 801d34c:	bd80      	pop	{r7, pc}

0801d34e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKh5StateEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801d34e:	b480      	push	{r7}
 801d350:	b083      	sub	sp, #12
 801d352:	af00      	add	r7, sp, #0
 801d354:	6078      	str	r0, [r7, #4]
 801d356:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	681a      	ldr	r2, [r3, #0]
 801d35c:	683b      	ldr	r3, [r7, #0]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	429a      	cmp	r2, r3
 801d362:	bf0c      	ite	eq
 801d364:	2301      	moveq	r3, #1
 801d366:	2300      	movne	r3, #0
 801d368:	b2db      	uxtb	r3, r3
 801d36a:	4618      	mov	r0, r3
 801d36c:	370c      	adds	r7, #12
 801d36e:	46bd      	mov	sp, r7
 801d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d374:	4770      	bx	lr

0801d376 <_ZSt12construct_atISt8functionIFvvEEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801d376:	b5b0      	push	{r4, r5, r7, lr}
 801d378:	b082      	sub	sp, #8
 801d37a:	af00      	add	r7, sp, #0
 801d37c:	6078      	str	r0, [r7, #4]
 801d37e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801d380:	6838      	ldr	r0, [r7, #0]
 801d382:	f000 fd2d 	bl	801dde0 <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801d386:	4605      	mov	r5, r0
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	4619      	mov	r1, r3
 801d38c:	2010      	movs	r0, #16
 801d38e:	f7e4 f863 	bl	8001458 <_ZnwjPv>
 801d392:	4604      	mov	r4, r0
 801d394:	4629      	mov	r1, r5
 801d396:	4620      	mov	r0, r4
 801d398:	f7f9 fb21 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
 801d39c:	4623      	mov	r3, r4
 801d39e:	4618      	mov	r0, r3
 801d3a0:	3708      	adds	r7, #8
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	bdb0      	pop	{r4, r5, r7, pc}

0801d3a6 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801d3a6:	b580      	push	{r7, lr}
 801d3a8:	b084      	sub	sp, #16
 801d3aa:	af00      	add	r7, sp, #0
 801d3ac:	60f8      	str	r0, [r7, #12]
 801d3ae:	60b9      	str	r1, [r7, #8]
 801d3b0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801d3b2:	6878      	ldr	r0, [r7, #4]
 801d3b4:	f000 fd14 	bl	801dde0 <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	4619      	mov	r1, r3
 801d3bc:	68b8      	ldr	r0, [r7, #8]
 801d3be:	f7ff ffda 	bl	801d376 <_ZSt12construct_atISt8functionIFvvEEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 801d3c2:	bf00      	nop
 801d3c4:	3710      	adds	r7, #16
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}
	...

0801d3cc <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 801d3cc:	b5b0      	push	{r4, r5, r7, lr}
 801d3ce:	b08c      	sub	sp, #48	; 0x30
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	60f8      	str	r0, [r7, #12]
 801d3d4:	60b9      	str	r1, [r7, #8]
 801d3d6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801d3d8:	4a39      	ldr	r2, [pc, #228]	; (801d4c0 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJRKS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 801d3da:	2101      	movs	r1, #1
 801d3dc:	68f8      	ldr	r0, [r7, #12]
 801d3de:	f000 fd0a 	bl	801ddf6 <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc>
 801d3e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	685b      	ldr	r3, [r3, #4]
 801d3ee:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 801d3f0:	68f8      	ldr	r0, [r7, #12]
 801d3f2:	f7ff fbcc 	bl	801cb8e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE5beginEv>
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	617b      	str	r3, [r7, #20]
 801d3fa:	f107 0214 	add.w	r2, r7, #20
 801d3fe:	f107 0308 	add.w	r3, r7, #8
 801d402:	4611      	mov	r1, r2
 801d404:	4618      	mov	r0, r3
 801d406:	f000 fd3d 	bl	801de84 <_ZN9__gnu_cxxmiIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 801d40a:	4603      	mov	r3, r0
 801d40c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801d40e:	68fb      	ldr	r3, [r7, #12]
 801d410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d412:	4618      	mov	r0, r3
 801d414:	f000 fd4b 	bl	801deae <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE11_M_allocateEj>
 801d418:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801d41a:	69fb      	ldr	r3, [r7, #28]
 801d41c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801d41e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801d420:	6a3b      	ldr	r3, [r7, #32]
 801d422:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 801d424:	69fa      	ldr	r2, [r7, #28]
 801d426:	18d5      	adds	r5, r2, r3
 801d428:	6878      	ldr	r0, [r7, #4]
 801d42a:	f000 fcd9 	bl	801dde0 <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801d42e:	4603      	mov	r3, r0
 801d430:	461a      	mov	r2, r3
 801d432:	4629      	mov	r1, r5
 801d434:	4620      	mov	r0, r4
 801d436:	f7ff ffb6 	bl	801d3a6 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE9constructIS2_JRKS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 801d43a:	2300      	movs	r3, #0
 801d43c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d43e:	f107 0308 	add.w	r3, r7, #8
 801d442:	4618      	mov	r0, r3
 801d444:	f7ff f978 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801d448:	4603      	mov	r3, r0
 801d44a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	4618      	mov	r0, r3
 801d450:	f7e4 fdc5 	bl	8001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801d454:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801d456:	69fa      	ldr	r2, [r7, #28]
 801d458:	4621      	mov	r1, r4
 801d45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d45c:	f000 fd3b 	bl	801ded6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801d460:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801d462:	69bb      	ldr	r3, [r7, #24]
 801d464:	3310      	adds	r3, #16
 801d466:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d468:	f107 0308 	add.w	r3, r7, #8
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7ff f963 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801d472:	4603      	mov	r3, r0
 801d474:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	4618      	mov	r0, r3
 801d47a:	f7e4 fdb0 	bl	8001fde <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801d47e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801d480:	69ba      	ldr	r2, [r7, #24]
 801d482:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d484:	4620      	mov	r0, r4
 801d486:	f000 fd26 	bl	801ded6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 801d48a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801d48c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	689a      	ldr	r2, [r3, #8]
 801d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d494:	1ad3      	subs	r3, r2, r3
 801d496:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 801d498:	461a      	mov	r2, r3
 801d49a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d49c:	f7e4 fd8c 	bl	8001fb8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 801d4a0:	68fb      	ldr	r3, [r7, #12]
 801d4a2:	69fa      	ldr	r2, [r7, #28]
 801d4a4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	69ba      	ldr	r2, [r7, #24]
 801d4aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 801d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4ae:	011b      	lsls	r3, r3, #4
 801d4b0:	69fa      	ldr	r2, [r7, #28]
 801d4b2:	441a      	add	r2, r3
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	609a      	str	r2, [r3, #8]
    }
 801d4b8:	bf00      	nop
 801d4ba:	3730      	adds	r7, #48	; 0x30
 801d4bc:	46bd      	mov	sp, r7
 801d4be:	bdb0      	pop	{r4, r5, r7, pc}
 801d4c0:	08026b58 	.word	0x08026b58

0801d4c4 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE11lower_boundERS9_>:
      lower_bound(const key_type& __x)
 801d4c4:	b580      	push	{r7, lr}
 801d4c6:	b082      	sub	sp, #8
 801d4c8:	af00      	add	r7, sp, #0
 801d4ca:	6078      	str	r0, [r7, #4]
 801d4cc:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	6839      	ldr	r1, [r7, #0]
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	f000 fd1f 	bl	801df16 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11lower_boundERS1_>
 801d4d8:	4603      	mov	r3, r0
 801d4da:	4618      	mov	r0, r3
 801d4dc:	3708      	adds	r7, #8
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	bd80      	pop	{r7, pc}

0801d4e2 <_ZNSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d4e2:	b580      	push	{r7, lr}
 801d4e4:	b082      	sub	sp, #8
 801d4e6:	af00      	add	r7, sp, #0
 801d4e8:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f000 fd29 	bl	801df44 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE3endEv>
 801d4f2:	4603      	mov	r3, r0
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	3708      	adds	r7, #8
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}

0801d4fc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEESH_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801d4fc:	b480      	push	{r7}
 801d4fe:	b083      	sub	sp, #12
 801d500:	af00      	add	r7, sp, #0
 801d502:	6078      	str	r0, [r7, #4]
 801d504:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	681a      	ldr	r2, [r3, #0]
 801d50a:	683b      	ldr	r3, [r7, #0]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	429a      	cmp	r2, r3
 801d510:	bf0c      	ite	eq
 801d512:	2301      	moveq	r3, #1
 801d514:	2300      	movne	r3, #0
 801d516:	b2db      	uxtb	r3, r3
 801d518:	4618      	mov	r0, r3
 801d51a:	370c      	adds	r7, #12
 801d51c:	46bd      	mov	sp, r7
 801d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d522:	4770      	bx	lr

0801d524 <_ZNKSt3mapIhS_IhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEES7_SaIS8_IS9_SC_EEE8key_compEv>:
      key_comp() const
 801d524:	b590      	push	{r4, r7, lr}
 801d526:	b083      	sub	sp, #12
 801d528:	af00      	add	r7, sp, #0
 801d52a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	4618      	mov	r0, r3
 801d530:	f000 fd19 	bl	801df66 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8key_compEv>
 801d534:	bf00      	nop
 801d536:	4620      	mov	r0, r4
 801d538:	370c      	adds	r7, #12
 801d53a:	46bd      	mov	sp, r7
 801d53c:	bd90      	pop	{r4, r7, pc}

0801d53e <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801d53e:	b580      	push	{r7, lr}
 801d540:	b082      	sub	sp, #8
 801d542:	af00      	add	r7, sp, #0
 801d544:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	4618      	mov	r0, r3
 801d54c:	f7e5 fe37 	bl	80031be <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>
 801d550:	4603      	mov	r3, r0
 801d552:	4618      	mov	r0, r3
 801d554:	3708      	adds	r7, #8
 801d556:	46bd      	mov	sp, r7
 801d558:	bd80      	pop	{r7, pc}

0801d55a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1ERKSt17_Rb_tree_iteratorISE_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801d55a:	b480      	push	{r7}
 801d55c:	b083      	sub	sp, #12
 801d55e:	af00      	add	r7, sp, #0
 801d560:	6078      	str	r0, [r7, #4]
 801d562:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801d564:	683b      	ldr	r3, [r7, #0]
 801d566:	681a      	ldr	r2, [r3, #0]
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	601a      	str	r2, [r3, #0]
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	4618      	mov	r0, r3
 801d570:	370c      	adds	r7, #12
 801d572:	46bd      	mov	sp, r7
 801d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d578:	4770      	bx	lr

0801d57a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEESt17_Rb_tree_iteratorISE_ESt23_Rb_tree_const_iteratorISE_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d57a:	b5b0      	push	{r4, r5, r7, lr}
 801d57c:	b088      	sub	sp, #32
 801d57e:	af00      	add	r7, sp, #0
 801d580:	60f8      	str	r0, [r7, #12]
 801d582:	60b9      	str	r1, [r7, #8]
 801d584:	607a      	str	r2, [r7, #4]
 801d586:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801d588:	6878      	ldr	r0, [r7, #4]
 801d58a:	f7f6 fca4 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d58e:	4604      	mov	r4, r0
 801d590:	6838      	ldr	r0, [r7, #0]
 801d592:	f7f6 fcab 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d596:	4605      	mov	r5, r0
 801d598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d59a:	f7f6 fcb2 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	462a      	mov	r2, r5
 801d5a2:	4621      	mov	r1, r4
 801d5a4:	68f8      	ldr	r0, [r7, #12]
 801d5a6:	f000 fce9 	bl	801df7c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPSt13_Rb_tree_nodeISE_EDpOT_>
 801d5aa:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801d5ac:	69f8      	ldr	r0, [r7, #28]
 801d5ae:	f000 fe2b 	bl	801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	f107 0010 	add.w	r0, r7, #16
 801d5b8:	68ba      	ldr	r2, [r7, #8]
 801d5ba:	68f9      	ldr	r1, [r7, #12]
 801d5bc:	f000 fd01 	bl	801dfc2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_>
	    if (__res.second)
 801d5c0:	697b      	ldr	r3, [r7, #20]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d007      	beq.n	801d5d6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEESt17_Rb_tree_iteratorISE_ESt23_Rb_tree_const_iteratorISE_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801d5c6:	6939      	ldr	r1, [r7, #16]
 801d5c8:	697a      	ldr	r2, [r7, #20]
 801d5ca:	69fb      	ldr	r3, [r7, #28]
 801d5cc:	68f8      	ldr	r0, [r7, #12]
 801d5ce:	f000 fe2e 	bl	801e22e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E>
 801d5d2:	4603      	mov	r3, r0
 801d5d4:	e00b      	b.n	801d5ee <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEESt17_Rb_tree_iteratorISE_ESt23_Rb_tree_const_iteratorISE_EDpOT_+0x74>
	    _M_drop_node(__z);
 801d5d6:	69f9      	ldr	r1, [r7, #28]
 801d5d8:	68f8      	ldr	r0, [r7, #12]
 801d5da:	f7e5 f89a 	bl	8002712 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISE_E>
	    return iterator(__res.first);
 801d5de:	693a      	ldr	r2, [r7, #16]
 801d5e0:	f107 0318 	add.w	r3, r7, #24
 801d5e4:	4611      	mov	r1, r2
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f000 fe5e 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801d5ec:	69bb      	ldr	r3, [r7, #24]
      }
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	3720      	adds	r7, #32
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	bdb0      	pop	{r4, r5, r7, pc}

0801d5f6 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE11lower_boundERS9_>:
      lower_bound(const key_type& __x)
 801d5f6:	b580      	push	{r7, lr}
 801d5f8:	b082      	sub	sp, #8
 801d5fa:	af00      	add	r7, sp, #0
 801d5fc:	6078      	str	r0, [r7, #4]
 801d5fe:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	6839      	ldr	r1, [r7, #0]
 801d604:	4618      	mov	r0, r3
 801d606:	f000 fe5e 	bl	801e2c6 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11lower_boundERS1_>
 801d60a:	4603      	mov	r3, r0
 801d60c:	4618      	mov	r0, r3
 801d60e:	3708      	adds	r7, #8
 801d610:	46bd      	mov	sp, r7
 801d612:	bd80      	pop	{r7, pc}

0801d614 <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d614:	b580      	push	{r7, lr}
 801d616:	b082      	sub	sp, #8
 801d618:	af00      	add	r7, sp, #0
 801d61a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	4618      	mov	r0, r3
 801d620:	f000 fe68 	bl	801e2f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE3endEv>
 801d624:	4603      	mov	r3, r0
 801d626:	4618      	mov	r0, r3
 801d628:	3708      	adds	r7, #8
 801d62a:	46bd      	mov	sp, r7
 801d62c:	bd80      	pop	{r7, pc}

0801d62e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEESB_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801d62e:	b480      	push	{r7}
 801d630:	b083      	sub	sp, #12
 801d632:	af00      	add	r7, sp, #0
 801d634:	6078      	str	r0, [r7, #4]
 801d636:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	681a      	ldr	r2, [r3, #0]
 801d63c:	683b      	ldr	r3, [r7, #0]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	429a      	cmp	r2, r3
 801d642:	bf0c      	ite	eq
 801d644:	2301      	moveq	r3, #1
 801d646:	2300      	movne	r3, #0
 801d648:	b2db      	uxtb	r3, r3
 801d64a:	4618      	mov	r0, r3
 801d64c:	370c      	adds	r7, #12
 801d64e:	46bd      	mov	sp, r7
 801d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d654:	4770      	bx	lr

0801d656 <_ZNKSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEE8key_compEv>:
      key_comp() const
 801d656:	b590      	push	{r4, r7, lr}
 801d658:	b083      	sub	sp, #12
 801d65a:	af00      	add	r7, sp, #0
 801d65c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	4618      	mov	r0, r3
 801d662:	f000 fe58 	bl	801e316 <_ZNKSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8key_compEv>
 801d666:	bf00      	nop
 801d668:	4620      	mov	r0, r4
 801d66a:	370c      	adds	r7, #12
 801d66c:	46bd      	mov	sp, r7
 801d66e:	bd90      	pop	{r4, r7, pc}

0801d670 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801d670:	b580      	push	{r7, lr}
 801d672:	b082      	sub	sp, #8
 801d674:	af00      	add	r7, sp, #0
 801d676:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	4618      	mov	r0, r3
 801d67e:	f7e6 f897 	bl	80037b0 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>
 801d682:	4603      	mov	r3, r0
 801d684:	4618      	mov	r0, r3
 801d686:	3708      	adds	r7, #8
 801d688:	46bd      	mov	sp, r7
 801d68a:	bd80      	pop	{r7, pc}

0801d68c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1ERKSt17_Rb_tree_iteratorIS8_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801d68c:	b480      	push	{r7}
 801d68e:	b083      	sub	sp, #12
 801d690:	af00      	add	r7, sp, #0
 801d692:	6078      	str	r0, [r7, #4]
 801d694:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801d696:	683b      	ldr	r3, [r7, #0]
 801d698:	681a      	ldr	r2, [r3, #0]
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	601a      	str	r2, [r3, #0]
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	370c      	adds	r7, #12
 801d6a4:	46bd      	mov	sp, r7
 801d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6aa:	4770      	bx	lr

0801d6ac <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d6ac:	b5b0      	push	{r4, r5, r7, lr}
 801d6ae:	b088      	sub	sp, #32
 801d6b0:	af00      	add	r7, sp, #0
 801d6b2:	60f8      	str	r0, [r7, #12]
 801d6b4:	60b9      	str	r1, [r7, #8]
 801d6b6:	607a      	str	r2, [r7, #4]
 801d6b8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801d6ba:	6878      	ldr	r0, [r7, #4]
 801d6bc:	f7f6 fc0b 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d6c0:	4604      	mov	r4, r0
 801d6c2:	6838      	ldr	r0, [r7, #0]
 801d6c4:	f7f6 fc12 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d6c8:	4605      	mov	r5, r0
 801d6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d6cc:	f7f6 fc19 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d6d0:	4603      	mov	r3, r0
 801d6d2:	462a      	mov	r2, r5
 801d6d4:	4621      	mov	r1, r4
 801d6d6:	68f8      	ldr	r0, [r7, #12]
 801d6d8:	f000 fe28 	bl	801e32c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>
 801d6dc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801d6de:	69f8      	ldr	r0, [r7, #28]
 801d6e0:	f000 ff6a 	bl	801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	f107 0010 	add.w	r0, r7, #16
 801d6ea:	68ba      	ldr	r2, [r7, #8]
 801d6ec:	68f9      	ldr	r1, [r7, #12]
 801d6ee:	f000 fe40 	bl	801e372 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>
	    if (__res.second)
 801d6f2:	697b      	ldr	r3, [r7, #20]
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d007      	beq.n	801d708 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801d6f8:	6939      	ldr	r1, [r7, #16]
 801d6fa:	697a      	ldr	r2, [r7, #20]
 801d6fc:	69fb      	ldr	r3, [r7, #28]
 801d6fe:	68f8      	ldr	r0, [r7, #12]
 801d700:	f000 ff6d 	bl	801e5de <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>
 801d704:	4603      	mov	r3, r0
 801d706:	e00b      	b.n	801d720 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEESt17_Rb_tree_iteratorIS8_ESt23_Rb_tree_const_iteratorIS8_EDpOT_+0x74>
	    _M_drop_node(__z);
 801d708:	69f9      	ldr	r1, [r7, #28]
 801d70a:	68f8      	ldr	r0, [r7, #12]
 801d70c:	f7e5 ffa2 	bl	8003654 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS8_E>
	    return iterator(__res.first);
 801d710:	693a      	ldr	r2, [r7, #16]
 801d712:	f107 0318 	add.w	r3, r7, #24
 801d716:	4611      	mov	r1, r2
 801d718:	4618      	mov	r0, r3
 801d71a:	f000 ff9d 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801d71e:	69bb      	ldr	r3, [r7, #24]
      }
 801d720:	4618      	mov	r0, r3
 801d722:	3720      	adds	r7, #32
 801d724:	46bd      	mov	sp, r7
 801d726:	bdb0      	pop	{r4, r5, r7, pc}

0801d728 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 801d728:	b580      	push	{r7, lr}
 801d72a:	b082      	sub	sp, #8
 801d72c:	af00      	add	r7, sp, #0
 801d72e:	6078      	str	r0, [r7, #4]
 801d730:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	6839      	ldr	r1, [r7, #0]
 801d736:	4618      	mov	r0, r3
 801d738:	f000 ff9d 	bl	801e676 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11lower_boundERS1_>
 801d73c:	4603      	mov	r3, r0
 801d73e:	4618      	mov	r0, r3
 801d740:	3708      	adds	r7, #8
 801d742:	46bd      	mov	sp, r7
 801d744:	bd80      	pop	{r7, pc}

0801d746 <_ZNSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d746:	b580      	push	{r7, lr}
 801d748:	b082      	sub	sp, #8
 801d74a:	af00      	add	r7, sp, #0
 801d74c:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	4618      	mov	r0, r3
 801d752:	f000 ffa7 	bl	801e6a4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE3endEv>
 801d756:	4603      	mov	r3, r0
 801d758:	4618      	mov	r0, r3
 801d75a:	3708      	adds	r7, #8
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}

0801d760 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEESE_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801d760:	b480      	push	{r7}
 801d762:	b083      	sub	sp, #12
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
 801d768:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	681a      	ldr	r2, [r3, #0]
 801d76e:	683b      	ldr	r3, [r7, #0]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	429a      	cmp	r2, r3
 801d774:	bf0c      	ite	eq
 801d776:	2301      	moveq	r3, #1
 801d778:	2300      	movne	r3, #0
 801d77a:	b2db      	uxtb	r3, r3
 801d77c:	4618      	mov	r0, r3
 801d77e:	370c      	adds	r7, #12
 801d780:	46bd      	mov	sp, r7
 801d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d786:	4770      	bx	lr

0801d788 <_ZNKSt3mapIhS_IhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEES4_SaIS5_IS6_S9_EEE8key_compEv>:
      key_comp() const
 801d788:	b590      	push	{r4, r7, lr}
 801d78a:	b083      	sub	sp, #12
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	4618      	mov	r0, r3
 801d794:	f000 ff97 	bl	801e6c6 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8key_compEv>
 801d798:	bf00      	nop
 801d79a:	4620      	mov	r0, r4
 801d79c:	370c      	adds	r7, #12
 801d79e:	46bd      	mov	sp, r7
 801d7a0:	bd90      	pop	{r4, r7, pc}

0801d7a2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801d7a2:	b580      	push	{r7, lr}
 801d7a4:	b082      	sub	sp, #8
 801d7a6:	af00      	add	r7, sp, #0
 801d7a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	681b      	ldr	r3, [r3, #0]
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f7e5 fccc 	bl	800314c <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	4618      	mov	r0, r3
 801d7b8:	3708      	adds	r7, #8
 801d7ba:	46bd      	mov	sp, r7
 801d7bc:	bd80      	pop	{r7, pc}

0801d7be <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1ERKSt17_Rb_tree_iteratorISB_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801d7be:	b480      	push	{r7}
 801d7c0:	b083      	sub	sp, #12
 801d7c2:	af00      	add	r7, sp, #0
 801d7c4:	6078      	str	r0, [r7, #4]
 801d7c6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801d7c8:	683b      	ldr	r3, [r7, #0]
 801d7ca:	681a      	ldr	r2, [r3, #0]
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	601a      	str	r2, [r3, #0]
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	370c      	adds	r7, #12
 801d7d6:	46bd      	mov	sp, r7
 801d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7dc:	4770      	bx	lr

0801d7de <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d7de:	b5b0      	push	{r4, r5, r7, lr}
 801d7e0:	b088      	sub	sp, #32
 801d7e2:	af00      	add	r7, sp, #0
 801d7e4:	60f8      	str	r0, [r7, #12]
 801d7e6:	60b9      	str	r1, [r7, #8]
 801d7e8:	607a      	str	r2, [r7, #4]
 801d7ea:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801d7ec:	6878      	ldr	r0, [r7, #4]
 801d7ee:	f7f6 fb72 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d7f2:	4604      	mov	r4, r0
 801d7f4:	6838      	ldr	r0, [r7, #0]
 801d7f6:	f7f6 fb79 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d7fa:	4605      	mov	r5, r0
 801d7fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d7fe:	f7f6 fb80 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d802:	4603      	mov	r3, r0
 801d804:	462a      	mov	r2, r5
 801d806:	4621      	mov	r1, r4
 801d808:	68f8      	ldr	r0, [r7, #12]
 801d80a:	f000 ff67 	bl	801e6dc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>
 801d80e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801d810:	69f8      	ldr	r0, [r7, #28]
 801d812:	f001 f8a9 	bl	801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 801d816:	4603      	mov	r3, r0
 801d818:	f107 0010 	add.w	r0, r7, #16
 801d81c:	68ba      	ldr	r2, [r7, #8]
 801d81e:	68f9      	ldr	r1, [r7, #12]
 801d820:	f000 ff7f 	bl	801e722 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_>
	    if (__res.second)
 801d824:	697b      	ldr	r3, [r7, #20]
 801d826:	2b00      	cmp	r3, #0
 801d828:	d007      	beq.n	801d83a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 801d82a:	6939      	ldr	r1, [r7, #16]
 801d82c:	697a      	ldr	r2, [r7, #20]
 801d82e:	69fb      	ldr	r3, [r7, #28]
 801d830:	68f8      	ldr	r0, [r7, #12]
 801d832:	f001 f8ac 	bl	801e98e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E>
 801d836:	4603      	mov	r3, r0
 801d838:	e00b      	b.n	801d852 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEESt17_Rb_tree_iteratorISB_ESt23_Rb_tree_const_iteratorISB_EDpOT_+0x74>
	    _M_drop_node(__z);
 801d83a:	69f9      	ldr	r1, [r7, #28]
 801d83c:	68f8      	ldr	r0, [r7, #12]
 801d83e:	f7e4 ff34 	bl	80026aa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_drop_nodeEPSt13_Rb_tree_nodeISB_E>
	    return iterator(__res.first);
 801d842:	693a      	ldr	r2, [r7, #16]
 801d844:	f107 0318 	add.w	r3, r7, #24
 801d848:	4611      	mov	r1, r2
 801d84a:	4618      	mov	r0, r3
 801d84c:	f001 f8dc 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801d850:	69bb      	ldr	r3, [r7, #24]
      }
 801d852:	4618      	mov	r0, r3
 801d854:	3720      	adds	r7, #32
 801d856:	46bd      	mov	sp, r7
 801d858:	bdb0      	pop	{r4, r5, r7, pc}

0801d85a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801d85a:	b580      	push	{r7, lr}
 801d85c:	b084      	sub	sp, #16
 801d85e:	af00      	add	r7, sp, #0
 801d860:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	68da      	ldr	r2, [r3, #12]
 801d866:	f107 030c 	add.w	r3, r7, #12
 801d86a:	4611      	mov	r1, r2
 801d86c:	4618      	mov	r0, r3
 801d86e:	f001 f8da 	bl	801ea26 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEC1EPSt18_Rb_tree_node_base>
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	4618      	mov	r0, r3
 801d876:	3710      	adds	r7, #16
 801d878:	46bd      	mov	sp, r7
 801d87a:	bd80      	pop	{r7, pc}

0801d87c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b084      	sub	sp, #16
 801d880:	af00      	add	r7, sp, #0
 801d882:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	1d1a      	adds	r2, r3, #4
 801d888:	f107 030c 	add.w	r3, r7, #12
 801d88c:	4611      	mov	r1, r2
 801d88e:	4618      	mov	r0, r3
 801d890:	f001 f8c9 	bl	801ea26 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEC1EPSt18_Rb_tree_node_base>
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	4618      	mov	r0, r3
 801d898:	3710      	adds	r7, #16
 801d89a:	46bd      	mov	sp, r7
 801d89c:	bd80      	pop	{r7, pc}

0801d89e <_ZNKSt8functionIFbvEEcvbEv>:
      explicit operator bool() const noexcept
 801d89e:	b580      	push	{r7, lr}
 801d8a0:	b082      	sub	sp, #8
 801d8a2:	af00      	add	r7, sp, #0
 801d8a4:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7f8 fbe1 	bl	8016070 <_ZNKSt14_Function_base8_M_emptyEv>
 801d8ae:	4603      	mov	r3, r0
 801d8b0:	f083 0301 	eor.w	r3, r3, #1
 801d8b4:	b2db      	uxtb	r3, r3
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	3708      	adds	r7, #8
 801d8ba:	46bd      	mov	sp, r7
 801d8bc:	bd80      	pop	{r7, pc}

0801d8be <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801d8be:	b480      	push	{r7}
 801d8c0:	b083      	sub	sp, #12
 801d8c2:	af00      	add	r7, sp, #0
 801d8c4:	6078      	str	r0, [r7, #4]
 801d8c6:	687b      	ldr	r3, [r7, #4]
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	370c      	adds	r7, #12
 801d8cc:	46bd      	mov	sp, r7
 801d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8d2:	4770      	bx	lr

0801d8d4 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801d8d4:	b590      	push	{r4, r7, lr}
 801d8d6:	b083      	sub	sp, #12
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
 801d8dc:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801d8de:	6878      	ldr	r0, [r7, #4]
 801d8e0:	f7e4 fbcc 	bl	800207c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801d8e4:	4604      	mov	r4, r0
 801d8e6:	6878      	ldr	r0, [r7, #4]
 801d8e8:	f001 f8ac 	bl	801ea44 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801d8ec:	4602      	mov	r2, r0
 801d8ee:	683b      	ldr	r3, [r7, #0]
 801d8f0:	4621      	mov	r1, r4
 801d8f2:	6878      	ldr	r0, [r7, #4]
 801d8f4:	f001 f8b2 	bl	801ea5c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>
 801d8f8:	4603      	mov	r3, r0
 801d8fa:	4618      	mov	r0, r3
 801d8fc:	370c      	adds	r7, #12
 801d8fe:	46bd      	mov	sp, r7
 801d900:	bd90      	pop	{r4, r7, pc}

0801d902 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801d902:	b580      	push	{r7, lr}
 801d904:	b084      	sub	sp, #16
 801d906:	af00      	add	r7, sp, #0
 801d908:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	1d1a      	adds	r2, r3, #4
 801d90e:	f107 030c 	add.w	r3, r7, #12
 801d912:	4611      	mov	r1, r2
 801d914:	4618      	mov	r0, r3
 801d916:	f000 f9a6 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	4618      	mov	r0, r3
 801d91e:	3710      	adds	r7, #16
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}

0801d924 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8key_compEv>:
      key_comp() const
 801d924:	b480      	push	{r7}
 801d926:	b083      	sub	sp, #12
 801d928:	af00      	add	r7, sp, #0
 801d92a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801d92c:	bf00      	nop
 801d92e:	4618      	mov	r0, r3
 801d930:	370c      	adds	r7, #12
 801d932:	46bd      	mov	sp, r7
 801d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d938:	4770      	bx	lr

0801d93a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801d93a:	b5b0      	push	{r4, r5, r7, lr}
 801d93c:	b088      	sub	sp, #32
 801d93e:	af02      	add	r7, sp, #8
 801d940:	60f8      	str	r0, [r7, #12]
 801d942:	60b9      	str	r1, [r7, #8]
 801d944:	607a      	str	r2, [r7, #4]
 801d946:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801d948:	68f8      	ldr	r0, [r7, #12]
 801d94a:	f001 f8b8 	bl	801eabe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>
 801d94e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801d950:	68b8      	ldr	r0, [r7, #8]
 801d952:	f7f6 fac0 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801d956:	4604      	mov	r4, r0
 801d958:	6878      	ldr	r0, [r7, #4]
 801d95a:	f7f6 fac7 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801d95e:	4605      	mov	r5, r0
 801d960:	6838      	ldr	r0, [r7, #0]
 801d962:	f7f6 face 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801d966:	4603      	mov	r3, r0
 801d968:	9300      	str	r3, [sp, #0]
 801d96a:	462b      	mov	r3, r5
 801d96c:	4622      	mov	r2, r4
 801d96e:	6979      	ldr	r1, [r7, #20]
 801d970:	68f8      	ldr	r0, [r7, #12]
 801d972:	f001 f8b5 	bl	801eae0 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 801d976:	697b      	ldr	r3, [r7, #20]
	}
 801d978:	4618      	mov	r0, r3
 801d97a:	3718      	adds	r7, #24
 801d97c:	46bd      	mov	sp, r7
 801d97e:	bdb0      	pop	{r4, r5, r7, pc}

0801d980 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801d980:	b590      	push	{r4, r7, lr}
 801d982:	b08d      	sub	sp, #52	; 0x34
 801d984:	af00      	add	r7, sp, #0
 801d986:	60f8      	str	r0, [r7, #12]
 801d988:	60b9      	str	r1, [r7, #8]
 801d98a:	607a      	str	r2, [r7, #4]
 801d98c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801d98e:	1d3b      	adds	r3, r7, #4
 801d990:	4618      	mov	r0, r3
 801d992:	f001 f8d2 	bl	801eb3a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh5StateEE13_M_const_castEv>
 801d996:	4603      	mov	r3, r0
 801d998:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801d99a:	69bc      	ldr	r4, [r7, #24]
 801d99c:	68b8      	ldr	r0, [r7, #8]
 801d99e:	f001 f851 	bl	801ea44 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801d9a2:	4603      	mov	r3, r0
 801d9a4:	429c      	cmp	r4, r3
 801d9a6:	bf0c      	ite	eq
 801d9a8:	2301      	moveq	r3, #1
 801d9aa:	2300      	movne	r3, #0
 801d9ac:	b2db      	uxtb	r3, r3
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d030      	beq.n	801da14 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x94>
	  if (size() > 0
 801d9b2:	68b8      	ldr	r0, [r7, #8]
 801d9b4:	f001 f8d2 	bl	801eb5c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>
 801d9b8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d013      	beq.n	801d9e6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 801d9be:	68bc      	ldr	r4, [r7, #8]
 801d9c0:	68b8      	ldr	r0, [r7, #8]
 801d9c2:	f001 f8d7 	bl	801eb74 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	4618      	mov	r0, r3
 801d9cc:	f000 f9ed 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801d9d0:	4603      	mov	r3, r0
 801d9d2:	683a      	ldr	r2, [r7, #0]
 801d9d4:	4619      	mov	r1, r3
 801d9d6:	4620      	mov	r0, r4
 801d9d8:	f7f5 fd8e 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801d9dc:	4603      	mov	r3, r0
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d001      	beq.n	801d9e6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x66>
 801d9e2:	2301      	movs	r3, #1
 801d9e4:	e000      	b.n	801d9e8 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x68>
 801d9e6:	2300      	movs	r3, #0
	  if (size() > 0
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d00c      	beq.n	801da06 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	61fb      	str	r3, [r7, #28]
 801d9f0:	68b8      	ldr	r0, [r7, #8]
 801d9f2:	f001 f8bf 	bl	801eb74 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801d9f6:	4602      	mov	r2, r0
 801d9f8:	f107 031c 	add.w	r3, r7, #28
 801d9fc:	4619      	mov	r1, r3
 801d9fe:	68f8      	ldr	r0, [r7, #12]
 801da00:	f7f7 f964 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801da04:	e0db      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801da06:	68fb      	ldr	r3, [r7, #12]
 801da08:	683a      	ldr	r2, [r7, #0]
 801da0a:	68b9      	ldr	r1, [r7, #8]
 801da0c:	4618      	mov	r0, r3
 801da0e:	f001 f8bd 	bl	801eb8c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801da12:	e0d4      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801da14:	68bc      	ldr	r4, [r7, #8]
 801da16:	69bb      	ldr	r3, [r7, #24]
 801da18:	4618      	mov	r0, r3
 801da1a:	f000 f9c6 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801da1e:	4603      	mov	r3, r0
 801da20:	461a      	mov	r2, r3
 801da22:	6839      	ldr	r1, [r7, #0]
 801da24:	4620      	mov	r0, r4
 801da26:	f7f5 fd67 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801da2a:	4603      	mov	r3, r0
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d057      	beq.n	801dae0 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x160>
	  iterator __before = __pos;
 801da30:	69bb      	ldr	r3, [r7, #24]
 801da32:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801da34:	69bc      	ldr	r4, [r7, #24]
 801da36:	68b8      	ldr	r0, [r7, #8]
 801da38:	f001 f92d 	bl	801ec96 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801da3c:	4603      	mov	r3, r0
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	429c      	cmp	r4, r3
 801da42:	bf0c      	ite	eq
 801da44:	2301      	moveq	r3, #1
 801da46:	2300      	movne	r3, #0
 801da48:	b2db      	uxtb	r3, r3
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d00d      	beq.n	801da6a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801da4e:	68b8      	ldr	r0, [r7, #8]
 801da50:	f001 f921 	bl	801ec96 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801da54:	4604      	mov	r4, r0
 801da56:	68b8      	ldr	r0, [r7, #8]
 801da58:	f001 f91d 	bl	801ec96 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>
 801da5c:	4603      	mov	r3, r0
 801da5e:	461a      	mov	r2, r3
 801da60:	4621      	mov	r1, r4
 801da62:	68f8      	ldr	r0, [r7, #12]
 801da64:	f7f7 f9d9 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801da68:	e0a9      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801da6a:	68bc      	ldr	r4, [r7, #8]
 801da6c:	f107 0314 	add.w	r3, r7, #20
 801da70:	4618      	mov	r0, r3
 801da72:	f001 f91c 	bl	801ecae <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEmmEv>
 801da76:	4603      	mov	r3, r0
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	4618      	mov	r0, r3
 801da7c:	f000 f995 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801da80:	4603      	mov	r3, r0
 801da82:	683a      	ldr	r2, [r7, #0]
 801da84:	4619      	mov	r1, r3
 801da86:	4620      	mov	r0, r4
 801da88:	f7f5 fd36 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801da8c:	4603      	mov	r3, r0
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d01f      	beq.n	801dad2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801da92:	697b      	ldr	r3, [r7, #20]
 801da94:	4618      	mov	r0, r3
 801da96:	f7e4 fdbc 	bl	8002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801da9a:	4603      	mov	r3, r0
 801da9c:	2b00      	cmp	r3, #0
 801da9e:	bf0c      	ite	eq
 801daa0:	2301      	moveq	r3, #1
 801daa2:	2300      	movne	r3, #0
 801daa4:	b2db      	uxtb	r3, r3
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d00a      	beq.n	801dac0 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801daaa:	2300      	movs	r3, #0
 801daac:	623b      	str	r3, [r7, #32]
 801daae:	f107 0214 	add.w	r2, r7, #20
 801dab2:	f107 0320 	add.w	r3, r7, #32
 801dab6:	4619      	mov	r1, r3
 801dab8:	68f8      	ldr	r0, [r7, #12]
 801daba:	f7f7 f907 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801dabe:	e07e      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801dac0:	f107 0218 	add.w	r2, r7, #24
 801dac4:	f107 0318 	add.w	r3, r7, #24
 801dac8:	4619      	mov	r1, r3
 801daca:	68f8      	ldr	r0, [r7, #12]
 801dacc:	f7f7 f9a5 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801dad0:	e075      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801dad2:	68fb      	ldr	r3, [r7, #12]
 801dad4:	683a      	ldr	r2, [r7, #0]
 801dad6:	68b9      	ldr	r1, [r7, #8]
 801dad8:	4618      	mov	r0, r3
 801dada:	f001 f857 	bl	801eb8c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801dade:	e06e      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801dae0:	68bc      	ldr	r4, [r7, #8]
 801dae2:	69bb      	ldr	r3, [r7, #24]
 801dae4:	4618      	mov	r0, r3
 801dae6:	f000 f960 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801daea:	4603      	mov	r3, r0
 801daec:	683a      	ldr	r2, [r7, #0]
 801daee:	4619      	mov	r1, r3
 801daf0:	4620      	mov	r0, r4
 801daf2:	f7f5 fd01 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801daf6:	4603      	mov	r3, r0
 801daf8:	2b00      	cmp	r3, #0
 801dafa:	d056      	beq.n	801dbaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x22a>
	  iterator __after = __pos;
 801dafc:	69bb      	ldr	r3, [r7, #24]
 801dafe:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801db00:	69bc      	ldr	r4, [r7, #24]
 801db02:	68b8      	ldr	r0, [r7, #8]
 801db04:	f001 f836 	bl	801eb74 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801db08:	4603      	mov	r3, r0
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	429c      	cmp	r4, r3
 801db0e:	bf0c      	ite	eq
 801db10:	2301      	moveq	r3, #1
 801db12:	2300      	movne	r3, #0
 801db14:	b2db      	uxtb	r3, r3
 801db16:	2b00      	cmp	r3, #0
 801db18:	d00c      	beq.n	801db34 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801db1a:	2300      	movs	r3, #0
 801db1c:	627b      	str	r3, [r7, #36]	; 0x24
 801db1e:	68b8      	ldr	r0, [r7, #8]
 801db20:	f001 f828 	bl	801eb74 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>
 801db24:	4602      	mov	r2, r0
 801db26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801db2a:	4619      	mov	r1, r3
 801db2c:	68f8      	ldr	r0, [r7, #12]
 801db2e:	f7f7 f8cd 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801db32:	e044      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801db34:	68bc      	ldr	r4, [r7, #8]
 801db36:	f107 0310 	add.w	r3, r7, #16
 801db3a:	4618      	mov	r0, r3
 801db3c:	f001 f8c8 	bl	801ecd0 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEppEv>
 801db40:	4603      	mov	r3, r0
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	4618      	mov	r0, r3
 801db46:	f000 f930 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801db4a:	4603      	mov	r3, r0
 801db4c:	461a      	mov	r2, r3
 801db4e:	6839      	ldr	r1, [r7, #0]
 801db50:	4620      	mov	r0, r4
 801db52:	f7f5 fcd1 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801db56:	4603      	mov	r3, r0
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d01f      	beq.n	801db9c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801db5c:	69bb      	ldr	r3, [r7, #24]
 801db5e:	4618      	mov	r0, r3
 801db60:	f7e4 fd57 	bl	8002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801db64:	4603      	mov	r3, r0
 801db66:	2b00      	cmp	r3, #0
 801db68:	bf0c      	ite	eq
 801db6a:	2301      	moveq	r3, #1
 801db6c:	2300      	movne	r3, #0
 801db6e:	b2db      	uxtb	r3, r3
 801db70:	2b00      	cmp	r3, #0
 801db72:	d00a      	beq.n	801db8a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801db74:	2300      	movs	r3, #0
 801db76:	62bb      	str	r3, [r7, #40]	; 0x28
 801db78:	f107 0218 	add.w	r2, r7, #24
 801db7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801db80:	4619      	mov	r1, r3
 801db82:	68f8      	ldr	r0, [r7, #12]
 801db84:	f7f7 f8a2 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801db88:	e019      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801db8a:	f107 0210 	add.w	r2, r7, #16
 801db8e:	f107 0310 	add.w	r3, r7, #16
 801db92:	4619      	mov	r1, r3
 801db94:	68f8      	ldr	r0, [r7, #12]
 801db96:	f7f7 f940 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801db9a:	e010      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	683a      	ldr	r2, [r7, #0]
 801dba0:	68b9      	ldr	r1, [r7, #8]
 801dba2:	4618      	mov	r0, r3
 801dba4:	f000 fff2 	bl	801eb8c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>
 801dba8:	e009      	b.n	801dbbe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801dbaa:	2300      	movs	r3, #0
 801dbac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dbae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801dbb2:	f107 0318 	add.w	r3, r7, #24
 801dbb6:	4619      	mov	r1, r3
 801dbb8:	68f8      	ldr	r0, [r7, #12]
 801dbba:	f7f7 f969 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801dbbe:	68f8      	ldr	r0, [r7, #12]
 801dbc0:	3734      	adds	r7, #52	; 0x34
 801dbc2:	46bd      	mov	sp, r7
 801dbc4:	bd90      	pop	{r4, r7, pc}

0801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 801dbc6:	b580      	push	{r7, lr}
 801dbc8:	b084      	sub	sp, #16
 801dbca:	af00      	add	r7, sp, #0
 801dbcc:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801dbce:	6878      	ldr	r0, [r7, #4]
 801dbd0:	f001 f88f 	bl	801ecf2 <_ZNKSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>
 801dbd4:	4602      	mov	r2, r0
 801dbd6:	f107 030c 	add.w	r3, r7, #12
 801dbda:	4611      	mov	r1, r2
 801dbdc:	4618      	mov	r0, r3
 801dbde:	f001 f896 	bl	801ed0e <_ZNKSt10_Select1stISt4pairIKh5StateEEclERKS3_>
 801dbe2:	4603      	mov	r3, r0
      }
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	3710      	adds	r7, #16
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bd80      	pop	{r7, pc}

0801dbec <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801dbec:	b5b0      	push	{r4, r5, r7, lr}
 801dbee:	b086      	sub	sp, #24
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	60f8      	str	r0, [r7, #12]
 801dbf4:	60b9      	str	r1, [r7, #8]
 801dbf6:	607a      	str	r2, [r7, #4]
 801dbf8:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d117      	bne.n	801dc30 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801dc00:	68f8      	ldr	r0, [r7, #12]
 801dc02:	f000 ff1f 	bl	801ea44 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801dc06:	4602      	mov	r2, r0
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	4293      	cmp	r3, r2
 801dc0c:	d010      	beq.n	801dc30 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801dc0e:	68fc      	ldr	r4, [r7, #12]
 801dc10:	6838      	ldr	r0, [r7, #0]
 801dc12:	f7ff ffd8 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801dc16:	4605      	mov	r5, r0
 801dc18:	6878      	ldr	r0, [r7, #4]
 801dc1a:	f000 f8c6 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	461a      	mov	r2, r3
 801dc22:	4629      	mov	r1, r5
 801dc24:	4620      	mov	r0, r4
 801dc26:	f7f5 fc67 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d001      	beq.n	801dc34 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 801dc30:	2301      	movs	r3, #1
 801dc32:	e000      	b.n	801dc36 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 801dc34:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801dc36:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801dc3c:	7df8      	ldrb	r0, [r7, #23]
 801dc3e:	687a      	ldr	r2, [r7, #4]
 801dc40:	6839      	ldr	r1, [r7, #0]
 801dc42:	f008 fa9a 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801dc46:	68fb      	ldr	r3, [r7, #12]
 801dc48:	695b      	ldr	r3, [r3, #20]
 801dc4a:	1c5a      	adds	r2, r3, #1
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801dc50:	f107 0310 	add.w	r3, r7, #16
 801dc54:	6839      	ldr	r1, [r7, #0]
 801dc56:	4618      	mov	r0, r3
 801dc58:	f000 f805 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801dc5c:	693b      	ldr	r3, [r7, #16]
    }
 801dc5e:	4618      	mov	r0, r3
 801dc60:	3718      	adds	r7, #24
 801dc62:	46bd      	mov	sp, r7
 801dc64:	bdb0      	pop	{r4, r5, r7, pc}

0801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801dc66:	b480      	push	{r7}
 801dc68:	b083      	sub	sp, #12
 801dc6a:	af00      	add	r7, sp, #0
 801dc6c:	6078      	str	r0, [r7, #4]
 801dc6e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801dc70:	687b      	ldr	r3, [r7, #4]
 801dc72:	683a      	ldr	r2, [r7, #0]
 801dc74:	601a      	str	r2, [r3, #0]
 801dc76:	687b      	ldr	r3, [r7, #4]
 801dc78:	4618      	mov	r0, r3
 801dc7a:	370c      	adds	r7, #12
 801dc7c:	46bd      	mov	sp, r7
 801dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc82:	4770      	bx	lr

0801dc84 <_ZNKSt12_Vector_baseISt8functionIFvvEESaIS2_EE13get_allocatorEv>:
      get_allocator() const _GLIBCXX_NOEXCEPT
 801dc84:	b580      	push	{r7, lr}
 801dc86:	b082      	sub	sp, #8
 801dc88:	af00      	add	r7, sp, #0
 801dc8a:	6078      	str	r0, [r7, #4]
 801dc8c:	6039      	str	r1, [r7, #0]
      { return allocator_type(_M_get_Tp_allocator()); }
 801dc8e:	6838      	ldr	r0, [r7, #0]
 801dc90:	f001 f849 	bl	801ed26 <_ZNKSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801dc94:	4603      	mov	r3, r0
 801dc96:	4619      	mov	r1, r3
 801dc98:	6878      	ldr	r0, [r7, #4]
 801dc9a:	f001 f84f 	bl	801ed3c <_ZNSaISt8functionIFvvEEEC1ERKS2_>
 801dc9e:	6878      	ldr	r0, [r7, #4]
 801dca0:	3708      	adds	r7, #8
 801dca2:	46bd      	mov	sp, r7
 801dca4:	bd80      	pop	{r7, pc}

0801dca6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EEC1ERKS3_>:
      vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801dca6:	b580      	push	{r7, lr}
 801dca8:	b082      	sub	sp, #8
 801dcaa:	af00      	add	r7, sp, #0
 801dcac:	6078      	str	r0, [r7, #4]
 801dcae:	6039      	str	r1, [r7, #0]
      : _Base(__a) { }
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	6839      	ldr	r1, [r7, #0]
 801dcb4:	4618      	mov	r0, r3
 801dcb6:	f001 f84f 	bl	801ed58 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EEC1ERKS3_>
 801dcba:	687b      	ldr	r3, [r7, #4]
 801dcbc:	4618      	mov	r0, r3
 801dcbe:	3708      	adds	r7, #8
 801dcc0:	46bd      	mov	sp, r7
 801dcc2:	bd80      	pop	{r7, pc}

0801dcc4 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_swap_dataERS5_>:
	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b086      	sub	sp, #24
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
 801dccc:	6039      	str	r1, [r7, #0]
	  _Vector_impl_data __tmp;
 801dcce:	f107 030c 	add.w	r3, r7, #12
 801dcd2:	4618      	mov	r0, r3
 801dcd4:	f7ff f9e8 	bl	801d0a8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_dataC1Ev>
	  __tmp._M_copy_data(*this);
 801dcd8:	f107 030c 	add.w	r3, r7, #12
 801dcdc:	6879      	ldr	r1, [r7, #4]
 801dcde:	4618      	mov	r0, r3
 801dce0:	f001 f849 	bl	801ed76 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  _M_copy_data(__x);
 801dce4:	6839      	ldr	r1, [r7, #0]
 801dce6:	6878      	ldr	r0, [r7, #4]
 801dce8:	f001 f845 	bl	801ed76 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	  __x._M_copy_data(__tmp);
 801dcec:	f107 030c 	add.w	r3, r7, #12
 801dcf0:	4619      	mov	r1, r3
 801dcf2:	6838      	ldr	r0, [r7, #0]
 801dcf4:	f001 f83f 	bl	801ed76 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>
	}
 801dcf8:	bf00      	nop
 801dcfa:	3718      	adds	r7, #24
 801dcfc:	46bd      	mov	sp, r7
 801dcfe:	bd80      	pop	{r7, pc}

0801dd00 <_ZSt15__alloc_on_moveISaISt8functionIFvvEEEEvRT_S5_>:
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
 801dd00:	b580      	push	{r7, lr}
 801dd02:	b082      	sub	sp, #8
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	6078      	str	r0, [r7, #4]
 801dd08:	6039      	str	r1, [r7, #0]
	__one = std::move(__two);
 801dd0a:	6838      	ldr	r0, [r7, #0]
 801dd0c:	f001 f84a 	bl	801eda4 <_ZSt4moveIRSaISt8functionIFvvEEEEONSt16remove_referenceIT_E4typeEOS6_>
    }
 801dd10:	bf00      	nop
 801dd12:	3708      	adds	r7, #8
 801dd14:	46bd      	mov	sp, r7
 801dd16:	bd80      	pop	{r7, pc}

0801dd18 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801dd18:	b480      	push	{r7}
 801dd1a:	b083      	sub	sp, #12
 801dd1c:	af00      	add	r7, sp, #0
 801dd1e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	689b      	ldr	r3, [r3, #8]
      }
 801dd24:	4618      	mov	r0, r3
 801dd26:	370c      	adds	r7, #12
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd2e:	4770      	bx	lr

0801dd30 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801dd30:	b480      	push	{r7}
 801dd32:	b083      	sub	sp, #12
 801dd34:	af00      	add	r7, sp, #0
 801dd36:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	3304      	adds	r3, #4
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	370c      	adds	r7, #12
 801dd40:	46bd      	mov	sp, r7
 801dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd46:	4770      	bx	lr

0801dd48 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801dd48:	b590      	push	{r4, r7, lr}
 801dd4a:	b087      	sub	sp, #28
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	60f8      	str	r0, [r7, #12]
 801dd50:	60b9      	str	r1, [r7, #8]
 801dd52:	607a      	str	r2, [r7, #4]
 801dd54:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801dd56:	68bb      	ldr	r3, [r7, #8]
 801dd58:	2b00      	cmp	r3, #0
 801dd5a:	d01b      	beq.n	801dd94 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801dd5c:	68fc      	ldr	r4, [r7, #12]
 801dd5e:	68b8      	ldr	r0, [r7, #8]
 801dd60:	f7ff ff31 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801dd64:	4603      	mov	r3, r0
 801dd66:	683a      	ldr	r2, [r7, #0]
 801dd68:	4619      	mov	r1, r3
 801dd6a:	4620      	mov	r0, r4
 801dd6c:	f7f5 fbc4 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801dd70:	4603      	mov	r3, r0
 801dd72:	f083 0301 	eor.w	r3, r3, #1
 801dd76:	b2db      	uxtb	r3, r3
 801dd78:	2b00      	cmp	r3, #0
 801dd7a:	d006      	beq.n	801dd8a <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801dd7c:	68bb      	ldr	r3, [r7, #8]
 801dd7e:	607b      	str	r3, [r7, #4]
 801dd80:	68b8      	ldr	r0, [r7, #8]
 801dd82:	f001 f81a 	bl	801edba <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>
 801dd86:	60b8      	str	r0, [r7, #8]
 801dd88:	e7e5      	b.n	801dd56 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801dd8a:	68b8      	ldr	r0, [r7, #8]
 801dd8c:	f001 f821 	bl	801edd2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801dd90:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801dd92:	e7e0      	b.n	801dd56 <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS3_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 801dd94:	f107 0314 	add.w	r3, r7, #20
 801dd98:	6879      	ldr	r1, [r7, #4]
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f000 f811 	bl	801ddc2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh5StateEEC1EPKSt18_Rb_tree_node_base>
 801dda0:	697b      	ldr	r3, [r7, #20]
    }
 801dda2:	4618      	mov	r0, r3
 801dda4:	371c      	adds	r7, #28
 801dda6:	46bd      	mov	sp, r7
 801dda8:	bd90      	pop	{r4, r7, pc}

0801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801ddaa:	b580      	push	{r7, lr}
 801ddac:	b082      	sub	sp, #8
 801ddae:	af00      	add	r7, sp, #0
 801ddb0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801ddb2:	6878      	ldr	r0, [r7, #4]
 801ddb4:	f7ff ff07 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	4618      	mov	r0, r3
 801ddbc:	3708      	adds	r7, #8
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}

0801ddc2 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKh5StateEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801ddc2:	b480      	push	{r7}
 801ddc4:	b083      	sub	sp, #12
 801ddc6:	af00      	add	r7, sp, #0
 801ddc8:	6078      	str	r0, [r7, #4]
 801ddca:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	683a      	ldr	r2, [r7, #0]
 801ddd0:	601a      	str	r2, [r3, #0]
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	370c      	adds	r7, #12
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddde:	4770      	bx	lr

0801dde0 <_ZSt7forwardIRKSt8functionIFvvEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801dde0:	b480      	push	{r7}
 801dde2:	b083      	sub	sp, #12
 801dde4:	af00      	add	r7, sp, #0
 801dde6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	4618      	mov	r0, r3
 801ddec:	370c      	adds	r7, #12
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddf4:	4770      	bx	lr

0801ddf6 <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801ddf6:	b590      	push	{r4, r7, lr}
 801ddf8:	b087      	sub	sp, #28
 801ddfa:	af00      	add	r7, sp, #0
 801ddfc:	60f8      	str	r0, [r7, #12]
 801ddfe:	60b9      	str	r1, [r7, #8]
 801de00:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801de02:	68f8      	ldr	r0, [r7, #12]
 801de04:	f000 fff1 	bl	801edea <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE8max_sizeEv>
 801de08:	4604      	mov	r4, r0
 801de0a:	68f8      	ldr	r0, [r7, #12]
 801de0c:	f000 fffe 	bl	801ee0c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE4sizeEv>
 801de10:	4603      	mov	r3, r0
 801de12:	1ae2      	subs	r2, r4, r3
 801de14:	68bb      	ldr	r3, [r7, #8]
 801de16:	429a      	cmp	r2, r3
 801de18:	bf34      	ite	cc
 801de1a:	2301      	movcc	r3, #1
 801de1c:	2300      	movcs	r3, #0
 801de1e:	b2db      	uxtb	r3, r3
 801de20:	2b00      	cmp	r3, #0
 801de22:	d002      	beq.n	801de2a <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801de24:	6878      	ldr	r0, [r7, #4]
 801de26:	f008 fa06 	bl	8026236 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801de2a:	68f8      	ldr	r0, [r7, #12]
 801de2c:	f000 ffee 	bl	801ee0c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE4sizeEv>
 801de30:	4604      	mov	r4, r0
 801de32:	68f8      	ldr	r0, [r7, #12]
 801de34:	f000 ffea 	bl	801ee0c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE4sizeEv>
 801de38:	4603      	mov	r3, r0
 801de3a:	613b      	str	r3, [r7, #16]
 801de3c:	f107 0208 	add.w	r2, r7, #8
 801de40:	f107 0310 	add.w	r3, r7, #16
 801de44:	4611      	mov	r1, r2
 801de46:	4618      	mov	r0, r3
 801de48:	f7f4 fe00 	bl	8012a4c <_ZSt3maxIjERKT_S2_S2_>
 801de4c:	4603      	mov	r3, r0
 801de4e:	681b      	ldr	r3, [r3, #0]
 801de50:	4423      	add	r3, r4
 801de52:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801de54:	68f8      	ldr	r0, [r7, #12]
 801de56:	f000 ffd9 	bl	801ee0c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE4sizeEv>
 801de5a:	4602      	mov	r2, r0
 801de5c:	697b      	ldr	r3, [r7, #20]
 801de5e:	4293      	cmp	r3, r2
 801de60:	d306      	bcc.n	801de70 <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 801de62:	68f8      	ldr	r0, [r7, #12]
 801de64:	f000 ffc1 	bl	801edea <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE8max_sizeEv>
 801de68:	4602      	mov	r2, r0
 801de6a:	697b      	ldr	r3, [r7, #20]
 801de6c:	4293      	cmp	r3, r2
 801de6e:	d904      	bls.n	801de7a <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc+0x84>
 801de70:	68f8      	ldr	r0, [r7, #12]
 801de72:	f000 ffba 	bl	801edea <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE8max_sizeEv>
 801de76:	4603      	mov	r3, r0
 801de78:	e000      	b.n	801de7c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE12_M_check_lenEjPKc+0x86>
 801de7a:	697b      	ldr	r3, [r7, #20]
      }
 801de7c:	4618      	mov	r0, r3
 801de7e:	371c      	adds	r7, #28
 801de80:	46bd      	mov	sp, r7
 801de82:	bd90      	pop	{r4, r7, pc}

0801de84 <_ZN9__gnu_cxxmiIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801de84:	b590      	push	{r4, r7, lr}
 801de86:	b083      	sub	sp, #12
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
 801de8c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801de8e:	6878      	ldr	r0, [r7, #4]
 801de90:	f7fe fc52 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801de94:	4603      	mov	r3, r0
 801de96:	681c      	ldr	r4, [r3, #0]
 801de98:	6838      	ldr	r0, [r7, #0]
 801de9a:	f7fe fc4d 	bl	801c738 <_ZNK9__gnu_cxx17__normal_iteratorIPSt8functionIFvvEESt6vectorIS3_SaIS3_EEE4baseEv>
 801de9e:	4603      	mov	r3, r0
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	1ae3      	subs	r3, r4, r3
 801dea4:	111b      	asrs	r3, r3, #4
 801dea6:	4618      	mov	r0, r3
 801dea8:	370c      	adds	r7, #12
 801deaa:	46bd      	mov	sp, r7
 801deac:	bd90      	pop	{r4, r7, pc}

0801deae <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801deae:	b580      	push	{r7, lr}
 801deb0:	b082      	sub	sp, #8
 801deb2:	af00      	add	r7, sp, #0
 801deb4:	6078      	str	r0, [r7, #4]
 801deb6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801deb8:	683b      	ldr	r3, [r7, #0]
 801deba:	2b00      	cmp	r3, #0
 801debc:	d006      	beq.n	801decc <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE11_M_allocateEj+0x1e>
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	6839      	ldr	r1, [r7, #0]
 801dec2:	4618      	mov	r0, r3
 801dec4:	f000 ffb2 	bl	801ee2c <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8allocateERS3_j>
 801dec8:	4603      	mov	r3, r0
 801deca:	e000      	b.n	801dece <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE11_M_allocateEj+0x20>
 801decc:	2300      	movs	r3, #0
      }
 801dece:	4618      	mov	r0, r3
 801ded0:	3708      	adds	r7, #8
 801ded2:	46bd      	mov	sp, r7
 801ded4:	bd80      	pop	{r7, pc}

0801ded6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801ded6:	b590      	push	{r4, r7, lr}
 801ded8:	b087      	sub	sp, #28
 801deda:	af02      	add	r7, sp, #8
 801dedc:	60f8      	str	r0, [r7, #12]
 801dede:	60b9      	str	r1, [r7, #8]
 801dee0:	607a      	str	r2, [r7, #4]
 801dee2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801dee4:	f88d 4000 	strb.w	r4, [sp]
 801dee8:	683b      	ldr	r3, [r7, #0]
 801deea:	687a      	ldr	r2, [r7, #4]
 801deec:	68b9      	ldr	r1, [r7, #8]
 801deee:	68f8      	ldr	r0, [r7, #12]
 801def0:	f000 ffbc 	bl	801ee6c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 801def4:	4603      	mov	r3, r0
      }
 801def6:	4618      	mov	r0, r3
 801def8:	3714      	adds	r7, #20
 801defa:	46bd      	mov	sp, r7
 801defc:	bd90      	pop	{r4, r7, pc}

0801defe <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE7destroyIS2_EEvRS3_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801defe:	b580      	push	{r7, lr}
 801df00:	b082      	sub	sp, #8
 801df02:	af00      	add	r7, sp, #0
 801df04:	6078      	str	r0, [r7, #4]
 801df06:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 801df08:	6838      	ldr	r0, [r7, #0]
 801df0a:	f7e5 f9c1 	bl	8003290 <_ZSt10destroy_atISt8functionIFvvEEEvPT_>
	}
 801df0e:	bf00      	nop
 801df10:	3708      	adds	r7, #8
 801df12:	46bd      	mov	sp, r7
 801df14:	bd80      	pop	{r7, pc}

0801df16 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801df16:	b590      	push	{r4, r7, lr}
 801df18:	b083      	sub	sp, #12
 801df1a:	af00      	add	r7, sp, #0
 801df1c:	6078      	str	r0, [r7, #4]
 801df1e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801df20:	6878      	ldr	r0, [r7, #4]
 801df22:	f7e4 f919 	bl	8002158 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_beginEv>
 801df26:	4604      	mov	r4, r0
 801df28:	6878      	ldr	r0, [r7, #4]
 801df2a:	f000 ffb1 	bl	801ee90 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_M_endEv>
 801df2e:	4602      	mov	r2, r0
 801df30:	683b      	ldr	r3, [r7, #0]
 801df32:	4621      	mov	r1, r4
 801df34:	6878      	ldr	r0, [r7, #4]
 801df36:	f000 ffb7 	bl	801eea8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_>
 801df3a:	4603      	mov	r3, r0
 801df3c:	4618      	mov	r0, r3
 801df3e:	370c      	adds	r7, #12
 801df40:	46bd      	mov	sp, r7
 801df42:	bd90      	pop	{r4, r7, pc}

0801df44 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801df44:	b580      	push	{r7, lr}
 801df46:	b084      	sub	sp, #16
 801df48:	af00      	add	r7, sp, #0
 801df4a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	1d1a      	adds	r2, r3, #4
 801df50:	f107 030c 	add.w	r3, r7, #12
 801df54:	4611      	mov	r1, r2
 801df56:	4618      	mov	r0, r3
 801df58:	f000 f9a6 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	4618      	mov	r0, r3
 801df60:	3710      	adds	r7, #16
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}

0801df66 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8key_compEv>:
      key_comp() const
 801df66:	b480      	push	{r7}
 801df68:	b083      	sub	sp, #12
 801df6a:	af00      	add	r7, sp, #0
 801df6c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801df6e:	bf00      	nop
 801df70:	4618      	mov	r0, r3
 801df72:	370c      	adds	r7, #12
 801df74:	46bd      	mov	sp, r7
 801df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df7a:	4770      	bx	lr

0801df7c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEPSt13_Rb_tree_nodeISE_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801df7c:	b5b0      	push	{r4, r5, r7, lr}
 801df7e:	b088      	sub	sp, #32
 801df80:	af02      	add	r7, sp, #8
 801df82:	60f8      	str	r0, [r7, #12]
 801df84:	60b9      	str	r1, [r7, #8]
 801df86:	607a      	str	r2, [r7, #4]
 801df88:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801df8a:	68f8      	ldr	r0, [r7, #12]
 801df8c:	f000 ffbd 	bl	801ef0a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_get_nodeEv>
 801df90:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801df92:	68b8      	ldr	r0, [r7, #8]
 801df94:	f7f5 ff9f 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801df98:	4604      	mov	r4, r0
 801df9a:	6878      	ldr	r0, [r7, #4]
 801df9c:	f7f5 ffa6 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801dfa0:	4605      	mov	r5, r0
 801dfa2:	6838      	ldr	r0, [r7, #0]
 801dfa4:	f7f5 ffad 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	9300      	str	r3, [sp, #0]
 801dfac:	462b      	mov	r3, r5
 801dfae:	4622      	mov	r2, r4
 801dfb0:	6979      	ldr	r1, [r7, #20]
 801dfb2:	68f8      	ldr	r0, [r7, #12]
 801dfb4:	f000 ffba 	bl	801ef2c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEvPSt13_Rb_tree_nodeISE_EDpOT_>
	  return __tmp;
 801dfb8:	697b      	ldr	r3, [r7, #20]
	}
 801dfba:	4618      	mov	r0, r3
 801dfbc:	3718      	adds	r7, #24
 801dfbe:	46bd      	mov	sp, r7
 801dfc0:	bdb0      	pop	{r4, r5, r7, pc}

0801dfc2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801dfc2:	b590      	push	{r4, r7, lr}
 801dfc4:	b08d      	sub	sp, #52	; 0x34
 801dfc6:	af00      	add	r7, sp, #0
 801dfc8:	60f8      	str	r0, [r7, #12]
 801dfca:	60b9      	str	r1, [r7, #8]
 801dfcc:	607a      	str	r2, [r7, #4]
 801dfce:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801dfd0:	1d3b      	adds	r3, r7, #4
 801dfd2:	4618      	mov	r0, r3
 801dfd4:	f000 ffd7 	bl	801ef86 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE13_M_const_castEv>
 801dfd8:	4603      	mov	r3, r0
 801dfda:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801dfdc:	69bc      	ldr	r4, [r7, #24]
 801dfde:	68b8      	ldr	r0, [r7, #8]
 801dfe0:	f000 ff56 	bl	801ee90 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_M_endEv>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	429c      	cmp	r4, r3
 801dfe8:	bf0c      	ite	eq
 801dfea:	2301      	moveq	r3, #1
 801dfec:	2300      	movne	r3, #0
 801dfee:	b2db      	uxtb	r3, r3
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	d030      	beq.n	801e056 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x94>
	  if (size() > 0
 801dff4:	68b8      	ldr	r0, [r7, #8]
 801dff6:	f000 ffd7 	bl	801efa8 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE4sizeEv>
 801dffa:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d013      	beq.n	801e028 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x66>
 801e000:	68bc      	ldr	r4, [r7, #8]
 801e002:	68b8      	ldr	r0, [r7, #8]
 801e004:	f000 ffdc 	bl	801efc0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_rightmostEv>
 801e008:	4603      	mov	r3, r0
 801e00a:	681b      	ldr	r3, [r3, #0]
 801e00c:	4618      	mov	r0, r3
 801e00e:	f000 ffe3 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e012:	4603      	mov	r3, r0
 801e014:	683a      	ldr	r2, [r7, #0]
 801e016:	4619      	mov	r1, r3
 801e018:	4620      	mov	r0, r4
 801e01a:	f7f5 fa6d 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e01e:	4603      	mov	r3, r0
 801e020:	2b00      	cmp	r3, #0
 801e022:	d001      	beq.n	801e028 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x66>
 801e024:	2301      	movs	r3, #1
 801e026:	e000      	b.n	801e02a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x68>
 801e028:	2300      	movs	r3, #0
	  if (size() > 0
 801e02a:	2b00      	cmp	r3, #0
 801e02c:	d00c      	beq.n	801e048 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801e02e:	2300      	movs	r3, #0
 801e030:	61fb      	str	r3, [r7, #28]
 801e032:	68b8      	ldr	r0, [r7, #8]
 801e034:	f000 ffc4 	bl	801efc0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_rightmostEv>
 801e038:	4602      	mov	r2, r0
 801e03a:	f107 031c 	add.w	r3, r7, #28
 801e03e:	4619      	mov	r1, r3
 801e040:	68f8      	ldr	r0, [r7, #12]
 801e042:	f7f6 fe43 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e046:	e0db      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	683a      	ldr	r2, [r7, #0]
 801e04c:	68b9      	ldr	r1, [r7, #8]
 801e04e:	4618      	mov	r0, r3
 801e050:	f000 ffce 	bl	801eff0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_>
 801e054:	e0d4      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801e056:	68bc      	ldr	r4, [r7, #8]
 801e058:	69bb      	ldr	r3, [r7, #24]
 801e05a:	4618      	mov	r0, r3
 801e05c:	f000 ffbc 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e060:	4603      	mov	r3, r0
 801e062:	461a      	mov	r2, r3
 801e064:	6839      	ldr	r1, [r7, #0]
 801e066:	4620      	mov	r0, r4
 801e068:	f7f5 fa46 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e06c:	4603      	mov	r3, r0
 801e06e:	2b00      	cmp	r3, #0
 801e070:	d057      	beq.n	801e122 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x160>
	  iterator __before = __pos;
 801e072:	69bb      	ldr	r3, [r7, #24]
 801e074:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801e076:	69bc      	ldr	r4, [r7, #24]
 801e078:	68b8      	ldr	r0, [r7, #8]
 801e07a:	f001 f83e 	bl	801f0fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_leftmostEv>
 801e07e:	4603      	mov	r3, r0
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	429c      	cmp	r4, r3
 801e084:	bf0c      	ite	eq
 801e086:	2301      	moveq	r3, #1
 801e088:	2300      	movne	r3, #0
 801e08a:	b2db      	uxtb	r3, r3
 801e08c:	2b00      	cmp	r3, #0
 801e08e:	d00d      	beq.n	801e0ac <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801e090:	68b8      	ldr	r0, [r7, #8]
 801e092:	f001 f832 	bl	801f0fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_leftmostEv>
 801e096:	4604      	mov	r4, r0
 801e098:	68b8      	ldr	r0, [r7, #8]
 801e09a:	f001 f82e 	bl	801f0fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_leftmostEv>
 801e09e:	4603      	mov	r3, r0
 801e0a0:	461a      	mov	r2, r3
 801e0a2:	4621      	mov	r1, r4
 801e0a4:	68f8      	ldr	r0, [r7, #12]
 801e0a6:	f7f6 feb8 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e0aa:	e0a9      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801e0ac:	68bc      	ldr	r4, [r7, #8]
 801e0ae:	f107 0314 	add.w	r3, r7, #20
 801e0b2:	4618      	mov	r0, r3
 801e0b4:	f001 f82d 	bl	801f112 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEmmEv>
 801e0b8:	4603      	mov	r3, r0
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	4618      	mov	r0, r3
 801e0be:	f000 ff8b 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	683a      	ldr	r2, [r7, #0]
 801e0c6:	4619      	mov	r1, r3
 801e0c8:	4620      	mov	r0, r4
 801e0ca:	f7f5 fa15 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e0ce:	4603      	mov	r3, r0
 801e0d0:	2b00      	cmp	r3, #0
 801e0d2:	d01f      	beq.n	801e114 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801e0d4:	697b      	ldr	r3, [r7, #20]
 801e0d6:	4618      	mov	r0, r3
 801e0d8:	f7e4 fb03 	bl	80026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	bf0c      	ite	eq
 801e0e2:	2301      	moveq	r3, #1
 801e0e4:	2300      	movne	r3, #0
 801e0e6:	b2db      	uxtb	r3, r3
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	d00a      	beq.n	801e102 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801e0ec:	2300      	movs	r3, #0
 801e0ee:	623b      	str	r3, [r7, #32]
 801e0f0:	f107 0214 	add.w	r2, r7, #20
 801e0f4:	f107 0320 	add.w	r3, r7, #32
 801e0f8:	4619      	mov	r1, r3
 801e0fa:	68f8      	ldr	r0, [r7, #12]
 801e0fc:	f7f6 fde6 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e100:	e07e      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801e102:	f107 0218 	add.w	r2, r7, #24
 801e106:	f107 0318 	add.w	r3, r7, #24
 801e10a:	4619      	mov	r1, r3
 801e10c:	68f8      	ldr	r0, [r7, #12]
 801e10e:	f7f6 fe84 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e112:	e075      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	683a      	ldr	r2, [r7, #0]
 801e118:	68b9      	ldr	r1, [r7, #8]
 801e11a:	4618      	mov	r0, r3
 801e11c:	f000 ff68 	bl	801eff0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_>
 801e120:	e06e      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801e122:	68bc      	ldr	r4, [r7, #8]
 801e124:	69bb      	ldr	r3, [r7, #24]
 801e126:	4618      	mov	r0, r3
 801e128:	f000 ff56 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e12c:	4603      	mov	r3, r0
 801e12e:	683a      	ldr	r2, [r7, #0]
 801e130:	4619      	mov	r1, r3
 801e132:	4620      	mov	r0, r4
 801e134:	f7f5 f9e0 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e138:	4603      	mov	r3, r0
 801e13a:	2b00      	cmp	r3, #0
 801e13c:	d056      	beq.n	801e1ec <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x22a>
	  iterator __after = __pos;
 801e13e:	69bb      	ldr	r3, [r7, #24]
 801e140:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801e142:	69bc      	ldr	r4, [r7, #24]
 801e144:	68b8      	ldr	r0, [r7, #8]
 801e146:	f000 ff3b 	bl	801efc0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_rightmostEv>
 801e14a:	4603      	mov	r3, r0
 801e14c:	681b      	ldr	r3, [r3, #0]
 801e14e:	429c      	cmp	r4, r3
 801e150:	bf0c      	ite	eq
 801e152:	2301      	moveq	r3, #1
 801e154:	2300      	movne	r3, #0
 801e156:	b2db      	uxtb	r3, r3
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d00c      	beq.n	801e176 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801e15c:	2300      	movs	r3, #0
 801e15e:	627b      	str	r3, [r7, #36]	; 0x24
 801e160:	68b8      	ldr	r0, [r7, #8]
 801e162:	f000 ff2d 	bl	801efc0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_rightmostEv>
 801e166:	4602      	mov	r2, r0
 801e168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e16c:	4619      	mov	r1, r3
 801e16e:	68f8      	ldr	r0, [r7, #12]
 801e170:	f7f6 fdac 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e174:	e044      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801e176:	68bc      	ldr	r4, [r7, #8]
 801e178:	f107 0310 	add.w	r3, r7, #16
 801e17c:	4618      	mov	r0, r3
 801e17e:	f000 ffd9 	bl	801f134 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEppEv>
 801e182:	4603      	mov	r3, r0
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	4618      	mov	r0, r3
 801e188:	f000 ff26 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e18c:	4603      	mov	r3, r0
 801e18e:	461a      	mov	r2, r3
 801e190:	6839      	ldr	r1, [r7, #0]
 801e192:	4620      	mov	r0, r4
 801e194:	f7f5 f9b0 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e198:	4603      	mov	r3, r0
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d01f      	beq.n	801e1de <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801e19e:	69bb      	ldr	r3, [r7, #24]
 801e1a0:	4618      	mov	r0, r3
 801e1a2:	f7e4 fa9e 	bl	80026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e1a6:	4603      	mov	r3, r0
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	bf0c      	ite	eq
 801e1ac:	2301      	moveq	r3, #1
 801e1ae:	2300      	movne	r3, #0
 801e1b0:	b2db      	uxtb	r3, r3
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d00a      	beq.n	801e1cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801e1b6:	2300      	movs	r3, #0
 801e1b8:	62bb      	str	r3, [r7, #40]	; 0x28
 801e1ba:	f107 0218 	add.w	r2, r7, #24
 801e1be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e1c2:	4619      	mov	r1, r3
 801e1c4:	68f8      	ldr	r0, [r7, #12]
 801e1c6:	f7f6 fd81 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e1ca:	e019      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801e1cc:	f107 0210 	add.w	r2, r7, #16
 801e1d0:	f107 0310 	add.w	r3, r7, #16
 801e1d4:	4619      	mov	r1, r3
 801e1d6:	68f8      	ldr	r0, [r7, #12]
 801e1d8:	f7f6 fe1f 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e1dc:	e010      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	683a      	ldr	r2, [r7, #0]
 801e1e2:	68b9      	ldr	r1, [r7, #8]
 801e1e4:	4618      	mov	r0, r3
 801e1e6:	f000 ff03 	bl	801eff0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_>
 801e1ea:	e009      	b.n	801e200 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISE_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e1f0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801e1f4:	f107 0318 	add.w	r3, r7, #24
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	68f8      	ldr	r0, [r7, #12]
 801e1fc:	f7f6 fe48 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801e200:	68f8      	ldr	r0, [r7, #12]
 801e202:	3734      	adds	r7, #52	; 0x34
 801e204:	46bd      	mov	sp, r7
 801e206:	bd90      	pop	{r4, r7, pc}

0801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>:
      _S_key(_Const_Link_type __x)
 801e208:	b580      	push	{r7, lr}
 801e20a:	b084      	sub	sp, #16
 801e20c:	af00      	add	r7, sp, #0
 801e20e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801e210:	6878      	ldr	r0, [r7, #4]
 801e212:	f000 ffa0 	bl	801f156 <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>
 801e216:	4602      	mov	r2, r0
 801e218:	f107 030c 	add.w	r3, r7, #12
 801e21c:	4611      	mov	r1, r2
 801e21e:	4618      	mov	r0, r3
 801e220:	f000 ffa7 	bl	801f172 <_ZNKSt10_Select1stISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEclERKSE_>
 801e224:	4603      	mov	r3, r0
      }
 801e226:	4618      	mov	r0, r3
 801e228:	3710      	adds	r7, #16
 801e22a:	46bd      	mov	sp, r7
 801e22c:	bd80      	pop	{r7, pc}

0801e22e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e22e:	b5b0      	push	{r4, r5, r7, lr}
 801e230:	b086      	sub	sp, #24
 801e232:	af00      	add	r7, sp, #0
 801e234:	60f8      	str	r0, [r7, #12]
 801e236:	60b9      	str	r1, [r7, #8]
 801e238:	607a      	str	r2, [r7, #4]
 801e23a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801e23c:	68bb      	ldr	r3, [r7, #8]
 801e23e:	2b00      	cmp	r3, #0
 801e240:	d117      	bne.n	801e272 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e242:	68f8      	ldr	r0, [r7, #12]
 801e244:	f000 fe24 	bl	801ee90 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_M_endEv>
 801e248:	4602      	mov	r2, r0
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	4293      	cmp	r3, r2
 801e24e:	d010      	beq.n	801e272 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801e250:	68fc      	ldr	r4, [r7, #12]
 801e252:	6838      	ldr	r0, [r7, #0]
 801e254:	f7ff ffd8 	bl	801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>
 801e258:	4605      	mov	r5, r0
 801e25a:	6878      	ldr	r0, [r7, #4]
 801e25c:	f000 febc 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e260:	4603      	mov	r3, r0
 801e262:	461a      	mov	r2, r3
 801e264:	4629      	mov	r1, r5
 801e266:	4620      	mov	r0, r4
 801e268:	f7f5 f946 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e26c:	4603      	mov	r3, r0
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d001      	beq.n	801e276 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E+0x48>
 801e272:	2301      	movs	r3, #1
 801e274:	e000      	b.n	801e278 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSK_PSt13_Rb_tree_nodeISE_E+0x4a>
 801e276:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e278:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801e27e:	7df8      	ldrb	r0, [r7, #23]
 801e280:	687a      	ldr	r2, [r7, #4]
 801e282:	6839      	ldr	r1, [r7, #0]
 801e284:	f007 ff79 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	695b      	ldr	r3, [r3, #20]
 801e28c:	1c5a      	adds	r2, r3, #1
 801e28e:	68fb      	ldr	r3, [r7, #12]
 801e290:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801e292:	f107 0310 	add.w	r3, r7, #16
 801e296:	6839      	ldr	r1, [r7, #0]
 801e298:	4618      	mov	r0, r3
 801e29a:	f000 f805 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801e29e:	693b      	ldr	r3, [r7, #16]
    }
 801e2a0:	4618      	mov	r0, r3
 801e2a2:	3718      	adds	r7, #24
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	bdb0      	pop	{r4, r5, r7, pc}

0801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801e2a8:	b480      	push	{r7}
 801e2aa:	b083      	sub	sp, #12
 801e2ac:	af00      	add	r7, sp, #0
 801e2ae:	6078      	str	r0, [r7, #4]
 801e2b0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	683a      	ldr	r2, [r7, #0]
 801e2b6:	601a      	str	r2, [r3, #0]
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	4618      	mov	r0, r3
 801e2bc:	370c      	adds	r7, #12
 801e2be:	46bd      	mov	sp, r7
 801e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c4:	4770      	bx	lr

0801e2c6 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801e2c6:	b590      	push	{r4, r7, lr}
 801e2c8:	b083      	sub	sp, #12
 801e2ca:	af00      	add	r7, sp, #0
 801e2cc:	6078      	str	r0, [r7, #4]
 801e2ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801e2d0:	6878      	ldr	r0, [r7, #4]
 801e2d2:	f7e5 f972 	bl	80035ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_beginEv>
 801e2d6:	4604      	mov	r4, r0
 801e2d8:	6878      	ldr	r0, [r7, #4]
 801e2da:	f000 ff56 	bl	801f18a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_M_endEv>
 801e2de:	4602      	mov	r2, r0
 801e2e0:	683b      	ldr	r3, [r7, #0]
 801e2e2:	4621      	mov	r1, r4
 801e2e4:	6878      	ldr	r0, [r7, #4]
 801e2e6:	f000 ff5c 	bl	801f1a2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_>
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	4618      	mov	r0, r3
 801e2ee:	370c      	adds	r7, #12
 801e2f0:	46bd      	mov	sp, r7
 801e2f2:	bd90      	pop	{r4, r7, pc}

0801e2f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801e2f4:	b580      	push	{r7, lr}
 801e2f6:	b084      	sub	sp, #16
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801e2fc:	687b      	ldr	r3, [r7, #4]
 801e2fe:	1d1a      	adds	r2, r3, #4
 801e300:	f107 030c 	add.w	r3, r7, #12
 801e304:	4611      	mov	r1, r2
 801e306:	4618      	mov	r0, r3
 801e308:	f000 f9a6 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801e30c:	68fb      	ldr	r3, [r7, #12]
 801e30e:	4618      	mov	r0, r3
 801e310:	3710      	adds	r7, #16
 801e312:	46bd      	mov	sp, r7
 801e314:	bd80      	pop	{r7, pc}

0801e316 <_ZNKSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8key_compEv>:
      key_comp() const
 801e316:	b480      	push	{r7}
 801e318:	b083      	sub	sp, #12
 801e31a:	af00      	add	r7, sp, #0
 801e31c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801e31e:	bf00      	nop
 801e320:	4618      	mov	r0, r3
 801e322:	370c      	adds	r7, #12
 801e324:	46bd      	mov	sp, r7
 801e326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e32a:	4770      	bx	lr

0801e32c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801e32c:	b5b0      	push	{r4, r5, r7, lr}
 801e32e:	b088      	sub	sp, #32
 801e330:	af02      	add	r7, sp, #8
 801e332:	60f8      	str	r0, [r7, #12]
 801e334:	60b9      	str	r1, [r7, #8]
 801e336:	607a      	str	r2, [r7, #4]
 801e338:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801e33a:	68f8      	ldr	r0, [r7, #12]
 801e33c:	f000 ff62 	bl	801f204 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_get_nodeEv>
 801e340:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801e342:	68b8      	ldr	r0, [r7, #8]
 801e344:	f7f5 fdc7 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801e348:	4604      	mov	r4, r0
 801e34a:	6878      	ldr	r0, [r7, #4]
 801e34c:	f7f5 fdce 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e350:	4605      	mov	r5, r0
 801e352:	6838      	ldr	r0, [r7, #0]
 801e354:	f7f5 fdd5 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e358:	4603      	mov	r3, r0
 801e35a:	9300      	str	r3, [sp, #0]
 801e35c:	462b      	mov	r3, r5
 801e35e:	4622      	mov	r2, r4
 801e360:	6979      	ldr	r1, [r7, #20]
 801e362:	68f8      	ldr	r0, [r7, #12]
 801e364:	f000 ff5f 	bl	801f226 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>
	  return __tmp;
 801e368:	697b      	ldr	r3, [r7, #20]
	}
 801e36a:	4618      	mov	r0, r3
 801e36c:	3718      	adds	r7, #24
 801e36e:	46bd      	mov	sp, r7
 801e370:	bdb0      	pop	{r4, r5, r7, pc}

0801e372 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e372:	b590      	push	{r4, r7, lr}
 801e374:	b08d      	sub	sp, #52	; 0x34
 801e376:	af00      	add	r7, sp, #0
 801e378:	60f8      	str	r0, [r7, #12]
 801e37a:	60b9      	str	r1, [r7, #8]
 801e37c:	607a      	str	r2, [r7, #4]
 801e37e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801e380:	1d3b      	adds	r3, r7, #4
 801e382:	4618      	mov	r0, r3
 801e384:	f000 ff7c 	bl	801f280 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE13_M_const_castEv>
 801e388:	4603      	mov	r3, r0
 801e38a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801e38c:	69bc      	ldr	r4, [r7, #24]
 801e38e:	68b8      	ldr	r0, [r7, #8]
 801e390:	f000 fefb 	bl	801f18a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_M_endEv>
 801e394:	4603      	mov	r3, r0
 801e396:	429c      	cmp	r4, r3
 801e398:	bf0c      	ite	eq
 801e39a:	2301      	moveq	r3, #1
 801e39c:	2300      	movne	r3, #0
 801e39e:	b2db      	uxtb	r3, r3
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d030      	beq.n	801e406 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x94>
	  if (size() > 0
 801e3a4:	68b8      	ldr	r0, [r7, #8]
 801e3a6:	f000 ff7c 	bl	801f2a2 <_ZNKSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE4sizeEv>
 801e3aa:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d013      	beq.n	801e3d8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x66>
 801e3b0:	68bc      	ldr	r4, [r7, #8]
 801e3b2:	68b8      	ldr	r0, [r7, #8]
 801e3b4:	f000 ff81 	bl	801f2ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_rightmostEv>
 801e3b8:	4603      	mov	r3, r0
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	4618      	mov	r0, r3
 801e3be:	f000 ff88 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e3c2:	4603      	mov	r3, r0
 801e3c4:	683a      	ldr	r2, [r7, #0]
 801e3c6:	4619      	mov	r1, r3
 801e3c8:	4620      	mov	r0, r4
 801e3ca:	f7f5 f895 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e3ce:	4603      	mov	r3, r0
 801e3d0:	2b00      	cmp	r3, #0
 801e3d2:	d001      	beq.n	801e3d8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x66>
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	e000      	b.n	801e3da <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x68>
 801e3d8:	2300      	movs	r3, #0
	  if (size() > 0
 801e3da:	2b00      	cmp	r3, #0
 801e3dc:	d00c      	beq.n	801e3f8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801e3de:	2300      	movs	r3, #0
 801e3e0:	61fb      	str	r3, [r7, #28]
 801e3e2:	68b8      	ldr	r0, [r7, #8]
 801e3e4:	f000 ff69 	bl	801f2ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_rightmostEv>
 801e3e8:	4602      	mov	r2, r0
 801e3ea:	f107 031c 	add.w	r3, r7, #28
 801e3ee:	4619      	mov	r1, r3
 801e3f0:	68f8      	ldr	r0, [r7, #12]
 801e3f2:	f7f6 fc6b 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e3f6:	e0db      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	683a      	ldr	r2, [r7, #0]
 801e3fc:	68b9      	ldr	r1, [r7, #8]
 801e3fe:	4618      	mov	r0, r3
 801e400:	f000 ff73 	bl	801f2ea <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
 801e404:	e0d4      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801e406:	68bc      	ldr	r4, [r7, #8]
 801e408:	69bb      	ldr	r3, [r7, #24]
 801e40a:	4618      	mov	r0, r3
 801e40c:	f000 ff61 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e410:	4603      	mov	r3, r0
 801e412:	461a      	mov	r2, r3
 801e414:	6839      	ldr	r1, [r7, #0]
 801e416:	4620      	mov	r0, r4
 801e418:	f7f5 f86e 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e41c:	4603      	mov	r3, r0
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d057      	beq.n	801e4d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x160>
	  iterator __before = __pos;
 801e422:	69bb      	ldr	r3, [r7, #24]
 801e424:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801e426:	69bc      	ldr	r4, [r7, #24]
 801e428:	68b8      	ldr	r0, [r7, #8]
 801e42a:	f000 ffe3 	bl	801f3f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_leftmostEv>
 801e42e:	4603      	mov	r3, r0
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	429c      	cmp	r4, r3
 801e434:	bf0c      	ite	eq
 801e436:	2301      	moveq	r3, #1
 801e438:	2300      	movne	r3, #0
 801e43a:	b2db      	uxtb	r3, r3
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d00d      	beq.n	801e45c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801e440:	68b8      	ldr	r0, [r7, #8]
 801e442:	f000 ffd7 	bl	801f3f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_leftmostEv>
 801e446:	4604      	mov	r4, r0
 801e448:	68b8      	ldr	r0, [r7, #8]
 801e44a:	f000 ffd3 	bl	801f3f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_leftmostEv>
 801e44e:	4603      	mov	r3, r0
 801e450:	461a      	mov	r2, r3
 801e452:	4621      	mov	r1, r4
 801e454:	68f8      	ldr	r0, [r7, #12]
 801e456:	f7f6 fce0 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e45a:	e0a9      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801e45c:	68bc      	ldr	r4, [r7, #8]
 801e45e:	f107 0314 	add.w	r3, r7, #20
 801e462:	4618      	mov	r0, r3
 801e464:	f000 ffd2 	bl	801f40c <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEmmEv>
 801e468:	4603      	mov	r3, r0
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	4618      	mov	r0, r3
 801e46e:	f000 ff30 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e472:	4603      	mov	r3, r0
 801e474:	683a      	ldr	r2, [r7, #0]
 801e476:	4619      	mov	r1, r3
 801e478:	4620      	mov	r0, r4
 801e47a:	f7f5 f83d 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e47e:	4603      	mov	r3, r0
 801e480:	2b00      	cmp	r3, #0
 801e482:	d01f      	beq.n	801e4c4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801e484:	697b      	ldr	r3, [r7, #20]
 801e486:	4618      	mov	r0, r3
 801e488:	f7e5 f8cc 	bl	8003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e48c:	4603      	mov	r3, r0
 801e48e:	2b00      	cmp	r3, #0
 801e490:	bf0c      	ite	eq
 801e492:	2301      	moveq	r3, #1
 801e494:	2300      	movne	r3, #0
 801e496:	b2db      	uxtb	r3, r3
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d00a      	beq.n	801e4b2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801e49c:	2300      	movs	r3, #0
 801e49e:	623b      	str	r3, [r7, #32]
 801e4a0:	f107 0214 	add.w	r2, r7, #20
 801e4a4:	f107 0320 	add.w	r3, r7, #32
 801e4a8:	4619      	mov	r1, r3
 801e4aa:	68f8      	ldr	r0, [r7, #12]
 801e4ac:	f7f6 fc0e 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e4b0:	e07e      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801e4b2:	f107 0218 	add.w	r2, r7, #24
 801e4b6:	f107 0318 	add.w	r3, r7, #24
 801e4ba:	4619      	mov	r1, r3
 801e4bc:	68f8      	ldr	r0, [r7, #12]
 801e4be:	f7f6 fcac 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e4c2:	e075      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	683a      	ldr	r2, [r7, #0]
 801e4c8:	68b9      	ldr	r1, [r7, #8]
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	f000 ff0d 	bl	801f2ea <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
 801e4d0:	e06e      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801e4d2:	68bc      	ldr	r4, [r7, #8]
 801e4d4:	69bb      	ldr	r3, [r7, #24]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f000 fefb 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e4dc:	4603      	mov	r3, r0
 801e4de:	683a      	ldr	r2, [r7, #0]
 801e4e0:	4619      	mov	r1, r3
 801e4e2:	4620      	mov	r0, r4
 801e4e4:	f7f5 f808 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e4e8:	4603      	mov	r3, r0
 801e4ea:	2b00      	cmp	r3, #0
 801e4ec:	d056      	beq.n	801e59c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x22a>
	  iterator __after = __pos;
 801e4ee:	69bb      	ldr	r3, [r7, #24]
 801e4f0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801e4f2:	69bc      	ldr	r4, [r7, #24]
 801e4f4:	68b8      	ldr	r0, [r7, #8]
 801e4f6:	f000 fee0 	bl	801f2ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_rightmostEv>
 801e4fa:	4603      	mov	r3, r0
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	429c      	cmp	r4, r3
 801e500:	bf0c      	ite	eq
 801e502:	2301      	moveq	r3, #1
 801e504:	2300      	movne	r3, #0
 801e506:	b2db      	uxtb	r3, r3
 801e508:	2b00      	cmp	r3, #0
 801e50a:	d00c      	beq.n	801e526 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801e50c:	2300      	movs	r3, #0
 801e50e:	627b      	str	r3, [r7, #36]	; 0x24
 801e510:	68b8      	ldr	r0, [r7, #8]
 801e512:	f000 fed2 	bl	801f2ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_rightmostEv>
 801e516:	4602      	mov	r2, r0
 801e518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e51c:	4619      	mov	r1, r3
 801e51e:	68f8      	ldr	r0, [r7, #12]
 801e520:	f7f6 fbd4 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e524:	e044      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801e526:	68bc      	ldr	r4, [r7, #8]
 801e528:	f107 0310 	add.w	r3, r7, #16
 801e52c:	4618      	mov	r0, r3
 801e52e:	f000 ff7e 	bl	801f42e <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEppEv>
 801e532:	4603      	mov	r3, r0
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	4618      	mov	r0, r3
 801e538:	f000 fecb 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e53c:	4603      	mov	r3, r0
 801e53e:	461a      	mov	r2, r3
 801e540:	6839      	ldr	r1, [r7, #0]
 801e542:	4620      	mov	r0, r4
 801e544:	f7f4 ffd8 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e548:	4603      	mov	r3, r0
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d01f      	beq.n	801e58e <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801e54e:	69bb      	ldr	r3, [r7, #24]
 801e550:	4618      	mov	r0, r3
 801e552:	f7e5 f867 	bl	8003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e556:	4603      	mov	r3, r0
 801e558:	2b00      	cmp	r3, #0
 801e55a:	bf0c      	ite	eq
 801e55c:	2301      	moveq	r3, #1
 801e55e:	2300      	movne	r3, #0
 801e560:	b2db      	uxtb	r3, r3
 801e562:	2b00      	cmp	r3, #0
 801e564:	d00a      	beq.n	801e57c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801e566:	2300      	movs	r3, #0
 801e568:	62bb      	str	r3, [r7, #40]	; 0x28
 801e56a:	f107 0218 	add.w	r2, r7, #24
 801e56e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e572:	4619      	mov	r1, r3
 801e574:	68f8      	ldr	r0, [r7, #12]
 801e576:	f7f6 fba9 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e57a:	e019      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801e57c:	f107 0210 	add.w	r2, r7, #16
 801e580:	f107 0310 	add.w	r3, r7, #16
 801e584:	4619      	mov	r1, r3
 801e586:	68f8      	ldr	r0, [r7, #12]
 801e588:	f7f6 fc47 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e58c:	e010      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e58e:	68fb      	ldr	r3, [r7, #12]
 801e590:	683a      	ldr	r2, [r7, #0]
 801e592:	68b9      	ldr	r1, [r7, #8]
 801e594:	4618      	mov	r0, r3
 801e596:	f000 fea8 	bl	801f2ea <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>
 801e59a:	e009      	b.n	801e5b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS8_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801e59c:	2300      	movs	r3, #0
 801e59e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e5a0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801e5a4:	f107 0318 	add.w	r3, r7, #24
 801e5a8:	4619      	mov	r1, r3
 801e5aa:	68f8      	ldr	r0, [r7, #12]
 801e5ac:	f7f6 fc70 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801e5b0:	68f8      	ldr	r0, [r7, #12]
 801e5b2:	3734      	adds	r7, #52	; 0x34
 801e5b4:	46bd      	mov	sp, r7
 801e5b6:	bd90      	pop	{r4, r7, pc}

0801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>:
      _S_key(_Const_Link_type __x)
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b084      	sub	sp, #16
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801e5c0:	6878      	ldr	r0, [r7, #4]
 801e5c2:	f000 ff45 	bl	801f450 <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	f107 030c 	add.w	r3, r7, #12
 801e5cc:	4611      	mov	r1, r2
 801e5ce:	4618      	mov	r0, r3
 801e5d0:	f000 ff4c 	bl	801f46c <_ZNKSt10_Select1stISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEclERKS8_>
 801e5d4:	4603      	mov	r3, r0
      }
 801e5d6:	4618      	mov	r0, r3
 801e5d8:	3710      	adds	r7, #16
 801e5da:	46bd      	mov	sp, r7
 801e5dc:	bd80      	pop	{r7, pc}

0801e5de <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e5de:	b5b0      	push	{r4, r5, r7, lr}
 801e5e0:	b086      	sub	sp, #24
 801e5e2:	af00      	add	r7, sp, #0
 801e5e4:	60f8      	str	r0, [r7, #12]
 801e5e6:	60b9      	str	r1, [r7, #8]
 801e5e8:	607a      	str	r2, [r7, #4]
 801e5ea:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801e5ec:	68bb      	ldr	r3, [r7, #8]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d117      	bne.n	801e622 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e5f2:	68f8      	ldr	r0, [r7, #12]
 801e5f4:	f000 fdc9 	bl	801f18a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_M_endEv>
 801e5f8:	4602      	mov	r2, r0
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	4293      	cmp	r3, r2
 801e5fe:	d010      	beq.n	801e622 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801e600:	68fc      	ldr	r4, [r7, #12]
 801e602:	6838      	ldr	r0, [r7, #0]
 801e604:	f7ff ffd8 	bl	801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 801e608:	4605      	mov	r5, r0
 801e60a:	6878      	ldr	r0, [r7, #4]
 801e60c:	f000 fe61 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e610:	4603      	mov	r3, r0
 801e612:	461a      	mov	r2, r3
 801e614:	4629      	mov	r1, r5
 801e616:	4620      	mov	r0, r4
 801e618:	f7f4 ff6e 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e61c:	4603      	mov	r3, r0
 801e61e:	2b00      	cmp	r3, #0
 801e620:	d001      	beq.n	801e626 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x48>
 801e622:	2301      	movs	r3, #1
 801e624:	e000      	b.n	801e628 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSG_PSt13_Rb_tree_nodeIS8_E+0x4a>
 801e626:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e628:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801e62a:	68fb      	ldr	r3, [r7, #12]
 801e62c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801e62e:	7df8      	ldrb	r0, [r7, #23]
 801e630:	687a      	ldr	r2, [r7, #4]
 801e632:	6839      	ldr	r1, [r7, #0]
 801e634:	f007 fda1 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801e638:	68fb      	ldr	r3, [r7, #12]
 801e63a:	695b      	ldr	r3, [r3, #20]
 801e63c:	1c5a      	adds	r2, r3, #1
 801e63e:	68fb      	ldr	r3, [r7, #12]
 801e640:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801e642:	f107 0310 	add.w	r3, r7, #16
 801e646:	6839      	ldr	r1, [r7, #0]
 801e648:	4618      	mov	r0, r3
 801e64a:	f000 f805 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801e64e:	693b      	ldr	r3, [r7, #16]
    }
 801e650:	4618      	mov	r0, r3
 801e652:	3718      	adds	r7, #24
 801e654:	46bd      	mov	sp, r7
 801e656:	bdb0      	pop	{r4, r5, r7, pc}

0801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801e658:	b480      	push	{r7}
 801e65a:	b083      	sub	sp, #12
 801e65c:	af00      	add	r7, sp, #0
 801e65e:	6078      	str	r0, [r7, #4]
 801e660:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	683a      	ldr	r2, [r7, #0]
 801e666:	601a      	str	r2, [r3, #0]
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	4618      	mov	r0, r3
 801e66c:	370c      	adds	r7, #12
 801e66e:	46bd      	mov	sp, r7
 801e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e674:	4770      	bx	lr

0801e676 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801e676:	b590      	push	{r4, r7, lr}
 801e678:	b083      	sub	sp, #12
 801e67a:	af00      	add	r7, sp, #0
 801e67c:	6078      	str	r0, [r7, #4]
 801e67e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801e680:	6878      	ldr	r0, [r7, #4]
 801e682:	f7e3 fd32 	bl	80020ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_beginEv>
 801e686:	4604      	mov	r4, r0
 801e688:	6878      	ldr	r0, [r7, #4]
 801e68a:	f000 fefb 	bl	801f484 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_M_endEv>
 801e68e:	4602      	mov	r2, r0
 801e690:	683b      	ldr	r3, [r7, #0]
 801e692:	4621      	mov	r1, r4
 801e694:	6878      	ldr	r0, [r7, #4]
 801e696:	f000 ff01 	bl	801f49c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_>
 801e69a:	4603      	mov	r3, r0
 801e69c:	4618      	mov	r0, r3
 801e69e:	370c      	adds	r7, #12
 801e6a0:	46bd      	mov	sp, r7
 801e6a2:	bd90      	pop	{r4, r7, pc}

0801e6a4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801e6a4:	b580      	push	{r7, lr}
 801e6a6:	b084      	sub	sp, #16
 801e6a8:	af00      	add	r7, sp, #0
 801e6aa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	1d1a      	adds	r2, r3, #4
 801e6b0:	f107 030c 	add.w	r3, r7, #12
 801e6b4:	4611      	mov	r1, r2
 801e6b6:	4618      	mov	r0, r3
 801e6b8:	f000 f9a6 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3710      	adds	r7, #16
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	bd80      	pop	{r7, pc}

0801e6c6 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8key_compEv>:
      key_comp() const
 801e6c6:	b480      	push	{r7}
 801e6c8:	b083      	sub	sp, #12
 801e6ca:	af00      	add	r7, sp, #0
 801e6cc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801e6ce:	bf00      	nop
 801e6d0:	4618      	mov	r0, r3
 801e6d2:	370c      	adds	r7, #12
 801e6d4:	46bd      	mov	sp, r7
 801e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6da:	4770      	bx	lr

0801e6dc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEEPSt13_Rb_tree_nodeISB_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801e6dc:	b5b0      	push	{r4, r5, r7, lr}
 801e6de:	b088      	sub	sp, #32
 801e6e0:	af02      	add	r7, sp, #8
 801e6e2:	60f8      	str	r0, [r7, #12]
 801e6e4:	60b9      	str	r1, [r7, #8]
 801e6e6:	607a      	str	r2, [r7, #4]
 801e6e8:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801e6ea:	68f8      	ldr	r0, [r7, #12]
 801e6ec:	f000 ff07 	bl	801f4fe <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_get_nodeEv>
 801e6f0:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801e6f2:	68b8      	ldr	r0, [r7, #8]
 801e6f4:	f7f5 fbef 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801e6f8:	4604      	mov	r4, r0
 801e6fa:	6878      	ldr	r0, [r7, #4]
 801e6fc:	f7f5 fbf6 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801e700:	4605      	mov	r5, r0
 801e702:	6838      	ldr	r0, [r7, #0]
 801e704:	f7f5 fbfd 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801e708:	4603      	mov	r3, r0
 801e70a:	9300      	str	r3, [sp, #0]
 801e70c:	462b      	mov	r3, r5
 801e70e:	4622      	mov	r2, r4
 801e710:	6979      	ldr	r1, [r7, #20]
 801e712:	68f8      	ldr	r0, [r7, #12]
 801e714:	f000 ff04 	bl	801f520 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>
	  return __tmp;
 801e718:	697b      	ldr	r3, [r7, #20]
	}
 801e71a:	4618      	mov	r0, r3
 801e71c:	3718      	adds	r7, #24
 801e71e:	46bd      	mov	sp, r7
 801e720:	bdb0      	pop	{r4, r5, r7, pc}

0801e722 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e722:	b590      	push	{r4, r7, lr}
 801e724:	b08d      	sub	sp, #52	; 0x34
 801e726:	af00      	add	r7, sp, #0
 801e728:	60f8      	str	r0, [r7, #12]
 801e72a:	60b9      	str	r1, [r7, #8]
 801e72c:	607a      	str	r2, [r7, #4]
 801e72e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801e730:	1d3b      	adds	r3, r7, #4
 801e732:	4618      	mov	r0, r3
 801e734:	f000 ff21 	bl	801f57a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE13_M_const_castEv>
 801e738:	4603      	mov	r3, r0
 801e73a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801e73c:	69bc      	ldr	r4, [r7, #24]
 801e73e:	68b8      	ldr	r0, [r7, #8]
 801e740:	f000 fea0 	bl	801f484 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_M_endEv>
 801e744:	4603      	mov	r3, r0
 801e746:	429c      	cmp	r4, r3
 801e748:	bf0c      	ite	eq
 801e74a:	2301      	moveq	r3, #1
 801e74c:	2300      	movne	r3, #0
 801e74e:	b2db      	uxtb	r3, r3
 801e750:	2b00      	cmp	r3, #0
 801e752:	d030      	beq.n	801e7b6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x94>
	  if (size() > 0
 801e754:	68b8      	ldr	r0, [r7, #8]
 801e756:	f000 ff21 	bl	801f59c <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4sizeEv>
 801e75a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d013      	beq.n	801e788 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x66>
 801e760:	68bc      	ldr	r4, [r7, #8]
 801e762:	68b8      	ldr	r0, [r7, #8]
 801e764:	f000 ff26 	bl	801f5b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_rightmostEv>
 801e768:	4603      	mov	r3, r0
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	4618      	mov	r0, r3
 801e76e:	f000 ff2d 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e772:	4603      	mov	r3, r0
 801e774:	683a      	ldr	r2, [r7, #0]
 801e776:	4619      	mov	r1, r3
 801e778:	4620      	mov	r0, r4
 801e77a:	f7f4 febd 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e77e:	4603      	mov	r3, r0
 801e780:	2b00      	cmp	r3, #0
 801e782:	d001      	beq.n	801e788 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x66>
 801e784:	2301      	movs	r3, #1
 801e786:	e000      	b.n	801e78a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x68>
 801e788:	2300      	movs	r3, #0
	  if (size() > 0
 801e78a:	2b00      	cmp	r3, #0
 801e78c:	d00c      	beq.n	801e7a8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801e78e:	2300      	movs	r3, #0
 801e790:	61fb      	str	r3, [r7, #28]
 801e792:	68b8      	ldr	r0, [r7, #8]
 801e794:	f000 ff0e 	bl	801f5b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_rightmostEv>
 801e798:	4602      	mov	r2, r0
 801e79a:	f107 031c 	add.w	r3, r7, #28
 801e79e:	4619      	mov	r1, r3
 801e7a0:	68f8      	ldr	r0, [r7, #12]
 801e7a2:	f7f6 fa93 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e7a6:	e0db      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	683a      	ldr	r2, [r7, #0]
 801e7ac:	68b9      	ldr	r1, [r7, #8]
 801e7ae:	4618      	mov	r0, r3
 801e7b0:	f000 ff18 	bl	801f5e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_>
 801e7b4:	e0d4      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 801e7b6:	68bc      	ldr	r4, [r7, #8]
 801e7b8:	69bb      	ldr	r3, [r7, #24]
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	f000 ff06 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	461a      	mov	r2, r3
 801e7c4:	6839      	ldr	r1, [r7, #0]
 801e7c6:	4620      	mov	r0, r4
 801e7c8:	f7f4 fe96 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e7cc:	4603      	mov	r3, r0
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d057      	beq.n	801e882 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x160>
	  iterator __before = __pos;
 801e7d2:	69bb      	ldr	r3, [r7, #24]
 801e7d4:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801e7d6:	69bc      	ldr	r4, [r7, #24]
 801e7d8:	68b8      	ldr	r0, [r7, #8]
 801e7da:	f000 ff88 	bl	801f6ee <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_leftmostEv>
 801e7de:	4603      	mov	r3, r0
 801e7e0:	681b      	ldr	r3, [r3, #0]
 801e7e2:	429c      	cmp	r4, r3
 801e7e4:	bf0c      	ite	eq
 801e7e6:	2301      	moveq	r3, #1
 801e7e8:	2300      	movne	r3, #0
 801e7ea:	b2db      	uxtb	r3, r3
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d00d      	beq.n	801e80c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801e7f0:	68b8      	ldr	r0, [r7, #8]
 801e7f2:	f000 ff7c 	bl	801f6ee <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_leftmostEv>
 801e7f6:	4604      	mov	r4, r0
 801e7f8:	68b8      	ldr	r0, [r7, #8]
 801e7fa:	f000 ff78 	bl	801f6ee <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_leftmostEv>
 801e7fe:	4603      	mov	r3, r0
 801e800:	461a      	mov	r2, r3
 801e802:	4621      	mov	r1, r4
 801e804:	68f8      	ldr	r0, [r7, #12]
 801e806:	f7f6 fb08 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e80a:	e0a9      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801e80c:	68bc      	ldr	r4, [r7, #8]
 801e80e:	f107 0314 	add.w	r3, r7, #20
 801e812:	4618      	mov	r0, r3
 801e814:	f000 ff77 	bl	801f706 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEmmEv>
 801e818:	4603      	mov	r3, r0
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	4618      	mov	r0, r3
 801e81e:	f000 fed5 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e822:	4603      	mov	r3, r0
 801e824:	683a      	ldr	r2, [r7, #0]
 801e826:	4619      	mov	r1, r3
 801e828:	4620      	mov	r0, r4
 801e82a:	f7f4 fe65 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e82e:	4603      	mov	r3, r0
 801e830:	2b00      	cmp	r3, #0
 801e832:	d01f      	beq.n	801e874 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801e834:	697b      	ldr	r3, [r7, #20]
 801e836:	4618      	mov	r0, r3
 801e838:	f7e3 ff1f 	bl	800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e83c:	4603      	mov	r3, r0
 801e83e:	2b00      	cmp	r3, #0
 801e840:	bf0c      	ite	eq
 801e842:	2301      	moveq	r3, #1
 801e844:	2300      	movne	r3, #0
 801e846:	b2db      	uxtb	r3, r3
 801e848:	2b00      	cmp	r3, #0
 801e84a:	d00a      	beq.n	801e862 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801e84c:	2300      	movs	r3, #0
 801e84e:	623b      	str	r3, [r7, #32]
 801e850:	f107 0214 	add.w	r2, r7, #20
 801e854:	f107 0320 	add.w	r3, r7, #32
 801e858:	4619      	mov	r1, r3
 801e85a:	68f8      	ldr	r0, [r7, #12]
 801e85c:	f7f6 fa36 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e860:	e07e      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801e862:	f107 0218 	add.w	r2, r7, #24
 801e866:	f107 0318 	add.w	r3, r7, #24
 801e86a:	4619      	mov	r1, r3
 801e86c:	68f8      	ldr	r0, [r7, #12]
 801e86e:	f7f6 fad4 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e872:	e075      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	683a      	ldr	r2, [r7, #0]
 801e878:	68b9      	ldr	r1, [r7, #8]
 801e87a:	4618      	mov	r0, r3
 801e87c:	f000 feb2 	bl	801f5e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_>
 801e880:	e06e      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801e882:	68bc      	ldr	r4, [r7, #8]
 801e884:	69bb      	ldr	r3, [r7, #24]
 801e886:	4618      	mov	r0, r3
 801e888:	f000 fea0 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e88c:	4603      	mov	r3, r0
 801e88e:	683a      	ldr	r2, [r7, #0]
 801e890:	4619      	mov	r1, r3
 801e892:	4620      	mov	r0, r4
 801e894:	f7f4 fe30 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e898:	4603      	mov	r3, r0
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d056      	beq.n	801e94c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x22a>
	  iterator __after = __pos;
 801e89e:	69bb      	ldr	r3, [r7, #24]
 801e8a0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801e8a2:	69bc      	ldr	r4, [r7, #24]
 801e8a4:	68b8      	ldr	r0, [r7, #8]
 801e8a6:	f000 fe85 	bl	801f5b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_rightmostEv>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	429c      	cmp	r4, r3
 801e8b0:	bf0c      	ite	eq
 801e8b2:	2301      	moveq	r3, #1
 801e8b4:	2300      	movne	r3, #0
 801e8b6:	b2db      	uxtb	r3, r3
 801e8b8:	2b00      	cmp	r3, #0
 801e8ba:	d00c      	beq.n	801e8d6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 801e8bc:	2300      	movs	r3, #0
 801e8be:	627b      	str	r3, [r7, #36]	; 0x24
 801e8c0:	68b8      	ldr	r0, [r7, #8]
 801e8c2:	f000 fe77 	bl	801f5b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_rightmostEv>
 801e8c6:	4602      	mov	r2, r0
 801e8c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801e8cc:	4619      	mov	r1, r3
 801e8ce:	68f8      	ldr	r0, [r7, #12]
 801e8d0:	f7f6 f9fc 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e8d4:	e044      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801e8d6:	68bc      	ldr	r4, [r7, #8]
 801e8d8:	f107 0310 	add.w	r3, r7, #16
 801e8dc:	4618      	mov	r0, r3
 801e8de:	f000 ff23 	bl	801f728 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEppEv>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	4618      	mov	r0, r3
 801e8e8:	f000 fe70 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e8ec:	4603      	mov	r3, r0
 801e8ee:	461a      	mov	r2, r3
 801e8f0:	6839      	ldr	r1, [r7, #0]
 801e8f2:	4620      	mov	r0, r4
 801e8f4:	f7f4 fe00 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d01f      	beq.n	801e93e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801e8fe:	69bb      	ldr	r3, [r7, #24]
 801e900:	4618      	mov	r0, r3
 801e902:	f7e3 feba 	bl	800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 801e906:	4603      	mov	r3, r0
 801e908:	2b00      	cmp	r3, #0
 801e90a:	bf0c      	ite	eq
 801e90c:	2301      	moveq	r3, #1
 801e90e:	2300      	movne	r3, #0
 801e910:	b2db      	uxtb	r3, r3
 801e912:	2b00      	cmp	r3, #0
 801e914:	d00a      	beq.n	801e92c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801e916:	2300      	movs	r3, #0
 801e918:	62bb      	str	r3, [r7, #40]	; 0x28
 801e91a:	f107 0218 	add.w	r2, r7, #24
 801e91e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801e922:	4619      	mov	r1, r3
 801e924:	68f8      	ldr	r0, [r7, #12]
 801e926:	f7f6 f9d1 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801e92a:	e019      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801e92c:	f107 0210 	add.w	r2, r7, #16
 801e930:	f107 0310 	add.w	r3, r7, #16
 801e934:	4619      	mov	r1, r3
 801e936:	68f8      	ldr	r0, [r7, #12]
 801e938:	f7f6 fa6f 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801e93c:	e010      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	683a      	ldr	r2, [r7, #0]
 801e942:	68b9      	ldr	r1, [r7, #8]
 801e944:	4618      	mov	r0, r3
 801e946:	f000 fe4d 	bl	801f5e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_>
 801e94a:	e009      	b.n	801e960 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorISB_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801e94c:	2300      	movs	r3, #0
 801e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e950:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801e954:	f107 0318 	add.w	r3, r7, #24
 801e958:	4619      	mov	r1, r3
 801e95a:	68f8      	ldr	r0, [r7, #12]
 801e95c:	f7f6 fa98 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801e960:	68f8      	ldr	r0, [r7, #12]
 801e962:	3734      	adds	r7, #52	; 0x34
 801e964:	46bd      	mov	sp, r7
 801e966:	bd90      	pop	{r4, r7, pc}

0801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>:
      _S_key(_Const_Link_type __x)
 801e968:	b580      	push	{r7, lr}
 801e96a:	b084      	sub	sp, #16
 801e96c:	af00      	add	r7, sp, #0
 801e96e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801e970:	6878      	ldr	r0, [r7, #4]
 801e972:	f000 feea 	bl	801f74a <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>
 801e976:	4602      	mov	r2, r0
 801e978:	f107 030c 	add.w	r3, r7, #12
 801e97c:	4611      	mov	r1, r2
 801e97e:	4618      	mov	r0, r3
 801e980:	f000 fef1 	bl	801f766 <_ZNKSt10_Select1stISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEclERKSB_>
 801e984:	4603      	mov	r3, r0
      }
 801e986:	4618      	mov	r0, r3
 801e988:	3710      	adds	r7, #16
 801e98a:	46bd      	mov	sp, r7
 801e98c:	bd80      	pop	{r7, pc}

0801e98e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801e98e:	b5b0      	push	{r4, r5, r7, lr}
 801e990:	b086      	sub	sp, #24
 801e992:	af00      	add	r7, sp, #0
 801e994:	60f8      	str	r0, [r7, #12]
 801e996:	60b9      	str	r1, [r7, #8]
 801e998:	607a      	str	r2, [r7, #4]
 801e99a:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801e99c:	68bb      	ldr	r3, [r7, #8]
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	d117      	bne.n	801e9d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e9a2:	68f8      	ldr	r0, [r7, #12]
 801e9a4:	f000 fd6e 	bl	801f484 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_M_endEv>
 801e9a8:	4602      	mov	r2, r0
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	4293      	cmp	r3, r2
 801e9ae:	d010      	beq.n	801e9d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 801e9b0:	68fc      	ldr	r4, [r7, #12]
 801e9b2:	6838      	ldr	r0, [r7, #0]
 801e9b4:	f7ff ffd8 	bl	801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 801e9b8:	4605      	mov	r5, r0
 801e9ba:	6878      	ldr	r0, [r7, #4]
 801e9bc:	f000 fe06 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	461a      	mov	r2, r3
 801e9c4:	4629      	mov	r1, r5
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	f7f4 fd96 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801e9cc:	4603      	mov	r3, r0
 801e9ce:	2b00      	cmp	r3, #0
 801e9d0:	d001      	beq.n	801e9d6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E+0x48>
 801e9d2:	2301      	movs	r3, #1
 801e9d4:	e000      	b.n	801e9d8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSH_PSt13_Rb_tree_nodeISB_E+0x4a>
 801e9d6:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801e9d8:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801e9da:	68fb      	ldr	r3, [r7, #12]
 801e9dc:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801e9de:	7df8      	ldrb	r0, [r7, #23]
 801e9e0:	687a      	ldr	r2, [r7, #4]
 801e9e2:	6839      	ldr	r1, [r7, #0]
 801e9e4:	f007 fbc9 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801e9e8:	68fb      	ldr	r3, [r7, #12]
 801e9ea:	695b      	ldr	r3, [r3, #20]
 801e9ec:	1c5a      	adds	r2, r3, #1
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801e9f2:	f107 0310 	add.w	r3, r7, #16
 801e9f6:	6839      	ldr	r1, [r7, #0]
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	f000 f805 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801e9fe:	693b      	ldr	r3, [r7, #16]
    }
 801ea00:	4618      	mov	r0, r3
 801ea02:	3718      	adds	r7, #24
 801ea04:	46bd      	mov	sp, r7
 801ea06:	bdb0      	pop	{r4, r5, r7, pc}

0801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801ea08:	b480      	push	{r7}
 801ea0a:	b083      	sub	sp, #12
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	683a      	ldr	r2, [r7, #0]
 801ea16:	601a      	str	r2, [r3, #0]
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	370c      	adds	r7, #12
 801ea1e:	46bd      	mov	sp, r7
 801ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea24:	4770      	bx	lr

0801ea26 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt8functionIFbvEEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801ea26:	b480      	push	{r7}
 801ea28:	b083      	sub	sp, #12
 801ea2a:	af00      	add	r7, sp, #0
 801ea2c:	6078      	str	r0, [r7, #4]
 801ea2e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	683a      	ldr	r2, [r7, #0]
 801ea34:	601a      	str	r2, [r3, #0]
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	4618      	mov	r0, r3
 801ea3a:	370c      	adds	r7, #12
 801ea3c:	46bd      	mov	sp, r7
 801ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea42:	4770      	bx	lr

0801ea44 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801ea44:	b480      	push	{r7}
 801ea46:	b083      	sub	sp, #12
 801ea48:	af00      	add	r7, sp, #0
 801ea4a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	3304      	adds	r3, #4
 801ea50:	4618      	mov	r0, r3
 801ea52:	370c      	adds	r7, #12
 801ea54:	46bd      	mov	sp, r7
 801ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea5a:	4770      	bx	lr

0801ea5c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801ea5c:	b590      	push	{r4, r7, lr}
 801ea5e:	b087      	sub	sp, #28
 801ea60:	af00      	add	r7, sp, #0
 801ea62:	60f8      	str	r0, [r7, #12]
 801ea64:	60b9      	str	r1, [r7, #8]
 801ea66:	607a      	str	r2, [r7, #4]
 801ea68:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801ea6a:	68bb      	ldr	r3, [r7, #8]
 801ea6c:	2b00      	cmp	r3, #0
 801ea6e:	d01b      	beq.n	801eaa8 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801ea70:	68fc      	ldr	r4, [r7, #12]
 801ea72:	68b8      	ldr	r0, [r7, #8]
 801ea74:	f7ff f8a7 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ea78:	4603      	mov	r3, r0
 801ea7a:	683a      	ldr	r2, [r7, #0]
 801ea7c:	4619      	mov	r1, r3
 801ea7e:	4620      	mov	r0, r4
 801ea80:	f7f4 fd3a 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ea84:	4603      	mov	r3, r0
 801ea86:	f083 0301 	eor.w	r3, r3, #1
 801ea8a:	b2db      	uxtb	r3, r3
 801ea8c:	2b00      	cmp	r3, #0
 801ea8e:	d006      	beq.n	801ea9e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801ea90:	68bb      	ldr	r3, [r7, #8]
 801ea92:	607b      	str	r3, [r7, #4]
 801ea94:	68b8      	ldr	r0, [r7, #8]
 801ea96:	f7e3 fdc8 	bl	800262a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ea9a:	60b8      	str	r0, [r7, #8]
 801ea9c:	e7e5      	b.n	801ea6a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801ea9e:	68b8      	ldr	r0, [r7, #8]
 801eaa0:	f7e3 fdb7 	bl	8002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801eaa4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801eaa6:	e7e0      	b.n	801ea6a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801eaa8:	f107 0314 	add.w	r3, r7, #20
 801eaac:	6879      	ldr	r1, [r7, #4]
 801eaae:	4618      	mov	r0, r3
 801eab0:	f7ff f8d9 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801eab4:	697b      	ldr	r3, [r7, #20]
    }
 801eab6:	4618      	mov	r0, r3
 801eab8:	371c      	adds	r7, #28
 801eaba:	46bd      	mov	sp, r7
 801eabc:	bd90      	pop	{r4, r7, pc}

0801eabe <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 801eabe:	b580      	push	{r7, lr}
 801eac0:	b082      	sub	sp, #8
 801eac2:	af00      	add	r7, sp, #0
 801eac4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801eac6:	6878      	ldr	r0, [r7, #4]
 801eac8:	f7e3 ff4a 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801eacc:	4603      	mov	r3, r0
 801eace:	2101      	movs	r1, #1
 801ead0:	4618      	mov	r0, r3
 801ead2:	f000 fe54 	bl	801f77e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE8allocateERS6_j>
 801ead6:	4603      	mov	r3, r0
 801ead8:	4618      	mov	r0, r3
 801eada:	3708      	adds	r7, #8
 801eadc:	46bd      	mov	sp, r7
 801eade:	bd80      	pop	{r7, pc}

0801eae0 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eae4:	b086      	sub	sp, #24
 801eae6:	af02      	add	r7, sp, #8
 801eae8:	60f8      	str	r0, [r7, #12]
 801eaea:	60b9      	str	r1, [r7, #8]
 801eaec:	607a      	str	r2, [r7, #4]
 801eaee:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801eaf0:	68bb      	ldr	r3, [r7, #8]
 801eaf2:	4619      	mov	r1, r3
 801eaf4:	2020      	movs	r0, #32
 801eaf6:	f7e2 fcaf 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801eafa:	68f8      	ldr	r0, [r7, #12]
 801eafc:	f7e3 ff30 	bl	8002960 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE21_M_get_Node_allocatorEv>
 801eb00:	4604      	mov	r4, r0
 801eb02:	68b8      	ldr	r0, [r7, #8]
 801eb04:	f7e4 fae9 	bl	80030da <_ZNSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>
 801eb08:	4605      	mov	r5, r0
 801eb0a:	6878      	ldr	r0, [r7, #4]
 801eb0c:	f7f5 f9e3 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801eb10:	4606      	mov	r6, r0
 801eb12:	6838      	ldr	r0, [r7, #0]
 801eb14:	f7f5 f9ea 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801eb18:	4680      	mov	r8, r0
 801eb1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801eb1c:	f7f5 f9f1 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801eb20:	4603      	mov	r3, r0
 801eb22:	9300      	str	r3, [sp, #0]
 801eb24:	4643      	mov	r3, r8
 801eb26:	4632      	mov	r2, r6
 801eb28:	4629      	mov	r1, r5
 801eb2a:	4620      	mov	r0, r4
 801eb2c:	f000 fe71 	bl	801f812 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 801eb30:	bf00      	nop
 801eb32:	3710      	adds	r7, #16
 801eb34:	46bd      	mov	sp, r7
 801eb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801eb3a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKh5StateEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801eb3a:	b580      	push	{r7, lr}
 801eb3c:	b084      	sub	sp, #16
 801eb3e:	af00      	add	r7, sp, #0
 801eb40:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681a      	ldr	r2, [r3, #0]
 801eb46:	f107 030c 	add.w	r3, r7, #12
 801eb4a:	4611      	mov	r1, r2
 801eb4c:	4618      	mov	r0, r3
 801eb4e:	f7ff f88a 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	4618      	mov	r0, r3
 801eb56:	3710      	adds	r7, #16
 801eb58:	46bd      	mov	sp, r7
 801eb5a:	bd80      	pop	{r7, pc}

0801eb5c <_ZNKSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801eb5c:	b480      	push	{r7}
 801eb5e:	b083      	sub	sp, #12
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	695b      	ldr	r3, [r3, #20]
 801eb68:	4618      	mov	r0, r3
 801eb6a:	370c      	adds	r7, #12
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb72:	4770      	bx	lr

0801eb74 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801eb74:	b480      	push	{r7}
 801eb76:	b083      	sub	sp, #12
 801eb78:	af00      	add	r7, sp, #0
 801eb7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	3310      	adds	r3, #16
 801eb80:	4618      	mov	r0, r3
 801eb82:	370c      	adds	r7, #12
 801eb84:	46bd      	mov	sp, r7
 801eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb8a:	4770      	bx	lr

0801eb8c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801eb8c:	b590      	push	{r4, r7, lr}
 801eb8e:	b08b      	sub	sp, #44	; 0x2c
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	60f8      	str	r0, [r7, #12]
 801eb94:	60b9      	str	r1, [r7, #8]
 801eb96:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801eb98:	68b8      	ldr	r0, [r7, #8]
 801eb9a:	f7e3 fa6f 	bl	800207c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_M_beginEv>
 801eb9e:	4603      	mov	r3, r0
 801eba0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801eba2:	68b8      	ldr	r0, [r7, #8]
 801eba4:	f7ff ff4e 	bl	801ea44 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_M_endEv>
 801eba8:	4603      	mov	r3, r0
 801ebaa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801ebac:	2301      	movs	r3, #1
 801ebae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801ebb2:	69bb      	ldr	r3, [r7, #24]
 801ebb4:	2b00      	cmp	r3, #0
 801ebb6:	d020      	beq.n	801ebfa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801ebb8:	69bb      	ldr	r3, [r7, #24]
 801ebba:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801ebbc:	68bc      	ldr	r4, [r7, #8]
 801ebbe:	69bb      	ldr	r3, [r7, #24]
 801ebc0:	4618      	mov	r0, r3
 801ebc2:	f7ff f800 	bl	801dbc6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 801ebc6:	4603      	mov	r3, r0
 801ebc8:	461a      	mov	r2, r3
 801ebca:	6879      	ldr	r1, [r7, #4]
 801ebcc:	4620      	mov	r0, r4
 801ebce:	f7f4 fc93 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ebd2:	4603      	mov	r3, r0
 801ebd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801ebd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d005      	beq.n	801ebec <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x60>
 801ebe0:	69bb      	ldr	r3, [r7, #24]
 801ebe2:	4618      	mov	r0, r3
 801ebe4:	f7e3 fd21 	bl	800262a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	e004      	b.n	801ebf6 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x6a>
 801ebec:	69bb      	ldr	r3, [r7, #24]
 801ebee:	4618      	mov	r0, r3
 801ebf0:	f7e3 fd0f 	bl	8002612 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801ebf4:	4603      	mov	r3, r0
 801ebf6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801ebf8:	e7db      	b.n	801ebb2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801ebfa:	697a      	ldr	r2, [r7, #20]
 801ebfc:	f107 0310 	add.w	r3, r7, #16
 801ec00:	4611      	mov	r1, r2
 801ec02:	4618      	mov	r0, r3
 801ec04:	f7ff f82f 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801ec08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d01d      	beq.n	801ec4c <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801ec10:	68b8      	ldr	r0, [r7, #8]
 801ec12:	f000 fe1a 	bl	801f84a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>
 801ec16:	4603      	mov	r3, r0
 801ec18:	61fb      	str	r3, [r7, #28]
 801ec1a:	f107 021c 	add.w	r2, r7, #28
 801ec1e:	f107 0310 	add.w	r3, r7, #16
 801ec22:	4611      	mov	r1, r2
 801ec24:	4618      	mov	r0, r3
 801ec26:	f7fe fa7f 	bl	801d128 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKh5StateEES6_>
 801ec2a:	4603      	mov	r3, r0
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d008      	beq.n	801ec42 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801ec30:	f107 0214 	add.w	r2, r7, #20
 801ec34:	f107 0318 	add.w	r3, r7, #24
 801ec38:	4619      	mov	r1, r3
 801ec3a:	68f8      	ldr	r0, [r7, #12]
 801ec3c:	f000 fe16 	bl	801f86c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh5StateEERS1_Lb1EEEOT_OT0_>
 801ec40:	e025      	b.n	801ec8e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801ec42:	f107 0310 	add.w	r3, r7, #16
 801ec46:	4618      	mov	r0, r3
 801ec48:	f000 f831 	bl	801ecae <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801ec4c:	68bc      	ldr	r4, [r7, #8]
 801ec4e:	693b      	ldr	r3, [r7, #16]
 801ec50:	4618      	mov	r0, r3
 801ec52:	f7ff f8aa 	bl	801ddaa <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801ec56:	4603      	mov	r3, r0
 801ec58:	687a      	ldr	r2, [r7, #4]
 801ec5a:	4619      	mov	r1, r3
 801ec5c:	4620      	mov	r0, r4
 801ec5e:	f7f4 fc4b 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801ec62:	4603      	mov	r3, r0
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d008      	beq.n	801ec7a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801ec68:	f107 0214 	add.w	r2, r7, #20
 801ec6c:	f107 0318 	add.w	r3, r7, #24
 801ec70:	4619      	mov	r1, r3
 801ec72:	68f8      	ldr	r0, [r7, #12]
 801ec74:	f000 fdfa 	bl	801f86c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh5StateEERS1_Lb1EEEOT_OT0_>
 801ec78:	e009      	b.n	801ec8e <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	623b      	str	r3, [r7, #32]
 801ec7e:	f107 0220 	add.w	r2, r7, #32
 801ec82:	f107 0310 	add.w	r3, r7, #16
 801ec86:	4619      	mov	r1, r3
 801ec88:	68f8      	ldr	r0, [r7, #12]
 801ec8a:	f7f6 f901 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801ec8e:	68f8      	ldr	r0, [r7, #12]
 801ec90:	372c      	adds	r7, #44	; 0x2c
 801ec92:	46bd      	mov	sp, r7
 801ec94:	bd90      	pop	{r4, r7, pc}

0801ec96 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801ec96:	b480      	push	{r7}
 801ec98:	b083      	sub	sp, #12
 801ec9a:	af00      	add	r7, sp, #0
 801ec9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	330c      	adds	r3, #12
 801eca2:	4618      	mov	r0, r3
 801eca4:	370c      	adds	r7, #12
 801eca6:	46bd      	mov	sp, r7
 801eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecac:	4770      	bx	lr

0801ecae <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801ecae:	b580      	push	{r7, lr}
 801ecb0:	b082      	sub	sp, #8
 801ecb2:	af00      	add	r7, sp, #0
 801ecb4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	4618      	mov	r0, r3
 801ecbc:	f007 fa5b 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801ecc0:	4602      	mov	r2, r0
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	601a      	str	r2, [r3, #0]
	return *this;
 801ecc6:	687b      	ldr	r3, [r7, #4]
      }
 801ecc8:	4618      	mov	r0, r3
 801ecca:	3708      	adds	r7, #8
 801eccc:	46bd      	mov	sp, r7
 801ecce:	bd80      	pop	{r7, pc}

0801ecd0 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801ecd0:	b580      	push	{r7, lr}
 801ecd2:	b082      	sub	sp, #8
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	4618      	mov	r0, r3
 801ecde:	f007 fa48 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801ece2:	4602      	mov	r2, r0
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	601a      	str	r2, [r3, #0]
	return *this;
 801ece8:	687b      	ldr	r3, [r7, #4]
      }
 801ecea:	4618      	mov	r0, r3
 801ecec:	3708      	adds	r7, #8
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	bd80      	pop	{r7, pc}

0801ecf2 <_ZNKSt13_Rb_tree_nodeISt4pairIKh5StateEE9_M_valptrEv>:
      _M_valptr() const
 801ecf2:	b580      	push	{r7, lr}
 801ecf4:	b082      	sub	sp, #8
 801ecf6:	af00      	add	r7, sp, #0
 801ecf8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	3310      	adds	r3, #16
 801ecfe:	4618      	mov	r0, r3
 801ed00:	f000 fdcd 	bl	801f89e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE6_M_ptrEv>
 801ed04:	4603      	mov	r3, r0
 801ed06:	4618      	mov	r0, r3
 801ed08:	3708      	adds	r7, #8
 801ed0a:	46bd      	mov	sp, r7
 801ed0c:	bd80      	pop	{r7, pc}

0801ed0e <_ZNKSt10_Select1stISt4pairIKh5StateEEclERKS3_>:
      operator()(const _Pair& __x) const
 801ed0e:	b480      	push	{r7}
 801ed10:	b083      	sub	sp, #12
 801ed12:	af00      	add	r7, sp, #0
 801ed14:	6078      	str	r0, [r7, #4]
 801ed16:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801ed18:	683b      	ldr	r3, [r7, #0]
 801ed1a:	4618      	mov	r0, r3
 801ed1c:	370c      	adds	r7, #12
 801ed1e:	46bd      	mov	sp, r7
 801ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed24:	4770      	bx	lr

0801ed26 <_ZNKSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801ed26:	b480      	push	{r7}
 801ed28:	b083      	sub	sp, #12
 801ed2a:	af00      	add	r7, sp, #0
 801ed2c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	4618      	mov	r0, r3
 801ed32:	370c      	adds	r7, #12
 801ed34:	46bd      	mov	sp, r7
 801ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed3a:	4770      	bx	lr

0801ed3c <_ZNSaISt8functionIFvvEEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801ed3c:	b580      	push	{r7, lr}
 801ed3e:	b082      	sub	sp, #8
 801ed40:	af00      	add	r7, sp, #0
 801ed42:	6078      	str	r0, [r7, #4]
 801ed44:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801ed46:	6839      	ldr	r1, [r7, #0]
 801ed48:	6878      	ldr	r0, [r7, #4]
 801ed4a:	f000 fdb4 	bl	801f8b6 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEEC1ERKS4_>
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	4618      	mov	r0, r3
 801ed52:	3708      	adds	r7, #8
 801ed54:	46bd      	mov	sp, r7
 801ed56:	bd80      	pop	{r7, pc}

0801ed58 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 801ed58:	b580      	push	{r7, lr}
 801ed5a:	b082      	sub	sp, #8
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
 801ed60:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	6839      	ldr	r1, [r7, #0]
 801ed66:	4618      	mov	r0, r3
 801ed68:	f000 fdb1 	bl	801f8ce <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implC1ERKS3_>
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	4618      	mov	r0, r3
 801ed70:	3708      	adds	r7, #8
 801ed72:	46bd      	mov	sp, r7
 801ed74:	bd80      	pop	{r7, pc}

0801ed76 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_data12_M_copy_dataERKS5_>:
	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 801ed76:	b480      	push	{r7}
 801ed78:	b083      	sub	sp, #12
 801ed7a:	af00      	add	r7, sp, #0
 801ed7c:	6078      	str	r0, [r7, #4]
 801ed7e:	6039      	str	r1, [r7, #0]
	  _M_start = __x._M_start;
 801ed80:	683b      	ldr	r3, [r7, #0]
 801ed82:	681a      	ldr	r2, [r3, #0]
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	601a      	str	r2, [r3, #0]
	  _M_finish = __x._M_finish;
 801ed88:	683b      	ldr	r3, [r7, #0]
 801ed8a:	685a      	ldr	r2, [r3, #4]
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	605a      	str	r2, [r3, #4]
	  _M_end_of_storage = __x._M_end_of_storage;
 801ed90:	683b      	ldr	r3, [r7, #0]
 801ed92:	689a      	ldr	r2, [r3, #8]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	609a      	str	r2, [r3, #8]
	}
 801ed98:	bf00      	nop
 801ed9a:	370c      	adds	r7, #12
 801ed9c:	46bd      	mov	sp, r7
 801ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda2:	4770      	bx	lr

0801eda4 <_ZSt4moveIRSaISt8functionIFvvEEEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 801eda4:	b480      	push	{r7}
 801eda6:	b083      	sub	sp, #12
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4618      	mov	r0, r3
 801edb0:	370c      	adds	r7, #12
 801edb2:	46bd      	mov	sp, r7
 801edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edb8:	4770      	bx	lr

0801edba <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801edba:	b480      	push	{r7}
 801edbc:	b083      	sub	sp, #12
 801edbe:	af00      	add	r7, sp, #0
 801edc0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	689b      	ldr	r3, [r3, #8]
 801edc6:	4618      	mov	r0, r3
 801edc8:	370c      	adds	r7, #12
 801edca:	46bd      	mov	sp, r7
 801edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd0:	4770      	bx	lr

0801edd2 <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801edd2:	b480      	push	{r7}
 801edd4:	b083      	sub	sp, #12
 801edd6:	af00      	add	r7, sp, #0
 801edd8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 801edda:	687b      	ldr	r3, [r7, #4]
 801eddc:	68db      	ldr	r3, [r3, #12]
 801edde:	4618      	mov	r0, r3
 801ede0:	370c      	adds	r7, #12
 801ede2:	46bd      	mov	sp, r7
 801ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ede8:	4770      	bx	lr

0801edea <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801edea:	b580      	push	{r7, lr}
 801edec:	b082      	sub	sp, #8
 801edee:	af00      	add	r7, sp, #0
 801edf0:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	4618      	mov	r0, r3
 801edf6:	f7ff ff96 	bl	801ed26 <_ZNKSt12_Vector_baseISt8functionIFvvEESaIS2_EE19_M_get_Tp_allocatorEv>
 801edfa:	4603      	mov	r3, r0
 801edfc:	4618      	mov	r0, r3
 801edfe:	f000 fd84 	bl	801f90a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE11_S_max_sizeERKS3_>
 801ee02:	4603      	mov	r3, r0
 801ee04:	4618      	mov	r0, r3
 801ee06:	3708      	adds	r7, #8
 801ee08:	46bd      	mov	sp, r7
 801ee0a:	bd80      	pop	{r7, pc}

0801ee0c <_ZNKSt6vectorISt8functionIFvvEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801ee0c:	b480      	push	{r7}
 801ee0e:	b083      	sub	sp, #12
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	685a      	ldr	r2, [r3, #4]
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	1ad3      	subs	r3, r2, r3
 801ee1e:	111b      	asrs	r3, r3, #4
 801ee20:	4618      	mov	r0, r3
 801ee22:	370c      	adds	r7, #12
 801ee24:	46bd      	mov	sp, r7
 801ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee2a:	4770      	bx	lr

0801ee2c <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 801ee2c:	b580      	push	{r7, lr}
 801ee2e:	b084      	sub	sp, #16
 801ee30:	af00      	add	r7, sp, #0
 801ee32:	6078      	str	r0, [r7, #4]
 801ee34:	6039      	str	r1, [r7, #0]
 801ee36:	687b      	ldr	r3, [r7, #4]
 801ee38:	60fb      	str	r3, [r7, #12]
 801ee3a:	683b      	ldr	r3, [r7, #0]
 801ee3c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801ee3e:	f7e2 fb03 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801ee42:	4603      	mov	r3, r0
 801ee44:	2b00      	cmp	r3, #0
 801ee46:	d006      	beq.n	801ee56 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801ee48:	68bb      	ldr	r3, [r7, #8]
 801ee4a:	011b      	lsls	r3, r3, #4
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	f007 f92b 	bl	80260a8 <_Znwj>
 801ee52:	4603      	mov	r3, r0
 801ee54:	e006      	b.n	801ee64 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801ee56:	2200      	movs	r2, #0
 801ee58:	68b9      	ldr	r1, [r7, #8]
 801ee5a:	68f8      	ldr	r0, [r7, #12]
 801ee5c:	f000 ffb0 	bl	801fdc0 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE8allocateEjPKv>
 801ee60:	4603      	mov	r3, r0
 801ee62:	bf00      	nop
      { return __a.allocate(__n); }
 801ee64:	4618      	mov	r0, r3
 801ee66:	3710      	adds	r7, #16
 801ee68:	46bd      	mov	sp, r7
 801ee6a:	bd80      	pop	{r7, pc}

0801ee6c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801ee6c:	b580      	push	{r7, lr}
 801ee6e:	b084      	sub	sp, #16
 801ee70:	af00      	add	r7, sp, #0
 801ee72:	60f8      	str	r0, [r7, #12]
 801ee74:	60b9      	str	r1, [r7, #8]
 801ee76:	607a      	str	r2, [r7, #4]
 801ee78:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	687a      	ldr	r2, [r7, #4]
 801ee7e:	68b9      	ldr	r1, [r7, #8]
 801ee80:	68f8      	ldr	r0, [r7, #12]
 801ee82:	f000 fd5c 	bl	801f93e <_ZSt12__relocate_aIPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_>
 801ee86:	4603      	mov	r3, r0
      }
 801ee88:	4618      	mov	r0, r3
 801ee8a:	3710      	adds	r7, #16
 801ee8c:	46bd      	mov	sp, r7
 801ee8e:	bd80      	pop	{r7, pc}

0801ee90 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801ee90:	b480      	push	{r7}
 801ee92:	b083      	sub	sp, #12
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	3304      	adds	r3, #4
 801ee9c:	4618      	mov	r0, r3
 801ee9e:	370c      	adds	r7, #12
 801eea0:	46bd      	mov	sp, r7
 801eea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eea6:	4770      	bx	lr

0801eea8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801eea8:	b590      	push	{r4, r7, lr}
 801eeaa:	b087      	sub	sp, #28
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	60f8      	str	r0, [r7, #12]
 801eeb0:	60b9      	str	r1, [r7, #8]
 801eeb2:	607a      	str	r2, [r7, #4]
 801eeb4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d01b      	beq.n	801eef4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801eebc:	68fc      	ldr	r4, [r7, #12]
 801eebe:	68b8      	ldr	r0, [r7, #8]
 801eec0:	f7ff f9a2 	bl	801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>
 801eec4:	4603      	mov	r3, r0
 801eec6:	683a      	ldr	r2, [r7, #0]
 801eec8:	4619      	mov	r1, r3
 801eeca:	4620      	mov	r0, r4
 801eecc:	f7f4 fb14 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801eed0:	4603      	mov	r3, r0
 801eed2:	f083 0301 	eor.w	r3, r3, #1
 801eed6:	b2db      	uxtb	r3, r3
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d006      	beq.n	801eeea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801eedc:	68bb      	ldr	r3, [r7, #8]
 801eede:	607b      	str	r3, [r7, #4]
 801eee0:	68b8      	ldr	r0, [r7, #8]
 801eee2:	f7e3 fc0a 	bl	80026fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_S_leftEPSt18_Rb_tree_node_base>
 801eee6:	60b8      	str	r0, [r7, #8]
 801eee8:	e7e5      	b.n	801eeb6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801eeea:	68b8      	ldr	r0, [r7, #8]
 801eeec:	f7e3 fbf9 	bl	80026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>
 801eef0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801eef2:	e7e0      	b.n	801eeb6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE14_M_lower_boundEPSt13_Rb_tree_nodeISE_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801eef4:	f107 0314 	add.w	r3, r7, #20
 801eef8:	6879      	ldr	r1, [r7, #4]
 801eefa:	4618      	mov	r0, r3
 801eefc:	f7ff f9d4 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801ef00:	697b      	ldr	r3, [r7, #20]
    }
 801ef02:	4618      	mov	r0, r3
 801ef04:	371c      	adds	r7, #28
 801ef06:	46bd      	mov	sp, r7
 801ef08:	bd90      	pop	{r4, r7, pc}

0801ef0a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_get_nodeEv>:
      _M_get_node()
 801ef0a:	b580      	push	{r7, lr}
 801ef0c:	b082      	sub	sp, #8
 801ef0e:	af00      	add	r7, sp, #0
 801ef10:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801ef12:	6878      	ldr	r0, [r7, #4]
 801ef14:	f7e3 fdb8 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 801ef18:	4603      	mov	r3, r0
 801ef1a:	2101      	movs	r1, #1
 801ef1c:	4618      	mov	r0, r3
 801ef1e:	f000 fd2b 	bl	801f978 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE8allocateERSH_j>
 801ef22:	4603      	mov	r3, r0
 801ef24:	4618      	mov	r0, r3
 801ef26:	3708      	adds	r7, #8
 801ef28:	46bd      	mov	sp, r7
 801ef2a:	bd80      	pop	{r7, pc}

0801ef2c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESN_IJEEEEEvPSt13_Rb_tree_nodeISE_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801ef2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef30:	b086      	sub	sp, #24
 801ef32:	af02      	add	r7, sp, #8
 801ef34:	60f8      	str	r0, [r7, #12]
 801ef36:	60b9      	str	r1, [r7, #8]
 801ef38:	607a      	str	r2, [r7, #4]
 801ef3a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801ef3c:	68bb      	ldr	r3, [r7, #8]
 801ef3e:	4619      	mov	r1, r3
 801ef40:	202c      	movs	r0, #44	; 0x2c
 801ef42:	f7e2 fa89 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801ef46:	68f8      	ldr	r0, [r7, #12]
 801ef48:	f7e3 fd9e 	bl	8002a88 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE21_M_get_Node_allocatorEv>
 801ef4c:	4604      	mov	r4, r0
 801ef4e:	68b8      	ldr	r0, [r7, #8]
 801ef50:	f7e4 f935 	bl	80031be <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>
 801ef54:	4605      	mov	r5, r0
 801ef56:	6878      	ldr	r0, [r7, #4]
 801ef58:	f7f4 ffbd 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801ef5c:	4606      	mov	r6, r0
 801ef5e:	6838      	ldr	r0, [r7, #0]
 801ef60:	f7f4 ffc4 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801ef64:	4680      	mov	r8, r0
 801ef66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ef68:	f7f4 ffcb 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801ef6c:	4603      	mov	r3, r0
 801ef6e:	9300      	str	r3, [sp, #0]
 801ef70:	4643      	mov	r3, r8
 801ef72:	4632      	mov	r2, r6
 801ef74:	4629      	mov	r1, r5
 801ef76:	4620      	mov	r0, r4
 801ef78:	f000 fd4a 	bl	801fa10 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE9constructISF_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESN_IJEEEEEvRSH_PT_DpOT0_>
	}
 801ef7c:	bf00      	nop
 801ef7e:	3710      	adds	r7, #16
 801ef80:	46bd      	mov	sp, r7
 801ef82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ef86 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801ef86:	b580      	push	{r7, lr}
 801ef88:	b084      	sub	sp, #16
 801ef8a:	af00      	add	r7, sp, #0
 801ef8c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801ef8e:	687b      	ldr	r3, [r7, #4]
 801ef90:	681a      	ldr	r2, [r3, #0]
 801ef92:	f107 030c 	add.w	r3, r7, #12
 801ef96:	4611      	mov	r1, r2
 801ef98:	4618      	mov	r0, r3
 801ef9a:	f7ff f985 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801ef9e:	68fb      	ldr	r3, [r7, #12]
 801efa0:	4618      	mov	r0, r3
 801efa2:	3710      	adds	r7, #16
 801efa4:	46bd      	mov	sp, r7
 801efa6:	bd80      	pop	{r7, pc}

0801efa8 <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801efa8:	b480      	push	{r7}
 801efaa:	b083      	sub	sp, #12
 801efac:	af00      	add	r7, sp, #0
 801efae:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801efb0:	687b      	ldr	r3, [r7, #4]
 801efb2:	695b      	ldr	r3, [r3, #20]
 801efb4:	4618      	mov	r0, r3
 801efb6:	370c      	adds	r7, #12
 801efb8:	46bd      	mov	sp, r7
 801efba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efbe:	4770      	bx	lr

0801efc0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801efc0:	b480      	push	{r7}
 801efc2:	b083      	sub	sp, #12
 801efc4:	af00      	add	r7, sp, #0
 801efc6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	3310      	adds	r3, #16
 801efcc:	4618      	mov	r0, r3
 801efce:	370c      	adds	r7, #12
 801efd0:	46bd      	mov	sp, r7
 801efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efd6:	4770      	bx	lr

0801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801efd8:	b580      	push	{r7, lr}
 801efda:	b082      	sub	sp, #8
 801efdc:	af00      	add	r7, sp, #0
 801efde:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801efe0:	6878      	ldr	r0, [r7, #4]
 801efe2:	f7ff f911 	bl	801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>
 801efe6:	4603      	mov	r3, r0
 801efe8:	4618      	mov	r0, r3
 801efea:	3708      	adds	r7, #8
 801efec:	46bd      	mov	sp, r7
 801efee:	bd80      	pop	{r7, pc}

0801eff0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801eff0:	b590      	push	{r4, r7, lr}
 801eff2:	b08b      	sub	sp, #44	; 0x2c
 801eff4:	af00      	add	r7, sp, #0
 801eff6:	60f8      	str	r0, [r7, #12]
 801eff8:	60b9      	str	r1, [r7, #8]
 801effa:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801effc:	68b8      	ldr	r0, [r7, #8]
 801effe:	f7e3 f8ab 	bl	8002158 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_M_beginEv>
 801f002:	4603      	mov	r3, r0
 801f004:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801f006:	68b8      	ldr	r0, [r7, #8]
 801f008:	f7ff ff42 	bl	801ee90 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_M_endEv>
 801f00c:	4603      	mov	r3, r0
 801f00e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801f010:	2301      	movs	r3, #1
 801f012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801f016:	69bb      	ldr	r3, [r7, #24]
 801f018:	2b00      	cmp	r3, #0
 801f01a:	d020      	beq.n	801f05e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801f01c:	69bb      	ldr	r3, [r7, #24]
 801f01e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801f020:	68bc      	ldr	r4, [r7, #8]
 801f022:	69bb      	ldr	r3, [r7, #24]
 801f024:	4618      	mov	r0, r3
 801f026:	f7ff f8ef 	bl	801e208 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt13_Rb_tree_nodeISE_E>
 801f02a:	4603      	mov	r3, r0
 801f02c:	461a      	mov	r2, r3
 801f02e:	6879      	ldr	r1, [r7, #4]
 801f030:	4620      	mov	r0, r4
 801f032:	f7f4 fa61 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f036:	4603      	mov	r3, r0
 801f038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801f03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f040:	2b00      	cmp	r3, #0
 801f042:	d005      	beq.n	801f050 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x60>
 801f044:	69bb      	ldr	r3, [r7, #24]
 801f046:	4618      	mov	r0, r3
 801f048:	f7e3 fb57 	bl	80026fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE7_S_leftEPSt18_Rb_tree_node_base>
 801f04c:	4603      	mov	r3, r0
 801f04e:	e004      	b.n	801f05a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x6a>
 801f050:	69bb      	ldr	r3, [r7, #24]
 801f052:	4618      	mov	r0, r3
 801f054:	f7e3 fb45 	bl	80026e2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE8_S_rightEPSt18_Rb_tree_node_base>
 801f058:	4603      	mov	r3, r0
 801f05a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801f05c:	e7db      	b.n	801f016 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801f05e:	697a      	ldr	r2, [r7, #20]
 801f060:	f107 0310 	add.w	r3, r7, #16
 801f064:	4611      	mov	r1, r2
 801f066:	4618      	mov	r0, r3
 801f068:	f7ff f91e 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801f06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f070:	2b00      	cmp	r3, #0
 801f072:	d01d      	beq.n	801f0b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801f074:	68b8      	ldr	r0, [r7, #8]
 801f076:	f000 fce7 	bl	801fa48 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE5beginEv>
 801f07a:	4603      	mov	r3, r0
 801f07c:	61fb      	str	r3, [r7, #28]
 801f07e:	f107 021c 	add.w	r2, r7, #28
 801f082:	f107 0310 	add.w	r3, r7, #16
 801f086:	4611      	mov	r1, r2
 801f088:	4618      	mov	r0, r3
 801f08a:	f7fe fa37 	bl	801d4fc <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEESH_>
 801f08e:	4603      	mov	r3, r0
 801f090:	2b00      	cmp	r3, #0
 801f092:	d008      	beq.n	801f0a6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801f094:	f107 0214 	add.w	r2, r7, #20
 801f098:	f107 0318 	add.w	r3, r7, #24
 801f09c:	4619      	mov	r1, r3
 801f09e:	68f8      	ldr	r0, [r7, #12]
 801f0a0:	f000 fce3 	bl	801fa6a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt6vectorISt8functionIFvvEESaISA_EESt4lessIhESaIS_IS5_SC_EEEEERS1_Lb1EEEOT_OT0_>
 801f0a4:	e025      	b.n	801f0f2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801f0a6:	f107 0310 	add.w	r3, r7, #16
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f000 f831 	bl	801f112 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801f0b0:	68bc      	ldr	r4, [r7, #8]
 801f0b2:	693b      	ldr	r3, [r7, #16]
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	f7ff ff8f 	bl	801efd8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801f0ba:	4603      	mov	r3, r0
 801f0bc:	687a      	ldr	r2, [r7, #4]
 801f0be:	4619      	mov	r1, r3
 801f0c0:	4620      	mov	r0, r4
 801f0c2:	f7f4 fa19 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f0c6:	4603      	mov	r3, r0
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	d008      	beq.n	801f0de <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801f0cc:	f107 0214 	add.w	r2, r7, #20
 801f0d0:	f107 0318 	add.w	r3, r7, #24
 801f0d4:	4619      	mov	r1, r3
 801f0d6:	68f8      	ldr	r0, [r7, #12]
 801f0d8:	f000 fcc7 	bl	801fa6a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt6vectorISt8functionIFvvEESaISA_EESt4lessIhESaIS_IS5_SC_EEEEERS1_Lb1EEEOT_OT0_>
 801f0dc:	e009      	b.n	801f0f2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801f0de:	2300      	movs	r3, #0
 801f0e0:	623b      	str	r3, [r7, #32]
 801f0e2:	f107 0220 	add.w	r2, r7, #32
 801f0e6:	f107 0310 	add.w	r3, r7, #16
 801f0ea:	4619      	mov	r1, r3
 801f0ec:	68f8      	ldr	r0, [r7, #12]
 801f0ee:	f7f5 fecf 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801f0f2:	68f8      	ldr	r0, [r7, #12]
 801f0f4:	372c      	adds	r7, #44	; 0x2c
 801f0f6:	46bd      	mov	sp, r7
 801f0f8:	bd90      	pop	{r4, r7, pc}

0801f0fa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801f0fa:	b480      	push	{r7}
 801f0fc:	b083      	sub	sp, #12
 801f0fe:	af00      	add	r7, sp, #0
 801f100:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	330c      	adds	r3, #12
 801f106:	4618      	mov	r0, r3
 801f108:	370c      	adds	r7, #12
 801f10a:	46bd      	mov	sp, r7
 801f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f110:	4770      	bx	lr

0801f112 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801f112:	b580      	push	{r7, lr}
 801f114:	b082      	sub	sp, #8
 801f116:	af00      	add	r7, sp, #0
 801f118:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	4618      	mov	r0, r3
 801f120:	f007 f829 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801f124:	4602      	mov	r2, r0
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	601a      	str	r2, [r3, #0]
	return *this;
 801f12a:	687b      	ldr	r3, [r7, #4]
      }
 801f12c:	4618      	mov	r0, r3
 801f12e:	3708      	adds	r7, #8
 801f130:	46bd      	mov	sp, r7
 801f132:	bd80      	pop	{r7, pc}

0801f134 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801f134:	b580      	push	{r7, lr}
 801f136:	b082      	sub	sp, #8
 801f138:	af00      	add	r7, sp, #0
 801f13a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	4618      	mov	r0, r3
 801f142:	f007 f816 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801f146:	4602      	mov	r2, r0
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	601a      	str	r2, [r3, #0]
	return *this;
 801f14c:	687b      	ldr	r3, [r7, #4]
      }
 801f14e:	4618      	mov	r0, r3
 801f150:	3708      	adds	r7, #8
 801f152:	46bd      	mov	sp, r7
 801f154:	bd80      	pop	{r7, pc}

0801f156 <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEE9_M_valptrEv>:
      _M_valptr() const
 801f156:	b580      	push	{r7, lr}
 801f158:	b082      	sub	sp, #8
 801f15a:	af00      	add	r7, sp, #0
 801f15c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	3310      	adds	r3, #16
 801f162:	4618      	mov	r0, r3
 801f164:	f000 fc9a 	bl	801fa9c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE6_M_ptrEv>
 801f168:	4603      	mov	r3, r0
 801f16a:	4618      	mov	r0, r3
 801f16c:	3708      	adds	r7, #8
 801f16e:	46bd      	mov	sp, r7
 801f170:	bd80      	pop	{r7, pc}

0801f172 <_ZNKSt10_Select1stISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEclERKSE_>:
      operator()(const _Pair& __x) const
 801f172:	b480      	push	{r7}
 801f174:	b083      	sub	sp, #12
 801f176:	af00      	add	r7, sp, #0
 801f178:	6078      	str	r0, [r7, #4]
 801f17a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801f17c:	683b      	ldr	r3, [r7, #0]
 801f17e:	4618      	mov	r0, r3
 801f180:	370c      	adds	r7, #12
 801f182:	46bd      	mov	sp, r7
 801f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f188:	4770      	bx	lr

0801f18a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801f18a:	b480      	push	{r7}
 801f18c:	b083      	sub	sp, #12
 801f18e:	af00      	add	r7, sp, #0
 801f190:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	3304      	adds	r3, #4
 801f196:	4618      	mov	r0, r3
 801f198:	370c      	adds	r7, #12
 801f19a:	46bd      	mov	sp, r7
 801f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1a0:	4770      	bx	lr

0801f1a2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f1a2:	b590      	push	{r4, r7, lr}
 801f1a4:	b087      	sub	sp, #28
 801f1a6:	af00      	add	r7, sp, #0
 801f1a8:	60f8      	str	r0, [r7, #12]
 801f1aa:	60b9      	str	r1, [r7, #8]
 801f1ac:	607a      	str	r2, [r7, #4]
 801f1ae:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801f1b0:	68bb      	ldr	r3, [r7, #8]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d01b      	beq.n	801f1ee <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801f1b6:	68fc      	ldr	r4, [r7, #12]
 801f1b8:	68b8      	ldr	r0, [r7, #8]
 801f1ba:	f7ff f9fd 	bl	801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 801f1be:	4603      	mov	r3, r0
 801f1c0:	683a      	ldr	r2, [r7, #0]
 801f1c2:	4619      	mov	r1, r3
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	f7f4 f997 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f1ca:	4603      	mov	r3, r0
 801f1cc:	f083 0301 	eor.w	r3, r3, #1
 801f1d0:	b2db      	uxtb	r3, r3
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	d006      	beq.n	801f1e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801f1d6:	68bb      	ldr	r3, [r7, #8]
 801f1d8:	607b      	str	r3, [r7, #4]
 801f1da:	68b8      	ldr	r0, [r7, #8]
 801f1dc:	f7e4 fa2e 	bl	800363c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 801f1e0:	60b8      	str	r0, [r7, #8]
 801f1e2:	e7e5      	b.n	801f1b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801f1e4:	68b8      	ldr	r0, [r7, #8]
 801f1e6:	f7e4 fa1d 	bl	8003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 801f1ea:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801f1ec:	e7e0      	b.n	801f1b0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS8_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801f1ee:	f107 0314 	add.w	r3, r7, #20
 801f1f2:	6879      	ldr	r1, [r7, #4]
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f7ff fa2f 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801f1fa:	697b      	ldr	r3, [r7, #20]
    }
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	371c      	adds	r7, #28
 801f200:	46bd      	mov	sp, r7
 801f202:	bd90      	pop	{r4, r7, pc}

0801f204 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_get_nodeEv>:
      _M_get_node()
 801f204:	b580      	push	{r7, lr}
 801f206:	b082      	sub	sp, #8
 801f208:	af00      	add	r7, sp, #0
 801f20a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801f20c:	6878      	ldr	r0, [r7, #4]
 801f20e:	f7e4 fac4 	bl	800379a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE21_M_get_Node_allocatorEv>
 801f212:	4603      	mov	r3, r0
 801f214:	2101      	movs	r1, #1
 801f216:	4618      	mov	r0, r3
 801f218:	f000 fc4c 	bl	801fab4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE8allocateERSB_j>
 801f21c:	4603      	mov	r3, r0
 801f21e:	4618      	mov	r0, r3
 801f220:	3708      	adds	r7, #8
 801f222:	46bd      	mov	sp, r7
 801f224:	bd80      	pop	{r7, pc}

0801f226 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESJ_IJEEEEEvPSt13_Rb_tree_nodeIS8_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801f226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f22a:	b086      	sub	sp, #24
 801f22c:	af02      	add	r7, sp, #8
 801f22e:	60f8      	str	r0, [r7, #12]
 801f230:	60b9      	str	r1, [r7, #8]
 801f232:	607a      	str	r2, [r7, #4]
 801f234:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801f236:	68bb      	ldr	r3, [r7, #8]
 801f238:	4619      	mov	r1, r3
 801f23a:	2020      	movs	r0, #32
 801f23c:	f7e2 f90c 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801f240:	68f8      	ldr	r0, [r7, #12]
 801f242:	f7e4 faaa 	bl	800379a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE21_M_get_Node_allocatorEv>
 801f246:	4604      	mov	r4, r0
 801f248:	68b8      	ldr	r0, [r7, #8]
 801f24a:	f7e4 fab1 	bl	80037b0 <_ZNSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>
 801f24e:	4605      	mov	r5, r0
 801f250:	6878      	ldr	r0, [r7, #4]
 801f252:	f7f4 fe40 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f256:	4606      	mov	r6, r0
 801f258:	6838      	ldr	r0, [r7, #0]
 801f25a:	f7f4 fe47 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f25e:	4680      	mov	r8, r0
 801f260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f262:	f7f4 fe4e 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f266:	4603      	mov	r3, r0
 801f268:	9300      	str	r3, [sp, #0]
 801f26a:	4643      	mov	r3, r8
 801f26c:	4632      	mov	r2, r6
 801f26e:	4629      	mov	r1, r5
 801f270:	4620      	mov	r0, r4
 801f272:	f000 fc69 	bl	801fb48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESH_IJEEEEEvRSB_PT_DpOT0_>
	}
 801f276:	bf00      	nop
 801f278:	3710      	adds	r7, #16
 801f27a:	46bd      	mov	sp, r7
 801f27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f280 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801f280:	b580      	push	{r7, lr}
 801f282:	b084      	sub	sp, #16
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801f288:	687b      	ldr	r3, [r7, #4]
 801f28a:	681a      	ldr	r2, [r3, #0]
 801f28c:	f107 030c 	add.w	r3, r7, #12
 801f290:	4611      	mov	r1, r2
 801f292:	4618      	mov	r0, r3
 801f294:	f7ff f9e0 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	4618      	mov	r0, r3
 801f29c:	3710      	adds	r7, #16
 801f29e:	46bd      	mov	sp, r7
 801f2a0:	bd80      	pop	{r7, pc}

0801f2a2 <_ZNKSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801f2a2:	b480      	push	{r7}
 801f2a4:	b083      	sub	sp, #12
 801f2a6:	af00      	add	r7, sp, #0
 801f2a8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801f2aa:	687b      	ldr	r3, [r7, #4]
 801f2ac:	695b      	ldr	r3, [r3, #20]
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	370c      	adds	r7, #12
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b8:	4770      	bx	lr

0801f2ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801f2ba:	b480      	push	{r7}
 801f2bc:	b083      	sub	sp, #12
 801f2be:	af00      	add	r7, sp, #0
 801f2c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	3310      	adds	r3, #16
 801f2c6:	4618      	mov	r0, r3
 801f2c8:	370c      	adds	r7, #12
 801f2ca:	46bd      	mov	sp, r7
 801f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2d0:	4770      	bx	lr

0801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801f2d2:	b580      	push	{r7, lr}
 801f2d4:	b082      	sub	sp, #8
 801f2d6:	af00      	add	r7, sp, #0
 801f2d8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801f2da:	6878      	ldr	r0, [r7, #4]
 801f2dc:	f7ff f96c 	bl	801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 801f2e0:	4603      	mov	r3, r0
 801f2e2:	4618      	mov	r0, r3
 801f2e4:	3708      	adds	r7, #8
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}

0801f2ea <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f2ea:	b590      	push	{r4, r7, lr}
 801f2ec:	b08b      	sub	sp, #44	; 0x2c
 801f2ee:	af00      	add	r7, sp, #0
 801f2f0:	60f8      	str	r0, [r7, #12]
 801f2f2:	60b9      	str	r1, [r7, #8]
 801f2f4:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801f2f6:	68b8      	ldr	r0, [r7, #8]
 801f2f8:	f7e4 f95f 	bl	80035ba <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_M_beginEv>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801f300:	68b8      	ldr	r0, [r7, #8]
 801f302:	f7ff ff42 	bl	801f18a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_M_endEv>
 801f306:	4603      	mov	r3, r0
 801f308:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801f30a:	2301      	movs	r3, #1
 801f30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801f310:	69bb      	ldr	r3, [r7, #24]
 801f312:	2b00      	cmp	r3, #0
 801f314:	d020      	beq.n	801f358 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801f316:	69bb      	ldr	r3, [r7, #24]
 801f318:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801f31a:	68bc      	ldr	r4, [r7, #8]
 801f31c:	69bb      	ldr	r3, [r7, #24]
 801f31e:	4618      	mov	r0, r3
 801f320:	f7ff f94a 	bl	801e5b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt13_Rb_tree_nodeIS8_E>
 801f324:	4603      	mov	r3, r0
 801f326:	461a      	mov	r2, r3
 801f328:	6879      	ldr	r1, [r7, #4]
 801f32a:	4620      	mov	r0, r4
 801f32c:	f7f4 f8e4 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f330:	4603      	mov	r3, r0
 801f332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801f336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	d005      	beq.n	801f34a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x60>
 801f33e:	69bb      	ldr	r3, [r7, #24]
 801f340:	4618      	mov	r0, r3
 801f342:	f7e4 f97b 	bl	800363c <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE7_S_leftEPSt18_Rb_tree_node_base>
 801f346:	4603      	mov	r3, r0
 801f348:	e004      	b.n	801f354 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x6a>
 801f34a:	69bb      	ldr	r3, [r7, #24]
 801f34c:	4618      	mov	r0, r3
 801f34e:	f7e4 f969 	bl	8003624 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE8_S_rightEPSt18_Rb_tree_node_base>
 801f352:	4603      	mov	r3, r0
 801f354:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801f356:	e7db      	b.n	801f310 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801f358:	697a      	ldr	r2, [r7, #20]
 801f35a:	f107 0310 	add.w	r3, r7, #16
 801f35e:	4611      	mov	r1, r2
 801f360:	4618      	mov	r0, r3
 801f362:	f7ff f979 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801f366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d01d      	beq.n	801f3aa <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801f36e:	68b8      	ldr	r0, [r7, #8]
 801f370:	f000 fc06 	bl	801fb80 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE5beginEv>
 801f374:	4603      	mov	r3, r0
 801f376:	61fb      	str	r3, [r7, #28]
 801f378:	f107 021c 	add.w	r2, r7, #28
 801f37c:	f107 0310 	add.w	r3, r7, #16
 801f380:	4611      	mov	r1, r2
 801f382:	4618      	mov	r0, r3
 801f384:	f7fe f953 	bl	801d62e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEESB_>
 801f388:	4603      	mov	r3, r0
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d008      	beq.n	801f3a0 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801f38e:	f107 0214 	add.w	r2, r7, #20
 801f392:	f107 0318 	add.w	r3, r7, #24
 801f396:	4619      	mov	r1, r3
 801f398:	68f8      	ldr	r0, [r7, #12]
 801f39a:	f000 fc02 	bl	801fba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt6vectorISt8functionIFvvEESaIS9_EEEERS1_Lb1EEEOT_OT0_>
 801f39e:	e025      	b.n	801f3ec <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801f3a0:	f107 0310 	add.w	r3, r7, #16
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f000 f831 	bl	801f40c <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801f3aa:	68bc      	ldr	r4, [r7, #8]
 801f3ac:	693b      	ldr	r3, [r7, #16]
 801f3ae:	4618      	mov	r0, r3
 801f3b0:	f7ff ff8f 	bl	801f2d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801f3b4:	4603      	mov	r3, r0
 801f3b6:	687a      	ldr	r2, [r7, #4]
 801f3b8:	4619      	mov	r1, r3
 801f3ba:	4620      	mov	r0, r4
 801f3bc:	f7f4 f89c 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f3c0:	4603      	mov	r3, r0
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	d008      	beq.n	801f3d8 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801f3c6:	f107 0214 	add.w	r2, r7, #20
 801f3ca:	f107 0318 	add.w	r3, r7, #24
 801f3ce:	4619      	mov	r1, r3
 801f3d0:	68f8      	ldr	r0, [r7, #12]
 801f3d2:	f000 fbe6 	bl	801fba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt6vectorISt8functionIFvvEESaIS9_EEEERS1_Lb1EEEOT_OT0_>
 801f3d6:	e009      	b.n	801f3ec <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801f3d8:	2300      	movs	r3, #0
 801f3da:	623b      	str	r3, [r7, #32]
 801f3dc:	f107 0220 	add.w	r2, r7, #32
 801f3e0:	f107 0310 	add.w	r3, r7, #16
 801f3e4:	4619      	mov	r1, r3
 801f3e6:	68f8      	ldr	r0, [r7, #12]
 801f3e8:	f7f5 fd52 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801f3ec:	68f8      	ldr	r0, [r7, #12]
 801f3ee:	372c      	adds	r7, #44	; 0x2c
 801f3f0:	46bd      	mov	sp, r7
 801f3f2:	bd90      	pop	{r4, r7, pc}

0801f3f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801f3f4:	b480      	push	{r7}
 801f3f6:	b083      	sub	sp, #12
 801f3f8:	af00      	add	r7, sp, #0
 801f3fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	330c      	adds	r3, #12
 801f400:	4618      	mov	r0, r3
 801f402:	370c      	adds	r7, #12
 801f404:	46bd      	mov	sp, r7
 801f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f40a:	4770      	bx	lr

0801f40c <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801f40c:	b580      	push	{r7, lr}
 801f40e:	b082      	sub	sp, #8
 801f410:	af00      	add	r7, sp, #0
 801f412:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	4618      	mov	r0, r3
 801f41a:	f006 feac 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801f41e:	4602      	mov	r2, r0
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	601a      	str	r2, [r3, #0]
	return *this;
 801f424:	687b      	ldr	r3, [r7, #4]
      }
 801f426:	4618      	mov	r0, r3
 801f428:	3708      	adds	r7, #8
 801f42a:	46bd      	mov	sp, r7
 801f42c:	bd80      	pop	{r7, pc}

0801f42e <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801f42e:	b580      	push	{r7, lr}
 801f430:	b082      	sub	sp, #8
 801f432:	af00      	add	r7, sp, #0
 801f434:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	4618      	mov	r0, r3
 801f43c:	f006 fe99 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801f440:	4602      	mov	r2, r0
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	601a      	str	r2, [r3, #0]
	return *this;
 801f446:	687b      	ldr	r3, [r7, #4]
      }
 801f448:	4618      	mov	r0, r3
 801f44a:	3708      	adds	r7, #8
 801f44c:	46bd      	mov	sp, r7
 801f44e:	bd80      	pop	{r7, pc}

0801f450 <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEE9_M_valptrEv>:
      _M_valptr() const
 801f450:	b580      	push	{r7, lr}
 801f452:	b082      	sub	sp, #8
 801f454:	af00      	add	r7, sp, #0
 801f456:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	3310      	adds	r3, #16
 801f45c:	4618      	mov	r0, r3
 801f45e:	f000 fbb9 	bl	801fbd4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE6_M_ptrEv>
 801f462:	4603      	mov	r3, r0
 801f464:	4618      	mov	r0, r3
 801f466:	3708      	adds	r7, #8
 801f468:	46bd      	mov	sp, r7
 801f46a:	bd80      	pop	{r7, pc}

0801f46c <_ZNKSt10_Select1stISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEclERKS8_>:
      operator()(const _Pair& __x) const
 801f46c:	b480      	push	{r7}
 801f46e:	b083      	sub	sp, #12
 801f470:	af00      	add	r7, sp, #0
 801f472:	6078      	str	r0, [r7, #4]
 801f474:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801f476:	683b      	ldr	r3, [r7, #0]
 801f478:	4618      	mov	r0, r3
 801f47a:	370c      	adds	r7, #12
 801f47c:	46bd      	mov	sp, r7
 801f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f482:	4770      	bx	lr

0801f484 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801f484:	b480      	push	{r7}
 801f486:	b083      	sub	sp, #12
 801f488:	af00      	add	r7, sp, #0
 801f48a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	3304      	adds	r3, #4
 801f490:	4618      	mov	r0, r3
 801f492:	370c      	adds	r7, #12
 801f494:	46bd      	mov	sp, r7
 801f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f49a:	4770      	bx	lr

0801f49c <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f49c:	b590      	push	{r4, r7, lr}
 801f49e:	b087      	sub	sp, #28
 801f4a0:	af00      	add	r7, sp, #0
 801f4a2:	60f8      	str	r0, [r7, #12]
 801f4a4:	60b9      	str	r1, [r7, #8]
 801f4a6:	607a      	str	r2, [r7, #4]
 801f4a8:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801f4aa:	68bb      	ldr	r3, [r7, #8]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d01b      	beq.n	801f4e8 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801f4b0:	68fc      	ldr	r4, [r7, #12]
 801f4b2:	68b8      	ldr	r0, [r7, #8]
 801f4b4:	f7ff fa58 	bl	801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 801f4b8:	4603      	mov	r3, r0
 801f4ba:	683a      	ldr	r2, [r7, #0]
 801f4bc:	4619      	mov	r1, r3
 801f4be:	4620      	mov	r0, r4
 801f4c0:	f7f4 f81a 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	f083 0301 	eor.w	r3, r3, #1
 801f4ca:	b2db      	uxtb	r3, r3
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	d006      	beq.n	801f4de <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 801f4d0:	68bb      	ldr	r3, [r7, #8]
 801f4d2:	607b      	str	r3, [r7, #4]
 801f4d4:	68b8      	ldr	r0, [r7, #8]
 801f4d6:	f7e3 f8dc 	bl	8002692 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 801f4da:	60b8      	str	r0, [r7, #8]
 801f4dc:	e7e5      	b.n	801f4aa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 801f4de:	68b8      	ldr	r0, [r7, #8]
 801f4e0:	f7e3 f8cb 	bl	800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 801f4e4:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801f4e6:	e7e0      	b.n	801f4aa <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE14_M_lower_boundEPSt13_Rb_tree_nodeISB_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801f4e8:	f107 0314 	add.w	r3, r7, #20
 801f4ec:	6879      	ldr	r1, [r7, #4]
 801f4ee:	4618      	mov	r0, r3
 801f4f0:	f7ff fa8a 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801f4f4:	697b      	ldr	r3, [r7, #20]
    }
 801f4f6:	4618      	mov	r0, r3
 801f4f8:	371c      	adds	r7, #28
 801f4fa:	46bd      	mov	sp, r7
 801f4fc:	bd90      	pop	{r4, r7, pc}

0801f4fe <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_get_nodeEv>:
      _M_get_node()
 801f4fe:	b580      	push	{r7, lr}
 801f500:	b082      	sub	sp, #8
 801f502:	af00      	add	r7, sp, #0
 801f504:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801f506:	6878      	ldr	r0, [r7, #4]
 801f508:	f7e3 fa74 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 801f50c:	4603      	mov	r3, r0
 801f50e:	2101      	movs	r1, #1
 801f510:	4618      	mov	r0, r3
 801f512:	f000 fb6b 	bl	801fbec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE8allocateERSE_j>
 801f516:	4603      	mov	r3, r0
 801f518:	4618      	mov	r0, r3
 801f51a:	3708      	adds	r7, #8
 801f51c:	46bd      	mov	sp, r7
 801f51e:	bd80      	pop	{r7, pc}

0801f520 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESK_IJEEEEEvPSt13_Rb_tree_nodeISB_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f524:	b086      	sub	sp, #24
 801f526:	af02      	add	r7, sp, #8
 801f528:	60f8      	str	r0, [r7, #12]
 801f52a:	60b9      	str	r1, [r7, #8]
 801f52c:	607a      	str	r2, [r7, #4]
 801f52e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801f530:	68bb      	ldr	r3, [r7, #8]
 801f532:	4619      	mov	r1, r3
 801f534:	202c      	movs	r0, #44	; 0x2c
 801f536:	f7e1 ff8f 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801f53a:	68f8      	ldr	r0, [r7, #12]
 801f53c:	f7e3 fa5a 	bl	80029f4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE21_M_get_Node_allocatorEv>
 801f540:	4604      	mov	r4, r0
 801f542:	68b8      	ldr	r0, [r7, #8]
 801f544:	f7e3 fe02 	bl	800314c <_ZNSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>
 801f548:	4605      	mov	r5, r0
 801f54a:	6878      	ldr	r0, [r7, #4]
 801f54c:	f7f4 fcc3 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f550:	4606      	mov	r6, r0
 801f552:	6838      	ldr	r0, [r7, #0]
 801f554:	f7f4 fcca 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f558:	4680      	mov	r8, r0
 801f55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f55c:	f7f4 fcd1 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f560:	4603      	mov	r3, r0
 801f562:	9300      	str	r3, [sp, #0]
 801f564:	4643      	mov	r3, r8
 801f566:	4632      	mov	r2, r6
 801f568:	4629      	mov	r1, r5
 801f56a:	4620      	mov	r0, r4
 801f56c:	f000 fb8a 	bl	801fc84 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESK_IJEEEEEvRSE_PT_DpOT0_>
	}
 801f570:	bf00      	nop
 801f572:	3710      	adds	r7, #16
 801f574:	46bd      	mov	sp, r7
 801f576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801f57a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801f57a:	b580      	push	{r7, lr}
 801f57c:	b084      	sub	sp, #16
 801f57e:	af00      	add	r7, sp, #0
 801f580:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	681a      	ldr	r2, [r3, #0]
 801f586:	f107 030c 	add.w	r3, r7, #12
 801f58a:	4611      	mov	r1, r2
 801f58c:	4618      	mov	r0, r3
 801f58e:	f7ff fa3b 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801f592:	68fb      	ldr	r3, [r7, #12]
 801f594:	4618      	mov	r0, r3
 801f596:	3710      	adds	r7, #16
 801f598:	46bd      	mov	sp, r7
 801f59a:	bd80      	pop	{r7, pc}

0801f59c <_ZNKSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801f59c:	b480      	push	{r7}
 801f59e:	b083      	sub	sp, #12
 801f5a0:	af00      	add	r7, sp, #0
 801f5a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	695b      	ldr	r3, [r3, #20]
 801f5a8:	4618      	mov	r0, r3
 801f5aa:	370c      	adds	r7, #12
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5b2:	4770      	bx	lr

0801f5b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801f5b4:	b480      	push	{r7}
 801f5b6:	b083      	sub	sp, #12
 801f5b8:	af00      	add	r7, sp, #0
 801f5ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	3310      	adds	r3, #16
 801f5c0:	4618      	mov	r0, r3
 801f5c2:	370c      	adds	r7, #12
 801f5c4:	46bd      	mov	sp, r7
 801f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ca:	4770      	bx	lr

0801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801f5cc:	b580      	push	{r7, lr}
 801f5ce:	b082      	sub	sp, #8
 801f5d0:	af00      	add	r7, sp, #0
 801f5d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801f5d4:	6878      	ldr	r0, [r7, #4]
 801f5d6:	f7ff f9c7 	bl	801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	4618      	mov	r0, r3
 801f5de:	3708      	adds	r7, #8
 801f5e0:	46bd      	mov	sp, r7
 801f5e2:	bd80      	pop	{r7, pc}

0801f5e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801f5e4:	b590      	push	{r4, r7, lr}
 801f5e6:	b08b      	sub	sp, #44	; 0x2c
 801f5e8:	af00      	add	r7, sp, #0
 801f5ea:	60f8      	str	r0, [r7, #12]
 801f5ec:	60b9      	str	r1, [r7, #8]
 801f5ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 801f5f0:	68b8      	ldr	r0, [r7, #8]
 801f5f2:	f7e2 fd7a 	bl	80020ea <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_M_beginEv>
 801f5f6:	4603      	mov	r3, r0
 801f5f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801f5fa:	68b8      	ldr	r0, [r7, #8]
 801f5fc:	f7ff ff42 	bl	801f484 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_M_endEv>
 801f600:	4603      	mov	r3, r0
 801f602:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 801f604:	2301      	movs	r3, #1
 801f606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801f60a:	69bb      	ldr	r3, [r7, #24]
 801f60c:	2b00      	cmp	r3, #0
 801f60e:	d020      	beq.n	801f652 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 801f610:	69bb      	ldr	r3, [r7, #24]
 801f612:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 801f614:	68bc      	ldr	r4, [r7, #8]
 801f616:	69bb      	ldr	r3, [r7, #24]
 801f618:	4618      	mov	r0, r3
 801f61a:	f7ff f9a5 	bl	801e968 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt13_Rb_tree_nodeISB_E>
 801f61e:	4603      	mov	r3, r0
 801f620:	461a      	mov	r2, r3
 801f622:	6879      	ldr	r1, [r7, #4]
 801f624:	4620      	mov	r0, r4
 801f626:	f7f3 ff67 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f62a:	4603      	mov	r3, r0
 801f62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 801f630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f634:	2b00      	cmp	r3, #0
 801f636:	d005      	beq.n	801f644 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x60>
 801f638:	69bb      	ldr	r3, [r7, #24]
 801f63a:	4618      	mov	r0, r3
 801f63c:	f7e3 f829 	bl	8002692 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE7_S_leftEPSt18_Rb_tree_node_base>
 801f640:	4603      	mov	r3, r0
 801f642:	e004      	b.n	801f64e <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x6a>
 801f644:	69bb      	ldr	r3, [r7, #24]
 801f646:	4618      	mov	r0, r3
 801f648:	f7e3 f817 	bl	800267a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE8_S_rightEPSt18_Rb_tree_node_base>
 801f64c:	4603      	mov	r3, r0
 801f64e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801f650:	e7db      	b.n	801f60a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801f652:	697a      	ldr	r2, [r7, #20]
 801f654:	f107 0310 	add.w	r3, r7, #16
 801f658:	4611      	mov	r1, r2
 801f65a:	4618      	mov	r0, r3
 801f65c:	f7ff f9d4 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801f660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f664:	2b00      	cmp	r3, #0
 801f666:	d01d      	beq.n	801f6a4 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801f668:	68b8      	ldr	r0, [r7, #8]
 801f66a:	f000 fb27 	bl	801fcbc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE5beginEv>
 801f66e:	4603      	mov	r3, r0
 801f670:	61fb      	str	r3, [r7, #28]
 801f672:	f107 021c 	add.w	r2, r7, #28
 801f676:	f107 0310 	add.w	r3, r7, #16
 801f67a:	4611      	mov	r1, r2
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7fe f86f 	bl	801d760 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEESE_>
 801f682:	4603      	mov	r3, r0
 801f684:	2b00      	cmp	r3, #0
 801f686:	d008      	beq.n	801f69a <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801f688:	f107 0214 	add.w	r2, r7, #20
 801f68c:	f107 0318 	add.w	r3, r7, #24
 801f690:	4619      	mov	r1, r3
 801f692:	68f8      	ldr	r0, [r7, #12]
 801f694:	f000 fb23 	bl	801fcde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS5_S9_EEEEERS1_Lb1EEEOT_OT0_>
 801f698:	e025      	b.n	801f6e6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801f69a:	f107 0310 	add.w	r3, r7, #16
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f000 f831 	bl	801f706 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801f6a4:	68bc      	ldr	r4, [r7, #8]
 801f6a6:	693b      	ldr	r3, [r7, #16]
 801f6a8:	4618      	mov	r0, r3
 801f6aa:	f7ff ff8f 	bl	801f5cc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801f6ae:	4603      	mov	r3, r0
 801f6b0:	687a      	ldr	r2, [r7, #4]
 801f6b2:	4619      	mov	r1, r3
 801f6b4:	4620      	mov	r0, r4
 801f6b6:	f7f3 ff1f 	bl	80134f8 <_ZNKSt4lessIhEclERKhS2_>
 801f6ba:	4603      	mov	r3, r0
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d008      	beq.n	801f6d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801f6c0:	f107 0214 	add.w	r2, r7, #20
 801f6c4:	f107 0318 	add.w	r3, r7, #24
 801f6c8:	4619      	mov	r1, r3
 801f6ca:	68f8      	ldr	r0, [r7, #12]
 801f6cc:	f000 fb07 	bl	801fcde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS5_S9_EEEEERS1_Lb1EEEOT_OT0_>
 801f6d0:	e009      	b.n	801f6e6 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801f6d2:	2300      	movs	r3, #0
 801f6d4:	623b      	str	r3, [r7, #32]
 801f6d6:	f107 0220 	add.w	r2, r7, #32
 801f6da:	f107 0310 	add.w	r3, r7, #16
 801f6de:	4619      	mov	r1, r3
 801f6e0:	68f8      	ldr	r0, [r7, #12]
 801f6e2:	f7f5 fbd5 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801f6e6:	68f8      	ldr	r0, [r7, #12]
 801f6e8:	372c      	adds	r7, #44	; 0x2c
 801f6ea:	46bd      	mov	sp, r7
 801f6ec:	bd90      	pop	{r4, r7, pc}

0801f6ee <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 801f6ee:	b480      	push	{r7}
 801f6f0:	b083      	sub	sp, #12
 801f6f2:	af00      	add	r7, sp, #0
 801f6f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	330c      	adds	r3, #12
 801f6fa:	4618      	mov	r0, r3
 801f6fc:	370c      	adds	r7, #12
 801f6fe:	46bd      	mov	sp, r7
 801f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f704:	4770      	bx	lr

0801f706 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801f706:	b580      	push	{r7, lr}
 801f708:	b082      	sub	sp, #8
 801f70a:	af00      	add	r7, sp, #0
 801f70c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	681b      	ldr	r3, [r3, #0]
 801f712:	4618      	mov	r0, r3
 801f714:	f006 fd2f 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801f718:	4602      	mov	r2, r0
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	601a      	str	r2, [r3, #0]
	return *this;
 801f71e:	687b      	ldr	r3, [r7, #4]
      }
 801f720:	4618      	mov	r0, r3
 801f722:	3708      	adds	r7, #8
 801f724:	46bd      	mov	sp, r7
 801f726:	bd80      	pop	{r7, pc}

0801f728 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801f728:	b580      	push	{r7, lr}
 801f72a:	b082      	sub	sp, #8
 801f72c:	af00      	add	r7, sp, #0
 801f72e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	4618      	mov	r0, r3
 801f736:	f006 fd1c 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801f73a:	4602      	mov	r2, r0
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	601a      	str	r2, [r3, #0]
	return *this;
 801f740:	687b      	ldr	r3, [r7, #4]
      }
 801f742:	4618      	mov	r0, r3
 801f744:	3708      	adds	r7, #8
 801f746:	46bd      	mov	sp, r7
 801f748:	bd80      	pop	{r7, pc}

0801f74a <_ZNKSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEE9_M_valptrEv>:
      _M_valptr() const
 801f74a:	b580      	push	{r7, lr}
 801f74c:	b082      	sub	sp, #8
 801f74e:	af00      	add	r7, sp, #0
 801f750:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	3310      	adds	r3, #16
 801f756:	4618      	mov	r0, r3
 801f758:	f000 fada 	bl	801fd10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE6_M_ptrEv>
 801f75c:	4603      	mov	r3, r0
 801f75e:	4618      	mov	r0, r3
 801f760:	3708      	adds	r7, #8
 801f762:	46bd      	mov	sp, r7
 801f764:	bd80      	pop	{r7, pc}

0801f766 <_ZNKSt10_Select1stISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEclERKSB_>:
      operator()(const _Pair& __x) const
 801f766:	b480      	push	{r7}
 801f768:	b083      	sub	sp, #12
 801f76a:	af00      	add	r7, sp, #0
 801f76c:	6078      	str	r0, [r7, #4]
 801f76e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801f770:	683b      	ldr	r3, [r7, #0]
 801f772:	4618      	mov	r0, r3
 801f774:	370c      	adds	r7, #12
 801f776:	46bd      	mov	sp, r7
 801f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f77c:	4770      	bx	lr

0801f77e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 801f77e:	b580      	push	{r7, lr}
 801f780:	b084      	sub	sp, #16
 801f782:	af00      	add	r7, sp, #0
 801f784:	6078      	str	r0, [r7, #4]
 801f786:	6039      	str	r1, [r7, #0]
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	60fb      	str	r3, [r7, #12]
 801f78c:	683b      	ldr	r3, [r7, #0]
 801f78e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801f790:	f7e1 fe5a 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801f794:	4603      	mov	r3, r0
 801f796:	2b00      	cmp	r3, #0
 801f798:	d006      	beq.n	801f7a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE8allocateERS6_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801f79a:	68bb      	ldr	r3, [r7, #8]
 801f79c:	015b      	lsls	r3, r3, #5
 801f79e:	4618      	mov	r0, r3
 801f7a0:	f006 fc82 	bl	80260a8 <_Znwj>
 801f7a4:	4603      	mov	r3, r0
 801f7a6:	e006      	b.n	801f7b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE8allocateERS6_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801f7a8:	2200      	movs	r2, #0
 801f7aa:	68b9      	ldr	r1, [r7, #8]
 801f7ac:	68f8      	ldr	r0, [r7, #12]
 801f7ae:	f000 fc75 	bl	802009c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE8allocateEjPKv>
 801f7b2:	4603      	mov	r3, r0
 801f7b4:	bf00      	nop
      { return __a.allocate(__n); }
 801f7b6:	4618      	mov	r0, r3
 801f7b8:	3710      	adds	r7, #16
 801f7ba:	46bd      	mov	sp, r7
 801f7bc:	bd80      	pop	{r7, pc}

0801f7be <_ZSt12construct_atISt4pairIKh5StateEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801f7be:	b5b0      	push	{r4, r5, r7, lr}
 801f7c0:	b088      	sub	sp, #32
 801f7c2:	af00      	add	r7, sp, #0
 801f7c4:	60f8      	str	r0, [r7, #12]
 801f7c6:	60b9      	str	r1, [r7, #8]
 801f7c8:	607a      	str	r2, [r7, #4]
 801f7ca:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801f7cc:	68b8      	ldr	r0, [r7, #8]
 801f7ce:	f7f4 fb82 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f7d2:	6878      	ldr	r0, [r7, #4]
 801f7d4:	f7f4 fb8a 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f7d8:	4602      	mov	r2, r0
 801f7da:	f107 0318 	add.w	r3, r7, #24
 801f7de:	4611      	mov	r1, r2
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	f7f5 fecb 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 801f7e6:	f107 0418 	add.w	r4, r7, #24
 801f7ea:	6838      	ldr	r0, [r7, #0]
 801f7ec:	f7f4 fb89 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f7f0:	68fb      	ldr	r3, [r7, #12]
 801f7f2:	4619      	mov	r1, r3
 801f7f4:	2010      	movs	r0, #16
 801f7f6:	f7e1 fe2f 	bl	8001458 <_ZnwjPv>
 801f7fa:	4605      	mov	r5, r0
 801f7fc:	7f3b      	ldrb	r3, [r7, #28]
 801f7fe:	4622      	mov	r2, r4
 801f800:	7d39      	ldrb	r1, [r7, #20]
 801f802:	4628      	mov	r0, r5
 801f804:	f000 fab2 	bl	801fd6c <_ZNSt4pairIKh5StateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 801f808:	462b      	mov	r3, r5
 801f80a:	4618      	mov	r0, r3
 801f80c:	3720      	adds	r7, #32
 801f80e:	46bd      	mov	sp, r7
 801f810:	bdb0      	pop	{r4, r5, r7, pc}

0801f812 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKh5StateEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801f812:	b5b0      	push	{r4, r5, r7, lr}
 801f814:	b084      	sub	sp, #16
 801f816:	af00      	add	r7, sp, #0
 801f818:	60f8      	str	r0, [r7, #12]
 801f81a:	60b9      	str	r1, [r7, #8]
 801f81c:	607a      	str	r2, [r7, #4]
 801f81e:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801f820:	6878      	ldr	r0, [r7, #4]
 801f822:	f7f4 fb58 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f826:	4604      	mov	r4, r0
 801f828:	6838      	ldr	r0, [r7, #0]
 801f82a:	f7f4 fb5f 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f82e:	4605      	mov	r5, r0
 801f830:	6a38      	ldr	r0, [r7, #32]
 801f832:	f7f4 fb66 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f836:	4603      	mov	r3, r0
 801f838:	462a      	mov	r2, r5
 801f83a:	4621      	mov	r1, r4
 801f83c:	68b8      	ldr	r0, [r7, #8]
 801f83e:	f7ff ffbe 	bl	801f7be <_ZSt12construct_atISt4pairIKh5StateEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 801f842:	bf00      	nop
 801f844:	3710      	adds	r7, #16
 801f846:	46bd      	mov	sp, r7
 801f848:	bdb0      	pop	{r4, r5, r7, pc}

0801f84a <_ZNSt8_Rb_treeIhSt4pairIKh5StateESt10_Select1stIS3_ESt4lessIhESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801f84a:	b580      	push	{r7, lr}
 801f84c:	b084      	sub	sp, #16
 801f84e:	af00      	add	r7, sp, #0
 801f850:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	68da      	ldr	r2, [r3, #12]
 801f856:	f107 030c 	add.w	r3, r7, #12
 801f85a:	4611      	mov	r1, r2
 801f85c:	4618      	mov	r0, r3
 801f85e:	f7fe fa02 	bl	801dc66 <_ZNSt17_Rb_tree_iteratorISt4pairIKh5StateEEC1EPSt18_Rb_tree_node_base>
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	4618      	mov	r0, r3
 801f866:	3710      	adds	r7, #16
 801f868:	46bd      	mov	sp, r7
 801f86a:	bd80      	pop	{r7, pc}

0801f86c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKh5StateEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801f86c:	b580      	push	{r7, lr}
 801f86e:	b084      	sub	sp, #16
 801f870:	af00      	add	r7, sp, #0
 801f872:	60f8      	str	r0, [r7, #12]
 801f874:	60b9      	str	r1, [r7, #8]
 801f876:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801f878:	68b8      	ldr	r0, [r7, #8]
 801f87a:	f000 fa8b 	bl	801fd94 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh5StateEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801f87e:	4603      	mov	r3, r0
 801f880:	681a      	ldr	r2, [r3, #0]
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	601a      	str	r2, [r3, #0]
 801f886:	6878      	ldr	r0, [r7, #4]
 801f888:	f7f5 fece 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801f88c:	4603      	mov	r3, r0
 801f88e:	681a      	ldr	r2, [r3, #0]
 801f890:	68fb      	ldr	r3, [r7, #12]
 801f892:	605a      	str	r2, [r3, #4]
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	4618      	mov	r0, r3
 801f898:	3710      	adds	r7, #16
 801f89a:	46bd      	mov	sp, r7
 801f89c:	bd80      	pop	{r7, pc}

0801f89e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801f89e:	b580      	push	{r7, lr}
 801f8a0:	b082      	sub	sp, #8
 801f8a2:	af00      	add	r7, sp, #0
 801f8a4:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801f8a6:	6878      	ldr	r0, [r7, #4]
 801f8a8:	f000 fa7f 	bl	801fdaa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE7_M_addrEv>
 801f8ac:	4603      	mov	r3, r0
 801f8ae:	4618      	mov	r0, r3
 801f8b0:	3708      	adds	r7, #8
 801f8b2:	46bd      	mov	sp, r7
 801f8b4:	bd80      	pop	{r7, pc}

0801f8b6 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 801f8b6:	b480      	push	{r7}
 801f8b8:	b083      	sub	sp, #12
 801f8ba:	af00      	add	r7, sp, #0
 801f8bc:	6078      	str	r0, [r7, #4]
 801f8be:	6039      	str	r1, [r7, #0]
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	4618      	mov	r0, r3
 801f8c4:	370c      	adds	r7, #12
 801f8c6:	46bd      	mov	sp, r7
 801f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8cc:	4770      	bx	lr

0801f8ce <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 801f8ce:	b580      	push	{r7, lr}
 801f8d0:	b082      	sub	sp, #8
 801f8d2:	af00      	add	r7, sp, #0
 801f8d4:	6078      	str	r0, [r7, #4]
 801f8d6:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 801f8d8:	6839      	ldr	r1, [r7, #0]
 801f8da:	6878      	ldr	r0, [r7, #4]
 801f8dc:	f7ff fa2e 	bl	801ed3c <_ZNSaISt8functionIFvvEEEC1ERKS2_>
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	4618      	mov	r0, r3
 801f8e4:	f7fd fbe0 	bl	801d0a8 <_ZNSt12_Vector_baseISt8functionIFvvEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	4618      	mov	r0, r3
 801f8ec:	3708      	adds	r7, #8
 801f8ee:	46bd      	mov	sp, r7
 801f8f0:	bd80      	pop	{r7, pc}

0801f8f2 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801f8f2:	b480      	push	{r7}
 801f8f4:	b083      	sub	sp, #12
 801f8f6:	af00      	add	r7, sp, #0
 801f8f8:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801f8fa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 801f8fe:	4618      	mov	r0, r3
 801f900:	370c      	adds	r7, #12
 801f902:	46bd      	mov	sp, r7
 801f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f908:	4770      	bx	lr

0801f90a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801f90a:	b580      	push	{r7, lr}
 801f90c:	b084      	sub	sp, #16
 801f90e:	af00      	add	r7, sp, #0
 801f910:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801f912:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 801f916:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801f918:	6878      	ldr	r0, [r7, #4]
 801f91a:	f7ff ffea 	bl	801f8f2 <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE8max_sizeERKS3_>
 801f91e:	4603      	mov	r3, r0
 801f920:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801f922:	f107 0208 	add.w	r2, r7, #8
 801f926:	f107 030c 	add.w	r3, r7, #12
 801f92a:	4611      	mov	r1, r2
 801f92c:	4618      	mov	r0, r3
 801f92e:	f7f1 fdf3 	bl	8011518 <_ZSt3minIjERKT_S2_S2_>
 801f932:	4603      	mov	r3, r0
 801f934:	681b      	ldr	r3, [r3, #0]
      }
 801f936:	4618      	mov	r0, r3
 801f938:	3710      	adds	r7, #16
 801f93a:	46bd      	mov	sp, r7
 801f93c:	bd80      	pop	{r7, pc}

0801f93e <_ZSt12__relocate_aIPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 801f93e:	b5b0      	push	{r4, r5, r7, lr}
 801f940:	b084      	sub	sp, #16
 801f942:	af00      	add	r7, sp, #0
 801f944:	60f8      	str	r0, [r7, #12]
 801f946:	60b9      	str	r1, [r7, #8]
 801f948:	607a      	str	r2, [r7, #4]
 801f94a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 801f94c:	68f8      	ldr	r0, [r7, #12]
 801f94e:	f000 fa56 	bl	801fdfe <_ZSt12__niter_baseIPSt8functionIFvvEEET_S4_>
 801f952:	4604      	mov	r4, r0
 801f954:	68b8      	ldr	r0, [r7, #8]
 801f956:	f000 fa52 	bl	801fdfe <_ZSt12__niter_baseIPSt8functionIFvvEEET_S4_>
 801f95a:	4605      	mov	r5, r0
 801f95c:	6878      	ldr	r0, [r7, #4]
 801f95e:	f000 fa4e 	bl	801fdfe <_ZSt12__niter_baseIPSt8functionIFvvEEET_S4_>
 801f962:	4602      	mov	r2, r0
 801f964:	683b      	ldr	r3, [r7, #0]
 801f966:	4629      	mov	r1, r5
 801f968:	4620      	mov	r0, r4
 801f96a:	f000 fa53 	bl	801fe14 <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_>
 801f96e:	4603      	mov	r3, r0
    }
 801f970:	4618      	mov	r0, r3
 801f972:	3710      	adds	r7, #16
 801f974:	46bd      	mov	sp, r7
 801f976:	bdb0      	pop	{r4, r5, r7, pc}

0801f978 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE8allocateERSH_j>:
      allocate(allocator_type& __a, size_type __n)
 801f978:	b580      	push	{r7, lr}
 801f97a:	b084      	sub	sp, #16
 801f97c:	af00      	add	r7, sp, #0
 801f97e:	6078      	str	r0, [r7, #4]
 801f980:	6039      	str	r1, [r7, #0]
 801f982:	687b      	ldr	r3, [r7, #4]
 801f984:	60fb      	str	r3, [r7, #12]
 801f986:	683b      	ldr	r3, [r7, #0]
 801f988:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801f98a:	f7e1 fd5d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801f98e:	4603      	mov	r3, r0
 801f990:	2b00      	cmp	r3, #0
 801f992:	d008      	beq.n	801f9a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE8allocateERSH_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801f994:	68bb      	ldr	r3, [r7, #8]
 801f996:	222c      	movs	r2, #44	; 0x2c
 801f998:	fb02 f303 	mul.w	r3, r2, r3
 801f99c:	4618      	mov	r0, r3
 801f99e:	f006 fb83 	bl	80260a8 <_Znwj>
 801f9a2:	4603      	mov	r3, r0
 801f9a4:	e006      	b.n	801f9b4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE8allocateERSH_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801f9a6:	2200      	movs	r2, #0
 801f9a8:	68b9      	ldr	r1, [r7, #8]
 801f9aa:	68f8      	ldr	r0, [r7, #12]
 801f9ac:	f000 fbbc 	bl	8020128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE8allocateEjPKv>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	bf00      	nop
      { return __a.allocate(__n); }
 801f9b4:	4618      	mov	r0, r3
 801f9b6:	3710      	adds	r7, #16
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	bd80      	pop	{r7, pc}

0801f9bc <_ZSt12construct_atISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSN_DpOSO_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801f9bc:	b5b0      	push	{r4, r5, r7, lr}
 801f9be:	b088      	sub	sp, #32
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	60f8      	str	r0, [r7, #12]
 801f9c4:	60b9      	str	r1, [r7, #8]
 801f9c6:	607a      	str	r2, [r7, #4]
 801f9c8:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801f9ca:	68b8      	ldr	r0, [r7, #8]
 801f9cc:	f7f4 fa83 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801f9d0:	6878      	ldr	r0, [r7, #4]
 801f9d2:	f7f4 fa8b 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801f9d6:	4602      	mov	r2, r0
 801f9d8:	f107 0318 	add.w	r3, r7, #24
 801f9dc:	4611      	mov	r1, r2
 801f9de:	4618      	mov	r0, r3
 801f9e0:	f7f5 fdcc 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 801f9e4:	f107 0418 	add.w	r4, r7, #24
 801f9e8:	6838      	ldr	r0, [r7, #0]
 801f9ea:	f7f4 fa8a 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	4619      	mov	r1, r3
 801f9f2:	201c      	movs	r0, #28
 801f9f4:	f7e1 fd30 	bl	8001458 <_ZnwjPv>
 801f9f8:	4605      	mov	r5, r0
 801f9fa:	7f3b      	ldrb	r3, [r7, #28]
 801f9fc:	4622      	mov	r2, r4
 801f9fe:	7d39      	ldrb	r1, [r7, #20]
 801fa00:	4628      	mov	r0, r5
 801fa02:	f000 fa6c 	bl	801fede <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESH_IJDpT0_EE>
 801fa06:	462b      	mov	r3, r5
 801fa08:	4618      	mov	r0, r3
 801fa0a:	3720      	adds	r7, #32
 801fa0c:	46bd      	mov	sp, r7
 801fa0e:	bdb0      	pop	{r4, r5, r7, pc}

0801fa10 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEE9constructISF_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESN_IJEEEEEvRSH_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801fa10:	b5b0      	push	{r4, r5, r7, lr}
 801fa12:	b084      	sub	sp, #16
 801fa14:	af00      	add	r7, sp, #0
 801fa16:	60f8      	str	r0, [r7, #12]
 801fa18:	60b9      	str	r1, [r7, #8]
 801fa1a:	607a      	str	r2, [r7, #4]
 801fa1c:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801fa1e:	6878      	ldr	r0, [r7, #4]
 801fa20:	f7f4 fa59 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fa24:	4604      	mov	r4, r0
 801fa26:	6838      	ldr	r0, [r7, #0]
 801fa28:	f7f4 fa60 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fa2c:	4605      	mov	r5, r0
 801fa2e:	6a38      	ldr	r0, [r7, #32]
 801fa30:	f7f4 fa67 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fa34:	4603      	mov	r3, r0
 801fa36:	462a      	mov	r2, r5
 801fa38:	4621      	mov	r1, r4
 801fa3a:	68b8      	ldr	r0, [r7, #8]
 801fa3c:	f7ff ffbe 	bl	801f9bc <_ZSt12construct_atISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSN_DpOSO_>
	}
 801fa40:	bf00      	nop
 801fa42:	3710      	adds	r7, #16
 801fa44:	46bd      	mov	sp, r7
 801fa46:	bdb0      	pop	{r4, r5, r7, pc}

0801fa48 <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEESt10_Select1stISE_ESA_SaISE_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	b084      	sub	sp, #16
 801fa4c:	af00      	add	r7, sp, #0
 801fa4e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801fa50:	687b      	ldr	r3, [r7, #4]
 801fa52:	68da      	ldr	r2, [r3, #12]
 801fa54:	f107 030c 	add.w	r3, r7, #12
 801fa58:	4611      	mov	r1, r2
 801fa5a:	4618      	mov	r0, r3
 801fa5c:	f7fe fc24 	bl	801e2a8 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS6_EESt4lessIhESaIS0_IS1_S8_EEEEEC1EPSt18_Rb_tree_node_base>
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	4618      	mov	r0, r3
 801fa64:	3710      	adds	r7, #16
 801fa66:	46bd      	mov	sp, r7
 801fa68:	bd80      	pop	{r7, pc}

0801fa6a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt6vectorISt8functionIFvvEESaISA_EESt4lessIhESaIS_IS5_SC_EEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801fa6a:	b580      	push	{r7, lr}
 801fa6c:	b084      	sub	sp, #16
 801fa6e:	af00      	add	r7, sp, #0
 801fa70:	60f8      	str	r0, [r7, #12]
 801fa72:	60b9      	str	r1, [r7, #8]
 801fa74:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801fa76:	68b8      	ldr	r0, [r7, #8]
 801fa78:	f000 fa45 	bl	801ff06 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEOT_RNSt16remove_referenceISJ_E4typeE>
 801fa7c:	4603      	mov	r3, r0
 801fa7e:	681a      	ldr	r2, [r3, #0]
 801fa80:	68fb      	ldr	r3, [r7, #12]
 801fa82:	601a      	str	r2, [r3, #0]
 801fa84:	6878      	ldr	r0, [r7, #4]
 801fa86:	f7f5 fdcf 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801fa8a:	4603      	mov	r3, r0
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	605a      	str	r2, [r3, #4]
 801fa92:	68fb      	ldr	r3, [r7, #12]
 801fa94:	4618      	mov	r0, r3
 801fa96:	3710      	adds	r7, #16
 801fa98:	46bd      	mov	sp, r7
 801fa9a:	bd80      	pop	{r7, pc}

0801fa9c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801fa9c:	b580      	push	{r7, lr}
 801fa9e:	b082      	sub	sp, #8
 801faa0:	af00      	add	r7, sp, #0
 801faa2:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801faa4:	6878      	ldr	r0, [r7, #4]
 801faa6:	f000 fa39 	bl	801ff1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE7_M_addrEv>
 801faaa:	4603      	mov	r3, r0
 801faac:	4618      	mov	r0, r3
 801faae:	3708      	adds	r7, #8
 801fab0:	46bd      	mov	sp, r7
 801fab2:	bd80      	pop	{r7, pc}

0801fab4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE8allocateERSB_j>:
      allocate(allocator_type& __a, size_type __n)
 801fab4:	b580      	push	{r7, lr}
 801fab6:	b084      	sub	sp, #16
 801fab8:	af00      	add	r7, sp, #0
 801faba:	6078      	str	r0, [r7, #4]
 801fabc:	6039      	str	r1, [r7, #0]
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	60fb      	str	r3, [r7, #12]
 801fac2:	683b      	ldr	r3, [r7, #0]
 801fac4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801fac6:	f7e1 fcbf 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801faca:	4603      	mov	r3, r0
 801facc:	2b00      	cmp	r3, #0
 801face:	d006      	beq.n	801fade <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE8allocateERSB_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801fad0:	68bb      	ldr	r3, [r7, #8]
 801fad2:	015b      	lsls	r3, r3, #5
 801fad4:	4618      	mov	r0, r3
 801fad6:	f006 fae7 	bl	80260a8 <_Znwj>
 801fada:	4603      	mov	r3, r0
 801fadc:	e006      	b.n	801faec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE8allocateERSB_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801fade:	2200      	movs	r2, #0
 801fae0:	68b9      	ldr	r1, [r7, #8]
 801fae2:	68f8      	ldr	r0, [r7, #12]
 801fae4:	f000 fb56 	bl	8020194 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE8allocateEjPKv>
 801fae8:	4603      	mov	r3, r0
 801faea:	bf00      	nop
      { return __a.allocate(__n); }
 801faec:	4618      	mov	r0, r3
 801faee:	3710      	adds	r7, #16
 801faf0:	46bd      	mov	sp, r7
 801faf2:	bd80      	pop	{r7, pc}

0801faf4 <_ZSt12construct_atISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801faf4:	b5b0      	push	{r4, r5, r7, lr}
 801faf6:	b088      	sub	sp, #32
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	60f8      	str	r0, [r7, #12]
 801fafc:	60b9      	str	r1, [r7, #8]
 801fafe:	607a      	str	r2, [r7, #4]
 801fb00:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801fb02:	68b8      	ldr	r0, [r7, #8]
 801fb04:	f7f4 f9e7 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fb08:	6878      	ldr	r0, [r7, #4]
 801fb0a:	f7f4 f9ef 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fb0e:	4602      	mov	r2, r0
 801fb10:	f107 0318 	add.w	r3, r7, #24
 801fb14:	4611      	mov	r1, r2
 801fb16:	4618      	mov	r0, r3
 801fb18:	f7f5 fd30 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 801fb1c:	f107 0418 	add.w	r4, r7, #24
 801fb20:	6838      	ldr	r0, [r7, #0]
 801fb22:	f7f4 f9ee 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fb26:	68fb      	ldr	r3, [r7, #12]
 801fb28:	4619      	mov	r1, r3
 801fb2a:	2010      	movs	r0, #16
 801fb2c:	f7e1 fc94 	bl	8001458 <_ZnwjPv>
 801fb30:	4605      	mov	r5, r0
 801fb32:	7f3b      	ldrb	r3, [r7, #28]
 801fb34:	4622      	mov	r2, r4
 801fb36:	7d39      	ldrb	r1, [r7, #20]
 801fb38:	4628      	mov	r0, r5
 801fb3a:	f000 fa1c 	bl	801ff76 <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>
 801fb3e:	462b      	mov	r3, r5
 801fb40:	4618      	mov	r0, r3
 801fb42:	3720      	adds	r7, #32
 801fb44:	46bd      	mov	sp, r7
 801fb46:	bdb0      	pop	{r4, r5, r7, pc}

0801fb48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEE9constructIS9_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESH_IJEEEEEvRSB_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801fb48:	b5b0      	push	{r4, r5, r7, lr}
 801fb4a:	b084      	sub	sp, #16
 801fb4c:	af00      	add	r7, sp, #0
 801fb4e:	60f8      	str	r0, [r7, #12]
 801fb50:	60b9      	str	r1, [r7, #8]
 801fb52:	607a      	str	r2, [r7, #4]
 801fb54:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801fb56:	6878      	ldr	r0, [r7, #4]
 801fb58:	f7f4 f9bd 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fb5c:	4604      	mov	r4, r0
 801fb5e:	6838      	ldr	r0, [r7, #0]
 801fb60:	f7f4 f9c4 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fb64:	4605      	mov	r5, r0
 801fb66:	6a38      	ldr	r0, [r7, #32]
 801fb68:	f7f4 f9cb 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fb6c:	4603      	mov	r3, r0
 801fb6e:	462a      	mov	r2, r5
 801fb70:	4621      	mov	r1, r4
 801fb72:	68b8      	ldr	r0, [r7, #8]
 801fb74:	f7ff ffbe 	bl	801faf4 <_ZSt12construct_atISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESC_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSH_DpOSI_>
	}
 801fb78:	bf00      	nop
 801fb7a:	3710      	adds	r7, #16
 801fb7c:	46bd      	mov	sp, r7
 801fb7e:	bdb0      	pop	{r4, r5, r7, pc}

0801fb80 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801fb80:	b580      	push	{r7, lr}
 801fb82:	b084      	sub	sp, #16
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	68da      	ldr	r2, [r3, #12]
 801fb8c:	f107 030c 	add.w	r3, r7, #12
 801fb90:	4611      	mov	r1, r2
 801fb92:	4618      	mov	r0, r3
 801fb94:	f7fe fd60 	bl	801e658 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEC1EPSt18_Rb_tree_node_base>
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	4618      	mov	r0, r3
 801fb9c:	3710      	adds	r7, #16
 801fb9e:	46bd      	mov	sp, r7
 801fba0:	bd80      	pop	{r7, pc}

0801fba2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt6vectorISt8functionIFvvEESaIS9_EEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801fba2:	b580      	push	{r7, lr}
 801fba4:	b084      	sub	sp, #16
 801fba6:	af00      	add	r7, sp, #0
 801fba8:	60f8      	str	r0, [r7, #12]
 801fbaa:	60b9      	str	r1, [r7, #8]
 801fbac:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801fbae:	68b8      	ldr	r0, [r7, #8]
 801fbb0:	f000 f9f5 	bl	801ff9e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEOT_RNSt16remove_referenceISD_E4typeE>
 801fbb4:	4603      	mov	r3, r0
 801fbb6:	681a      	ldr	r2, [r3, #0]
 801fbb8:	68fb      	ldr	r3, [r7, #12]
 801fbba:	601a      	str	r2, [r3, #0]
 801fbbc:	6878      	ldr	r0, [r7, #4]
 801fbbe:	f7f5 fd33 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801fbc2:	4603      	mov	r3, r0
 801fbc4:	681a      	ldr	r2, [r3, #0]
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	605a      	str	r2, [r3, #4]
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	4618      	mov	r0, r3
 801fbce:	3710      	adds	r7, #16
 801fbd0:	46bd      	mov	sp, r7
 801fbd2:	bd80      	pop	{r7, pc}

0801fbd4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801fbd4:	b580      	push	{r7, lr}
 801fbd6:	b082      	sub	sp, #8
 801fbd8:	af00      	add	r7, sp, #0
 801fbda:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801fbdc:	6878      	ldr	r0, [r7, #4]
 801fbde:	f000 f9e9 	bl	801ffb4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE7_M_addrEv>
 801fbe2:	4603      	mov	r3, r0
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	3708      	adds	r7, #8
 801fbe8:	46bd      	mov	sp, r7
 801fbea:	bd80      	pop	{r7, pc}

0801fbec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE8allocateERSE_j>:
      allocate(allocator_type& __a, size_type __n)
 801fbec:	b580      	push	{r7, lr}
 801fbee:	b084      	sub	sp, #16
 801fbf0:	af00      	add	r7, sp, #0
 801fbf2:	6078      	str	r0, [r7, #4]
 801fbf4:	6039      	str	r1, [r7, #0]
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	60fb      	str	r3, [r7, #12]
 801fbfa:	683b      	ldr	r3, [r7, #0]
 801fbfc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801fbfe:	f7e1 fc23 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 801fc02:	4603      	mov	r3, r0
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d008      	beq.n	801fc1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE8allocateERSE_j+0x2e>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801fc08:	68bb      	ldr	r3, [r7, #8]
 801fc0a:	222c      	movs	r2, #44	; 0x2c
 801fc0c:	fb02 f303 	mul.w	r3, r2, r3
 801fc10:	4618      	mov	r0, r3
 801fc12:	f006 fa49 	bl	80260a8 <_Znwj>
 801fc16:	4603      	mov	r3, r0
 801fc18:	e006      	b.n	801fc28 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE8allocateERSE_j+0x3c>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801fc1a:	2200      	movs	r2, #0
 801fc1c:	68b9      	ldr	r1, [r7, #8]
 801fc1e:	68f8      	ldr	r0, [r7, #12]
 801fc20:	f000 fad7 	bl	80201d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE8allocateEjPKv>
 801fc24:	4603      	mov	r3, r0
 801fc26:	bf00      	nop
      { return __a.allocate(__n); }
 801fc28:	4618      	mov	r0, r3
 801fc2a:	3710      	adds	r7, #16
 801fc2c:	46bd      	mov	sp, r7
 801fc2e:	bd80      	pop	{r7, pc}

0801fc30 <_ZSt12construct_atISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSK_DpOSL_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801fc30:	b5b0      	push	{r4, r5, r7, lr}
 801fc32:	b088      	sub	sp, #32
 801fc34:	af00      	add	r7, sp, #0
 801fc36:	60f8      	str	r0, [r7, #12]
 801fc38:	60b9      	str	r1, [r7, #8]
 801fc3a:	607a      	str	r2, [r7, #4]
 801fc3c:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801fc3e:	68b8      	ldr	r0, [r7, #8]
 801fc40:	f7f4 f949 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fc44:	6878      	ldr	r0, [r7, #4]
 801fc46:	f7f4 f951 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fc4a:	4602      	mov	r2, r0
 801fc4c:	f107 0318 	add.w	r3, r7, #24
 801fc50:	4611      	mov	r1, r2
 801fc52:	4618      	mov	r0, r3
 801fc54:	f7f5 fc92 	bl	801557c <_ZNSt5tupleIJRKhEEC1EOS2_>
 801fc58:	f107 0418 	add.w	r4, r7, #24
 801fc5c:	6838      	ldr	r0, [r7, #0]
 801fc5e:	f7f4 f950 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fc62:	68fb      	ldr	r3, [r7, #12]
 801fc64:	4619      	mov	r1, r3
 801fc66:	201c      	movs	r0, #28
 801fc68:	f7e1 fbf6 	bl	8001458 <_ZnwjPv>
 801fc6c:	4605      	mov	r5, r0
 801fc6e:	7f3b      	ldrb	r3, [r7, #28]
 801fc70:	4622      	mov	r2, r4
 801fc72:	7d39      	ldrb	r1, [r7, #20]
 801fc74:	4628      	mov	r0, r5
 801fc76:	f000 f9e7 	bl	8020048 <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>
 801fc7a:	462b      	mov	r3, r5
 801fc7c:	4618      	mov	r0, r3
 801fc7e:	3720      	adds	r7, #32
 801fc80:	46bd      	mov	sp, r7
 801fc82:	bdb0      	pop	{r4, r5, r7, pc}

0801fc84 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEE9constructISC_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESK_IJEEEEEvRSE_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801fc84:	b5b0      	push	{r4, r5, r7, lr}
 801fc86:	b084      	sub	sp, #16
 801fc88:	af00      	add	r7, sp, #0
 801fc8a:	60f8      	str	r0, [r7, #12]
 801fc8c:	60b9      	str	r1, [r7, #8]
 801fc8e:	607a      	str	r2, [r7, #4]
 801fc90:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801fc92:	6878      	ldr	r0, [r7, #4]
 801fc94:	f7f4 f91f 	bl	8013ed6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801fc98:	4604      	mov	r4, r0
 801fc9a:	6838      	ldr	r0, [r7, #0]
 801fc9c:	f7f4 f926 	bl	8013eec <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801fca0:	4605      	mov	r5, r0
 801fca2:	6a38      	ldr	r0, [r7, #32]
 801fca4:	f7f4 f92d 	bl	8013f02 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801fca8:	4603      	mov	r3, r0
 801fcaa:	462a      	mov	r2, r5
 801fcac:	4621      	mov	r1, r4
 801fcae:	68b8      	ldr	r0, [r7, #8]
 801fcb0:	f7ff ffbe 	bl	801fc30 <_ZSt12construct_atISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSK_DpOSL_>
	}
 801fcb4:	bf00      	nop
 801fcb6:	3710      	adds	r7, #16
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	bdb0      	pop	{r4, r5, r7, pc}

0801fcbc <_ZNSt8_Rb_treeIhSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEESt10_Select1stISB_ES7_SaISB_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b084      	sub	sp, #16
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	68da      	ldr	r2, [r3, #12]
 801fcc8:	f107 030c 	add.w	r3, r7, #12
 801fccc:	4611      	mov	r1, r2
 801fcce:	4618      	mov	r0, r3
 801fcd0:	f7fe fe9a 	bl	801ea08 <_ZNSt17_Rb_tree_iteratorISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS0_IS1_S5_EEEEEC1EPSt18_Rb_tree_node_base>
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	3710      	adds	r7, #16
 801fcda:	46bd      	mov	sp, r7
 801fcdc:	bd80      	pop	{r7, pc}

0801fcde <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS5_S9_EEEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801fcde:	b580      	push	{r7, lr}
 801fce0:	b084      	sub	sp, #16
 801fce2:	af00      	add	r7, sp, #0
 801fce4:	60f8      	str	r0, [r7, #12]
 801fce6:	60b9      	str	r1, [r7, #8]
 801fce8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801fcea:	68b8      	ldr	r0, [r7, #8]
 801fcec:	f000 f9c0 	bl	8020070 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEOT_RNSt16remove_referenceISG_E4typeE>
 801fcf0:	4603      	mov	r3, r0
 801fcf2:	681a      	ldr	r2, [r3, #0]
 801fcf4:	68fb      	ldr	r3, [r7, #12]
 801fcf6:	601a      	str	r2, [r3, #0]
 801fcf8:	6878      	ldr	r0, [r7, #4]
 801fcfa:	f7f5 fc95 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801fcfe:	4603      	mov	r3, r0
 801fd00:	681a      	ldr	r2, [r3, #0]
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	605a      	str	r2, [r3, #4]
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	4618      	mov	r0, r3
 801fd0a:	3710      	adds	r7, #16
 801fd0c:	46bd      	mov	sp, r7
 801fd0e:	bd80      	pop	{r7, pc}

0801fd10 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801fd10:	b580      	push	{r7, lr}
 801fd12:	b082      	sub	sp, #8
 801fd14:	af00      	add	r7, sp, #0
 801fd16:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801fd18:	6878      	ldr	r0, [r7, #4]
 801fd1a:	f000 f9b4 	bl	8020086 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE7_M_addrEv>
 801fd1e:	4603      	mov	r3, r0
 801fd20:	4618      	mov	r0, r3
 801fd22:	3708      	adds	r7, #8
 801fd24:	46bd      	mov	sp, r7
 801fd26:	bd80      	pop	{r7, pc}

0801fd28 <_ZNSt4pairIKh5StateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801fd28:	b580      	push	{r7, lr}
 801fd2a:	b084      	sub	sp, #16
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	60f8      	str	r0, [r7, #12]
 801fd30:	60b9      	str	r1, [r7, #8]
 801fd32:	607a      	str	r2, [r7, #4]
 801fd34:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801fd36:	68b8      	ldr	r0, [r7, #8]
 801fd38:	f7f5 ffe2 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801fd3c:	4603      	mov	r3, r0
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7f4 fe6a 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801fd44:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801fd46:	781a      	ldrb	r2, [r3, #0]
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	701a      	strb	r2, [r3, #0]
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	3304      	adds	r3, #4
 801fd50:	2200      	movs	r2, #0
 801fd52:	601a      	str	r2, [r3, #0]
 801fd54:	605a      	str	r2, [r3, #4]
 801fd56:	609a      	str	r2, [r3, #8]
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	3304      	adds	r3, #4
 801fd5c:	4618      	mov	r0, r3
 801fd5e:	f7fc fd65 	bl	801c82c <_ZN5StateC1Ev>
      { }
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	4618      	mov	r0, r3
 801fd66:	3710      	adds	r7, #16
 801fd68:	46bd      	mov	sp, r7
 801fd6a:	bd80      	pop	{r7, pc}

0801fd6c <_ZNSt4pairIKh5StateEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801fd6c:	b5b0      	push	{r4, r5, r7, lr}
 801fd6e:	b086      	sub	sp, #24
 801fd70:	af02      	add	r7, sp, #8
 801fd72:	60f8      	str	r0, [r7, #12]
 801fd74:	7239      	strb	r1, [r7, #8]
 801fd76:	607a      	str	r2, [r7, #4]
 801fd78:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801fd7a:	463a      	mov	r2, r7
 801fd7c:	f88d 4000 	strb.w	r4, [sp]
 801fd80:	462b      	mov	r3, r5
 801fd82:	6879      	ldr	r1, [r7, #4]
 801fd84:	68f8      	ldr	r0, [r7, #12]
 801fd86:	f7ff ffcf 	bl	801fd28 <_ZNSt4pairIKh5StateEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	4618      	mov	r0, r3
 801fd8e:	3710      	adds	r7, #16
 801fd90:	46bd      	mov	sp, r7
 801fd92:	bdb0      	pop	{r4, r5, r7, pc}

0801fd94 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKh5StateEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801fd94:	b480      	push	{r7}
 801fd96:	b083      	sub	sp, #12
 801fd98:	af00      	add	r7, sp, #0
 801fd9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	4618      	mov	r0, r3
 801fda0:	370c      	adds	r7, #12
 801fda2:	46bd      	mov	sp, r7
 801fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda8:	4770      	bx	lr

0801fdaa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKh5StateEE7_M_addrEv>:
      _M_addr() const noexcept
 801fdaa:	b480      	push	{r7}
 801fdac:	b083      	sub	sp, #12
 801fdae:	af00      	add	r7, sp, #0
 801fdb0:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	370c      	adds	r7, #12
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdbe:	4770      	bx	lr

0801fdc0 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801fdc0:	b580      	push	{r7, lr}
 801fdc2:	b084      	sub	sp, #16
 801fdc4:	af00      	add	r7, sp, #0
 801fdc6:	60f8      	str	r0, [r7, #12]
 801fdc8:	60b9      	str	r1, [r7, #8]
 801fdca:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801fdcc:	68f8      	ldr	r0, [r7, #12]
 801fdce:	f000 f984 	bl	80200da <_ZNK9__gnu_cxx13new_allocatorISt8functionIFvvEEE11_M_max_sizeEv>
 801fdd2:	4602      	mov	r2, r0
 801fdd4:	68bb      	ldr	r3, [r7, #8]
 801fdd6:	4293      	cmp	r3, r2
 801fdd8:	bf8c      	ite	hi
 801fdda:	2301      	movhi	r3, #1
 801fddc:	2300      	movls	r3, #0
 801fdde:	b2db      	uxtb	r3, r3
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d001      	beq.n	801fde8 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801fde4:	f006 fa24 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801fde8:	68bb      	ldr	r3, [r7, #8]
 801fdea:	011b      	lsls	r3, r3, #4
 801fdec:	4618      	mov	r0, r3
 801fdee:	f006 f95b 	bl	80260a8 <_Znwj>
 801fdf2:	4603      	mov	r3, r0
 801fdf4:	bf00      	nop
      }
 801fdf6:	4618      	mov	r0, r3
 801fdf8:	3710      	adds	r7, #16
 801fdfa:	46bd      	mov	sp, r7
 801fdfc:	bd80      	pop	{r7, pc}

0801fdfe <_ZSt12__niter_baseIPSt8functionIFvvEEET_S4_>:
    __niter_base(_Iterator __it)
 801fdfe:	b480      	push	{r7}
 801fe00:	b083      	sub	sp, #12
 801fe02:	af00      	add	r7, sp, #0
 801fe04:	6078      	str	r0, [r7, #4]
    { return __it; }
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	4618      	mov	r0, r3
 801fe0a:	370c      	adds	r7, #12
 801fe0c:	46bd      	mov	sp, r7
 801fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe12:	4770      	bx	lr

0801fe14 <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 801fe14:	b590      	push	{r4, r7, lr}
 801fe16:	b087      	sub	sp, #28
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	60f8      	str	r0, [r7, #12]
 801fe1c:	60b9      	str	r1, [r7, #8]
 801fe1e:	607a      	str	r2, [r7, #4]
 801fe20:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 801fe26:	68fa      	ldr	r2, [r7, #12]
 801fe28:	68bb      	ldr	r3, [r7, #8]
 801fe2a:	429a      	cmp	r2, r3
 801fe2c:	d013      	beq.n	801fe56 <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 801fe2e:	6978      	ldr	r0, [r7, #20]
 801fe30:	f7e3 f93d 	bl	80030ae <_ZSt11__addressofISt8functionIFvvEEEPT_RS3_>
 801fe34:	4604      	mov	r4, r0
 801fe36:	68f8      	ldr	r0, [r7, #12]
 801fe38:	f7e3 f939 	bl	80030ae <_ZSt11__addressofISt8functionIFvvEEEPT_RS3_>
 801fe3c:	4603      	mov	r3, r0
 801fe3e:	683a      	ldr	r2, [r7, #0]
 801fe40:	4619      	mov	r1, r3
 801fe42:	4620      	mov	r0, r4
 801fe44:	f000 f955 	bl	80200f2 <_ZSt19__relocate_object_aISt8functionIFvvEES2_SaIS2_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 801fe48:	68fb      	ldr	r3, [r7, #12]
 801fe4a:	3310      	adds	r3, #16
 801fe4c:	60fb      	str	r3, [r7, #12]
 801fe4e:	697b      	ldr	r3, [r7, #20]
 801fe50:	3310      	adds	r3, #16
 801fe52:	617b      	str	r3, [r7, #20]
 801fe54:	e7e7      	b.n	801fe26 <_ZSt14__relocate_a_1IPSt8functionIFvvEES3_SaIS2_EET0_T_S6_S5_RT1_+0x12>
      return __cur;
 801fe56:	697b      	ldr	r3, [r7, #20]
    }
 801fe58:	4618      	mov	r0, r3
 801fe5a:	371c      	adds	r7, #28
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	bd90      	pop	{r4, r7, pc}

0801fe60 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EEC1Ev>:
      _Rb_tree() = default;
 801fe60:	b580      	push	{r7, lr}
 801fe62:	b082      	sub	sp, #8
 801fe64:	af00      	add	r7, sp, #0
 801fe66:	6078      	str	r0, [r7, #4]
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	4618      	mov	r0, r3
 801fe6c:	f000 f97d 	bl	802016a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	4618      	mov	r0, r3
 801fe74:	3708      	adds	r7, #8
 801fe76:	46bd      	mov	sp, r7
 801fe78:	bd80      	pop	{r7, pc}

0801fe7a <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEC1Ev>:
      map() = default;
 801fe7a:	b580      	push	{r7, lr}
 801fe7c:	b082      	sub	sp, #8
 801fe7e:	af00      	add	r7, sp, #0
 801fe80:	6078      	str	r0, [r7, #4]
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	4618      	mov	r0, r3
 801fe86:	f7ff ffeb 	bl	801fe60 <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EEC1Ev>
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	3708      	adds	r7, #8
 801fe90:	46bd      	mov	sp, r7
 801fe92:	bd80      	pop	{r7, pc}

0801fe94 <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSG_IJDpT1_EESt12_Index_tupleIJXspT0_EEESP_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801fe94:	b580      	push	{r7, lr}
 801fe96:	b084      	sub	sp, #16
 801fe98:	af00      	add	r7, sp, #0
 801fe9a:	60f8      	str	r0, [r7, #12]
 801fe9c:	60b9      	str	r1, [r7, #8]
 801fe9e:	607a      	str	r2, [r7, #4]
 801fea0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801fea2:	68b8      	ldr	r0, [r7, #8]
 801fea4:	f7f5 ff2c 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801fea8:	4603      	mov	r3, r0
 801feaa:	4618      	mov	r0, r3
 801feac:	f7f4 fdb4 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801feb0:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801feb2:	781a      	ldrb	r2, [r3, #0]
 801feb4:	68fb      	ldr	r3, [r7, #12]
 801feb6:	701a      	strb	r2, [r3, #0]
 801feb8:	68fb      	ldr	r3, [r7, #12]
 801feba:	3304      	adds	r3, #4
 801febc:	2200      	movs	r2, #0
 801febe:	601a      	str	r2, [r3, #0]
 801fec0:	605a      	str	r2, [r3, #4]
 801fec2:	609a      	str	r2, [r3, #8]
 801fec4:	60da      	str	r2, [r3, #12]
 801fec6:	611a      	str	r2, [r3, #16]
 801fec8:	615a      	str	r2, [r3, #20]
 801feca:	68fb      	ldr	r3, [r7, #12]
 801fecc:	3304      	adds	r3, #4
 801fece:	4618      	mov	r0, r3
 801fed0:	f7ff ffd3 	bl	801fe7a <_ZNSt3mapIhSt6vectorISt8functionIFvvEESaIS3_EESt4lessIhESaISt4pairIKhS5_EEEC1Ev>
      { }
 801fed4:	68fb      	ldr	r3, [r7, #12]
 801fed6:	4618      	mov	r0, r3
 801fed8:	3710      	adds	r7, #16
 801feda:	46bd      	mov	sp, r7
 801fedc:	bd80      	pop	{r7, pc}

0801fede <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESH_IJDpT0_EE>:
      pair<_T1, _T2>::
 801fede:	b5b0      	push	{r4, r5, r7, lr}
 801fee0:	b086      	sub	sp, #24
 801fee2:	af02      	add	r7, sp, #8
 801fee4:	60f8      	str	r0, [r7, #12]
 801fee6:	7239      	strb	r1, [r7, #8]
 801fee8:	607a      	str	r2, [r7, #4]
 801feea:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801feec:	463a      	mov	r2, r7
 801feee:	f88d 4000 	strb.w	r4, [sp]
 801fef2:	462b      	mov	r3, r5
 801fef4:	6879      	ldr	r1, [r7, #4]
 801fef6:	68f8      	ldr	r0, [r7, #12]
 801fef8:	f7ff ffcc 	bl	801fe94 <_ZNSt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS5_EESt4lessIhESaIS_IS0_S7_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSG_IJDpT1_EESt12_Index_tupleIJXspT0_EEESP_IJXspT2_EEE>
      { }
 801fefc:	68fb      	ldr	r3, [r7, #12]
 801fefe:	4618      	mov	r0, r3
 801ff00:	3710      	adds	r7, #16
 801ff02:	46bd      	mov	sp, r7
 801ff04:	bdb0      	pop	{r4, r5, r7, pc}

0801ff06 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEEEOT_RNSt16remove_referenceISJ_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ff06:	b480      	push	{r7}
 801ff08:	b083      	sub	sp, #12
 801ff0a:	af00      	add	r7, sp, #0
 801ff0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	4618      	mov	r0, r3
 801ff12:	370c      	adds	r7, #12
 801ff14:	46bd      	mov	sp, r7
 801ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff1a:	4770      	bx	lr

0801ff1c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS7_EESt4lessIhESaIS1_IS2_S9_EEEEE7_M_addrEv>:
      _M_addr() const noexcept
 801ff1c:	b480      	push	{r7}
 801ff1e:	b083      	sub	sp, #12
 801ff20:	af00      	add	r7, sp, #0
 801ff22:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	4618      	mov	r0, r3
 801ff28:	370c      	adds	r7, #12
 801ff2a:	46bd      	mov	sp, r7
 801ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff30:	4770      	bx	lr

0801ff32 <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801ff32:	b580      	push	{r7, lr}
 801ff34:	b084      	sub	sp, #16
 801ff36:	af00      	add	r7, sp, #0
 801ff38:	60f8      	str	r0, [r7, #12]
 801ff3a:	60b9      	str	r1, [r7, #8]
 801ff3c:	607a      	str	r2, [r7, #4]
 801ff3e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801ff40:	68b8      	ldr	r0, [r7, #8]
 801ff42:	f7f5 fedd 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 801ff46:	4603      	mov	r3, r0
 801ff48:	4618      	mov	r0, r3
 801ff4a:	f7f4 fd65 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801ff4e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801ff50:	781a      	ldrb	r2, [r3, #0]
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	701a      	strb	r2, [r3, #0]
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	3304      	adds	r3, #4
 801ff5a:	2200      	movs	r2, #0
 801ff5c:	601a      	str	r2, [r3, #0]
 801ff5e:	605a      	str	r2, [r3, #4]
 801ff60:	609a      	str	r2, [r3, #8]
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	3304      	adds	r3, #4
 801ff66:	4618      	mov	r0, r3
 801ff68:	f7fc fbd9 	bl	801c71e <_ZNSt6vectorISt8functionIFvvEESaIS2_EEC1Ev>
      { }
 801ff6c:	68fb      	ldr	r3, [r7, #12]
 801ff6e:	4618      	mov	r0, r3
 801ff70:	3710      	adds	r7, #16
 801ff72:	46bd      	mov	sp, r7
 801ff74:	bd80      	pop	{r7, pc}

0801ff76 <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESB_IJDpT0_EE>:
      pair<_T1, _T2>::
 801ff76:	b5b0      	push	{r4, r5, r7, lr}
 801ff78:	b086      	sub	sp, #24
 801ff7a:	af02      	add	r7, sp, #8
 801ff7c:	60f8      	str	r0, [r7, #12]
 801ff7e:	7239      	strb	r1, [r7, #8]
 801ff80:	607a      	str	r2, [r7, #4]
 801ff82:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801ff84:	463a      	mov	r2, r7
 801ff86:	f88d 4000 	strb.w	r4, [sp]
 801ff8a:	462b      	mov	r3, r5
 801ff8c:	6879      	ldr	r1, [r7, #4]
 801ff8e:	68f8      	ldr	r0, [r7, #12]
 801ff90:	f7ff ffcf 	bl	801ff32 <_ZNSt4pairIKhSt6vectorISt8functionIFvvEESaIS4_EEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSA_IJDpT1_EESt12_Index_tupleIJXspT0_EEESJ_IJXspT2_EEE>
      { }
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	4618      	mov	r0, r3
 801ff98:	3710      	adds	r7, #16
 801ff9a:	46bd      	mov	sp, r7
 801ff9c:	bdb0      	pop	{r4, r5, r7, pc}

0801ff9e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEEEOT_RNSt16remove_referenceISD_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801ff9e:	b480      	push	{r7}
 801ffa0:	b083      	sub	sp, #12
 801ffa2:	af00      	add	r7, sp, #0
 801ffa4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	4618      	mov	r0, r3
 801ffaa:	370c      	adds	r7, #12
 801ffac:	46bd      	mov	sp, r7
 801ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffb2:	4770      	bx	lr

0801ffb4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt6vectorISt8functionIFvvEESaIS6_EEEE7_M_addrEv>:
      _M_addr() const noexcept
 801ffb4:	b480      	push	{r7}
 801ffb6:	b083      	sub	sp, #12
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	4618      	mov	r0, r3
 801ffc0:	370c      	adds	r7, #12
 801ffc2:	46bd      	mov	sp, r7
 801ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffc8:	4770      	bx	lr

0801ffca <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EEC1Ev>:
 801ffca:	b580      	push	{r7, lr}
 801ffcc:	b082      	sub	sp, #8
 801ffce:	af00      	add	r7, sp, #0
 801ffd0:	6078      	str	r0, [r7, #4]
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	4618      	mov	r0, r3
 801ffd6:	f000 f91d 	bl	8020214 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	4618      	mov	r0, r3
 801ffde:	3708      	adds	r7, #8
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	bd80      	pop	{r7, pc}

0801ffe4 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEEC1Ev>:
 801ffe4:	b580      	push	{r7, lr}
 801ffe6:	b082      	sub	sp, #8
 801ffe8:	af00      	add	r7, sp, #0
 801ffea:	6078      	str	r0, [r7, #4]
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	4618      	mov	r0, r3
 801fff0:	f7ff ffeb 	bl	801ffca <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EEC1Ev>
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	4618      	mov	r0, r3
 801fff8:	3708      	adds	r7, #8
 801fffa:	46bd      	mov	sp, r7
 801fffc:	bd80      	pop	{r7, pc}

0801fffe <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801fffe:	b580      	push	{r7, lr}
 8020000:	b084      	sub	sp, #16
 8020002:	af00      	add	r7, sp, #0
 8020004:	60f8      	str	r0, [r7, #12]
 8020006:	60b9      	str	r1, [r7, #8]
 8020008:	607a      	str	r2, [r7, #4]
 802000a:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 802000c:	68b8      	ldr	r0, [r7, #8]
 802000e:	f7f5 fe77 	bl	8015d00 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8020012:	4603      	mov	r3, r0
 8020014:	4618      	mov	r0, r3
 8020016:	f7f4 fcff 	bl	8014a18 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 802001a:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 802001c:	781a      	ldrb	r2, [r3, #0]
 802001e:	68fb      	ldr	r3, [r7, #12]
 8020020:	701a      	strb	r2, [r3, #0]
 8020022:	68fb      	ldr	r3, [r7, #12]
 8020024:	3304      	adds	r3, #4
 8020026:	2200      	movs	r2, #0
 8020028:	601a      	str	r2, [r3, #0]
 802002a:	605a      	str	r2, [r3, #4]
 802002c:	609a      	str	r2, [r3, #8]
 802002e:	60da      	str	r2, [r3, #12]
 8020030:	611a      	str	r2, [r3, #16]
 8020032:	615a      	str	r2, [r3, #20]
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	3304      	adds	r3, #4
 8020038:	4618      	mov	r0, r3
 802003a:	f7ff ffd3 	bl	801ffe4 <_ZNSt3mapIhSt8functionIFbvEESt4lessIhESaISt4pairIKhS2_EEEC1Ev>
      { }
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	4618      	mov	r0, r3
 8020042:	3710      	adds	r7, #16
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}

08020048 <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EESE_IJDpT0_EE>:
      pair<_T1, _T2>::
 8020048:	b5b0      	push	{r4, r5, r7, lr}
 802004a:	b086      	sub	sp, #24
 802004c:	af02      	add	r7, sp, #8
 802004e:	60f8      	str	r0, [r7, #12]
 8020050:	7239      	strb	r1, [r7, #8]
 8020052:	607a      	str	r2, [r7, #4]
 8020054:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8020056:	463a      	mov	r2, r7
 8020058:	f88d 4000 	strb.w	r4, [sp]
 802005c:	462b      	mov	r3, r5
 802005e:	6879      	ldr	r1, [r7, #4]
 8020060:	68f8      	ldr	r0, [r7, #12]
 8020062:	f7ff ffcc 	bl	801fffe <_ZNSt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS_IS0_S4_EEEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERSD_IJDpT1_EESt12_Index_tupleIJXspT0_EEESM_IJXspT2_EEE>
      { }
 8020066:	68fb      	ldr	r3, [r7, #12]
 8020068:	4618      	mov	r0, r3
 802006a:	3710      	adds	r7, #16
 802006c:	46bd      	mov	sp, r7
 802006e:	bdb0      	pop	{r4, r5, r7, pc}

08020070 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEEEOT_RNSt16remove_referenceISG_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8020070:	b480      	push	{r7}
 8020072:	b083      	sub	sp, #12
 8020074:	af00      	add	r7, sp, #0
 8020076:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8020078:	687b      	ldr	r3, [r7, #4]
 802007a:	4618      	mov	r0, r3
 802007c:	370c      	adds	r7, #12
 802007e:	46bd      	mov	sp, r7
 8020080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020084:	4770      	bx	lr

08020086 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS1_IS2_S6_EEEEE7_M_addrEv>:
      _M_addr() const noexcept
 8020086:	b480      	push	{r7}
 8020088:	b083      	sub	sp, #12
 802008a:	af00      	add	r7, sp, #0
 802008c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 802008e:	687b      	ldr	r3, [r7, #4]
 8020090:	4618      	mov	r0, r3
 8020092:	370c      	adds	r7, #12
 8020094:	46bd      	mov	sp, r7
 8020096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802009a:	4770      	bx	lr

0802009c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802009c:	b580      	push	{r7, lr}
 802009e:	b084      	sub	sp, #16
 80200a0:	af00      	add	r7, sp, #0
 80200a2:	60f8      	str	r0, [r7, #12]
 80200a4:	60b9      	str	r1, [r7, #8]
 80200a6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80200a8:	68f8      	ldr	r0, [r7, #12]
 80200aa:	f000 f8c8 	bl	802023e <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE11_M_max_sizeEv>
 80200ae:	4602      	mov	r2, r0
 80200b0:	68bb      	ldr	r3, [r7, #8]
 80200b2:	4293      	cmp	r3, r2
 80200b4:	bf8c      	ite	hi
 80200b6:	2301      	movhi	r3, #1
 80200b8:	2300      	movls	r3, #0
 80200ba:	b2db      	uxtb	r3, r3
 80200bc:	2b00      	cmp	r3, #0
 80200be:	d001      	beq.n	80200c4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80200c0:	f006 f8b6 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80200c4:	68bb      	ldr	r3, [r7, #8]
 80200c6:	015b      	lsls	r3, r3, #5
 80200c8:	4618      	mov	r0, r3
 80200ca:	f005 ffed 	bl	80260a8 <_Znwj>
 80200ce:	4603      	mov	r3, r0
 80200d0:	bf00      	nop
      }
 80200d2:	4618      	mov	r0, r3
 80200d4:	3710      	adds	r7, #16
 80200d6:	46bd      	mov	sp, r7
 80200d8:	bd80      	pop	{r7, pc}

080200da <_ZNK9__gnu_cxx13new_allocatorISt8functionIFvvEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80200da:	b480      	push	{r7}
 80200dc:	b083      	sub	sp, #12
 80200de:	af00      	add	r7, sp, #0
 80200e0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80200e2:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 80200e6:	4618      	mov	r0, r3
 80200e8:	370c      	adds	r7, #12
 80200ea:	46bd      	mov	sp, r7
 80200ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200f0:	4770      	bx	lr

080200f2 <_ZSt19__relocate_object_aISt8functionIFvvEES2_SaIS2_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80200f2:	b580      	push	{r7, lr}
 80200f4:	b084      	sub	sp, #16
 80200f6:	af00      	add	r7, sp, #0
 80200f8:	60f8      	str	r0, [r7, #12]
 80200fa:	60b9      	str	r1, [r7, #8]
 80200fc:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80200fe:	68b8      	ldr	r0, [r7, #8]
 8020100:	f000 f8a9 	bl	8020256 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>
 8020104:	4603      	mov	r3, r0
 8020106:	461a      	mov	r2, r3
 8020108:	68f9      	ldr	r1, [r7, #12]
 802010a:	6878      	ldr	r0, [r7, #4]
 802010c:	f000 f8c6 	bl	802029c <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8020110:	68b8      	ldr	r0, [r7, #8]
 8020112:	f7e2 ffcc 	bl	80030ae <_ZSt11__addressofISt8functionIFvvEEEPT_RS3_>
 8020116:	4603      	mov	r3, r0
 8020118:	4619      	mov	r1, r3
 802011a:	6878      	ldr	r0, [r7, #4]
 802011c:	f7fd feef 	bl	801defe <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE7destroyIS2_EEvRS3_PT_>
    }
 8020120:	bf00      	nop
 8020122:	3710      	adds	r7, #16
 8020124:	46bd      	mov	sp, r7
 8020126:	bd80      	pop	{r7, pc}

08020128 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8020128:	b580      	push	{r7, lr}
 802012a:	b084      	sub	sp, #16
 802012c:	af00      	add	r7, sp, #0
 802012e:	60f8      	str	r0, [r7, #12]
 8020130:	60b9      	str	r1, [r7, #8]
 8020132:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8020134:	68f8      	ldr	r0, [r7, #12]
 8020136:	f000 f8c3 	bl	80202c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE11_M_max_sizeEv>
 802013a:	4602      	mov	r2, r0
 802013c:	68bb      	ldr	r3, [r7, #8]
 802013e:	4293      	cmp	r3, r2
 8020140:	bf8c      	ite	hi
 8020142:	2301      	movhi	r3, #1
 8020144:	2300      	movls	r3, #0
 8020146:	b2db      	uxtb	r3, r3
 8020148:	2b00      	cmp	r3, #0
 802014a:	d001      	beq.n	8020150 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802014c:	f006 f870 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8020150:	68bb      	ldr	r3, [r7, #8]
 8020152:	222c      	movs	r2, #44	; 0x2c
 8020154:	fb02 f303 	mul.w	r3, r2, r3
 8020158:	4618      	mov	r0, r3
 802015a:	f005 ffa5 	bl	80260a8 <_Znwj>
 802015e:	4603      	mov	r3, r0
 8020160:	bf00      	nop
      }
 8020162:	4618      	mov	r0, r3
 8020164:	3710      	adds	r7, #16
 8020166:	46bd      	mov	sp, r7
 8020168:	bd80      	pop	{r7, pc}

0802016a <_ZNSt8_Rb_treeIhSt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEESt10_Select1stIS8_ESt4lessIhESaIS8_EE13_Rb_tree_implISC_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 802016a:	b580      	push	{r7, lr}
 802016c:	b082      	sub	sp, #8
 802016e:	af00      	add	r7, sp, #0
 8020170:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8020172:	6878      	ldr	r0, [r7, #4]
 8020174:	f000 f8b2 	bl	80202dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEEC1Ev>
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	4618      	mov	r0, r3
 802017c:	f7e1 ff54 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	3304      	adds	r3, #4
 8020184:	4618      	mov	r0, r3
 8020186:	f7e1 f977 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	4618      	mov	r0, r3
 802018e:	3708      	adds	r7, #8
 8020190:	46bd      	mov	sp, r7
 8020192:	bd80      	pop	{r7, pc}

08020194 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8020194:	b580      	push	{r7, lr}
 8020196:	b084      	sub	sp, #16
 8020198:	af00      	add	r7, sp, #0
 802019a:	60f8      	str	r0, [r7, #12]
 802019c:	60b9      	str	r1, [r7, #8]
 802019e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80201a0:	68f8      	ldr	r0, [r7, #12]
 80201a2:	f000 f8a7 	bl	80202f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE11_M_max_sizeEv>
 80201a6:	4602      	mov	r2, r0
 80201a8:	68bb      	ldr	r3, [r7, #8]
 80201aa:	4293      	cmp	r3, r2
 80201ac:	bf8c      	ite	hi
 80201ae:	2301      	movhi	r3, #1
 80201b0:	2300      	movls	r3, #0
 80201b2:	b2db      	uxtb	r3, r3
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d001      	beq.n	80201bc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80201b8:	f006 f83a 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80201bc:	68bb      	ldr	r3, [r7, #8]
 80201be:	015b      	lsls	r3, r3, #5
 80201c0:	4618      	mov	r0, r3
 80201c2:	f005 ff71 	bl	80260a8 <_Znwj>
 80201c6:	4603      	mov	r3, r0
 80201c8:	bf00      	nop
      }
 80201ca:	4618      	mov	r0, r3
 80201cc:	3710      	adds	r7, #16
 80201ce:	46bd      	mov	sp, r7
 80201d0:	bd80      	pop	{r7, pc}

080201d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80201d2:	b580      	push	{r7, lr}
 80201d4:	b084      	sub	sp, #16
 80201d6:	af00      	add	r7, sp, #0
 80201d8:	60f8      	str	r0, [r7, #12]
 80201da:	60b9      	str	r1, [r7, #8]
 80201dc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80201de:	68f8      	ldr	r0, [r7, #12]
 80201e0:	f000 f894 	bl	802030c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE11_M_max_sizeEv>
 80201e4:	4602      	mov	r2, r0
 80201e6:	68bb      	ldr	r3, [r7, #8]
 80201e8:	4293      	cmp	r3, r2
 80201ea:	bf8c      	ite	hi
 80201ec:	2301      	movhi	r3, #1
 80201ee:	2300      	movls	r3, #0
 80201f0:	b2db      	uxtb	r3, r3
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d001      	beq.n	80201fa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80201f6:	f006 f81b 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80201fa:	68bb      	ldr	r3, [r7, #8]
 80201fc:	222c      	movs	r2, #44	; 0x2c
 80201fe:	fb02 f303 	mul.w	r3, r2, r3
 8020202:	4618      	mov	r0, r3
 8020204:	f005 ff50 	bl	80260a8 <_Znwj>
 8020208:	4603      	mov	r3, r0
 802020a:	bf00      	nop
      }
 802020c:	4618      	mov	r0, r3
 802020e:	3710      	adds	r7, #16
 8020210:	46bd      	mov	sp, r7
 8020212:	bd80      	pop	{r7, pc}

08020214 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFbvEEESt10_Select1stIS5_ESt4lessIhESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8020214:	b580      	push	{r7, lr}
 8020216:	b082      	sub	sp, #8
 8020218:	af00      	add	r7, sp, #0
 802021a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 802021c:	6878      	ldr	r0, [r7, #4]
 802021e:	f000 f883 	bl	8020328 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEC1Ev>
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	4618      	mov	r0, r3
 8020226:	f7e1 feff 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	3304      	adds	r3, #4
 802022e:	4618      	mov	r0, r3
 8020230:	f7e1 f922 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	4618      	mov	r0, r3
 8020238:	3708      	adds	r7, #8
 802023a:	46bd      	mov	sp, r7
 802023c:	bd80      	pop	{r7, pc}

0802023e <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKh5StateEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802023e:	b480      	push	{r7}
 8020240:	b083      	sub	sp, #12
 8020242:	af00      	add	r7, sp, #0
 8020244:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8020246:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 802024a:	4618      	mov	r0, r3
 802024c:	370c      	adds	r7, #12
 802024e:	46bd      	mov	sp, r7
 8020250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020254:	4770      	bx	lr

08020256 <_ZSt4moveIRSt8functionIFvvEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8020256:	b480      	push	{r7}
 8020258:	b083      	sub	sp, #12
 802025a:	af00      	add	r7, sp, #0
 802025c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	4618      	mov	r0, r3
 8020262:	370c      	adds	r7, #12
 8020264:	46bd      	mov	sp, r7
 8020266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026a:	4770      	bx	lr

0802026c <_ZSt12construct_atISt8functionIFvvEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 802026c:	b5b0      	push	{r4, r5, r7, lr}
 802026e:	b082      	sub	sp, #8
 8020270:	af00      	add	r7, sp, #0
 8020272:	6078      	str	r0, [r7, #4]
 8020274:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8020276:	6838      	ldr	r0, [r7, #0]
 8020278:	f000 f862 	bl	8020340 <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>
 802027c:	4605      	mov	r5, r0
 802027e:	687b      	ldr	r3, [r7, #4]
 8020280:	4619      	mov	r1, r3
 8020282:	2010      	movs	r0, #16
 8020284:	f7e1 f8e8 	bl	8001458 <_ZnwjPv>
 8020288:	4604      	mov	r4, r0
 802028a:	4629      	mov	r1, r5
 802028c:	4620      	mov	r0, r4
 802028e:	f000 f862 	bl	8020356 <_ZNSt8functionIFvvEEC1EOS1_>
 8020292:	4623      	mov	r3, r4
 8020294:	4618      	mov	r0, r3
 8020296:	3708      	adds	r7, #8
 8020298:	46bd      	mov	sp, r7
 802029a:	bdb0      	pop	{r4, r5, r7, pc}

0802029c <_ZNSt16allocator_traitsISaISt8functionIFvvEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802029c:	b580      	push	{r7, lr}
 802029e:	b084      	sub	sp, #16
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	60f8      	str	r0, [r7, #12]
 80202a4:	60b9      	str	r1, [r7, #8]
 80202a6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80202a8:	6878      	ldr	r0, [r7, #4]
 80202aa:	f000 f849 	bl	8020340 <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80202ae:	4603      	mov	r3, r0
 80202b0:	4619      	mov	r1, r3
 80202b2:	68b8      	ldr	r0, [r7, #8]
 80202b4:	f7ff ffda 	bl	802026c <_ZSt12construct_atISt8functionIFvvEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 80202b8:	bf00      	nop
 80202ba:	3710      	adds	r7, #16
 80202bc:	46bd      	mov	sp, r7
 80202be:	bd80      	pop	{r7, pc}

080202c0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80202c0:	b480      	push	{r7}
 80202c2:	b083      	sub	sp, #12
 80202c4:	af00      	add	r7, sp, #0
 80202c6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80202c8:	4b03      	ldr	r3, [pc, #12]	; (80202d8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt6vectorISt8functionIFvvEESaIS8_EESt4lessIhESaIS2_IS3_SA_EEEEEE11_M_max_sizeEv+0x18>)
      }
 80202ca:	4618      	mov	r0, r3
 80202cc:	370c      	adds	r7, #12
 80202ce:	46bd      	mov	sp, r7
 80202d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202d4:	4770      	bx	lr
 80202d6:	bf00      	nop
 80202d8:	02e8ba2e 	.word	0x02e8ba2e

080202dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS5_EEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80202dc:	b580      	push	{r7, lr}
 80202de:	b082      	sub	sp, #8
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	6078      	str	r0, [r7, #4]
 80202e4:	6878      	ldr	r0, [r7, #4]
 80202e6:	f000 f848 	bl	802037a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEEC1Ev>
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	4618      	mov	r0, r3
 80202ee:	3708      	adds	r7, #8
 80202f0:	46bd      	mov	sp, r7
 80202f2:	bd80      	pop	{r7, pc}

080202f4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80202f4:	b480      	push	{r7}
 80202f6:	b083      	sub	sp, #12
 80202f8:	af00      	add	r7, sp, #0
 80202fa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80202fc:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8020300:	4618      	mov	r0, r3
 8020302:	370c      	adds	r7, #12
 8020304:	46bd      	mov	sp, r7
 8020306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802030a:	4770      	bx	lr

0802030c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 802030c:	b480      	push	{r7}
 802030e:	b083      	sub	sp, #12
 8020310:	af00      	add	r7, sp, #0
 8020312:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8020314:	4b03      	ldr	r3, [pc, #12]	; (8020324 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt3mapIhSt8functionIFbvEESt4lessIhESaIS2_IS3_S7_EEEEEE11_M_max_sizeEv+0x18>)
      }
 8020316:	4618      	mov	r0, r3
 8020318:	370c      	adds	r7, #12
 802031a:	46bd      	mov	sp, r7
 802031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020320:	4770      	bx	lr
 8020322:	bf00      	nop
 8020324:	02e8ba2e 	.word	0x02e8ba2e

08020328 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEC1Ev>:
 8020328:	b580      	push	{r7, lr}
 802032a:	b082      	sub	sp, #8
 802032c:	af00      	add	r7, sp, #0
 802032e:	6078      	str	r0, [r7, #4]
 8020330:	6878      	ldr	r0, [r7, #4]
 8020332:	f000 f82d 	bl	8020390 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEC1Ev>
 8020336:	687b      	ldr	r3, [r7, #4]
 8020338:	4618      	mov	r0, r3
 802033a:	3708      	adds	r7, #8
 802033c:	46bd      	mov	sp, r7
 802033e:	bd80      	pop	{r7, pc}

08020340 <_ZSt7forwardISt8functionIFvvEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8020340:	b480      	push	{r7}
 8020342:	b083      	sub	sp, #12
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	4618      	mov	r0, r3
 802034c:	370c      	adds	r7, #12
 802034e:	46bd      	mov	sp, r7
 8020350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020354:	4770      	bx	lr

08020356 <_ZNSt8functionIFvvEEC1EOS1_>:
      function(function&& __x) noexcept : _Function_base()
 8020356:	b580      	push	{r7, lr}
 8020358:	b082      	sub	sp, #8
 802035a:	af00      	add	r7, sp, #0
 802035c:	6078      	str	r0, [r7, #4]
 802035e:	6039      	str	r1, [r7, #0]
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	4618      	mov	r0, r3
 8020364:	f7e1 f8e7 	bl	8001536 <_ZNSt14_Function_baseC1Ev>
	__x.swap(*this);
 8020368:	6879      	ldr	r1, [r7, #4]
 802036a:	6838      	ldr	r0, [r7, #0]
 802036c:	f7f6 fb59 	bl	8016a22 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 8020370:	687b      	ldr	r3, [r7, #4]
 8020372:	4618      	mov	r0, r3
 8020374:	3708      	adds	r7, #8
 8020376:	46bd      	mov	sp, r7
 8020378:	bd80      	pop	{r7, pc}

0802037a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt6vectorISt8functionIFvvEESaIS7_EEEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 802037a:	b480      	push	{r7}
 802037c:	b083      	sub	sp, #12
 802037e:	af00      	add	r7, sp, #0
 8020380:	6078      	str	r0, [r7, #4]
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	4618      	mov	r0, r3
 8020386:	370c      	adds	r7, #12
 8020388:	46bd      	mov	sp, r7
 802038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802038e:	4770      	bx	lr

08020390 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhSt8functionIFbvEEEEEC1Ev>:
 8020390:	b480      	push	{r7}
 8020392:	b083      	sub	sp, #12
 8020394:	af00      	add	r7, sp, #0
 8020396:	6078      	str	r0, [r7, #4]
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	4618      	mov	r0, r3
 802039c:	370c      	adds	r7, #12
 802039e:	46bd      	mov	sp, r7
 80203a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a4:	4770      	bx	lr

080203a6 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 80203a6:	b480      	push	{r7}
 80203a8:	b083      	sub	sp, #12
 80203aa:	af00      	add	r7, sp, #0
 80203ac:	6078      	str	r0, [r7, #4]
 80203ae:	6039      	str	r1, [r7, #0]
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	4618      	mov	r0, r3
 80203b4:	370c      	adds	r7, #12
 80203b6:	46bd      	mov	sp, r7
 80203b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203bc:	4770      	bx	lr

080203be <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 80203be:	b480      	push	{r7}
 80203c0:	b083      	sub	sp, #12
 80203c2:	af00      	add	r7, sp, #0
 80203c4:	7138      	strb	r0, [r7, #4]
 80203c6:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 80203c8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	bf0c      	ite	eq
 80203d0:	2301      	moveq	r3, #1
 80203d2:	2300      	movne	r3, #0
 80203d4:	b2db      	uxtb	r3, r3
 80203d6:	4618      	mov	r0, r3
 80203d8:	370c      	adds	r7, #12
 80203da:	46bd      	mov	sp, r7
 80203dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e0:	4770      	bx	lr

080203e2 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 80203e2:	b480      	push	{r7}
 80203e4:	b083      	sub	sp, #12
 80203e6:	af00      	add	r7, sp, #0
 80203e8:	7138      	strb	r0, [r7, #4]
 80203ea:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 80203ec:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80203f0:	b2db      	uxtb	r3, r3
 80203f2:	09db      	lsrs	r3, r3, #7
 80203f4:	b2db      	uxtb	r3, r3
 80203f6:	4618      	mov	r0, r3
 80203f8:	370c      	adds	r7, #12
 80203fa:	46bd      	mov	sp, r7
 80203fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020400:	4770      	bx	lr

08020402 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      _Vector_base() = default;
 8020402:	b580      	push	{r7, lr}
 8020404:	b082      	sub	sp, #8
 8020406:	af00      	add	r7, sp, #0
 8020408:	6078      	str	r0, [r7, #4]
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	4618      	mov	r0, r3
 802040e:	f000 f8ce 	bl	80205ae <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	4618      	mov	r0, r3
 8020416:	3708      	adds	r7, #8
 8020418:	46bd      	mov	sp, r7
 802041a:	bd80      	pop	{r7, pc}

0802041c <_ZNSt6vectorImSaImEEC1Ev>:
      vector() = default;
 802041c:	b580      	push	{r7, lr}
 802041e:	b082      	sub	sp, #8
 8020420:	af00      	add	r7, sp, #0
 8020422:	6078      	str	r0, [r7, #4]
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	4618      	mov	r0, r3
 8020428:	f7ff ffeb 	bl	8020402 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	4618      	mov	r0, r3
 8020430:	3708      	adds	r7, #8
 8020432:	46bd      	mov	sp, r7
 8020434:	bd80      	pop	{r7, pc}

08020436 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>:
public:
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_HandleTypeDef* handle, uint16_t period) : handle(handle), period(period) {};
 8020436:	b480      	push	{r7}
 8020438:	b085      	sub	sp, #20
 802043a:	af00      	add	r7, sp, #0
 802043c:	60f8      	str	r0, [r7, #12]
 802043e:	60b9      	str	r1, [r7, #8]
 8020440:	4613      	mov	r3, r2
 8020442:	80fb      	strh	r3, [r7, #6]
 8020444:	68fb      	ldr	r3, [r7, #12]
 8020446:	68ba      	ldr	r2, [r7, #8]
 8020448:	601a      	str	r2, [r3, #0]
 802044a:	68fb      	ldr	r3, [r7, #12]
 802044c:	88fa      	ldrh	r2, [r7, #6]
 802044e:	809a      	strh	r2, [r3, #4]
 8020450:	68fb      	ldr	r3, [r7, #12]
 8020452:	4618      	mov	r0, r3
 8020454:	3714      	adds	r7, #20
 8020456:	46bd      	mov	sp, r7
 8020458:	f85d 7b04 	ldr.w	r7, [sp], #4
 802045c:	4770      	bx	lr

0802045e <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 802045e:	b580      	push	{r7, lr}
 8020460:	b082      	sub	sp, #8
 8020462:	af00      	add	r7, sp, #0
 8020464:	6078      	str	r0, [r7, #4]
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	4618      	mov	r0, r3
 802046a:	f000 f937 	bl	80206dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	4618      	mov	r0, r3
 8020472:	3708      	adds	r7, #8
 8020474:	46bd      	mov	sp, r7
 8020476:	bd80      	pop	{r7, pc}

08020478 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8020478:	b580      	push	{r7, lr}
 802047a:	b084      	sub	sp, #16
 802047c:	af00      	add	r7, sp, #0
 802047e:	60f8      	str	r0, [r7, #12]
 8020480:	60b9      	str	r1, [r7, #8]
 8020482:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8020484:	68b8      	ldr	r0, [r7, #8]
 8020486:	f000 f812 	bl	80204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 802048a:	4602      	mov	r2, r0
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020492:	e883 0003 	stmia.w	r3, {r0, r1}
 8020496:	68fb      	ldr	r3, [r7, #12]
 8020498:	687a      	ldr	r2, [r7, #4]
 802049a:	3308      	adds	r3, #8
 802049c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80204a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	4618      	mov	r0, r3
 80204a8:	3710      	adds	r7, #16
 80204aa:	46bd      	mov	sp, r7
 80204ac:	bd80      	pop	{r7, pc}

080204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80204ae:	b480      	push	{r7}
 80204b0:	b083      	sub	sp, #12
 80204b2:	af00      	add	r7, sp, #0
 80204b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	4618      	mov	r0, r3
 80204ba:	370c      	adds	r7, #12
 80204bc:	46bd      	mov	sp, r7
 80204be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204c2:	4770      	bx	lr

080204c4 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>:
 80204c4:	b580      	push	{r7, lr}
 80204c6:	b082      	sub	sp, #8
 80204c8:	af00      	add	r7, sp, #0
 80204ca:	6078      	str	r0, [r7, #4]
 80204cc:	687b      	ldr	r3, [r7, #4]
 80204ce:	4618      	mov	r0, r3
 80204d0:	f000 f960 	bl	8020794 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	4618      	mov	r0, r3
 80204d8:	3708      	adds	r7, #8
 80204da:	46bd      	mov	sp, r7
 80204dc:	bd80      	pop	{r7, pc}

080204de <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80204de:	b580      	push	{r7, lr}
 80204e0:	b082      	sub	sp, #8
 80204e2:	af00      	add	r7, sp, #0
 80204e4:	6078      	str	r0, [r7, #4]
 80204e6:	6878      	ldr	r0, [r7, #4]
 80204e8:	f000 f97e 	bl	80207e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	4618      	mov	r0, r3
 80204f0:	3708      	adds	r7, #8
 80204f2:	46bd      	mov	sp, r7
 80204f4:	bd80      	pop	{r7, pc}

080204f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 80204f6:	b580      	push	{r7, lr}
 80204f8:	b082      	sub	sp, #8
 80204fa:	af00      	add	r7, sp, #0
 80204fc:	6078      	str	r0, [r7, #4]
 80204fe:	687b      	ldr	r3, [r7, #4]
 8020500:	4618      	mov	r0, r3
 8020502:	f000 f95c 	bl	80207be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	4618      	mov	r0, r3
 802050a:	3708      	adds	r7, #8
 802050c:	46bd      	mov	sp, r7
 802050e:	bd80      	pop	{r7, pc}

08020510 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>:
      map() = default;
 8020510:	b580      	push	{r7, lr}
 8020512:	b082      	sub	sp, #8
 8020514:	af00      	add	r7, sp, #0
 8020516:	6078      	str	r0, [r7, #4]
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	4618      	mov	r0, r3
 802051c:	f7ff ffeb 	bl	80204f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	4618      	mov	r0, r3
 8020524:	3708      	adds	r7, #8
 8020526:	46bd      	mov	sp, r7
 8020528:	bd80      	pop	{r7, pc}

0802052a <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>:
      ~map() = default;
 802052a:	b580      	push	{r7, lr}
 802052c:	b082      	sub	sp, #8
 802052e:	af00      	add	r7, sp, #0
 8020530:	6078      	str	r0, [r7, #4]
 8020532:	687b      	ldr	r3, [r7, #4]
 8020534:	4618      	mov	r0, r3
 8020536:	f000 f9ce 	bl	80208d6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	4618      	mov	r0, r3
 802053e:	3708      	adds	r7, #8
 8020540:	46bd      	mov	sp, r7
 8020542:	bd80      	pop	{r7, pc}

08020544 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 8020544:	b580      	push	{r7, lr}
 8020546:	b082      	sub	sp, #8
 8020548:	af00      	add	r7, sp, #0
 802054a:	6078      	str	r0, [r7, #4]
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	4618      	mov	r0, r3
 8020550:	f000 fa4b 	bl	80209ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	4618      	mov	r0, r3
 8020558:	3708      	adds	r7, #8
 802055a:	46bd      	mov	sp, r7
 802055c:	bd80      	pop	{r7, pc}

0802055e <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 802055e:	b580      	push	{r7, lr}
 8020560:	b082      	sub	sp, #8
 8020562:	af00      	add	r7, sp, #0
 8020564:	6078      	str	r0, [r7, #4]
 8020566:	687b      	ldr	r3, [r7, #4]
 8020568:	3310      	adds	r3, #16
 802056a:	4618      	mov	r0, r3
 802056c:	f7f1 ffb3 	bl	80124d6 <_ZN3ADC8InitDataD1Ev>
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	4618      	mov	r0, r3
 8020574:	3708      	adds	r7, #8
 8020576:	46bd      	mov	sp, r7
 8020578:	bd80      	pop	{r7, pc}

0802057a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 802057a:	b580      	push	{r7, lr}
 802057c:	b082      	sub	sp, #8
 802057e:	af00      	add	r7, sp, #0
 8020580:	6078      	str	r0, [r7, #4]
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	4618      	mov	r0, r3
 8020586:	f000 fab5 	bl	8020af4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	4618      	mov	r0, r3
 802058e:	3708      	adds	r7, #8
 8020590:	46bd      	mov	sp, r7
 8020592:	bd80      	pop	{r7, pc}

08020594 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
 8020594:	b580      	push	{r7, lr}
 8020596:	b082      	sub	sp, #8
 8020598:	af00      	add	r7, sp, #0
 802059a:	6078      	str	r0, [r7, #4]
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	4618      	mov	r0, r3
 80205a0:	f000 fb4b 	bl	8020c3a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	4618      	mov	r0, r3
 80205a8:	3708      	adds	r7, #8
 80205aa:	46bd      	mov	sp, r7
 80205ac:	bd80      	pop	{r7, pc}

080205ae <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80205ae:	b580      	push	{r7, lr}
 80205b0:	b082      	sub	sp, #8
 80205b2:	af00      	add	r7, sp, #0
 80205b4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80205b6:	6878      	ldr	r0, [r7, #4]
 80205b8:	f000 fb54 	bl	8020c64 <_ZNSaImEC1Ev>
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	4618      	mov	r0, r3
 80205c0:	f7f2 fd79 	bl	80130b6 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80205c4:	687b      	ldr	r3, [r7, #4]
 80205c6:	4618      	mov	r0, r3
 80205c8:	3708      	adds	r7, #8
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd80      	pop	{r7, pc}

080205ce <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80205ce:	b580      	push	{r7, lr}
 80205d0:	b084      	sub	sp, #16
 80205d2:	af00      	add	r7, sp, #0
 80205d4:	60f8      	str	r0, [r7, #12]
 80205d6:	60b9      	str	r1, [r7, #8]
 80205d8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80205da:	68b8      	ldr	r0, [r7, #8]
 80205dc:	f7ff ff67 	bl	80204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80205e0:	4602      	mov	r2, r0
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80205e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80205ec:	6878      	ldr	r0, [r7, #4]
 80205ee:	f7ff ff5e 	bl	80204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80205f2:	4602      	mov	r2, r0
 80205f4:	68fb      	ldr	r3, [r7, #12]
 80205f6:	3308      	adds	r3, #8
 80205f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80205fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8020600:	68fb      	ldr	r3, [r7, #12]
 8020602:	4618      	mov	r0, r3
 8020604:	3710      	adds	r7, #16
 8020606:	46bd      	mov	sp, r7
 8020608:	bd80      	pop	{r7, pc}

0802060a <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 802060a:	b490      	push	{r4, r7}
 802060c:	b084      	sub	sp, #16
 802060e:	af00      	add	r7, sp, #0
 8020610:	60f8      	str	r0, [r7, #12]
 8020612:	60b9      	str	r1, [r7, #8]
 8020614:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8020616:	68fa      	ldr	r2, [r7, #12]
 8020618:	68bb      	ldr	r3, [r7, #8]
 802061a:	4614      	mov	r4, r2
 802061c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802061e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	681a      	ldr	r2, [r3, #0]
 8020626:	68fb      	ldr	r3, [r7, #12]
 8020628:	611a      	str	r2, [r3, #16]
 802062a:	68fb      	ldr	r3, [r7, #12]
 802062c:	4618      	mov	r0, r3
 802062e:	3710      	adds	r7, #16
 8020630:	46bd      	mov	sp, r7
 8020632:	bc90      	pop	{r4, r7}
 8020634:	4770      	bx	lr

08020636 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>:
 8020636:	b580      	push	{r7, lr}
 8020638:	b082      	sub	sp, #8
 802063a:	af00      	add	r7, sp, #0
 802063c:	6078      	str	r0, [r7, #4]
 802063e:	6878      	ldr	r0, [r7, #4]
 8020640:	f000 fb1c 	bl	8020c7c <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	4618      	mov	r0, r3
 8020648:	3708      	adds	r7, #8
 802064a:	46bd      	mov	sp, r7
 802064c:	bd80      	pop	{r7, pc}

0802064e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802064e:	b480      	push	{r7}
 8020650:	b083      	sub	sp, #12
 8020652:	af00      	add	r7, sp, #0
 8020654:	6078      	str	r0, [r7, #4]
 8020656:	687b      	ldr	r3, [r7, #4]
 8020658:	4618      	mov	r0, r3
 802065a:	370c      	adds	r7, #12
 802065c:	46bd      	mov	sp, r7
 802065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020662:	4770      	bx	lr

08020664 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 8020664:	b5b0      	push	{r4, r5, r7, lr}
 8020666:	b086      	sub	sp, #24
 8020668:	af00      	add	r7, sp, #0
 802066a:	60f8      	str	r0, [r7, #12]
 802066c:	1d38      	adds	r0, r7, #4
 802066e:	e880 0006 	stmia.w	r0, {r1, r2}
 8020672:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8020674:	68fc      	ldr	r4, [r7, #12]
 8020676:	f107 0314 	add.w	r3, r7, #20
 802067a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802067c:	4618      	mov	r0, r3
 802067e:	f000 fb08 	bl	8020c92 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>
 8020682:	f107 0314 	add.w	r3, r7, #20
 8020686:	461a      	mov	r2, r3
 8020688:	6839      	ldr	r1, [r7, #0]
 802068a:	4620      	mov	r0, r4
 802068c:	f000 fb0f 	bl	8020cae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 8020690:	f107 0314 	add.w	r3, r7, #20
 8020694:	4618      	mov	r0, r3
 8020696:	f7ff ffda 	bl	802064e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 802069a:	68fc      	ldr	r4, [r7, #12]
 802069c:	1d3b      	adds	r3, r7, #4
 802069e:	4618      	mov	r0, r3
 80206a0:	f000 fb23 	bl	8020cea <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 80206a4:	4605      	mov	r5, r0
 80206a6:	1d3b      	adds	r3, r7, #4
 80206a8:	4618      	mov	r0, r3
 80206aa:	f000 fb2a 	bl	8020d02 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>
 80206ae:	4603      	mov	r3, r0
 80206b0:	461a      	mov	r2, r3
 80206b2:	4629      	mov	r1, r5
 80206b4:	4620      	mov	r0, r4
 80206b6:	f000 fb39 	bl	8020d2c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	4618      	mov	r0, r3
 80206be:	3718      	adds	r7, #24
 80206c0:	46bd      	mov	sp, r7
 80206c2:	bdb0      	pop	{r4, r5, r7, pc}

080206c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80206c4:	b580      	push	{r7, lr}
 80206c6:	b082      	sub	sp, #8
 80206c8:	af00      	add	r7, sp, #0
 80206ca:	6078      	str	r0, [r7, #4]
 80206cc:	6878      	ldr	r0, [r7, #4]
 80206ce:	f000 fb59 	bl	8020d84 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 80206d2:	687b      	ldr	r3, [r7, #4]
 80206d4:	4618      	mov	r0, r3
 80206d6:	3708      	adds	r7, #8
 80206d8:	46bd      	mov	sp, r7
 80206da:	bd80      	pop	{r7, pc}

080206dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80206dc:	b580      	push	{r7, lr}
 80206de:	b082      	sub	sp, #8
 80206e0:	af00      	add	r7, sp, #0
 80206e2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80206e4:	6878      	ldr	r0, [r7, #4]
 80206e6:	f000 fb77 	bl	8020dd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 80206ea:	4603      	mov	r3, r0
 80206ec:	4619      	mov	r1, r3
 80206ee:	6878      	ldr	r0, [r7, #4]
 80206f0:	f000 fb53 	bl	8020d9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	4618      	mov	r0, r3
 80206f8:	f7ff ffe4 	bl	80206c4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	4618      	mov	r0, r3
 8020700:	3708      	adds	r7, #8
 8020702:	46bd      	mov	sp, r7
 8020704:	bd80      	pop	{r7, pc}

08020706 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020706:	b580      	push	{r7, lr}
 8020708:	b082      	sub	sp, #8
 802070a:	af00      	add	r7, sp, #0
 802070c:	6078      	str	r0, [r7, #4]
 802070e:	6878      	ldr	r0, [r7, #4]
 8020710:	f000 fb6e 	bl	8020df0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	4618      	mov	r0, r3
 8020718:	3708      	adds	r7, #8
 802071a:	46bd      	mov	sp, r7
 802071c:	bd80      	pop	{r7, pc}

0802071e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802071e:	b480      	push	{r7}
 8020720:	b083      	sub	sp, #12
 8020722:	af00      	add	r7, sp, #0
 8020724:	6078      	str	r0, [r7, #4]
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	4618      	mov	r0, r3
 802072a:	370c      	adds	r7, #12
 802072c:	46bd      	mov	sp, r7
 802072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020732:	4770      	bx	lr

08020734 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 8020734:	b5b0      	push	{r4, r5, r7, lr}
 8020736:	b086      	sub	sp, #24
 8020738:	af00      	add	r7, sp, #0
 802073a:	60f8      	str	r0, [r7, #12]
 802073c:	1d38      	adds	r0, r7, #4
 802073e:	e880 0006 	stmia.w	r0, {r1, r2}
 8020742:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8020744:	68fc      	ldr	r4, [r7, #12]
 8020746:	f107 0314 	add.w	r3, r7, #20
 802074a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802074c:	4618      	mov	r0, r3
 802074e:	f000 fb5a 	bl	8020e06 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>
 8020752:	f107 0314 	add.w	r3, r7, #20
 8020756:	461a      	mov	r2, r3
 8020758:	6839      	ldr	r1, [r7, #0]
 802075a:	4620      	mov	r0, r4
 802075c:	f000 fb61 	bl	8020e22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>
 8020760:	f107 0314 	add.w	r3, r7, #20
 8020764:	4618      	mov	r0, r3
 8020766:	f7ff ffda 	bl	802071e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 802076a:	68fc      	ldr	r4, [r7, #12]
 802076c:	1d3b      	adds	r3, r7, #4
 802076e:	4618      	mov	r0, r3
 8020770:	f000 fb75 	bl	8020e5e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 8020774:	4605      	mov	r5, r0
 8020776:	1d3b      	adds	r3, r7, #4
 8020778:	4618      	mov	r0, r3
 802077a:	f000 fb7c 	bl	8020e76 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>
 802077e:	4603      	mov	r3, r0
 8020780:	461a      	mov	r2, r3
 8020782:	4629      	mov	r1, r5
 8020784:	4620      	mov	r0, r4
 8020786:	f000 fb88 	bl	8020e9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	4618      	mov	r0, r3
 802078e:	3718      	adds	r7, #24
 8020790:	46bd      	mov	sp, r7
 8020792:	bdb0      	pop	{r4, r5, r7, pc}

08020794 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8020794:	b580      	push	{r7, lr}
 8020796:	b082      	sub	sp, #8
 8020798:	af00      	add	r7, sp, #0
 802079a:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 802079c:	6878      	ldr	r0, [r7, #4]
 802079e:	f000 fbc7 	bl	8020f30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 80207a2:	4603      	mov	r3, r0
 80207a4:	4619      	mov	r1, r3
 80207a6:	6878      	ldr	r0, [r7, #4]
 80207a8:	f000 fba3 	bl	8020ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	4618      	mov	r0, r3
 80207b0:	f7ff fe95 	bl	80204de <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	4618      	mov	r0, r3
 80207b8:	3708      	adds	r7, #8
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}

080207be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80207be:	b580      	push	{r7, lr}
 80207c0:	b082      	sub	sp, #8
 80207c2:	af00      	add	r7, sp, #0
 80207c4:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80207c6:	6878      	ldr	r0, [r7, #4]
 80207c8:	f000 fbbe 	bl	8020f48 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 80207cc:	687b      	ldr	r3, [r7, #4]
 80207ce:	4618      	mov	r0, r3
 80207d0:	f000 fbc6 	bl	8020f60 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	3304      	adds	r3, #4
 80207d8:	4618      	mov	r0, r3
 80207da:	f7e0 fe4d 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80207de:	687b      	ldr	r3, [r7, #4]
 80207e0:	4618      	mov	r0, r3
 80207e2:	3708      	adds	r7, #8
 80207e4:	46bd      	mov	sp, r7
 80207e6:	bd80      	pop	{r7, pc}

080207e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>:
 80207e8:	b480      	push	{r7}
 80207ea:	b083      	sub	sp, #12
 80207ec:	af00      	add	r7, sp, #0
 80207ee:	6078      	str	r0, [r7, #4]
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	4618      	mov	r0, r3
 80207f4:	370c      	adds	r7, #12
 80207f6:	46bd      	mov	sp, r7
 80207f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207fc:	4770      	bx	lr

080207fe <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 80207fe:	b490      	push	{r4, r7}
 8020800:	b084      	sub	sp, #16
 8020802:	af00      	add	r7, sp, #0
 8020804:	60f8      	str	r0, [r7, #12]
 8020806:	60b9      	str	r1, [r7, #8]
 8020808:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 802080a:	68fa      	ldr	r2, [r7, #12]
 802080c:	68bb      	ldr	r3, [r7, #8]
 802080e:	4614      	mov	r4, r2
 8020810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8020812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	687a      	ldr	r2, [r7, #4]
 802081a:	3310      	adds	r3, #16
 802081c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020820:	e883 0003 	stmia.w	r3, {r0, r1}
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	4618      	mov	r0, r3
 8020828:	3710      	adds	r7, #16
 802082a:	46bd      	mov	sp, r7
 802082c:	bc90      	pop	{r4, r7}
 802082e:	4770      	bx	lr

08020830 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020830:	b580      	push	{r7, lr}
 8020832:	b082      	sub	sp, #8
 8020834:	af00      	add	r7, sp, #0
 8020836:	6078      	str	r0, [r7, #4]
 8020838:	6878      	ldr	r0, [r7, #4]
 802083a:	f000 fb9c 	bl	8020f76 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	4618      	mov	r0, r3
 8020842:	3708      	adds	r7, #8
 8020844:	46bd      	mov	sp, r7
 8020846:	bd80      	pop	{r7, pc}

08020848 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020848:	b480      	push	{r7}
 802084a:	b083      	sub	sp, #12
 802084c:	af00      	add	r7, sp, #0
 802084e:	6078      	str	r0, [r7, #4]
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	4618      	mov	r0, r3
 8020854:	370c      	adds	r7, #12
 8020856:	46bd      	mov	sp, r7
 8020858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085c:	4770      	bx	lr

0802085e <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>:
      map(initializer_list<value_type> __l,
 802085e:	b5b0      	push	{r4, r5, r7, lr}
 8020860:	b086      	sub	sp, #24
 8020862:	af00      	add	r7, sp, #0
 8020864:	60f8      	str	r0, [r7, #12]
 8020866:	1d38      	adds	r0, r7, #4
 8020868:	e880 0006 	stmia.w	r0, {r1, r2}
 802086c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 802086e:	68fc      	ldr	r4, [r7, #12]
 8020870:	f107 0314 	add.w	r3, r7, #20
 8020874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020876:	4618      	mov	r0, r3
 8020878:	f000 fb88 	bl	8020f8c <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>
 802087c:	f107 0314 	add.w	r3, r7, #20
 8020880:	461a      	mov	r2, r3
 8020882:	6839      	ldr	r1, [r7, #0]
 8020884:	4620      	mov	r0, r4
 8020886:	f000 fb8f 	bl	8020fa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>
 802088a:	f107 0314 	add.w	r3, r7, #20
 802088e:	4618      	mov	r0, r3
 8020890:	f7ff ffda 	bl	8020848 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8020894:	68fc      	ldr	r4, [r7, #12]
 8020896:	1d3b      	adds	r3, r7, #4
 8020898:	4618      	mov	r0, r3
 802089a:	f000 fba3 	bl	8020fe4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 802089e:	4605      	mov	r5, r0
 80208a0:	1d3b      	adds	r3, r7, #4
 80208a2:	4618      	mov	r0, r3
 80208a4:	f000 fbaa 	bl	8020ffc <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>
 80208a8:	4603      	mov	r3, r0
 80208aa:	461a      	mov	r2, r3
 80208ac:	4629      	mov	r1, r5
 80208ae:	4620      	mov	r0, r4
 80208b0:	f000 fbb9 	bl	8021026 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	4618      	mov	r0, r3
 80208b8:	3718      	adds	r7, #24
 80208ba:	46bd      	mov	sp, r7
 80208bc:	bdb0      	pop	{r4, r5, r7, pc}

080208be <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80208be:	b580      	push	{r7, lr}
 80208c0:	b082      	sub	sp, #8
 80208c2:	af00      	add	r7, sp, #0
 80208c4:	6078      	str	r0, [r7, #4]
 80208c6:	6878      	ldr	r0, [r7, #4]
 80208c8:	f000 fbd9 	bl	802107e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	4618      	mov	r0, r3
 80208d0:	3708      	adds	r7, #8
 80208d2:	46bd      	mov	sp, r7
 80208d4:	bd80      	pop	{r7, pc}

080208d6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80208d6:	b580      	push	{r7, lr}
 80208d8:	b082      	sub	sp, #8
 80208da:	af00      	add	r7, sp, #0
 80208dc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80208de:	6878      	ldr	r0, [r7, #4]
 80208e0:	f000 fbf7 	bl	80210d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 80208e4:	4603      	mov	r3, r0
 80208e6:	4619      	mov	r1, r3
 80208e8:	6878      	ldr	r0, [r7, #4]
 80208ea:	f000 fbd3 	bl	8021094 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	4618      	mov	r0, r3
 80208f2:	f7ff ffe4 	bl	80208be <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	4618      	mov	r0, r3
 80208fa:	3708      	adds	r7, #8
 80208fc:	46bd      	mov	sp, r7
 80208fe:	bd80      	pop	{r7, pc}

08020900 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8020900:	b5b0      	push	{r4, r5, r7, lr}
 8020902:	b084      	sub	sp, #16
 8020904:	af00      	add	r7, sp, #0
 8020906:	60f8      	str	r0, [r7, #12]
 8020908:	60b9      	str	r1, [r7, #8]
 802090a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 802090c:	68b8      	ldr	r0, [r7, #8]
 802090e:	f7ff fdce 	bl	80204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8020912:	4602      	mov	r2, r0
 8020914:	68fb      	ldr	r3, [r7, #12]
 8020916:	e892 0003 	ldmia.w	r2, {r0, r1}
 802091a:	e883 0003 	stmia.w	r3, {r0, r1}
 802091e:	6878      	ldr	r0, [r7, #4]
 8020920:	f000 fbe3 	bl	80210ea <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8020924:	4602      	mov	r2, r0
 8020926:	68fb      	ldr	r3, [r7, #12]
 8020928:	f103 0408 	add.w	r4, r3, #8
 802092c:	4615      	mov	r5, r2
 802092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8020936:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802093a:	68fb      	ldr	r3, [r7, #12]
 802093c:	4618      	mov	r0, r3
 802093e:	3710      	adds	r7, #16
 8020940:	46bd      	mov	sp, r7
 8020942:	bdb0      	pop	{r4, r5, r7, pc}

08020944 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020944:	b580      	push	{r7, lr}
 8020946:	b082      	sub	sp, #8
 8020948:	af00      	add	r7, sp, #0
 802094a:	6078      	str	r0, [r7, #4]
 802094c:	6878      	ldr	r0, [r7, #4]
 802094e:	f000 fbd7 	bl	8021100 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	4618      	mov	r0, r3
 8020956:	3708      	adds	r7, #8
 8020958:	46bd      	mov	sp, r7
 802095a:	bd80      	pop	{r7, pc}

0802095c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802095c:	b480      	push	{r7}
 802095e:	b083      	sub	sp, #12
 8020960:	af00      	add	r7, sp, #0
 8020962:	6078      	str	r0, [r7, #4]
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	4618      	mov	r0, r3
 8020968:	370c      	adds	r7, #12
 802096a:	46bd      	mov	sp, r7
 802096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020970:	4770      	bx	lr

08020972 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 8020972:	b5b0      	push	{r4, r5, r7, lr}
 8020974:	b086      	sub	sp, #24
 8020976:	af00      	add	r7, sp, #0
 8020978:	60f8      	str	r0, [r7, #12]
 802097a:	1d38      	adds	r0, r7, #4
 802097c:	e880 0006 	stmia.w	r0, {r1, r2}
 8020980:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8020982:	68fc      	ldr	r4, [r7, #12]
 8020984:	f107 0314 	add.w	r3, r7, #20
 8020988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802098a:	4618      	mov	r0, r3
 802098c:	f000 fbc3 	bl	8021116 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>
 8020990:	f107 0314 	add.w	r3, r7, #20
 8020994:	461a      	mov	r2, r3
 8020996:	6839      	ldr	r1, [r7, #0]
 8020998:	4620      	mov	r0, r4
 802099a:	f000 fbca 	bl	8021132 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 802099e:	f107 0314 	add.w	r3, r7, #20
 80209a2:	4618      	mov	r0, r3
 80209a4:	f7ff ffda 	bl	802095c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80209a8:	68fc      	ldr	r4, [r7, #12]
 80209aa:	1d3b      	adds	r3, r7, #4
 80209ac:	4618      	mov	r0, r3
 80209ae:	f000 fbde 	bl	802116e <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 80209b2:	4605      	mov	r5, r0
 80209b4:	1d3b      	adds	r3, r7, #4
 80209b6:	4618      	mov	r0, r3
 80209b8:	f000 fbe5 	bl	8021186 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 80209bc:	4603      	mov	r3, r0
 80209be:	461a      	mov	r2, r3
 80209c0:	4629      	mov	r1, r5
 80209c2:	4620      	mov	r0, r4
 80209c4:	f000 fbf4 	bl	80211b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 80209c8:	68fb      	ldr	r3, [r7, #12]
 80209ca:	4618      	mov	r0, r3
 80209cc:	3718      	adds	r7, #24
 80209ce:	46bd      	mov	sp, r7
 80209d0:	bdb0      	pop	{r4, r5, r7, pc}

080209d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80209d2:	b580      	push	{r7, lr}
 80209d4:	b082      	sub	sp, #8
 80209d6:	af00      	add	r7, sp, #0
 80209d8:	6078      	str	r0, [r7, #4]
 80209da:	6878      	ldr	r0, [r7, #4]
 80209dc:	f000 fc14 	bl	8021208 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	4618      	mov	r0, r3
 80209e4:	3708      	adds	r7, #8
 80209e6:	46bd      	mov	sp, r7
 80209e8:	bd80      	pop	{r7, pc}

080209ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80209ea:	b580      	push	{r7, lr}
 80209ec:	b082      	sub	sp, #8
 80209ee:	af00      	add	r7, sp, #0
 80209f0:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80209f2:	6878      	ldr	r0, [r7, #4]
 80209f4:	f000 fc32 	bl	802125c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80209f8:	4603      	mov	r3, r0
 80209fa:	4619      	mov	r1, r3
 80209fc:	6878      	ldr	r0, [r7, #4]
 80209fe:	f000 fc0e 	bl	802121e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	4618      	mov	r0, r3
 8020a06:	f7ff ffe4 	bl	80209d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	4618      	mov	r0, r3
 8020a0e:	3708      	adds	r7, #8
 8020a10:	46bd      	mov	sp, r7
 8020a12:	bd80      	pop	{r7, pc}

08020a14 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8020a14:	b580      	push	{r7, lr}
 8020a16:	b084      	sub	sp, #16
 8020a18:	af00      	add	r7, sp, #0
 8020a1a:	60f8      	str	r0, [r7, #12]
 8020a1c:	60b9      	str	r1, [r7, #8]
 8020a1e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8020a20:	68b8      	ldr	r0, [r7, #8]
 8020a22:	f7ff fd44 	bl	80204ae <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8020a26:	4602      	mov	r2, r0
 8020a28:	68fb      	ldr	r3, [r7, #12]
 8020a2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020a2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8020a32:	6878      	ldr	r0, [r7, #4]
 8020a34:	f000 fc1e 	bl	8021274 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8020a38:	4602      	mov	r2, r0
 8020a3a:	68fb      	ldr	r3, [r7, #12]
 8020a3c:	3308      	adds	r3, #8
 8020a3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8020a40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	4618      	mov	r0, r3
 8020a48:	3710      	adds	r7, #16
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	bd80      	pop	{r7, pc}

08020a4e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020a4e:	b580      	push	{r7, lr}
 8020a50:	b082      	sub	sp, #8
 8020a52:	af00      	add	r7, sp, #0
 8020a54:	6078      	str	r0, [r7, #4]
 8020a56:	6878      	ldr	r0, [r7, #4]
 8020a58:	f000 fc17 	bl	802128a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	4618      	mov	r0, r3
 8020a60:	3708      	adds	r7, #8
 8020a62:	46bd      	mov	sp, r7
 8020a64:	bd80      	pop	{r7, pc}

08020a66 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020a66:	b480      	push	{r7}
 8020a68:	b083      	sub	sp, #12
 8020a6a:	af00      	add	r7, sp, #0
 8020a6c:	6078      	str	r0, [r7, #4]
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	4618      	mov	r0, r3
 8020a72:	370c      	adds	r7, #12
 8020a74:	46bd      	mov	sp, r7
 8020a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a7a:	4770      	bx	lr

08020a7c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 8020a7c:	b5b0      	push	{r4, r5, r7, lr}
 8020a7e:	b086      	sub	sp, #24
 8020a80:	af00      	add	r7, sp, #0
 8020a82:	60f8      	str	r0, [r7, #12]
 8020a84:	1d38      	adds	r0, r7, #4
 8020a86:	e880 0006 	stmia.w	r0, {r1, r2}
 8020a8a:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8020a8c:	68fc      	ldr	r4, [r7, #12]
 8020a8e:	f107 0314 	add.w	r3, r7, #20
 8020a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020a94:	4618      	mov	r0, r3
 8020a96:	f000 fc03 	bl	80212a0 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>
 8020a9a:	f107 0314 	add.w	r3, r7, #20
 8020a9e:	461a      	mov	r2, r3
 8020aa0:	6839      	ldr	r1, [r7, #0]
 8020aa2:	4620      	mov	r0, r4
 8020aa4:	f000 fc0a 	bl	80212bc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8020aa8:	f107 0314 	add.w	r3, r7, #20
 8020aac:	4618      	mov	r0, r3
 8020aae:	f7ff ffda 	bl	8020a66 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8020ab2:	68fc      	ldr	r4, [r7, #12]
 8020ab4:	1d3b      	adds	r3, r7, #4
 8020ab6:	4618      	mov	r0, r3
 8020ab8:	f000 fc1e 	bl	80212f8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8020abc:	4605      	mov	r5, r0
 8020abe:	1d3b      	adds	r3, r7, #4
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	f000 fc25 	bl	8021310 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 8020ac6:	4603      	mov	r3, r0
 8020ac8:	461a      	mov	r2, r3
 8020aca:	4629      	mov	r1, r5
 8020acc:	4620      	mov	r0, r4
 8020ace:	f000 fc34 	bl	802133a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8020ad2:	68fb      	ldr	r3, [r7, #12]
 8020ad4:	4618      	mov	r0, r3
 8020ad6:	3718      	adds	r7, #24
 8020ad8:	46bd      	mov	sp, r7
 8020ada:	bdb0      	pop	{r4, r5, r7, pc}

08020adc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8020adc:	b580      	push	{r7, lr}
 8020ade:	b082      	sub	sp, #8
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
 8020ae4:	6878      	ldr	r0, [r7, #4]
 8020ae6:	f000 fc54 	bl	8021392 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 8020aea:	687b      	ldr	r3, [r7, #4]
 8020aec:	4618      	mov	r0, r3
 8020aee:	3708      	adds	r7, #8
 8020af0:	46bd      	mov	sp, r7
 8020af2:	bd80      	pop	{r7, pc}

08020af4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8020af4:	b580      	push	{r7, lr}
 8020af6:	b082      	sub	sp, #8
 8020af8:	af00      	add	r7, sp, #0
 8020afa:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8020afc:	6878      	ldr	r0, [r7, #4]
 8020afe:	f7f4 f9f7 	bl	8014ef0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8020b02:	4603      	mov	r3, r0
 8020b04:	4619      	mov	r1, r3
 8020b06:	6878      	ldr	r0, [r7, #4]
 8020b08:	f000 fc4e 	bl	80213a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8020b0c:	687b      	ldr	r3, [r7, #4]
 8020b0e:	4618      	mov	r0, r3
 8020b10:	f7ff ffe4 	bl	8020adc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	4618      	mov	r0, r3
 8020b18:	3708      	adds	r7, #8
 8020b1a:	46bd      	mov	sp, r7
 8020b1c:	bd80      	pop	{r7, pc}

08020b1e <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8020b1e:	b480      	push	{r7}
 8020b20:	b083      	sub	sp, #12
 8020b22:	af00      	add	r7, sp, #0
 8020b24:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	4618      	mov	r0, r3
 8020b2a:	370c      	adds	r7, #12
 8020b2c:	46bd      	mov	sp, r7
 8020b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b32:	4770      	bx	lr

08020b34 <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
 8020b34:	b580      	push	{r7, lr}
 8020b36:	b082      	sub	sp, #8
 8020b38:	af00      	add	r7, sp, #0
 8020b3a:	6078      	str	r0, [r7, #4]
 8020b3c:	6039      	str	r1, [r7, #0]
 8020b3e:	687b      	ldr	r3, [r7, #4]
 8020b40:	683a      	ldr	r2, [r7, #0]
 8020b42:	4611      	mov	r1, r2
 8020b44:	4618      	mov	r0, r3
 8020b46:	f7ff fc06 	bl	8020356 <_ZNSt8functionIFvvEEC1EOS1_>
 8020b4a:	683b      	ldr	r3, [r7, #0]
 8020b4c:	7c1a      	ldrb	r2, [r3, #16]
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	741a      	strb	r2, [r3, #16]
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	4618      	mov	r0, r3
 8020b56:	3708      	adds	r7, #8
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	bd80      	pop	{r7, pc}

08020b5c <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8020b5c:	b590      	push	{r4, r7, lr}
 8020b5e:	b085      	sub	sp, #20
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	60f8      	str	r0, [r7, #12]
 8020b64:	60b9      	str	r1, [r7, #8]
 8020b66:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8020b68:	68b8      	ldr	r0, [r7, #8]
 8020b6a:	f7ff ffd8 	bl	8020b1e <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8020b6e:	4603      	mov	r3, r0
 8020b70:	881a      	ldrh	r2, [r3, #0]
 8020b72:	68fb      	ldr	r3, [r7, #12]
 8020b74:	801a      	strh	r2, [r3, #0]
 8020b76:	68fb      	ldr	r3, [r7, #12]
 8020b78:	1d1c      	adds	r4, r3, #4
 8020b7a:	6878      	ldr	r0, [r7, #4]
 8020b7c:	f000 fc33 	bl	80213e6 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8020b80:	4603      	mov	r3, r0
 8020b82:	4619      	mov	r1, r3
 8020b84:	4620      	mov	r0, r4
 8020b86:	f7ff ffd5 	bl	8020b34 <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	4618      	mov	r0, r3
 8020b8e:	3714      	adds	r7, #20
 8020b90:	46bd      	mov	sp, r7
 8020b92:	bd90      	pop	{r4, r7, pc}

08020b94 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b082      	sub	sp, #8
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
 8020b9c:	6878      	ldr	r0, [r7, #4]
 8020b9e:	f000 fc2d 	bl	80213fc <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	4618      	mov	r0, r3
 8020ba6:	3708      	adds	r7, #8
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	bd80      	pop	{r7, pc}

08020bac <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020bac:	b480      	push	{r7}
 8020bae:	b083      	sub	sp, #12
 8020bb0:	af00      	add	r7, sp, #0
 8020bb2:	6078      	str	r0, [r7, #4]
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	370c      	adds	r7, #12
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc0:	4770      	bx	lr

08020bc2 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 8020bc2:	b5b0      	push	{r4, r5, r7, lr}
 8020bc4:	b086      	sub	sp, #24
 8020bc6:	af00      	add	r7, sp, #0
 8020bc8:	60f8      	str	r0, [r7, #12]
 8020bca:	1d38      	adds	r0, r7, #4
 8020bcc:	e880 0006 	stmia.w	r0, {r1, r2}
 8020bd0:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8020bd2:	68fc      	ldr	r4, [r7, #12]
 8020bd4:	f107 0314 	add.w	r3, r7, #20
 8020bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020bda:	4618      	mov	r0, r3
 8020bdc:	f000 fc19 	bl	8021412 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>
 8020be0:	f107 0314 	add.w	r3, r7, #20
 8020be4:	461a      	mov	r2, r3
 8020be6:	6839      	ldr	r1, [r7, #0]
 8020be8:	4620      	mov	r0, r4
 8020bea:	f000 fc20 	bl	802142e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>
 8020bee:	f107 0314 	add.w	r3, r7, #20
 8020bf2:	4618      	mov	r0, r3
 8020bf4:	f7ff ffda 	bl	8020bac <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8020bf8:	68fc      	ldr	r4, [r7, #12]
 8020bfa:	1d3b      	adds	r3, r7, #4
 8020bfc:	4618      	mov	r0, r3
 8020bfe:	f000 fc34 	bl	802146a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 8020c02:	4605      	mov	r5, r0
 8020c04:	1d3b      	adds	r3, r7, #4
 8020c06:	4618      	mov	r0, r3
 8020c08:	f000 fc3b 	bl	8021482 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 8020c0c:	4603      	mov	r3, r0
 8020c0e:	461a      	mov	r2, r3
 8020c10:	4629      	mov	r1, r5
 8020c12:	4620      	mov	r0, r4
 8020c14:	f000 fc4a 	bl	80214ac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 8020c18:	68fb      	ldr	r3, [r7, #12]
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3718      	adds	r7, #24
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	bdb0      	pop	{r4, r5, r7, pc}

08020c22 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8020c22:	b580      	push	{r7, lr}
 8020c24:	b082      	sub	sp, #8
 8020c26:	af00      	add	r7, sp, #0
 8020c28:	6078      	str	r0, [r7, #4]
 8020c2a:	6878      	ldr	r0, [r7, #4]
 8020c2c:	f000 fc6a 	bl	8021504 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	4618      	mov	r0, r3
 8020c34:	3708      	adds	r7, #8
 8020c36:	46bd      	mov	sp, r7
 8020c38:	bd80      	pop	{r7, pc}

08020c3a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8020c3a:	b580      	push	{r7, lr}
 8020c3c:	b082      	sub	sp, #8
 8020c3e:	af00      	add	r7, sp, #0
 8020c40:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8020c42:	6878      	ldr	r0, [r7, #4]
 8020c44:	f7f6 fc91 	bl	801756a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8020c48:	4603      	mov	r3, r0
 8020c4a:	4619      	mov	r1, r3
 8020c4c:	6878      	ldr	r0, [r7, #4]
 8020c4e:	f000 fc64 	bl	802151a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	4618      	mov	r0, r3
 8020c56:	f7ff ffe4 	bl	8020c22 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8020c5a:	687b      	ldr	r3, [r7, #4]
 8020c5c:	4618      	mov	r0, r3
 8020c5e:	3708      	adds	r7, #8
 8020c60:	46bd      	mov	sp, r7
 8020c62:	bd80      	pop	{r7, pc}

08020c64 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020c64:	b580      	push	{r7, lr}
 8020c66:	b082      	sub	sp, #8
 8020c68:	af00      	add	r7, sp, #0
 8020c6a:	6078      	str	r0, [r7, #4]
 8020c6c:	6878      	ldr	r0, [r7, #4]
 8020c6e:	f000 fc73 	bl	8021558 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8020c72:	687b      	ldr	r3, [r7, #4]
 8020c74:	4618      	mov	r0, r3
 8020c76:	3708      	adds	r7, #8
 8020c78:	46bd      	mov	sp, r7
 8020c7a:	bd80      	pop	{r7, pc}

08020c7c <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>:
 8020c7c:	b480      	push	{r7}
 8020c7e:	b083      	sub	sp, #12
 8020c80:	af00      	add	r7, sp, #0
 8020c82:	6078      	str	r0, [r7, #4]
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	4618      	mov	r0, r3
 8020c88:	370c      	adds	r7, #12
 8020c8a:	46bd      	mov	sp, r7
 8020c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c90:	4770      	bx	lr

08020c92 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8020c92:	b580      	push	{r7, lr}
 8020c94:	b082      	sub	sp, #8
 8020c96:	af00      	add	r7, sp, #0
 8020c98:	6078      	str	r0, [r7, #4]
 8020c9a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8020c9c:	6839      	ldr	r1, [r7, #0]
 8020c9e:	6878      	ldr	r0, [r7, #4]
 8020ca0:	f000 fc65 	bl	802156e <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	4618      	mov	r0, r3
 8020ca8:	3708      	adds	r7, #8
 8020caa:	46bd      	mov	sp, r7
 8020cac:	bd80      	pop	{r7, pc}

08020cae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 8020cae:	b590      	push	{r4, r7, lr}
 8020cb0:	b087      	sub	sp, #28
 8020cb2:	af00      	add	r7, sp, #0
 8020cb4:	60f8      	str	r0, [r7, #12]
 8020cb6:	60b9      	str	r1, [r7, #8]
 8020cb8:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8020cba:	68fc      	ldr	r4, [r7, #12]
 8020cbc:	f107 0314 	add.w	r3, r7, #20
 8020cc0:	6879      	ldr	r1, [r7, #4]
 8020cc2:	4618      	mov	r0, r3
 8020cc4:	f000 fc5f 	bl	8021586 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>
 8020cc8:	f107 0314 	add.w	r3, r7, #20
 8020ccc:	461a      	mov	r2, r3
 8020cce:	68b9      	ldr	r1, [r7, #8]
 8020cd0:	4620      	mov	r0, r4
 8020cd2:	f000 fc65 	bl	80215a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 8020cd6:	f107 0314 	add.w	r3, r7, #20
 8020cda:	4618      	mov	r0, r3
 8020cdc:	f000 f852 	bl	8020d84 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 8020ce0:	68fb      	ldr	r3, [r7, #12]
 8020ce2:	4618      	mov	r0, r3
 8020ce4:	371c      	adds	r7, #28
 8020ce6:	46bd      	mov	sp, r7
 8020ce8:	bd90      	pop	{r4, r7, pc}

08020cea <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8020cea:	b480      	push	{r7}
 8020cec:	b083      	sub	sp, #12
 8020cee:	af00      	add	r7, sp, #0
 8020cf0:	6078      	str	r0, [r7, #4]
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	4618      	mov	r0, r3
 8020cf8:	370c      	adds	r7, #12
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d00:	4770      	bx	lr

08020d02 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8020d02:	b590      	push	{r4, r7, lr}
 8020d04:	b083      	sub	sp, #12
 8020d06:	af00      	add	r7, sp, #0
 8020d08:	6078      	str	r0, [r7, #4]
 8020d0a:	6878      	ldr	r0, [r7, #4]
 8020d0c:	f7ff ffed 	bl	8020cea <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 8020d10:	4604      	mov	r4, r0
 8020d12:	6878      	ldr	r0, [r7, #4]
 8020d14:	f000 fc61 	bl	80215da <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>
 8020d18:	4602      	mov	r2, r0
 8020d1a:	4613      	mov	r3, r2
 8020d1c:	009b      	lsls	r3, r3, #2
 8020d1e:	4413      	add	r3, r2
 8020d20:	009b      	lsls	r3, r3, #2
 8020d22:	4423      	add	r3, r4
 8020d24:	4618      	mov	r0, r3
 8020d26:	370c      	adds	r7, #12
 8020d28:	46bd      	mov	sp, r7
 8020d2a:	bd90      	pop	{r4, r7, pc}

08020d2c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b088      	sub	sp, #32
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	60f8      	str	r0, [r7, #12]
 8020d34:	60b9      	str	r1, [r7, #8]
 8020d36:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8020d38:	f107 0314 	add.w	r3, r7, #20
 8020d3c:	68f9      	ldr	r1, [r7, #12]
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f000 fc57 	bl	80215f2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 8020d44:	68ba      	ldr	r2, [r7, #8]
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	429a      	cmp	r2, r3
 8020d4a:	d017      	beq.n	8020d7c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8020d4c:	68f8      	ldr	r0, [r7, #12]
 8020d4e:	f000 fc5f 	bl	8021610 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 8020d52:	4603      	mov	r3, r0
 8020d54:	61fb      	str	r3, [r7, #28]
 8020d56:	f107 021c 	add.w	r2, r7, #28
 8020d5a:	f107 0318 	add.w	r3, r7, #24
 8020d5e:	4611      	mov	r1, r2
 8020d60:	4618      	mov	r0, r3
 8020d62:	f000 fc66 	bl	8021632 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8020d66:	f107 0314 	add.w	r3, r7, #20
 8020d6a:	68ba      	ldr	r2, [r7, #8]
 8020d6c:	69b9      	ldr	r1, [r7, #24]
 8020d6e:	68f8      	ldr	r0, [r7, #12]
 8020d70:	f000 fc6f 	bl	8021652 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8020d74:	68bb      	ldr	r3, [r7, #8]
 8020d76:	3314      	adds	r3, #20
 8020d78:	60bb      	str	r3, [r7, #8]
 8020d7a:	e7e3      	b.n	8020d44 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 8020d7c:	bf00      	nop
 8020d7e:	3720      	adds	r7, #32
 8020d80:	46bd      	mov	sp, r7
 8020d82:	bd80      	pop	{r7, pc}

08020d84 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8020d84:	b480      	push	{r7}
 8020d86:	b083      	sub	sp, #12
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	6078      	str	r0, [r7, #4]
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	4618      	mov	r0, r3
 8020d90:	370c      	adds	r7, #12
 8020d92:	46bd      	mov	sp, r7
 8020d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d98:	4770      	bx	lr

08020d9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8020d9a:	b580      	push	{r7, lr}
 8020d9c:	b084      	sub	sp, #16
 8020d9e:	af00      	add	r7, sp, #0
 8020da0:	6078      	str	r0, [r7, #4]
 8020da2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8020da4:	683b      	ldr	r3, [r7, #0]
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	d012      	beq.n	8020dd0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8020daa:	6838      	ldr	r0, [r7, #0]
 8020dac:	f000 fc84 	bl	80216b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8020db0:	4603      	mov	r3, r0
 8020db2:	4619      	mov	r1, r3
 8020db4:	6878      	ldr	r0, [r7, #4]
 8020db6:	f7ff fff0 	bl	8020d9a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8020dba:	6838      	ldr	r0, [r7, #0]
 8020dbc:	f000 fc88 	bl	80216d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8020dc0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8020dc2:	6839      	ldr	r1, [r7, #0]
 8020dc4:	6878      	ldr	r0, [r7, #4]
 8020dc6:	f000 fc8f 	bl	80216e8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8020dca:	68fb      	ldr	r3, [r7, #12]
 8020dcc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8020dce:	e7e9      	b.n	8020da4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8020dd0:	bf00      	nop
 8020dd2:	3710      	adds	r7, #16
 8020dd4:	46bd      	mov	sp, r7
 8020dd6:	bd80      	pop	{r7, pc}

08020dd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8020dd8:	b480      	push	{r7}
 8020dda:	b083      	sub	sp, #12
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	689b      	ldr	r3, [r3, #8]
 8020de4:	4618      	mov	r0, r3
 8020de6:	370c      	adds	r7, #12
 8020de8:	46bd      	mov	sp, r7
 8020dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dee:	4770      	bx	lr

08020df0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>:
 8020df0:	b480      	push	{r7}
 8020df2:	b083      	sub	sp, #12
 8020df4:	af00      	add	r7, sp, #0
 8020df6:	6078      	str	r0, [r7, #4]
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	4618      	mov	r0, r3
 8020dfc:	370c      	adds	r7, #12
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e04:	4770      	bx	lr

08020e06 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8020e06:	b580      	push	{r7, lr}
 8020e08:	b082      	sub	sp, #8
 8020e0a:	af00      	add	r7, sp, #0
 8020e0c:	6078      	str	r0, [r7, #4]
 8020e0e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8020e10:	6839      	ldr	r1, [r7, #0]
 8020e12:	6878      	ldr	r0, [r7, #4]
 8020e14:	f000 fc79 	bl	802170a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	4618      	mov	r0, r3
 8020e1c:	3708      	adds	r7, #8
 8020e1e:	46bd      	mov	sp, r7
 8020e20:	bd80      	pop	{r7, pc}

08020e22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 8020e22:	b590      	push	{r4, r7, lr}
 8020e24:	b087      	sub	sp, #28
 8020e26:	af00      	add	r7, sp, #0
 8020e28:	60f8      	str	r0, [r7, #12]
 8020e2a:	60b9      	str	r1, [r7, #8]
 8020e2c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8020e2e:	68fc      	ldr	r4, [r7, #12]
 8020e30:	f107 0314 	add.w	r3, r7, #20
 8020e34:	6879      	ldr	r1, [r7, #4]
 8020e36:	4618      	mov	r0, r3
 8020e38:	f000 fc73 	bl	8021722 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>
 8020e3c:	f107 0314 	add.w	r3, r7, #20
 8020e40:	461a      	mov	r2, r3
 8020e42:	68b9      	ldr	r1, [r7, #8]
 8020e44:	4620      	mov	r0, r4
 8020e46:	f000 fc79 	bl	802173c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8020e4a:	f107 0314 	add.w	r3, r7, #20
 8020e4e:	4618      	mov	r0, r3
 8020e50:	f7ff fcca 	bl	80207e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	4618      	mov	r0, r3
 8020e58:	371c      	adds	r7, #28
 8020e5a:	46bd      	mov	sp, r7
 8020e5c:	bd90      	pop	{r4, r7, pc}

08020e5e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8020e5e:	b480      	push	{r7}
 8020e60:	b083      	sub	sp, #12
 8020e62:	af00      	add	r7, sp, #0
 8020e64:	6078      	str	r0, [r7, #4]
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	681b      	ldr	r3, [r3, #0]
 8020e6a:	4618      	mov	r0, r3
 8020e6c:	370c      	adds	r7, #12
 8020e6e:	46bd      	mov	sp, r7
 8020e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e74:	4770      	bx	lr

08020e76 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8020e76:	b590      	push	{r4, r7, lr}
 8020e78:	b083      	sub	sp, #12
 8020e7a:	af00      	add	r7, sp, #0
 8020e7c:	6078      	str	r0, [r7, #4]
 8020e7e:	6878      	ldr	r0, [r7, #4]
 8020e80:	f7ff ffed 	bl	8020e5e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 8020e84:	4604      	mov	r4, r0
 8020e86:	6878      	ldr	r0, [r7, #4]
 8020e88:	f000 fc75 	bl	8021776 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>
 8020e8c:	4603      	mov	r3, r0
 8020e8e:	011b      	lsls	r3, r3, #4
 8020e90:	4423      	add	r3, r4
 8020e92:	4618      	mov	r0, r3
 8020e94:	370c      	adds	r7, #12
 8020e96:	46bd      	mov	sp, r7
 8020e98:	bd90      	pop	{r4, r7, pc}

08020e9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8020e9a:	b580      	push	{r7, lr}
 8020e9c:	b088      	sub	sp, #32
 8020e9e:	af00      	add	r7, sp, #0
 8020ea0:	60f8      	str	r0, [r7, #12]
 8020ea2:	60b9      	str	r1, [r7, #8]
 8020ea4:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8020ea6:	f107 0314 	add.w	r3, r7, #20
 8020eaa:	68f9      	ldr	r1, [r7, #12]
 8020eac:	4618      	mov	r0, r3
 8020eae:	f000 fc6e 	bl	802178e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 8020eb2:	68ba      	ldr	r2, [r7, #8]
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	429a      	cmp	r2, r3
 8020eb8:	d017      	beq.n	8020eea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8020eba:	68f8      	ldr	r0, [r7, #12]
 8020ebc:	f000 fc76 	bl	80217ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	61fb      	str	r3, [r7, #28]
 8020ec4:	f107 021c 	add.w	r2, r7, #28
 8020ec8:	f107 0318 	add.w	r3, r7, #24
 8020ecc:	4611      	mov	r1, r2
 8020ece:	4618      	mov	r0, r3
 8020ed0:	f000 fc7d 	bl	80217ce <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 8020ed4:	f107 0314 	add.w	r3, r7, #20
 8020ed8:	68ba      	ldr	r2, [r7, #8]
 8020eda:	69b9      	ldr	r1, [r7, #24]
 8020edc:	68f8      	ldr	r0, [r7, #12]
 8020ede:	f000 fc86 	bl	80217ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8020ee2:	68bb      	ldr	r3, [r7, #8]
 8020ee4:	3310      	adds	r3, #16
 8020ee6:	60bb      	str	r3, [r7, #8]
 8020ee8:	e7e3      	b.n	8020eb2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 8020eea:	bf00      	nop
 8020eec:	3720      	adds	r7, #32
 8020eee:	46bd      	mov	sp, r7
 8020ef0:	bd80      	pop	{r7, pc}

08020ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8020ef2:	b580      	push	{r7, lr}
 8020ef4:	b084      	sub	sp, #16
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	6078      	str	r0, [r7, #4]
 8020efa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8020efc:	683b      	ldr	r3, [r7, #0]
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d012      	beq.n	8020f28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8020f02:	6838      	ldr	r0, [r7, #0]
 8020f04:	f000 fca6 	bl	8021854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8020f08:	4603      	mov	r3, r0
 8020f0a:	4619      	mov	r1, r3
 8020f0c:	6878      	ldr	r0, [r7, #4]
 8020f0e:	f7ff fff0 	bl	8020ef2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8020f12:	6838      	ldr	r0, [r7, #0]
 8020f14:	f000 fcaa 	bl	802186c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8020f18:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8020f1a:	6839      	ldr	r1, [r7, #0]
 8020f1c:	6878      	ldr	r0, [r7, #4]
 8020f1e:	f000 fcb1 	bl	8021884 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8020f22:	68fb      	ldr	r3, [r7, #12]
 8020f24:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8020f26:	e7e9      	b.n	8020efc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8020f28:	bf00      	nop
 8020f2a:	3710      	adds	r7, #16
 8020f2c:	46bd      	mov	sp, r7
 8020f2e:	bd80      	pop	{r7, pc}

08020f30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8020f30:	b480      	push	{r7}
 8020f32:	b083      	sub	sp, #12
 8020f34:	af00      	add	r7, sp, #0
 8020f36:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	689b      	ldr	r3, [r3, #8]
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	370c      	adds	r7, #12
 8020f40:	46bd      	mov	sp, r7
 8020f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f46:	4770      	bx	lr

08020f48 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b082      	sub	sp, #8
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
 8020f50:	6878      	ldr	r0, [r7, #4]
 8020f52:	f000 fca8 	bl	80218a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	4618      	mov	r0, r3
 8020f5a:	3708      	adds	r7, #8
 8020f5c:	46bd      	mov	sp, r7
 8020f5e:	bd80      	pop	{r7, pc}

08020f60 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8020f60:	b480      	push	{r7}
 8020f62:	b083      	sub	sp, #12
 8020f64:	af00      	add	r7, sp, #0
 8020f66:	6078      	str	r0, [r7, #4]
      { }
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	4618      	mov	r0, r3
 8020f6c:	370c      	adds	r7, #12
 8020f6e:	46bd      	mov	sp, r7
 8020f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f74:	4770      	bx	lr

08020f76 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>:
 8020f76:	b480      	push	{r7}
 8020f78:	b083      	sub	sp, #12
 8020f7a:	af00      	add	r7, sp, #0
 8020f7c:	6078      	str	r0, [r7, #4]
 8020f7e:	687b      	ldr	r3, [r7, #4]
 8020f80:	4618      	mov	r0, r3
 8020f82:	370c      	adds	r7, #12
 8020f84:	46bd      	mov	sp, r7
 8020f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f8a:	4770      	bx	lr

08020f8c <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8020f8c:	b580      	push	{r7, lr}
 8020f8e:	b082      	sub	sp, #8
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
 8020f94:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8020f96:	6839      	ldr	r1, [r7, #0]
 8020f98:	6878      	ldr	r0, [r7, #4]
 8020f9a:	f000 fc8f 	bl	80218bc <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	4618      	mov	r0, r3
 8020fa2:	3708      	adds	r7, #8
 8020fa4:	46bd      	mov	sp, r7
 8020fa6:	bd80      	pop	{r7, pc}

08020fa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8020fa8:	b590      	push	{r4, r7, lr}
 8020faa:	b087      	sub	sp, #28
 8020fac:	af00      	add	r7, sp, #0
 8020fae:	60f8      	str	r0, [r7, #12]
 8020fb0:	60b9      	str	r1, [r7, #8]
 8020fb2:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8020fb4:	68fc      	ldr	r4, [r7, #12]
 8020fb6:	f107 0314 	add.w	r3, r7, #20
 8020fba:	6879      	ldr	r1, [r7, #4]
 8020fbc:	4618      	mov	r0, r3
 8020fbe:	f000 fc89 	bl	80218d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>
 8020fc2:	f107 0314 	add.w	r3, r7, #20
 8020fc6:	461a      	mov	r2, r3
 8020fc8:	68b9      	ldr	r1, [r7, #8]
 8020fca:	4620      	mov	r0, r4
 8020fcc:	f000 fc8f 	bl	80218ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8020fd0:	f107 0314 	add.w	r3, r7, #20
 8020fd4:	4618      	mov	r0, r3
 8020fd6:	f000 f852 	bl	802107e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 8020fda:	68fb      	ldr	r3, [r7, #12]
 8020fdc:	4618      	mov	r0, r3
 8020fde:	371c      	adds	r7, #28
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bd90      	pop	{r4, r7, pc}

08020fe4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8020fe4:	b480      	push	{r7}
 8020fe6:	b083      	sub	sp, #12
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	6078      	str	r0, [r7, #4]
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	4618      	mov	r0, r3
 8020ff2:	370c      	adds	r7, #12
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ffa:	4770      	bx	lr

08020ffc <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8020ffc:	b590      	push	{r4, r7, lr}
 8020ffe:	b083      	sub	sp, #12
 8021000:	af00      	add	r7, sp, #0
 8021002:	6078      	str	r0, [r7, #4]
 8021004:	6878      	ldr	r0, [r7, #4]
 8021006:	f7ff ffed 	bl	8020fe4 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 802100a:	4604      	mov	r4, r0
 802100c:	6878      	ldr	r0, [r7, #4]
 802100e:	f000 fc8b 	bl	8021928 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>
 8021012:	4602      	mov	r2, r0
 8021014:	4613      	mov	r3, r2
 8021016:	005b      	lsls	r3, r3, #1
 8021018:	4413      	add	r3, r2
 802101a:	00db      	lsls	r3, r3, #3
 802101c:	4423      	add	r3, r4
 802101e:	4618      	mov	r0, r3
 8021020:	370c      	adds	r7, #12
 8021022:	46bd      	mov	sp, r7
 8021024:	bd90      	pop	{r4, r7, pc}

08021026 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8021026:	b580      	push	{r7, lr}
 8021028:	b088      	sub	sp, #32
 802102a:	af00      	add	r7, sp, #0
 802102c:	60f8      	str	r0, [r7, #12]
 802102e:	60b9      	str	r1, [r7, #8]
 8021030:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8021032:	f107 0314 	add.w	r3, r7, #20
 8021036:	68f9      	ldr	r1, [r7, #12]
 8021038:	4618      	mov	r0, r3
 802103a:	f000 fc81 	bl	8021940 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 802103e:	68ba      	ldr	r2, [r7, #8]
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	429a      	cmp	r2, r3
 8021044:	d017      	beq.n	8021076 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8021046:	68f8      	ldr	r0, [r7, #12]
 8021048:	f000 fc89 	bl	802195e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>
 802104c:	4603      	mov	r3, r0
 802104e:	61fb      	str	r3, [r7, #28]
 8021050:	f107 021c 	add.w	r2, r7, #28
 8021054:	f107 0318 	add.w	r3, r7, #24
 8021058:	4611      	mov	r1, r2
 802105a:	4618      	mov	r0, r3
 802105c:	f000 fc90 	bl	8021980 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8021060:	f107 0314 	add.w	r3, r7, #20
 8021064:	68ba      	ldr	r2, [r7, #8]
 8021066:	69b9      	ldr	r1, [r7, #24]
 8021068:	68f8      	ldr	r0, [r7, #12]
 802106a:	f000 fc99 	bl	80219a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 802106e:	68bb      	ldr	r3, [r7, #8]
 8021070:	3318      	adds	r3, #24
 8021072:	60bb      	str	r3, [r7, #8]
 8021074:	e7e3      	b.n	802103e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8021076:	bf00      	nop
 8021078:	3720      	adds	r7, #32
 802107a:	46bd      	mov	sp, r7
 802107c:	bd80      	pop	{r7, pc}

0802107e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 802107e:	b480      	push	{r7}
 8021080:	b083      	sub	sp, #12
 8021082:	af00      	add	r7, sp, #0
 8021084:	6078      	str	r0, [r7, #4]
 8021086:	687b      	ldr	r3, [r7, #4]
 8021088:	4618      	mov	r0, r3
 802108a:	370c      	adds	r7, #12
 802108c:	46bd      	mov	sp, r7
 802108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021092:	4770      	bx	lr

08021094 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021094:	b580      	push	{r7, lr}
 8021096:	b084      	sub	sp, #16
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
 802109c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 802109e:	683b      	ldr	r3, [r7, #0]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d012      	beq.n	80210ca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 80210a4:	6838      	ldr	r0, [r7, #0]
 80210a6:	f000 fcae 	bl	8021a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80210aa:	4603      	mov	r3, r0
 80210ac:	4619      	mov	r1, r3
 80210ae:	6878      	ldr	r0, [r7, #4]
 80210b0:	f7ff fff0 	bl	8021094 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80210b4:	6838      	ldr	r0, [r7, #0]
 80210b6:	f000 fcb2 	bl	8021a1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80210ba:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80210bc:	6839      	ldr	r1, [r7, #0]
 80210be:	6878      	ldr	r0, [r7, #4]
 80210c0:	f000 fcb9 	bl	8021a36 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 80210c4:	68fb      	ldr	r3, [r7, #12]
 80210c6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80210c8:	e7e9      	b.n	802109e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 80210ca:	bf00      	nop
 80210cc:	3710      	adds	r7, #16
 80210ce:	46bd      	mov	sp, r7
 80210d0:	bd80      	pop	{r7, pc}

080210d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80210d2:	b480      	push	{r7}
 80210d4:	b083      	sub	sp, #12
 80210d6:	af00      	add	r7, sp, #0
 80210d8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	689b      	ldr	r3, [r3, #8]
 80210de:	4618      	mov	r0, r3
 80210e0:	370c      	adds	r7, #12
 80210e2:	46bd      	mov	sp, r7
 80210e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210e8:	4770      	bx	lr

080210ea <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80210ea:	b480      	push	{r7}
 80210ec:	b083      	sub	sp, #12
 80210ee:	af00      	add	r7, sp, #0
 80210f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	4618      	mov	r0, r3
 80210f6:	370c      	adds	r7, #12
 80210f8:	46bd      	mov	sp, r7
 80210fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210fe:	4770      	bx	lr

08021100 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
 8021100:	b480      	push	{r7}
 8021102:	b083      	sub	sp, #12
 8021104:	af00      	add	r7, sp, #0
 8021106:	6078      	str	r0, [r7, #4]
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	4618      	mov	r0, r3
 802110c:	370c      	adds	r7, #12
 802110e:	46bd      	mov	sp, r7
 8021110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021114:	4770      	bx	lr

08021116 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8021116:	b580      	push	{r7, lr}
 8021118:	b082      	sub	sp, #8
 802111a:	af00      	add	r7, sp, #0
 802111c:	6078      	str	r0, [r7, #4]
 802111e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8021120:	6839      	ldr	r1, [r7, #0]
 8021122:	6878      	ldr	r0, [r7, #4]
 8021124:	f000 fc98 	bl	8021a58 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	4618      	mov	r0, r3
 802112c:	3708      	adds	r7, #8
 802112e:	46bd      	mov	sp, r7
 8021130:	bd80      	pop	{r7, pc}

08021132 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8021132:	b590      	push	{r4, r7, lr}
 8021134:	b087      	sub	sp, #28
 8021136:	af00      	add	r7, sp, #0
 8021138:	60f8      	str	r0, [r7, #12]
 802113a:	60b9      	str	r1, [r7, #8]
 802113c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 802113e:	68fc      	ldr	r4, [r7, #12]
 8021140:	f107 0314 	add.w	r3, r7, #20
 8021144:	6879      	ldr	r1, [r7, #4]
 8021146:	4618      	mov	r0, r3
 8021148:	f000 fc92 	bl	8021a70 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>
 802114c:	f107 0314 	add.w	r3, r7, #20
 8021150:	461a      	mov	r2, r3
 8021152:	68b9      	ldr	r1, [r7, #8]
 8021154:	4620      	mov	r0, r4
 8021156:	f000 fc98 	bl	8021a8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 802115a:	f107 0314 	add.w	r3, r7, #20
 802115e:	4618      	mov	r0, r3
 8021160:	f000 f852 	bl	8021208 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	4618      	mov	r0, r3
 8021168:	371c      	adds	r7, #28
 802116a:	46bd      	mov	sp, r7
 802116c:	bd90      	pop	{r4, r7, pc}

0802116e <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 802116e:	b480      	push	{r7}
 8021170:	b083      	sub	sp, #12
 8021172:	af00      	add	r7, sp, #0
 8021174:	6078      	str	r0, [r7, #4]
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	681b      	ldr	r3, [r3, #0]
 802117a:	4618      	mov	r0, r3
 802117c:	370c      	adds	r7, #12
 802117e:	46bd      	mov	sp, r7
 8021180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021184:	4770      	bx	lr

08021186 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8021186:	b590      	push	{r4, r7, lr}
 8021188:	b083      	sub	sp, #12
 802118a:	af00      	add	r7, sp, #0
 802118c:	6078      	str	r0, [r7, #4]
 802118e:	6878      	ldr	r0, [r7, #4]
 8021190:	f7ff ffed 	bl	802116e <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8021194:	4604      	mov	r4, r0
 8021196:	6878      	ldr	r0, [r7, #4]
 8021198:	f000 fc94 	bl	8021ac4 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 802119c:	4602      	mov	r2, r0
 802119e:	4613      	mov	r3, r2
 80211a0:	009b      	lsls	r3, r3, #2
 80211a2:	4413      	add	r3, r2
 80211a4:	00db      	lsls	r3, r3, #3
 80211a6:	4423      	add	r3, r4
 80211a8:	4618      	mov	r0, r3
 80211aa:	370c      	adds	r7, #12
 80211ac:	46bd      	mov	sp, r7
 80211ae:	bd90      	pop	{r4, r7, pc}

080211b0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80211b0:	b580      	push	{r7, lr}
 80211b2:	b088      	sub	sp, #32
 80211b4:	af00      	add	r7, sp, #0
 80211b6:	60f8      	str	r0, [r7, #12]
 80211b8:	60b9      	str	r1, [r7, #8]
 80211ba:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80211bc:	f107 0314 	add.w	r3, r7, #20
 80211c0:	68f9      	ldr	r1, [r7, #12]
 80211c2:	4618      	mov	r0, r3
 80211c4:	f000 fc8a 	bl	8021adc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 80211c8:	68ba      	ldr	r2, [r7, #8]
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	429a      	cmp	r2, r3
 80211ce:	d017      	beq.n	8021200 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80211d0:	68f8      	ldr	r0, [r7, #12]
 80211d2:	f000 fc92 	bl	8021afa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80211d6:	4603      	mov	r3, r0
 80211d8:	61fb      	str	r3, [r7, #28]
 80211da:	f107 021c 	add.w	r2, r7, #28
 80211de:	f107 0318 	add.w	r3, r7, #24
 80211e2:	4611      	mov	r1, r2
 80211e4:	4618      	mov	r0, r3
 80211e6:	f000 fc99 	bl	8021b1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80211ea:	f107 0314 	add.w	r3, r7, #20
 80211ee:	68ba      	ldr	r2, [r7, #8]
 80211f0:	69b9      	ldr	r1, [r7, #24]
 80211f2:	68f8      	ldr	r0, [r7, #12]
 80211f4:	f000 fca2 	bl	8021b3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80211f8:	68bb      	ldr	r3, [r7, #8]
 80211fa:	3328      	adds	r3, #40	; 0x28
 80211fc:	60bb      	str	r3, [r7, #8]
 80211fe:	e7e3      	b.n	80211c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8021200:	bf00      	nop
 8021202:	3720      	adds	r7, #32
 8021204:	46bd      	mov	sp, r7
 8021206:	bd80      	pop	{r7, pc}

08021208 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8021208:	b480      	push	{r7}
 802120a:	b083      	sub	sp, #12
 802120c:	af00      	add	r7, sp, #0
 802120e:	6078      	str	r0, [r7, #4]
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	4618      	mov	r0, r3
 8021214:	370c      	adds	r7, #12
 8021216:	46bd      	mov	sp, r7
 8021218:	f85d 7b04 	ldr.w	r7, [sp], #4
 802121c:	4770      	bx	lr

0802121e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 802121e:	b580      	push	{r7, lr}
 8021220:	b084      	sub	sp, #16
 8021222:	af00      	add	r7, sp, #0
 8021224:	6078      	str	r0, [r7, #4]
 8021226:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8021228:	683b      	ldr	r3, [r7, #0]
 802122a:	2b00      	cmp	r3, #0
 802122c:	d012      	beq.n	8021254 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 802122e:	6838      	ldr	r0, [r7, #0]
 8021230:	f000 fcb7 	bl	8021ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8021234:	4603      	mov	r3, r0
 8021236:	4619      	mov	r1, r3
 8021238:	6878      	ldr	r0, [r7, #4]
 802123a:	f7ff fff0 	bl	802121e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 802123e:	6838      	ldr	r0, [r7, #0]
 8021240:	f000 fcbb 	bl	8021bba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8021244:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8021246:	6839      	ldr	r1, [r7, #0]
 8021248:	6878      	ldr	r0, [r7, #4]
 802124a:	f000 fcc2 	bl	8021bd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8021252:	e7e9      	b.n	8021228 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8021254:	bf00      	nop
 8021256:	3710      	adds	r7, #16
 8021258:	46bd      	mov	sp, r7
 802125a:	bd80      	pop	{r7, pc}

0802125c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 802125c:	b480      	push	{r7}
 802125e:	b083      	sub	sp, #12
 8021260:	af00      	add	r7, sp, #0
 8021262:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	689b      	ldr	r3, [r3, #8]
 8021268:	4618      	mov	r0, r3
 802126a:	370c      	adds	r7, #12
 802126c:	46bd      	mov	sp, r7
 802126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021272:	4770      	bx	lr

08021274 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8021274:	b480      	push	{r7}
 8021276:	b083      	sub	sp, #12
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	4618      	mov	r0, r3
 8021280:	370c      	adds	r7, #12
 8021282:	46bd      	mov	sp, r7
 8021284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021288:	4770      	bx	lr

0802128a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
 802128a:	b480      	push	{r7}
 802128c:	b083      	sub	sp, #12
 802128e:	af00      	add	r7, sp, #0
 8021290:	6078      	str	r0, [r7, #4]
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	4618      	mov	r0, r3
 8021296:	370c      	adds	r7, #12
 8021298:	46bd      	mov	sp, r7
 802129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802129e:	4770      	bx	lr

080212a0 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80212a0:	b580      	push	{r7, lr}
 80212a2:	b082      	sub	sp, #8
 80212a4:	af00      	add	r7, sp, #0
 80212a6:	6078      	str	r0, [r7, #4]
 80212a8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80212aa:	6839      	ldr	r1, [r7, #0]
 80212ac:	6878      	ldr	r0, [r7, #4]
 80212ae:	f000 fca1 	bl	8021bf4 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	4618      	mov	r0, r3
 80212b6:	3708      	adds	r7, #8
 80212b8:	46bd      	mov	sp, r7
 80212ba:	bd80      	pop	{r7, pc}

080212bc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 80212bc:	b590      	push	{r4, r7, lr}
 80212be:	b087      	sub	sp, #28
 80212c0:	af00      	add	r7, sp, #0
 80212c2:	60f8      	str	r0, [r7, #12]
 80212c4:	60b9      	str	r1, [r7, #8]
 80212c6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80212c8:	68fc      	ldr	r4, [r7, #12]
 80212ca:	f107 0314 	add.w	r3, r7, #20
 80212ce:	6879      	ldr	r1, [r7, #4]
 80212d0:	4618      	mov	r0, r3
 80212d2:	f000 fc9b 	bl	8021c0c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>
 80212d6:	f107 0314 	add.w	r3, r7, #20
 80212da:	461a      	mov	r2, r3
 80212dc:	68b9      	ldr	r1, [r7, #8]
 80212de:	4620      	mov	r0, r4
 80212e0:	f000 fca1 	bl	8021c26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 80212e4:	f107 0314 	add.w	r3, r7, #20
 80212e8:	4618      	mov	r0, r3
 80212ea:	f000 f852 	bl	8021392 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 80212ee:	68fb      	ldr	r3, [r7, #12]
 80212f0:	4618      	mov	r0, r3
 80212f2:	371c      	adds	r7, #28
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bd90      	pop	{r4, r7, pc}

080212f8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80212f8:	b480      	push	{r7}
 80212fa:	b083      	sub	sp, #12
 80212fc:	af00      	add	r7, sp, #0
 80212fe:	6078      	str	r0, [r7, #4]
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	4618      	mov	r0, r3
 8021306:	370c      	adds	r7, #12
 8021308:	46bd      	mov	sp, r7
 802130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802130e:	4770      	bx	lr

08021310 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8021310:	b590      	push	{r4, r7, lr}
 8021312:	b083      	sub	sp, #12
 8021314:	af00      	add	r7, sp, #0
 8021316:	6078      	str	r0, [r7, #4]
 8021318:	6878      	ldr	r0, [r7, #4]
 802131a:	f7ff ffed 	bl	80212f8 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 802131e:	4604      	mov	r4, r0
 8021320:	6878      	ldr	r0, [r7, #4]
 8021322:	f000 fc9d 	bl	8021c60 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 8021326:	4602      	mov	r2, r0
 8021328:	4613      	mov	r3, r2
 802132a:	009b      	lsls	r3, r3, #2
 802132c:	4413      	add	r3, r2
 802132e:	009b      	lsls	r3, r3, #2
 8021330:	4423      	add	r3, r4
 8021332:	4618      	mov	r0, r3
 8021334:	370c      	adds	r7, #12
 8021336:	46bd      	mov	sp, r7
 8021338:	bd90      	pop	{r4, r7, pc}

0802133a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 802133a:	b580      	push	{r7, lr}
 802133c:	b088      	sub	sp, #32
 802133e:	af00      	add	r7, sp, #0
 8021340:	60f8      	str	r0, [r7, #12]
 8021342:	60b9      	str	r1, [r7, #8]
 8021344:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8021346:	f107 0314 	add.w	r3, r7, #20
 802134a:	68f9      	ldr	r1, [r7, #12]
 802134c:	4618      	mov	r0, r3
 802134e:	f000 fc93 	bl	8021c78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8021352:	68ba      	ldr	r2, [r7, #8]
 8021354:	687b      	ldr	r3, [r7, #4]
 8021356:	429a      	cmp	r2, r3
 8021358:	d017      	beq.n	802138a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 802135a:	68f8      	ldr	r0, [r7, #12]
 802135c:	f7f2 ff98 	bl	8014290 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8021360:	4603      	mov	r3, r0
 8021362:	61fb      	str	r3, [r7, #28]
 8021364:	f107 021c 	add.w	r2, r7, #28
 8021368:	f107 0318 	add.w	r3, r7, #24
 802136c:	4611      	mov	r1, r2
 802136e:	4618      	mov	r0, r3
 8021370:	f7f2 f99d 	bl	80136ae <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8021374:	f107 0314 	add.w	r3, r7, #20
 8021378:	68ba      	ldr	r2, [r7, #8]
 802137a:	69b9      	ldr	r1, [r7, #24]
 802137c:	68f8      	ldr	r0, [r7, #12]
 802137e:	f000 fc8a 	bl	8021c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8021382:	68bb      	ldr	r3, [r7, #8]
 8021384:	3314      	adds	r3, #20
 8021386:	60bb      	str	r3, [r7, #8]
 8021388:	e7e3      	b.n	8021352 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 802138a:	bf00      	nop
 802138c:	3720      	adds	r7, #32
 802138e:	46bd      	mov	sp, r7
 8021390:	bd80      	pop	{r7, pc}

08021392 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8021392:	b480      	push	{r7}
 8021394:	b083      	sub	sp, #12
 8021396:	af00      	add	r7, sp, #0
 8021398:	6078      	str	r0, [r7, #4]
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	4618      	mov	r0, r3
 802139e:	370c      	adds	r7, #12
 80213a0:	46bd      	mov	sp, r7
 80213a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213a6:	4770      	bx	lr

080213a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80213a8:	b580      	push	{r7, lr}
 80213aa:	b084      	sub	sp, #16
 80213ac:	af00      	add	r7, sp, #0
 80213ae:	6078      	str	r0, [r7, #4]
 80213b0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80213b2:	683b      	ldr	r3, [r7, #0]
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	d012      	beq.n	80213de <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 80213b8:	6838      	ldr	r0, [r7, #0]
 80213ba:	f7f3 ff06 	bl	80151ca <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80213be:	4603      	mov	r3, r0
 80213c0:	4619      	mov	r1, r3
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f7ff fff0 	bl	80213a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 80213c8:	6838      	ldr	r0, [r7, #0]
 80213ca:	f7f4 f96e 	bl	80156aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80213ce:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80213d0:	6839      	ldr	r1, [r7, #0]
 80213d2:	6878      	ldr	r0, [r7, #4]
 80213d4:	f7f3 f936 	bl	8014644 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 80213d8:	68fb      	ldr	r3, [r7, #12]
 80213da:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80213dc:	e7e9      	b.n	80213b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 80213de:	bf00      	nop
 80213e0:	3710      	adds	r7, #16
 80213e2:	46bd      	mov	sp, r7
 80213e4:	bd80      	pop	{r7, pc}

080213e6 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80213e6:	b480      	push	{r7}
 80213e8:	b083      	sub	sp, #12
 80213ea:	af00      	add	r7, sp, #0
 80213ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	4618      	mov	r0, r3
 80213f2:	370c      	adds	r7, #12
 80213f4:	46bd      	mov	sp, r7
 80213f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213fa:	4770      	bx	lr

080213fc <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
 80213fc:	b480      	push	{r7}
 80213fe:	b083      	sub	sp, #12
 8021400:	af00      	add	r7, sp, #0
 8021402:	6078      	str	r0, [r7, #4]
 8021404:	687b      	ldr	r3, [r7, #4]
 8021406:	4618      	mov	r0, r3
 8021408:	370c      	adds	r7, #12
 802140a:	46bd      	mov	sp, r7
 802140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021410:	4770      	bx	lr

08021412 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8021412:	b580      	push	{r7, lr}
 8021414:	b082      	sub	sp, #8
 8021416:	af00      	add	r7, sp, #0
 8021418:	6078      	str	r0, [r7, #4]
 802141a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 802141c:	6839      	ldr	r1, [r7, #0]
 802141e:	6878      	ldr	r0, [r7, #4]
 8021420:	f000 fc6c 	bl	8021cfc <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>
 8021424:	687b      	ldr	r3, [r7, #4]
 8021426:	4618      	mov	r0, r3
 8021428:	3708      	adds	r7, #8
 802142a:	46bd      	mov	sp, r7
 802142c:	bd80      	pop	{r7, pc}

0802142e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 802142e:	b590      	push	{r4, r7, lr}
 8021430:	b087      	sub	sp, #28
 8021432:	af00      	add	r7, sp, #0
 8021434:	60f8      	str	r0, [r7, #12]
 8021436:	60b9      	str	r1, [r7, #8]
 8021438:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 802143a:	68fc      	ldr	r4, [r7, #12]
 802143c:	f107 0314 	add.w	r3, r7, #20
 8021440:	6879      	ldr	r1, [r7, #4]
 8021442:	4618      	mov	r0, r3
 8021444:	f000 fc66 	bl	8021d14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>
 8021448:	f107 0314 	add.w	r3, r7, #20
 802144c:	461a      	mov	r2, r3
 802144e:	68b9      	ldr	r1, [r7, #8]
 8021450:	4620      	mov	r0, r4
 8021452:	f000 fc6c 	bl	8021d2e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8021456:	f107 0314 	add.w	r3, r7, #20
 802145a:	4618      	mov	r0, r3
 802145c:	f000 f852 	bl	8021504 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 8021460:	68fb      	ldr	r3, [r7, #12]
 8021462:	4618      	mov	r0, r3
 8021464:	371c      	adds	r7, #28
 8021466:	46bd      	mov	sp, r7
 8021468:	bd90      	pop	{r4, r7, pc}

0802146a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 802146a:	b480      	push	{r7}
 802146c:	b083      	sub	sp, #12
 802146e:	af00      	add	r7, sp, #0
 8021470:	6078      	str	r0, [r7, #4]
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	4618      	mov	r0, r3
 8021478:	370c      	adds	r7, #12
 802147a:	46bd      	mov	sp, r7
 802147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021480:	4770      	bx	lr

08021482 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8021482:	b590      	push	{r4, r7, lr}
 8021484:	b083      	sub	sp, #12
 8021486:	af00      	add	r7, sp, #0
 8021488:	6078      	str	r0, [r7, #4]
 802148a:	6878      	ldr	r0, [r7, #4]
 802148c:	f7ff ffed 	bl	802146a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 8021490:	4604      	mov	r4, r0
 8021492:	6878      	ldr	r0, [r7, #4]
 8021494:	f000 fc68 	bl	8021d68 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 8021498:	4602      	mov	r2, r0
 802149a:	4613      	mov	r3, r2
 802149c:	005b      	lsls	r3, r3, #1
 802149e:	4413      	add	r3, r2
 80214a0:	00db      	lsls	r3, r3, #3
 80214a2:	4423      	add	r3, r4
 80214a4:	4618      	mov	r0, r3
 80214a6:	370c      	adds	r7, #12
 80214a8:	46bd      	mov	sp, r7
 80214aa:	bd90      	pop	{r4, r7, pc}

080214ac <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80214ac:	b580      	push	{r7, lr}
 80214ae:	b088      	sub	sp, #32
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	60f8      	str	r0, [r7, #12]
 80214b4:	60b9      	str	r1, [r7, #8]
 80214b6:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80214b8:	f107 0314 	add.w	r3, r7, #20
 80214bc:	68f9      	ldr	r1, [r7, #12]
 80214be:	4618      	mov	r0, r3
 80214c0:	f000 fc5e 	bl	8021d80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 80214c4:	68ba      	ldr	r2, [r7, #8]
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	429a      	cmp	r2, r3
 80214ca:	d017      	beq.n	80214fc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 80214cc:	68f8      	ldr	r0, [r7, #12]
 80214ce:	f7f5 fb14 	bl	8016afa <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 80214d2:	4603      	mov	r3, r0
 80214d4:	61fb      	str	r3, [r7, #28]
 80214d6:	f107 021c 	add.w	r2, r7, #28
 80214da:	f107 0318 	add.w	r3, r7, #24
 80214de:	4611      	mov	r1, r2
 80214e0:	4618      	mov	r0, r3
 80214e2:	f7f5 f8da 	bl	801669a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 80214e6:	f107 0314 	add.w	r3, r7, #20
 80214ea:	68ba      	ldr	r2, [r7, #8]
 80214ec:	69b9      	ldr	r1, [r7, #24]
 80214ee:	68f8      	ldr	r0, [r7, #12]
 80214f0:	f000 fc55 	bl	8021d9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80214f4:	68bb      	ldr	r3, [r7, #8]
 80214f6:	3318      	adds	r3, #24
 80214f8:	60bb      	str	r3, [r7, #8]
 80214fa:	e7e3      	b.n	80214c4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 80214fc:	bf00      	nop
 80214fe:	3720      	adds	r7, #32
 8021500:	46bd      	mov	sp, r7
 8021502:	bd80      	pop	{r7, pc}

08021504 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8021504:	b480      	push	{r7}
 8021506:	b083      	sub	sp, #12
 8021508:	af00      	add	r7, sp, #0
 802150a:	6078      	str	r0, [r7, #4]
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	4618      	mov	r0, r3
 8021510:	370c      	adds	r7, #12
 8021512:	46bd      	mov	sp, r7
 8021514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021518:	4770      	bx	lr

0802151a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 802151a:	b580      	push	{r7, lr}
 802151c:	b084      	sub	sp, #16
 802151e:	af00      	add	r7, sp, #0
 8021520:	6078      	str	r0, [r7, #4]
 8021522:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8021524:	683b      	ldr	r3, [r7, #0]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d012      	beq.n	8021550 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 802152a:	6838      	ldr	r0, [r7, #0]
 802152c:	f7f6 f98a 	bl	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8021530:	4603      	mov	r3, r0
 8021532:	4619      	mov	r1, r3
 8021534:	6878      	ldr	r0, [r7, #4]
 8021536:	f7ff fff0 	bl	802151a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 802153a:	6838      	ldr	r0, [r7, #0]
 802153c:	f7f6 fc0c 	bl	8017d58 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8021540:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8021542:	6839      	ldr	r1, [r7, #0]
 8021544:	6878      	ldr	r0, [r7, #4]
 8021546:	f7f5 fcb2 	bl	8016eae <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 802154a:	68fb      	ldr	r3, [r7, #12]
 802154c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 802154e:	e7e9      	b.n	8021524 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8021550:	bf00      	nop
 8021552:	3710      	adds	r7, #16
 8021554:	46bd      	mov	sp, r7
 8021556:	bd80      	pop	{r7, pc}

08021558 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
 8021558:	b480      	push	{r7}
 802155a:	b083      	sub	sp, #12
 802155c:	af00      	add	r7, sp, #0
 802155e:	6078      	str	r0, [r7, #4]
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	4618      	mov	r0, r3
 8021564:	370c      	adds	r7, #12
 8021566:	46bd      	mov	sp, r7
 8021568:	f85d 7b04 	ldr.w	r7, [sp], #4
 802156c:	4770      	bx	lr

0802156e <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 802156e:	b480      	push	{r7}
 8021570:	b083      	sub	sp, #12
 8021572:	af00      	add	r7, sp, #0
 8021574:	6078      	str	r0, [r7, #4]
 8021576:	6039      	str	r1, [r7, #0]
 8021578:	687b      	ldr	r3, [r7, #4]
 802157a:	4618      	mov	r0, r3
 802157c:	370c      	adds	r7, #12
 802157e:	46bd      	mov	sp, r7
 8021580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021584:	4770      	bx	lr

08021586 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8021586:	b580      	push	{r7, lr}
 8021588:	b082      	sub	sp, #8
 802158a:	af00      	add	r7, sp, #0
 802158c:	6078      	str	r0, [r7, #4]
 802158e:	6039      	str	r1, [r7, #0]
 8021590:	6878      	ldr	r0, [r7, #4]
 8021592:	f000 fc37 	bl	8021e04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>
 8021596:	687b      	ldr	r3, [r7, #4]
 8021598:	4618      	mov	r0, r3
 802159a:	3708      	adds	r7, #8
 802159c:	46bd      	mov	sp, r7
 802159e:	bd80      	pop	{r7, pc}

080215a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80215a0:	b580      	push	{r7, lr}
 80215a2:	b084      	sub	sp, #16
 80215a4:	af00      	add	r7, sp, #0
 80215a6:	60f8      	str	r0, [r7, #12]
 80215a8:	60b9      	str	r1, [r7, #8]
 80215aa:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80215ac:	6878      	ldr	r0, [r7, #4]
 80215ae:	f000 fc34 	bl	8021e1a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>
 80215b2:	4603      	mov	r3, r0
 80215b4:	4619      	mov	r1, r3
 80215b6:	68f8      	ldr	r0, [r7, #12]
 80215b8:	f000 fc3a 	bl	8021e30 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>
 80215bc:	68fb      	ldr	r3, [r7, #12]
 80215be:	68b9      	ldr	r1, [r7, #8]
 80215c0:	4618      	mov	r0, r3
 80215c2:	f000 fc43 	bl	8021e4c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 80215c6:	68fb      	ldr	r3, [r7, #12]
 80215c8:	3304      	adds	r3, #4
 80215ca:	4618      	mov	r0, r3
 80215cc:	f7df ff54 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	4618      	mov	r0, r3
 80215d4:	3710      	adds	r7, #16
 80215d6:	46bd      	mov	sp, r7
 80215d8:	bd80      	pop	{r7, pc}

080215da <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>:
      size() const noexcept { return _M_len; }
 80215da:	b480      	push	{r7}
 80215dc:	b083      	sub	sp, #12
 80215de:	af00      	add	r7, sp, #0
 80215e0:	6078      	str	r0, [r7, #4]
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	4618      	mov	r0, r3
 80215e8:	370c      	adds	r7, #12
 80215ea:	46bd      	mov	sp, r7
 80215ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f0:	4770      	bx	lr

080215f2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 80215f2:	b480      	push	{r7}
 80215f4:	b083      	sub	sp, #12
 80215f6:	af00      	add	r7, sp, #0
 80215f8:	6078      	str	r0, [r7, #4]
 80215fa:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80215fc:	687b      	ldr	r3, [r7, #4]
 80215fe:	683a      	ldr	r2, [r7, #0]
 8021600:	601a      	str	r2, [r3, #0]
 8021602:	687b      	ldr	r3, [r7, #4]
 8021604:	4618      	mov	r0, r3
 8021606:	370c      	adds	r7, #12
 8021608:	46bd      	mov	sp, r7
 802160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802160e:	4770      	bx	lr

08021610 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8021610:	b580      	push	{r7, lr}
 8021612:	b084      	sub	sp, #16
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8021618:	687b      	ldr	r3, [r7, #4]
 802161a:	1d1a      	adds	r2, r3, #4
 802161c:	f107 030c 	add.w	r3, r7, #12
 8021620:	4611      	mov	r1, r2
 8021622:	4618      	mov	r0, r3
 8021624:	f000 fc1e 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	4618      	mov	r0, r3
 802162c:	3710      	adds	r7, #16
 802162e:	46bd      	mov	sp, r7
 8021630:	bd80      	pop	{r7, pc}

08021632 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8021632:	b480      	push	{r7}
 8021634:	b083      	sub	sp, #12
 8021636:	af00      	add	r7, sp, #0
 8021638:	6078      	str	r0, [r7, #4]
 802163a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 802163c:	683b      	ldr	r3, [r7, #0]
 802163e:	681a      	ldr	r2, [r3, #0]
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	601a      	str	r2, [r3, #0]
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	4618      	mov	r0, r3
 8021648:	370c      	adds	r7, #12
 802164a:	46bd      	mov	sp, r7
 802164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021650:	4770      	bx	lr

08021652 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021652:	b5b0      	push	{r4, r5, r7, lr}
 8021654:	b08a      	sub	sp, #40	; 0x28
 8021656:	af02      	add	r7, sp, #8
 8021658:	60f8      	str	r0, [r7, #12]
 802165a:	60b9      	str	r1, [r7, #8]
 802165c:	607a      	str	r2, [r7, #4]
 802165e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8021660:	f107 0318 	add.w	r3, r7, #24
 8021664:	6879      	ldr	r1, [r7, #4]
 8021666:	4618      	mov	r0, r3
 8021668:	f000 fd2e 	bl	80220c8 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 802166c:	4603      	mov	r3, r0
 802166e:	f107 0010 	add.w	r0, r7, #16
 8021672:	68ba      	ldr	r2, [r7, #8]
 8021674:	68f9      	ldr	r1, [r7, #12]
 8021676:	f000 fc04 	bl	8021e82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 802167a:	697b      	ldr	r3, [r7, #20]
 802167c:	2b00      	cmp	r3, #0
 802167e:	d00f      	beq.n	80216a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8021680:	693c      	ldr	r4, [r7, #16]
 8021682:	697d      	ldr	r5, [r7, #20]
 8021684:	6878      	ldr	r0, [r7, #4]
 8021686:	f000 fd2b 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 802168a:	4602      	mov	r2, r0
 802168c:	683b      	ldr	r3, [r7, #0]
 802168e:	9300      	str	r3, [sp, #0]
 8021690:	4613      	mov	r3, r2
 8021692:	462a      	mov	r2, r5
 8021694:	4621      	mov	r1, r4
 8021696:	68f8      	ldr	r0, [r7, #12]
 8021698:	f000 fd2d 	bl	80220f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 802169c:	4603      	mov	r3, r0
			  __node_gen);
 802169e:	e007      	b.n	80216b0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80216a0:	693a      	ldr	r2, [r7, #16]
 80216a2:	f107 031c 	add.w	r3, r7, #28
 80216a6:	4611      	mov	r1, r2
 80216a8:	4618      	mov	r0, r3
 80216aa:	f000 fbdb 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 80216ae:	69fb      	ldr	r3, [r7, #28]
    }
 80216b0:	4618      	mov	r0, r3
 80216b2:	3720      	adds	r7, #32
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bdb0      	pop	{r4, r5, r7, pc}

080216b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80216b8:	b480      	push	{r7}
 80216ba:	b083      	sub	sp, #12
 80216bc:	af00      	add	r7, sp, #0
 80216be:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	68db      	ldr	r3, [r3, #12]
 80216c4:	4618      	mov	r0, r3
 80216c6:	370c      	adds	r7, #12
 80216c8:	46bd      	mov	sp, r7
 80216ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216ce:	4770      	bx	lr

080216d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80216d0:	b480      	push	{r7}
 80216d2:	b083      	sub	sp, #12
 80216d4:	af00      	add	r7, sp, #0
 80216d6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	689b      	ldr	r3, [r3, #8]
 80216dc:	4618      	mov	r0, r3
 80216de:	370c      	adds	r7, #12
 80216e0:	46bd      	mov	sp, r7
 80216e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216e6:	4770      	bx	lr

080216e8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b082      	sub	sp, #8
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
 80216f0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80216f2:	6839      	ldr	r1, [r7, #0]
 80216f4:	6878      	ldr	r0, [r7, #4]
 80216f6:	f000 fd47 	bl	8022188 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80216fa:	6839      	ldr	r1, [r7, #0]
 80216fc:	6878      	ldr	r0, [r7, #4]
 80216fe:	f000 fd58 	bl	80221b2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8021702:	bf00      	nop
 8021704:	3708      	adds	r7, #8
 8021706:	46bd      	mov	sp, r7
 8021708:	bd80      	pop	{r7, pc}

0802170a <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>:
 802170a:	b480      	push	{r7}
 802170c:	b083      	sub	sp, #12
 802170e:	af00      	add	r7, sp, #0
 8021710:	6078      	str	r0, [r7, #4]
 8021712:	6039      	str	r1, [r7, #0]
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	4618      	mov	r0, r3
 8021718:	370c      	adds	r7, #12
 802171a:	46bd      	mov	sp, r7
 802171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021720:	4770      	bx	lr

08021722 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>:
 8021722:	b580      	push	{r7, lr}
 8021724:	b082      	sub	sp, #8
 8021726:	af00      	add	r7, sp, #0
 8021728:	6078      	str	r0, [r7, #4]
 802172a:	6039      	str	r1, [r7, #0]
 802172c:	6878      	ldr	r0, [r7, #4]
 802172e:	f000 f8ba 	bl	80218a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	4618      	mov	r0, r3
 8021736:	3708      	adds	r7, #8
 8021738:	46bd      	mov	sp, r7
 802173a:	bd80      	pop	{r7, pc}

0802173c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 802173c:	b580      	push	{r7, lr}
 802173e:	b084      	sub	sp, #16
 8021740:	af00      	add	r7, sp, #0
 8021742:	60f8      	str	r0, [r7, #12]
 8021744:	60b9      	str	r1, [r7, #8]
 8021746:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8021748:	6878      	ldr	r0, [r7, #4]
 802174a:	f000 fd44 	bl	80221d6 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>
 802174e:	4603      	mov	r3, r0
 8021750:	4619      	mov	r1, r3
 8021752:	68f8      	ldr	r0, [r7, #12]
 8021754:	f000 fd4a 	bl	80221ec <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>
 8021758:	68fb      	ldr	r3, [r7, #12]
 802175a:	68b9      	ldr	r1, [r7, #8]
 802175c:	4618      	mov	r0, r3
 802175e:	f000 fd53 	bl	8022208 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8021762:	68fb      	ldr	r3, [r7, #12]
 8021764:	3304      	adds	r3, #4
 8021766:	4618      	mov	r0, r3
 8021768:	f7df fe86 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 802176c:	68fb      	ldr	r3, [r7, #12]
 802176e:	4618      	mov	r0, r3
 8021770:	3710      	adds	r7, #16
 8021772:	46bd      	mov	sp, r7
 8021774:	bd80      	pop	{r7, pc}

08021776 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>:
 8021776:	b480      	push	{r7}
 8021778:	b083      	sub	sp, #12
 802177a:	af00      	add	r7, sp, #0
 802177c:	6078      	str	r0, [r7, #4]
 802177e:	687b      	ldr	r3, [r7, #4]
 8021780:	685b      	ldr	r3, [r3, #4]
 8021782:	4618      	mov	r0, r3
 8021784:	370c      	adds	r7, #12
 8021786:	46bd      	mov	sp, r7
 8021788:	f85d 7b04 	ldr.w	r7, [sp], #4
 802178c:	4770      	bx	lr

0802178e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 802178e:	b480      	push	{r7}
 8021790:	b083      	sub	sp, #12
 8021792:	af00      	add	r7, sp, #0
 8021794:	6078      	str	r0, [r7, #4]
 8021796:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8021798:	687b      	ldr	r3, [r7, #4]
 802179a:	683a      	ldr	r2, [r7, #0]
 802179c:	601a      	str	r2, [r3, #0]
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	4618      	mov	r0, r3
 80217a2:	370c      	adds	r7, #12
 80217a4:	46bd      	mov	sp, r7
 80217a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217aa:	4770      	bx	lr

080217ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80217ac:	b580      	push	{r7, lr}
 80217ae:	b084      	sub	sp, #16
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80217b4:	687b      	ldr	r3, [r7, #4]
 80217b6:	1d1a      	adds	r2, r3, #4
 80217b8:	f107 030c 	add.w	r3, r7, #12
 80217bc:	4611      	mov	r1, r2
 80217be:	4618      	mov	r0, r3
 80217c0:	f000 fd2e 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80217c4:	68fb      	ldr	r3, [r7, #12]
 80217c6:	4618      	mov	r0, r3
 80217c8:	3710      	adds	r7, #16
 80217ca:	46bd      	mov	sp, r7
 80217cc:	bd80      	pop	{r7, pc}

080217ce <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80217ce:	b480      	push	{r7}
 80217d0:	b083      	sub	sp, #12
 80217d2:	af00      	add	r7, sp, #0
 80217d4:	6078      	str	r0, [r7, #4]
 80217d6:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80217d8:	683b      	ldr	r3, [r7, #0]
 80217da:	681a      	ldr	r2, [r3, #0]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	601a      	str	r2, [r3, #0]
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	4618      	mov	r0, r3
 80217e4:	370c      	adds	r7, #12
 80217e6:	46bd      	mov	sp, r7
 80217e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217ec:	4770      	bx	lr

080217ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80217ee:	b5b0      	push	{r4, r5, r7, lr}
 80217f0:	b08a      	sub	sp, #40	; 0x28
 80217f2:	af02      	add	r7, sp, #8
 80217f4:	60f8      	str	r0, [r7, #12]
 80217f6:	60b9      	str	r1, [r7, #8]
 80217f8:	607a      	str	r2, [r7, #4]
 80217fa:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80217fc:	f107 0318 	add.w	r3, r7, #24
 8021800:	6879      	ldr	r1, [r7, #4]
 8021802:	4618      	mov	r0, r3
 8021804:	f000 fe3e 	bl	8022484 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8021808:	4603      	mov	r3, r0
 802180a:	f107 0010 	add.w	r0, r7, #16
 802180e:	68ba      	ldr	r2, [r7, #8]
 8021810:	68f9      	ldr	r1, [r7, #12]
 8021812:	f000 fd14 	bl	802223e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>
      if (__res.second)
 8021816:	697b      	ldr	r3, [r7, #20]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d00f      	beq.n	802183c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 802181c:	693c      	ldr	r4, [r7, #16]
 802181e:	697d      	ldr	r5, [r7, #20]
 8021820:	6878      	ldr	r0, [r7, #4]
 8021822:	f000 fe3b 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8021826:	4602      	mov	r2, r0
 8021828:	683b      	ldr	r3, [r7, #0]
 802182a:	9300      	str	r3, [sp, #0]
 802182c:	4613      	mov	r3, r2
 802182e:	462a      	mov	r2, r5
 8021830:	4621      	mov	r1, r4
 8021832:	68f8      	ldr	r0, [r7, #12]
 8021834:	f000 fe3d 	bl	80224b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8021838:	4603      	mov	r3, r0
			  __node_gen);
 802183a:	e007      	b.n	802184c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 802183c:	693a      	ldr	r2, [r7, #16]
 802183e:	f107 031c 	add.w	r3, r7, #28
 8021842:	4611      	mov	r1, r2
 8021844:	4618      	mov	r0, r3
 8021846:	f000 fceb 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 802184a:	69fb      	ldr	r3, [r7, #28]
    }
 802184c:	4618      	mov	r0, r3
 802184e:	3720      	adds	r7, #32
 8021850:	46bd      	mov	sp, r7
 8021852:	bdb0      	pop	{r4, r5, r7, pc}

08021854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021854:	b480      	push	{r7}
 8021856:	b083      	sub	sp, #12
 8021858:	af00      	add	r7, sp, #0
 802185a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	68db      	ldr	r3, [r3, #12]
 8021860:	4618      	mov	r0, r3
 8021862:	370c      	adds	r7, #12
 8021864:	46bd      	mov	sp, r7
 8021866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802186a:	4770      	bx	lr

0802186c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802186c:	b480      	push	{r7}
 802186e:	b083      	sub	sp, #12
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	689b      	ldr	r3, [r3, #8]
 8021878:	4618      	mov	r0, r3
 802187a:	370c      	adds	r7, #12
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr

08021884 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8021884:	b580      	push	{r7, lr}
 8021886:	b082      	sub	sp, #8
 8021888:	af00      	add	r7, sp, #0
 802188a:	6078      	str	r0, [r7, #4]
 802188c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 802188e:	6839      	ldr	r1, [r7, #0]
 8021890:	6878      	ldr	r0, [r7, #4]
 8021892:	f000 fe57 	bl	8022544 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 8021896:	6839      	ldr	r1, [r7, #0]
 8021898:	6878      	ldr	r0, [r7, #4]
 802189a:	f000 fe68 	bl	802256e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 802189e:	bf00      	nop
 80218a0:	3708      	adds	r7, #8
 80218a2:	46bd      	mov	sp, r7
 80218a4:	bd80      	pop	{r7, pc}

080218a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80218a6:	b480      	push	{r7}
 80218a8:	b083      	sub	sp, #12
 80218aa:	af00      	add	r7, sp, #0
 80218ac:	6078      	str	r0, [r7, #4]
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	4618      	mov	r0, r3
 80218b2:	370c      	adds	r7, #12
 80218b4:	46bd      	mov	sp, r7
 80218b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ba:	4770      	bx	lr

080218bc <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80218bc:	b480      	push	{r7}
 80218be:	b083      	sub	sp, #12
 80218c0:	af00      	add	r7, sp, #0
 80218c2:	6078      	str	r0, [r7, #4]
 80218c4:	6039      	str	r1, [r7, #0]
 80218c6:	687b      	ldr	r3, [r7, #4]
 80218c8:	4618      	mov	r0, r3
 80218ca:	370c      	adds	r7, #12
 80218cc:	46bd      	mov	sp, r7
 80218ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218d2:	4770      	bx	lr

080218d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>:
 80218d4:	b580      	push	{r7, lr}
 80218d6:	b082      	sub	sp, #8
 80218d8:	af00      	add	r7, sp, #0
 80218da:	6078      	str	r0, [r7, #4]
 80218dc:	6039      	str	r1, [r7, #0]
 80218de:	6878      	ldr	r0, [r7, #4]
 80218e0:	f000 fe57 	bl	8022592 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>
 80218e4:	687b      	ldr	r3, [r7, #4]
 80218e6:	4618      	mov	r0, r3
 80218e8:	3708      	adds	r7, #8
 80218ea:	46bd      	mov	sp, r7
 80218ec:	bd80      	pop	{r7, pc}

080218ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80218ee:	b580      	push	{r7, lr}
 80218f0:	b084      	sub	sp, #16
 80218f2:	af00      	add	r7, sp, #0
 80218f4:	60f8      	str	r0, [r7, #12]
 80218f6:	60b9      	str	r1, [r7, #8]
 80218f8:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 80218fa:	6878      	ldr	r0, [r7, #4]
 80218fc:	f000 fe54 	bl	80225a8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8021900:	4603      	mov	r3, r0
 8021902:	4619      	mov	r1, r3
 8021904:	68f8      	ldr	r0, [r7, #12]
 8021906:	f000 fe5a 	bl	80225be <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	68b9      	ldr	r1, [r7, #8]
 802190e:	4618      	mov	r0, r3
 8021910:	f000 fa9c 	bl	8021e4c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	3304      	adds	r3, #4
 8021918:	4618      	mov	r0, r3
 802191a:	f7df fdad 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 802191e:	68fb      	ldr	r3, [r7, #12]
 8021920:	4618      	mov	r0, r3
 8021922:	3710      	adds	r7, #16
 8021924:	46bd      	mov	sp, r7
 8021926:	bd80      	pop	{r7, pc}

08021928 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>:
 8021928:	b480      	push	{r7}
 802192a:	b083      	sub	sp, #12
 802192c:	af00      	add	r7, sp, #0
 802192e:	6078      	str	r0, [r7, #4]
 8021930:	687b      	ldr	r3, [r7, #4]
 8021932:	685b      	ldr	r3, [r3, #4]
 8021934:	4618      	mov	r0, r3
 8021936:	370c      	adds	r7, #12
 8021938:	46bd      	mov	sp, r7
 802193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802193e:	4770      	bx	lr

08021940 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8021940:	b480      	push	{r7}
 8021942:	b083      	sub	sp, #12
 8021944:	af00      	add	r7, sp, #0
 8021946:	6078      	str	r0, [r7, #4]
 8021948:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	683a      	ldr	r2, [r7, #0]
 802194e:	601a      	str	r2, [r3, #0]
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	4618      	mov	r0, r3
 8021954:	370c      	adds	r7, #12
 8021956:	46bd      	mov	sp, r7
 8021958:	f85d 7b04 	ldr.w	r7, [sp], #4
 802195c:	4770      	bx	lr

0802195e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 802195e:	b580      	push	{r7, lr}
 8021960:	b084      	sub	sp, #16
 8021962:	af00      	add	r7, sp, #0
 8021964:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8021966:	687b      	ldr	r3, [r7, #4]
 8021968:	1d1a      	adds	r2, r3, #4
 802196a:	f107 030c 	add.w	r3, r7, #12
 802196e:	4611      	mov	r1, r2
 8021970:	4618      	mov	r0, r3
 8021972:	f000 fe32 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8021976:	68fb      	ldr	r3, [r7, #12]
 8021978:	4618      	mov	r0, r3
 802197a:	3710      	adds	r7, #16
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}

08021980 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8021980:	b480      	push	{r7}
 8021982:	b083      	sub	sp, #12
 8021984:	af00      	add	r7, sp, #0
 8021986:	6078      	str	r0, [r7, #4]
 8021988:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 802198a:	683b      	ldr	r3, [r7, #0]
 802198c:	681a      	ldr	r2, [r3, #0]
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	601a      	str	r2, [r3, #0]
 8021992:	687b      	ldr	r3, [r7, #4]
 8021994:	4618      	mov	r0, r3
 8021996:	370c      	adds	r7, #12
 8021998:	46bd      	mov	sp, r7
 802199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802199e:	4770      	bx	lr

080219a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80219a0:	b5b0      	push	{r4, r5, r7, lr}
 80219a2:	b08a      	sub	sp, #40	; 0x28
 80219a4:	af02      	add	r7, sp, #8
 80219a6:	60f8      	str	r0, [r7, #12]
 80219a8:	60b9      	str	r1, [r7, #8]
 80219aa:	607a      	str	r2, [r7, #4]
 80219ac:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80219ae:	f107 0318 	add.w	r3, r7, #24
 80219b2:	6879      	ldr	r1, [r7, #4]
 80219b4:	4618      	mov	r0, r3
 80219b6:	f000 ff42 	bl	802283e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 80219ba:	4603      	mov	r3, r0
 80219bc:	f107 0010 	add.w	r0, r7, #16
 80219c0:	68ba      	ldr	r2, [r7, #8]
 80219c2:	68f9      	ldr	r1, [r7, #12]
 80219c4:	f000 fe18 	bl	80225f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>
      if (__res.second)
 80219c8:	697b      	ldr	r3, [r7, #20]
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	d00f      	beq.n	80219ee <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80219ce:	693c      	ldr	r4, [r7, #16]
 80219d0:	697d      	ldr	r5, [r7, #20]
 80219d2:	6878      	ldr	r0, [r7, #4]
 80219d4:	f000 ff3f 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80219d8:	4602      	mov	r2, r0
 80219da:	683b      	ldr	r3, [r7, #0]
 80219dc:	9300      	str	r3, [sp, #0]
 80219de:	4613      	mov	r3, r2
 80219e0:	462a      	mov	r2, r5
 80219e2:	4621      	mov	r1, r4
 80219e4:	68f8      	ldr	r0, [r7, #12]
 80219e6:	f000 ff41 	bl	802286c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80219ea:	4603      	mov	r3, r0
			  __node_gen);
 80219ec:	e007      	b.n	80219fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80219ee:	693a      	ldr	r2, [r7, #16]
 80219f0:	f107 031c 	add.w	r3, r7, #28
 80219f4:	4611      	mov	r1, r2
 80219f6:	4618      	mov	r0, r3
 80219f8:	f000 fdef 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80219fc:	69fb      	ldr	r3, [r7, #28]
    }
 80219fe:	4618      	mov	r0, r3
 8021a00:	3720      	adds	r7, #32
 8021a02:	46bd      	mov	sp, r7
 8021a04:	bdb0      	pop	{r4, r5, r7, pc}

08021a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021a06:	b480      	push	{r7}
 8021a08:	b083      	sub	sp, #12
 8021a0a:	af00      	add	r7, sp, #0
 8021a0c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	68db      	ldr	r3, [r3, #12]
 8021a12:	4618      	mov	r0, r3
 8021a14:	370c      	adds	r7, #12
 8021a16:	46bd      	mov	sp, r7
 8021a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a1c:	4770      	bx	lr

08021a1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021a1e:	b480      	push	{r7}
 8021a20:	b083      	sub	sp, #12
 8021a22:	af00      	add	r7, sp, #0
 8021a24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	689b      	ldr	r3, [r3, #8]
 8021a2a:	4618      	mov	r0, r3
 8021a2c:	370c      	adds	r7, #12
 8021a2e:	46bd      	mov	sp, r7
 8021a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a34:	4770      	bx	lr

08021a36 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8021a36:	b580      	push	{r7, lr}
 8021a38:	b082      	sub	sp, #8
 8021a3a:	af00      	add	r7, sp, #0
 8021a3c:	6078      	str	r0, [r7, #4]
 8021a3e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8021a40:	6839      	ldr	r1, [r7, #0]
 8021a42:	6878      	ldr	r0, [r7, #4]
 8021a44:	f000 ff5b 	bl	80228fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8021a48:	6839      	ldr	r1, [r7, #0]
 8021a4a:	6878      	ldr	r0, [r7, #4]
 8021a4c:	f000 ff6c 	bl	8022928 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8021a50:	bf00      	nop
 8021a52:	3708      	adds	r7, #8
 8021a54:	46bd      	mov	sp, r7
 8021a56:	bd80      	pop	{r7, pc}

08021a58 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>:
 8021a58:	b480      	push	{r7}
 8021a5a:	b083      	sub	sp, #12
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
 8021a60:	6039      	str	r1, [r7, #0]
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	4618      	mov	r0, r3
 8021a66:	370c      	adds	r7, #12
 8021a68:	46bd      	mov	sp, r7
 8021a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a6e:	4770      	bx	lr

08021a70 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>:
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b082      	sub	sp, #8
 8021a74:	af00      	add	r7, sp, #0
 8021a76:	6078      	str	r0, [r7, #4]
 8021a78:	6039      	str	r1, [r7, #0]
 8021a7a:	6878      	ldr	r0, [r7, #4]
 8021a7c:	f000 ff66 	bl	802294c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	4618      	mov	r0, r3
 8021a84:	3708      	adds	r7, #8
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bd80      	pop	{r7, pc}

08021a8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8021a8a:	b580      	push	{r7, lr}
 8021a8c:	b084      	sub	sp, #16
 8021a8e:	af00      	add	r7, sp, #0
 8021a90:	60f8      	str	r0, [r7, #12]
 8021a92:	60b9      	str	r1, [r7, #8]
 8021a94:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8021a96:	6878      	ldr	r0, [r7, #4]
 8021a98:	f000 ff63 	bl	8022962 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8021a9c:	4603      	mov	r3, r0
 8021a9e:	4619      	mov	r1, r3
 8021aa0:	68f8      	ldr	r0, [r7, #12]
 8021aa2:	f000 ff69 	bl	8022978 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	68b9      	ldr	r1, [r7, #8]
 8021aaa:	4618      	mov	r0, r3
 8021aac:	f000 fbac 	bl	8022208 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	3304      	adds	r3, #4
 8021ab4:	4618      	mov	r0, r3
 8021ab6:	f7df fcdf 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	4618      	mov	r0, r3
 8021abe:	3710      	adds	r7, #16
 8021ac0:	46bd      	mov	sp, r7
 8021ac2:	bd80      	pop	{r7, pc}

08021ac4 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 8021ac4:	b480      	push	{r7}
 8021ac6:	b083      	sub	sp, #12
 8021ac8:	af00      	add	r7, sp, #0
 8021aca:	6078      	str	r0, [r7, #4]
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	685b      	ldr	r3, [r3, #4]
 8021ad0:	4618      	mov	r0, r3
 8021ad2:	370c      	adds	r7, #12
 8021ad4:	46bd      	mov	sp, r7
 8021ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ada:	4770      	bx	lr

08021adc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8021adc:	b480      	push	{r7}
 8021ade:	b083      	sub	sp, #12
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
 8021ae4:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8021ae6:	687b      	ldr	r3, [r7, #4]
 8021ae8:	683a      	ldr	r2, [r7, #0]
 8021aea:	601a      	str	r2, [r3, #0]
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	4618      	mov	r0, r3
 8021af0:	370c      	adds	r7, #12
 8021af2:	46bd      	mov	sp, r7
 8021af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021af8:	4770      	bx	lr

08021afa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8021afa:	b580      	push	{r7, lr}
 8021afc:	b084      	sub	sp, #16
 8021afe:	af00      	add	r7, sp, #0
 8021b00:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	1d1a      	adds	r2, r3, #4
 8021b06:	f107 030c 	add.w	r3, r7, #12
 8021b0a:	4611      	mov	r1, r2
 8021b0c:	4618      	mov	r0, r3
 8021b0e:	f000 ff41 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021b12:	68fb      	ldr	r3, [r7, #12]
 8021b14:	4618      	mov	r0, r3
 8021b16:	3710      	adds	r7, #16
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}

08021b1c <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8021b1c:	b480      	push	{r7}
 8021b1e:	b083      	sub	sp, #12
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
 8021b24:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	681a      	ldr	r2, [r3, #0]
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	601a      	str	r2, [r3, #0]
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	4618      	mov	r0, r3
 8021b32:	370c      	adds	r7, #12
 8021b34:	46bd      	mov	sp, r7
 8021b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b3a:	4770      	bx	lr

08021b3c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021b3c:	b5b0      	push	{r4, r5, r7, lr}
 8021b3e:	b08a      	sub	sp, #40	; 0x28
 8021b40:	af02      	add	r7, sp, #8
 8021b42:	60f8      	str	r0, [r7, #12]
 8021b44:	60b9      	str	r1, [r7, #8]
 8021b46:	607a      	str	r2, [r7, #4]
 8021b48:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8021b4a:	f107 0318 	add.w	r3, r7, #24
 8021b4e:	6879      	ldr	r1, [r7, #4]
 8021b50:	4618      	mov	r0, r3
 8021b52:	f001 f851 	bl	8022bf8 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8021b56:	4603      	mov	r3, r0
 8021b58:	f107 0010 	add.w	r0, r7, #16
 8021b5c:	68ba      	ldr	r2, [r7, #8]
 8021b5e:	68f9      	ldr	r1, [r7, #12]
 8021b60:	f000 ff27 	bl	80229b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8021b64:	697b      	ldr	r3, [r7, #20]
 8021b66:	2b00      	cmp	r3, #0
 8021b68:	d00f      	beq.n	8021b8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8021b6a:	693c      	ldr	r4, [r7, #16]
 8021b6c:	697d      	ldr	r5, [r7, #20]
 8021b6e:	6878      	ldr	r0, [r7, #4]
 8021b70:	f001 f84e 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8021b74:	4602      	mov	r2, r0
 8021b76:	683b      	ldr	r3, [r7, #0]
 8021b78:	9300      	str	r3, [sp, #0]
 8021b7a:	4613      	mov	r3, r2
 8021b7c:	462a      	mov	r2, r5
 8021b7e:	4621      	mov	r1, r4
 8021b80:	68f8      	ldr	r0, [r7, #12]
 8021b82:	f001 f850 	bl	8022c26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8021b86:	4603      	mov	r3, r0
			  __node_gen);
 8021b88:	e007      	b.n	8021b9a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8021b8a:	693a      	ldr	r2, [r7, #16]
 8021b8c:	f107 031c 	add.w	r3, r7, #28
 8021b90:	4611      	mov	r1, r2
 8021b92:	4618      	mov	r0, r3
 8021b94:	f000 fefe 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021b98:	69fb      	ldr	r3, [r7, #28]
    }
 8021b9a:	4618      	mov	r0, r3
 8021b9c:	3720      	adds	r7, #32
 8021b9e:	46bd      	mov	sp, r7
 8021ba0:	bdb0      	pop	{r4, r5, r7, pc}

08021ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021ba2:	b480      	push	{r7}
 8021ba4:	b083      	sub	sp, #12
 8021ba6:	af00      	add	r7, sp, #0
 8021ba8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	68db      	ldr	r3, [r3, #12]
 8021bae:	4618      	mov	r0, r3
 8021bb0:	370c      	adds	r7, #12
 8021bb2:	46bd      	mov	sp, r7
 8021bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb8:	4770      	bx	lr

08021bba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021bba:	b480      	push	{r7}
 8021bbc:	b083      	sub	sp, #12
 8021bbe:	af00      	add	r7, sp, #0
 8021bc0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	689b      	ldr	r3, [r3, #8]
 8021bc6:	4618      	mov	r0, r3
 8021bc8:	370c      	adds	r7, #12
 8021bca:	46bd      	mov	sp, r7
 8021bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bd0:	4770      	bx	lr

08021bd2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8021bd2:	b580      	push	{r7, lr}
 8021bd4:	b082      	sub	sp, #8
 8021bd6:	af00      	add	r7, sp, #0
 8021bd8:	6078      	str	r0, [r7, #4]
 8021bda:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8021bdc:	6839      	ldr	r1, [r7, #0]
 8021bde:	6878      	ldr	r0, [r7, #4]
 8021be0:	f001 f86a 	bl	8022cb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8021be4:	6839      	ldr	r1, [r7, #0]
 8021be6:	6878      	ldr	r0, [r7, #4]
 8021be8:	f001 f87b 	bl	8022ce2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8021bec:	bf00      	nop
 8021bee:	3708      	adds	r7, #8
 8021bf0:	46bd      	mov	sp, r7
 8021bf2:	bd80      	pop	{r7, pc}

08021bf4 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>:
 8021bf4:	b480      	push	{r7}
 8021bf6:	b083      	sub	sp, #12
 8021bf8:	af00      	add	r7, sp, #0
 8021bfa:	6078      	str	r0, [r7, #4]
 8021bfc:	6039      	str	r1, [r7, #0]
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	4618      	mov	r0, r3
 8021c02:	370c      	adds	r7, #12
 8021c04:	46bd      	mov	sp, r7
 8021c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c0a:	4770      	bx	lr

08021c0c <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>:
 8021c0c:	b580      	push	{r7, lr}
 8021c0e:	b082      	sub	sp, #8
 8021c10:	af00      	add	r7, sp, #0
 8021c12:	6078      	str	r0, [r7, #4]
 8021c14:	6039      	str	r1, [r7, #0]
 8021c16:	6878      	ldr	r0, [r7, #4]
 8021c18:	f001 f875 	bl	8022d06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	4618      	mov	r0, r3
 8021c20:	3708      	adds	r7, #8
 8021c22:	46bd      	mov	sp, r7
 8021c24:	bd80      	pop	{r7, pc}

08021c26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8021c26:	b580      	push	{r7, lr}
 8021c28:	b084      	sub	sp, #16
 8021c2a:	af00      	add	r7, sp, #0
 8021c2c:	60f8      	str	r0, [r7, #12]
 8021c2e:	60b9      	str	r1, [r7, #8]
 8021c30:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8021c32:	6878      	ldr	r0, [r7, #4]
 8021c34:	f001 f872 	bl	8022d1c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8021c38:	4603      	mov	r3, r0
 8021c3a:	4619      	mov	r1, r3
 8021c3c:	68f8      	ldr	r0, [r7, #12]
 8021c3e:	f001 f878 	bl	8022d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>
 8021c42:	68fb      	ldr	r3, [r7, #12]
 8021c44:	68b9      	ldr	r1, [r7, #8]
 8021c46:	4618      	mov	r0, r3
 8021c48:	f000 fade 	bl	8022208 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8021c4c:	68fb      	ldr	r3, [r7, #12]
 8021c4e:	3304      	adds	r3, #4
 8021c50:	4618      	mov	r0, r3
 8021c52:	f7df fc11 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8021c56:	68fb      	ldr	r3, [r7, #12]
 8021c58:	4618      	mov	r0, r3
 8021c5a:	3710      	adds	r7, #16
 8021c5c:	46bd      	mov	sp, r7
 8021c5e:	bd80      	pop	{r7, pc}

08021c60 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 8021c60:	b480      	push	{r7}
 8021c62:	b083      	sub	sp, #12
 8021c64:	af00      	add	r7, sp, #0
 8021c66:	6078      	str	r0, [r7, #4]
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	685b      	ldr	r3, [r3, #4]
 8021c6c:	4618      	mov	r0, r3
 8021c6e:	370c      	adds	r7, #12
 8021c70:	46bd      	mov	sp, r7
 8021c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c76:	4770      	bx	lr

08021c78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8021c78:	b480      	push	{r7}
 8021c7a:	b083      	sub	sp, #12
 8021c7c:	af00      	add	r7, sp, #0
 8021c7e:	6078      	str	r0, [r7, #4]
 8021c80:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	683a      	ldr	r2, [r7, #0]
 8021c86:	601a      	str	r2, [r3, #0]
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	4618      	mov	r0, r3
 8021c8c:	370c      	adds	r7, #12
 8021c8e:	46bd      	mov	sp, r7
 8021c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c94:	4770      	bx	lr

08021c96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021c96:	b5b0      	push	{r4, r5, r7, lr}
 8021c98:	b08a      	sub	sp, #40	; 0x28
 8021c9a:	af02      	add	r7, sp, #8
 8021c9c:	60f8      	str	r0, [r7, #12]
 8021c9e:	60b9      	str	r1, [r7, #8]
 8021ca0:	607a      	str	r2, [r7, #4]
 8021ca2:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8021ca4:	f107 0318 	add.w	r3, r7, #24
 8021ca8:	6879      	ldr	r1, [r7, #4]
 8021caa:	4618      	mov	r0, r3
 8021cac:	f7f3 fab8 	bl	8015220 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8021cb0:	4603      	mov	r3, r0
 8021cb2:	f107 0010 	add.w	r0, r7, #16
 8021cb6:	68ba      	ldr	r2, [r7, #8]
 8021cb8:	68f9      	ldr	r1, [r7, #12]
 8021cba:	f7f2 fb50 	bl	801435e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 8021cbe:	697b      	ldr	r3, [r7, #20]
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	d00f      	beq.n	8021ce4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8021cc4:	693c      	ldr	r4, [r7, #16]
 8021cc6:	697d      	ldr	r5, [r7, #20]
 8021cc8:	6878      	ldr	r0, [r7, #4]
 8021cca:	f001 f840 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8021cce:	4602      	mov	r2, r0
 8021cd0:	683b      	ldr	r3, [r7, #0]
 8021cd2:	9300      	str	r3, [sp, #0]
 8021cd4:	4613      	mov	r3, r2
 8021cd6:	462a      	mov	r2, r5
 8021cd8:	4621      	mov	r1, r4
 8021cda:	68f8      	ldr	r0, [r7, #12]
 8021cdc:	f001 f842 	bl	8022d64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 8021ce0:	4603      	mov	r3, r0
			  __node_gen);
 8021ce2:	e007      	b.n	8021cf4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8021ce4:	693a      	ldr	r2, [r7, #16]
 8021ce6:	f107 031c 	add.w	r3, r7, #28
 8021cea:	4611      	mov	r1, r2
 8021cec:	4618      	mov	r0, r3
 8021cee:	f7f2 fcba 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021cf2:	69fb      	ldr	r3, [r7, #28]
    }
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	3720      	adds	r7, #32
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bdb0      	pop	{r4, r5, r7, pc}

08021cfc <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>:
 8021cfc:	b480      	push	{r7}
 8021cfe:	b083      	sub	sp, #12
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	6078      	str	r0, [r7, #4]
 8021d04:	6039      	str	r1, [r7, #0]
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	4618      	mov	r0, r3
 8021d0a:	370c      	adds	r7, #12
 8021d0c:	46bd      	mov	sp, r7
 8021d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d12:	4770      	bx	lr

08021d14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>:
 8021d14:	b580      	push	{r7, lr}
 8021d16:	b082      	sub	sp, #8
 8021d18:	af00      	add	r7, sp, #0
 8021d1a:	6078      	str	r0, [r7, #4]
 8021d1c:	6039      	str	r1, [r7, #0]
 8021d1e:	6878      	ldr	r0, [r7, #4]
 8021d20:	f001 f869 	bl	8022df6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	4618      	mov	r0, r3
 8021d28:	3708      	adds	r7, #8
 8021d2a:	46bd      	mov	sp, r7
 8021d2c:	bd80      	pop	{r7, pc}

08021d2e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8021d2e:	b580      	push	{r7, lr}
 8021d30:	b084      	sub	sp, #16
 8021d32:	af00      	add	r7, sp, #0
 8021d34:	60f8      	str	r0, [r7, #12]
 8021d36:	60b9      	str	r1, [r7, #8]
 8021d38:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8021d3a:	6878      	ldr	r0, [r7, #4]
 8021d3c:	f001 f866 	bl	8022e0c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>
 8021d40:	4603      	mov	r3, r0
 8021d42:	4619      	mov	r1, r3
 8021d44:	68f8      	ldr	r0, [r7, #12]
 8021d46:	f001 f86c 	bl	8022e22 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>
 8021d4a:	68fb      	ldr	r3, [r7, #12]
 8021d4c:	68b9      	ldr	r1, [r7, #8]
 8021d4e:	4618      	mov	r0, r3
 8021d50:	f001 f875 	bl	8022e3e <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>
 8021d54:	68fb      	ldr	r3, [r7, #12]
 8021d56:	3304      	adds	r3, #4
 8021d58:	4618      	mov	r0, r3
 8021d5a:	f7df fb8d 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8021d5e:	68fb      	ldr	r3, [r7, #12]
 8021d60:	4618      	mov	r0, r3
 8021d62:	3710      	adds	r7, #16
 8021d64:	46bd      	mov	sp, r7
 8021d66:	bd80      	pop	{r7, pc}

08021d68 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 8021d68:	b480      	push	{r7}
 8021d6a:	b083      	sub	sp, #12
 8021d6c:	af00      	add	r7, sp, #0
 8021d6e:	6078      	str	r0, [r7, #4]
 8021d70:	687b      	ldr	r3, [r7, #4]
 8021d72:	685b      	ldr	r3, [r3, #4]
 8021d74:	4618      	mov	r0, r3
 8021d76:	370c      	adds	r7, #12
 8021d78:	46bd      	mov	sp, r7
 8021d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7e:	4770      	bx	lr

08021d80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 8021d80:	b480      	push	{r7}
 8021d82:	b083      	sub	sp, #12
 8021d84:	af00      	add	r7, sp, #0
 8021d86:	6078      	str	r0, [r7, #4]
 8021d88:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8021d8a:	687b      	ldr	r3, [r7, #4]
 8021d8c:	683a      	ldr	r2, [r7, #0]
 8021d8e:	601a      	str	r2, [r3, #0]
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	4618      	mov	r0, r3
 8021d94:	370c      	adds	r7, #12
 8021d96:	46bd      	mov	sp, r7
 8021d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d9c:	4770      	bx	lr

08021d9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021d9e:	b5b0      	push	{r4, r5, r7, lr}
 8021da0:	b08a      	sub	sp, #40	; 0x28
 8021da2:	af02      	add	r7, sp, #8
 8021da4:	60f8      	str	r0, [r7, #12]
 8021da6:	60b9      	str	r1, [r7, #8]
 8021da8:	607a      	str	r2, [r7, #4]
 8021daa:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8021dac:	f107 0318 	add.w	r3, r7, #24
 8021db0:	6879      	ldr	r1, [r7, #4]
 8021db2:	4618      	mov	r0, r3
 8021db4:	f7f5 fd71 	bl	801789a <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8021db8:	4603      	mov	r3, r0
 8021dba:	f107 0010 	add.w	r0, r7, #16
 8021dbe:	68ba      	ldr	r2, [r7, #8]
 8021dc0:	68f9      	ldr	r1, [r7, #12]
 8021dc2:	f7f4 ff01 	bl	8016bc8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 8021dc6:	697b      	ldr	r3, [r7, #20]
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d00f      	beq.n	8021dec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8021dcc:	693c      	ldr	r4, [r7, #16]
 8021dce:	697d      	ldr	r5, [r7, #20]
 8021dd0:	6878      	ldr	r0, [r7, #4]
 8021dd2:	f001 f840 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8021dd6:	4602      	mov	r2, r0
 8021dd8:	683b      	ldr	r3, [r7, #0]
 8021dda:	9300      	str	r3, [sp, #0]
 8021ddc:	4613      	mov	r3, r2
 8021dde:	462a      	mov	r2, r5
 8021de0:	4621      	mov	r1, r4
 8021de2:	68f8      	ldr	r0, [r7, #12]
 8021de4:	f001 f842 	bl	8022e6c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8021de8:	4603      	mov	r3, r0
			  __node_gen);
 8021dea:	e007      	b.n	8021dfc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8021dec:	693a      	ldr	r2, [r7, #16]
 8021dee:	f107 031c 	add.w	r3, r7, #28
 8021df2:	4611      	mov	r1, r2
 8021df4:	4618      	mov	r0, r3
 8021df6:	f7f5 f86b 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8021dfa:	69fb      	ldr	r3, [r7, #28]
    }
 8021dfc:	4618      	mov	r0, r3
 8021dfe:	3720      	adds	r7, #32
 8021e00:	46bd      	mov	sp, r7
 8021e02:	bdb0      	pop	{r4, r5, r7, pc}

08021e04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8021e04:	b480      	push	{r7}
 8021e06:	b083      	sub	sp, #12
 8021e08:	af00      	add	r7, sp, #0
 8021e0a:	6078      	str	r0, [r7, #4]
 8021e0c:	687b      	ldr	r3, [r7, #4]
 8021e0e:	4618      	mov	r0, r3
 8021e10:	370c      	adds	r7, #12
 8021e12:	46bd      	mov	sp, r7
 8021e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e18:	4770      	bx	lr

08021e1a <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8021e1a:	b480      	push	{r7}
 8021e1c:	b083      	sub	sp, #12
 8021e1e:	af00      	add	r7, sp, #0
 8021e20:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8021e22:	687b      	ldr	r3, [r7, #4]
 8021e24:	4618      	mov	r0, r3
 8021e26:	370c      	adds	r7, #12
 8021e28:	46bd      	mov	sp, r7
 8021e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e2e:	4770      	bx	lr

08021e30 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8021e30:	b580      	push	{r7, lr}
 8021e32:	b082      	sub	sp, #8
 8021e34:	af00      	add	r7, sp, #0
 8021e36:	6078      	str	r0, [r7, #4]
 8021e38:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8021e3a:	6839      	ldr	r1, [r7, #0]
 8021e3c:	6878      	ldr	r0, [r7, #4]
 8021e3e:	f001 f85e 	bl	8022efe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>
 8021e42:	687b      	ldr	r3, [r7, #4]
 8021e44:	4618      	mov	r0, r3
 8021e46:	3708      	adds	r7, #8
 8021e48:	46bd      	mov	sp, r7
 8021e4a:	bd80      	pop	{r7, pc}

08021e4c <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8021e4c:	b480      	push	{r7}
 8021e4e:	b083      	sub	sp, #12
 8021e50:	af00      	add	r7, sp, #0
 8021e52:	6078      	str	r0, [r7, #4]
 8021e54:	6039      	str	r1, [r7, #0]
      { }
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	4618      	mov	r0, r3
 8021e5a:	370c      	adds	r7, #12
 8021e5c:	46bd      	mov	sp, r7
 8021e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e62:	4770      	bx	lr

08021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8021e64:	b480      	push	{r7}
 8021e66:	b083      	sub	sp, #12
 8021e68:	af00      	add	r7, sp, #0
 8021e6a:	6078      	str	r0, [r7, #4]
 8021e6c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	683a      	ldr	r2, [r7, #0]
 8021e72:	601a      	str	r2, [r3, #0]
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	4618      	mov	r0, r3
 8021e78:	370c      	adds	r7, #12
 8021e7a:	46bd      	mov	sp, r7
 8021e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e80:	4770      	bx	lr

08021e82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8021e82:	b590      	push	{r4, r7, lr}
 8021e84:	b08d      	sub	sp, #52	; 0x34
 8021e86:	af00      	add	r7, sp, #0
 8021e88:	60f8      	str	r0, [r7, #12]
 8021e8a:	60b9      	str	r1, [r7, #8]
 8021e8c:	607a      	str	r2, [r7, #4]
 8021e8e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8021e90:	1d3b      	adds	r3, r7, #4
 8021e92:	4618      	mov	r0, r3
 8021e94:	f001 f83f 	bl	8022f16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>
 8021e98:	4603      	mov	r3, r0
 8021e9a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8021e9c:	69bc      	ldr	r4, [r7, #24]
 8021e9e:	68b8      	ldr	r0, [r7, #8]
 8021ea0:	f001 f84a 	bl	8022f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8021ea4:	4603      	mov	r3, r0
 8021ea6:	429c      	cmp	r4, r3
 8021ea8:	bf0c      	ite	eq
 8021eaa:	2301      	moveq	r3, #1
 8021eac:	2300      	movne	r3, #0
 8021eae:	b2db      	uxtb	r3, r3
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d030      	beq.n	8021f16 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8021eb4:	68b8      	ldr	r0, [r7, #8]
 8021eb6:	f001 f84b 	bl	8022f50 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 8021eba:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8021ebc:	2b00      	cmp	r3, #0
 8021ebe:	d013      	beq.n	8021ee8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8021ec0:	68bc      	ldr	r4, [r7, #8]
 8021ec2:	68b8      	ldr	r0, [r7, #8]
 8021ec4:	f001 f850 	bl	8022f68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8021ec8:	4603      	mov	r3, r0
 8021eca:	681b      	ldr	r3, [r3, #0]
 8021ecc:	4618      	mov	r0, r3
 8021ece:	f001 f857 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8021ed2:	4603      	mov	r3, r0
 8021ed4:	683a      	ldr	r2, [r7, #0]
 8021ed6:	4619      	mov	r1, r3
 8021ed8:	4620      	mov	r0, r4
 8021eda:	f001 f87a 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8021ede:	4603      	mov	r3, r0
 8021ee0:	2b00      	cmp	r3, #0
 8021ee2:	d001      	beq.n	8021ee8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 8021ee4:	2301      	movs	r3, #1
 8021ee6:	e000      	b.n	8021eea <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 8021ee8:	2300      	movs	r3, #0
	  if (size() > 0
 8021eea:	2b00      	cmp	r3, #0
 8021eec:	d00c      	beq.n	8021f08 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8021eee:	2300      	movs	r3, #0
 8021ef0:	61fb      	str	r3, [r7, #28]
 8021ef2:	68b8      	ldr	r0, [r7, #8]
 8021ef4:	f001 f838 	bl	8022f68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8021ef8:	4602      	mov	r2, r0
 8021efa:	f107 031c 	add.w	r3, r7, #28
 8021efe:	4619      	mov	r1, r3
 8021f00:	68f8      	ldr	r0, [r7, #12]
 8021f02:	f7f2 fee3 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8021f06:	e0db      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8021f08:	68fb      	ldr	r3, [r7, #12]
 8021f0a:	683a      	ldr	r2, [r7, #0]
 8021f0c:	68b9      	ldr	r1, [r7, #8]
 8021f0e:	4618      	mov	r0, r3
 8021f10:	f001 f879 	bl	8023006 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8021f14:	e0d4      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8021f16:	68bc      	ldr	r4, [r7, #8]
 8021f18:	69bb      	ldr	r3, [r7, #24]
 8021f1a:	4618      	mov	r0, r3
 8021f1c:	f001 f830 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8021f20:	4603      	mov	r3, r0
 8021f22:	461a      	mov	r2, r3
 8021f24:	6839      	ldr	r1, [r7, #0]
 8021f26:	4620      	mov	r0, r4
 8021f28:	f001 f853 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8021f2c:	4603      	mov	r3, r0
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	d057      	beq.n	8021fe2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8021f32:	69bb      	ldr	r3, [r7, #24]
 8021f34:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8021f36:	69bc      	ldr	r4, [r7, #24]
 8021f38:	68b8      	ldr	r0, [r7, #8]
 8021f3a:	f001 f8e9 	bl	8023110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8021f3e:	4603      	mov	r3, r0
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	429c      	cmp	r4, r3
 8021f44:	bf0c      	ite	eq
 8021f46:	2301      	moveq	r3, #1
 8021f48:	2300      	movne	r3, #0
 8021f4a:	b2db      	uxtb	r3, r3
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d00d      	beq.n	8021f6c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8021f50:	68b8      	ldr	r0, [r7, #8]
 8021f52:	f001 f8dd 	bl	8023110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8021f56:	4604      	mov	r4, r0
 8021f58:	68b8      	ldr	r0, [r7, #8]
 8021f5a:	f001 f8d9 	bl	8023110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8021f5e:	4603      	mov	r3, r0
 8021f60:	461a      	mov	r2, r3
 8021f62:	4621      	mov	r1, r4
 8021f64:	68f8      	ldr	r0, [r7, #12]
 8021f66:	f7f2 ff58 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8021f6a:	e0a9      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8021f6c:	68bc      	ldr	r4, [r7, #8]
 8021f6e:	f107 0314 	add.w	r3, r7, #20
 8021f72:	4618      	mov	r0, r3
 8021f74:	f001 f8d8 	bl	8023128 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
 8021f78:	4603      	mov	r3, r0
 8021f7a:	681b      	ldr	r3, [r3, #0]
 8021f7c:	4618      	mov	r0, r3
 8021f7e:	f000 ffff 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8021f82:	4603      	mov	r3, r0
 8021f84:	683a      	ldr	r2, [r7, #0]
 8021f86:	4619      	mov	r1, r3
 8021f88:	4620      	mov	r0, r4
 8021f8a:	f001 f822 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8021f8e:	4603      	mov	r3, r0
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d01f      	beq.n	8021fd4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8021f94:	697b      	ldr	r3, [r7, #20]
 8021f96:	4618      	mov	r0, r3
 8021f98:	f7ff fb8e 	bl	80216b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8021f9c:	4603      	mov	r3, r0
 8021f9e:	2b00      	cmp	r3, #0
 8021fa0:	bf0c      	ite	eq
 8021fa2:	2301      	moveq	r3, #1
 8021fa4:	2300      	movne	r3, #0
 8021fa6:	b2db      	uxtb	r3, r3
 8021fa8:	2b00      	cmp	r3, #0
 8021faa:	d00a      	beq.n	8021fc2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8021fac:	2300      	movs	r3, #0
 8021fae:	623b      	str	r3, [r7, #32]
 8021fb0:	f107 0214 	add.w	r2, r7, #20
 8021fb4:	f107 0320 	add.w	r3, r7, #32
 8021fb8:	4619      	mov	r1, r3
 8021fba:	68f8      	ldr	r0, [r7, #12]
 8021fbc:	f7f2 fe86 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8021fc0:	e07e      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8021fc2:	f107 0218 	add.w	r2, r7, #24
 8021fc6:	f107 0318 	add.w	r3, r7, #24
 8021fca:	4619      	mov	r1, r3
 8021fcc:	68f8      	ldr	r0, [r7, #12]
 8021fce:	f7f2 ff24 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8021fd2:	e075      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8021fd4:	68fb      	ldr	r3, [r7, #12]
 8021fd6:	683a      	ldr	r2, [r7, #0]
 8021fd8:	68b9      	ldr	r1, [r7, #8]
 8021fda:	4618      	mov	r0, r3
 8021fdc:	f001 f813 	bl	8023006 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8021fe0:	e06e      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8021fe2:	68bc      	ldr	r4, [r7, #8]
 8021fe4:	69bb      	ldr	r3, [r7, #24]
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	f000 ffca 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8021fec:	4603      	mov	r3, r0
 8021fee:	683a      	ldr	r2, [r7, #0]
 8021ff0:	4619      	mov	r1, r3
 8021ff2:	4620      	mov	r0, r4
 8021ff4:	f000 ffed 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8021ff8:	4603      	mov	r3, r0
 8021ffa:	2b00      	cmp	r3, #0
 8021ffc:	d056      	beq.n	80220ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 8021ffe:	69bb      	ldr	r3, [r7, #24]
 8022000:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8022002:	69bc      	ldr	r4, [r7, #24]
 8022004:	68b8      	ldr	r0, [r7, #8]
 8022006:	f000 ffaf 	bl	8022f68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 802200a:	4603      	mov	r3, r0
 802200c:	681b      	ldr	r3, [r3, #0]
 802200e:	429c      	cmp	r4, r3
 8022010:	bf0c      	ite	eq
 8022012:	2301      	moveq	r3, #1
 8022014:	2300      	movne	r3, #0
 8022016:	b2db      	uxtb	r3, r3
 8022018:	2b00      	cmp	r3, #0
 802201a:	d00c      	beq.n	8022036 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 802201c:	2300      	movs	r3, #0
 802201e:	627b      	str	r3, [r7, #36]	; 0x24
 8022020:	68b8      	ldr	r0, [r7, #8]
 8022022:	f000 ffa1 	bl	8022f68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8022026:	4602      	mov	r2, r0
 8022028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802202c:	4619      	mov	r1, r3
 802202e:	68f8      	ldr	r0, [r7, #12]
 8022030:	f7f2 fe4c 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022034:	e044      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8022036:	68bc      	ldr	r4, [r7, #8]
 8022038:	f107 0310 	add.w	r3, r7, #16
 802203c:	4618      	mov	r0, r3
 802203e:	f001 f884 	bl	802314a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>
 8022042:	4603      	mov	r3, r0
 8022044:	681b      	ldr	r3, [r3, #0]
 8022046:	4618      	mov	r0, r3
 8022048:	f000 ff9a 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802204c:	4603      	mov	r3, r0
 802204e:	461a      	mov	r2, r3
 8022050:	6839      	ldr	r1, [r7, #0]
 8022052:	4620      	mov	r0, r4
 8022054:	f000 ffbd 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8022058:	4603      	mov	r3, r0
 802205a:	2b00      	cmp	r3, #0
 802205c:	d01f      	beq.n	802209e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 802205e:	69bb      	ldr	r3, [r7, #24]
 8022060:	4618      	mov	r0, r3
 8022062:	f7ff fb29 	bl	80216b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022066:	4603      	mov	r3, r0
 8022068:	2b00      	cmp	r3, #0
 802206a:	bf0c      	ite	eq
 802206c:	2301      	moveq	r3, #1
 802206e:	2300      	movne	r3, #0
 8022070:	b2db      	uxtb	r3, r3
 8022072:	2b00      	cmp	r3, #0
 8022074:	d00a      	beq.n	802208c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8022076:	2300      	movs	r3, #0
 8022078:	62bb      	str	r3, [r7, #40]	; 0x28
 802207a:	f107 0218 	add.w	r2, r7, #24
 802207e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022082:	4619      	mov	r1, r3
 8022084:	68f8      	ldr	r0, [r7, #12]
 8022086:	f7f2 fe21 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 802208a:	e019      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 802208c:	f107 0210 	add.w	r2, r7, #16
 8022090:	f107 0310 	add.w	r3, r7, #16
 8022094:	4619      	mov	r1, r3
 8022096:	68f8      	ldr	r0, [r7, #12]
 8022098:	f7f2 febf 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 802209c:	e010      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 802209e:	68fb      	ldr	r3, [r7, #12]
 80220a0:	683a      	ldr	r2, [r7, #0]
 80220a2:	68b9      	ldr	r1, [r7, #8]
 80220a4:	4618      	mov	r0, r3
 80220a6:	f000 ffae 	bl	8023006 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80220aa:	e009      	b.n	80220c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 80220ac:	2300      	movs	r3, #0
 80220ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80220b0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80220b4:	f107 0318 	add.w	r3, r7, #24
 80220b8:	4619      	mov	r1, r3
 80220ba:	68f8      	ldr	r0, [r7, #12]
 80220bc:	f7f2 fee8 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80220c0:	68f8      	ldr	r0, [r7, #12]
 80220c2:	3734      	adds	r7, #52	; 0x34
 80220c4:	46bd      	mov	sp, r7
 80220c6:	bd90      	pop	{r4, r7, pc}

080220c8 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>:
      operator()(const _Pair& __x) const
 80220c8:	b480      	push	{r7}
 80220ca:	b083      	sub	sp, #12
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80220d2:	683b      	ldr	r3, [r7, #0]
 80220d4:	4618      	mov	r0, r3
 80220d6:	370c      	adds	r7, #12
 80220d8:	46bd      	mov	sp, r7
 80220da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220de:	4770      	bx	lr

080220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80220e0:	b480      	push	{r7}
 80220e2:	b083      	sub	sp, #12
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	4618      	mov	r0, r3
 80220ec:	370c      	adds	r7, #12
 80220ee:	46bd      	mov	sp, r7
 80220f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220f4:	4770      	bx	lr

080220f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80220f6:	b5b0      	push	{r4, r5, r7, lr}
 80220f8:	b088      	sub	sp, #32
 80220fa:	af00      	add	r7, sp, #0
 80220fc:	60f8      	str	r0, [r7, #12]
 80220fe:	60b9      	str	r1, [r7, #8]
 8022100:	607a      	str	r2, [r7, #4]
 8022102:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022104:	68bb      	ldr	r3, [r7, #8]
 8022106:	2b00      	cmp	r3, #0
 8022108:	d11a      	bne.n	8022140 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 802210a:	68f8      	ldr	r0, [r7, #12]
 802210c:	f000 ff14 	bl	8022f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8022110:	4602      	mov	r2, r0
 8022112:	687b      	ldr	r3, [r7, #4]
 8022114:	4293      	cmp	r3, r2
 8022116:	d013      	beq.n	8022140 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022118:	68fc      	ldr	r4, [r7, #12]
 802211a:	f107 0310 	add.w	r3, r7, #16
 802211e:	6839      	ldr	r1, [r7, #0]
 8022120:	4618      	mov	r0, r3
 8022122:	f7ff ffd1 	bl	80220c8 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8022126:	4605      	mov	r5, r0
 8022128:	6878      	ldr	r0, [r7, #4]
 802212a:	f000 ff29 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802212e:	4603      	mov	r3, r0
 8022130:	461a      	mov	r2, r3
 8022132:	4629      	mov	r1, r5
 8022134:	4620      	mov	r0, r4
 8022136:	f000 ff4c 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 802213a:	4603      	mov	r3, r0
 802213c:	2b00      	cmp	r3, #0
 802213e:	d001      	beq.n	8022144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 8022140:	2301      	movs	r3, #1
 8022142:	e000      	b.n	8022146 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8022144:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022146:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8022148:	6838      	ldr	r0, [r7, #0]
 802214a:	f7ff ffc9 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 802214e:	4603      	mov	r3, r0
 8022150:	4619      	mov	r1, r3
 8022152:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022154:	f001 f80a 	bl	802316c <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 8022158:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 802215a:	68fb      	ldr	r3, [r7, #12]
 802215c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 802215e:	7ff8      	ldrb	r0, [r7, #31]
 8022160:	687a      	ldr	r2, [r7, #4]
 8022162:	69b9      	ldr	r1, [r7, #24]
 8022164:	f004 f809 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8022168:	68fb      	ldr	r3, [r7, #12]
 802216a:	695b      	ldr	r3, [r3, #20]
 802216c:	1c5a      	adds	r2, r3, #1
 802216e:	68fb      	ldr	r3, [r7, #12]
 8022170:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8022172:	f107 0314 	add.w	r3, r7, #20
 8022176:	69b9      	ldr	r1, [r7, #24]
 8022178:	4618      	mov	r0, r3
 802217a:	f7ff fe73 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 802217e:	697b      	ldr	r3, [r7, #20]
      }
 8022180:	4618      	mov	r0, r3
 8022182:	3720      	adds	r7, #32
 8022184:	46bd      	mov	sp, r7
 8022186:	bdb0      	pop	{r4, r5, r7, pc}

08022188 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022188:	b590      	push	{r4, r7, lr}
 802218a:	b083      	sub	sp, #12
 802218c:	af00      	add	r7, sp, #0
 802218e:	6078      	str	r0, [r7, #4]
 8022190:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8022192:	6878      	ldr	r0, [r7, #4]
 8022194:	f000 fffe 	bl	8023194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8022198:	4604      	mov	r4, r0
 802219a:	6838      	ldr	r0, [r7, #0]
 802219c:	f001 f805 	bl	80231aa <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 80221a0:	4603      	mov	r3, r0
 80221a2:	4619      	mov	r1, r3
 80221a4:	4620      	mov	r0, r4
 80221a6:	f001 f80e 	bl	80231c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>
      }
 80221aa:	bf00      	nop
 80221ac:	370c      	adds	r7, #12
 80221ae:	46bd      	mov	sp, r7
 80221b0:	bd90      	pop	{r4, r7, pc}

080221b2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80221b2:	b580      	push	{r7, lr}
 80221b4:	b082      	sub	sp, #8
 80221b6:	af00      	add	r7, sp, #0
 80221b8:	6078      	str	r0, [r7, #4]
 80221ba:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80221bc:	6878      	ldr	r0, [r7, #4]
 80221be:	f000 ffe9 	bl	8023194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 80221c2:	4603      	mov	r3, r0
 80221c4:	2201      	movs	r2, #1
 80221c6:	6839      	ldr	r1, [r7, #0]
 80221c8:	4618      	mov	r0, r3
 80221ca:	f001 f808 	bl	80231de <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>
 80221ce:	bf00      	nop
 80221d0:	3708      	adds	r7, #8
 80221d2:	46bd      	mov	sp, r7
 80221d4:	bd80      	pop	{r7, pc}

080221d6 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80221d6:	b480      	push	{r7}
 80221d8:	b083      	sub	sp, #12
 80221da:	af00      	add	r7, sp, #0
 80221dc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	4618      	mov	r0, r3
 80221e2:	370c      	adds	r7, #12
 80221e4:	46bd      	mov	sp, r7
 80221e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221ea:	4770      	bx	lr

080221ec <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80221ec:	b580      	push	{r7, lr}
 80221ee:	b082      	sub	sp, #8
 80221f0:	af00      	add	r7, sp, #0
 80221f2:	6078      	str	r0, [r7, #4]
 80221f4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80221f6:	6839      	ldr	r1, [r7, #0]
 80221f8:	6878      	ldr	r0, [r7, #4]
 80221fa:	f001 f80f 	bl	802321c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>
 80221fe:	687b      	ldr	r3, [r7, #4]
 8022200:	4618      	mov	r0, r3
 8022202:	3708      	adds	r7, #8
 8022204:	46bd      	mov	sp, r7
 8022206:	bd80      	pop	{r7, pc}

08022208 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8022208:	b480      	push	{r7}
 802220a:	b083      	sub	sp, #12
 802220c:	af00      	add	r7, sp, #0
 802220e:	6078      	str	r0, [r7, #4]
 8022210:	6039      	str	r1, [r7, #0]
      { }
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	4618      	mov	r0, r3
 8022216:	370c      	adds	r7, #12
 8022218:	46bd      	mov	sp, r7
 802221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802221e:	4770      	bx	lr

08022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022220:	b480      	push	{r7}
 8022222:	b083      	sub	sp, #12
 8022224:	af00      	add	r7, sp, #0
 8022226:	6078      	str	r0, [r7, #4]
 8022228:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 802222a:	687b      	ldr	r3, [r7, #4]
 802222c:	683a      	ldr	r2, [r7, #0]
 802222e:	601a      	str	r2, [r3, #0]
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	4618      	mov	r0, r3
 8022234:	370c      	adds	r7, #12
 8022236:	46bd      	mov	sp, r7
 8022238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802223c:	4770      	bx	lr

0802223e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 802223e:	b590      	push	{r4, r7, lr}
 8022240:	b08d      	sub	sp, #52	; 0x34
 8022242:	af00      	add	r7, sp, #0
 8022244:	60f8      	str	r0, [r7, #12]
 8022246:	60b9      	str	r1, [r7, #8]
 8022248:	607a      	str	r2, [r7, #4]
 802224a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 802224c:	1d3b      	adds	r3, r7, #4
 802224e:	4618      	mov	r0, r3
 8022250:	f000 fff0 	bl	8023234 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>
 8022254:	4603      	mov	r3, r0
 8022256:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8022258:	69bc      	ldr	r4, [r7, #24]
 802225a:	68b8      	ldr	r0, [r7, #8]
 802225c:	f000 fffb 	bl	8023256 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8022260:	4603      	mov	r3, r0
 8022262:	429c      	cmp	r4, r3
 8022264:	bf0c      	ite	eq
 8022266:	2301      	moveq	r3, #1
 8022268:	2300      	movne	r3, #0
 802226a:	b2db      	uxtb	r3, r3
 802226c:	2b00      	cmp	r3, #0
 802226e:	d030      	beq.n	80222d2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x94>
	  if (size() > 0
 8022270:	68b8      	ldr	r0, [r7, #8]
 8022272:	f000 fffc 	bl	802326e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>
 8022276:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8022278:	2b00      	cmp	r3, #0
 802227a:	d013      	beq.n	80222a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 802227c:	68bc      	ldr	r4, [r7, #8]
 802227e:	68b8      	ldr	r0, [r7, #8]
 8022280:	f001 f801 	bl	8023286 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8022284:	4603      	mov	r3, r0
 8022286:	681b      	ldr	r3, [r3, #0]
 8022288:	4618      	mov	r0, r3
 802228a:	f001 f808 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802228e:	4603      	mov	r3, r0
 8022290:	683a      	ldr	r2, [r7, #0]
 8022292:	4619      	mov	r1, r3
 8022294:	4620      	mov	r0, r4
 8022296:	f7f1 f9ec 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 802229a:	4603      	mov	r3, r0
 802229c:	2b00      	cmp	r3, #0
 802229e:	d001      	beq.n	80222a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 80222a0:	2301      	movs	r3, #1
 80222a2:	e000      	b.n	80222a6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x68>
 80222a4:	2300      	movs	r3, #0
	  if (size() > 0
 80222a6:	2b00      	cmp	r3, #0
 80222a8:	d00c      	beq.n	80222c4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80222aa:	2300      	movs	r3, #0
 80222ac:	61fb      	str	r3, [r7, #28]
 80222ae:	68b8      	ldr	r0, [r7, #8]
 80222b0:	f000 ffe9 	bl	8023286 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80222b4:	4602      	mov	r2, r0
 80222b6:	f107 031c 	add.w	r3, r7, #28
 80222ba:	4619      	mov	r1, r3
 80222bc:	68f8      	ldr	r0, [r7, #12]
 80222be:	f7f2 fd05 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80222c2:	e0db      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80222c4:	68fb      	ldr	r3, [r7, #12]
 80222c6:	683a      	ldr	r2, [r7, #0]
 80222c8:	68b9      	ldr	r1, [r7, #8]
 80222ca:	4618      	mov	r0, r3
 80222cc:	f000 fff3 	bl	80232b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 80222d0:	e0d4      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80222d2:	68bc      	ldr	r4, [r7, #8]
 80222d4:	69bb      	ldr	r3, [r7, #24]
 80222d6:	4618      	mov	r0, r3
 80222d8:	f000 ffe1 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80222dc:	4603      	mov	r3, r0
 80222de:	461a      	mov	r2, r3
 80222e0:	6839      	ldr	r1, [r7, #0]
 80222e2:	4620      	mov	r0, r4
 80222e4:	f7f1 f9c5 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80222e8:	4603      	mov	r3, r0
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	d057      	beq.n	802239e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x160>
	  iterator __before = __pos;
 80222ee:	69bb      	ldr	r3, [r7, #24]
 80222f0:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80222f2:	69bc      	ldr	r4, [r7, #24]
 80222f4:	68b8      	ldr	r0, [r7, #8]
 80222f6:	f001 f863 	bl	80233c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 80222fa:	4603      	mov	r3, r0
 80222fc:	681b      	ldr	r3, [r3, #0]
 80222fe:	429c      	cmp	r4, r3
 8022300:	bf0c      	ite	eq
 8022302:	2301      	moveq	r3, #1
 8022304:	2300      	movne	r3, #0
 8022306:	b2db      	uxtb	r3, r3
 8022308:	2b00      	cmp	r3, #0
 802230a:	d00d      	beq.n	8022328 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 802230c:	68b8      	ldr	r0, [r7, #8]
 802230e:	f001 f857 	bl	80233c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8022312:	4604      	mov	r4, r0
 8022314:	68b8      	ldr	r0, [r7, #8]
 8022316:	f001 f853 	bl	80233c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 802231a:	4603      	mov	r3, r0
 802231c:	461a      	mov	r2, r3
 802231e:	4621      	mov	r1, r4
 8022320:	68f8      	ldr	r0, [r7, #12]
 8022322:	f7f2 fd7a 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022326:	e0a9      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8022328:	68bc      	ldr	r4, [r7, #8]
 802232a:	f107 0314 	add.w	r3, r7, #20
 802232e:	4618      	mov	r0, r3
 8022330:	f001 f852 	bl	80233d8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
 8022334:	4603      	mov	r3, r0
 8022336:	681b      	ldr	r3, [r3, #0]
 8022338:	4618      	mov	r0, r3
 802233a:	f000 ffb0 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802233e:	4603      	mov	r3, r0
 8022340:	683a      	ldr	r2, [r7, #0]
 8022342:	4619      	mov	r1, r3
 8022344:	4620      	mov	r0, r4
 8022346:	f7f1 f994 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 802234a:	4603      	mov	r3, r0
 802234c:	2b00      	cmp	r3, #0
 802234e:	d01f      	beq.n	8022390 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8022350:	697b      	ldr	r3, [r7, #20]
 8022352:	4618      	mov	r0, r3
 8022354:	f7ff fa7e 	bl	8021854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022358:	4603      	mov	r3, r0
 802235a:	2b00      	cmp	r3, #0
 802235c:	bf0c      	ite	eq
 802235e:	2301      	moveq	r3, #1
 8022360:	2300      	movne	r3, #0
 8022362:	b2db      	uxtb	r3, r3
 8022364:	2b00      	cmp	r3, #0
 8022366:	d00a      	beq.n	802237e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8022368:	2300      	movs	r3, #0
 802236a:	623b      	str	r3, [r7, #32]
 802236c:	f107 0214 	add.w	r2, r7, #20
 8022370:	f107 0320 	add.w	r3, r7, #32
 8022374:	4619      	mov	r1, r3
 8022376:	68f8      	ldr	r0, [r7, #12]
 8022378:	f7f2 fca8 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 802237c:	e07e      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 802237e:	f107 0218 	add.w	r2, r7, #24
 8022382:	f107 0318 	add.w	r3, r7, #24
 8022386:	4619      	mov	r1, r3
 8022388:	68f8      	ldr	r0, [r7, #12]
 802238a:	f7f2 fd46 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 802238e:	e075      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	683a      	ldr	r2, [r7, #0]
 8022394:	68b9      	ldr	r1, [r7, #8]
 8022396:	4618      	mov	r0, r3
 8022398:	f000 ff8d 	bl	80232b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 802239c:	e06e      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 802239e:	68bc      	ldr	r4, [r7, #8]
 80223a0:	69bb      	ldr	r3, [r7, #24]
 80223a2:	4618      	mov	r0, r3
 80223a4:	f000 ff7b 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80223a8:	4603      	mov	r3, r0
 80223aa:	683a      	ldr	r2, [r7, #0]
 80223ac:	4619      	mov	r1, r3
 80223ae:	4620      	mov	r0, r4
 80223b0:	f7f1 f95f 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80223b4:	4603      	mov	r3, r0
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d056      	beq.n	8022468 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x22a>
	  iterator __after = __pos;
 80223ba:	69bb      	ldr	r3, [r7, #24]
 80223bc:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80223be:	69bc      	ldr	r4, [r7, #24]
 80223c0:	68b8      	ldr	r0, [r7, #8]
 80223c2:	f000 ff60 	bl	8023286 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80223c6:	4603      	mov	r3, r0
 80223c8:	681b      	ldr	r3, [r3, #0]
 80223ca:	429c      	cmp	r4, r3
 80223cc:	bf0c      	ite	eq
 80223ce:	2301      	moveq	r3, #1
 80223d0:	2300      	movne	r3, #0
 80223d2:	b2db      	uxtb	r3, r3
 80223d4:	2b00      	cmp	r3, #0
 80223d6:	d00c      	beq.n	80223f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 80223d8:	2300      	movs	r3, #0
 80223da:	627b      	str	r3, [r7, #36]	; 0x24
 80223dc:	68b8      	ldr	r0, [r7, #8]
 80223de:	f000 ff52 	bl	8023286 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 80223e2:	4602      	mov	r2, r0
 80223e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80223e8:	4619      	mov	r1, r3
 80223ea:	68f8      	ldr	r0, [r7, #12]
 80223ec:	f7f2 fc6e 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80223f0:	e044      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80223f2:	68bc      	ldr	r4, [r7, #8]
 80223f4:	f107 0310 	add.w	r3, r7, #16
 80223f8:	4618      	mov	r0, r3
 80223fa:	f000 fffe 	bl	80233fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>
 80223fe:	4603      	mov	r3, r0
 8022400:	681b      	ldr	r3, [r3, #0]
 8022402:	4618      	mov	r0, r3
 8022404:	f000 ff4b 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022408:	4603      	mov	r3, r0
 802240a:	461a      	mov	r2, r3
 802240c:	6839      	ldr	r1, [r7, #0]
 802240e:	4620      	mov	r0, r4
 8022410:	f7f1 f92f 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022414:	4603      	mov	r3, r0
 8022416:	2b00      	cmp	r3, #0
 8022418:	d01f      	beq.n	802245a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 802241a:	69bb      	ldr	r3, [r7, #24]
 802241c:	4618      	mov	r0, r3
 802241e:	f7ff fa19 	bl	8021854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022422:	4603      	mov	r3, r0
 8022424:	2b00      	cmp	r3, #0
 8022426:	bf0c      	ite	eq
 8022428:	2301      	moveq	r3, #1
 802242a:	2300      	movne	r3, #0
 802242c:	b2db      	uxtb	r3, r3
 802242e:	2b00      	cmp	r3, #0
 8022430:	d00a      	beq.n	8022448 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8022432:	2300      	movs	r3, #0
 8022434:	62bb      	str	r3, [r7, #40]	; 0x28
 8022436:	f107 0218 	add.w	r2, r7, #24
 802243a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802243e:	4619      	mov	r1, r3
 8022440:	68f8      	ldr	r0, [r7, #12]
 8022442:	f7f2 fc43 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022446:	e019      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8022448:	f107 0210 	add.w	r2, r7, #16
 802244c:	f107 0310 	add.w	r3, r7, #16
 8022450:	4619      	mov	r1, r3
 8022452:	68f8      	ldr	r0, [r7, #12]
 8022454:	f7f2 fce1 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022458:	e010      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 802245a:	68fb      	ldr	r3, [r7, #12]
 802245c:	683a      	ldr	r2, [r7, #0]
 802245e:	68b9      	ldr	r1, [r7, #8]
 8022460:	4618      	mov	r0, r3
 8022462:	f000 ff28 	bl	80232b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 8022466:	e009      	b.n	802247c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8022468:	2300      	movs	r3, #0
 802246a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802246c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8022470:	f107 0318 	add.w	r3, r7, #24
 8022474:	4619      	mov	r1, r3
 8022476:	68f8      	ldr	r0, [r7, #12]
 8022478:	f7f2 fd0a 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 802247c:	68f8      	ldr	r0, [r7, #12]
 802247e:	3734      	adds	r7, #52	; 0x34
 8022480:	46bd      	mov	sp, r7
 8022482:	bd90      	pop	{r4, r7, pc}

08022484 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>:
      operator()(const _Pair& __x) const
 8022484:	b480      	push	{r7}
 8022486:	b083      	sub	sp, #12
 8022488:	af00      	add	r7, sp, #0
 802248a:	6078      	str	r0, [r7, #4]
 802248c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 802248e:	683b      	ldr	r3, [r7, #0]
 8022490:	4618      	mov	r0, r3
 8022492:	370c      	adds	r7, #12
 8022494:	46bd      	mov	sp, r7
 8022496:	f85d 7b04 	ldr.w	r7, [sp], #4
 802249a:	4770      	bx	lr

0802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802249c:	b480      	push	{r7}
 802249e:	b083      	sub	sp, #12
 80224a0:	af00      	add	r7, sp, #0
 80224a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	4618      	mov	r0, r3
 80224a8:	370c      	adds	r7, #12
 80224aa:	46bd      	mov	sp, r7
 80224ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224b0:	4770      	bx	lr

080224b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80224b2:	b5b0      	push	{r4, r5, r7, lr}
 80224b4:	b088      	sub	sp, #32
 80224b6:	af00      	add	r7, sp, #0
 80224b8:	60f8      	str	r0, [r7, #12]
 80224ba:	60b9      	str	r1, [r7, #8]
 80224bc:	607a      	str	r2, [r7, #4]
 80224be:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80224c0:	68bb      	ldr	r3, [r7, #8]
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	d11a      	bne.n	80224fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80224c6:	68f8      	ldr	r0, [r7, #12]
 80224c8:	f000 fec5 	bl	8023256 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 80224cc:	4602      	mov	r2, r0
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	4293      	cmp	r3, r2
 80224d2:	d013      	beq.n	80224fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80224d4:	68fc      	ldr	r4, [r7, #12]
 80224d6:	f107 0310 	add.w	r3, r7, #16
 80224da:	6839      	ldr	r1, [r7, #0]
 80224dc:	4618      	mov	r0, r3
 80224de:	f7ff ffd1 	bl	8022484 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 80224e2:	4605      	mov	r5, r0
 80224e4:	6878      	ldr	r0, [r7, #4]
 80224e6:	f000 feda 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80224ea:	4603      	mov	r3, r0
 80224ec:	461a      	mov	r2, r3
 80224ee:	4629      	mov	r1, r5
 80224f0:	4620      	mov	r0, r4
 80224f2:	f7f1 f8be 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80224f6:	4603      	mov	r3, r0
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d001      	beq.n	8022500 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 80224fc:	2301      	movs	r3, #1
 80224fe:	e000      	b.n	8022502 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8022500:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022502:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8022504:	6838      	ldr	r0, [r7, #0]
 8022506:	f7ff ffc9 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 802250a:	4603      	mov	r3, r0
 802250c:	4619      	mov	r1, r3
 802250e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022510:	f000 ff84 	bl	802341c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8022514:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8022516:	68fb      	ldr	r3, [r7, #12]
 8022518:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 802251a:	7ff8      	ldrb	r0, [r7, #31]
 802251c:	687a      	ldr	r2, [r7, #4]
 802251e:	69b9      	ldr	r1, [r7, #24]
 8022520:	f003 fe2b 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8022524:	68fb      	ldr	r3, [r7, #12]
 8022526:	695b      	ldr	r3, [r3, #20]
 8022528:	1c5a      	adds	r2, r3, #1
 802252a:	68fb      	ldr	r3, [r7, #12]
 802252c:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 802252e:	f107 0314 	add.w	r3, r7, #20
 8022532:	69b9      	ldr	r1, [r7, #24]
 8022534:	4618      	mov	r0, r3
 8022536:	f7ff fe73 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 802253a:	697b      	ldr	r3, [r7, #20]
      }
 802253c:	4618      	mov	r0, r3
 802253e:	3720      	adds	r7, #32
 8022540:	46bd      	mov	sp, r7
 8022542:	bdb0      	pop	{r4, r5, r7, pc}

08022544 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022544:	b590      	push	{r4, r7, lr}
 8022546:	b083      	sub	sp, #12
 8022548:	af00      	add	r7, sp, #0
 802254a:	6078      	str	r0, [r7, #4]
 802254c:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 802254e:	6878      	ldr	r0, [r7, #4]
 8022550:	f000 ff78 	bl	8023444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8022554:	4604      	mov	r4, r0
 8022556:	6838      	ldr	r0, [r7, #0]
 8022558:	f000 ff7f 	bl	802345a <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 802255c:	4603      	mov	r3, r0
 802255e:	4619      	mov	r1, r3
 8022560:	4620      	mov	r0, r4
 8022562:	f000 ff88 	bl	8023476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>
      }
 8022566:	bf00      	nop
 8022568:	370c      	adds	r7, #12
 802256a:	46bd      	mov	sp, r7
 802256c:	bd90      	pop	{r4, r7, pc}

0802256e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 802256e:	b580      	push	{r7, lr}
 8022570:	b082      	sub	sp, #8
 8022572:	af00      	add	r7, sp, #0
 8022574:	6078      	str	r0, [r7, #4]
 8022576:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8022578:	6878      	ldr	r0, [r7, #4]
 802257a:	f000 ff63 	bl	8023444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 802257e:	4603      	mov	r3, r0
 8022580:	2201      	movs	r2, #1
 8022582:	6839      	ldr	r1, [r7, #0]
 8022584:	4618      	mov	r0, r3
 8022586:	f000 ff82 	bl	802348e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>
 802258a:	bf00      	nop
 802258c:	3708      	adds	r7, #8
 802258e:	46bd      	mov	sp, r7
 8022590:	bd80      	pop	{r7, pc}

08022592 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>:
 8022592:	b480      	push	{r7}
 8022594:	b083      	sub	sp, #12
 8022596:	af00      	add	r7, sp, #0
 8022598:	6078      	str	r0, [r7, #4]
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	4618      	mov	r0, r3
 802259e:	370c      	adds	r7, #12
 80225a0:	46bd      	mov	sp, r7
 80225a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225a6:	4770      	bx	lr

080225a8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80225a8:	b480      	push	{r7}
 80225aa:	b083      	sub	sp, #12
 80225ac:	af00      	add	r7, sp, #0
 80225ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	4618      	mov	r0, r3
 80225b4:	370c      	adds	r7, #12
 80225b6:	46bd      	mov	sp, r7
 80225b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225bc:	4770      	bx	lr

080225be <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80225be:	b580      	push	{r7, lr}
 80225c0:	b082      	sub	sp, #8
 80225c2:	af00      	add	r7, sp, #0
 80225c4:	6078      	str	r0, [r7, #4]
 80225c6:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80225c8:	6839      	ldr	r1, [r7, #0]
 80225ca:	6878      	ldr	r0, [r7, #4]
 80225cc:	f000 ff7e 	bl	80234cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	4618      	mov	r0, r3
 80225d4:	3708      	adds	r7, #8
 80225d6:	46bd      	mov	sp, r7
 80225d8:	bd80      	pop	{r7, pc}

080225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80225da:	b480      	push	{r7}
 80225dc:	b083      	sub	sp, #12
 80225de:	af00      	add	r7, sp, #0
 80225e0:	6078      	str	r0, [r7, #4]
 80225e2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	683a      	ldr	r2, [r7, #0]
 80225e8:	601a      	str	r2, [r3, #0]
 80225ea:	687b      	ldr	r3, [r7, #4]
 80225ec:	4618      	mov	r0, r3
 80225ee:	370c      	adds	r7, #12
 80225f0:	46bd      	mov	sp, r7
 80225f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225f6:	4770      	bx	lr

080225f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80225f8:	b590      	push	{r4, r7, lr}
 80225fa:	b08d      	sub	sp, #52	; 0x34
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	60f8      	str	r0, [r7, #12]
 8022600:	60b9      	str	r1, [r7, #8]
 8022602:	607a      	str	r2, [r7, #4]
 8022604:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8022606:	1d3b      	adds	r3, r7, #4
 8022608:	4618      	mov	r0, r3
 802260a:	f000 ff6b 	bl	80234e4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>
 802260e:	4603      	mov	r3, r0
 8022610:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8022612:	69bc      	ldr	r4, [r7, #24]
 8022614:	68b8      	ldr	r0, [r7, #8]
 8022616:	f000 ff76 	bl	8023506 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 802261a:	4603      	mov	r3, r0
 802261c:	429c      	cmp	r4, r3
 802261e:	bf0c      	ite	eq
 8022620:	2301      	moveq	r3, #1
 8022622:	2300      	movne	r3, #0
 8022624:	b2db      	uxtb	r3, r3
 8022626:	2b00      	cmp	r3, #0
 8022628:	d030      	beq.n	802268c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x94>
	  if (size() > 0
 802262a:	68b8      	ldr	r0, [r7, #8]
 802262c:	f000 ff77 	bl	802351e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>
 8022630:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8022632:	2b00      	cmp	r3, #0
 8022634:	d013      	beq.n	802265e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 8022636:	68bc      	ldr	r4, [r7, #8]
 8022638:	68b8      	ldr	r0, [r7, #8]
 802263a:	f000 ff7c 	bl	8023536 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 802263e:	4603      	mov	r3, r0
 8022640:	681b      	ldr	r3, [r3, #0]
 8022642:	4618      	mov	r0, r3
 8022644:	f000 ff83 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022648:	4603      	mov	r3, r0
 802264a:	683a      	ldr	r2, [r7, #0]
 802264c:	4619      	mov	r1, r3
 802264e:	4620      	mov	r0, r4
 8022650:	f000 fcbf 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8022654:	4603      	mov	r3, r0
 8022656:	2b00      	cmp	r3, #0
 8022658:	d001      	beq.n	802265e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 802265a:	2301      	movs	r3, #1
 802265c:	e000      	b.n	8022660 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x68>
 802265e:	2300      	movs	r3, #0
	  if (size() > 0
 8022660:	2b00      	cmp	r3, #0
 8022662:	d00c      	beq.n	802267e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8022664:	2300      	movs	r3, #0
 8022666:	61fb      	str	r3, [r7, #28]
 8022668:	68b8      	ldr	r0, [r7, #8]
 802266a:	f000 ff64 	bl	8023536 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 802266e:	4602      	mov	r2, r0
 8022670:	f107 031c 	add.w	r3, r7, #28
 8022674:	4619      	mov	r1, r3
 8022676:	68f8      	ldr	r0, [r7, #12]
 8022678:	f7f2 fb28 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 802267c:	e0db      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 802267e:	68fb      	ldr	r3, [r7, #12]
 8022680:	683a      	ldr	r2, [r7, #0]
 8022682:	68b9      	ldr	r1, [r7, #8]
 8022684:	4618      	mov	r0, r3
 8022686:	f000 ff6e 	bl	8023566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 802268a:	e0d4      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 802268c:	68bc      	ldr	r4, [r7, #8]
 802268e:	69bb      	ldr	r3, [r7, #24]
 8022690:	4618      	mov	r0, r3
 8022692:	f000 ff5c 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022696:	4603      	mov	r3, r0
 8022698:	461a      	mov	r2, r3
 802269a:	6839      	ldr	r1, [r7, #0]
 802269c:	4620      	mov	r0, r4
 802269e:	f000 fc98 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80226a2:	4603      	mov	r3, r0
 80226a4:	2b00      	cmp	r3, #0
 80226a6:	d057      	beq.n	8022758 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	  iterator __before = __pos;
 80226a8:	69bb      	ldr	r3, [r7, #24]
 80226aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80226ac:	69bc      	ldr	r4, [r7, #24]
 80226ae:	68b8      	ldr	r0, [r7, #8]
 80226b0:	f000 ffde 	bl	8023670 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 80226b4:	4603      	mov	r3, r0
 80226b6:	681b      	ldr	r3, [r3, #0]
 80226b8:	429c      	cmp	r4, r3
 80226ba:	bf0c      	ite	eq
 80226bc:	2301      	moveq	r3, #1
 80226be:	2300      	movne	r3, #0
 80226c0:	b2db      	uxtb	r3, r3
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d00d      	beq.n	80226e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80226c6:	68b8      	ldr	r0, [r7, #8]
 80226c8:	f000 ffd2 	bl	8023670 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 80226cc:	4604      	mov	r4, r0
 80226ce:	68b8      	ldr	r0, [r7, #8]
 80226d0:	f000 ffce 	bl	8023670 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 80226d4:	4603      	mov	r3, r0
 80226d6:	461a      	mov	r2, r3
 80226d8:	4621      	mov	r1, r4
 80226da:	68f8      	ldr	r0, [r7, #12]
 80226dc:	f7f2 fb9d 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80226e0:	e0a9      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80226e2:	68bc      	ldr	r4, [r7, #8]
 80226e4:	f107 0314 	add.w	r3, r7, #20
 80226e8:	4618      	mov	r0, r3
 80226ea:	f000 ffcd 	bl	8023688 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
 80226ee:	4603      	mov	r3, r0
 80226f0:	681b      	ldr	r3, [r3, #0]
 80226f2:	4618      	mov	r0, r3
 80226f4:	f000 ff2b 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80226f8:	4603      	mov	r3, r0
 80226fa:	683a      	ldr	r2, [r7, #0]
 80226fc:	4619      	mov	r1, r3
 80226fe:	4620      	mov	r0, r4
 8022700:	f000 fc67 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8022704:	4603      	mov	r3, r0
 8022706:	2b00      	cmp	r3, #0
 8022708:	d01f      	beq.n	802274a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 802270a:	697b      	ldr	r3, [r7, #20]
 802270c:	4618      	mov	r0, r3
 802270e:	f7ff f97a 	bl	8021a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022712:	4603      	mov	r3, r0
 8022714:	2b00      	cmp	r3, #0
 8022716:	bf0c      	ite	eq
 8022718:	2301      	moveq	r3, #1
 802271a:	2300      	movne	r3, #0
 802271c:	b2db      	uxtb	r3, r3
 802271e:	2b00      	cmp	r3, #0
 8022720:	d00a      	beq.n	8022738 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8022722:	2300      	movs	r3, #0
 8022724:	623b      	str	r3, [r7, #32]
 8022726:	f107 0214 	add.w	r2, r7, #20
 802272a:	f107 0320 	add.w	r3, r7, #32
 802272e:	4619      	mov	r1, r3
 8022730:	68f8      	ldr	r0, [r7, #12]
 8022732:	f7f2 facb 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022736:	e07e      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8022738:	f107 0218 	add.w	r2, r7, #24
 802273c:	f107 0318 	add.w	r3, r7, #24
 8022740:	4619      	mov	r1, r3
 8022742:	68f8      	ldr	r0, [r7, #12]
 8022744:	f7f2 fb69 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022748:	e075      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 802274a:	68fb      	ldr	r3, [r7, #12]
 802274c:	683a      	ldr	r2, [r7, #0]
 802274e:	68b9      	ldr	r1, [r7, #8]
 8022750:	4618      	mov	r0, r3
 8022752:	f000 ff08 	bl	8023566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8022756:	e06e      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8022758:	68bc      	ldr	r4, [r7, #8]
 802275a:	69bb      	ldr	r3, [r7, #24]
 802275c:	4618      	mov	r0, r3
 802275e:	f000 fef6 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022762:	4603      	mov	r3, r0
 8022764:	683a      	ldr	r2, [r7, #0]
 8022766:	4619      	mov	r1, r3
 8022768:	4620      	mov	r0, r4
 802276a:	f000 fc32 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 802276e:	4603      	mov	r3, r0
 8022770:	2b00      	cmp	r3, #0
 8022772:	d056      	beq.n	8022822 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x22a>
	  iterator __after = __pos;
 8022774:	69bb      	ldr	r3, [r7, #24]
 8022776:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8022778:	69bc      	ldr	r4, [r7, #24]
 802277a:	68b8      	ldr	r0, [r7, #8]
 802277c:	f000 fedb 	bl	8023536 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8022780:	4603      	mov	r3, r0
 8022782:	681b      	ldr	r3, [r3, #0]
 8022784:	429c      	cmp	r4, r3
 8022786:	bf0c      	ite	eq
 8022788:	2301      	moveq	r3, #1
 802278a:	2300      	movne	r3, #0
 802278c:	b2db      	uxtb	r3, r3
 802278e:	2b00      	cmp	r3, #0
 8022790:	d00c      	beq.n	80227ac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8022792:	2300      	movs	r3, #0
 8022794:	627b      	str	r3, [r7, #36]	; 0x24
 8022796:	68b8      	ldr	r0, [r7, #8]
 8022798:	f000 fecd 	bl	8023536 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 802279c:	4602      	mov	r2, r0
 802279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80227a2:	4619      	mov	r1, r3
 80227a4:	68f8      	ldr	r0, [r7, #12]
 80227a6:	f7f2 fa91 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80227aa:	e044      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80227ac:	68bc      	ldr	r4, [r7, #8]
 80227ae:	f107 0310 	add.w	r3, r7, #16
 80227b2:	4618      	mov	r0, r3
 80227b4:	f000 ff79 	bl	80236aa <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>
 80227b8:	4603      	mov	r3, r0
 80227ba:	681b      	ldr	r3, [r3, #0]
 80227bc:	4618      	mov	r0, r3
 80227be:	f000 fec6 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80227c2:	4603      	mov	r3, r0
 80227c4:	461a      	mov	r2, r3
 80227c6:	6839      	ldr	r1, [r7, #0]
 80227c8:	4620      	mov	r0, r4
 80227ca:	f000 fc02 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80227ce:	4603      	mov	r3, r0
 80227d0:	2b00      	cmp	r3, #0
 80227d2:	d01f      	beq.n	8022814 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80227d4:	69bb      	ldr	r3, [r7, #24]
 80227d6:	4618      	mov	r0, r3
 80227d8:	f7ff f915 	bl	8021a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80227dc:	4603      	mov	r3, r0
 80227de:	2b00      	cmp	r3, #0
 80227e0:	bf0c      	ite	eq
 80227e2:	2301      	moveq	r3, #1
 80227e4:	2300      	movne	r3, #0
 80227e6:	b2db      	uxtb	r3, r3
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	d00a      	beq.n	8022802 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 80227ec:	2300      	movs	r3, #0
 80227ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80227f0:	f107 0218 	add.w	r2, r7, #24
 80227f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80227f8:	4619      	mov	r1, r3
 80227fa:	68f8      	ldr	r0, [r7, #12]
 80227fc:	f7f2 fa66 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022800:	e019      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8022802:	f107 0210 	add.w	r2, r7, #16
 8022806:	f107 0310 	add.w	r3, r7, #16
 802280a:	4619      	mov	r1, r3
 802280c:	68f8      	ldr	r0, [r7, #12]
 802280e:	f7f2 fb04 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022812:	e010      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022814:	68fb      	ldr	r3, [r7, #12]
 8022816:	683a      	ldr	r2, [r7, #0]
 8022818:	68b9      	ldr	r1, [r7, #8]
 802281a:	4618      	mov	r0, r3
 802281c:	f000 fea3 	bl	8023566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8022820:	e009      	b.n	8022836 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8022822:	2300      	movs	r3, #0
 8022824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022826:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 802282a:	f107 0318 	add.w	r3, r7, #24
 802282e:	4619      	mov	r1, r3
 8022830:	68f8      	ldr	r0, [r7, #12]
 8022832:	f7f2 fb2d 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8022836:	68f8      	ldr	r0, [r7, #12]
 8022838:	3734      	adds	r7, #52	; 0x34
 802283a:	46bd      	mov	sp, r7
 802283c:	bd90      	pop	{r4, r7, pc}

0802283e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>:
      operator()(const _Pair& __x) const
 802283e:	b480      	push	{r7}
 8022840:	b083      	sub	sp, #12
 8022842:	af00      	add	r7, sp, #0
 8022844:	6078      	str	r0, [r7, #4]
 8022846:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8022848:	683b      	ldr	r3, [r7, #0]
 802284a:	4618      	mov	r0, r3
 802284c:	370c      	adds	r7, #12
 802284e:	46bd      	mov	sp, r7
 8022850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022854:	4770      	bx	lr

08022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8022856:	b480      	push	{r7}
 8022858:	b083      	sub	sp, #12
 802285a:	af00      	add	r7, sp, #0
 802285c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802285e:	687b      	ldr	r3, [r7, #4]
 8022860:	4618      	mov	r0, r3
 8022862:	370c      	adds	r7, #12
 8022864:	46bd      	mov	sp, r7
 8022866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802286a:	4770      	bx	lr

0802286c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 802286c:	b5b0      	push	{r4, r5, r7, lr}
 802286e:	b088      	sub	sp, #32
 8022870:	af00      	add	r7, sp, #0
 8022872:	60f8      	str	r0, [r7, #12]
 8022874:	60b9      	str	r1, [r7, #8]
 8022876:	607a      	str	r2, [r7, #4]
 8022878:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 802287a:	68bb      	ldr	r3, [r7, #8]
 802287c:	2b00      	cmp	r3, #0
 802287e:	d11a      	bne.n	80228b6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022880:	68f8      	ldr	r0, [r7, #12]
 8022882:	f000 fe40 	bl	8023506 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8022886:	4602      	mov	r2, r0
 8022888:	687b      	ldr	r3, [r7, #4]
 802288a:	4293      	cmp	r3, r2
 802288c:	d013      	beq.n	80228b6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 802288e:	68fc      	ldr	r4, [r7, #12]
 8022890:	f107 0310 	add.w	r3, r7, #16
 8022894:	6839      	ldr	r1, [r7, #0]
 8022896:	4618      	mov	r0, r3
 8022898:	f7ff ffd1 	bl	802283e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 802289c:	4605      	mov	r5, r0
 802289e:	6878      	ldr	r0, [r7, #4]
 80228a0:	f000 fe55 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80228a4:	4603      	mov	r3, r0
 80228a6:	461a      	mov	r2, r3
 80228a8:	4629      	mov	r1, r5
 80228aa:	4620      	mov	r0, r4
 80228ac:	f000 fb91 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80228b0:	4603      	mov	r3, r0
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d001      	beq.n	80228ba <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 80228b6:	2301      	movs	r3, #1
 80228b8:	e000      	b.n	80228bc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 80228ba:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 80228bc:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 80228be:	6838      	ldr	r0, [r7, #0]
 80228c0:	f7ff ffc9 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80228c4:	4603      	mov	r3, r0
 80228c6:	4619      	mov	r1, r3
 80228c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80228ca:	f000 feff 	bl	80236cc <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80228ce:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80228d4:	7ff8      	ldrb	r0, [r7, #31]
 80228d6:	687a      	ldr	r2, [r7, #4]
 80228d8:	69b9      	ldr	r1, [r7, #24]
 80228da:	f003 fc4e 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80228de:	68fb      	ldr	r3, [r7, #12]
 80228e0:	695b      	ldr	r3, [r3, #20]
 80228e2:	1c5a      	adds	r2, r3, #1
 80228e4:	68fb      	ldr	r3, [r7, #12]
 80228e6:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80228e8:	f107 0314 	add.w	r3, r7, #20
 80228ec:	69b9      	ldr	r1, [r7, #24]
 80228ee:	4618      	mov	r0, r3
 80228f0:	f7ff fe73 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80228f4:	697b      	ldr	r3, [r7, #20]
      }
 80228f6:	4618      	mov	r0, r3
 80228f8:	3720      	adds	r7, #32
 80228fa:	46bd      	mov	sp, r7
 80228fc:	bdb0      	pop	{r4, r5, r7, pc}

080228fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80228fe:	b590      	push	{r4, r7, lr}
 8022900:	b083      	sub	sp, #12
 8022902:	af00      	add	r7, sp, #0
 8022904:	6078      	str	r0, [r7, #4]
 8022906:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8022908:	6878      	ldr	r0, [r7, #4]
 802290a:	f000 fef3 	bl	80236f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 802290e:	4604      	mov	r4, r0
 8022910:	6838      	ldr	r0, [r7, #0]
 8022912:	f000 fefa 	bl	802370a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8022916:	4603      	mov	r3, r0
 8022918:	4619      	mov	r1, r3
 802291a:	4620      	mov	r0, r4
 802291c:	f000 ff03 	bl	8023726 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>
      }
 8022920:	bf00      	nop
 8022922:	370c      	adds	r7, #12
 8022924:	46bd      	mov	sp, r7
 8022926:	bd90      	pop	{r4, r7, pc}

08022928 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022928:	b580      	push	{r7, lr}
 802292a:	b082      	sub	sp, #8
 802292c:	af00      	add	r7, sp, #0
 802292e:	6078      	str	r0, [r7, #4]
 8022930:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8022932:	6878      	ldr	r0, [r7, #4]
 8022934:	f000 fede 	bl	80236f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8022938:	4603      	mov	r3, r0
 802293a:	2201      	movs	r2, #1
 802293c:	6839      	ldr	r1, [r7, #0]
 802293e:	4618      	mov	r0, r3
 8022940:	f000 fefd 	bl	802373e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>
 8022944:	bf00      	nop
 8022946:	3708      	adds	r7, #8
 8022948:	46bd      	mov	sp, r7
 802294a:	bd80      	pop	{r7, pc}

0802294c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 802294c:	b480      	push	{r7}
 802294e:	b083      	sub	sp, #12
 8022950:	af00      	add	r7, sp, #0
 8022952:	6078      	str	r0, [r7, #4]
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	4618      	mov	r0, r3
 8022958:	370c      	adds	r7, #12
 802295a:	46bd      	mov	sp, r7
 802295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022960:	4770      	bx	lr

08022962 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8022962:	b480      	push	{r7}
 8022964:	b083      	sub	sp, #12
 8022966:	af00      	add	r7, sp, #0
 8022968:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	4618      	mov	r0, r3
 802296e:	370c      	adds	r7, #12
 8022970:	46bd      	mov	sp, r7
 8022972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022976:	4770      	bx	lr

08022978 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8022978:	b580      	push	{r7, lr}
 802297a:	b082      	sub	sp, #8
 802297c:	af00      	add	r7, sp, #0
 802297e:	6078      	str	r0, [r7, #4]
 8022980:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8022982:	6839      	ldr	r1, [r7, #0]
 8022984:	6878      	ldr	r0, [r7, #4]
 8022986:	f000 fef9 	bl	802377c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	4618      	mov	r0, r3
 802298e:	3708      	adds	r7, #8
 8022990:	46bd      	mov	sp, r7
 8022992:	bd80      	pop	{r7, pc}

08022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8022994:	b480      	push	{r7}
 8022996:	b083      	sub	sp, #12
 8022998:	af00      	add	r7, sp, #0
 802299a:	6078      	str	r0, [r7, #4]
 802299c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 802299e:	687b      	ldr	r3, [r7, #4]
 80229a0:	683a      	ldr	r2, [r7, #0]
 80229a2:	601a      	str	r2, [r3, #0]
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	4618      	mov	r0, r3
 80229a8:	370c      	adds	r7, #12
 80229aa:	46bd      	mov	sp, r7
 80229ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229b0:	4770      	bx	lr

080229b2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80229b2:	b590      	push	{r4, r7, lr}
 80229b4:	b08d      	sub	sp, #52	; 0x34
 80229b6:	af00      	add	r7, sp, #0
 80229b8:	60f8      	str	r0, [r7, #12]
 80229ba:	60b9      	str	r1, [r7, #8]
 80229bc:	607a      	str	r2, [r7, #4]
 80229be:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80229c0:	1d3b      	adds	r3, r7, #4
 80229c2:	4618      	mov	r0, r3
 80229c4:	f000 fee6 	bl	8023794 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 80229c8:	4603      	mov	r3, r0
 80229ca:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80229cc:	69bc      	ldr	r4, [r7, #24]
 80229ce:	68b8      	ldr	r0, [r7, #8]
 80229d0:	f000 fef1 	bl	80237b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80229d4:	4603      	mov	r3, r0
 80229d6:	429c      	cmp	r4, r3
 80229d8:	bf0c      	ite	eq
 80229da:	2301      	moveq	r3, #1
 80229dc:	2300      	movne	r3, #0
 80229de:	b2db      	uxtb	r3, r3
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d030      	beq.n	8022a46 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 80229e4:	68b8      	ldr	r0, [r7, #8]
 80229e6:	f000 fef2 	bl	80237ce <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 80229ea:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80229ec:	2b00      	cmp	r3, #0
 80229ee:	d013      	beq.n	8022a18 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80229f0:	68bc      	ldr	r4, [r7, #8]
 80229f2:	68b8      	ldr	r0, [r7, #8]
 80229f4:	f000 fef7 	bl	80237e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80229f8:	4603      	mov	r3, r0
 80229fa:	681b      	ldr	r3, [r3, #0]
 80229fc:	4618      	mov	r0, r3
 80229fe:	f000 fefe 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022a02:	4603      	mov	r3, r0
 8022a04:	683a      	ldr	r2, [r7, #0]
 8022a06:	4619      	mov	r1, r3
 8022a08:	4620      	mov	r0, r4
 8022a0a:	f7f0 fe32 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022a0e:	4603      	mov	r3, r0
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d001      	beq.n	8022a18 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8022a14:	2301      	movs	r3, #1
 8022a16:	e000      	b.n	8022a1a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8022a18:	2300      	movs	r3, #0
	  if (size() > 0
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d00c      	beq.n	8022a38 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8022a1e:	2300      	movs	r3, #0
 8022a20:	61fb      	str	r3, [r7, #28]
 8022a22:	68b8      	ldr	r0, [r7, #8]
 8022a24:	f000 fedf 	bl	80237e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8022a28:	4602      	mov	r2, r0
 8022a2a:	f107 031c 	add.w	r3, r7, #28
 8022a2e:	4619      	mov	r1, r3
 8022a30:	68f8      	ldr	r0, [r7, #12]
 8022a32:	f7f2 f94b 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022a36:	e0db      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022a38:	68fb      	ldr	r3, [r7, #12]
 8022a3a:	683a      	ldr	r2, [r7, #0]
 8022a3c:	68b9      	ldr	r1, [r7, #8]
 8022a3e:	4618      	mov	r0, r3
 8022a40:	f000 fee9 	bl	8023816 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8022a44:	e0d4      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8022a46:	68bc      	ldr	r4, [r7, #8]
 8022a48:	69bb      	ldr	r3, [r7, #24]
 8022a4a:	4618      	mov	r0, r3
 8022a4c:	f000 fed7 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022a50:	4603      	mov	r3, r0
 8022a52:	461a      	mov	r2, r3
 8022a54:	6839      	ldr	r1, [r7, #0]
 8022a56:	4620      	mov	r0, r4
 8022a58:	f7f0 fe0b 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022a5c:	4603      	mov	r3, r0
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d057      	beq.n	8022b12 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8022a62:	69bb      	ldr	r3, [r7, #24]
 8022a64:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8022a66:	69bc      	ldr	r4, [r7, #24]
 8022a68:	68b8      	ldr	r0, [r7, #8]
 8022a6a:	f000 ff59 	bl	8023920 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8022a6e:	4603      	mov	r3, r0
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	429c      	cmp	r4, r3
 8022a74:	bf0c      	ite	eq
 8022a76:	2301      	moveq	r3, #1
 8022a78:	2300      	movne	r3, #0
 8022a7a:	b2db      	uxtb	r3, r3
 8022a7c:	2b00      	cmp	r3, #0
 8022a7e:	d00d      	beq.n	8022a9c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8022a80:	68b8      	ldr	r0, [r7, #8]
 8022a82:	f000 ff4d 	bl	8023920 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8022a86:	4604      	mov	r4, r0
 8022a88:	68b8      	ldr	r0, [r7, #8]
 8022a8a:	f000 ff49 	bl	8023920 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8022a8e:	4603      	mov	r3, r0
 8022a90:	461a      	mov	r2, r3
 8022a92:	4621      	mov	r1, r4
 8022a94:	68f8      	ldr	r0, [r7, #12]
 8022a96:	f7f2 f9c0 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022a9a:	e0a9      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8022a9c:	68bc      	ldr	r4, [r7, #8]
 8022a9e:	f107 0314 	add.w	r3, r7, #20
 8022aa2:	4618      	mov	r0, r3
 8022aa4:	f000 ff48 	bl	8023938 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 8022aa8:	4603      	mov	r3, r0
 8022aaa:	681b      	ldr	r3, [r3, #0]
 8022aac:	4618      	mov	r0, r3
 8022aae:	f000 fea6 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	683a      	ldr	r2, [r7, #0]
 8022ab6:	4619      	mov	r1, r3
 8022ab8:	4620      	mov	r0, r4
 8022aba:	f7f0 fdda 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022abe:	4603      	mov	r3, r0
 8022ac0:	2b00      	cmp	r3, #0
 8022ac2:	d01f      	beq.n	8022b04 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8022ac4:	697b      	ldr	r3, [r7, #20]
 8022ac6:	4618      	mov	r0, r3
 8022ac8:	f7ff f86b 	bl	8021ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022acc:	4603      	mov	r3, r0
 8022ace:	2b00      	cmp	r3, #0
 8022ad0:	bf0c      	ite	eq
 8022ad2:	2301      	moveq	r3, #1
 8022ad4:	2300      	movne	r3, #0
 8022ad6:	b2db      	uxtb	r3, r3
 8022ad8:	2b00      	cmp	r3, #0
 8022ada:	d00a      	beq.n	8022af2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8022adc:	2300      	movs	r3, #0
 8022ade:	623b      	str	r3, [r7, #32]
 8022ae0:	f107 0214 	add.w	r2, r7, #20
 8022ae4:	f107 0320 	add.w	r3, r7, #32
 8022ae8:	4619      	mov	r1, r3
 8022aea:	68f8      	ldr	r0, [r7, #12]
 8022aec:	f7f2 f8ee 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022af0:	e07e      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8022af2:	f107 0218 	add.w	r2, r7, #24
 8022af6:	f107 0318 	add.w	r3, r7, #24
 8022afa:	4619      	mov	r1, r3
 8022afc:	68f8      	ldr	r0, [r7, #12]
 8022afe:	f7f2 f98c 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022b02:	e075      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022b04:	68fb      	ldr	r3, [r7, #12]
 8022b06:	683a      	ldr	r2, [r7, #0]
 8022b08:	68b9      	ldr	r1, [r7, #8]
 8022b0a:	4618      	mov	r0, r3
 8022b0c:	f000 fe83 	bl	8023816 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8022b10:	e06e      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8022b12:	68bc      	ldr	r4, [r7, #8]
 8022b14:	69bb      	ldr	r3, [r7, #24]
 8022b16:	4618      	mov	r0, r3
 8022b18:	f000 fe71 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022b1c:	4603      	mov	r3, r0
 8022b1e:	683a      	ldr	r2, [r7, #0]
 8022b20:	4619      	mov	r1, r3
 8022b22:	4620      	mov	r0, r4
 8022b24:	f7f0 fda5 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022b28:	4603      	mov	r3, r0
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d056      	beq.n	8022bdc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8022b2e:	69bb      	ldr	r3, [r7, #24]
 8022b30:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8022b32:	69bc      	ldr	r4, [r7, #24]
 8022b34:	68b8      	ldr	r0, [r7, #8]
 8022b36:	f000 fe56 	bl	80237e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8022b3a:	4603      	mov	r3, r0
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	429c      	cmp	r4, r3
 8022b40:	bf0c      	ite	eq
 8022b42:	2301      	moveq	r3, #1
 8022b44:	2300      	movne	r3, #0
 8022b46:	b2db      	uxtb	r3, r3
 8022b48:	2b00      	cmp	r3, #0
 8022b4a:	d00c      	beq.n	8022b66 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8022b4c:	2300      	movs	r3, #0
 8022b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8022b50:	68b8      	ldr	r0, [r7, #8]
 8022b52:	f000 fe48 	bl	80237e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8022b56:	4602      	mov	r2, r0
 8022b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022b5c:	4619      	mov	r1, r3
 8022b5e:	68f8      	ldr	r0, [r7, #12]
 8022b60:	f7f2 f8b4 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022b64:	e044      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8022b66:	68bc      	ldr	r4, [r7, #8]
 8022b68:	f107 0310 	add.w	r3, r7, #16
 8022b6c:	4618      	mov	r0, r3
 8022b6e:	f000 fef4 	bl	802395a <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 8022b72:	4603      	mov	r3, r0
 8022b74:	681b      	ldr	r3, [r3, #0]
 8022b76:	4618      	mov	r0, r3
 8022b78:	f000 fe41 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022b7c:	4603      	mov	r3, r0
 8022b7e:	461a      	mov	r2, r3
 8022b80:	6839      	ldr	r1, [r7, #0]
 8022b82:	4620      	mov	r0, r4
 8022b84:	f7f0 fd75 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022b88:	4603      	mov	r3, r0
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d01f      	beq.n	8022bce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8022b8e:	69bb      	ldr	r3, [r7, #24]
 8022b90:	4618      	mov	r0, r3
 8022b92:	f7ff f806 	bl	8021ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8022b96:	4603      	mov	r3, r0
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	bf0c      	ite	eq
 8022b9c:	2301      	moveq	r3, #1
 8022b9e:	2300      	movne	r3, #0
 8022ba0:	b2db      	uxtb	r3, r3
 8022ba2:	2b00      	cmp	r3, #0
 8022ba4:	d00a      	beq.n	8022bbc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8022baa:	f107 0218 	add.w	r2, r7, #24
 8022bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8022bb2:	4619      	mov	r1, r3
 8022bb4:	68f8      	ldr	r0, [r7, #12]
 8022bb6:	f7f2 f889 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8022bba:	e019      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8022bbc:	f107 0210 	add.w	r2, r7, #16
 8022bc0:	f107 0310 	add.w	r3, r7, #16
 8022bc4:	4619      	mov	r1, r3
 8022bc6:	68f8      	ldr	r0, [r7, #12]
 8022bc8:	f7f2 f927 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8022bcc:	e010      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8022bce:	68fb      	ldr	r3, [r7, #12]
 8022bd0:	683a      	ldr	r2, [r7, #0]
 8022bd2:	68b9      	ldr	r1, [r7, #8]
 8022bd4:	4618      	mov	r0, r3
 8022bd6:	f000 fe1e 	bl	8023816 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8022bda:	e009      	b.n	8022bf0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8022bdc:	2300      	movs	r3, #0
 8022bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022be0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8022be4:	f107 0318 	add.w	r3, r7, #24
 8022be8:	4619      	mov	r1, r3
 8022bea:	68f8      	ldr	r0, [r7, #12]
 8022bec:	f7f2 f950 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8022bf0:	68f8      	ldr	r0, [r7, #12]
 8022bf2:	3734      	adds	r7, #52	; 0x34
 8022bf4:	46bd      	mov	sp, r7
 8022bf6:	bd90      	pop	{r4, r7, pc}

08022bf8 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8022bf8:	b480      	push	{r7}
 8022bfa:	b083      	sub	sp, #12
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
 8022c00:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8022c02:	683b      	ldr	r3, [r7, #0]
 8022c04:	4618      	mov	r0, r3
 8022c06:	370c      	adds	r7, #12
 8022c08:	46bd      	mov	sp, r7
 8022c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c0e:	4770      	bx	lr

08022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8022c10:	b480      	push	{r7}
 8022c12:	b083      	sub	sp, #12
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	370c      	adds	r7, #12
 8022c1e:	46bd      	mov	sp, r7
 8022c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c24:	4770      	bx	lr

08022c26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022c26:	b5b0      	push	{r4, r5, r7, lr}
 8022c28:	b088      	sub	sp, #32
 8022c2a:	af00      	add	r7, sp, #0
 8022c2c:	60f8      	str	r0, [r7, #12]
 8022c2e:	60b9      	str	r1, [r7, #8]
 8022c30:	607a      	str	r2, [r7, #4]
 8022c32:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022c34:	68bb      	ldr	r3, [r7, #8]
 8022c36:	2b00      	cmp	r3, #0
 8022c38:	d11a      	bne.n	8022c70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022c3a:	68f8      	ldr	r0, [r7, #12]
 8022c3c:	f000 fdbb 	bl	80237b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8022c40:	4602      	mov	r2, r0
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	4293      	cmp	r3, r2
 8022c46:	d013      	beq.n	8022c70 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022c48:	68fc      	ldr	r4, [r7, #12]
 8022c4a:	f107 0310 	add.w	r3, r7, #16
 8022c4e:	6839      	ldr	r1, [r7, #0]
 8022c50:	4618      	mov	r0, r3
 8022c52:	f7ff ffd1 	bl	8022bf8 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8022c56:	4605      	mov	r5, r0
 8022c58:	6878      	ldr	r0, [r7, #4]
 8022c5a:	f000 fdd0 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022c5e:	4603      	mov	r3, r0
 8022c60:	461a      	mov	r2, r3
 8022c62:	4629      	mov	r1, r5
 8022c64:	4620      	mov	r0, r4
 8022c66:	f7f0 fd04 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	2b00      	cmp	r3, #0
 8022c6e:	d001      	beq.n	8022c74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8022c70:	2301      	movs	r3, #1
 8022c72:	e000      	b.n	8022c76 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8022c74:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022c76:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8022c78:	6838      	ldr	r0, [r7, #0]
 8022c7a:	f7ff ffc9 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8022c7e:	4603      	mov	r3, r0
 8022c80:	4619      	mov	r1, r3
 8022c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022c84:	f000 fe7a 	bl	802397c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8022c88:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8022c8a:	68fb      	ldr	r3, [r7, #12]
 8022c8c:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8022c8e:	7ff8      	ldrb	r0, [r7, #31]
 8022c90:	687a      	ldr	r2, [r7, #4]
 8022c92:	69b9      	ldr	r1, [r7, #24]
 8022c94:	f003 fa71 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8022c98:	68fb      	ldr	r3, [r7, #12]
 8022c9a:	695b      	ldr	r3, [r3, #20]
 8022c9c:	1c5a      	adds	r2, r3, #1
 8022c9e:	68fb      	ldr	r3, [r7, #12]
 8022ca0:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8022ca2:	f107 0314 	add.w	r3, r7, #20
 8022ca6:	69b9      	ldr	r1, [r7, #24]
 8022ca8:	4618      	mov	r0, r3
 8022caa:	f7ff fe73 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022cae:	697b      	ldr	r3, [r7, #20]
      }
 8022cb0:	4618      	mov	r0, r3
 8022cb2:	3720      	adds	r7, #32
 8022cb4:	46bd      	mov	sp, r7
 8022cb6:	bdb0      	pop	{r4, r5, r7, pc}

08022cb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022cb8:	b590      	push	{r4, r7, lr}
 8022cba:	b083      	sub	sp, #12
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
 8022cc0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8022cc2:	6878      	ldr	r0, [r7, #4]
 8022cc4:	f000 fe6e 	bl	80239a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8022cc8:	4604      	mov	r4, r0
 8022cca:	6838      	ldr	r0, [r7, #0]
 8022ccc:	f000 fe75 	bl	80239ba <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8022cd0:	4603      	mov	r3, r0
 8022cd2:	4619      	mov	r1, r3
 8022cd4:	4620      	mov	r0, r4
 8022cd6:	f000 fe7e 	bl	80239d6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8022cda:	bf00      	nop
 8022cdc:	370c      	adds	r7, #12
 8022cde:	46bd      	mov	sp, r7
 8022ce0:	bd90      	pop	{r4, r7, pc}

08022ce2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8022ce2:	b580      	push	{r7, lr}
 8022ce4:	b082      	sub	sp, #8
 8022ce6:	af00      	add	r7, sp, #0
 8022ce8:	6078      	str	r0, [r7, #4]
 8022cea:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8022cec:	6878      	ldr	r0, [r7, #4]
 8022cee:	f000 fe59 	bl	80239a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8022cf2:	4603      	mov	r3, r0
 8022cf4:	2201      	movs	r2, #1
 8022cf6:	6839      	ldr	r1, [r7, #0]
 8022cf8:	4618      	mov	r0, r3
 8022cfa:	f000 fe78 	bl	80239ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 8022cfe:	bf00      	nop
 8022d00:	3708      	adds	r7, #8
 8022d02:	46bd      	mov	sp, r7
 8022d04:	bd80      	pop	{r7, pc}

08022d06 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 8022d06:	b480      	push	{r7}
 8022d08:	b083      	sub	sp, #12
 8022d0a:	af00      	add	r7, sp, #0
 8022d0c:	6078      	str	r0, [r7, #4]
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	4618      	mov	r0, r3
 8022d12:	370c      	adds	r7, #12
 8022d14:	46bd      	mov	sp, r7
 8022d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d1a:	4770      	bx	lr

08022d1c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8022d1c:	b480      	push	{r7}
 8022d1e:	b083      	sub	sp, #12
 8022d20:	af00      	add	r7, sp, #0
 8022d22:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	4618      	mov	r0, r3
 8022d28:	370c      	adds	r7, #12
 8022d2a:	46bd      	mov	sp, r7
 8022d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d30:	4770      	bx	lr

08022d32 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8022d32:	b580      	push	{r7, lr}
 8022d34:	b082      	sub	sp, #8
 8022d36:	af00      	add	r7, sp, #0
 8022d38:	6078      	str	r0, [r7, #4]
 8022d3a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8022d3c:	6839      	ldr	r1, [r7, #0]
 8022d3e:	6878      	ldr	r0, [r7, #4]
 8022d40:	f000 fe74 	bl	8023a2c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	4618      	mov	r0, r3
 8022d48:	3708      	adds	r7, #8
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	bd80      	pop	{r7, pc}

08022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8022d4e:	b480      	push	{r7}
 8022d50:	b083      	sub	sp, #12
 8022d52:	af00      	add	r7, sp, #0
 8022d54:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	4618      	mov	r0, r3
 8022d5a:	370c      	adds	r7, #12
 8022d5c:	46bd      	mov	sp, r7
 8022d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d62:	4770      	bx	lr

08022d64 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022d64:	b5b0      	push	{r4, r5, r7, lr}
 8022d66:	b088      	sub	sp, #32
 8022d68:	af00      	add	r7, sp, #0
 8022d6a:	60f8      	str	r0, [r7, #12]
 8022d6c:	60b9      	str	r1, [r7, #8]
 8022d6e:	607a      	str	r2, [r7, #4]
 8022d70:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022d72:	68bb      	ldr	r3, [r7, #8]
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	d11a      	bne.n	8022dae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022d78:	68f8      	ldr	r0, [r7, #12]
 8022d7a:	f7f2 f8c5 	bl	8014f08 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8022d7e:	4602      	mov	r2, r0
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	4293      	cmp	r3, r2
 8022d84:	d013      	beq.n	8022dae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022d86:	68fc      	ldr	r4, [r7, #12]
 8022d88:	f107 0310 	add.w	r3, r7, #16
 8022d8c:	6839      	ldr	r1, [r7, #0]
 8022d8e:	4618      	mov	r0, r3
 8022d90:	f7f2 fa46 	bl	8015220 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8022d94:	4605      	mov	r5, r0
 8022d96:	6878      	ldr	r0, [r7, #4]
 8022d98:	f7f1 f826 	bl	8013de8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022d9c:	4603      	mov	r3, r0
 8022d9e:	461a      	mov	r2, r3
 8022da0:	4629      	mov	r1, r5
 8022da2:	4620      	mov	r0, r4
 8022da4:	f7f0 fc65 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8022da8:	4603      	mov	r3, r0
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d001      	beq.n	8022db2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8022dae:	2301      	movs	r3, #1
 8022db0:	e000      	b.n	8022db4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8022db2:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022db4:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8022db6:	6838      	ldr	r0, [r7, #0]
 8022db8:	f7ff ffc9 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8022dbc:	4603      	mov	r3, r0
 8022dbe:	4619      	mov	r1, r3
 8022dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022dc2:	f000 fe3f 	bl	8023a44 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8022dc6:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8022dc8:	68fb      	ldr	r3, [r7, #12]
 8022dca:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8022dcc:	7ff8      	ldrb	r0, [r7, #31]
 8022dce:	687a      	ldr	r2, [r7, #4]
 8022dd0:	69b9      	ldr	r1, [r7, #24]
 8022dd2:	f003 f9d2 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8022dd6:	68fb      	ldr	r3, [r7, #12]
 8022dd8:	695b      	ldr	r3, [r3, #20]
 8022dda:	1c5a      	adds	r2, r3, #1
 8022ddc:	68fb      	ldr	r3, [r7, #12]
 8022dde:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8022de0:	f107 0314 	add.w	r3, r7, #20
 8022de4:	69b9      	ldr	r1, [r7, #24]
 8022de6:	4618      	mov	r0, r3
 8022de8:	f7f1 fc3d 	bl	8014666 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022dec:	697b      	ldr	r3, [r7, #20]
      }
 8022dee:	4618      	mov	r0, r3
 8022df0:	3720      	adds	r7, #32
 8022df2:	46bd      	mov	sp, r7
 8022df4:	bdb0      	pop	{r4, r5, r7, pc}

08022df6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
 8022df6:	b480      	push	{r7}
 8022df8:	b083      	sub	sp, #12
 8022dfa:	af00      	add	r7, sp, #0
 8022dfc:	6078      	str	r0, [r7, #4]
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	4618      	mov	r0, r3
 8022e02:	370c      	adds	r7, #12
 8022e04:	46bd      	mov	sp, r7
 8022e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e0a:	4770      	bx	lr

08022e0c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8022e0c:	b480      	push	{r7}
 8022e0e:	b083      	sub	sp, #12
 8022e10:	af00      	add	r7, sp, #0
 8022e12:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8022e14:	687b      	ldr	r3, [r7, #4]
 8022e16:	4618      	mov	r0, r3
 8022e18:	370c      	adds	r7, #12
 8022e1a:	46bd      	mov	sp, r7
 8022e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e20:	4770      	bx	lr

08022e22 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8022e22:	b580      	push	{r7, lr}
 8022e24:	b082      	sub	sp, #8
 8022e26:	af00      	add	r7, sp, #0
 8022e28:	6078      	str	r0, [r7, #4]
 8022e2a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8022e2c:	6839      	ldr	r1, [r7, #0]
 8022e2e:	6878      	ldr	r0, [r7, #4]
 8022e30:	f000 fe1c 	bl	8023a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	4618      	mov	r0, r3
 8022e38:	3708      	adds	r7, #8
 8022e3a:	46bd      	mov	sp, r7
 8022e3c:	bd80      	pop	{r7, pc}

08022e3e <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8022e3e:	b480      	push	{r7}
 8022e40:	b083      	sub	sp, #12
 8022e42:	af00      	add	r7, sp, #0
 8022e44:	6078      	str	r0, [r7, #4]
 8022e46:	6039      	str	r1, [r7, #0]
      { }
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	4618      	mov	r0, r3
 8022e4c:	370c      	adds	r7, #12
 8022e4e:	46bd      	mov	sp, r7
 8022e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e54:	4770      	bx	lr

08022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8022e56:	b480      	push	{r7}
 8022e58:	b083      	sub	sp, #12
 8022e5a:	af00      	add	r7, sp, #0
 8022e5c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	4618      	mov	r0, r3
 8022e62:	370c      	adds	r7, #12
 8022e64:	46bd      	mov	sp, r7
 8022e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e6a:	4770      	bx	lr

08022e6c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8022e6c:	b5b0      	push	{r4, r5, r7, lr}
 8022e6e:	b088      	sub	sp, #32
 8022e70:	af00      	add	r7, sp, #0
 8022e72:	60f8      	str	r0, [r7, #12]
 8022e74:	60b9      	str	r1, [r7, #8]
 8022e76:	607a      	str	r2, [r7, #4]
 8022e78:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022e7a:	68bb      	ldr	r3, [r7, #8]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d11a      	bne.n	8022eb6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022e80:	68f8      	ldr	r0, [r7, #12]
 8022e82:	f7f4 fb7e 	bl	8017582 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8022e86:	4602      	mov	r2, r0
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	4293      	cmp	r3, r2
 8022e8c:	d013      	beq.n	8022eb6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8022e8e:	68fc      	ldr	r4, [r7, #12]
 8022e90:	f107 0310 	add.w	r3, r7, #16
 8022e94:	6839      	ldr	r1, [r7, #0]
 8022e96:	4618      	mov	r0, r3
 8022e98:	f7f4 fcff 	bl	801789a <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8022e9c:	4605      	mov	r5, r0
 8022e9e:	6878      	ldr	r0, [r7, #4]
 8022ea0:	f7f4 f86e 	bl	8016f80 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8022ea4:	4603      	mov	r3, r0
 8022ea6:	461a      	mov	r2, r3
 8022ea8:	4629      	mov	r1, r5
 8022eaa:	4620      	mov	r0, r4
 8022eac:	f7f3 fbd1 	bl	8016652 <_ZNKSt4lessItEclERKtS2_>
 8022eb0:	4603      	mov	r3, r0
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	d001      	beq.n	8022eba <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8022eb6:	2301      	movs	r3, #1
 8022eb8:	e000      	b.n	8022ebc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8022eba:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8022ebc:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8022ebe:	6838      	ldr	r0, [r7, #0]
 8022ec0:	f7ff ffc9 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8022ec4:	4603      	mov	r3, r0
 8022ec6:	4619      	mov	r1, r3
 8022ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022eca:	f000 fddb 	bl	8023a84 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8022ece:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8022ed0:	68fb      	ldr	r3, [r7, #12]
 8022ed2:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8022ed4:	7ff8      	ldrb	r0, [r7, #31]
 8022ed6:	687a      	ldr	r2, [r7, #4]
 8022ed8:	69b9      	ldr	r1, [r7, #24]
 8022eda:	f003 f94e 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8022ede:	68fb      	ldr	r3, [r7, #12]
 8022ee0:	695b      	ldr	r3, [r3, #20]
 8022ee2:	1c5a      	adds	r2, r3, #1
 8022ee4:	68fb      	ldr	r3, [r7, #12]
 8022ee6:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8022ee8:	f107 0314 	add.w	r3, r7, #20
 8022eec:	69b9      	ldr	r1, [r7, #24]
 8022eee:	4618      	mov	r0, r3
 8022ef0:	f7f3 ffee 	bl	8016ed0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8022ef4:	697b      	ldr	r3, [r7, #20]
      }
 8022ef6:	4618      	mov	r0, r3
 8022ef8:	3720      	adds	r7, #32
 8022efa:	46bd      	mov	sp, r7
 8022efc:	bdb0      	pop	{r4, r5, r7, pc}

08022efe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8022efe:	b480      	push	{r7}
 8022f00:	b083      	sub	sp, #12
 8022f02:	af00      	add	r7, sp, #0
 8022f04:	6078      	str	r0, [r7, #4]
 8022f06:	6039      	str	r1, [r7, #0]
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	4618      	mov	r0, r3
 8022f0c:	370c      	adds	r7, #12
 8022f0e:	46bd      	mov	sp, r7
 8022f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f14:	4770      	bx	lr

08022f16 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8022f16:	b580      	push	{r7, lr}
 8022f18:	b084      	sub	sp, #16
 8022f1a:	af00      	add	r7, sp, #0
 8022f1c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	681a      	ldr	r2, [r3, #0]
 8022f22:	f107 030c 	add.w	r3, r7, #12
 8022f26:	4611      	mov	r1, r2
 8022f28:	4618      	mov	r0, r3
 8022f2a:	f7fe ff9b 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8022f2e:	68fb      	ldr	r3, [r7, #12]
 8022f30:	4618      	mov	r0, r3
 8022f32:	3710      	adds	r7, #16
 8022f34:	46bd      	mov	sp, r7
 8022f36:	bd80      	pop	{r7, pc}

08022f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8022f38:	b480      	push	{r7}
 8022f3a:	b083      	sub	sp, #12
 8022f3c:	af00      	add	r7, sp, #0
 8022f3e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8022f40:	687b      	ldr	r3, [r7, #4]
 8022f42:	3304      	adds	r3, #4
 8022f44:	4618      	mov	r0, r3
 8022f46:	370c      	adds	r7, #12
 8022f48:	46bd      	mov	sp, r7
 8022f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f4e:	4770      	bx	lr

08022f50 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8022f50:	b480      	push	{r7}
 8022f52:	b083      	sub	sp, #12
 8022f54:	af00      	add	r7, sp, #0
 8022f56:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	695b      	ldr	r3, [r3, #20]
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	370c      	adds	r7, #12
 8022f60:	46bd      	mov	sp, r7
 8022f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f66:	4770      	bx	lr

08022f68 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8022f68:	b480      	push	{r7}
 8022f6a:	b083      	sub	sp, #12
 8022f6c:	af00      	add	r7, sp, #0
 8022f6e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	3310      	adds	r3, #16
 8022f74:	4618      	mov	r0, r3
 8022f76:	370c      	adds	r7, #12
 8022f78:	46bd      	mov	sp, r7
 8022f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f7e:	4770      	bx	lr

08022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8022f80:	b580      	push	{r7, lr}
 8022f82:	b082      	sub	sp, #8
 8022f84:	af00      	add	r7, sp, #0
 8022f86:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8022f88:	6878      	ldr	r0, [r7, #4]
 8022f8a:	f000 fd8f 	bl	8023aac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8022f8e:	4603      	mov	r3, r0
 8022f90:	4618      	mov	r0, r3
 8022f92:	3708      	adds	r7, #8
 8022f94:	46bd      	mov	sp, r7
 8022f96:	bd80      	pop	{r7, pc}

08022f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8022f98:	b580      	push	{r7, lr}
 8022f9a:	b084      	sub	sp, #16
 8022f9c:	af00      	add	r7, sp, #0
 8022f9e:	60f8      	str	r0, [r7, #12]
 8022fa0:	60b9      	str	r1, [r7, #8]
 8022fa2:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 8022fa4:	6879      	ldr	r1, [r7, #4]
 8022fa6:	68b8      	ldr	r0, [r7, #8]
 8022fa8:	f7ef fa04 	bl	80123b4 <_ZNK3PinltERKS_>
 8022fac:	4603      	mov	r3, r0
 8022fae:	2b00      	cmp	r3, #0
 8022fb0:	d001      	beq.n	8022fb6 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 8022fb2:	23ff      	movs	r3, #255	; 0xff
 8022fb4:	e009      	b.n	8022fca <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8022fb6:	68b9      	ldr	r1, [r7, #8]
 8022fb8:	6878      	ldr	r0, [r7, #4]
 8022fba:	f7ef f9fb 	bl	80123b4 <_ZNK3PinltERKS_>
 8022fbe:	4603      	mov	r3, r0
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d001      	beq.n	8022fc8 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 8022fc4:	2301      	movs	r3, #1
 8022fc6:	e000      	b.n	8022fca <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 8022fc8:	2300      	movs	r3, #0
	    }
	}
 8022fca:	4618      	mov	r0, r3
 8022fcc:	3710      	adds	r7, #16
 8022fce:	46bd      	mov	sp, r7
 8022fd0:	bd80      	pop	{r7, pc}

08022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8022fd2:	b590      	push	{r4, r7, lr}
 8022fd4:	b087      	sub	sp, #28
 8022fd6:	af00      	add	r7, sp, #0
 8022fd8:	60f8      	str	r0, [r7, #12]
 8022fda:	60b9      	str	r1, [r7, #8]
 8022fdc:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8022fde:	6879      	ldr	r1, [r7, #4]
 8022fe0:	68b8      	ldr	r0, [r7, #8]
 8022fe2:	f000 fd77 	bl	8023ad4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 8022fe6:	4604      	mov	r4, r0
 8022fe8:	f107 0314 	add.w	r3, r7, #20
 8022fec:	2100      	movs	r1, #0
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f7fd f9d9 	bl	80203a6 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8022ff4:	7d39      	ldrb	r1, [r7, #20]
 8022ff6:	4620      	mov	r0, r4
 8022ff8:	f7fd f9f3 	bl	80203e2 <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8022ffc:	4603      	mov	r3, r0
 8022ffe:	4618      	mov	r0, r3
 8023000:	371c      	adds	r7, #28
 8023002:	46bd      	mov	sp, r7
 8023004:	bd90      	pop	{r4, r7, pc}

08023006 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8023006:	b590      	push	{r4, r7, lr}
 8023008:	b08b      	sub	sp, #44	; 0x2c
 802300a:	af00      	add	r7, sp, #0
 802300c:	60f8      	str	r0, [r7, #12]
 802300e:	60b9      	str	r1, [r7, #8]
 8023010:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8023012:	68b8      	ldr	r0, [r7, #8]
 8023014:	f7fd fee0 	bl	8020dd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8023018:	4603      	mov	r3, r0
 802301a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 802301c:	68b8      	ldr	r0, [r7, #8]
 802301e:	f7ff ff8b 	bl	8022f38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8023022:	4603      	mov	r3, r0
 8023024:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8023026:	2301      	movs	r3, #1
 8023028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 802302c:	69bb      	ldr	r3, [r7, #24]
 802302e:	2b00      	cmp	r3, #0
 8023030:	d020      	beq.n	8023074 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8023032:	69bb      	ldr	r3, [r7, #24]
 8023034:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8023036:	68bc      	ldr	r4, [r7, #8]
 8023038:	69bb      	ldr	r3, [r7, #24]
 802303a:	4618      	mov	r0, r3
 802303c:	f000 fd36 	bl	8023aac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8023040:	4603      	mov	r3, r0
 8023042:	461a      	mov	r2, r3
 8023044:	6879      	ldr	r1, [r7, #4]
 8023046:	4620      	mov	r0, r4
 8023048:	f7ff ffc3 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 802304c:	4603      	mov	r3, r0
 802304e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8023052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023056:	2b00      	cmp	r3, #0
 8023058:	d005      	beq.n	8023066 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 802305a:	69bb      	ldr	r3, [r7, #24]
 802305c:	4618      	mov	r0, r3
 802305e:	f7fe fb37 	bl	80216d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8023062:	4603      	mov	r3, r0
 8023064:	e004      	b.n	8023070 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 8023066:	69bb      	ldr	r3, [r7, #24]
 8023068:	4618      	mov	r0, r3
 802306a:	f7fe fb25 	bl	80216b8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 802306e:	4603      	mov	r3, r0
 8023070:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8023072:	e7db      	b.n	802302c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8023074:	697a      	ldr	r2, [r7, #20]
 8023076:	f107 0310 	add.w	r3, r7, #16
 802307a:	4611      	mov	r1, r2
 802307c:	4618      	mov	r0, r3
 802307e:	f7fe fef1 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8023082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023086:	2b00      	cmp	r3, #0
 8023088:	d01d      	beq.n	80230c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 802308a:	68b8      	ldr	r0, [r7, #8]
 802308c:	f000 fd52 	bl	8023b34 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 8023090:	4603      	mov	r3, r0
 8023092:	61fb      	str	r3, [r7, #28]
 8023094:	f107 021c 	add.w	r2, r7, #28
 8023098:	f107 0310 	add.w	r3, r7, #16
 802309c:	4611      	mov	r1, r2
 802309e:	4618      	mov	r0, r3
 80230a0:	f000 fd59 	bl	8023b56 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>
 80230a4:	4603      	mov	r3, r0
 80230a6:	2b00      	cmp	r3, #0
 80230a8:	d008      	beq.n	80230bc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 80230aa:	f107 0214 	add.w	r2, r7, #20
 80230ae:	f107 0318 	add.w	r3, r7, #24
 80230b2:	4619      	mov	r1, r3
 80230b4:	68f8      	ldr	r0, [r7, #12]
 80230b6:	f000 fd62 	bl	8023b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 80230ba:	e025      	b.n	8023108 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 80230bc:	f107 0310 	add.w	r3, r7, #16
 80230c0:	4618      	mov	r0, r3
 80230c2:	f000 f831 	bl	8023128 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80230c6:	68bc      	ldr	r4, [r7, #8]
 80230c8:	693b      	ldr	r3, [r7, #16]
 80230ca:	4618      	mov	r0, r3
 80230cc:	f7ff ff58 	bl	8022f80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80230d0:	4603      	mov	r3, r0
 80230d2:	687a      	ldr	r2, [r7, #4]
 80230d4:	4619      	mov	r1, r3
 80230d6:	4620      	mov	r0, r4
 80230d8:	f7ff ff7b 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80230dc:	4603      	mov	r3, r0
 80230de:	2b00      	cmp	r3, #0
 80230e0:	d008      	beq.n	80230f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 80230e2:	f107 0214 	add.w	r2, r7, #20
 80230e6:	f107 0318 	add.w	r3, r7, #24
 80230ea:	4619      	mov	r1, r3
 80230ec:	68f8      	ldr	r0, [r7, #12]
 80230ee:	f000 fd46 	bl	8023b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 80230f2:	e009      	b.n	8023108 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 80230f4:	2300      	movs	r3, #0
 80230f6:	623b      	str	r3, [r7, #32]
 80230f8:	f107 0220 	add.w	r2, r7, #32
 80230fc:	f107 0310 	add.w	r3, r7, #16
 8023100:	4619      	mov	r1, r3
 8023102:	68f8      	ldr	r0, [r7, #12]
 8023104:	f7f1 fec4 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8023108:	68f8      	ldr	r0, [r7, #12]
 802310a:	372c      	adds	r7, #44	; 0x2c
 802310c:	46bd      	mov	sp, r7
 802310e:	bd90      	pop	{r4, r7, pc}

08023110 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8023110:	b480      	push	{r7}
 8023112:	b083      	sub	sp, #12
 8023114:	af00      	add	r7, sp, #0
 8023116:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8023118:	687b      	ldr	r3, [r7, #4]
 802311a:	330c      	adds	r3, #12
 802311c:	4618      	mov	r0, r3
 802311e:	370c      	adds	r7, #12
 8023120:	46bd      	mov	sp, r7
 8023122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023126:	4770      	bx	lr

08023128 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8023128:	b580      	push	{r7, lr}
 802312a:	b082      	sub	sp, #8
 802312c:	af00      	add	r7, sp, #0
 802312e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8023130:	687b      	ldr	r3, [r7, #4]
 8023132:	681b      	ldr	r3, [r3, #0]
 8023134:	4618      	mov	r0, r3
 8023136:	f003 f81e 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 802313a:	4602      	mov	r2, r0
 802313c:	687b      	ldr	r3, [r7, #4]
 802313e:	601a      	str	r2, [r3, #0]
	return *this;
 8023140:	687b      	ldr	r3, [r7, #4]
      }
 8023142:	4618      	mov	r0, r3
 8023144:	3708      	adds	r7, #8
 8023146:	46bd      	mov	sp, r7
 8023148:	bd80      	pop	{r7, pc}

0802314a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 802314a:	b580      	push	{r7, lr}
 802314c:	b082      	sub	sp, #8
 802314e:	af00      	add	r7, sp, #0
 8023150:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	4618      	mov	r0, r3
 8023158:	f003 f80b 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 802315c:	4602      	mov	r2, r0
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	601a      	str	r2, [r3, #0]
	return *this;
 8023162:	687b      	ldr	r3, [r7, #4]
      }
 8023164:	4618      	mov	r0, r3
 8023166:	3708      	adds	r7, #8
 8023168:	46bd      	mov	sp, r7
 802316a:	bd80      	pop	{r7, pc}

0802316c <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 802316c:	b590      	push	{r4, r7, lr}
 802316e:	b083      	sub	sp, #12
 8023170:	af00      	add	r7, sp, #0
 8023172:	6078      	str	r0, [r7, #4]
 8023174:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	681c      	ldr	r4, [r3, #0]
 802317a:	6838      	ldr	r0, [r7, #0]
 802317c:	f7fe ffb0 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8023180:	4603      	mov	r3, r0
 8023182:	4619      	mov	r1, r3
 8023184:	4620      	mov	r0, r4
 8023186:	f000 fd13 	bl	8023bb0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 802318a:	4603      	mov	r3, r0
 802318c:	4618      	mov	r0, r3
 802318e:	370c      	adds	r7, #12
 8023190:	46bd      	mov	sp, r7
 8023192:	bd90      	pop	{r4, r7, pc}

08023194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8023194:	b480      	push	{r7}
 8023196:	b083      	sub	sp, #12
 8023198:	af00      	add	r7, sp, #0
 802319a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	4618      	mov	r0, r3
 80231a0:	370c      	adds	r7, #12
 80231a2:	46bd      	mov	sp, r7
 80231a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a8:	4770      	bx	lr

080231aa <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr()
 80231aa:	b580      	push	{r7, lr}
 80231ac:	b082      	sub	sp, #8
 80231ae:	af00      	add	r7, sp, #0
 80231b0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	3310      	adds	r3, #16
 80231b6:	4618      	mov	r0, r3
 80231b8:	f000 fd11 	bl	8023bde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 80231bc:	4603      	mov	r3, r0
 80231be:	4618      	mov	r0, r3
 80231c0:	3708      	adds	r7, #8
 80231c2:	46bd      	mov	sp, r7
 80231c4:	bd80      	pop	{r7, pc}

080231c6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80231c6:	b580      	push	{r7, lr}
 80231c8:	b082      	sub	sp, #8
 80231ca:	af00      	add	r7, sp, #0
 80231cc:	6078      	str	r0, [r7, #4]
 80231ce:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80231d0:	6838      	ldr	r0, [r7, #0]
 80231d2:	f000 fd10 	bl	8023bf6 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>
	}
 80231d6:	bf00      	nop
 80231d8:	3708      	adds	r7, #8
 80231da:	46bd      	mov	sp, r7
 80231dc:	bd80      	pop	{r7, pc}

080231de <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80231de:	b580      	push	{r7, lr}
 80231e0:	b088      	sub	sp, #32
 80231e2:	af00      	add	r7, sp, #0
 80231e4:	60f8      	str	r0, [r7, #12]
 80231e6:	60b9      	str	r1, [r7, #8]
 80231e8:	607a      	str	r2, [r7, #4]
 80231ea:	68fb      	ldr	r3, [r7, #12]
 80231ec:	61fb      	str	r3, [r7, #28]
 80231ee:	68bb      	ldr	r3, [r7, #8]
 80231f0:	61bb      	str	r3, [r7, #24]
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80231f6:	f7de f927 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80231fa:	4603      	mov	r3, r0
 80231fc:	2b00      	cmp	r3, #0
 80231fe:	d003      	beq.n	8023208 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8023200:	69b8      	ldr	r0, [r7, #24]
 8023202:	f002 ff4d 	bl	80260a0 <_ZdlPv>
	    return;
 8023206:	e005      	b.n	8023214 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8023208:	697a      	ldr	r2, [r7, #20]
 802320a:	69b9      	ldr	r1, [r7, #24]
 802320c:	69f8      	ldr	r0, [r7, #28]
 802320e:	f000 fef9 	bl	8024004 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8023212:	bf00      	nop
 8023214:	bf00      	nop
 8023216:	3720      	adds	r7, #32
 8023218:	46bd      	mov	sp, r7
 802321a:	bd80      	pop	{r7, pc}

0802321c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>:
 802321c:	b480      	push	{r7}
 802321e:	b083      	sub	sp, #12
 8023220:	af00      	add	r7, sp, #0
 8023222:	6078      	str	r0, [r7, #4]
 8023224:	6039      	str	r1, [r7, #0]
 8023226:	687b      	ldr	r3, [r7, #4]
 8023228:	4618      	mov	r0, r3
 802322a:	370c      	adds	r7, #12
 802322c:	46bd      	mov	sp, r7
 802322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023232:	4770      	bx	lr

08023234 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8023234:	b580      	push	{r7, lr}
 8023236:	b084      	sub	sp, #16
 8023238:	af00      	add	r7, sp, #0
 802323a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	681a      	ldr	r2, [r3, #0]
 8023240:	f107 030c 	add.w	r3, r7, #12
 8023244:	4611      	mov	r1, r2
 8023246:	4618      	mov	r0, r3
 8023248:	f7fe ffea 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 802324c:	68fb      	ldr	r3, [r7, #12]
 802324e:	4618      	mov	r0, r3
 8023250:	3710      	adds	r7, #16
 8023252:	46bd      	mov	sp, r7
 8023254:	bd80      	pop	{r7, pc}

08023256 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8023256:	b480      	push	{r7}
 8023258:	b083      	sub	sp, #12
 802325a:	af00      	add	r7, sp, #0
 802325c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	3304      	adds	r3, #4
 8023262:	4618      	mov	r0, r3
 8023264:	370c      	adds	r7, #12
 8023266:	46bd      	mov	sp, r7
 8023268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802326c:	4770      	bx	lr

0802326e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802326e:	b480      	push	{r7}
 8023270:	b083      	sub	sp, #12
 8023272:	af00      	add	r7, sp, #0
 8023274:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	695b      	ldr	r3, [r3, #20]
 802327a:	4618      	mov	r0, r3
 802327c:	370c      	adds	r7, #12
 802327e:	46bd      	mov	sp, r7
 8023280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023284:	4770      	bx	lr

08023286 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8023286:	b480      	push	{r7}
 8023288:	b083      	sub	sp, #12
 802328a:	af00      	add	r7, sp, #0
 802328c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	3310      	adds	r3, #16
 8023292:	4618      	mov	r0, r3
 8023294:	370c      	adds	r7, #12
 8023296:	46bd      	mov	sp, r7
 8023298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802329c:	4770      	bx	lr

0802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 802329e:	b580      	push	{r7, lr}
 80232a0:	b082      	sub	sp, #8
 80232a2:	af00      	add	r7, sp, #0
 80232a4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80232a6:	6878      	ldr	r0, [r7, #4]
 80232a8:	f000 fcaf 	bl	8023c0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80232ac:	4603      	mov	r3, r0
 80232ae:	4618      	mov	r0, r3
 80232b0:	3708      	adds	r7, #8
 80232b2:	46bd      	mov	sp, r7
 80232b4:	bd80      	pop	{r7, pc}

080232b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80232b6:	b590      	push	{r4, r7, lr}
 80232b8:	b08b      	sub	sp, #44	; 0x2c
 80232ba:	af00      	add	r7, sp, #0
 80232bc:	60f8      	str	r0, [r7, #12]
 80232be:	60b9      	str	r1, [r7, #8]
 80232c0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80232c2:	68b8      	ldr	r0, [r7, #8]
 80232c4:	f7fd fe34 	bl	8020f30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 80232c8:	4603      	mov	r3, r0
 80232ca:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80232cc:	68b8      	ldr	r0, [r7, #8]
 80232ce:	f7ff ffc2 	bl	8023256 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 80232d2:	4603      	mov	r3, r0
 80232d4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80232d6:	2301      	movs	r3, #1
 80232d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80232dc:	69bb      	ldr	r3, [r7, #24]
 80232de:	2b00      	cmp	r3, #0
 80232e0:	d020      	beq.n	8023324 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80232e2:	69bb      	ldr	r3, [r7, #24]
 80232e4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80232e6:	68bc      	ldr	r4, [r7, #8]
 80232e8:	69bb      	ldr	r3, [r7, #24]
 80232ea:	4618      	mov	r0, r3
 80232ec:	f000 fc8d 	bl	8023c0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80232f0:	4603      	mov	r3, r0
 80232f2:	461a      	mov	r2, r3
 80232f4:	6879      	ldr	r1, [r7, #4]
 80232f6:	4620      	mov	r0, r4
 80232f8:	f7f0 f9bb 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80232fc:	4603      	mov	r3, r0
 80232fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8023302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023306:	2b00      	cmp	r3, #0
 8023308:	d005      	beq.n	8023316 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x60>
 802330a:	69bb      	ldr	r3, [r7, #24]
 802330c:	4618      	mov	r0, r3
 802330e:	f7fe faad 	bl	802186c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8023312:	4603      	mov	r3, r0
 8023314:	e004      	b.n	8023320 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6a>
 8023316:	69bb      	ldr	r3, [r7, #24]
 8023318:	4618      	mov	r0, r3
 802331a:	f7fe fa9b 	bl	8021854 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 802331e:	4603      	mov	r3, r0
 8023320:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8023322:	e7db      	b.n	80232dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8023324:	697a      	ldr	r2, [r7, #20]
 8023326:	f107 0310 	add.w	r3, r7, #16
 802332a:	4611      	mov	r1, r2
 802332c:	4618      	mov	r0, r3
 802332e:	f7fe ff77 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8023332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023336:	2b00      	cmp	r3, #0
 8023338:	d01d      	beq.n	8023376 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 802333a:	68b8      	ldr	r0, [r7, #8]
 802333c:	f000 fc78 	bl	8023c30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>
 8023340:	4603      	mov	r3, r0
 8023342:	61fb      	str	r3, [r7, #28]
 8023344:	f107 021c 	add.w	r2, r7, #28
 8023348:	f107 0310 	add.w	r3, r7, #16
 802334c:	4611      	mov	r1, r2
 802334e:	4618      	mov	r0, r3
 8023350:	f000 fc7f 	bl	8023c52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 8023354:	4603      	mov	r3, r0
 8023356:	2b00      	cmp	r3, #0
 8023358:	d008      	beq.n	802336c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 802335a:	f107 0214 	add.w	r2, r7, #20
 802335e:	f107 0318 	add.w	r3, r7, #24
 8023362:	4619      	mov	r1, r3
 8023364:	68f8      	ldr	r0, [r7, #12]
 8023366:	f000 fc88 	bl	8023c7a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 802336a:	e025      	b.n	80233b8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 802336c:	f107 0310 	add.w	r3, r7, #16
 8023370:	4618      	mov	r0, r3
 8023372:	f000 f831 	bl	80233d8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8023376:	68bc      	ldr	r4, [r7, #8]
 8023378:	693b      	ldr	r3, [r7, #16]
 802337a:	4618      	mov	r0, r3
 802337c:	f7ff ff8f 	bl	802329e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8023380:	4603      	mov	r3, r0
 8023382:	687a      	ldr	r2, [r7, #4]
 8023384:	4619      	mov	r1, r3
 8023386:	4620      	mov	r0, r4
 8023388:	f7f0 f973 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 802338c:	4603      	mov	r3, r0
 802338e:	2b00      	cmp	r3, #0
 8023390:	d008      	beq.n	80233a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8023392:	f107 0214 	add.w	r2, r7, #20
 8023396:	f107 0318 	add.w	r3, r7, #24
 802339a:	4619      	mov	r1, r3
 802339c:	68f8      	ldr	r0, [r7, #12]
 802339e:	f000 fc6c 	bl	8023c7a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 80233a2:	e009      	b.n	80233b8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 80233a4:	2300      	movs	r3, #0
 80233a6:	623b      	str	r3, [r7, #32]
 80233a8:	f107 0220 	add.w	r2, r7, #32
 80233ac:	f107 0310 	add.w	r3, r7, #16
 80233b0:	4619      	mov	r1, r3
 80233b2:	68f8      	ldr	r0, [r7, #12]
 80233b4:	f7f1 fd6c 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80233b8:	68f8      	ldr	r0, [r7, #12]
 80233ba:	372c      	adds	r7, #44	; 0x2c
 80233bc:	46bd      	mov	sp, r7
 80233be:	bd90      	pop	{r4, r7, pc}

080233c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80233c0:	b480      	push	{r7}
 80233c2:	b083      	sub	sp, #12
 80233c4:	af00      	add	r7, sp, #0
 80233c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80233c8:	687b      	ldr	r3, [r7, #4]
 80233ca:	330c      	adds	r3, #12
 80233cc:	4618      	mov	r0, r3
 80233ce:	370c      	adds	r7, #12
 80233d0:	46bd      	mov	sp, r7
 80233d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233d6:	4770      	bx	lr

080233d8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80233d8:	b580      	push	{r7, lr}
 80233da:	b082      	sub	sp, #8
 80233dc:	af00      	add	r7, sp, #0
 80233de:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80233e0:	687b      	ldr	r3, [r7, #4]
 80233e2:	681b      	ldr	r3, [r3, #0]
 80233e4:	4618      	mov	r0, r3
 80233e6:	f002 fec6 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80233ea:	4602      	mov	r2, r0
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	601a      	str	r2, [r3, #0]
	return *this;
 80233f0:	687b      	ldr	r3, [r7, #4]
      }
 80233f2:	4618      	mov	r0, r3
 80233f4:	3708      	adds	r7, #8
 80233f6:	46bd      	mov	sp, r7
 80233f8:	bd80      	pop	{r7, pc}

080233fa <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80233fa:	b580      	push	{r7, lr}
 80233fc:	b082      	sub	sp, #8
 80233fe:	af00      	add	r7, sp, #0
 8023400:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	681b      	ldr	r3, [r3, #0]
 8023406:	4618      	mov	r0, r3
 8023408:	f002 feb3 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 802340c:	4602      	mov	r2, r0
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	601a      	str	r2, [r3, #0]
	return *this;
 8023412:	687b      	ldr	r3, [r7, #4]
      }
 8023414:	4618      	mov	r0, r3
 8023416:	3708      	adds	r7, #8
 8023418:	46bd      	mov	sp, r7
 802341a:	bd80      	pop	{r7, pc}

0802341c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 802341c:	b590      	push	{r4, r7, lr}
 802341e:	b083      	sub	sp, #12
 8023420:	af00      	add	r7, sp, #0
 8023422:	6078      	str	r0, [r7, #4]
 8023424:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8023426:	687b      	ldr	r3, [r7, #4]
 8023428:	681c      	ldr	r4, [r3, #0]
 802342a:	6838      	ldr	r0, [r7, #0]
 802342c:	f7ff f836 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8023430:	4603      	mov	r3, r0
 8023432:	4619      	mov	r1, r3
 8023434:	4620      	mov	r0, r4
 8023436:	f000 fc39 	bl	8023cac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 802343a:	4603      	mov	r3, r0
 802343c:	4618      	mov	r0, r3
 802343e:	370c      	adds	r7, #12
 8023440:	46bd      	mov	sp, r7
 8023442:	bd90      	pop	{r4, r7, pc}

08023444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8023444:	b480      	push	{r7}
 8023446:	b083      	sub	sp, #12
 8023448:	af00      	add	r7, sp, #0
 802344a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	4618      	mov	r0, r3
 8023450:	370c      	adds	r7, #12
 8023452:	46bd      	mov	sp, r7
 8023454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023458:	4770      	bx	lr

0802345a <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 802345a:	b580      	push	{r7, lr}
 802345c:	b082      	sub	sp, #8
 802345e:	af00      	add	r7, sp, #0
 8023460:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8023462:	687b      	ldr	r3, [r7, #4]
 8023464:	3310      	adds	r3, #16
 8023466:	4618      	mov	r0, r3
 8023468:	f000 fc37 	bl	8023cda <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 802346c:	4603      	mov	r3, r0
 802346e:	4618      	mov	r0, r3
 8023470:	3708      	adds	r7, #8
 8023472:	46bd      	mov	sp, r7
 8023474:	bd80      	pop	{r7, pc}

08023476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023476:	b580      	push	{r7, lr}
 8023478:	b082      	sub	sp, #8
 802347a:	af00      	add	r7, sp, #0
 802347c:	6078      	str	r0, [r7, #4]
 802347e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8023480:	6838      	ldr	r0, [r7, #0]
 8023482:	f000 fc36 	bl	8023cf2 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>
	}
 8023486:	bf00      	nop
 8023488:	3708      	adds	r7, #8
 802348a:	46bd      	mov	sp, r7
 802348c:	bd80      	pop	{r7, pc}

0802348e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802348e:	b580      	push	{r7, lr}
 8023490:	b088      	sub	sp, #32
 8023492:	af00      	add	r7, sp, #0
 8023494:	60f8      	str	r0, [r7, #12]
 8023496:	60b9      	str	r1, [r7, #8]
 8023498:	607a      	str	r2, [r7, #4]
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	61fb      	str	r3, [r7, #28]
 802349e:	68bb      	ldr	r3, [r7, #8]
 80234a0:	61bb      	str	r3, [r7, #24]
 80234a2:	687b      	ldr	r3, [r7, #4]
 80234a4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80234a6:	f7dd ffcf 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80234aa:	4603      	mov	r3, r0
 80234ac:	2b00      	cmp	r3, #0
 80234ae:	d003      	beq.n	80234b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80234b0:	69b8      	ldr	r0, [r7, #24]
 80234b2:	f002 fdf5 	bl	80260a0 <_ZdlPv>
	    return;
 80234b6:	e005      	b.n	80234c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80234b8:	697a      	ldr	r2, [r7, #20]
 80234ba:	69b9      	ldr	r1, [r7, #24]
 80234bc:	69f8      	ldr	r0, [r7, #28]
 80234be:	f000 fe08 	bl	80240d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80234c2:	bf00      	nop
 80234c4:	bf00      	nop
 80234c6:	3720      	adds	r7, #32
 80234c8:	46bd      	mov	sp, r7
 80234ca:	bd80      	pop	{r7, pc}

080234cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>:
 80234cc:	b480      	push	{r7}
 80234ce:	b083      	sub	sp, #12
 80234d0:	af00      	add	r7, sp, #0
 80234d2:	6078      	str	r0, [r7, #4]
 80234d4:	6039      	str	r1, [r7, #0]
 80234d6:	687b      	ldr	r3, [r7, #4]
 80234d8:	4618      	mov	r0, r3
 80234da:	370c      	adds	r7, #12
 80234dc:	46bd      	mov	sp, r7
 80234de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234e2:	4770      	bx	lr

080234e4 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80234e4:	b580      	push	{r7, lr}
 80234e6:	b084      	sub	sp, #16
 80234e8:	af00      	add	r7, sp, #0
 80234ea:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80234ec:	687b      	ldr	r3, [r7, #4]
 80234ee:	681a      	ldr	r2, [r3, #0]
 80234f0:	f107 030c 	add.w	r3, r7, #12
 80234f4:	4611      	mov	r1, r2
 80234f6:	4618      	mov	r0, r3
 80234f8:	f7ff f86f 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80234fc:	68fb      	ldr	r3, [r7, #12]
 80234fe:	4618      	mov	r0, r3
 8023500:	3710      	adds	r7, #16
 8023502:	46bd      	mov	sp, r7
 8023504:	bd80      	pop	{r7, pc}

08023506 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8023506:	b480      	push	{r7}
 8023508:	b083      	sub	sp, #12
 802350a:	af00      	add	r7, sp, #0
 802350c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 802350e:	687b      	ldr	r3, [r7, #4]
 8023510:	3304      	adds	r3, #4
 8023512:	4618      	mov	r0, r3
 8023514:	370c      	adds	r7, #12
 8023516:	46bd      	mov	sp, r7
 8023518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351c:	4770      	bx	lr

0802351e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802351e:	b480      	push	{r7}
 8023520:	b083      	sub	sp, #12
 8023522:	af00      	add	r7, sp, #0
 8023524:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	695b      	ldr	r3, [r3, #20]
 802352a:	4618      	mov	r0, r3
 802352c:	370c      	adds	r7, #12
 802352e:	46bd      	mov	sp, r7
 8023530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023534:	4770      	bx	lr

08023536 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8023536:	b480      	push	{r7}
 8023538:	b083      	sub	sp, #12
 802353a:	af00      	add	r7, sp, #0
 802353c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	3310      	adds	r3, #16
 8023542:	4618      	mov	r0, r3
 8023544:	370c      	adds	r7, #12
 8023546:	46bd      	mov	sp, r7
 8023548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354c:	4770      	bx	lr

0802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 802354e:	b580      	push	{r7, lr}
 8023550:	b082      	sub	sp, #8
 8023552:	af00      	add	r7, sp, #0
 8023554:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8023556:	6878      	ldr	r0, [r7, #4]
 8023558:	f000 fbd5 	bl	8023d06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 802355c:	4603      	mov	r3, r0
 802355e:	4618      	mov	r0, r3
 8023560:	3708      	adds	r7, #8
 8023562:	46bd      	mov	sp, r7
 8023564:	bd80      	pop	{r7, pc}

08023566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8023566:	b590      	push	{r4, r7, lr}
 8023568:	b08b      	sub	sp, #44	; 0x2c
 802356a:	af00      	add	r7, sp, #0
 802356c:	60f8      	str	r0, [r7, #12]
 802356e:	60b9      	str	r1, [r7, #8]
 8023570:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8023572:	68b8      	ldr	r0, [r7, #8]
 8023574:	f7fd fdad 	bl	80210d2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 8023578:	4603      	mov	r3, r0
 802357a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 802357c:	68b8      	ldr	r0, [r7, #8]
 802357e:	f7ff ffc2 	bl	8023506 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8023582:	4603      	mov	r3, r0
 8023584:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8023586:	2301      	movs	r3, #1
 8023588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 802358c:	69bb      	ldr	r3, [r7, #24]
 802358e:	2b00      	cmp	r3, #0
 8023590:	d020      	beq.n	80235d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8023592:	69bb      	ldr	r3, [r7, #24]
 8023594:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8023596:	68bc      	ldr	r4, [r7, #8]
 8023598:	69bb      	ldr	r3, [r7, #24]
 802359a:	4618      	mov	r0, r3
 802359c:	f000 fbb3 	bl	8023d06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80235a0:	4603      	mov	r3, r0
 80235a2:	461a      	mov	r2, r3
 80235a4:	6879      	ldr	r1, [r7, #4]
 80235a6:	4620      	mov	r0, r4
 80235a8:	f7ff fd13 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80235ac:	4603      	mov	r3, r0
 80235ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80235b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d005      	beq.n	80235c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x60>
 80235ba:	69bb      	ldr	r3, [r7, #24]
 80235bc:	4618      	mov	r0, r3
 80235be:	f7fe fa2e 	bl	8021a1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80235c2:	4603      	mov	r3, r0
 80235c4:	e004      	b.n	80235d0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6a>
 80235c6:	69bb      	ldr	r3, [r7, #24]
 80235c8:	4618      	mov	r0, r3
 80235ca:	f7fe fa1c 	bl	8021a06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80235ce:	4603      	mov	r3, r0
 80235d0:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80235d2:	e7db      	b.n	802358c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80235d4:	697a      	ldr	r2, [r7, #20]
 80235d6:	f107 0310 	add.w	r3, r7, #16
 80235da:	4611      	mov	r1, r2
 80235dc:	4618      	mov	r0, r3
 80235de:	f7fe fffc 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80235e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	d01d      	beq.n	8023626 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 80235ea:	68b8      	ldr	r0, [r7, #8]
 80235ec:	f000 fb9e 	bl	8023d2c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>
 80235f0:	4603      	mov	r3, r0
 80235f2:	61fb      	str	r3, [r7, #28]
 80235f4:	f107 021c 	add.w	r2, r7, #28
 80235f8:	f107 0310 	add.w	r3, r7, #16
 80235fc:	4611      	mov	r1, r2
 80235fe:	4618      	mov	r0, r3
 8023600:	f000 fba5 	bl	8023d4e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>
 8023604:	4603      	mov	r3, r0
 8023606:	2b00      	cmp	r3, #0
 8023608:	d008      	beq.n	802361c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 802360a:	f107 0214 	add.w	r2, r7, #20
 802360e:	f107 0318 	add.w	r3, r7, #24
 8023612:	4619      	mov	r1, r3
 8023614:	68f8      	ldr	r0, [r7, #12]
 8023616:	f000 fbae 	bl	8023d76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 802361a:	e025      	b.n	8023668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 802361c:	f107 0310 	add.w	r3, r7, #16
 8023620:	4618      	mov	r0, r3
 8023622:	f000 f831 	bl	8023688 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8023626:	68bc      	ldr	r4, [r7, #8]
 8023628:	693b      	ldr	r3, [r7, #16]
 802362a:	4618      	mov	r0, r3
 802362c:	f7ff ff8f 	bl	802354e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8023630:	4603      	mov	r3, r0
 8023632:	687a      	ldr	r2, [r7, #4]
 8023634:	4619      	mov	r1, r3
 8023636:	4620      	mov	r0, r4
 8023638:	f7ff fccb 	bl	8022fd2 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 802363c:	4603      	mov	r3, r0
 802363e:	2b00      	cmp	r3, #0
 8023640:	d008      	beq.n	8023654 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8023642:	f107 0214 	add.w	r2, r7, #20
 8023646:	f107 0318 	add.w	r3, r7, #24
 802364a:	4619      	mov	r1, r3
 802364c:	68f8      	ldr	r0, [r7, #12]
 802364e:	f000 fb92 	bl	8023d76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8023652:	e009      	b.n	8023668 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8023654:	2300      	movs	r3, #0
 8023656:	623b      	str	r3, [r7, #32]
 8023658:	f107 0220 	add.w	r2, r7, #32
 802365c:	f107 0310 	add.w	r3, r7, #16
 8023660:	4619      	mov	r1, r3
 8023662:	68f8      	ldr	r0, [r7, #12]
 8023664:	f7f1 fc14 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8023668:	68f8      	ldr	r0, [r7, #12]
 802366a:	372c      	adds	r7, #44	; 0x2c
 802366c:	46bd      	mov	sp, r7
 802366e:	bd90      	pop	{r4, r7, pc}

08023670 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8023670:	b480      	push	{r7}
 8023672:	b083      	sub	sp, #12
 8023674:	af00      	add	r7, sp, #0
 8023676:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8023678:	687b      	ldr	r3, [r7, #4]
 802367a:	330c      	adds	r3, #12
 802367c:	4618      	mov	r0, r3
 802367e:	370c      	adds	r7, #12
 8023680:	46bd      	mov	sp, r7
 8023682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023686:	4770      	bx	lr

08023688 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8023688:	b580      	push	{r7, lr}
 802368a:	b082      	sub	sp, #8
 802368c:	af00      	add	r7, sp, #0
 802368e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8023690:	687b      	ldr	r3, [r7, #4]
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	4618      	mov	r0, r3
 8023696:	f002 fd6e 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 802369a:	4602      	mov	r2, r0
 802369c:	687b      	ldr	r3, [r7, #4]
 802369e:	601a      	str	r2, [r3, #0]
	return *this;
 80236a0:	687b      	ldr	r3, [r7, #4]
      }
 80236a2:	4618      	mov	r0, r3
 80236a4:	3708      	adds	r7, #8
 80236a6:	46bd      	mov	sp, r7
 80236a8:	bd80      	pop	{r7, pc}

080236aa <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80236aa:	b580      	push	{r7, lr}
 80236ac:	b082      	sub	sp, #8
 80236ae:	af00      	add	r7, sp, #0
 80236b0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80236b2:	687b      	ldr	r3, [r7, #4]
 80236b4:	681b      	ldr	r3, [r3, #0]
 80236b6:	4618      	mov	r0, r3
 80236b8:	f002 fd5b 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80236bc:	4602      	mov	r2, r0
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	601a      	str	r2, [r3, #0]
	return *this;
 80236c2:	687b      	ldr	r3, [r7, #4]
      }
 80236c4:	4618      	mov	r0, r3
 80236c6:	3708      	adds	r7, #8
 80236c8:	46bd      	mov	sp, r7
 80236ca:	bd80      	pop	{r7, pc}

080236cc <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 80236cc:	b590      	push	{r4, r7, lr}
 80236ce:	b083      	sub	sp, #12
 80236d0:	af00      	add	r7, sp, #0
 80236d2:	6078      	str	r0, [r7, #4]
 80236d4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	681c      	ldr	r4, [r3, #0]
 80236da:	6838      	ldr	r0, [r7, #0]
 80236dc:	f7ff f8bb 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80236e0:	4603      	mov	r3, r0
 80236e2:	4619      	mov	r1, r3
 80236e4:	4620      	mov	r0, r4
 80236e6:	f000 fb5f 	bl	8023da8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80236ea:	4603      	mov	r3, r0
 80236ec:	4618      	mov	r0, r3
 80236ee:	370c      	adds	r7, #12
 80236f0:	46bd      	mov	sp, r7
 80236f2:	bd90      	pop	{r4, r7, pc}

080236f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80236f4:	b480      	push	{r7}
 80236f6:	b083      	sub	sp, #12
 80236f8:	af00      	add	r7, sp, #0
 80236fa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80236fc:	687b      	ldr	r3, [r7, #4]
 80236fe:	4618      	mov	r0, r3
 8023700:	370c      	adds	r7, #12
 8023702:	46bd      	mov	sp, r7
 8023704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023708:	4770      	bx	lr

0802370a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 802370a:	b580      	push	{r7, lr}
 802370c:	b082      	sub	sp, #8
 802370e:	af00      	add	r7, sp, #0
 8023710:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	3310      	adds	r3, #16
 8023716:	4618      	mov	r0, r3
 8023718:	f000 fb5d 	bl	8023dd6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 802371c:	4603      	mov	r3, r0
 802371e:	4618      	mov	r0, r3
 8023720:	3708      	adds	r7, #8
 8023722:	46bd      	mov	sp, r7
 8023724:	bd80      	pop	{r7, pc}

08023726 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8023726:	b580      	push	{r7, lr}
 8023728:	b082      	sub	sp, #8
 802372a:	af00      	add	r7, sp, #0
 802372c:	6078      	str	r0, [r7, #4]
 802372e:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8023730:	6838      	ldr	r0, [r7, #0]
 8023732:	f000 fb5c 	bl	8023dee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>
	}
 8023736:	bf00      	nop
 8023738:	3708      	adds	r7, #8
 802373a:	46bd      	mov	sp, r7
 802373c:	bd80      	pop	{r7, pc}

0802373e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 802373e:	b580      	push	{r7, lr}
 8023740:	b088      	sub	sp, #32
 8023742:	af00      	add	r7, sp, #0
 8023744:	60f8      	str	r0, [r7, #12]
 8023746:	60b9      	str	r1, [r7, #8]
 8023748:	607a      	str	r2, [r7, #4]
 802374a:	68fb      	ldr	r3, [r7, #12]
 802374c:	61fb      	str	r3, [r7, #28]
 802374e:	68bb      	ldr	r3, [r7, #8]
 8023750:	61bb      	str	r3, [r7, #24]
 8023752:	687b      	ldr	r3, [r7, #4]
 8023754:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8023756:	f7dd fe77 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 802375a:	4603      	mov	r3, r0
 802375c:	2b00      	cmp	r3, #0
 802375e:	d003      	beq.n	8023768 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8023760:	69b8      	ldr	r0, [r7, #24]
 8023762:	f002 fc9d 	bl	80260a0 <_ZdlPv>
	    return;
 8023766:	e005      	b.n	8023774 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8023768:	697a      	ldr	r2, [r7, #20]
 802376a:	69b9      	ldr	r1, [r7, #24]
 802376c:	69f8      	ldr	r0, [r7, #28]
 802376e:	f000 fd14 	bl	802419a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8023772:	bf00      	nop
 8023774:	bf00      	nop
 8023776:	3720      	adds	r7, #32
 8023778:	46bd      	mov	sp, r7
 802377a:	bd80      	pop	{r7, pc}

0802377c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>:
 802377c:	b480      	push	{r7}
 802377e:	b083      	sub	sp, #12
 8023780:	af00      	add	r7, sp, #0
 8023782:	6078      	str	r0, [r7, #4]
 8023784:	6039      	str	r1, [r7, #0]
 8023786:	687b      	ldr	r3, [r7, #4]
 8023788:	4618      	mov	r0, r3
 802378a:	370c      	adds	r7, #12
 802378c:	46bd      	mov	sp, r7
 802378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023792:	4770      	bx	lr

08023794 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8023794:	b580      	push	{r7, lr}
 8023796:	b084      	sub	sp, #16
 8023798:	af00      	add	r7, sp, #0
 802379a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 802379c:	687b      	ldr	r3, [r7, #4]
 802379e:	681a      	ldr	r2, [r3, #0]
 80237a0:	f107 030c 	add.w	r3, r7, #12
 80237a4:	4611      	mov	r1, r2
 80237a6:	4618      	mov	r0, r3
 80237a8:	f7ff f8f4 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80237ac:	68fb      	ldr	r3, [r7, #12]
 80237ae:	4618      	mov	r0, r3
 80237b0:	3710      	adds	r7, #16
 80237b2:	46bd      	mov	sp, r7
 80237b4:	bd80      	pop	{r7, pc}

080237b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80237b6:	b480      	push	{r7}
 80237b8:	b083      	sub	sp, #12
 80237ba:	af00      	add	r7, sp, #0
 80237bc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	3304      	adds	r3, #4
 80237c2:	4618      	mov	r0, r3
 80237c4:	370c      	adds	r7, #12
 80237c6:	46bd      	mov	sp, r7
 80237c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237cc:	4770      	bx	lr

080237ce <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80237ce:	b480      	push	{r7}
 80237d0:	b083      	sub	sp, #12
 80237d2:	af00      	add	r7, sp, #0
 80237d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80237d6:	687b      	ldr	r3, [r7, #4]
 80237d8:	695b      	ldr	r3, [r3, #20]
 80237da:	4618      	mov	r0, r3
 80237dc:	370c      	adds	r7, #12
 80237de:	46bd      	mov	sp, r7
 80237e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237e4:	4770      	bx	lr

080237e6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80237e6:	b480      	push	{r7}
 80237e8:	b083      	sub	sp, #12
 80237ea:	af00      	add	r7, sp, #0
 80237ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80237ee:	687b      	ldr	r3, [r7, #4]
 80237f0:	3310      	adds	r3, #16
 80237f2:	4618      	mov	r0, r3
 80237f4:	370c      	adds	r7, #12
 80237f6:	46bd      	mov	sp, r7
 80237f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237fc:	4770      	bx	lr

080237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80237fe:	b580      	push	{r7, lr}
 8023800:	b082      	sub	sp, #8
 8023802:	af00      	add	r7, sp, #0
 8023804:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8023806:	6878      	ldr	r0, [r7, #4]
 8023808:	f000 fafb 	bl	8023e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 802380c:	4603      	mov	r3, r0
 802380e:	4618      	mov	r0, r3
 8023810:	3708      	adds	r7, #8
 8023812:	46bd      	mov	sp, r7
 8023814:	bd80      	pop	{r7, pc}

08023816 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8023816:	b590      	push	{r4, r7, lr}
 8023818:	b08b      	sub	sp, #44	; 0x2c
 802381a:	af00      	add	r7, sp, #0
 802381c:	60f8      	str	r0, [r7, #12]
 802381e:	60b9      	str	r1, [r7, #8]
 8023820:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8023822:	68b8      	ldr	r0, [r7, #8]
 8023824:	f7fd fd1a 	bl	802125c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8023828:	4603      	mov	r3, r0
 802382a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 802382c:	68b8      	ldr	r0, [r7, #8]
 802382e:	f7ff ffc2 	bl	80237b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8023832:	4603      	mov	r3, r0
 8023834:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8023836:	2301      	movs	r3, #1
 8023838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 802383c:	69bb      	ldr	r3, [r7, #24]
 802383e:	2b00      	cmp	r3, #0
 8023840:	d020      	beq.n	8023884 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8023842:	69bb      	ldr	r3, [r7, #24]
 8023844:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8023846:	68bc      	ldr	r4, [r7, #8]
 8023848:	69bb      	ldr	r3, [r7, #24]
 802384a:	4618      	mov	r0, r3
 802384c:	f000 fad9 	bl	8023e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8023850:	4603      	mov	r3, r0
 8023852:	461a      	mov	r2, r3
 8023854:	6879      	ldr	r1, [r7, #4]
 8023856:	4620      	mov	r0, r4
 8023858:	f7ef ff0b 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 802385c:	4603      	mov	r3, r0
 802385e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8023862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023866:	2b00      	cmp	r3, #0
 8023868:	d005      	beq.n	8023876 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 802386a:	69bb      	ldr	r3, [r7, #24]
 802386c:	4618      	mov	r0, r3
 802386e:	f7fe f9a4 	bl	8021bba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8023872:	4603      	mov	r3, r0
 8023874:	e004      	b.n	8023880 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8023876:	69bb      	ldr	r3, [r7, #24]
 8023878:	4618      	mov	r0, r3
 802387a:	f7fe f992 	bl	8021ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 802387e:	4603      	mov	r3, r0
 8023880:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8023882:	e7db      	b.n	802383c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8023884:	697a      	ldr	r2, [r7, #20]
 8023886:	f107 0310 	add.w	r3, r7, #16
 802388a:	4611      	mov	r1, r2
 802388c:	4618      	mov	r0, r3
 802388e:	f7ff f881 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8023892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8023896:	2b00      	cmp	r3, #0
 8023898:	d01d      	beq.n	80238d6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 802389a:	68b8      	ldr	r0, [r7, #8]
 802389c:	f000 fac4 	bl	8023e28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 80238a0:	4603      	mov	r3, r0
 80238a2:	61fb      	str	r3, [r7, #28]
 80238a4:	f107 021c 	add.w	r2, r7, #28
 80238a8:	f107 0310 	add.w	r3, r7, #16
 80238ac:	4611      	mov	r1, r2
 80238ae:	4618      	mov	r0, r3
 80238b0:	f000 facb 	bl	8023e4a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 80238b4:	4603      	mov	r3, r0
 80238b6:	2b00      	cmp	r3, #0
 80238b8:	d008      	beq.n	80238cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 80238ba:	f107 0214 	add.w	r2, r7, #20
 80238be:	f107 0318 	add.w	r3, r7, #24
 80238c2:	4619      	mov	r1, r3
 80238c4:	68f8      	ldr	r0, [r7, #12]
 80238c6:	f000 fad4 	bl	8023e72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 80238ca:	e025      	b.n	8023918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 80238cc:	f107 0310 	add.w	r3, r7, #16
 80238d0:	4618      	mov	r0, r3
 80238d2:	f000 f831 	bl	8023938 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80238d6:	68bc      	ldr	r4, [r7, #8]
 80238d8:	693b      	ldr	r3, [r7, #16]
 80238da:	4618      	mov	r0, r3
 80238dc:	f7ff ff8f 	bl	80237fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80238e0:	4603      	mov	r3, r0
 80238e2:	687a      	ldr	r2, [r7, #4]
 80238e4:	4619      	mov	r1, r3
 80238e6:	4620      	mov	r0, r4
 80238e8:	f7ef fec3 	bl	8013672 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80238ec:	4603      	mov	r3, r0
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d008      	beq.n	8023904 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 80238f2:	f107 0214 	add.w	r2, r7, #20
 80238f6:	f107 0318 	add.w	r3, r7, #24
 80238fa:	4619      	mov	r1, r3
 80238fc:	68f8      	ldr	r0, [r7, #12]
 80238fe:	f000 fab8 	bl	8023e72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8023902:	e009      	b.n	8023918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8023904:	2300      	movs	r3, #0
 8023906:	623b      	str	r3, [r7, #32]
 8023908:	f107 0220 	add.w	r2, r7, #32
 802390c:	f107 0310 	add.w	r3, r7, #16
 8023910:	4619      	mov	r1, r3
 8023912:	68f8      	ldr	r0, [r7, #12]
 8023914:	f7f1 fabc 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8023918:	68f8      	ldr	r0, [r7, #12]
 802391a:	372c      	adds	r7, #44	; 0x2c
 802391c:	46bd      	mov	sp, r7
 802391e:	bd90      	pop	{r4, r7, pc}

08023920 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8023920:	b480      	push	{r7}
 8023922:	b083      	sub	sp, #12
 8023924:	af00      	add	r7, sp, #0
 8023926:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8023928:	687b      	ldr	r3, [r7, #4]
 802392a:	330c      	adds	r3, #12
 802392c:	4618      	mov	r0, r3
 802392e:	370c      	adds	r7, #12
 8023930:	46bd      	mov	sp, r7
 8023932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023936:	4770      	bx	lr

08023938 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8023938:	b580      	push	{r7, lr}
 802393a:	b082      	sub	sp, #8
 802393c:	af00      	add	r7, sp, #0
 802393e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8023940:	687b      	ldr	r3, [r7, #4]
 8023942:	681b      	ldr	r3, [r3, #0]
 8023944:	4618      	mov	r0, r3
 8023946:	f002 fc16 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 802394a:	4602      	mov	r2, r0
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	601a      	str	r2, [r3, #0]
	return *this;
 8023950:	687b      	ldr	r3, [r7, #4]
      }
 8023952:	4618      	mov	r0, r3
 8023954:	3708      	adds	r7, #8
 8023956:	46bd      	mov	sp, r7
 8023958:	bd80      	pop	{r7, pc}

0802395a <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 802395a:	b580      	push	{r7, lr}
 802395c:	b082      	sub	sp, #8
 802395e:	af00      	add	r7, sp, #0
 8023960:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8023962:	687b      	ldr	r3, [r7, #4]
 8023964:	681b      	ldr	r3, [r3, #0]
 8023966:	4618      	mov	r0, r3
 8023968:	f002 fc03 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 802396c:	4602      	mov	r2, r0
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	601a      	str	r2, [r3, #0]
	return *this;
 8023972:	687b      	ldr	r3, [r7, #4]
      }
 8023974:	4618      	mov	r0, r3
 8023976:	3708      	adds	r7, #8
 8023978:	46bd      	mov	sp, r7
 802397a:	bd80      	pop	{r7, pc}

0802397c <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 802397c:	b590      	push	{r4, r7, lr}
 802397e:	b083      	sub	sp, #12
 8023980:	af00      	add	r7, sp, #0
 8023982:	6078      	str	r0, [r7, #4]
 8023984:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8023986:	687b      	ldr	r3, [r7, #4]
 8023988:	681c      	ldr	r4, [r3, #0]
 802398a:	6838      	ldr	r0, [r7, #0]
 802398c:	f7ff f940 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8023990:	4603      	mov	r3, r0
 8023992:	4619      	mov	r1, r3
 8023994:	4620      	mov	r0, r4
 8023996:	f000 fa85 	bl	8023ea4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 802399a:	4603      	mov	r3, r0
 802399c:	4618      	mov	r0, r3
 802399e:	370c      	adds	r7, #12
 80239a0:	46bd      	mov	sp, r7
 80239a2:	bd90      	pop	{r4, r7, pc}

080239a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80239a4:	b480      	push	{r7}
 80239a6:	b083      	sub	sp, #12
 80239a8:	af00      	add	r7, sp, #0
 80239aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80239ac:	687b      	ldr	r3, [r7, #4]
 80239ae:	4618      	mov	r0, r3
 80239b0:	370c      	adds	r7, #12
 80239b2:	46bd      	mov	sp, r7
 80239b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239b8:	4770      	bx	lr

080239ba <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80239ba:	b580      	push	{r7, lr}
 80239bc:	b082      	sub	sp, #8
 80239be:	af00      	add	r7, sp, #0
 80239c0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	3310      	adds	r3, #16
 80239c6:	4618      	mov	r0, r3
 80239c8:	f000 fa83 	bl	8023ed2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 80239cc:	4603      	mov	r3, r0
 80239ce:	4618      	mov	r0, r3
 80239d0:	3708      	adds	r7, #8
 80239d2:	46bd      	mov	sp, r7
 80239d4:	bd80      	pop	{r7, pc}

080239d6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80239d6:	b580      	push	{r7, lr}
 80239d8:	b082      	sub	sp, #8
 80239da:	af00      	add	r7, sp, #0
 80239dc:	6078      	str	r0, [r7, #4]
 80239de:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80239e0:	6838      	ldr	r0, [r7, #0]
 80239e2:	f000 fa82 	bl	8023eea <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 80239e6:	bf00      	nop
 80239e8:	3708      	adds	r7, #8
 80239ea:	46bd      	mov	sp, r7
 80239ec:	bd80      	pop	{r7, pc}

080239ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80239ee:	b580      	push	{r7, lr}
 80239f0:	b088      	sub	sp, #32
 80239f2:	af00      	add	r7, sp, #0
 80239f4:	60f8      	str	r0, [r7, #12]
 80239f6:	60b9      	str	r1, [r7, #8]
 80239f8:	607a      	str	r2, [r7, #4]
 80239fa:	68fb      	ldr	r3, [r7, #12]
 80239fc:	61fb      	str	r3, [r7, #28]
 80239fe:	68bb      	ldr	r3, [r7, #8]
 8023a00:	61bb      	str	r3, [r7, #24]
 8023a02:	687b      	ldr	r3, [r7, #4]
 8023a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8023a06:	f7dd fd1f 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8023a0a:	4603      	mov	r3, r0
 8023a0c:	2b00      	cmp	r3, #0
 8023a0e:	d003      	beq.n	8023a18 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8023a10:	69b8      	ldr	r0, [r7, #24]
 8023a12:	f002 fb45 	bl	80260a0 <_ZdlPv>
	    return;
 8023a16:	e005      	b.n	8023a24 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8023a18:	697a      	ldr	r2, [r7, #20]
 8023a1a:	69b9      	ldr	r1, [r7, #24]
 8023a1c:	69f8      	ldr	r0, [r7, #28]
 8023a1e:	f000 fc23 	bl	8024268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8023a22:	bf00      	nop
 8023a24:	bf00      	nop
 8023a26:	3720      	adds	r7, #32
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	bd80      	pop	{r7, pc}

08023a2c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>:
 8023a2c:	b480      	push	{r7}
 8023a2e:	b083      	sub	sp, #12
 8023a30:	af00      	add	r7, sp, #0
 8023a32:	6078      	str	r0, [r7, #4]
 8023a34:	6039      	str	r1, [r7, #0]
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	4618      	mov	r0, r3
 8023a3a:	370c      	adds	r7, #12
 8023a3c:	46bd      	mov	sp, r7
 8023a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a42:	4770      	bx	lr

08023a44 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 8023a44:	b590      	push	{r4, r7, lr}
 8023a46:	b083      	sub	sp, #12
 8023a48:	af00      	add	r7, sp, #0
 8023a4a:	6078      	str	r0, [r7, #4]
 8023a4c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8023a4e:	687b      	ldr	r3, [r7, #4]
 8023a50:	681c      	ldr	r4, [r3, #0]
 8023a52:	6838      	ldr	r0, [r7, #0]
 8023a54:	f7ff f97b 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8023a58:	4603      	mov	r3, r0
 8023a5a:	4619      	mov	r1, r3
 8023a5c:	4620      	mov	r0, r4
 8023a5e:	f000 fa4e 	bl	8023efe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8023a62:	4603      	mov	r3, r0
 8023a64:	4618      	mov	r0, r3
 8023a66:	370c      	adds	r7, #12
 8023a68:	46bd      	mov	sp, r7
 8023a6a:	bd90      	pop	{r4, r7, pc}

08023a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>:
 8023a6c:	b480      	push	{r7}
 8023a6e:	b083      	sub	sp, #12
 8023a70:	af00      	add	r7, sp, #0
 8023a72:	6078      	str	r0, [r7, #4]
 8023a74:	6039      	str	r1, [r7, #0]
 8023a76:	687b      	ldr	r3, [r7, #4]
 8023a78:	4618      	mov	r0, r3
 8023a7a:	370c      	adds	r7, #12
 8023a7c:	46bd      	mov	sp, r7
 8023a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a82:	4770      	bx	lr

08023a84 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 8023a84:	b590      	push	{r4, r7, lr}
 8023a86:	b083      	sub	sp, #12
 8023a88:	af00      	add	r7, sp, #0
 8023a8a:	6078      	str	r0, [r7, #4]
 8023a8c:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8023a8e:	687b      	ldr	r3, [r7, #4]
 8023a90:	681c      	ldr	r4, [r3, #0]
 8023a92:	6838      	ldr	r0, [r7, #0]
 8023a94:	f7ff f9df 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8023a98:	4603      	mov	r3, r0
 8023a9a:	4619      	mov	r1, r3
 8023a9c:	4620      	mov	r0, r4
 8023a9e:	f000 fa45 	bl	8023f2c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8023aa2:	4603      	mov	r3, r0
 8023aa4:	4618      	mov	r0, r3
 8023aa6:	370c      	adds	r7, #12
 8023aa8:	46bd      	mov	sp, r7
 8023aaa:	bd90      	pop	{r4, r7, pc}

08023aac <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8023aac:	b580      	push	{r7, lr}
 8023aae:	b084      	sub	sp, #16
 8023ab0:	af00      	add	r7, sp, #0
 8023ab2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8023ab4:	6878      	ldr	r0, [r7, #4]
 8023ab6:	f000 fa50 	bl	8023f5a <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8023aba:	4602      	mov	r2, r0
 8023abc:	f107 030c 	add.w	r3, r7, #12
 8023ac0:	4611      	mov	r1, r2
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	f7fe fb00 	bl	80220c8 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8023ac8:	4603      	mov	r3, r0
      }
 8023aca:	4618      	mov	r0, r3
 8023acc:	3710      	adds	r7, #16
 8023ace:	46bd      	mov	sp, r7
 8023ad0:	bd80      	pop	{r7, pc}
	...

08023ad4 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8023ad4:	b580      	push	{r7, lr}
 8023ad6:	b084      	sub	sp, #16
 8023ad8:	af00      	add	r7, sp, #0
 8023ada:	6078      	str	r0, [r7, #4]
 8023adc:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	683a      	ldr	r2, [r7, #0]
 8023ae2:	4619      	mov	r1, r3
 8023ae4:	4812      	ldr	r0, [pc, #72]	; (8023b30 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8023ae6:	f7ff fa57 	bl	8022f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8023aea:	4603      	mov	r3, r0
 8023aec:	723b      	strb	r3, [r7, #8]
 8023aee:	f107 030c 	add.w	r3, r7, #12
 8023af2:	2100      	movs	r1, #0
 8023af4:	4618      	mov	r0, r3
 8023af6:	f7fc fc56 	bl	80203a6 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8023afa:	7b39      	ldrb	r1, [r7, #12]
 8023afc:	7a38      	ldrb	r0, [r7, #8]
 8023afe:	f7fc fc5e 	bl	80203be <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8023b02:	4603      	mov	r3, r0
 8023b04:	f083 0301 	eor.w	r3, r3, #1
 8023b08:	b2db      	uxtb	r3, r3
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d001      	beq.n	8023b12 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 8023b0e:	7a3b      	ldrb	r3, [r7, #8]
 8023b10:	e00a      	b.n	8023b28 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 8023b12:	687b      	ldr	r3, [r7, #4]
 8023b14:	f103 0108 	add.w	r1, r3, #8
 8023b18:	683b      	ldr	r3, [r7, #0]
 8023b1a:	3308      	adds	r3, #8
 8023b1c:	461a      	mov	r2, r3
 8023b1e:	4804      	ldr	r0, [pc, #16]	; (8023b30 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8023b20:	f7ff fa3a 	bl	8022f98 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8023b24:	4603      	mov	r3, r0
 8023b26:	bf00      	nop
    }
 8023b28:	4618      	mov	r0, r3
 8023b2a:	3710      	adds	r7, #16
 8023b2c:	46bd      	mov	sp, r7
 8023b2e:	bd80      	pop	{r7, pc}
 8023b30:	08026cc8 	.word	0x08026cc8

08023b34 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023b34:	b580      	push	{r7, lr}
 8023b36:	b084      	sub	sp, #16
 8023b38:	af00      	add	r7, sp, #0
 8023b3a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	68da      	ldr	r2, [r3, #12]
 8023b40:	f107 030c 	add.w	r3, r7, #12
 8023b44:	4611      	mov	r1, r2
 8023b46:	4618      	mov	r0, r3
 8023b48:	f7fe f98c 	bl	8021e64 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8023b4c:	68fb      	ldr	r3, [r7, #12]
 8023b4e:	4618      	mov	r0, r3
 8023b50:	3710      	adds	r7, #16
 8023b52:	46bd      	mov	sp, r7
 8023b54:	bd80      	pop	{r7, pc}

08023b56 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023b56:	b480      	push	{r7}
 8023b58:	b083      	sub	sp, #12
 8023b5a:	af00      	add	r7, sp, #0
 8023b5c:	6078      	str	r0, [r7, #4]
 8023b5e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	681a      	ldr	r2, [r3, #0]
 8023b64:	683b      	ldr	r3, [r7, #0]
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	429a      	cmp	r2, r3
 8023b6a:	bf0c      	ite	eq
 8023b6c:	2301      	moveq	r3, #1
 8023b6e:	2300      	movne	r3, #0
 8023b70:	b2db      	uxtb	r3, r3
 8023b72:	4618      	mov	r0, r3
 8023b74:	370c      	adds	r7, #12
 8023b76:	46bd      	mov	sp, r7
 8023b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b7c:	4770      	bx	lr

08023b7e <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8023b7e:	b580      	push	{r7, lr}
 8023b80:	b084      	sub	sp, #16
 8023b82:	af00      	add	r7, sp, #0
 8023b84:	60f8      	str	r0, [r7, #12]
 8023b86:	60b9      	str	r1, [r7, #8]
 8023b88:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8023b8a:	68b8      	ldr	r0, [r7, #8]
 8023b8c:	f000 f9f3 	bl	8023f76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>
 8023b90:	4603      	mov	r3, r0
 8023b92:	681a      	ldr	r2, [r3, #0]
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	601a      	str	r2, [r3, #0]
 8023b98:	6878      	ldr	r0, [r7, #4]
 8023b9a:	f7f1 fd45 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8023b9e:	4603      	mov	r3, r0
 8023ba0:	681a      	ldr	r2, [r3, #0]
 8023ba2:	68fb      	ldr	r3, [r7, #12]
 8023ba4:	605a      	str	r2, [r3, #4]
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	4618      	mov	r0, r3
 8023baa:	3710      	adds	r7, #16
 8023bac:	46bd      	mov	sp, r7
 8023bae:	bd80      	pop	{r7, pc}

08023bb0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023bb0:	b580      	push	{r7, lr}
 8023bb2:	b084      	sub	sp, #16
 8023bb4:	af00      	add	r7, sp, #0
 8023bb6:	6078      	str	r0, [r7, #4]
 8023bb8:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023bba:	6878      	ldr	r0, [r7, #4]
 8023bbc:	f000 f9e6 	bl	8023f8c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 8023bc0:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023bc2:	6838      	ldr	r0, [r7, #0]
 8023bc4:	f7fe fa8c 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8023bc8:	4603      	mov	r3, r0
 8023bca:	461a      	mov	r2, r3
 8023bcc:	68f9      	ldr	r1, [r7, #12]
 8023bce:	6878      	ldr	r0, [r7, #4]
 8023bd0:	f000 f9ed 	bl	8023fae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8023bd4:	68fb      	ldr	r3, [r7, #12]
	}
 8023bd6:	4618      	mov	r0, r3
 8023bd8:	3710      	adds	r7, #16
 8023bda:	46bd      	mov	sp, r7
 8023bdc:	bd80      	pop	{r7, pc}

08023bde <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() noexcept
 8023bde:	b580      	push	{r7, lr}
 8023be0:	b082      	sub	sp, #8
 8023be2:	af00      	add	r7, sp, #0
 8023be4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8023be6:	6878      	ldr	r0, [r7, #4]
 8023be8:	f000 fa01 	bl	8023fee <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 8023bec:	4603      	mov	r3, r0
 8023bee:	4618      	mov	r0, r3
 8023bf0:	3708      	adds	r7, #8
 8023bf2:	46bd      	mov	sp, r7
 8023bf4:	bd80      	pop	{r7, pc}

08023bf6 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>:
    destroy_at(_Tp* __location)
 8023bf6:	b480      	push	{r7}
 8023bf8:	b083      	sub	sp, #12
 8023bfa:	af00      	add	r7, sp, #0
 8023bfc:	6078      	str	r0, [r7, #4]
    }
 8023bfe:	bf00      	nop
 8023c00:	370c      	adds	r7, #12
 8023c02:	46bd      	mov	sp, r7
 8023c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c08:	4770      	bx	lr

08023c0a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8023c0a:	b580      	push	{r7, lr}
 8023c0c:	b084      	sub	sp, #16
 8023c0e:	af00      	add	r7, sp, #0
 8023c10:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8023c12:	6878      	ldr	r0, [r7, #4]
 8023c14:	f000 fa08 	bl	8024028 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8023c18:	4602      	mov	r2, r0
 8023c1a:	f107 030c 	add.w	r3, r7, #12
 8023c1e:	4611      	mov	r1, r2
 8023c20:	4618      	mov	r0, r3
 8023c22:	f7fe fc2f 	bl	8022484 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8023c26:	4603      	mov	r3, r0
      }
 8023c28:	4618      	mov	r0, r3
 8023c2a:	3710      	adds	r7, #16
 8023c2c:	46bd      	mov	sp, r7
 8023c2e:	bd80      	pop	{r7, pc}

08023c30 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023c30:	b580      	push	{r7, lr}
 8023c32:	b084      	sub	sp, #16
 8023c34:	af00      	add	r7, sp, #0
 8023c36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8023c38:	687b      	ldr	r3, [r7, #4]
 8023c3a:	68da      	ldr	r2, [r3, #12]
 8023c3c:	f107 030c 	add.w	r3, r7, #12
 8023c40:	4611      	mov	r1, r2
 8023c42:	4618      	mov	r0, r3
 8023c44:	f7fe faec 	bl	8022220 <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8023c48:	68fb      	ldr	r3, [r7, #12]
 8023c4a:	4618      	mov	r0, r3
 8023c4c:	3710      	adds	r7, #16
 8023c4e:	46bd      	mov	sp, r7
 8023c50:	bd80      	pop	{r7, pc}

08023c52 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023c52:	b480      	push	{r7}
 8023c54:	b083      	sub	sp, #12
 8023c56:	af00      	add	r7, sp, #0
 8023c58:	6078      	str	r0, [r7, #4]
 8023c5a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	681a      	ldr	r2, [r3, #0]
 8023c60:	683b      	ldr	r3, [r7, #0]
 8023c62:	681b      	ldr	r3, [r3, #0]
 8023c64:	429a      	cmp	r2, r3
 8023c66:	bf0c      	ite	eq
 8023c68:	2301      	moveq	r3, #1
 8023c6a:	2300      	movne	r3, #0
 8023c6c:	b2db      	uxtb	r3, r3
 8023c6e:	4618      	mov	r0, r3
 8023c70:	370c      	adds	r7, #12
 8023c72:	46bd      	mov	sp, r7
 8023c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c78:	4770      	bx	lr

08023c7a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8023c7a:	b580      	push	{r7, lr}
 8023c7c:	b084      	sub	sp, #16
 8023c7e:	af00      	add	r7, sp, #0
 8023c80:	60f8      	str	r0, [r7, #12]
 8023c82:	60b9      	str	r1, [r7, #8]
 8023c84:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8023c86:	68b8      	ldr	r0, [r7, #8]
 8023c88:	f000 f9dc 	bl	8024044 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8023c8c:	4603      	mov	r3, r0
 8023c8e:	681a      	ldr	r2, [r3, #0]
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	601a      	str	r2, [r3, #0]
 8023c94:	6878      	ldr	r0, [r7, #4]
 8023c96:	f7f1 fcc7 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8023c9a:	4603      	mov	r3, r0
 8023c9c:	681a      	ldr	r2, [r3, #0]
 8023c9e:	68fb      	ldr	r3, [r7, #12]
 8023ca0:	605a      	str	r2, [r3, #4]
 8023ca2:	68fb      	ldr	r3, [r7, #12]
 8023ca4:	4618      	mov	r0, r3
 8023ca6:	3710      	adds	r7, #16
 8023ca8:	46bd      	mov	sp, r7
 8023caa:	bd80      	pop	{r7, pc}

08023cac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023cac:	b580      	push	{r7, lr}
 8023cae:	b084      	sub	sp, #16
 8023cb0:	af00      	add	r7, sp, #0
 8023cb2:	6078      	str	r0, [r7, #4]
 8023cb4:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023cb6:	6878      	ldr	r0, [r7, #4]
 8023cb8:	f000 f9cf 	bl	802405a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>
 8023cbc:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023cbe:	6838      	ldr	r0, [r7, #0]
 8023cc0:	f7fe fbec 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8023cc4:	4603      	mov	r3, r0
 8023cc6:	461a      	mov	r2, r3
 8023cc8:	68f9      	ldr	r1, [r7, #12]
 8023cca:	6878      	ldr	r0, [r7, #4]
 8023ccc:	f000 f9d6 	bl	802407c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8023cd0:	68fb      	ldr	r3, [r7, #12]
	}
 8023cd2:	4618      	mov	r0, r3
 8023cd4:	3710      	adds	r7, #16
 8023cd6:	46bd      	mov	sp, r7
 8023cd8:	bd80      	pop	{r7, pc}

08023cda <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 8023cda:	b580      	push	{r7, lr}
 8023cdc:	b082      	sub	sp, #8
 8023cde:	af00      	add	r7, sp, #0
 8023ce0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8023ce2:	6878      	ldr	r0, [r7, #4]
 8023ce4:	f000 f9ea 	bl	80240bc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 8023ce8:	4603      	mov	r3, r0
 8023cea:	4618      	mov	r0, r3
 8023cec:	3708      	adds	r7, #8
 8023cee:	46bd      	mov	sp, r7
 8023cf0:	bd80      	pop	{r7, pc}

08023cf2 <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 8023cf2:	b480      	push	{r7}
 8023cf4:	b083      	sub	sp, #12
 8023cf6:	af00      	add	r7, sp, #0
 8023cf8:	6078      	str	r0, [r7, #4]
    }
 8023cfa:	bf00      	nop
 8023cfc:	370c      	adds	r7, #12
 8023cfe:	46bd      	mov	sp, r7
 8023d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d04:	4770      	bx	lr

08023d06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8023d06:	b580      	push	{r7, lr}
 8023d08:	b084      	sub	sp, #16
 8023d0a:	af00      	add	r7, sp, #0
 8023d0c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8023d0e:	6878      	ldr	r0, [r7, #4]
 8023d10:	f000 f9ee 	bl	80240f0 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8023d14:	4602      	mov	r2, r0
 8023d16:	f107 030c 	add.w	r3, r7, #12
 8023d1a:	4611      	mov	r1, r2
 8023d1c:	4618      	mov	r0, r3
 8023d1e:	f7fe fd8e 	bl	802283e <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8023d22:	4603      	mov	r3, r0
      }
 8023d24:	4618      	mov	r0, r3
 8023d26:	3710      	adds	r7, #16
 8023d28:	46bd      	mov	sp, r7
 8023d2a:	bd80      	pop	{r7, pc}

08023d2c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023d2c:	b580      	push	{r7, lr}
 8023d2e:	b084      	sub	sp, #16
 8023d30:	af00      	add	r7, sp, #0
 8023d32:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	68da      	ldr	r2, [r3, #12]
 8023d38:	f107 030c 	add.w	r3, r7, #12
 8023d3c:	4611      	mov	r1, r2
 8023d3e:	4618      	mov	r0, r3
 8023d40:	f7fe fc4b 	bl	80225da <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8023d44:	68fb      	ldr	r3, [r7, #12]
 8023d46:	4618      	mov	r0, r3
 8023d48:	3710      	adds	r7, #16
 8023d4a:	46bd      	mov	sp, r7
 8023d4c:	bd80      	pop	{r7, pc}

08023d4e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023d4e:	b480      	push	{r7}
 8023d50:	b083      	sub	sp, #12
 8023d52:	af00      	add	r7, sp, #0
 8023d54:	6078      	str	r0, [r7, #4]
 8023d56:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	681a      	ldr	r2, [r3, #0]
 8023d5c:	683b      	ldr	r3, [r7, #0]
 8023d5e:	681b      	ldr	r3, [r3, #0]
 8023d60:	429a      	cmp	r2, r3
 8023d62:	bf0c      	ite	eq
 8023d64:	2301      	moveq	r3, #1
 8023d66:	2300      	movne	r3, #0
 8023d68:	b2db      	uxtb	r3, r3
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	370c      	adds	r7, #12
 8023d6e:	46bd      	mov	sp, r7
 8023d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d74:	4770      	bx	lr

08023d76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8023d76:	b580      	push	{r7, lr}
 8023d78:	b084      	sub	sp, #16
 8023d7a:	af00      	add	r7, sp, #0
 8023d7c:	60f8      	str	r0, [r7, #12]
 8023d7e:	60b9      	str	r1, [r7, #8]
 8023d80:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8023d82:	68b8      	ldr	r0, [r7, #8]
 8023d84:	f000 f9c2 	bl	802410c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>
 8023d88:	4603      	mov	r3, r0
 8023d8a:	681a      	ldr	r2, [r3, #0]
 8023d8c:	68fb      	ldr	r3, [r7, #12]
 8023d8e:	601a      	str	r2, [r3, #0]
 8023d90:	6878      	ldr	r0, [r7, #4]
 8023d92:	f7f1 fc49 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8023d96:	4603      	mov	r3, r0
 8023d98:	681a      	ldr	r2, [r3, #0]
 8023d9a:	68fb      	ldr	r3, [r7, #12]
 8023d9c:	605a      	str	r2, [r3, #4]
 8023d9e:	68fb      	ldr	r3, [r7, #12]
 8023da0:	4618      	mov	r0, r3
 8023da2:	3710      	adds	r7, #16
 8023da4:	46bd      	mov	sp, r7
 8023da6:	bd80      	pop	{r7, pc}

08023da8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023da8:	b580      	push	{r7, lr}
 8023daa:	b084      	sub	sp, #16
 8023dac:	af00      	add	r7, sp, #0
 8023dae:	6078      	str	r0, [r7, #4]
 8023db0:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023db2:	6878      	ldr	r0, [r7, #4]
 8023db4:	f000 f9b5 	bl	8024122 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>
 8023db8:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023dba:	6838      	ldr	r0, [r7, #0]
 8023dbc:	f7fe fd4b 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8023dc0:	4603      	mov	r3, r0
 8023dc2:	461a      	mov	r2, r3
 8023dc4:	68f9      	ldr	r1, [r7, #12]
 8023dc6:	6878      	ldr	r0, [r7, #4]
 8023dc8:	f000 f9bc 	bl	8024144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8023dcc:	68fb      	ldr	r3, [r7, #12]
	}
 8023dce:	4618      	mov	r0, r3
 8023dd0:	3710      	adds	r7, #16
 8023dd2:	46bd      	mov	sp, r7
 8023dd4:	bd80      	pop	{r7, pc}

08023dd6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 8023dd6:	b580      	push	{r7, lr}
 8023dd8:	b082      	sub	sp, #8
 8023dda:	af00      	add	r7, sp, #0
 8023ddc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8023dde:	6878      	ldr	r0, [r7, #4]
 8023de0:	f000 f9d0 	bl	8024184 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 8023de4:	4603      	mov	r3, r0
 8023de6:	4618      	mov	r0, r3
 8023de8:	3708      	adds	r7, #8
 8023dea:	46bd      	mov	sp, r7
 8023dec:	bd80      	pop	{r7, pc}

08023dee <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 8023dee:	b480      	push	{r7}
 8023df0:	b083      	sub	sp, #12
 8023df2:	af00      	add	r7, sp, #0
 8023df4:	6078      	str	r0, [r7, #4]
    }
 8023df6:	bf00      	nop
 8023df8:	370c      	adds	r7, #12
 8023dfa:	46bd      	mov	sp, r7
 8023dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e00:	4770      	bx	lr

08023e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8023e02:	b580      	push	{r7, lr}
 8023e04:	b084      	sub	sp, #16
 8023e06:	af00      	add	r7, sp, #0
 8023e08:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8023e0a:	6878      	ldr	r0, [r7, #4]
 8023e0c:	f000 f9d7 	bl	80241be <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8023e10:	4602      	mov	r2, r0
 8023e12:	f107 030c 	add.w	r3, r7, #12
 8023e16:	4611      	mov	r1, r2
 8023e18:	4618      	mov	r0, r3
 8023e1a:	f7fe feed 	bl	8022bf8 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8023e1e:	4603      	mov	r3, r0
      }
 8023e20:	4618      	mov	r0, r3
 8023e22:	3710      	adds	r7, #16
 8023e24:	46bd      	mov	sp, r7
 8023e26:	bd80      	pop	{r7, pc}

08023e28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8023e28:	b580      	push	{r7, lr}
 8023e2a:	b084      	sub	sp, #16
 8023e2c:	af00      	add	r7, sp, #0
 8023e2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	68da      	ldr	r2, [r3, #12]
 8023e34:	f107 030c 	add.w	r3, r7, #12
 8023e38:	4611      	mov	r1, r2
 8023e3a:	4618      	mov	r0, r3
 8023e3c:	f7fe fdaa 	bl	8022994 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8023e40:	68fb      	ldr	r3, [r7, #12]
 8023e42:	4618      	mov	r0, r3
 8023e44:	3710      	adds	r7, #16
 8023e46:	46bd      	mov	sp, r7
 8023e48:	bd80      	pop	{r7, pc}

08023e4a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8023e4a:	b480      	push	{r7}
 8023e4c:	b083      	sub	sp, #12
 8023e4e:	af00      	add	r7, sp, #0
 8023e50:	6078      	str	r0, [r7, #4]
 8023e52:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8023e54:	687b      	ldr	r3, [r7, #4]
 8023e56:	681a      	ldr	r2, [r3, #0]
 8023e58:	683b      	ldr	r3, [r7, #0]
 8023e5a:	681b      	ldr	r3, [r3, #0]
 8023e5c:	429a      	cmp	r2, r3
 8023e5e:	bf0c      	ite	eq
 8023e60:	2301      	moveq	r3, #1
 8023e62:	2300      	movne	r3, #0
 8023e64:	b2db      	uxtb	r3, r3
 8023e66:	4618      	mov	r0, r3
 8023e68:	370c      	adds	r7, #12
 8023e6a:	46bd      	mov	sp, r7
 8023e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e70:	4770      	bx	lr

08023e72 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8023e72:	b580      	push	{r7, lr}
 8023e74:	b084      	sub	sp, #16
 8023e76:	af00      	add	r7, sp, #0
 8023e78:	60f8      	str	r0, [r7, #12]
 8023e7a:	60b9      	str	r1, [r7, #8]
 8023e7c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8023e7e:	68b8      	ldr	r0, [r7, #8]
 8023e80:	f000 f9ab 	bl	80241da <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8023e84:	4603      	mov	r3, r0
 8023e86:	681a      	ldr	r2, [r3, #0]
 8023e88:	68fb      	ldr	r3, [r7, #12]
 8023e8a:	601a      	str	r2, [r3, #0]
 8023e8c:	6878      	ldr	r0, [r7, #4]
 8023e8e:	f7f1 fbcb 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8023e92:	4603      	mov	r3, r0
 8023e94:	681a      	ldr	r2, [r3, #0]
 8023e96:	68fb      	ldr	r3, [r7, #12]
 8023e98:	605a      	str	r2, [r3, #4]
 8023e9a:	68fb      	ldr	r3, [r7, #12]
 8023e9c:	4618      	mov	r0, r3
 8023e9e:	3710      	adds	r7, #16
 8023ea0:	46bd      	mov	sp, r7
 8023ea2:	bd80      	pop	{r7, pc}

08023ea4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023ea4:	b580      	push	{r7, lr}
 8023ea6:	b084      	sub	sp, #16
 8023ea8:	af00      	add	r7, sp, #0
 8023eaa:	6078      	str	r0, [r7, #4]
 8023eac:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023eae:	6878      	ldr	r0, [r7, #4]
 8023eb0:	f000 f99e 	bl	80241f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8023eb4:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023eb6:	6838      	ldr	r0, [r7, #0]
 8023eb8:	f7fe feaa 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8023ebc:	4603      	mov	r3, r0
 8023ebe:	461a      	mov	r2, r3
 8023ec0:	68f9      	ldr	r1, [r7, #12]
 8023ec2:	6878      	ldr	r0, [r7, #4]
 8023ec4:	f000 f9a5 	bl	8024212 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8023ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8023eca:	4618      	mov	r0, r3
 8023ecc:	3710      	adds	r7, #16
 8023ece:	46bd      	mov	sp, r7
 8023ed0:	bd80      	pop	{r7, pc}

08023ed2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8023ed2:	b580      	push	{r7, lr}
 8023ed4:	b082      	sub	sp, #8
 8023ed6:	af00      	add	r7, sp, #0
 8023ed8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8023eda:	6878      	ldr	r0, [r7, #4]
 8023edc:	f000 f9b9 	bl	8024252 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8023ee0:	4603      	mov	r3, r0
 8023ee2:	4618      	mov	r0, r3
 8023ee4:	3708      	adds	r7, #8
 8023ee6:	46bd      	mov	sp, r7
 8023ee8:	bd80      	pop	{r7, pc}

08023eea <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8023eea:	b480      	push	{r7}
 8023eec:	b083      	sub	sp, #12
 8023eee:	af00      	add	r7, sp, #0
 8023ef0:	6078      	str	r0, [r7, #4]
    }
 8023ef2:	bf00      	nop
 8023ef4:	370c      	adds	r7, #12
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023efc:	4770      	bx	lr

08023efe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023efe:	b580      	push	{r7, lr}
 8023f00:	b084      	sub	sp, #16
 8023f02:	af00      	add	r7, sp, #0
 8023f04:	6078      	str	r0, [r7, #4]
 8023f06:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023f08:	6878      	ldr	r0, [r7, #4]
 8023f0a:	f7f1 f855 	bl	8014fb8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8023f0e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023f10:	6838      	ldr	r0, [r7, #0]
 8023f12:	f7fe ff1c 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8023f16:	4603      	mov	r3, r0
 8023f18:	461a      	mov	r2, r3
 8023f1a:	68f9      	ldr	r1, [r7, #12]
 8023f1c:	6878      	ldr	r0, [r7, #4]
 8023f1e:	f000 f9b5 	bl	802428c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8023f22:	68fb      	ldr	r3, [r7, #12]
	}
 8023f24:	4618      	mov	r0, r3
 8023f26:	3710      	adds	r7, #16
 8023f28:	46bd      	mov	sp, r7
 8023f2a:	bd80      	pop	{r7, pc}

08023f2c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8023f2c:	b580      	push	{r7, lr}
 8023f2e:	b084      	sub	sp, #16
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	6078      	str	r0, [r7, #4]
 8023f34:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8023f36:	6878      	ldr	r0, [r7, #4]
 8023f38:	f7f3 fb7b 	bl	8017632 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8023f3c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8023f3e:	6838      	ldr	r0, [r7, #0]
 8023f40:	f7fe ff89 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8023f44:	4603      	mov	r3, r0
 8023f46:	461a      	mov	r2, r3
 8023f48:	68f9      	ldr	r1, [r7, #12]
 8023f4a:	6878      	ldr	r0, [r7, #4]
 8023f4c:	f000 f9be 	bl	80242cc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8023f50:	68fb      	ldr	r3, [r7, #12]
	}
 8023f52:	4618      	mov	r0, r3
 8023f54:	3710      	adds	r7, #16
 8023f56:	46bd      	mov	sp, r7
 8023f58:	bd80      	pop	{r7, pc}

08023f5a <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr() const
 8023f5a:	b580      	push	{r7, lr}
 8023f5c:	b082      	sub	sp, #8
 8023f5e:	af00      	add	r7, sp, #0
 8023f60:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	3310      	adds	r3, #16
 8023f66:	4618      	mov	r0, r3
 8023f68:	f000 f9d0 	bl	802430c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 8023f6c:	4603      	mov	r3, r0
 8023f6e:	4618      	mov	r0, r3
 8023f70:	3708      	adds	r7, #8
 8023f72:	46bd      	mov	sp, r7
 8023f74:	bd80      	pop	{r7, pc}

08023f76 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8023f76:	b480      	push	{r7}
 8023f78:	b083      	sub	sp, #12
 8023f7a:	af00      	add	r7, sp, #0
 8023f7c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8023f7e:	687b      	ldr	r3, [r7, #4]
 8023f80:	4618      	mov	r0, r3
 8023f82:	370c      	adds	r7, #12
 8023f84:	46bd      	mov	sp, r7
 8023f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f8a:	4770      	bx	lr

08023f8c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8023f8c:	b580      	push	{r7, lr}
 8023f8e:	b082      	sub	sp, #8
 8023f90:	af00      	add	r7, sp, #0
 8023f92:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8023f94:	6878      	ldr	r0, [r7, #4]
 8023f96:	f7ff f8fd 	bl	8023194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8023f9a:	4603      	mov	r3, r0
 8023f9c:	2101      	movs	r1, #1
 8023f9e:	4618      	mov	r0, r3
 8023fa0:	f000 f9c0 	bl	8024324 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>
 8023fa4:	4603      	mov	r3, r0
 8023fa6:	4618      	mov	r0, r3
 8023fa8:	3708      	adds	r7, #8
 8023faa:	46bd      	mov	sp, r7
 8023fac:	bd80      	pop	{r7, pc}

08023fae <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8023fae:	b5b0      	push	{r4, r5, r7, lr}
 8023fb0:	b084      	sub	sp, #16
 8023fb2:	af00      	add	r7, sp, #0
 8023fb4:	60f8      	str	r0, [r7, #12]
 8023fb6:	60b9      	str	r1, [r7, #8]
 8023fb8:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8023fba:	68bb      	ldr	r3, [r7, #8]
 8023fbc:	4619      	mov	r1, r3
 8023fbe:	2024      	movs	r0, #36	; 0x24
 8023fc0:	f7dd fa4a 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8023fc4:	68f8      	ldr	r0, [r7, #12]
 8023fc6:	f7ff f8e5 	bl	8023194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8023fca:	4604      	mov	r4, r0
 8023fcc:	68b8      	ldr	r0, [r7, #8]
 8023fce:	f7ff f8ec 	bl	80231aa <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8023fd2:	4605      	mov	r5, r0
 8023fd4:	6878      	ldr	r0, [r7, #4]
 8023fd6:	f7fe f883 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8023fda:	4603      	mov	r3, r0
 8023fdc:	461a      	mov	r2, r3
 8023fde:	4629      	mov	r1, r5
 8023fe0:	4620      	mov	r0, r4
 8023fe2:	f000 f9db 	bl	802439c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 8023fe6:	bf00      	nop
 8023fe8:	3710      	adds	r7, #16
 8023fea:	46bd      	mov	sp, r7
 8023fec:	bdb0      	pop	{r4, r5, r7, pc}

08023fee <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() noexcept
 8023fee:	b480      	push	{r7}
 8023ff0:	b083      	sub	sp, #12
 8023ff2:	af00      	add	r7, sp, #0
 8023ff4:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8023ff6:	687b      	ldr	r3, [r7, #4]
 8023ff8:	4618      	mov	r0, r3
 8023ffa:	370c      	adds	r7, #12
 8023ffc:	46bd      	mov	sp, r7
 8023ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024002:	4770      	bx	lr

08024004 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8024004:	b580      	push	{r7, lr}
 8024006:	b084      	sub	sp, #16
 8024008:	af00      	add	r7, sp, #0
 802400a:	60f8      	str	r0, [r7, #12]
 802400c:	60b9      	str	r1, [r7, #8]
 802400e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8024010:	687a      	ldr	r2, [r7, #4]
 8024012:	4613      	mov	r3, r2
 8024014:	00db      	lsls	r3, r3, #3
 8024016:	4413      	add	r3, r2
 8024018:	009b      	lsls	r3, r3, #2
 802401a:	4619      	mov	r1, r3
 802401c:	68b8      	ldr	r0, [r7, #8]
 802401e:	f002 f841 	bl	80260a4 <_ZdlPvj>
      }
 8024022:	3710      	adds	r7, #16
 8024024:	46bd      	mov	sp, r7
 8024026:	bd80      	pop	{r7, pc}

08024028 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 8024028:	b580      	push	{r7, lr}
 802402a:	b082      	sub	sp, #8
 802402c:	af00      	add	r7, sp, #0
 802402e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8024030:	687b      	ldr	r3, [r7, #4]
 8024032:	3310      	adds	r3, #16
 8024034:	4618      	mov	r0, r3
 8024036:	f000 f9c3 	bl	80243c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 802403a:	4603      	mov	r3, r0
 802403c:	4618      	mov	r0, r3
 802403e:	3708      	adds	r7, #8
 8024040:	46bd      	mov	sp, r7
 8024042:	bd80      	pop	{r7, pc}

08024044 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8024044:	b480      	push	{r7}
 8024046:	b083      	sub	sp, #12
 8024048:	af00      	add	r7, sp, #0
 802404a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	4618      	mov	r0, r3
 8024050:	370c      	adds	r7, #12
 8024052:	46bd      	mov	sp, r7
 8024054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024058:	4770      	bx	lr

0802405a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 802405a:	b580      	push	{r7, lr}
 802405c:	b082      	sub	sp, #8
 802405e:	af00      	add	r7, sp, #0
 8024060:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8024062:	6878      	ldr	r0, [r7, #4]
 8024064:	f7ff f9ee 	bl	8023444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8024068:	4603      	mov	r3, r0
 802406a:	2101      	movs	r1, #1
 802406c:	4618      	mov	r0, r3
 802406e:	f000 f9b3 	bl	80243d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>
 8024072:	4603      	mov	r3, r0
 8024074:	4618      	mov	r0, r3
 8024076:	3708      	adds	r7, #8
 8024078:	46bd      	mov	sp, r7
 802407a:	bd80      	pop	{r7, pc}

0802407c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 802407c:	b5b0      	push	{r4, r5, r7, lr}
 802407e:	b084      	sub	sp, #16
 8024080:	af00      	add	r7, sp, #0
 8024082:	60f8      	str	r0, [r7, #12]
 8024084:	60b9      	str	r1, [r7, #8]
 8024086:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8024088:	68bb      	ldr	r3, [r7, #8]
 802408a:	4619      	mov	r1, r3
 802408c:	2020      	movs	r0, #32
 802408e:	f7dd f9e3 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8024092:	68f8      	ldr	r0, [r7, #12]
 8024094:	f7ff f9d6 	bl	8023444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8024098:	4604      	mov	r4, r0
 802409a:	68b8      	ldr	r0, [r7, #8]
 802409c:	f7ff f9dd 	bl	802345a <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 80240a0:	4605      	mov	r5, r0
 80240a2:	6878      	ldr	r0, [r7, #4]
 80240a4:	f7fe f9fa 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80240a8:	4603      	mov	r3, r0
 80240aa:	461a      	mov	r2, r3
 80240ac:	4629      	mov	r1, r5
 80240ae:	4620      	mov	r0, r4
 80240b0:	f000 f9cb 	bl	802444a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 80240b4:	bf00      	nop
 80240b6:	3710      	adds	r7, #16
 80240b8:	46bd      	mov	sp, r7
 80240ba:	bdb0      	pop	{r4, r5, r7, pc}

080240bc <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 80240bc:	b480      	push	{r7}
 80240be:	b083      	sub	sp, #12
 80240c0:	af00      	add	r7, sp, #0
 80240c2:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	4618      	mov	r0, r3
 80240c8:	370c      	adds	r7, #12
 80240ca:	46bd      	mov	sp, r7
 80240cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240d0:	4770      	bx	lr

080240d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80240d2:	b580      	push	{r7, lr}
 80240d4:	b084      	sub	sp, #16
 80240d6:	af00      	add	r7, sp, #0
 80240d8:	60f8      	str	r0, [r7, #12]
 80240da:	60b9      	str	r1, [r7, #8]
 80240dc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80240de:	687b      	ldr	r3, [r7, #4]
 80240e0:	015b      	lsls	r3, r3, #5
 80240e2:	4619      	mov	r1, r3
 80240e4:	68b8      	ldr	r0, [r7, #8]
 80240e6:	f001 ffdd 	bl	80260a4 <_ZdlPvj>
      }
 80240ea:	3710      	adds	r7, #16
 80240ec:	46bd      	mov	sp, r7
 80240ee:	bd80      	pop	{r7, pc}

080240f0 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 80240f0:	b580      	push	{r7, lr}
 80240f2:	b082      	sub	sp, #8
 80240f4:	af00      	add	r7, sp, #0
 80240f6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	3310      	adds	r3, #16
 80240fc:	4618      	mov	r0, r3
 80240fe:	f000 f9b6 	bl	802446e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 8024102:	4603      	mov	r3, r0
 8024104:	4618      	mov	r0, r3
 8024106:	3708      	adds	r7, #8
 8024108:	46bd      	mov	sp, r7
 802410a:	bd80      	pop	{r7, pc}

0802410c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802410c:	b480      	push	{r7}
 802410e:	b083      	sub	sp, #12
 8024110:	af00      	add	r7, sp, #0
 8024112:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8024114:	687b      	ldr	r3, [r7, #4]
 8024116:	4618      	mov	r0, r3
 8024118:	370c      	adds	r7, #12
 802411a:	46bd      	mov	sp, r7
 802411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024120:	4770      	bx	lr

08024122 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8024122:	b580      	push	{r7, lr}
 8024124:	b082      	sub	sp, #8
 8024126:	af00      	add	r7, sp, #0
 8024128:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 802412a:	6878      	ldr	r0, [r7, #4]
 802412c:	f7ff fae2 	bl	80236f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8024130:	4603      	mov	r3, r0
 8024132:	2101      	movs	r1, #1
 8024134:	4618      	mov	r0, r3
 8024136:	f000 f9a6 	bl	8024486 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>
 802413a:	4603      	mov	r3, r0
 802413c:	4618      	mov	r0, r3
 802413e:	3708      	adds	r7, #8
 8024140:	46bd      	mov	sp, r7
 8024142:	bd80      	pop	{r7, pc}

08024144 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8024144:	b5b0      	push	{r4, r5, r7, lr}
 8024146:	b084      	sub	sp, #16
 8024148:	af00      	add	r7, sp, #0
 802414a:	60f8      	str	r0, [r7, #12]
 802414c:	60b9      	str	r1, [r7, #8]
 802414e:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8024150:	68bb      	ldr	r3, [r7, #8]
 8024152:	4619      	mov	r1, r3
 8024154:	2028      	movs	r0, #40	; 0x28
 8024156:	f7dd f97f 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 802415a:	68f8      	ldr	r0, [r7, #12]
 802415c:	f7ff faca 	bl	80236f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8024160:	4604      	mov	r4, r0
 8024162:	68b8      	ldr	r0, [r7, #8]
 8024164:	f7ff fad1 	bl	802370a <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8024168:	4605      	mov	r5, r0
 802416a:	6878      	ldr	r0, [r7, #4]
 802416c:	f7fe fb73 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8024170:	4603      	mov	r3, r0
 8024172:	461a      	mov	r2, r3
 8024174:	4629      	mov	r1, r5
 8024176:	4620      	mov	r0, r4
 8024178:	f000 f9c3 	bl	8024502 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 802417c:	bf00      	nop
 802417e:	3710      	adds	r7, #16
 8024180:	46bd      	mov	sp, r7
 8024182:	bdb0      	pop	{r4, r5, r7, pc}

08024184 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 8024184:	b480      	push	{r7}
 8024186:	b083      	sub	sp, #12
 8024188:	af00      	add	r7, sp, #0
 802418a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 802418c:	687b      	ldr	r3, [r7, #4]
 802418e:	4618      	mov	r0, r3
 8024190:	370c      	adds	r7, #12
 8024192:	46bd      	mov	sp, r7
 8024194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024198:	4770      	bx	lr

0802419a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 802419a:	b580      	push	{r7, lr}
 802419c:	b084      	sub	sp, #16
 802419e:	af00      	add	r7, sp, #0
 80241a0:	60f8      	str	r0, [r7, #12]
 80241a2:	60b9      	str	r1, [r7, #8]
 80241a4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80241a6:	687a      	ldr	r2, [r7, #4]
 80241a8:	4613      	mov	r3, r2
 80241aa:	009b      	lsls	r3, r3, #2
 80241ac:	4413      	add	r3, r2
 80241ae:	00db      	lsls	r3, r3, #3
 80241b0:	4619      	mov	r1, r3
 80241b2:	68b8      	ldr	r0, [r7, #8]
 80241b4:	f001 ff76 	bl	80260a4 <_ZdlPvj>
      }
 80241b8:	3710      	adds	r7, #16
 80241ba:	46bd      	mov	sp, r7
 80241bc:	bd80      	pop	{r7, pc}

080241be <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 80241be:	b580      	push	{r7, lr}
 80241c0:	b082      	sub	sp, #8
 80241c2:	af00      	add	r7, sp, #0
 80241c4:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	3310      	adds	r3, #16
 80241ca:	4618      	mov	r0, r3
 80241cc:	f000 f9ab 	bl	8024526 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 80241d0:	4603      	mov	r3, r0
 80241d2:	4618      	mov	r0, r3
 80241d4:	3708      	adds	r7, #8
 80241d6:	46bd      	mov	sp, r7
 80241d8:	bd80      	pop	{r7, pc}

080241da <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80241da:	b480      	push	{r7}
 80241dc:	b083      	sub	sp, #12
 80241de:	af00      	add	r7, sp, #0
 80241e0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	4618      	mov	r0, r3
 80241e6:	370c      	adds	r7, #12
 80241e8:	46bd      	mov	sp, r7
 80241ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ee:	4770      	bx	lr

080241f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 80241f0:	b580      	push	{r7, lr}
 80241f2:	b082      	sub	sp, #8
 80241f4:	af00      	add	r7, sp, #0
 80241f6:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80241f8:	6878      	ldr	r0, [r7, #4]
 80241fa:	f7ff fbd3 	bl	80239a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80241fe:	4603      	mov	r3, r0
 8024200:	2101      	movs	r1, #1
 8024202:	4618      	mov	r0, r3
 8024204:	f000 f99b 	bl	802453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 8024208:	4603      	mov	r3, r0
 802420a:	4618      	mov	r0, r3
 802420c:	3708      	adds	r7, #8
 802420e:	46bd      	mov	sp, r7
 8024210:	bd80      	pop	{r7, pc}

08024212 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8024212:	b5b0      	push	{r4, r5, r7, lr}
 8024214:	b084      	sub	sp, #16
 8024216:	af00      	add	r7, sp, #0
 8024218:	60f8      	str	r0, [r7, #12]
 802421a:	60b9      	str	r1, [r7, #8]
 802421c:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 802421e:	68bb      	ldr	r3, [r7, #8]
 8024220:	4619      	mov	r1, r3
 8024222:	2038      	movs	r0, #56	; 0x38
 8024224:	f7dd f918 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8024228:	68f8      	ldr	r0, [r7, #12]
 802422a:	f7ff fbbb 	bl	80239a4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 802422e:	4604      	mov	r4, r0
 8024230:	68b8      	ldr	r0, [r7, #8]
 8024232:	f7ff fbc2 	bl	80239ba <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8024236:	4605      	mov	r5, r0
 8024238:	6878      	ldr	r0, [r7, #4]
 802423a:	f7fe fce9 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 802423e:	4603      	mov	r3, r0
 8024240:	461a      	mov	r2, r3
 8024242:	4629      	mov	r1, r5
 8024244:	4620      	mov	r0, r4
 8024246:	f000 f9ba 	bl	80245be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 802424a:	bf00      	nop
 802424c:	3710      	adds	r7, #16
 802424e:	46bd      	mov	sp, r7
 8024250:	bdb0      	pop	{r4, r5, r7, pc}

08024252 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8024252:	b480      	push	{r7}
 8024254:	b083      	sub	sp, #12
 8024256:	af00      	add	r7, sp, #0
 8024258:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 802425a:	687b      	ldr	r3, [r7, #4]
 802425c:	4618      	mov	r0, r3
 802425e:	370c      	adds	r7, #12
 8024260:	46bd      	mov	sp, r7
 8024262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024266:	4770      	bx	lr

08024268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8024268:	b580      	push	{r7, lr}
 802426a:	b084      	sub	sp, #16
 802426c:	af00      	add	r7, sp, #0
 802426e:	60f8      	str	r0, [r7, #12]
 8024270:	60b9      	str	r1, [r7, #8]
 8024272:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8024274:	687a      	ldr	r2, [r7, #4]
 8024276:	4613      	mov	r3, r2
 8024278:	00db      	lsls	r3, r3, #3
 802427a:	1a9b      	subs	r3, r3, r2
 802427c:	00db      	lsls	r3, r3, #3
 802427e:	4619      	mov	r1, r3
 8024280:	68b8      	ldr	r0, [r7, #8]
 8024282:	f001 ff0f 	bl	80260a4 <_ZdlPvj>
      }
 8024286:	3710      	adds	r7, #16
 8024288:	46bd      	mov	sp, r7
 802428a:	bd80      	pop	{r7, pc}

0802428c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 802428c:	b5b0      	push	{r4, r5, r7, lr}
 802428e:	b084      	sub	sp, #16
 8024290:	af00      	add	r7, sp, #0
 8024292:	60f8      	str	r0, [r7, #12]
 8024294:	60b9      	str	r1, [r7, #8]
 8024296:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8024298:	68bb      	ldr	r3, [r7, #8]
 802429a:	4619      	mov	r1, r3
 802429c:	2024      	movs	r0, #36	; 0x24
 802429e:	f7dd f8db 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80242a2:	68f8      	ldr	r0, [r7, #12]
 80242a4:	f7f1 fa18 	bl	80156d8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80242a8:	4604      	mov	r4, r0
 80242aa:	68b8      	ldr	r0, [r7, #8]
 80242ac:	f7f0 f80c 	bl	80142c8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 80242b0:	4605      	mov	r5, r0
 80242b2:	6878      	ldr	r0, [r7, #4]
 80242b4:	f7fe fd4b 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80242b8:	4603      	mov	r3, r0
 80242ba:	461a      	mov	r2, r3
 80242bc:	4629      	mov	r1, r5
 80242be:	4620      	mov	r0, r4
 80242c0:	f000 f9a8 	bl	8024614 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 80242c4:	bf00      	nop
 80242c6:	3710      	adds	r7, #16
 80242c8:	46bd      	mov	sp, r7
 80242ca:	bdb0      	pop	{r4, r5, r7, pc}

080242cc <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80242cc:	b5b0      	push	{r4, r5, r7, lr}
 80242ce:	b084      	sub	sp, #16
 80242d0:	af00      	add	r7, sp, #0
 80242d2:	60f8      	str	r0, [r7, #12]
 80242d4:	60b9      	str	r1, [r7, #8]
 80242d6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80242d8:	68bb      	ldr	r3, [r7, #8]
 80242da:	4619      	mov	r1, r3
 80242dc:	2028      	movs	r0, #40	; 0x28
 80242de:	f7dd f8bb 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80242e2:	68f8      	ldr	r0, [r7, #12]
 80242e4:	f7f3 fd4f 	bl	8017d86 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80242e8:	4604      	mov	r4, r0
 80242ea:	68b8      	ldr	r0, [r7, #8]
 80242ec:	f7f2 fc21 	bl	8016b32 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 80242f0:	4605      	mov	r5, r0
 80242f2:	6878      	ldr	r0, [r7, #4]
 80242f4:	f7fe fdaf 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80242f8:	4603      	mov	r3, r0
 80242fa:	461a      	mov	r2, r3
 80242fc:	4629      	mov	r1, r5
 80242fe:	4620      	mov	r0, r4
 8024300:	f000 f9dc 	bl	80246bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8024304:	bf00      	nop
 8024306:	3710      	adds	r7, #16
 8024308:	46bd      	mov	sp, r7
 802430a:	bdb0      	pop	{r4, r5, r7, pc}

0802430c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() const noexcept
 802430c:	b580      	push	{r7, lr}
 802430e:	b082      	sub	sp, #8
 8024310:	af00      	add	r7, sp, #0
 8024312:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8024314:	6878      	ldr	r0, [r7, #4]
 8024316:	f000 f9e3 	bl	80246e0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 802431a:	4603      	mov	r3, r0
 802431c:	4618      	mov	r0, r3
 802431e:	3708      	adds	r7, #8
 8024320:	46bd      	mov	sp, r7
 8024322:	bd80      	pop	{r7, pc}

08024324 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8024324:	b580      	push	{r7, lr}
 8024326:	b084      	sub	sp, #16
 8024328:	af00      	add	r7, sp, #0
 802432a:	6078      	str	r0, [r7, #4]
 802432c:	6039      	str	r1, [r7, #0]
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	60fb      	str	r3, [r7, #12]
 8024332:	683b      	ldr	r3, [r7, #0]
 8024334:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8024336:	f7dd f887 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 802433a:	4603      	mov	r3, r0
 802433c:	2b00      	cmp	r3, #0
 802433e:	d009      	beq.n	8024354 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8024340:	68ba      	ldr	r2, [r7, #8]
 8024342:	4613      	mov	r3, r2
 8024344:	00db      	lsls	r3, r3, #3
 8024346:	4413      	add	r3, r2
 8024348:	009b      	lsls	r3, r3, #2
 802434a:	4618      	mov	r0, r3
 802434c:	f001 feac 	bl	80260a8 <_Znwj>
 8024350:	4603      	mov	r3, r0
 8024352:	e006      	b.n	8024362 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8024354:	2200      	movs	r2, #0
 8024356:	68b9      	ldr	r1, [r7, #8]
 8024358:	68f8      	ldr	r0, [r7, #12]
 802435a:	f000 f9ed 	bl	8024738 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>
 802435e:	4603      	mov	r3, r0
 8024360:	bf00      	nop
      { return __a.allocate(__n); }
 8024362:	4618      	mov	r0, r3
 8024364:	3710      	adds	r7, #16
 8024366:	46bd      	mov	sp, r7
 8024368:	bd80      	pop	{r7, pc}

0802436a <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 802436a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802436c:	b083      	sub	sp, #12
 802436e:	af00      	add	r7, sp, #0
 8024370:	6078      	str	r0, [r7, #4]
 8024372:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8024374:	6838      	ldr	r0, [r7, #0]
 8024376:	f7fd feb3 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 802437a:	4605      	mov	r5, r0
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	4619      	mov	r1, r3
 8024380:	2014      	movs	r0, #20
 8024382:	f7dd f869 	bl	8001458 <_ZnwjPv>
 8024386:	4606      	mov	r6, r0
 8024388:	4634      	mov	r4, r6
 802438a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802438c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802438e:	682b      	ldr	r3, [r5, #0]
 8024390:	6023      	str	r3, [r4, #0]
 8024392:	4633      	mov	r3, r6
 8024394:	4618      	mov	r0, r3
 8024396:	370c      	adds	r7, #12
 8024398:	46bd      	mov	sp, r7
 802439a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802439c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802439c:	b580      	push	{r7, lr}
 802439e:	b084      	sub	sp, #16
 80243a0:	af00      	add	r7, sp, #0
 80243a2:	60f8      	str	r0, [r7, #12]
 80243a4:	60b9      	str	r1, [r7, #8]
 80243a6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80243a8:	6878      	ldr	r0, [r7, #4]
 80243aa:	f7fd fe99 	bl	80220e0 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 80243ae:	4603      	mov	r3, r0
 80243b0:	4619      	mov	r1, r3
 80243b2:	68b8      	ldr	r0, [r7, #8]
 80243b4:	f7ff ffd9 	bl	802436a <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 80243b8:	bf00      	nop
 80243ba:	3710      	adds	r7, #16
 80243bc:	46bd      	mov	sp, r7
 80243be:	bd80      	pop	{r7, pc}

080243c0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80243c0:	b580      	push	{r7, lr}
 80243c2:	b082      	sub	sp, #8
 80243c4:	af00      	add	r7, sp, #0
 80243c6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80243c8:	6878      	ldr	r0, [r7, #4]
 80243ca:	f000 f994 	bl	80246f6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 80243ce:	4603      	mov	r3, r0
 80243d0:	4618      	mov	r0, r3
 80243d2:	3708      	adds	r7, #8
 80243d4:	46bd      	mov	sp, r7
 80243d6:	bd80      	pop	{r7, pc}

080243d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80243d8:	b580      	push	{r7, lr}
 80243da:	b084      	sub	sp, #16
 80243dc:	af00      	add	r7, sp, #0
 80243de:	6078      	str	r0, [r7, #4]
 80243e0:	6039      	str	r1, [r7, #0]
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	60fb      	str	r3, [r7, #12]
 80243e6:	683b      	ldr	r3, [r7, #0]
 80243e8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80243ea:	f7dd f82d 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 80243ee:	4603      	mov	r3, r0
 80243f0:	2b00      	cmp	r3, #0
 80243f2:	d006      	beq.n	8024402 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80243f4:	68bb      	ldr	r3, [r7, #8]
 80243f6:	015b      	lsls	r3, r3, #5
 80243f8:	4618      	mov	r0, r3
 80243fa:	f001 fe55 	bl	80260a8 <_Znwj>
 80243fe:	4603      	mov	r3, r0
 8024400:	e006      	b.n	8024410 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8024402:	2200      	movs	r2, #0
 8024404:	68b9      	ldr	r1, [r7, #8]
 8024406:	68f8      	ldr	r0, [r7, #12]
 8024408:	f000 f9b8 	bl	802477c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>
 802440c:	4603      	mov	r3, r0
 802440e:	bf00      	nop
      { return __a.allocate(__n); }
 8024410:	4618      	mov	r0, r3
 8024412:	3710      	adds	r7, #16
 8024414:	46bd      	mov	sp, r7
 8024416:	bd80      	pop	{r7, pc}

08024418 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8024418:	b5f0      	push	{r4, r5, r6, r7, lr}
 802441a:	b083      	sub	sp, #12
 802441c:	af00      	add	r7, sp, #0
 802441e:	6078      	str	r0, [r7, #4]
 8024420:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8024422:	6838      	ldr	r0, [r7, #0]
 8024424:	f7fe f83a 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8024428:	4606      	mov	r6, r0
 802442a:	687b      	ldr	r3, [r7, #4]
 802442c:	4619      	mov	r1, r3
 802442e:	2010      	movs	r0, #16
 8024430:	f7dd f812 	bl	8001458 <_ZnwjPv>
 8024434:	4605      	mov	r5, r0
 8024436:	462c      	mov	r4, r5
 8024438:	4633      	mov	r3, r6
 802443a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802443c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8024440:	462b      	mov	r3, r5
 8024442:	4618      	mov	r0, r3
 8024444:	370c      	adds	r7, #12
 8024446:	46bd      	mov	sp, r7
 8024448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0802444a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 802444a:	b580      	push	{r7, lr}
 802444c:	b084      	sub	sp, #16
 802444e:	af00      	add	r7, sp, #0
 8024450:	60f8      	str	r0, [r7, #12]
 8024452:	60b9      	str	r1, [r7, #8]
 8024454:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8024456:	6878      	ldr	r0, [r7, #4]
 8024458:	f7fe f820 	bl	802249c <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 802445c:	4603      	mov	r3, r0
 802445e:	4619      	mov	r1, r3
 8024460:	68b8      	ldr	r0, [r7, #8]
 8024462:	f7ff ffd9 	bl	8024418 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 8024466:	bf00      	nop
 8024468:	3710      	adds	r7, #16
 802446a:	46bd      	mov	sp, r7
 802446c:	bd80      	pop	{r7, pc}

0802446e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 802446e:	b580      	push	{r7, lr}
 8024470:	b082      	sub	sp, #8
 8024472:	af00      	add	r7, sp, #0
 8024474:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8024476:	6878      	ldr	r0, [r7, #4]
 8024478:	f000 f948 	bl	802470c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 802447c:	4603      	mov	r3, r0
 802447e:	4618      	mov	r0, r3
 8024480:	3708      	adds	r7, #8
 8024482:	46bd      	mov	sp, r7
 8024484:	bd80      	pop	{r7, pc}

08024486 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8024486:	b580      	push	{r7, lr}
 8024488:	b084      	sub	sp, #16
 802448a:	af00      	add	r7, sp, #0
 802448c:	6078      	str	r0, [r7, #4]
 802448e:	6039      	str	r1, [r7, #0]
 8024490:	687b      	ldr	r3, [r7, #4]
 8024492:	60fb      	str	r3, [r7, #12]
 8024494:	683b      	ldr	r3, [r7, #0]
 8024496:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8024498:	f7dc ffd6 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 802449c:	4603      	mov	r3, r0
 802449e:	2b00      	cmp	r3, #0
 80244a0:	d009      	beq.n	80244b6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80244a2:	68ba      	ldr	r2, [r7, #8]
 80244a4:	4613      	mov	r3, r2
 80244a6:	009b      	lsls	r3, r3, #2
 80244a8:	4413      	add	r3, r2
 80244aa:	00db      	lsls	r3, r3, #3
 80244ac:	4618      	mov	r0, r3
 80244ae:	f001 fdfb 	bl	80260a8 <_Znwj>
 80244b2:	4603      	mov	r3, r0
 80244b4:	e006      	b.n	80244c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80244b6:	2200      	movs	r2, #0
 80244b8:	68b9      	ldr	r1, [r7, #8]
 80244ba:	68f8      	ldr	r0, [r7, #12]
 80244bc:	f000 f97d 	bl	80247ba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>
 80244c0:	4603      	mov	r3, r0
 80244c2:	bf00      	nop
      { return __a.allocate(__n); }
 80244c4:	4618      	mov	r0, r3
 80244c6:	3710      	adds	r7, #16
 80244c8:	46bd      	mov	sp, r7
 80244ca:	bd80      	pop	{r7, pc}

080244cc <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80244cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80244ce:	b083      	sub	sp, #12
 80244d0:	af00      	add	r7, sp, #0
 80244d2:	6078      	str	r0, [r7, #4]
 80244d4:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80244d6:	6838      	ldr	r0, [r7, #0]
 80244d8:	f7fe f9bd 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80244dc:	4605      	mov	r5, r0
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	4619      	mov	r1, r3
 80244e2:	2018      	movs	r0, #24
 80244e4:	f7dc ffb8 	bl	8001458 <_ZnwjPv>
 80244e8:	4606      	mov	r6, r0
 80244ea:	4634      	mov	r4, r6
 80244ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80244ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80244f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80244f4:	e884 0003 	stmia.w	r4, {r0, r1}
 80244f8:	4633      	mov	r3, r6
 80244fa:	4618      	mov	r0, r3
 80244fc:	370c      	adds	r7, #12
 80244fe:	46bd      	mov	sp, r7
 8024500:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024502 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024502:	b580      	push	{r7, lr}
 8024504:	b084      	sub	sp, #16
 8024506:	af00      	add	r7, sp, #0
 8024508:	60f8      	str	r0, [r7, #12]
 802450a:	60b9      	str	r1, [r7, #8]
 802450c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 802450e:	6878      	ldr	r0, [r7, #4]
 8024510:	f7fe f9a1 	bl	8022856 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8024514:	4603      	mov	r3, r0
 8024516:	4619      	mov	r1, r3
 8024518:	68b8      	ldr	r0, [r7, #8]
 802451a:	f7ff ffd7 	bl	80244cc <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 802451e:	bf00      	nop
 8024520:	3710      	adds	r7, #16
 8024522:	46bd      	mov	sp, r7
 8024524:	bd80      	pop	{r7, pc}

08024526 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8024526:	b580      	push	{r7, lr}
 8024528:	b082      	sub	sp, #8
 802452a:	af00      	add	r7, sp, #0
 802452c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 802452e:	6878      	ldr	r0, [r7, #4]
 8024530:	f000 f8f7 	bl	8024722 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8024534:	4603      	mov	r3, r0
 8024536:	4618      	mov	r0, r3
 8024538:	3708      	adds	r7, #8
 802453a:	46bd      	mov	sp, r7
 802453c:	bd80      	pop	{r7, pc}

0802453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 802453e:	b580      	push	{r7, lr}
 8024540:	b084      	sub	sp, #16
 8024542:	af00      	add	r7, sp, #0
 8024544:	6078      	str	r0, [r7, #4]
 8024546:	6039      	str	r1, [r7, #0]
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	60fb      	str	r3, [r7, #12]
 802454c:	683b      	ldr	r3, [r7, #0]
 802454e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8024550:	f7dc ff7a 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8024554:	4603      	mov	r3, r0
 8024556:	2b00      	cmp	r3, #0
 8024558:	d009      	beq.n	802456e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 802455a:	68ba      	ldr	r2, [r7, #8]
 802455c:	4613      	mov	r3, r2
 802455e:	00db      	lsls	r3, r3, #3
 8024560:	1a9b      	subs	r3, r3, r2
 8024562:	00db      	lsls	r3, r3, #3
 8024564:	4618      	mov	r0, r3
 8024566:	f001 fd9f 	bl	80260a8 <_Znwj>
 802456a:	4603      	mov	r3, r0
 802456c:	e006      	b.n	802457c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 802456e:	2200      	movs	r2, #0
 8024570:	68b9      	ldr	r1, [r7, #8]
 8024572:	68f8      	ldr	r0, [r7, #12]
 8024574:	f000 f943 	bl	80247fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 8024578:	4603      	mov	r3, r0
 802457a:	bf00      	nop
      { return __a.allocate(__n); }
 802457c:	4618      	mov	r0, r3
 802457e:	3710      	adds	r7, #16
 8024580:	46bd      	mov	sp, r7
 8024582:	bd80      	pop	{r7, pc}

08024584 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8024584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024586:	b083      	sub	sp, #12
 8024588:	af00      	add	r7, sp, #0
 802458a:	6078      	str	r0, [r7, #4]
 802458c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 802458e:	6838      	ldr	r0, [r7, #0]
 8024590:	f7fe fb3e 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8024594:	4605      	mov	r5, r0
 8024596:	687b      	ldr	r3, [r7, #4]
 8024598:	4619      	mov	r1, r3
 802459a:	2028      	movs	r0, #40	; 0x28
 802459c:	f7dc ff5c 	bl	8001458 <_ZnwjPv>
 80245a0:	4606      	mov	r6, r0
 80245a2:	4634      	mov	r4, r6
 80245a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80245a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80245a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80245aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80245ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80245b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80245b4:	4633      	mov	r3, r6
 80245b6:	4618      	mov	r0, r3
 80245b8:	370c      	adds	r7, #12
 80245ba:	46bd      	mov	sp, r7
 80245bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080245be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80245be:	b580      	push	{r7, lr}
 80245c0:	b084      	sub	sp, #16
 80245c2:	af00      	add	r7, sp, #0
 80245c4:	60f8      	str	r0, [r7, #12]
 80245c6:	60b9      	str	r1, [r7, #8]
 80245c8:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80245ca:	6878      	ldr	r0, [r7, #4]
 80245cc:	f7fe fb20 	bl	8022c10 <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80245d0:	4603      	mov	r3, r0
 80245d2:	4619      	mov	r1, r3
 80245d4:	68b8      	ldr	r0, [r7, #8]
 80245d6:	f7ff ffd5 	bl	8024584 <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80245da:	bf00      	nop
 80245dc:	3710      	adds	r7, #16
 80245de:	46bd      	mov	sp, r7
 80245e0:	bd80      	pop	{r7, pc}

080245e2 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80245e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245e4:	b083      	sub	sp, #12
 80245e6:	af00      	add	r7, sp, #0
 80245e8:	6078      	str	r0, [r7, #4]
 80245ea:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80245ec:	6838      	ldr	r0, [r7, #0]
 80245ee:	f7fe fbae 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80245f2:	4605      	mov	r5, r0
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	4619      	mov	r1, r3
 80245f8:	2014      	movs	r0, #20
 80245fa:	f7dc ff2d 	bl	8001458 <_ZnwjPv>
 80245fe:	4606      	mov	r6, r0
 8024600:	4634      	mov	r4, r6
 8024602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8024604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8024606:	682b      	ldr	r3, [r5, #0]
 8024608:	6023      	str	r3, [r4, #0]
 802460a:	4633      	mov	r3, r6
 802460c:	4618      	mov	r0, r3
 802460e:	370c      	adds	r7, #12
 8024610:	46bd      	mov	sp, r7
 8024612:	bdf0      	pop	{r4, r5, r6, r7, pc}

08024614 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8024614:	b580      	push	{r7, lr}
 8024616:	b084      	sub	sp, #16
 8024618:	af00      	add	r7, sp, #0
 802461a:	60f8      	str	r0, [r7, #12]
 802461c:	60b9      	str	r1, [r7, #8]
 802461e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8024620:	6878      	ldr	r0, [r7, #4]
 8024622:	f7fe fb94 	bl	8022d4e <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8024626:	4603      	mov	r3, r0
 8024628:	4619      	mov	r1, r3
 802462a:	68b8      	ldr	r0, [r7, #8]
 802462c:	f7ff ffd9 	bl	80245e2 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8024630:	bf00      	nop
 8024632:	3710      	adds	r7, #16
 8024634:	46bd      	mov	sp, r7
 8024636:	bd80      	pop	{r7, pc}

08024638 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
 8024638:	b580      	push	{r7, lr}
 802463a:	b082      	sub	sp, #8
 802463c:	af00      	add	r7, sp, #0
 802463e:	6078      	str	r0, [r7, #4]
 8024640:	6039      	str	r1, [r7, #0]
 8024642:	687b      	ldr	r3, [r7, #4]
 8024644:	683a      	ldr	r2, [r7, #0]
 8024646:	4611      	mov	r1, r2
 8024648:	4618      	mov	r0, r3
 802464a:	f7f2 f9c8 	bl	80169de <_ZNSt8functionIFvvEEC1ERKS1_>
 802464e:	683b      	ldr	r3, [r7, #0]
 8024650:	7c1a      	ldrb	r2, [r3, #16]
 8024652:	687b      	ldr	r3, [r7, #4]
 8024654:	741a      	strb	r2, [r3, #16]
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	4618      	mov	r0, r3
 802465a:	3708      	adds	r7, #8
 802465c:	46bd      	mov	sp, r7
 802465e:	bd80      	pop	{r7, pc}

08024660 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8024660:	b580      	push	{r7, lr}
 8024662:	b082      	sub	sp, #8
 8024664:	af00      	add	r7, sp, #0
 8024666:	6078      	str	r0, [r7, #4]
 8024668:	6039      	str	r1, [r7, #0]
 802466a:	683b      	ldr	r3, [r7, #0]
 802466c:	881a      	ldrh	r2, [r3, #0]
 802466e:	687b      	ldr	r3, [r7, #4]
 8024670:	801a      	strh	r2, [r3, #0]
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	1d1a      	adds	r2, r3, #4
 8024676:	683b      	ldr	r3, [r7, #0]
 8024678:	3304      	adds	r3, #4
 802467a:	4619      	mov	r1, r3
 802467c:	4610      	mov	r0, r2
 802467e:	f7ff ffdb 	bl	8024638 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 8024682:	687b      	ldr	r3, [r7, #4]
 8024684:	4618      	mov	r0, r3
 8024686:	3708      	adds	r7, #8
 8024688:	46bd      	mov	sp, r7
 802468a:	bd80      	pop	{r7, pc}

0802468c <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 802468c:	b5b0      	push	{r4, r5, r7, lr}
 802468e:	b082      	sub	sp, #8
 8024690:	af00      	add	r7, sp, #0
 8024692:	6078      	str	r0, [r7, #4]
 8024694:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8024696:	6838      	ldr	r0, [r7, #0]
 8024698:	f7fe fbdd 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 802469c:	4605      	mov	r5, r0
 802469e:	687b      	ldr	r3, [r7, #4]
 80246a0:	4619      	mov	r1, r3
 80246a2:	2018      	movs	r0, #24
 80246a4:	f7dc fed8 	bl	8001458 <_ZnwjPv>
 80246a8:	4604      	mov	r4, r0
 80246aa:	4629      	mov	r1, r5
 80246ac:	4620      	mov	r0, r4
 80246ae:	f7ff ffd7 	bl	8024660 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 80246b2:	4623      	mov	r3, r4
 80246b4:	4618      	mov	r0, r3
 80246b6:	3708      	adds	r7, #8
 80246b8:	46bd      	mov	sp, r7
 80246ba:	bdb0      	pop	{r4, r5, r7, pc}

080246bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80246bc:	b580      	push	{r7, lr}
 80246be:	b084      	sub	sp, #16
 80246c0:	af00      	add	r7, sp, #0
 80246c2:	60f8      	str	r0, [r7, #12]
 80246c4:	60b9      	str	r1, [r7, #8]
 80246c6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f7fe fbc4 	bl	8022e56 <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80246ce:	4603      	mov	r3, r0
 80246d0:	4619      	mov	r1, r3
 80246d2:	68b8      	ldr	r0, [r7, #8]
 80246d4:	f7ff ffda 	bl	802468c <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 80246d8:	bf00      	nop
 80246da:	3710      	adds	r7, #16
 80246dc:	46bd      	mov	sp, r7
 80246de:	bd80      	pop	{r7, pc}

080246e0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() const noexcept
 80246e0:	b480      	push	{r7}
 80246e2:	b083      	sub	sp, #12
 80246e4:	af00      	add	r7, sp, #0
 80246e6:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	4618      	mov	r0, r3
 80246ec:	370c      	adds	r7, #12
 80246ee:	46bd      	mov	sp, r7
 80246f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246f4:	4770      	bx	lr

080246f6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 80246f6:	b480      	push	{r7}
 80246f8:	b083      	sub	sp, #12
 80246fa:	af00      	add	r7, sp, #0
 80246fc:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80246fe:	687b      	ldr	r3, [r7, #4]
 8024700:	4618      	mov	r0, r3
 8024702:	370c      	adds	r7, #12
 8024704:	46bd      	mov	sp, r7
 8024706:	f85d 7b04 	ldr.w	r7, [sp], #4
 802470a:	4770      	bx	lr

0802470c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 802470c:	b480      	push	{r7}
 802470e:	b083      	sub	sp, #12
 8024710:	af00      	add	r7, sp, #0
 8024712:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	4618      	mov	r0, r3
 8024718:	370c      	adds	r7, #12
 802471a:	46bd      	mov	sp, r7
 802471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024720:	4770      	bx	lr

08024722 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8024722:	b480      	push	{r7}
 8024724:	b083      	sub	sp, #12
 8024726:	af00      	add	r7, sp, #0
 8024728:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 802472a:	687b      	ldr	r3, [r7, #4]
 802472c:	4618      	mov	r0, r3
 802472e:	370c      	adds	r7, #12
 8024730:	46bd      	mov	sp, r7
 8024732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024736:	4770      	bx	lr

08024738 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8024738:	b580      	push	{r7, lr}
 802473a:	b084      	sub	sp, #16
 802473c:	af00      	add	r7, sp, #0
 802473e:	60f8      	str	r0, [r7, #12]
 8024740:	60b9      	str	r1, [r7, #8]
 8024742:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8024744:	68f8      	ldr	r0, [r7, #12]
 8024746:	f000 f87d 	bl	8024844 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>
 802474a:	4602      	mov	r2, r0
 802474c:	68bb      	ldr	r3, [r7, #8]
 802474e:	4293      	cmp	r3, r2
 8024750:	bf8c      	ite	hi
 8024752:	2301      	movhi	r3, #1
 8024754:	2300      	movls	r3, #0
 8024756:	b2db      	uxtb	r3, r3
 8024758:	2b00      	cmp	r3, #0
 802475a:	d001      	beq.n	8024760 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 802475c:	f001 fd68 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8024760:	68ba      	ldr	r2, [r7, #8]
 8024762:	4613      	mov	r3, r2
 8024764:	00db      	lsls	r3, r3, #3
 8024766:	4413      	add	r3, r2
 8024768:	009b      	lsls	r3, r3, #2
 802476a:	4618      	mov	r0, r3
 802476c:	f001 fc9c 	bl	80260a8 <_Znwj>
 8024770:	4603      	mov	r3, r0
 8024772:	bf00      	nop
      }
 8024774:	4618      	mov	r0, r3
 8024776:	3710      	adds	r7, #16
 8024778:	46bd      	mov	sp, r7
 802477a:	bd80      	pop	{r7, pc}

0802477c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 802477c:	b580      	push	{r7, lr}
 802477e:	b084      	sub	sp, #16
 8024780:	af00      	add	r7, sp, #0
 8024782:	60f8      	str	r0, [r7, #12]
 8024784:	60b9      	str	r1, [r7, #8]
 8024786:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8024788:	68f8      	ldr	r0, [r7, #12]
 802478a:	f000 f869 	bl	8024860 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>
 802478e:	4602      	mov	r2, r0
 8024790:	68bb      	ldr	r3, [r7, #8]
 8024792:	4293      	cmp	r3, r2
 8024794:	bf8c      	ite	hi
 8024796:	2301      	movhi	r3, #1
 8024798:	2300      	movls	r3, #0
 802479a:	b2db      	uxtb	r3, r3
 802479c:	2b00      	cmp	r3, #0
 802479e:	d001      	beq.n	80247a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80247a0:	f001 fd46 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80247a4:	68bb      	ldr	r3, [r7, #8]
 80247a6:	015b      	lsls	r3, r3, #5
 80247a8:	4618      	mov	r0, r3
 80247aa:	f001 fc7d 	bl	80260a8 <_Znwj>
 80247ae:	4603      	mov	r3, r0
 80247b0:	bf00      	nop
      }
 80247b2:	4618      	mov	r0, r3
 80247b4:	3710      	adds	r7, #16
 80247b6:	46bd      	mov	sp, r7
 80247b8:	bd80      	pop	{r7, pc}

080247ba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80247ba:	b580      	push	{r7, lr}
 80247bc:	b084      	sub	sp, #16
 80247be:	af00      	add	r7, sp, #0
 80247c0:	60f8      	str	r0, [r7, #12]
 80247c2:	60b9      	str	r1, [r7, #8]
 80247c4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80247c6:	68f8      	ldr	r0, [r7, #12]
 80247c8:	f000 f856 	bl	8024878 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>
 80247cc:	4602      	mov	r2, r0
 80247ce:	68bb      	ldr	r3, [r7, #8]
 80247d0:	4293      	cmp	r3, r2
 80247d2:	bf8c      	ite	hi
 80247d4:	2301      	movhi	r3, #1
 80247d6:	2300      	movls	r3, #0
 80247d8:	b2db      	uxtb	r3, r3
 80247da:	2b00      	cmp	r3, #0
 80247dc:	d001      	beq.n	80247e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80247de:	f001 fd27 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80247e2:	68ba      	ldr	r2, [r7, #8]
 80247e4:	4613      	mov	r3, r2
 80247e6:	009b      	lsls	r3, r3, #2
 80247e8:	4413      	add	r3, r2
 80247ea:	00db      	lsls	r3, r3, #3
 80247ec:	4618      	mov	r0, r3
 80247ee:	f001 fc5b 	bl	80260a8 <_Znwj>
 80247f2:	4603      	mov	r3, r0
 80247f4:	bf00      	nop
      }
 80247f6:	4618      	mov	r0, r3
 80247f8:	3710      	adds	r7, #16
 80247fa:	46bd      	mov	sp, r7
 80247fc:	bd80      	pop	{r7, pc}

080247fe <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80247fe:	b580      	push	{r7, lr}
 8024800:	b084      	sub	sp, #16
 8024802:	af00      	add	r7, sp, #0
 8024804:	60f8      	str	r0, [r7, #12]
 8024806:	60b9      	str	r1, [r7, #8]
 8024808:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 802480a:	68f8      	ldr	r0, [r7, #12]
 802480c:	f000 f842 	bl	8024894 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 8024810:	4602      	mov	r2, r0
 8024812:	68bb      	ldr	r3, [r7, #8]
 8024814:	4293      	cmp	r3, r2
 8024816:	bf8c      	ite	hi
 8024818:	2301      	movhi	r3, #1
 802481a:	2300      	movls	r3, #0
 802481c:	b2db      	uxtb	r3, r3
 802481e:	2b00      	cmp	r3, #0
 8024820:	d001      	beq.n	8024826 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8024822:	f001 fd05 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8024826:	68ba      	ldr	r2, [r7, #8]
 8024828:	4613      	mov	r3, r2
 802482a:	00db      	lsls	r3, r3, #3
 802482c:	1a9b      	subs	r3, r3, r2
 802482e:	00db      	lsls	r3, r3, #3
 8024830:	4618      	mov	r0, r3
 8024832:	f001 fc39 	bl	80260a8 <_Znwj>
 8024836:	4603      	mov	r3, r0
 8024838:	bf00      	nop
      }
 802483a:	4618      	mov	r0, r3
 802483c:	3710      	adds	r7, #16
 802483e:	46bd      	mov	sp, r7
 8024840:	bd80      	pop	{r7, pc}
	...

08024844 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8024844:	b480      	push	{r7}
 8024846:	b083      	sub	sp, #12
 8024848:	af00      	add	r7, sp, #0
 802484a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802484c:	4b03      	ldr	r3, [pc, #12]	; (802485c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv+0x18>)
      }
 802484e:	4618      	mov	r0, r3
 8024850:	370c      	adds	r7, #12
 8024852:	46bd      	mov	sp, r7
 8024854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024858:	4770      	bx	lr
 802485a:	bf00      	nop
 802485c:	038e38e3 	.word	0x038e38e3

08024860 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8024860:	b480      	push	{r7}
 8024862:	b083      	sub	sp, #12
 8024864:	af00      	add	r7, sp, #0
 8024866:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8024868:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 802486c:	4618      	mov	r0, r3
 802486e:	370c      	adds	r7, #12
 8024870:	46bd      	mov	sp, r7
 8024872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024876:	4770      	bx	lr

08024878 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8024878:	b480      	push	{r7}
 802487a:	b083      	sub	sp, #12
 802487c:	af00      	add	r7, sp, #0
 802487e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8024880:	4b03      	ldr	r3, [pc, #12]	; (8024890 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv+0x18>)
      }
 8024882:	4618      	mov	r0, r3
 8024884:	370c      	adds	r7, #12
 8024886:	46bd      	mov	sp, r7
 8024888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802488c:	4770      	bx	lr
 802488e:	bf00      	nop
 8024890:	03333333 	.word	0x03333333

08024894 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8024894:	b480      	push	{r7}
 8024896:	b083      	sub	sp, #12
 8024898:	af00      	add	r7, sp, #0
 802489a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 802489c:	4b03      	ldr	r3, [pc, #12]	; (80248ac <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 802489e:	4618      	mov	r0, r3
 80248a0:	370c      	adds	r7, #12
 80248a2:	46bd      	mov	sp, r7
 80248a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248a8:	4770      	bx	lr
 80248aa:	bf00      	nop
 80248ac:	02492492 	.word	0x02492492

080248b0 <_Z41__static_initialization_and_destruction_0ii>:
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
	{PE0.gpio_pin, Instance()}
};
 80248b0:	b590      	push	{r4, r7, lr}
 80248b2:	b0ed      	sub	sp, #436	; 0x1b4
 80248b4:	af02      	add	r7, sp, #8
 80248b6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80248ba:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80248be:	6018      	str	r0, [r3, #0]
 80248c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80248c4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80248c8:	6019      	str	r1, [r3, #0]
 80248ca:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80248ce:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	2b01      	cmp	r3, #1
 80248d6:	f040 8240 	bne.w	8024d5a <_Z41__static_initialization_and_destruction_0ii+0x4aa>
 80248da:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80248de:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80248e2:	681b      	ldr	r3, [r3, #0]
 80248e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80248e8:	4293      	cmp	r3, r2
 80248ea:	f040 8236 	bne.w	8024d5a <_Z41__static_initialization_and_destruction_0ii+0x4aa>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 80248ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80248f2:	4acc      	ldr	r2, [pc, #816]	; (8024c24 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80248f4:	49cc      	ldr	r1, [pc, #816]	; (8024c28 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80248f6:	4618      	mov	r0, r3
 80248f8:	f7fb fe69 	bl	80205ce <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PC6, PC7}, {&htim8}},
 80248fc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024900:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8024904:	4ac9      	ldr	r2, [pc, #804]	; (8024c2c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8024906:	601a      	str	r2, [r3, #0]
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8024908:	f107 0238 	add.w	r2, r7, #56	; 0x38
 802490c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8024910:	f107 0314 	add.w	r3, r7, #20
 8024914:	4618      	mov	r0, r3
 8024916:	f7fb fe78 	bl	802060a <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>
 802491a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 802491e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8024922:	f107 0214 	add.w	r2, r7, #20
 8024926:	601a      	str	r2, [r3, #0]
 8024928:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 802492c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8024930:	2201      	movs	r2, #1
 8024932:	605a      	str	r2, [r3, #4]
 8024934:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8024938:	4618      	mov	r0, r3
 802493a:	f7fb fe7c 	bl	8020636 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>
 802493e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8024942:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024946:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 802494a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802494e:	9300      	str	r3, [sp, #0]
 8024950:	460b      	mov	r3, r1
 8024952:	ca06      	ldmia	r2, {r1, r2}
 8024954:	48b6      	ldr	r0, [pc, #728]	; (8024c30 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8024956:	f7fb fe85 	bl	8020664 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 802495a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802495e:	4618      	mov	r0, r3
 8024960:	f7fb fe75 	bl	802064e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8024964:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024968:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 802496c:	4ab1      	ldr	r2, [pc, #708]	; (8024c34 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 802496e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024972:	e883 0003 	stmia.w	r3, {r0, r1}
 8024976:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802497a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802497e:	49ae      	ldr	r1, [pc, #696]	; (8024c38 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8024980:	4618      	mov	r0, r3
 8024982:	f7fb fd79 	bl	8020478 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 8024986:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 802498a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 802498e:	4aab      	ldr	r2, [pc, #684]	; (8024c3c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8024990:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024994:	e883 0003 	stmia.w	r3, {r0, r1}
 8024998:	f107 0274 	add.w	r2, r7, #116	; 0x74
 802499c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80249a0:	3310      	adds	r3, #16
 80249a2:	49a7      	ldr	r1, [pc, #668]	; (8024c40 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80249a4:	4618      	mov	r0, r3
 80249a6:	f7fb fd67 	bl	8020478 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 80249aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80249ae:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80249b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80249b6:	601a      	str	r2, [r3, #0]
 80249b8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80249bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80249c0:	2202      	movs	r2, #2
 80249c2:	605a      	str	r2, [r3, #4]
 80249c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80249c8:	4618      	mov	r0, r3
 80249ca:	f7fb fe9c 	bl	8020706 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>
 80249ce:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80249d2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80249d6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 80249da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80249de:	9300      	str	r3, [sp, #0]
 80249e0:	460b      	mov	r3, r1
 80249e2:	ca06      	ldmia	r2, {r1, r2}
 80249e4:	4897      	ldr	r0, [pc, #604]	; (8024c44 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80249e6:	f7fb fea5 	bl	8020734 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 80249ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80249ee:	4618      	mov	r0, r3
 80249f0:	f7fb fe95 	bl	802071e <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 80249f4:	4b94      	ldr	r3, [pc, #592]	; (8024c48 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80249f6:	461a      	mov	r2, r3
 80249f8:	2300      	movs	r3, #0
 80249fa:	6013      	str	r3, [r2, #0]
 80249fc:	6053      	str	r3, [r2, #4]
 80249fe:	6093      	str	r3, [r2, #8]
 8024a00:	60d3      	str	r3, [r2, #12]
 8024a02:	6113      	str	r3, [r2, #16]
 8024a04:	6153      	str	r3, [r2, #20]
 8024a06:	4890      	ldr	r0, [pc, #576]	; (8024c48 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8024a08:	f7fb fd82 	bl	8020510 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8024a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8024a10:	4a8e      	ldr	r2, [pc, #568]	; (8024c4c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8024a12:	498f      	ldr	r1, [pc, #572]	; (8024c50 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8024a14:	4618      	mov	r0, r3
 8024a16:	f7fb fdda 	bl	80205ce <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 8024a1a:	4b8e      	ldr	r3, [pc, #568]	; (8024c54 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8024a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8024a20:	2300      	movs	r3, #0
 8024a22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8024a26:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8024a2a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8024a2e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8024a32:	4618      	mov	r0, r3
 8024a34:	f7fb fee3 	bl	80207fe <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>
 8024a38:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024a3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8024a40:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8024a44:	601a      	str	r2, [r3, #0]
 8024a46:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024a4a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8024a4e:	2201      	movs	r2, #1
 8024a50:	605a      	str	r2, [r3, #4]
 8024a52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8024a56:	4618      	mov	r0, r3
 8024a58:	f7fb feea 	bl	8020830 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>
 8024a5c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8024a60:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024a64:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8024a68:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8024a6c:	9300      	str	r3, [sp, #0]
 8024a6e:	460b      	mov	r3, r1
 8024a70:	ca06      	ldmia	r2, {r1, r2}
 8024a72:	4879      	ldr	r0, [pc, #484]	; (8024c58 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8024a74:	f7fb fef3 	bl	802085e <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 8024a78:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f7fb fee3 	bl	8020848 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
		{PA0, InputCapture::Instance(PA0, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 8024a82:	4a76      	ldr	r2, [pc, #472]	; (8024c5c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8024a84:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8024a88:	2304      	movs	r3, #4
 8024a8a:	9301      	str	r3, [sp, #4]
 8024a8c:	2300      	movs	r3, #0
 8024a8e:	9300      	str	r3, [sp, #0]
 8024a90:	4b73      	ldr	r3, [pc, #460]	; (8024c60 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8024a92:	ca06      	ldmia	r2, {r1, r2}
 8024a94:	f000 fa16 	bl	8024ec4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8024a98:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8024a9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8024aa0:	496e      	ldr	r1, [pc, #440]	; (8024c5c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	f7fb ff2c 	bl	8020900 <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8024aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8024aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8024ab0:	2301      	movs	r3, #1
 8024ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8024ab6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8024aba:	4618      	mov	r0, r3
 8024abc:	f7fb ff42 	bl	8020944 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 8024ac0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8024ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8024ac8:	9300      	str	r3, [sp, #0]
 8024aca:	4613      	mov	r3, r2
 8024acc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8024ad0:	ca06      	ldmia	r2, {r1, r2}
 8024ad2:	4864      	ldr	r0, [pc, #400]	; (8024c64 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8024ad4:	f7fb ff4d 	bl	8020972 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8024ad8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8024adc:	4618      	mov	r0, r3
 8024ade:	f7fb ff3d 	bl	802095c <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
LowPowerTimer lptim1 = LowPowerTimer(&hlptim1, LPTIM1_PERIOD);
 8024ae2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8024ae6:	4960      	ldr	r1, [pc, #384]	; (8024c68 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8024ae8:	4860      	ldr	r0, [pc, #384]	; (8024c6c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8024aea:	f7fb fca4 	bl	8020436 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(&hlptim2, LPTIM2_PERIOD);
 8024aee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8024af2:	495f      	ldr	r1, [pc, #380]	; (8024c70 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8024af4:	485f      	ldr	r0, [pc, #380]	; (8024c74 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8024af6:	f7fb fc9e 	bl	8020436 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(&hlptim3, LPTIM3_PERIOD);
 8024afa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8024afe:	495e      	ldr	r1, [pc, #376]	; (8024c78 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8024b00:	485e      	ldr	r0, [pc, #376]	; (8024c7c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8024b02:	f7fb fc98 	bl	8020436 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 8024b06:	4b5e      	ldr	r3, [pc, #376]	; (8024c80 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8024b08:	461a      	mov	r2, r3
 8024b0a:	2300      	movs	r3, #0
 8024b0c:	6013      	str	r3, [r2, #0]
 8024b0e:	6053      	str	r3, [r2, #4]
 8024b10:	6093      	str	r3, [r2, #8]
 8024b12:	485b      	ldr	r0, [pc, #364]	; (8024c80 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8024b14:	f7fb fc82 	bl	802041c <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 8024b18:	4b5a      	ldr	r3, [pc, #360]	; (8024c84 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8024b1a:	461a      	mov	r2, r3
 8024b1c:	2300      	movs	r3, #0
 8024b1e:	6013      	str	r3, [r2, #0]
 8024b20:	6053      	str	r3, [r2, #4]
 8024b22:	6093      	str	r3, [r2, #8]
 8024b24:	4857      	ldr	r0, [pc, #348]	; (8024c84 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8024b26:	f7fb fc79 	bl	802041c <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 8024b2a:	4b57      	ldr	r3, [pc, #348]	; (8024c88 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8024b2c:	461a      	mov	r2, r3
 8024b2e:	2300      	movs	r3, #0
 8024b30:	6013      	str	r3, [r2, #0]
 8024b32:	6053      	str	r3, [r2, #4]
 8024b34:	6093      	str	r3, [r2, #8]
 8024b36:	4854      	ldr	r0, [pc, #336]	; (8024c88 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8024b38:	f7fb fc70 	bl	802041c <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8024b3c:	4b50      	ldr	r3, [pc, #320]	; (8024c80 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8024b3e:	9300      	str	r3, [sp, #0]
 8024b40:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8024b44:	2200      	movs	r2, #0
 8024b46:	4951      	ldr	r1, [pc, #324]	; (8024c8c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8024b48:	4851      	ldr	r0, [pc, #324]	; (8024c90 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8024b4a:	f7ed fc8a 	bl	8012462 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8024b4e:	4b4d      	ldr	r3, [pc, #308]	; (8024c84 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8024b50:	9300      	str	r3, [sp, #0]
 8024b52:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8024b56:	2200      	movs	r2, #0
 8024b58:	494e      	ldr	r1, [pc, #312]	; (8024c94 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8024b5a:	484f      	ldr	r0, [pc, #316]	; (8024c98 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8024b5c:	f7ed fc81 	bl	8012462 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8024b60:	4b49      	ldr	r3, [pc, #292]	; (8024c88 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8024b62:	9300      	str	r3, [sp, #0]
 8024b64:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8024b68:	2208      	movs	r2, #8
 8024b6a:	494c      	ldr	r1, [pc, #304]	; (8024c9c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8024b6c:	484c      	ldr	r0, [pc, #304]	; (8024ca0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8024b6e:	f7ed fc78 	bl	8012462 <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
};
 8024b72:	4c4c      	ldr	r4, [pc, #304]	; (8024ca4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8024b74:	4b46      	ldr	r3, [pc, #280]	; (8024c90 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8024b76:	9300      	str	r3, [sp, #0]
 8024b78:	4b3c      	ldr	r3, [pc, #240]	; (8024c6c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8024b7a:	4a4b      	ldr	r2, [pc, #300]	; (8024ca8 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8024b7c:	494b      	ldr	r1, [pc, #300]	; (8024cac <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8024b7e:	4620      	mov	r0, r4
 8024b80:	f7ed fcb7 	bl	80124f2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8024b84:	342c      	adds	r4, #44	; 0x2c
 8024b86:	4b44      	ldr	r3, [pc, #272]	; (8024c98 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8024b88:	9300      	str	r3, [sp, #0]
 8024b8a:	4b3a      	ldr	r3, [pc, #232]	; (8024c74 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8024b8c:	4a48      	ldr	r2, [pc, #288]	; (8024cb0 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8024b8e:	4949      	ldr	r1, [pc, #292]	; (8024cb4 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8024b90:	4620      	mov	r0, r4
 8024b92:	f7ed fcae 	bl	80124f2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8024b96:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8024b9a:	4b41      	ldr	r3, [pc, #260]	; (8024ca0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8024b9c:	9300      	str	r3, [sp, #0]
 8024b9e:	4b37      	ldr	r3, [pc, #220]	; (8024c7c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8024ba0:	4a45      	ldr	r2, [pc, #276]	; (8024cb8 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8024ba2:	4946      	ldr	r1, [pc, #280]	; (8024cbc <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8024ba4:	f7ed fca5 	bl	80124f2 <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
		{PF11, Instance(&peripherals[0], ADC_CHANNEL_2)},
 8024ba8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8024bac:	4a44      	ldr	r2, [pc, #272]	; (8024cc0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8024bae:	493d      	ldr	r1, [pc, #244]	; (8024ca4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8024bb0:	4618      	mov	r0, r3
 8024bb2:	f7ed fcd4 	bl	801255e <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8024bb6:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8024bba:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8024bbe:	4941      	ldr	r1, [pc, #260]	; (8024cc4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8024bc0:	4618      	mov	r0, r3
 8024bc2:	f7fb ff27 	bl	8020a14 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PA6, Instance(&peripherals[0], ADC_CHANNEL_3)}
 8024bc6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8024bca:	4a3f      	ldr	r2, [pc, #252]	; (8024cc8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8024bcc:	4935      	ldr	r1, [pc, #212]	; (8024ca4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8024bce:	4618      	mov	r0, r3
 8024bd0:	f7ed fcc5 	bl	801255e <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8024bd4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8024bd8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8024bdc:	3314      	adds	r3, #20
 8024bde:	493b      	ldr	r1, [pc, #236]	; (8024ccc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8024be0:	4618      	mov	r0, r3
 8024be2:	f7fb ff17 	bl	8020a14 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8024be6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8024bea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8024bee:	2302      	movs	r3, #2
 8024bf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8024bf4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8024bf8:	4618      	mov	r0, r3
 8024bfa:	f7fb ff28 	bl	8020a4e <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 8024bfe:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8024c02:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8024c06:	9300      	str	r3, [sp, #0]
 8024c08:	4613      	mov	r3, r2
 8024c0a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8024c0e:	ca06      	ldmia	r2, {r1, r2}
 8024c10:	482f      	ldr	r0, [pc, #188]	; (8024cd0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8024c12:	f7fb ff33 	bl	8020a7c <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8024c16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	f7fb ff23 	bl	8020a66 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
 8024c20:	e058      	b.n	8024cd4 <_Z41__static_initialization_and_destruction_0ii+0x424>
 8024c22:	bf00      	nop
 8024c24:	24000ff4 	.word	0x24000ff4
 8024c28:	24000fec 	.word	0x24000fec
 8024c2c:	24000a5c 	.word	0x24000a5c
 8024c30:	240011e8 	.word	0x240011e8
 8024c34:	08026b74 	.word	0x08026b74
 8024c38:	24000db4 	.word	0x24000db4
 8024c3c:	08026b7c 	.word	0x08026b7c
 8024c40:	24000ddc 	.word	0x24000ddc
 8024c44:	24001200 	.word	0x24001200
 8024c48:	24001218 	.word	0x24001218
 8024c4c:	24000dac 	.word	0x24000dac
 8024c50:	24000da4 	.word	0x24000da4
 8024c54:	24000af4 	.word	0x24000af4
 8024c58:	24001230 	.word	0x24001230
 8024c5c:	24000e5c 	.word	0x24000e5c
 8024c60:	240008e0 	.word	0x240008e0
 8024c64:	24001248 	.word	0x24001248
 8024c68:	240006ec 	.word	0x240006ec
 8024c6c:	240012c0 	.word	0x240012c0
 8024c70:	24000724 	.word	0x24000724
 8024c74:	240012c8 	.word	0x240012c8
 8024c78:	2400075c 	.word	0x2400075c
 8024c7c:	240012d0 	.word	0x240012d0
 8024c80:	240012d8 	.word	0x240012d8
 8024c84:	240012e4 	.word	0x240012e4
 8024c88:	240012f0 	.word	0x240012f0
 8024c8c:	40022000 	.word	0x40022000
 8024c90:	240012fc 	.word	0x240012fc
 8024c94:	40022100 	.word	0x40022100
 8024c98:	24001314 	.word	0x24001314
 8024c9c:	58026000 	.word	0x58026000
 8024ca0:	2400132c 	.word	0x2400132c
 8024ca4:	24001344 	.word	0x24001344
 8024ca8:	24001260 	.word	0x24001260
 8024cac:	2400019c 	.word	0x2400019c
 8024cb0:	24001280 	.word	0x24001280
 8024cb4:	2400020c 	.word	0x2400020c
 8024cb8:	240012a0 	.word	0x240012a0
 8024cbc:	2400027c 	.word	0x2400027c
 8024cc0:	08600004 	.word	0x08600004
 8024cc4:	24000ec4 	.word	0x24000ec4
 8024cc8:	0c900008 	.word	0x0c900008
 8024ccc:	24000e8c 	.word	0x24000e8c
 8024cd0:	240013c8 	.word	0x240013c8
	{PE0.gpio_pin, Instance()}
 8024cd4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8024cd8:	2200      	movs	r2, #0
 8024cda:	601a      	str	r2, [r3, #0]
 8024cdc:	605a      	str	r2, [r3, #4]
 8024cde:	609a      	str	r2, [r3, #8]
 8024ce0:	60da      	str	r2, [r3, #12]
 8024ce2:	611a      	str	r2, [r3, #16]
 8024ce4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8024ce8:	4618      	mov	r0, r3
 8024cea:	f7f3 fa62 	bl	80181b2 <_ZN17ExternalInterrupt8InstanceC1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8024cee:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8024cf2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8024cf6:	493b      	ldr	r1, [pc, #236]	; (8024de4 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 8024cf8:	4618      	mov	r0, r3
 8024cfa:	f7fb ff2f 	bl	8020b5c <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>
 8024cfe:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8024d02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8024d06:	2301      	movs	r3, #1
 8024d08:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8024d0c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8024d10:	4618      	mov	r0, r3
 8024d12:	f7fb ff3f 	bl	8020b94 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 8024d16:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8024d1a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8024d1e:	9300      	str	r3, [sp, #0]
 8024d20:	4613      	mov	r3, r2
 8024d22:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8024d26:	ca06      	ldmia	r2, {r1, r2}
 8024d28:	482f      	ldr	r0, [pc, #188]	; (8024de8 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8024d2a:	f7fb ff4a 	bl	8020bc2 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 8024d2e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8024d32:	4618      	mov	r0, r3
 8024d34:	f7fb ff3a 	bl	8020bac <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
};
 8024d38:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 8024d3c:	3418      	adds	r4, #24
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8024d3e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8024d42:	429c      	cmp	r4, r3
 8024d44:	d004      	beq.n	8024d50 <_Z41__static_initialization_and_destruction_0ii+0x4a0>
};
 8024d46:	3c18      	subs	r4, #24
 8024d48:	4620      	mov	r0, r4
 8024d4a:	f7f3 fa74 	bl	8018236 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8024d4e:	e7f6      	b.n	8024d3e <_Z41__static_initialization_and_destruction_0ii+0x48e>
	{PE0.gpio_pin, Instance()}
 8024d50:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8024d54:	4618      	mov	r0, r3
 8024d56:	f7f3 fa3d 	bl	80181d4 <_ZN17ExternalInterrupt8InstanceD1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8024d5a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024d5e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d138      	bne.n	8024dda <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8024d68:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8024d6c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8024d70:	681b      	ldr	r3, [r3, #0]
 8024d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024d76:	4293      	cmp	r3, r2
 8024d78:	d12f      	bne.n	8024dda <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8024d7a:	481b      	ldr	r0, [pc, #108]	; (8024de8 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8024d7c:	f7fb fc0a 	bl	8020594 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<Pin, ADC::Instance> ADC::available_instances = {
 8024d80:	481a      	ldr	r0, [pc, #104]	; (8024dec <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 8024d82:	f7fb fbfa 	bl	802057a <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
ADC::Peripheral ADC::peripherals[3] = {
 8024d86:	4c1a      	ldr	r4, [pc, #104]	; (8024df0 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 8024d88:	4b1a      	ldr	r3, [pc, #104]	; (8024df4 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8024d8a:	429c      	cmp	r4, r3
 8024d8c:	d004      	beq.n	8024d98 <_Z41__static_initialization_and_destruction_0ii+0x4e8>
 8024d8e:	3c2c      	subs	r4, #44	; 0x2c
 8024d90:	4620      	mov	r0, r4
 8024d92:	f7fb fbe4 	bl	802055e <_ZN3ADC10PeripheralD1Ev>
 8024d96:	e7f7      	b.n	8024d88 <_Z41__static_initialization_and_destruction_0ii+0x4d8>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8024d98:	4817      	ldr	r0, [pc, #92]	; (8024df8 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8024d9a:	f7ed fb9c 	bl	80124d6 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8024d9e:	4817      	ldr	r0, [pc, #92]	; (8024dfc <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8024da0:	f7ed fb99 	bl	80124d6 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8024da4:	4816      	ldr	r0, [pc, #88]	; (8024e00 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8024da6:	f7ed fb96 	bl	80124d6 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 8024daa:	4816      	ldr	r0, [pc, #88]	; (8024e04 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8024dac:	f7ed fe86 	bl	8012abc <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 8024db0:	4815      	ldr	r0, [pc, #84]	; (8024e08 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8024db2:	f7ed fe83 	bl	8012abc <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 8024db6:	4815      	ldr	r0, [pc, #84]	; (8024e0c <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8024db8:	f7ed fe80 	bl	8012abc <_ZNSt6vectorImSaImEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8024dbc:	4814      	ldr	r0, [pc, #80]	; (8024e10 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8024dbe:	f7fb fbc1 	bl	8020544 <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8024dc2:	4814      	ldr	r0, [pc, #80]	; (8024e14 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8024dc4:	f7fb fbb1 	bl	802052a <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 8024dc8:	4813      	ldr	r0, [pc, #76]	; (8024e18 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8024dca:	f7fb fb7b 	bl	80204c4 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8024dce:	4813      	ldr	r0, [pc, #76]	; (8024e1c <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 8024dd0:	f7fb fb78 	bl	80204c4 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8024dd4:	4812      	ldr	r0, [pc, #72]	; (8024e20 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8024dd6:	f7fb fb42 	bl	802045e <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
};
 8024dda:	bf00      	nop
 8024ddc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8024de0:	46bd      	mov	sp, r7
 8024de2:	bd90      	pop	{r4, r7, pc}
 8024de4:	240010f8 	.word	0x240010f8
 8024de8:	240013e0 	.word	0x240013e0
 8024dec:	240013c8 	.word	0x240013c8
 8024df0:	240013c8 	.word	0x240013c8
 8024df4:	24001344 	.word	0x24001344
 8024df8:	2400132c 	.word	0x2400132c
 8024dfc:	24001314 	.word	0x24001314
 8024e00:	240012fc 	.word	0x240012fc
 8024e04:	240012f0 	.word	0x240012f0
 8024e08:	240012e4 	.word	0x240012e4
 8024e0c:	240012d8 	.word	0x240012d8
 8024e10:	24001248 	.word	0x24001248
 8024e14:	24001230 	.word	0x24001230
 8024e18:	24001218 	.word	0x24001218
 8024e1c:	24001200 	.word	0x24001200
 8024e20:	240011e8 	.word	0x240011e8

08024e24 <_GLOBAL__sub_I__ZN7Encoder13pin_timer_mapE>:
 8024e24:	b580      	push	{r7, lr}
 8024e26:	af00      	add	r7, sp, #0
 8024e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024e2c:	2001      	movs	r0, #1
 8024e2e:	f7ff fd3f 	bl	80248b0 <_Z41__static_initialization_and_destruction_0ii>
 8024e32:	bd80      	pop	{r7, pc}

08024e34 <_GLOBAL__sub_D__ZN7Encoder13pin_timer_mapE>:
 8024e34:	b580      	push	{r7, lr}
 8024e36:	af00      	add	r7, sp, #0
 8024e38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024e3c:	2000      	movs	r0, #0
 8024e3e:	f7ff fd37 	bl	80248b0 <_Z41__static_initialization_and_destruction_0ii>
 8024e42:	bd80      	pop	{r7, pc}

08024e44 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8024e44:	b580      	push	{r7, lr}
 8024e46:	b082      	sub	sp, #8
 8024e48:	af00      	add	r7, sp, #0
 8024e4a:	6078      	str	r0, [r7, #4]
 8024e4c:	6878      	ldr	r0, [r7, #4]
 8024e4e:	f000 f86d 	bl	8024f2c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 8024e52:	687b      	ldr	r3, [r7, #4]
 8024e54:	4618      	mov	r0, r3
 8024e56:	3708      	adds	r7, #8
 8024e58:	46bd      	mov	sp, r7
 8024e5a:	bd80      	pop	{r7, pc}

08024e5c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8024e5c:	b580      	push	{r7, lr}
 8024e5e:	b082      	sub	sp, #8
 8024e60:	af00      	add	r7, sp, #0
 8024e62:	6078      	str	r0, [r7, #4]
 8024e64:	687b      	ldr	r3, [r7, #4]
 8024e66:	4618      	mov	r0, r3
 8024e68:	f000 f84b 	bl	8024f02 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8024e6c:	687b      	ldr	r3, [r7, #4]
 8024e6e:	4618      	mov	r0, r3
 8024e70:	3708      	adds	r7, #8
 8024e72:	46bd      	mov	sp, r7
 8024e74:	bd80      	pop	{r7, pc}

08024e76 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8024e76:	b580      	push	{r7, lr}
 8024e78:	b082      	sub	sp, #8
 8024e7a:	af00      	add	r7, sp, #0
 8024e7c:	6078      	str	r0, [r7, #4]
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	4618      	mov	r0, r3
 8024e82:	f7ff ffeb 	bl	8024e5c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	4618      	mov	r0, r3
 8024e8a:	3708      	adds	r7, #8
 8024e8c:	46bd      	mov	sp, r7
 8024e8e:	bd80      	pop	{r7, pc}

08024e90 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8024e90:	b580      	push	{r7, lr}
 8024e92:	b082      	sub	sp, #8
 8024e94:	af00      	add	r7, sp, #0
 8024e96:	6078      	str	r0, [r7, #4]
 8024e98:	687b      	ldr	r3, [r7, #4]
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	f000 f851 	bl	8024f42 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8024ea0:	687b      	ldr	r3, [r7, #4]
 8024ea2:	4618      	mov	r0, r3
 8024ea4:	3708      	adds	r7, #8
 8024ea6:	46bd      	mov	sp, r7
 8024ea8:	bd80      	pop	{r7, pc}

08024eaa <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 8024eaa:	b580      	push	{r7, lr}
 8024eac:	b082      	sub	sp, #8
 8024eae:	af00      	add	r7, sp, #0
 8024eb0:	6078      	str	r0, [r7, #4]
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	f000 f8ac 	bl	8025012 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	4618      	mov	r0, r3
 8024ebe:	3708      	adds	r7, #8
 8024ec0:	46bd      	mov	sp, r7
 8024ec2:	bd80      	pop	{r7, pc}

08024ec4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TIM_HandleTypeDef* timer, uint32_t channel_rising, uint32_t channel_falling) :
 8024ec4:	b480      	push	{r7}
 8024ec6:	b085      	sub	sp, #20
 8024ec8:	af00      	add	r7, sp, #0
 8024eca:	60f8      	str	r0, [r7, #12]
 8024ecc:	1d38      	adds	r0, r7, #4
 8024ece:	e880 0006 	stmia.w	r0, {r1, r2}
 8024ed2:	603b      	str	r3, [r7, #0]
	pin(pin),
	timer(timer),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 8024ed4:	68fb      	ldr	r3, [r7, #12]
 8024ed6:	3304      	adds	r3, #4
 8024ed8:	1d3a      	adds	r2, r7, #4
 8024eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024ede:	e883 0003 	stmia.w	r3, {r0, r1}
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	683a      	ldr	r2, [r7, #0]
 8024ee6:	60da      	str	r2, [r3, #12]
 8024ee8:	68fb      	ldr	r3, [r7, #12]
 8024eea:	69ba      	ldr	r2, [r7, #24]
 8024eec:	611a      	str	r2, [r3, #16]
 8024eee:	68fb      	ldr	r3, [r7, #12]
 8024ef0:	69fa      	ldr	r2, [r7, #28]
 8024ef2:	615a      	str	r2, [r3, #20]
	{ }
 8024ef4:	68fb      	ldr	r3, [r7, #12]
 8024ef6:	4618      	mov	r0, r3
 8024ef8:	3714      	adds	r7, #20
 8024efa:	46bd      	mov	sp, r7
 8024efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f00:	4770      	bx	lr

08024f02 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8024f02:	b580      	push	{r7, lr}
 8024f04:	b082      	sub	sp, #8
 8024f06:	af00      	add	r7, sp, #0
 8024f08:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8024f0a:	6878      	ldr	r0, [r7, #4]
 8024f0c:	f000 f896 	bl	802503c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	4618      	mov	r0, r3
 8024f14:	f7dd f888 	bl	8002028 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 8024f18:	687b      	ldr	r3, [r7, #4]
 8024f1a:	3304      	adds	r3, #4
 8024f1c:	4618      	mov	r0, r3
 8024f1e:	f7dc faab 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	4618      	mov	r0, r3
 8024f26:	3708      	adds	r7, #8
 8024f28:	46bd      	mov	sp, r7
 8024f2a:	bd80      	pop	{r7, pc}

08024f2c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024f2c:	b480      	push	{r7}
 8024f2e:	b083      	sub	sp, #12
 8024f30:	af00      	add	r7, sp, #0
 8024f32:	6078      	str	r0, [r7, #4]
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	4618      	mov	r0, r3
 8024f38:	370c      	adds	r7, #12
 8024f3a:	46bd      	mov	sp, r7
 8024f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f40:	4770      	bx	lr

08024f42 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8024f42:	b580      	push	{r7, lr}
 8024f44:	b082      	sub	sp, #8
 8024f46:	af00      	add	r7, sp, #0
 8024f48:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8024f4a:	6878      	ldr	r0, [r7, #4]
 8024f4c:	f000 f8a1 	bl	8025092 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8024f50:	4603      	mov	r3, r0
 8024f52:	4619      	mov	r1, r3
 8024f54:	6878      	ldr	r0, [r7, #4]
 8024f56:	f000 f87d 	bl	8025054 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	4618      	mov	r0, r3
 8024f5e:	f7ff ff71 	bl	8024e44 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	4618      	mov	r0, r3
 8024f66:	3708      	adds	r7, #8
 8024f68:	46bd      	mov	sp, r7
 8024f6a:	bd80      	pop	{r7, pc}

08024f6c <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8024f6c:	b580      	push	{r7, lr}
 8024f6e:	b082      	sub	sp, #8
 8024f70:	af00      	add	r7, sp, #0
 8024f72:	6078      	str	r0, [r7, #4]
 8024f74:	6878      	ldr	r0, [r7, #4]
 8024f76:	f000 f898 	bl	80250aa <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	4618      	mov	r0, r3
 8024f7e:	3708      	adds	r7, #8
 8024f80:	46bd      	mov	sp, r7
 8024f82:	bd80      	pop	{r7, pc}

08024f84 <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8024f84:	b480      	push	{r7}
 8024f86:	b083      	sub	sp, #12
 8024f88:	af00      	add	r7, sp, #0
 8024f8a:	6078      	str	r0, [r7, #4]
 8024f8c:	687b      	ldr	r3, [r7, #4]
 8024f8e:	4618      	mov	r0, r3
 8024f90:	370c      	adds	r7, #12
 8024f92:	46bd      	mov	sp, r7
 8024f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f98:	4770      	bx	lr

08024f9a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 8024f9a:	b5b0      	push	{r4, r5, r7, lr}
 8024f9c:	b086      	sub	sp, #24
 8024f9e:	af00      	add	r7, sp, #0
 8024fa0:	60f8      	str	r0, [r7, #12]
 8024fa2:	1d38      	adds	r0, r7, #4
 8024fa4:	e880 0006 	stmia.w	r0, {r1, r2}
 8024fa8:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8024faa:	68fc      	ldr	r4, [r7, #12]
 8024fac:	f107 0314 	add.w	r3, r7, #20
 8024fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024fb2:	4618      	mov	r0, r3
 8024fb4:	f000 f884 	bl	80250c0 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 8024fb8:	f107 0314 	add.w	r3, r7, #20
 8024fbc:	461a      	mov	r2, r3
 8024fbe:	6839      	ldr	r1, [r7, #0]
 8024fc0:	4620      	mov	r0, r4
 8024fc2:	f000 f88b 	bl	80250dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 8024fc6:	f107 0314 	add.w	r3, r7, #20
 8024fca:	4618      	mov	r0, r3
 8024fcc:	f7ff ffda 	bl	8024f84 <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8024fd0:	68fc      	ldr	r4, [r7, #12]
 8024fd2:	1d3b      	adds	r3, r7, #4
 8024fd4:	4618      	mov	r0, r3
 8024fd6:	f000 f89f 	bl	8025118 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 8024fda:	4605      	mov	r5, r0
 8024fdc:	1d3b      	adds	r3, r7, #4
 8024fde:	4618      	mov	r0, r3
 8024fe0:	f000 f8a6 	bl	8025130 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 8024fe4:	4603      	mov	r3, r0
 8024fe6:	461a      	mov	r2, r3
 8024fe8:	4629      	mov	r1, r5
 8024fea:	4620      	mov	r0, r4
 8024fec:	f000 f8b2 	bl	8025154 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 8024ff0:	68fb      	ldr	r3, [r7, #12]
 8024ff2:	4618      	mov	r0, r3
 8024ff4:	3718      	adds	r7, #24
 8024ff6:	46bd      	mov	sp, r7
 8024ff8:	bdb0      	pop	{r4, r5, r7, pc}

08024ffa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8024ffa:	b580      	push	{r7, lr}
 8024ffc:	b082      	sub	sp, #8
 8024ffe:	af00      	add	r7, sp, #0
 8025000:	6078      	str	r0, [r7, #4]
 8025002:	6878      	ldr	r0, [r7, #4]
 8025004:	f000 f8d2 	bl	80251ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 8025008:	687b      	ldr	r3, [r7, #4]
 802500a:	4618      	mov	r0, r3
 802500c:	3708      	adds	r7, #8
 802500e:	46bd      	mov	sp, r7
 8025010:	bd80      	pop	{r7, pc}

08025012 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8025012:	b580      	push	{r7, lr}
 8025014:	b082      	sub	sp, #8
 8025016:	af00      	add	r7, sp, #0
 8025018:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 802501a:	6878      	ldr	r0, [r7, #4]
 802501c:	f000 f8f0 	bl	8025200 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8025020:	4603      	mov	r3, r0
 8025022:	4619      	mov	r1, r3
 8025024:	6878      	ldr	r0, [r7, #4]
 8025026:	f000 f8cc 	bl	80251c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 802502a:	687b      	ldr	r3, [r7, #4]
 802502c:	4618      	mov	r0, r3
 802502e:	f7ff ffe4 	bl	8024ffa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8025032:	687b      	ldr	r3, [r7, #4]
 8025034:	4618      	mov	r0, r3
 8025036:	3708      	adds	r7, #8
 8025038:	46bd      	mov	sp, r7
 802503a:	bd80      	pop	{r7, pc}

0802503c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 802503c:	b580      	push	{r7, lr}
 802503e:	b082      	sub	sp, #8
 8025040:	af00      	add	r7, sp, #0
 8025042:	6078      	str	r0, [r7, #4]
 8025044:	6878      	ldr	r0, [r7, #4]
 8025046:	f000 f92e 	bl	80252a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	4618      	mov	r0, r3
 802504e:	3708      	adds	r7, #8
 8025050:	46bd      	mov	sp, r7
 8025052:	bd80      	pop	{r7, pc}

08025054 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8025054:	b580      	push	{r7, lr}
 8025056:	b084      	sub	sp, #16
 8025058:	af00      	add	r7, sp, #0
 802505a:	6078      	str	r0, [r7, #4]
 802505c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 802505e:	683b      	ldr	r3, [r7, #0]
 8025060:	2b00      	cmp	r3, #0
 8025062:	d012      	beq.n	802508a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8025064:	6838      	ldr	r0, [r7, #0]
 8025066:	f000 f929 	bl	80252bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 802506a:	4603      	mov	r3, r0
 802506c:	4619      	mov	r1, r3
 802506e:	6878      	ldr	r0, [r7, #4]
 8025070:	f7ff fff0 	bl	8025054 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8025074:	6838      	ldr	r0, [r7, #0]
 8025076:	f000 f92d 	bl	80252d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 802507a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 802507c:	6839      	ldr	r1, [r7, #0]
 802507e:	6878      	ldr	r0, [r7, #4]
 8025080:	f000 f934 	bl	80252ec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8025084:	68fb      	ldr	r3, [r7, #12]
 8025086:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8025088:	e7e9      	b.n	802505e <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 802508a:	bf00      	nop
 802508c:	3710      	adds	r7, #16
 802508e:	46bd      	mov	sp, r7
 8025090:	bd80      	pop	{r7, pc}

08025092 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8025092:	b480      	push	{r7}
 8025094:	b083      	sub	sp, #12
 8025096:	af00      	add	r7, sp, #0
 8025098:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 802509a:	687b      	ldr	r3, [r7, #4]
 802509c:	689b      	ldr	r3, [r3, #8]
 802509e:	4618      	mov	r0, r3
 80250a0:	370c      	adds	r7, #12
 80250a2:	46bd      	mov	sp, r7
 80250a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250a8:	4770      	bx	lr

080250aa <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80250aa:	b480      	push	{r7}
 80250ac:	b083      	sub	sp, #12
 80250ae:	af00      	add	r7, sp, #0
 80250b0:	6078      	str	r0, [r7, #4]
 80250b2:	687b      	ldr	r3, [r7, #4]
 80250b4:	4618      	mov	r0, r3
 80250b6:	370c      	adds	r7, #12
 80250b8:	46bd      	mov	sp, r7
 80250ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250be:	4770      	bx	lr

080250c0 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80250c0:	b580      	push	{r7, lr}
 80250c2:	b082      	sub	sp, #8
 80250c4:	af00      	add	r7, sp, #0
 80250c6:	6078      	str	r0, [r7, #4]
 80250c8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80250ca:	6839      	ldr	r1, [r7, #0]
 80250cc:	6878      	ldr	r0, [r7, #4]
 80250ce:	f000 f91e 	bl	802530e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	4618      	mov	r0, r3
 80250d6:	3708      	adds	r7, #8
 80250d8:	46bd      	mov	sp, r7
 80250da:	bd80      	pop	{r7, pc}

080250dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 80250dc:	b590      	push	{r4, r7, lr}
 80250de:	b087      	sub	sp, #28
 80250e0:	af00      	add	r7, sp, #0
 80250e2:	60f8      	str	r0, [r7, #12]
 80250e4:	60b9      	str	r1, [r7, #8]
 80250e6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80250e8:	68fc      	ldr	r4, [r7, #12]
 80250ea:	f107 0314 	add.w	r3, r7, #20
 80250ee:	6879      	ldr	r1, [r7, #4]
 80250f0:	4618      	mov	r0, r3
 80250f2:	f000 f918 	bl	8025326 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 80250f6:	f107 0314 	add.w	r3, r7, #20
 80250fa:	461a      	mov	r2, r3
 80250fc:	68b9      	ldr	r1, [r7, #8]
 80250fe:	4620      	mov	r0, r4
 8025100:	f000 f91e 	bl	8025340 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 8025104:	f107 0314 	add.w	r3, r7, #20
 8025108:	4618      	mov	r0, r3
 802510a:	f000 f84f 	bl	80251ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 802510e:	68fb      	ldr	r3, [r7, #12]
 8025110:	4618      	mov	r0, r3
 8025112:	371c      	adds	r7, #28
 8025114:	46bd      	mov	sp, r7
 8025116:	bd90      	pop	{r4, r7, pc}

08025118 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8025118:	b480      	push	{r7}
 802511a:	b083      	sub	sp, #12
 802511c:	af00      	add	r7, sp, #0
 802511e:	6078      	str	r0, [r7, #4]
 8025120:	687b      	ldr	r3, [r7, #4]
 8025122:	681b      	ldr	r3, [r3, #0]
 8025124:	4618      	mov	r0, r3
 8025126:	370c      	adds	r7, #12
 8025128:	46bd      	mov	sp, r7
 802512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802512e:	4770      	bx	lr

08025130 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8025130:	b590      	push	{r4, r7, lr}
 8025132:	b083      	sub	sp, #12
 8025134:	af00      	add	r7, sp, #0
 8025136:	6078      	str	r0, [r7, #4]
 8025138:	6878      	ldr	r0, [r7, #4]
 802513a:	f7ff ffed 	bl	8025118 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 802513e:	4604      	mov	r4, r0
 8025140:	6878      	ldr	r0, [r7, #4]
 8025142:	f000 f91a 	bl	802537a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 8025146:	4603      	mov	r3, r0
 8025148:	00db      	lsls	r3, r3, #3
 802514a:	4423      	add	r3, r4
 802514c:	4618      	mov	r0, r3
 802514e:	370c      	adds	r7, #12
 8025150:	46bd      	mov	sp, r7
 8025152:	bd90      	pop	{r4, r7, pc}

08025154 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8025154:	b580      	push	{r7, lr}
 8025156:	b088      	sub	sp, #32
 8025158:	af00      	add	r7, sp, #0
 802515a:	60f8      	str	r0, [r7, #12]
 802515c:	60b9      	str	r1, [r7, #8]
 802515e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8025160:	f107 0314 	add.w	r3, r7, #20
 8025164:	68f9      	ldr	r1, [r7, #12]
 8025166:	4618      	mov	r0, r3
 8025168:	f000 f913 	bl	8025392 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 802516c:	68ba      	ldr	r2, [r7, #8]
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	429a      	cmp	r2, r3
 8025172:	d017      	beq.n	80251a4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8025174:	68f8      	ldr	r0, [r7, #12]
 8025176:	f000 f91b 	bl	80253b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 802517a:	4603      	mov	r3, r0
 802517c:	61fb      	str	r3, [r7, #28]
 802517e:	f107 021c 	add.w	r2, r7, #28
 8025182:	f107 0318 	add.w	r3, r7, #24
 8025186:	4611      	mov	r1, r2
 8025188:	4618      	mov	r0, r3
 802518a:	f000 f87c 	bl	8025286 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 802518e:	f107 0314 	add.w	r3, r7, #20
 8025192:	68ba      	ldr	r2, [r7, #8]
 8025194:	69b9      	ldr	r1, [r7, #24]
 8025196:	68f8      	ldr	r0, [r7, #12]
 8025198:	f000 f91b 	bl	80253d2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 802519c:	68bb      	ldr	r3, [r7, #8]
 802519e:	3308      	adds	r3, #8
 80251a0:	60bb      	str	r3, [r7, #8]
 80251a2:	e7e3      	b.n	802516c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 80251a4:	bf00      	nop
 80251a6:	3720      	adds	r7, #32
 80251a8:	46bd      	mov	sp, r7
 80251aa:	bd80      	pop	{r7, pc}

080251ac <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80251ac:	b480      	push	{r7}
 80251ae:	b083      	sub	sp, #12
 80251b0:	af00      	add	r7, sp, #0
 80251b2:	6078      	str	r0, [r7, #4]
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	4618      	mov	r0, r3
 80251b8:	370c      	adds	r7, #12
 80251ba:	46bd      	mov	sp, r7
 80251bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251c0:	4770      	bx	lr

080251c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80251c2:	b580      	push	{r7, lr}
 80251c4:	b084      	sub	sp, #16
 80251c6:	af00      	add	r7, sp, #0
 80251c8:	6078      	str	r0, [r7, #4]
 80251ca:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80251cc:	683b      	ldr	r3, [r7, #0]
 80251ce:	2b00      	cmp	r3, #0
 80251d0:	d012      	beq.n	80251f8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 80251d2:	6838      	ldr	r0, [r7, #0]
 80251d4:	f000 f930 	bl	8025438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80251d8:	4603      	mov	r3, r0
 80251da:	4619      	mov	r1, r3
 80251dc:	6878      	ldr	r0, [r7, #4]
 80251de:	f7ff fff0 	bl	80251c2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 80251e2:	6838      	ldr	r0, [r7, #0]
 80251e4:	f000 f934 	bl	8025450 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80251e8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80251ea:	6839      	ldr	r1, [r7, #0]
 80251ec:	6878      	ldr	r0, [r7, #4]
 80251ee:	f000 f93b 	bl	8025468 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 80251f2:	68fb      	ldr	r3, [r7, #12]
 80251f4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80251f6:	e7e9      	b.n	80251cc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 80251f8:	bf00      	nop
 80251fa:	3710      	adds	r7, #16
 80251fc:	46bd      	mov	sp, r7
 80251fe:	bd80      	pop	{r7, pc}

08025200 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8025200:	b480      	push	{r7}
 8025202:	b083      	sub	sp, #12
 8025204:	af00      	add	r7, sp, #0
 8025206:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8025208:	687b      	ldr	r3, [r7, #4]
 802520a:	689b      	ldr	r3, [r3, #8]
 802520c:	4618      	mov	r0, r3
 802520e:	370c      	adds	r7, #12
 8025210:	46bd      	mov	sp, r7
 8025212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025216:	4770      	bx	lr

08025218 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8025218:	b580      	push	{r7, lr}
 802521a:	b082      	sub	sp, #8
 802521c:	af00      	add	r7, sp, #0
 802521e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	3310      	adds	r3, #16
 8025224:	4618      	mov	r0, r3
 8025226:	f000 f930 	bl	802548a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 802522a:	4603      	mov	r3, r0
 802522c:	4618      	mov	r0, r3
 802522e:	3708      	adds	r7, #8
 8025230:	46bd      	mov	sp, r7
 8025232:	bd80      	pop	{r7, pc}

08025234 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8025234:	b480      	push	{r7}
 8025236:	b083      	sub	sp, #12
 8025238:	af00      	add	r7, sp, #0
 802523a:	6078      	str	r0, [r7, #4]
 802523c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 802523e:	687b      	ldr	r3, [r7, #4]
 8025240:	681a      	ldr	r2, [r3, #0]
 8025242:	683b      	ldr	r3, [r7, #0]
 8025244:	681b      	ldr	r3, [r3, #0]
 8025246:	429a      	cmp	r2, r3
 8025248:	bf0c      	ite	eq
 802524a:	2301      	moveq	r3, #1
 802524c:	2300      	movne	r3, #0
 802524e:	b2db      	uxtb	r3, r3
 8025250:	4618      	mov	r0, r3
 8025252:	370c      	adds	r7, #12
 8025254:	46bd      	mov	sp, r7
 8025256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802525a:	4770      	bx	lr

0802525c <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 802525c:	b480      	push	{r7}
 802525e:	b085      	sub	sp, #20
 8025260:	af00      	add	r7, sp, #0
 8025262:	60f8      	str	r0, [r7, #12]
 8025264:	60b9      	str	r1, [r7, #8]
 8025266:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8025268:	68bb      	ldr	r3, [r7, #8]
 802526a:	681a      	ldr	r2, [r3, #0]
 802526c:	687b      	ldr	r3, [r7, #4]
 802526e:	681b      	ldr	r3, [r3, #0]
 8025270:	429a      	cmp	r2, r3
 8025272:	bf34      	ite	cc
 8025274:	2301      	movcc	r3, #1
 8025276:	2300      	movcs	r3, #0
 8025278:	b2db      	uxtb	r3, r3
 802527a:	4618      	mov	r0, r3
 802527c:	3714      	adds	r7, #20
 802527e:	46bd      	mov	sp, r7
 8025280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025284:	4770      	bx	lr

08025286 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8025286:	b480      	push	{r7}
 8025288:	b083      	sub	sp, #12
 802528a:	af00      	add	r7, sp, #0
 802528c:	6078      	str	r0, [r7, #4]
 802528e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8025290:	683b      	ldr	r3, [r7, #0]
 8025292:	681a      	ldr	r2, [r3, #0]
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	601a      	str	r2, [r3, #0]
 8025298:	687b      	ldr	r3, [r7, #4]
 802529a:	4618      	mov	r0, r3
 802529c:	370c      	adds	r7, #12
 802529e:	46bd      	mov	sp, r7
 80252a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a4:	4770      	bx	lr

080252a6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 80252a6:	b480      	push	{r7}
 80252a8:	b083      	sub	sp, #12
 80252aa:	af00      	add	r7, sp, #0
 80252ac:	6078      	str	r0, [r7, #4]
 80252ae:	687b      	ldr	r3, [r7, #4]
 80252b0:	4618      	mov	r0, r3
 80252b2:	370c      	adds	r7, #12
 80252b4:	46bd      	mov	sp, r7
 80252b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ba:	4770      	bx	lr

080252bc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80252bc:	b480      	push	{r7}
 80252be:	b083      	sub	sp, #12
 80252c0:	af00      	add	r7, sp, #0
 80252c2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	68db      	ldr	r3, [r3, #12]
 80252c8:	4618      	mov	r0, r3
 80252ca:	370c      	adds	r7, #12
 80252cc:	46bd      	mov	sp, r7
 80252ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252d2:	4770      	bx	lr

080252d4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80252d4:	b480      	push	{r7}
 80252d6:	b083      	sub	sp, #12
 80252d8:	af00      	add	r7, sp, #0
 80252da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	689b      	ldr	r3, [r3, #8]
 80252e0:	4618      	mov	r0, r3
 80252e2:	370c      	adds	r7, #12
 80252e4:	46bd      	mov	sp, r7
 80252e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252ea:	4770      	bx	lr

080252ec <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80252ec:	b580      	push	{r7, lr}
 80252ee:	b082      	sub	sp, #8
 80252f0:	af00      	add	r7, sp, #0
 80252f2:	6078      	str	r0, [r7, #4]
 80252f4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80252f6:	6839      	ldr	r1, [r7, #0]
 80252f8:	6878      	ldr	r0, [r7, #4]
 80252fa:	f000 fa25 	bl	8025748 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80252fe:	6839      	ldr	r1, [r7, #0]
 8025300:	6878      	ldr	r0, [r7, #4]
 8025302:	f000 fa36 	bl	8025772 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 8025306:	bf00      	nop
 8025308:	3708      	adds	r7, #8
 802530a:	46bd      	mov	sp, r7
 802530c:	bd80      	pop	{r7, pc}

0802530e <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 802530e:	b480      	push	{r7}
 8025310:	b083      	sub	sp, #12
 8025312:	af00      	add	r7, sp, #0
 8025314:	6078      	str	r0, [r7, #4]
 8025316:	6039      	str	r1, [r7, #0]
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	4618      	mov	r0, r3
 802531c:	370c      	adds	r7, #12
 802531e:	46bd      	mov	sp, r7
 8025320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025324:	4770      	bx	lr

08025326 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8025326:	b580      	push	{r7, lr}
 8025328:	b082      	sub	sp, #8
 802532a:	af00      	add	r7, sp, #0
 802532c:	6078      	str	r0, [r7, #4]
 802532e:	6039      	str	r1, [r7, #0]
 8025330:	6878      	ldr	r0, [r7, #4]
 8025332:	f000 fa30 	bl	8025796 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	4618      	mov	r0, r3
 802533a:	3708      	adds	r7, #8
 802533c:	46bd      	mov	sp, r7
 802533e:	bd80      	pop	{r7, pc}

08025340 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8025340:	b580      	push	{r7, lr}
 8025342:	b084      	sub	sp, #16
 8025344:	af00      	add	r7, sp, #0
 8025346:	60f8      	str	r0, [r7, #12]
 8025348:	60b9      	str	r1, [r7, #8]
 802534a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 802534c:	6878      	ldr	r0, [r7, #4]
 802534e:	f000 fa2d 	bl	80257ac <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8025352:	4603      	mov	r3, r0
 8025354:	4619      	mov	r1, r3
 8025356:	68f8      	ldr	r0, [r7, #12]
 8025358:	f000 fa33 	bl	80257c2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 802535c:	68fb      	ldr	r3, [r7, #12]
 802535e:	68b9      	ldr	r1, [r7, #8]
 8025360:	4618      	mov	r0, r3
 8025362:	f000 fa3c 	bl	80257de <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 8025366:	68fb      	ldr	r3, [r7, #12]
 8025368:	3304      	adds	r3, #4
 802536a:	4618      	mov	r0, r3
 802536c:	f7dc f884 	bl	8001478 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8025370:	68fb      	ldr	r3, [r7, #12]
 8025372:	4618      	mov	r0, r3
 8025374:	3710      	adds	r7, #16
 8025376:	46bd      	mov	sp, r7
 8025378:	bd80      	pop	{r7, pc}

0802537a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 802537a:	b480      	push	{r7}
 802537c:	b083      	sub	sp, #12
 802537e:	af00      	add	r7, sp, #0
 8025380:	6078      	str	r0, [r7, #4]
 8025382:	687b      	ldr	r3, [r7, #4]
 8025384:	685b      	ldr	r3, [r3, #4]
 8025386:	4618      	mov	r0, r3
 8025388:	370c      	adds	r7, #12
 802538a:	46bd      	mov	sp, r7
 802538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025390:	4770      	bx	lr

08025392 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 8025392:	b480      	push	{r7}
 8025394:	b083      	sub	sp, #12
 8025396:	af00      	add	r7, sp, #0
 8025398:	6078      	str	r0, [r7, #4]
 802539a:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	683a      	ldr	r2, [r7, #0]
 80253a0:	601a      	str	r2, [r3, #0]
 80253a2:	687b      	ldr	r3, [r7, #4]
 80253a4:	4618      	mov	r0, r3
 80253a6:	370c      	adds	r7, #12
 80253a8:	46bd      	mov	sp, r7
 80253aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253ae:	4770      	bx	lr

080253b0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80253b0:	b580      	push	{r7, lr}
 80253b2:	b084      	sub	sp, #16
 80253b4:	af00      	add	r7, sp, #0
 80253b6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80253b8:	687b      	ldr	r3, [r7, #4]
 80253ba:	1d1a      	adds	r2, r3, #4
 80253bc:	f107 030c 	add.w	r3, r7, #12
 80253c0:	4611      	mov	r1, r2
 80253c2:	4618      	mov	r0, r3
 80253c4:	f000 f9b1 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80253c8:	68fb      	ldr	r3, [r7, #12]
 80253ca:	4618      	mov	r0, r3
 80253cc:	3710      	adds	r7, #16
 80253ce:	46bd      	mov	sp, r7
 80253d0:	bd80      	pop	{r7, pc}

080253d2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80253d2:	b5b0      	push	{r4, r5, r7, lr}
 80253d4:	b08a      	sub	sp, #40	; 0x28
 80253d6:	af02      	add	r7, sp, #8
 80253d8:	60f8      	str	r0, [r7, #12]
 80253da:	60b9      	str	r1, [r7, #8]
 80253dc:	607a      	str	r2, [r7, #4]
 80253de:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80253e0:	f107 0318 	add.w	r3, r7, #24
 80253e4:	6879      	ldr	r1, [r7, #4]
 80253e6:	4618      	mov	r0, r3
 80253e8:	f000 fa05 	bl	80257f6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 80253ec:	4603      	mov	r3, r0
 80253ee:	f107 0010 	add.w	r0, r7, #16
 80253f2:	68ba      	ldr	r2, [r7, #8]
 80253f4:	68f9      	ldr	r1, [r7, #12]
 80253f6:	f000 f862 	bl	80254be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 80253fa:	697b      	ldr	r3, [r7, #20]
 80253fc:	2b00      	cmp	r3, #0
 80253fe:	d00f      	beq.n	8025420 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8025400:	693c      	ldr	r4, [r7, #16]
 8025402:	697d      	ldr	r5, [r7, #20]
 8025404:	6878      	ldr	r0, [r7, #4]
 8025406:	f000 fa02 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 802540a:	4602      	mov	r2, r0
 802540c:	683b      	ldr	r3, [r7, #0]
 802540e:	9300      	str	r3, [sp, #0]
 8025410:	4613      	mov	r3, r2
 8025412:	462a      	mov	r2, r5
 8025414:	4621      	mov	r1, r4
 8025416:	68f8      	ldr	r0, [r7, #12]
 8025418:	f000 fa04 	bl	8025824 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 802541c:	4603      	mov	r3, r0
			  __node_gen);
 802541e:	e007      	b.n	8025430 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8025420:	693a      	ldr	r2, [r7, #16]
 8025422:	f107 031c 	add.w	r3, r7, #28
 8025426:	4611      	mov	r1, r2
 8025428:	4618      	mov	r0, r3
 802542a:	f000 f97e 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 802542e:	69fb      	ldr	r3, [r7, #28]
    }
 8025430:	4618      	mov	r0, r3
 8025432:	3720      	adds	r7, #32
 8025434:	46bd      	mov	sp, r7
 8025436:	bdb0      	pop	{r4, r5, r7, pc}

08025438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8025438:	b480      	push	{r7}
 802543a:	b083      	sub	sp, #12
 802543c:	af00      	add	r7, sp, #0
 802543e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	68db      	ldr	r3, [r3, #12]
 8025444:	4618      	mov	r0, r3
 8025446:	370c      	adds	r7, #12
 8025448:	46bd      	mov	sp, r7
 802544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802544e:	4770      	bx	lr

08025450 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8025450:	b480      	push	{r7}
 8025452:	b083      	sub	sp, #12
 8025454:	af00      	add	r7, sp, #0
 8025456:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8025458:	687b      	ldr	r3, [r7, #4]
 802545a:	689b      	ldr	r3, [r3, #8]
 802545c:	4618      	mov	r0, r3
 802545e:	370c      	adds	r7, #12
 8025460:	46bd      	mov	sp, r7
 8025462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025466:	4770      	bx	lr

08025468 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8025468:	b580      	push	{r7, lr}
 802546a:	b082      	sub	sp, #8
 802546c:	af00      	add	r7, sp, #0
 802546e:	6078      	str	r0, [r7, #4]
 8025470:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8025472:	6839      	ldr	r1, [r7, #0]
 8025474:	6878      	ldr	r0, [r7, #4]
 8025476:	f000 fa1e 	bl	80258b6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 802547a:	6839      	ldr	r1, [r7, #0]
 802547c:	6878      	ldr	r0, [r7, #4]
 802547e:	f000 fa2f 	bl	80258e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8025482:	bf00      	nop
 8025484:	3708      	adds	r7, #8
 8025486:	46bd      	mov	sp, r7
 8025488:	bd80      	pop	{r7, pc}

0802548a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 802548a:	b580      	push	{r7, lr}
 802548c:	b082      	sub	sp, #8
 802548e:	af00      	add	r7, sp, #0
 8025490:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8025492:	6878      	ldr	r0, [r7, #4]
 8025494:	f000 fa36 	bl	8025904 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8025498:	4603      	mov	r3, r0
 802549a:	4618      	mov	r0, r3
 802549c:	3708      	adds	r7, #8
 802549e:	46bd      	mov	sp, r7
 80254a0:	bd80      	pop	{r7, pc}

080254a2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 80254a2:	b580      	push	{r7, lr}
 80254a4:	b082      	sub	sp, #8
 80254a6:	af00      	add	r7, sp, #0
 80254a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80254aa:	687b      	ldr	r3, [r7, #4]
 80254ac:	3310      	adds	r3, #16
 80254ae:	4618      	mov	r0, r3
 80254b0:	f000 fa3f 	bl	8025932 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 80254b4:	4603      	mov	r3, r0
 80254b6:	4618      	mov	r0, r3
 80254b8:	3708      	adds	r7, #8
 80254ba:	46bd      	mov	sp, r7
 80254bc:	bd80      	pop	{r7, pc}

080254be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80254be:	b590      	push	{r4, r7, lr}
 80254c0:	b08d      	sub	sp, #52	; 0x34
 80254c2:	af00      	add	r7, sp, #0
 80254c4:	60f8      	str	r0, [r7, #12]
 80254c6:	60b9      	str	r1, [r7, #8]
 80254c8:	607a      	str	r2, [r7, #4]
 80254ca:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80254cc:	1d3b      	adds	r3, r7, #4
 80254ce:	4618      	mov	r0, r3
 80254d0:	f000 fa4c 	bl	802596c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 80254d4:	4603      	mov	r3, r0
 80254d6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80254d8:	69bc      	ldr	r4, [r7, #24]
 80254da:	68b8      	ldr	r0, [r7, #8]
 80254dc:	f000 fa1d 	bl	802591a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 80254e0:	4603      	mov	r3, r0
 80254e2:	429c      	cmp	r4, r3
 80254e4:	bf0c      	ite	eq
 80254e6:	2301      	moveq	r3, #1
 80254e8:	2300      	movne	r3, #0
 80254ea:	b2db      	uxtb	r3, r3
 80254ec:	2b00      	cmp	r3, #0
 80254ee:	d030      	beq.n	8025552 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 80254f0:	68b8      	ldr	r0, [r7, #8]
 80254f2:	f000 fa4c 	bl	802598e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 80254f6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80254f8:	2b00      	cmp	r3, #0
 80254fa:	d013      	beq.n	8025524 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80254fc:	68bc      	ldr	r4, [r7, #8]
 80254fe:	68b8      	ldr	r0, [r7, #8]
 8025500:	f000 fa51 	bl	80259a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8025504:	4603      	mov	r3, r0
 8025506:	681b      	ldr	r3, [r3, #0]
 8025508:	4618      	mov	r0, r3
 802550a:	f000 fa58 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802550e:	4603      	mov	r3, r0
 8025510:	683a      	ldr	r2, [r7, #0]
 8025512:	4619      	mov	r1, r3
 8025514:	4620      	mov	r0, r4
 8025516:	f7ff fea1 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 802551a:	4603      	mov	r3, r0
 802551c:	2b00      	cmp	r3, #0
 802551e:	d001      	beq.n	8025524 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8025520:	2301      	movs	r3, #1
 8025522:	e000      	b.n	8025526 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 8025524:	2300      	movs	r3, #0
	  if (size() > 0
 8025526:	2b00      	cmp	r3, #0
 8025528:	d00c      	beq.n	8025544 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 802552a:	2300      	movs	r3, #0
 802552c:	61fb      	str	r3, [r7, #28]
 802552e:	68b8      	ldr	r0, [r7, #8]
 8025530:	f000 fa39 	bl	80259a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8025534:	4602      	mov	r2, r0
 8025536:	f107 031c 	add.w	r3, r7, #28
 802553a:	4619      	mov	r1, r3
 802553c:	68f8      	ldr	r0, [r7, #12]
 802553e:	f7ef fbc5 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8025542:	e0db      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8025544:	68fb      	ldr	r3, [r7, #12]
 8025546:	683a      	ldr	r2, [r7, #0]
 8025548:	68b9      	ldr	r1, [r7, #8]
 802554a:	4618      	mov	r0, r3
 802554c:	f000 fa43 	bl	80259d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8025550:	e0d4      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8025552:	68bc      	ldr	r4, [r7, #8]
 8025554:	69bb      	ldr	r3, [r7, #24]
 8025556:	4618      	mov	r0, r3
 8025558:	f000 fa31 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802555c:	4603      	mov	r3, r0
 802555e:	461a      	mov	r2, r3
 8025560:	6839      	ldr	r1, [r7, #0]
 8025562:	4620      	mov	r0, r4
 8025564:	f7ff fe7a 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025568:	4603      	mov	r3, r0
 802556a:	2b00      	cmp	r3, #0
 802556c:	d057      	beq.n	802561e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 802556e:	69bb      	ldr	r3, [r7, #24]
 8025570:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8025572:	69bc      	ldr	r4, [r7, #24]
 8025574:	68b8      	ldr	r0, [r7, #8]
 8025576:	f000 fab3 	bl	8025ae0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 802557a:	4603      	mov	r3, r0
 802557c:	681b      	ldr	r3, [r3, #0]
 802557e:	429c      	cmp	r4, r3
 8025580:	bf0c      	ite	eq
 8025582:	2301      	moveq	r3, #1
 8025584:	2300      	movne	r3, #0
 8025586:	b2db      	uxtb	r3, r3
 8025588:	2b00      	cmp	r3, #0
 802558a:	d00d      	beq.n	80255a8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 802558c:	68b8      	ldr	r0, [r7, #8]
 802558e:	f000 faa7 	bl	8025ae0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8025592:	4604      	mov	r4, r0
 8025594:	68b8      	ldr	r0, [r7, #8]
 8025596:	f000 faa3 	bl	8025ae0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 802559a:	4603      	mov	r3, r0
 802559c:	461a      	mov	r2, r3
 802559e:	4621      	mov	r1, r4
 80255a0:	68f8      	ldr	r0, [r7, #12]
 80255a2:	f7ef fc3a 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80255a6:	e0a9      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80255a8:	68bc      	ldr	r4, [r7, #8]
 80255aa:	f107 0314 	add.w	r3, r7, #20
 80255ae:	4618      	mov	r0, r3
 80255b0:	f000 faa2 	bl	8025af8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 80255b4:	4603      	mov	r3, r0
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	4618      	mov	r0, r3
 80255ba:	f000 fa00 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80255be:	4603      	mov	r3, r0
 80255c0:	683a      	ldr	r2, [r7, #0]
 80255c2:	4619      	mov	r1, r3
 80255c4:	4620      	mov	r0, r4
 80255c6:	f7ff fe49 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 80255ca:	4603      	mov	r3, r0
 80255cc:	2b00      	cmp	r3, #0
 80255ce:	d01f      	beq.n	8025610 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80255d0:	697b      	ldr	r3, [r7, #20]
 80255d2:	4618      	mov	r0, r3
 80255d4:	f7ff ff30 	bl	8025438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80255d8:	4603      	mov	r3, r0
 80255da:	2b00      	cmp	r3, #0
 80255dc:	bf0c      	ite	eq
 80255de:	2301      	moveq	r3, #1
 80255e0:	2300      	movne	r3, #0
 80255e2:	b2db      	uxtb	r3, r3
 80255e4:	2b00      	cmp	r3, #0
 80255e6:	d00a      	beq.n	80255fe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80255e8:	2300      	movs	r3, #0
 80255ea:	623b      	str	r3, [r7, #32]
 80255ec:	f107 0214 	add.w	r2, r7, #20
 80255f0:	f107 0320 	add.w	r3, r7, #32
 80255f4:	4619      	mov	r1, r3
 80255f6:	68f8      	ldr	r0, [r7, #12]
 80255f8:	f7ef fb68 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80255fc:	e07e      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80255fe:	f107 0218 	add.w	r2, r7, #24
 8025602:	f107 0318 	add.w	r3, r7, #24
 8025606:	4619      	mov	r1, r3
 8025608:	68f8      	ldr	r0, [r7, #12]
 802560a:	f7ef fc06 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 802560e:	e075      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8025610:	68fb      	ldr	r3, [r7, #12]
 8025612:	683a      	ldr	r2, [r7, #0]
 8025614:	68b9      	ldr	r1, [r7, #8]
 8025616:	4618      	mov	r0, r3
 8025618:	f000 f9dd 	bl	80259d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 802561c:	e06e      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 802561e:	68bc      	ldr	r4, [r7, #8]
 8025620:	69bb      	ldr	r3, [r7, #24]
 8025622:	4618      	mov	r0, r3
 8025624:	f000 f9cb 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8025628:	4603      	mov	r3, r0
 802562a:	683a      	ldr	r2, [r7, #0]
 802562c:	4619      	mov	r1, r3
 802562e:	4620      	mov	r0, r4
 8025630:	f7ff fe14 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025634:	4603      	mov	r3, r0
 8025636:	2b00      	cmp	r3, #0
 8025638:	d056      	beq.n	80256e8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 802563a:	69bb      	ldr	r3, [r7, #24]
 802563c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 802563e:	69bc      	ldr	r4, [r7, #24]
 8025640:	68b8      	ldr	r0, [r7, #8]
 8025642:	f000 f9b0 	bl	80259a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8025646:	4603      	mov	r3, r0
 8025648:	681b      	ldr	r3, [r3, #0]
 802564a:	429c      	cmp	r4, r3
 802564c:	bf0c      	ite	eq
 802564e:	2301      	moveq	r3, #1
 8025650:	2300      	movne	r3, #0
 8025652:	b2db      	uxtb	r3, r3
 8025654:	2b00      	cmp	r3, #0
 8025656:	d00c      	beq.n	8025672 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8025658:	2300      	movs	r3, #0
 802565a:	627b      	str	r3, [r7, #36]	; 0x24
 802565c:	68b8      	ldr	r0, [r7, #8]
 802565e:	f000 f9a2 	bl	80259a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8025662:	4602      	mov	r2, r0
 8025664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8025668:	4619      	mov	r1, r3
 802566a:	68f8      	ldr	r0, [r7, #12]
 802566c:	f7ef fb2e 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8025670:	e044      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8025672:	68bc      	ldr	r4, [r7, #8]
 8025674:	f107 0310 	add.w	r3, r7, #16
 8025678:	4618      	mov	r0, r3
 802567a:	f000 fa4e 	bl	8025b1a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 802567e:	4603      	mov	r3, r0
 8025680:	681b      	ldr	r3, [r3, #0]
 8025682:	4618      	mov	r0, r3
 8025684:	f000 f99b 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8025688:	4603      	mov	r3, r0
 802568a:	461a      	mov	r2, r3
 802568c:	6839      	ldr	r1, [r7, #0]
 802568e:	4620      	mov	r0, r4
 8025690:	f7ff fde4 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025694:	4603      	mov	r3, r0
 8025696:	2b00      	cmp	r3, #0
 8025698:	d01f      	beq.n	80256da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 802569a:	69bb      	ldr	r3, [r7, #24]
 802569c:	4618      	mov	r0, r3
 802569e:	f7ff fecb 	bl	8025438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80256a2:	4603      	mov	r3, r0
 80256a4:	2b00      	cmp	r3, #0
 80256a6:	bf0c      	ite	eq
 80256a8:	2301      	moveq	r3, #1
 80256aa:	2300      	movne	r3, #0
 80256ac:	b2db      	uxtb	r3, r3
 80256ae:	2b00      	cmp	r3, #0
 80256b0:	d00a      	beq.n	80256c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 80256b2:	2300      	movs	r3, #0
 80256b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80256b6:	f107 0218 	add.w	r2, r7, #24
 80256ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80256be:	4619      	mov	r1, r3
 80256c0:	68f8      	ldr	r0, [r7, #12]
 80256c2:	f7ef fb03 	bl	8014ccc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80256c6:	e019      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80256c8:	f107 0210 	add.w	r2, r7, #16
 80256cc:	f107 0310 	add.w	r3, r7, #16
 80256d0:	4619      	mov	r1, r3
 80256d2:	68f8      	ldr	r0, [r7, #12]
 80256d4:	f7ef fba1 	bl	8014e1a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80256d8:	e010      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80256da:	68fb      	ldr	r3, [r7, #12]
 80256dc:	683a      	ldr	r2, [r7, #0]
 80256de:	68b9      	ldr	r1, [r7, #8]
 80256e0:	4618      	mov	r0, r3
 80256e2:	f000 f978 	bl	80259d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80256e6:	e009      	b.n	80256fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80256e8:	2300      	movs	r3, #0
 80256ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80256ec:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80256f0:	f107 0318 	add.w	r3, r7, #24
 80256f4:	4619      	mov	r1, r3
 80256f6:	68f8      	ldr	r0, [r7, #12]
 80256f8:	f7ef fbca 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80256fc:	68f8      	ldr	r0, [r7, #12]
 80256fe:	3734      	adds	r7, #52	; 0x34
 8025700:	46bd      	mov	sp, r7
 8025702:	bd90      	pop	{r4, r7, pc}

08025704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 8025704:	b580      	push	{r7, lr}
 8025706:	b084      	sub	sp, #16
 8025708:	af00      	add	r7, sp, #0
 802570a:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 802570c:	6878      	ldr	r0, [r7, #4]
 802570e:	f000 fa15 	bl	8025b3c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8025712:	4602      	mov	r2, r0
 8025714:	f107 030c 	add.w	r3, r7, #12
 8025718:	4611      	mov	r1, r2
 802571a:	4618      	mov	r0, r3
 802571c:	f000 f86b 	bl	80257f6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8025720:	4603      	mov	r3, r0
      }
 8025722:	4618      	mov	r0, r3
 8025724:	3710      	adds	r7, #16
 8025726:	46bd      	mov	sp, r7
 8025728:	bd80      	pop	{r7, pc}

0802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802572a:	b480      	push	{r7}
 802572c:	b083      	sub	sp, #12
 802572e:	af00      	add	r7, sp, #0
 8025730:	6078      	str	r0, [r7, #4]
 8025732:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8025734:	687b      	ldr	r3, [r7, #4]
 8025736:	683a      	ldr	r2, [r7, #0]
 8025738:	601a      	str	r2, [r3, #0]
 802573a:	687b      	ldr	r3, [r7, #4]
 802573c:	4618      	mov	r0, r3
 802573e:	370c      	adds	r7, #12
 8025740:	46bd      	mov	sp, r7
 8025742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025746:	4770      	bx	lr

08025748 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8025748:	b590      	push	{r4, r7, lr}
 802574a:	b083      	sub	sp, #12
 802574c:	af00      	add	r7, sp, #0
 802574e:	6078      	str	r0, [r7, #4]
 8025750:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8025752:	6878      	ldr	r0, [r7, #4]
 8025754:	f000 fa00 	bl	8025b58 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8025758:	4604      	mov	r4, r0
 802575a:	6838      	ldr	r0, [r7, #0]
 802575c:	f7ff fd5c 	bl	8025218 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 8025760:	4603      	mov	r3, r0
 8025762:	4619      	mov	r1, r3
 8025764:	4620      	mov	r0, r4
 8025766:	f000 fa02 	bl	8025b6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 802576a:	bf00      	nop
 802576c:	370c      	adds	r7, #12
 802576e:	46bd      	mov	sp, r7
 8025770:	bd90      	pop	{r4, r7, pc}

08025772 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8025772:	b580      	push	{r7, lr}
 8025774:	b082      	sub	sp, #8
 8025776:	af00      	add	r7, sp, #0
 8025778:	6078      	str	r0, [r7, #4]
 802577a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 802577c:	6878      	ldr	r0, [r7, #4]
 802577e:	f000 f9eb 	bl	8025b58 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8025782:	4603      	mov	r3, r0
 8025784:	2201      	movs	r2, #1
 8025786:	6839      	ldr	r1, [r7, #0]
 8025788:	4618      	mov	r0, r3
 802578a:	f000 f9fc 	bl	8025b86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 802578e:	bf00      	nop
 8025790:	3708      	adds	r7, #8
 8025792:	46bd      	mov	sp, r7
 8025794:	bd80      	pop	{r7, pc}

08025796 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8025796:	b480      	push	{r7}
 8025798:	b083      	sub	sp, #12
 802579a:	af00      	add	r7, sp, #0
 802579c:	6078      	str	r0, [r7, #4]
 802579e:	687b      	ldr	r3, [r7, #4]
 80257a0:	4618      	mov	r0, r3
 80257a2:	370c      	adds	r7, #12
 80257a4:	46bd      	mov	sp, r7
 80257a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257aa:	4770      	bx	lr

080257ac <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80257ac:	b480      	push	{r7}
 80257ae:	b083      	sub	sp, #12
 80257b0:	af00      	add	r7, sp, #0
 80257b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80257b4:	687b      	ldr	r3, [r7, #4]
 80257b6:	4618      	mov	r0, r3
 80257b8:	370c      	adds	r7, #12
 80257ba:	46bd      	mov	sp, r7
 80257bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257c0:	4770      	bx	lr

080257c2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80257c2:	b580      	push	{r7, lr}
 80257c4:	b082      	sub	sp, #8
 80257c6:	af00      	add	r7, sp, #0
 80257c8:	6078      	str	r0, [r7, #4]
 80257ca:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80257cc:	6839      	ldr	r1, [r7, #0]
 80257ce:	6878      	ldr	r0, [r7, #4]
 80257d0:	f000 f9f8 	bl	8025bc4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 80257d4:	687b      	ldr	r3, [r7, #4]
 80257d6:	4618      	mov	r0, r3
 80257d8:	3708      	adds	r7, #8
 80257da:	46bd      	mov	sp, r7
 80257dc:	bd80      	pop	{r7, pc}

080257de <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80257de:	b480      	push	{r7}
 80257e0:	b083      	sub	sp, #12
 80257e2:	af00      	add	r7, sp, #0
 80257e4:	6078      	str	r0, [r7, #4]
 80257e6:	6039      	str	r1, [r7, #0]
      { }
 80257e8:	687b      	ldr	r3, [r7, #4]
 80257ea:	4618      	mov	r0, r3
 80257ec:	370c      	adds	r7, #12
 80257ee:	46bd      	mov	sp, r7
 80257f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257f4:	4770      	bx	lr

080257f6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 80257f6:	b480      	push	{r7}
 80257f8:	b083      	sub	sp, #12
 80257fa:	af00      	add	r7, sp, #0
 80257fc:	6078      	str	r0, [r7, #4]
 80257fe:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8025800:	683b      	ldr	r3, [r7, #0]
 8025802:	4618      	mov	r0, r3
 8025804:	370c      	adds	r7, #12
 8025806:	46bd      	mov	sp, r7
 8025808:	f85d 7b04 	ldr.w	r7, [sp], #4
 802580c:	4770      	bx	lr

0802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 802580e:	b480      	push	{r7}
 8025810:	b083      	sub	sp, #12
 8025812:	af00      	add	r7, sp, #0
 8025814:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025816:	687b      	ldr	r3, [r7, #4]
 8025818:	4618      	mov	r0, r3
 802581a:	370c      	adds	r7, #12
 802581c:	46bd      	mov	sp, r7
 802581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025822:	4770      	bx	lr

08025824 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8025824:	b5b0      	push	{r4, r5, r7, lr}
 8025826:	b088      	sub	sp, #32
 8025828:	af00      	add	r7, sp, #0
 802582a:	60f8      	str	r0, [r7, #12]
 802582c:	60b9      	str	r1, [r7, #8]
 802582e:	607a      	str	r2, [r7, #4]
 8025830:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8025832:	68bb      	ldr	r3, [r7, #8]
 8025834:	2b00      	cmp	r3, #0
 8025836:	d11a      	bne.n	802586e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8025838:	68f8      	ldr	r0, [r7, #12]
 802583a:	f000 f86e 	bl	802591a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 802583e:	4602      	mov	r2, r0
 8025840:	687b      	ldr	r3, [r7, #4]
 8025842:	4293      	cmp	r3, r2
 8025844:	d013      	beq.n	802586e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8025846:	68fc      	ldr	r4, [r7, #12]
 8025848:	f107 0310 	add.w	r3, r7, #16
 802584c:	6839      	ldr	r1, [r7, #0]
 802584e:	4618      	mov	r0, r3
 8025850:	f7ff ffd1 	bl	80257f6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8025854:	4605      	mov	r5, r0
 8025856:	6878      	ldr	r0, [r7, #4]
 8025858:	f000 f8b1 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 802585c:	4603      	mov	r3, r0
 802585e:	461a      	mov	r2, r3
 8025860:	4629      	mov	r1, r5
 8025862:	4620      	mov	r0, r4
 8025864:	f7ff fcfa 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025868:	4603      	mov	r3, r0
 802586a:	2b00      	cmp	r3, #0
 802586c:	d001      	beq.n	8025872 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 802586e:	2301      	movs	r3, #1
 8025870:	e000      	b.n	8025874 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8025872:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8025874:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8025876:	6838      	ldr	r0, [r7, #0]
 8025878:	f7ff ffc9 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 802587c:	4603      	mov	r3, r0
 802587e:	4619      	mov	r1, r3
 8025880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025882:	f000 f9ab 	bl	8025bdc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8025886:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8025888:	68fb      	ldr	r3, [r7, #12]
 802588a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 802588c:	7ff8      	ldrb	r0, [r7, #31]
 802588e:	687a      	ldr	r2, [r7, #4]
 8025890:	69b9      	ldr	r1, [r7, #24]
 8025892:	f000 fc72 	bl	802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8025896:	68fb      	ldr	r3, [r7, #12]
 8025898:	695b      	ldr	r3, [r3, #20]
 802589a:	1c5a      	adds	r2, r3, #1
 802589c:	68fb      	ldr	r3, [r7, #12]
 802589e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80258a0:	f107 0314 	add.w	r3, r7, #20
 80258a4:	69b9      	ldr	r1, [r7, #24]
 80258a6:	4618      	mov	r0, r3
 80258a8:	f7ff ff3f 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80258ac:	697b      	ldr	r3, [r7, #20]
      }
 80258ae:	4618      	mov	r0, r3
 80258b0:	3720      	adds	r7, #32
 80258b2:	46bd      	mov	sp, r7
 80258b4:	bdb0      	pop	{r4, r5, r7, pc}

080258b6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80258b6:	b590      	push	{r4, r7, lr}
 80258b8:	b083      	sub	sp, #12
 80258ba:	af00      	add	r7, sp, #0
 80258bc:	6078      	str	r0, [r7, #4]
 80258be:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80258c0:	6878      	ldr	r0, [r7, #4]
 80258c2:	f000 f99f 	bl	8025c04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 80258c6:	4604      	mov	r4, r0
 80258c8:	6838      	ldr	r0, [r7, #0]
 80258ca:	f7ff fdea 	bl	80254a2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 80258ce:	4603      	mov	r3, r0
 80258d0:	4619      	mov	r1, r3
 80258d2:	4620      	mov	r0, r4
 80258d4:	f000 f9a1 	bl	8025c1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 80258d8:	bf00      	nop
 80258da:	370c      	adds	r7, #12
 80258dc:	46bd      	mov	sp, r7
 80258de:	bd90      	pop	{r4, r7, pc}

080258e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80258e0:	b580      	push	{r7, lr}
 80258e2:	b082      	sub	sp, #8
 80258e4:	af00      	add	r7, sp, #0
 80258e6:	6078      	str	r0, [r7, #4]
 80258e8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80258ea:	6878      	ldr	r0, [r7, #4]
 80258ec:	f000 f98a 	bl	8025c04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 80258f0:	4603      	mov	r3, r0
 80258f2:	2201      	movs	r2, #1
 80258f4:	6839      	ldr	r1, [r7, #0]
 80258f6:	4618      	mov	r0, r3
 80258f8:	f000 f99b 	bl	8025c32 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 80258fc:	bf00      	nop
 80258fe:	3708      	adds	r7, #8
 8025900:	46bd      	mov	sp, r7
 8025902:	bd80      	pop	{r7, pc}

08025904 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8025904:	b480      	push	{r7}
 8025906:	b083      	sub	sp, #12
 8025908:	af00      	add	r7, sp, #0
 802590a:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 802590c:	687b      	ldr	r3, [r7, #4]
 802590e:	4618      	mov	r0, r3
 8025910:	370c      	adds	r7, #12
 8025912:	46bd      	mov	sp, r7
 8025914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025918:	4770      	bx	lr

0802591a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 802591a:	b480      	push	{r7}
 802591c:	b083      	sub	sp, #12
 802591e:	af00      	add	r7, sp, #0
 8025920:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8025922:	687b      	ldr	r3, [r7, #4]
 8025924:	3304      	adds	r3, #4
 8025926:	4618      	mov	r0, r3
 8025928:	370c      	adds	r7, #12
 802592a:	46bd      	mov	sp, r7
 802592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025930:	4770      	bx	lr

08025932 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 8025932:	b580      	push	{r7, lr}
 8025934:	b082      	sub	sp, #8
 8025936:	af00      	add	r7, sp, #0
 8025938:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 802593a:	6878      	ldr	r0, [r7, #4]
 802593c:	f000 f998 	bl	8025c70 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8025940:	4603      	mov	r3, r0
 8025942:	4618      	mov	r0, r3
 8025944:	3708      	adds	r7, #8
 8025946:	46bd      	mov	sp, r7
 8025948:	bd80      	pop	{r7, pc}

0802594a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 802594a:	b580      	push	{r7, lr}
 802594c:	b082      	sub	sp, #8
 802594e:	af00      	add	r7, sp, #0
 8025950:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8025952:	6878      	ldr	r0, [r7, #4]
 8025954:	f000 f956 	bl	8025c04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8025958:	4603      	mov	r3, r0
 802595a:	2101      	movs	r1, #1
 802595c:	4618      	mov	r0, r3
 802595e:	f000 f992 	bl	8025c86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 8025962:	4603      	mov	r3, r0
 8025964:	4618      	mov	r0, r3
 8025966:	3708      	adds	r7, #8
 8025968:	46bd      	mov	sp, r7
 802596a:	bd80      	pop	{r7, pc}

0802596c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 802596c:	b580      	push	{r7, lr}
 802596e:	b084      	sub	sp, #16
 8025970:	af00      	add	r7, sp, #0
 8025972:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8025974:	687b      	ldr	r3, [r7, #4]
 8025976:	681a      	ldr	r2, [r3, #0]
 8025978:	f107 030c 	add.w	r3, r7, #12
 802597c:	4611      	mov	r1, r2
 802597e:	4618      	mov	r0, r3
 8025980:	f7ff fed3 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8025984:	68fb      	ldr	r3, [r7, #12]
 8025986:	4618      	mov	r0, r3
 8025988:	3710      	adds	r7, #16
 802598a:	46bd      	mov	sp, r7
 802598c:	bd80      	pop	{r7, pc}

0802598e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 802598e:	b480      	push	{r7}
 8025990:	b083      	sub	sp, #12
 8025992:	af00      	add	r7, sp, #0
 8025994:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8025996:	687b      	ldr	r3, [r7, #4]
 8025998:	695b      	ldr	r3, [r3, #20]
 802599a:	4618      	mov	r0, r3
 802599c:	370c      	adds	r7, #12
 802599e:	46bd      	mov	sp, r7
 80259a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259a4:	4770      	bx	lr

080259a6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80259a6:	b480      	push	{r7}
 80259a8:	b083      	sub	sp, #12
 80259aa:	af00      	add	r7, sp, #0
 80259ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80259ae:	687b      	ldr	r3, [r7, #4]
 80259b0:	3310      	adds	r3, #16
 80259b2:	4618      	mov	r0, r3
 80259b4:	370c      	adds	r7, #12
 80259b6:	46bd      	mov	sp, r7
 80259b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259bc:	4770      	bx	lr

080259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80259be:	b580      	push	{r7, lr}
 80259c0:	b082      	sub	sp, #8
 80259c2:	af00      	add	r7, sp, #0
 80259c4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80259c6:	6878      	ldr	r0, [r7, #4]
 80259c8:	f7ff fe9c 	bl	8025704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 80259cc:	4603      	mov	r3, r0
 80259ce:	4618      	mov	r0, r3
 80259d0:	3708      	adds	r7, #8
 80259d2:	46bd      	mov	sp, r7
 80259d4:	bd80      	pop	{r7, pc}

080259d6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80259d6:	b590      	push	{r4, r7, lr}
 80259d8:	b08b      	sub	sp, #44	; 0x2c
 80259da:	af00      	add	r7, sp, #0
 80259dc:	60f8      	str	r0, [r7, #12]
 80259de:	60b9      	str	r1, [r7, #8]
 80259e0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80259e2:	68b8      	ldr	r0, [r7, #8]
 80259e4:	f7ff fc0c 	bl	8025200 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 80259e8:	4603      	mov	r3, r0
 80259ea:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80259ec:	68b8      	ldr	r0, [r7, #8]
 80259ee:	f7ff ff94 	bl	802591a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 80259f2:	4603      	mov	r3, r0
 80259f4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80259f6:	2301      	movs	r3, #1
 80259f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80259fc:	69bb      	ldr	r3, [r7, #24]
 80259fe:	2b00      	cmp	r3, #0
 8025a00:	d020      	beq.n	8025a44 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8025a02:	69bb      	ldr	r3, [r7, #24]
 8025a04:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8025a06:	68bc      	ldr	r4, [r7, #8]
 8025a08:	69bb      	ldr	r3, [r7, #24]
 8025a0a:	4618      	mov	r0, r3
 8025a0c:	f7ff fe7a 	bl	8025704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8025a10:	4603      	mov	r3, r0
 8025a12:	461a      	mov	r2, r3
 8025a14:	6879      	ldr	r1, [r7, #4]
 8025a16:	4620      	mov	r0, r4
 8025a18:	f7ff fc20 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025a1c:	4603      	mov	r3, r0
 8025a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8025a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	d005      	beq.n	8025a36 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 8025a2a:	69bb      	ldr	r3, [r7, #24]
 8025a2c:	4618      	mov	r0, r3
 8025a2e:	f7ff fd0f 	bl	8025450 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8025a32:	4603      	mov	r3, r0
 8025a34:	e004      	b.n	8025a40 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 8025a36:	69bb      	ldr	r3, [r7, #24]
 8025a38:	4618      	mov	r0, r3
 8025a3a:	f7ff fcfd 	bl	8025438 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8025a3e:	4603      	mov	r3, r0
 8025a40:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8025a42:	e7db      	b.n	80259fc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8025a44:	697a      	ldr	r2, [r7, #20]
 8025a46:	f107 0310 	add.w	r3, r7, #16
 8025a4a:	4611      	mov	r1, r2
 8025a4c:	4618      	mov	r0, r3
 8025a4e:	f7ff fe6c 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8025a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8025a56:	2b00      	cmp	r3, #0
 8025a58:	d01d      	beq.n	8025a96 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8025a5a:	68b8      	ldr	r0, [r7, #8]
 8025a5c:	f000 f936 	bl	8025ccc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 8025a60:	4603      	mov	r3, r0
 8025a62:	61fb      	str	r3, [r7, #28]
 8025a64:	f107 021c 	add.w	r2, r7, #28
 8025a68:	f107 0310 	add.w	r3, r7, #16
 8025a6c:	4611      	mov	r1, r2
 8025a6e:	4618      	mov	r0, r3
 8025a70:	f7ff fbe0 	bl	8025234 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 8025a74:	4603      	mov	r3, r0
 8025a76:	2b00      	cmp	r3, #0
 8025a78:	d008      	beq.n	8025a8c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8025a7a:	f107 0214 	add.w	r2, r7, #20
 8025a7e:	f107 0318 	add.w	r3, r7, #24
 8025a82:	4619      	mov	r1, r3
 8025a84:	68f8      	ldr	r0, [r7, #12]
 8025a86:	f000 f932 	bl	8025cee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8025a8a:	e025      	b.n	8025ad8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8025a8c:	f107 0310 	add.w	r3, r7, #16
 8025a90:	4618      	mov	r0, r3
 8025a92:	f000 f831 	bl	8025af8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8025a96:	68bc      	ldr	r4, [r7, #8]
 8025a98:	693b      	ldr	r3, [r7, #16]
 8025a9a:	4618      	mov	r0, r3
 8025a9c:	f7ff ff8f 	bl	80259be <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8025aa0:	4603      	mov	r3, r0
 8025aa2:	687a      	ldr	r2, [r7, #4]
 8025aa4:	4619      	mov	r1, r3
 8025aa6:	4620      	mov	r0, r4
 8025aa8:	f7ff fbd8 	bl	802525c <_ZNKSt4lessImEclERKmS2_>
 8025aac:	4603      	mov	r3, r0
 8025aae:	2b00      	cmp	r3, #0
 8025ab0:	d008      	beq.n	8025ac4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8025ab2:	f107 0214 	add.w	r2, r7, #20
 8025ab6:	f107 0318 	add.w	r3, r7, #24
 8025aba:	4619      	mov	r1, r3
 8025abc:	68f8      	ldr	r0, [r7, #12]
 8025abe:	f000 f916 	bl	8025cee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8025ac2:	e009      	b.n	8025ad8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8025ac4:	2300      	movs	r3, #0
 8025ac6:	623b      	str	r3, [r7, #32]
 8025ac8:	f107 0220 	add.w	r2, r7, #32
 8025acc:	f107 0310 	add.w	r3, r7, #16
 8025ad0:	4619      	mov	r1, r3
 8025ad2:	68f8      	ldr	r0, [r7, #12]
 8025ad4:	f7ef f9dc 	bl	8014e90 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8025ad8:	68f8      	ldr	r0, [r7, #12]
 8025ada:	372c      	adds	r7, #44	; 0x2c
 8025adc:	46bd      	mov	sp, r7
 8025ade:	bd90      	pop	{r4, r7, pc}

08025ae0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8025ae0:	b480      	push	{r7}
 8025ae2:	b083      	sub	sp, #12
 8025ae4:	af00      	add	r7, sp, #0
 8025ae6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8025ae8:	687b      	ldr	r3, [r7, #4]
 8025aea:	330c      	adds	r3, #12
 8025aec:	4618      	mov	r0, r3
 8025aee:	370c      	adds	r7, #12
 8025af0:	46bd      	mov	sp, r7
 8025af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025af6:	4770      	bx	lr

08025af8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8025af8:	b580      	push	{r7, lr}
 8025afa:	b082      	sub	sp, #8
 8025afc:	af00      	add	r7, sp, #0
 8025afe:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8025b00:	687b      	ldr	r3, [r7, #4]
 8025b02:	681b      	ldr	r3, [r3, #0]
 8025b04:	4618      	mov	r0, r3
 8025b06:	f000 fb36 	bl	8026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8025b0a:	4602      	mov	r2, r0
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	601a      	str	r2, [r3, #0]
	return *this;
 8025b10:	687b      	ldr	r3, [r7, #4]
      }
 8025b12:	4618      	mov	r0, r3
 8025b14:	3708      	adds	r7, #8
 8025b16:	46bd      	mov	sp, r7
 8025b18:	bd80      	pop	{r7, pc}

08025b1a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8025b1a:	b580      	push	{r7, lr}
 8025b1c:	b082      	sub	sp, #8
 8025b1e:	af00      	add	r7, sp, #0
 8025b20:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8025b22:	687b      	ldr	r3, [r7, #4]
 8025b24:	681b      	ldr	r3, [r3, #0]
 8025b26:	4618      	mov	r0, r3
 8025b28:	f000 fb23 	bl	8026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8025b2c:	4602      	mov	r2, r0
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	601a      	str	r2, [r3, #0]
	return *this;
 8025b32:	687b      	ldr	r3, [r7, #4]
      }
 8025b34:	4618      	mov	r0, r3
 8025b36:	3708      	adds	r7, #8
 8025b38:	46bd      	mov	sp, r7
 8025b3a:	bd80      	pop	{r7, pc}

08025b3c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 8025b3c:	b580      	push	{r7, lr}
 8025b3e:	b082      	sub	sp, #8
 8025b40:	af00      	add	r7, sp, #0
 8025b42:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	3310      	adds	r3, #16
 8025b48:	4618      	mov	r0, r3
 8025b4a:	f000 f8e9 	bl	8025d20 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8025b4e:	4603      	mov	r3, r0
 8025b50:	4618      	mov	r0, r3
 8025b52:	3708      	adds	r7, #8
 8025b54:	46bd      	mov	sp, r7
 8025b56:	bd80      	pop	{r7, pc}

08025b58 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8025b58:	b480      	push	{r7}
 8025b5a:	b083      	sub	sp, #12
 8025b5c:	af00      	add	r7, sp, #0
 8025b5e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8025b60:	687b      	ldr	r3, [r7, #4]
 8025b62:	4618      	mov	r0, r3
 8025b64:	370c      	adds	r7, #12
 8025b66:	46bd      	mov	sp, r7
 8025b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b6c:	4770      	bx	lr

08025b6e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8025b6e:	b580      	push	{r7, lr}
 8025b70:	b082      	sub	sp, #8
 8025b72:	af00      	add	r7, sp, #0
 8025b74:	6078      	str	r0, [r7, #4]
 8025b76:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8025b78:	6838      	ldr	r0, [r7, #0]
 8025b7a:	f000 f8dd 	bl	8025d38 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 8025b7e:	bf00      	nop
 8025b80:	3708      	adds	r7, #8
 8025b82:	46bd      	mov	sp, r7
 8025b84:	bd80      	pop	{r7, pc}

08025b86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025b86:	b580      	push	{r7, lr}
 8025b88:	b088      	sub	sp, #32
 8025b8a:	af00      	add	r7, sp, #0
 8025b8c:	60f8      	str	r0, [r7, #12]
 8025b8e:	60b9      	str	r1, [r7, #8]
 8025b90:	607a      	str	r2, [r7, #4]
 8025b92:	68fb      	ldr	r3, [r7, #12]
 8025b94:	61fb      	str	r3, [r7, #28]
 8025b96:	68bb      	ldr	r3, [r7, #8]
 8025b98:	61bb      	str	r3, [r7, #24]
 8025b9a:	687b      	ldr	r3, [r7, #4]
 8025b9c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8025b9e:	f7db fc53 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8025ba2:	4603      	mov	r3, r0
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	d003      	beq.n	8025bb0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8025ba8:	69b8      	ldr	r0, [r7, #24]
 8025baa:	f000 fa79 	bl	80260a0 <_ZdlPv>
	    return;
 8025bae:	e005      	b.n	8025bbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8025bb0:	697a      	ldr	r2, [r7, #20]
 8025bb2:	69b9      	ldr	r1, [r7, #24]
 8025bb4:	69f8      	ldr	r0, [r7, #28]
 8025bb6:	f000 f900 	bl	8025dba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8025bba:	bf00      	nop
 8025bbc:	bf00      	nop
 8025bbe:	3720      	adds	r7, #32
 8025bc0:	46bd      	mov	sp, r7
 8025bc2:	bd80      	pop	{r7, pc}

08025bc4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8025bc4:	b480      	push	{r7}
 8025bc6:	b083      	sub	sp, #12
 8025bc8:	af00      	add	r7, sp, #0
 8025bca:	6078      	str	r0, [r7, #4]
 8025bcc:	6039      	str	r1, [r7, #0]
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	4618      	mov	r0, r3
 8025bd2:	370c      	adds	r7, #12
 8025bd4:	46bd      	mov	sp, r7
 8025bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bda:	4770      	bx	lr

08025bdc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 8025bdc:	b590      	push	{r4, r7, lr}
 8025bde:	b083      	sub	sp, #12
 8025be0:	af00      	add	r7, sp, #0
 8025be2:	6078      	str	r0, [r7, #4]
 8025be4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	681c      	ldr	r4, [r3, #0]
 8025bea:	6838      	ldr	r0, [r7, #0]
 8025bec:	f7ff fe0f 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8025bf0:	4603      	mov	r3, r0
 8025bf2:	4619      	mov	r1, r3
 8025bf4:	4620      	mov	r0, r4
 8025bf6:	f000 f8a9 	bl	8025d4c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8025bfa:	4603      	mov	r3, r0
 8025bfc:	4618      	mov	r0, r3
 8025bfe:	370c      	adds	r7, #12
 8025c00:	46bd      	mov	sp, r7
 8025c02:	bd90      	pop	{r4, r7, pc}

08025c04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8025c04:	b480      	push	{r7}
 8025c06:	b083      	sub	sp, #12
 8025c08:	af00      	add	r7, sp, #0
 8025c0a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	4618      	mov	r0, r3
 8025c10:	370c      	adds	r7, #12
 8025c12:	46bd      	mov	sp, r7
 8025c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c18:	4770      	bx	lr

08025c1a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8025c1a:	b580      	push	{r7, lr}
 8025c1c:	b082      	sub	sp, #8
 8025c1e:	af00      	add	r7, sp, #0
 8025c20:	6078      	str	r0, [r7, #4]
 8025c22:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8025c24:	6838      	ldr	r0, [r7, #0]
 8025c26:	f000 f8a8 	bl	8025d7a <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 8025c2a:	bf00      	nop
 8025c2c:	3708      	adds	r7, #8
 8025c2e:	46bd      	mov	sp, r7
 8025c30:	bd80      	pop	{r7, pc}

08025c32 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8025c32:	b580      	push	{r7, lr}
 8025c34:	b088      	sub	sp, #32
 8025c36:	af00      	add	r7, sp, #0
 8025c38:	60f8      	str	r0, [r7, #12]
 8025c3a:	60b9      	str	r1, [r7, #8]
 8025c3c:	607a      	str	r2, [r7, #4]
 8025c3e:	68fb      	ldr	r3, [r7, #12]
 8025c40:	61fb      	str	r3, [r7, #28]
 8025c42:	68bb      	ldr	r3, [r7, #8]
 8025c44:	61bb      	str	r3, [r7, #24]
 8025c46:	687b      	ldr	r3, [r7, #4]
 8025c48:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8025c4a:	f7db fbfd 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8025c4e:	4603      	mov	r3, r0
 8025c50:	2b00      	cmp	r3, #0
 8025c52:	d003      	beq.n	8025c5c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8025c54:	69b8      	ldr	r0, [r7, #24]
 8025c56:	f000 fa23 	bl	80260a0 <_ZdlPv>
	    return;
 8025c5a:	e005      	b.n	8025c68 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8025c5c:	697a      	ldr	r2, [r7, #20]
 8025c5e:	69b9      	ldr	r1, [r7, #24]
 8025c60:	69f8      	ldr	r0, [r7, #28]
 8025c62:	f000 f8db 	bl	8025e1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8025c66:	bf00      	nop
 8025c68:	bf00      	nop
 8025c6a:	3720      	adds	r7, #32
 8025c6c:	46bd      	mov	sp, r7
 8025c6e:	bd80      	pop	{r7, pc}

08025c70 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 8025c70:	b480      	push	{r7}
 8025c72:	b083      	sub	sp, #12
 8025c74:	af00      	add	r7, sp, #0
 8025c76:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8025c78:	687b      	ldr	r3, [r7, #4]
 8025c7a:	4618      	mov	r0, r3
 8025c7c:	370c      	adds	r7, #12
 8025c7e:	46bd      	mov	sp, r7
 8025c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c84:	4770      	bx	lr

08025c86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8025c86:	b580      	push	{r7, lr}
 8025c88:	b084      	sub	sp, #16
 8025c8a:	af00      	add	r7, sp, #0
 8025c8c:	6078      	str	r0, [r7, #4]
 8025c8e:	6039      	str	r1, [r7, #0]
 8025c90:	687b      	ldr	r3, [r7, #4]
 8025c92:	60fb      	str	r3, [r7, #12]
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8025c98:	f7db fbd6 	bl	8001448 <_ZSt21is_constant_evaluatedv>
 8025c9c:	4603      	mov	r3, r0
 8025c9e:	2b00      	cmp	r3, #0
 8025ca0:	d009      	beq.n	8025cb6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8025ca2:	68ba      	ldr	r2, [r7, #8]
 8025ca4:	4613      	mov	r3, r2
 8025ca6:	005b      	lsls	r3, r3, #1
 8025ca8:	4413      	add	r3, r2
 8025caa:	00db      	lsls	r3, r3, #3
 8025cac:	4618      	mov	r0, r3
 8025cae:	f000 f9fb 	bl	80260a8 <_Znwj>
 8025cb2:	4603      	mov	r3, r0
 8025cb4:	e006      	b.n	8025cc4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8025cb6:	2200      	movs	r2, #0
 8025cb8:	68b9      	ldr	r1, [r7, #8]
 8025cba:	68f8      	ldr	r0, [r7, #12]
 8025cbc:	f000 f8c0 	bl	8025e40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 8025cc0:	4603      	mov	r3, r0
 8025cc2:	bf00      	nop
      { return __a.allocate(__n); }
 8025cc4:	4618      	mov	r0, r3
 8025cc6:	3710      	adds	r7, #16
 8025cc8:	46bd      	mov	sp, r7
 8025cca:	bd80      	pop	{r7, pc}

08025ccc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8025ccc:	b580      	push	{r7, lr}
 8025cce:	b084      	sub	sp, #16
 8025cd0:	af00      	add	r7, sp, #0
 8025cd2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8025cd4:	687b      	ldr	r3, [r7, #4]
 8025cd6:	68da      	ldr	r2, [r3, #12]
 8025cd8:	f107 030c 	add.w	r3, r7, #12
 8025cdc:	4611      	mov	r1, r2
 8025cde:	4618      	mov	r0, r3
 8025ce0:	f7ff fd23 	bl	802572a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8025ce4:	68fb      	ldr	r3, [r7, #12]
 8025ce6:	4618      	mov	r0, r3
 8025ce8:	3710      	adds	r7, #16
 8025cea:	46bd      	mov	sp, r7
 8025cec:	bd80      	pop	{r7, pc}

08025cee <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8025cee:	b580      	push	{r7, lr}
 8025cf0:	b084      	sub	sp, #16
 8025cf2:	af00      	add	r7, sp, #0
 8025cf4:	60f8      	str	r0, [r7, #12]
 8025cf6:	60b9      	str	r1, [r7, #8]
 8025cf8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8025cfa:	68b8      	ldr	r0, [r7, #8]
 8025cfc:	f000 f847 	bl	8025d8e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8025d00:	4603      	mov	r3, r0
 8025d02:	681a      	ldr	r2, [r3, #0]
 8025d04:	68fb      	ldr	r3, [r7, #12]
 8025d06:	601a      	str	r2, [r3, #0]
 8025d08:	6878      	ldr	r0, [r7, #4]
 8025d0a:	f7ef fc8d 	bl	8015628 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8025d0e:	4603      	mov	r3, r0
 8025d10:	681a      	ldr	r2, [r3, #0]
 8025d12:	68fb      	ldr	r3, [r7, #12]
 8025d14:	605a      	str	r2, [r3, #4]
 8025d16:	68fb      	ldr	r3, [r7, #12]
 8025d18:	4618      	mov	r0, r3
 8025d1a:	3710      	adds	r7, #16
 8025d1c:	46bd      	mov	sp, r7
 8025d1e:	bd80      	pop	{r7, pc}

08025d20 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8025d20:	b580      	push	{r7, lr}
 8025d22:	b082      	sub	sp, #8
 8025d24:	af00      	add	r7, sp, #0
 8025d26:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8025d28:	6878      	ldr	r0, [r7, #4]
 8025d2a:	f000 f83b 	bl	8025da4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8025d2e:	4603      	mov	r3, r0
 8025d30:	4618      	mov	r0, r3
 8025d32:	3708      	adds	r7, #8
 8025d34:	46bd      	mov	sp, r7
 8025d36:	bd80      	pop	{r7, pc}

08025d38 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8025d38:	b480      	push	{r7}
 8025d3a:	b083      	sub	sp, #12
 8025d3c:	af00      	add	r7, sp, #0
 8025d3e:	6078      	str	r0, [r7, #4]
    }
 8025d40:	bf00      	nop
 8025d42:	370c      	adds	r7, #12
 8025d44:	46bd      	mov	sp, r7
 8025d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d4a:	4770      	bx	lr

08025d4c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8025d4c:	b580      	push	{r7, lr}
 8025d4e:	b084      	sub	sp, #16
 8025d50:	af00      	add	r7, sp, #0
 8025d52:	6078      	str	r0, [r7, #4]
 8025d54:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8025d56:	6878      	ldr	r0, [r7, #4]
 8025d58:	f7ff fdf7 	bl	802594a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 8025d5c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8025d5e:	6838      	ldr	r0, [r7, #0]
 8025d60:	f7ff fd55 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8025d64:	4603      	mov	r3, r0
 8025d66:	461a      	mov	r2, r3
 8025d68:	68f9      	ldr	r1, [r7, #12]
 8025d6a:	6878      	ldr	r0, [r7, #4]
 8025d6c:	f000 f836 	bl	8025ddc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8025d70:	68fb      	ldr	r3, [r7, #12]
	}
 8025d72:	4618      	mov	r0, r3
 8025d74:	3710      	adds	r7, #16
 8025d76:	46bd      	mov	sp, r7
 8025d78:	bd80      	pop	{r7, pc}

08025d7a <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 8025d7a:	b480      	push	{r7}
 8025d7c:	b083      	sub	sp, #12
 8025d7e:	af00      	add	r7, sp, #0
 8025d80:	6078      	str	r0, [r7, #4]
    }
 8025d82:	bf00      	nop
 8025d84:	370c      	adds	r7, #12
 8025d86:	46bd      	mov	sp, r7
 8025d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d8c:	4770      	bx	lr

08025d8e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8025d8e:	b480      	push	{r7}
 8025d90:	b083      	sub	sp, #12
 8025d92:	af00      	add	r7, sp, #0
 8025d94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8025d96:	687b      	ldr	r3, [r7, #4]
 8025d98:	4618      	mov	r0, r3
 8025d9a:	370c      	adds	r7, #12
 8025d9c:	46bd      	mov	sp, r7
 8025d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025da2:	4770      	bx	lr

08025da4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 8025da4:	b480      	push	{r7}
 8025da6:	b083      	sub	sp, #12
 8025da8:	af00      	add	r7, sp, #0
 8025daa:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8025dac:	687b      	ldr	r3, [r7, #4]
 8025dae:	4618      	mov	r0, r3
 8025db0:	370c      	adds	r7, #12
 8025db2:	46bd      	mov	sp, r7
 8025db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025db8:	4770      	bx	lr

08025dba <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8025dba:	b580      	push	{r7, lr}
 8025dbc:	b084      	sub	sp, #16
 8025dbe:	af00      	add	r7, sp, #0
 8025dc0:	60f8      	str	r0, [r7, #12]
 8025dc2:	60b9      	str	r1, [r7, #8]
 8025dc4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025dc6:	687b      	ldr	r3, [r7, #4]
 8025dc8:	2234      	movs	r2, #52	; 0x34
 8025dca:	fb02 f303 	mul.w	r3, r2, r3
 8025dce:	4619      	mov	r1, r3
 8025dd0:	68b8      	ldr	r0, [r7, #8]
 8025dd2:	f000 f967 	bl	80260a4 <_ZdlPvj>
      }
 8025dd6:	3710      	adds	r7, #16
 8025dd8:	46bd      	mov	sp, r7
 8025dda:	bd80      	pop	{r7, pc}

08025ddc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8025ddc:	b5b0      	push	{r4, r5, r7, lr}
 8025dde:	b084      	sub	sp, #16
 8025de0:	af00      	add	r7, sp, #0
 8025de2:	60f8      	str	r0, [r7, #12]
 8025de4:	60b9      	str	r1, [r7, #8]
 8025de6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8025de8:	68bb      	ldr	r3, [r7, #8]
 8025dea:	4619      	mov	r1, r3
 8025dec:	2018      	movs	r0, #24
 8025dee:	f7db fb33 	bl	8001458 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8025df2:	68f8      	ldr	r0, [r7, #12]
 8025df4:	f7ff ff06 	bl	8025c04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8025df8:	4604      	mov	r4, r0
 8025dfa:	68b8      	ldr	r0, [r7, #8]
 8025dfc:	f7ff fb51 	bl	80254a2 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8025e00:	4605      	mov	r5, r0
 8025e02:	6878      	ldr	r0, [r7, #4]
 8025e04:	f7ff fd03 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8025e08:	4603      	mov	r3, r0
 8025e0a:	461a      	mov	r2, r3
 8025e0c:	4629      	mov	r1, r5
 8025e0e:	4620      	mov	r0, r4
 8025e10:	f000 f852 	bl	8025eb8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 8025e14:	bf00      	nop
 8025e16:	3710      	adds	r7, #16
 8025e18:	46bd      	mov	sp, r7
 8025e1a:	bdb0      	pop	{r4, r5, r7, pc}

08025e1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8025e1c:	b580      	push	{r7, lr}
 8025e1e:	b084      	sub	sp, #16
 8025e20:	af00      	add	r7, sp, #0
 8025e22:	60f8      	str	r0, [r7, #12]
 8025e24:	60b9      	str	r1, [r7, #8]
 8025e26:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8025e28:	687a      	ldr	r2, [r7, #4]
 8025e2a:	4613      	mov	r3, r2
 8025e2c:	005b      	lsls	r3, r3, #1
 8025e2e:	4413      	add	r3, r2
 8025e30:	00db      	lsls	r3, r3, #3
 8025e32:	4619      	mov	r1, r3
 8025e34:	68b8      	ldr	r0, [r7, #8]
 8025e36:	f000 f935 	bl	80260a4 <_ZdlPvj>
      }
 8025e3a:	3710      	adds	r7, #16
 8025e3c:	46bd      	mov	sp, r7
 8025e3e:	bd80      	pop	{r7, pc}

08025e40 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8025e40:	b580      	push	{r7, lr}
 8025e42:	b084      	sub	sp, #16
 8025e44:	af00      	add	r7, sp, #0
 8025e46:	60f8      	str	r0, [r7, #12]
 8025e48:	60b9      	str	r1, [r7, #8]
 8025e4a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8025e4c:	68f8      	ldr	r0, [r7, #12]
 8025e4e:	f000 f845 	bl	8025edc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 8025e52:	4602      	mov	r2, r0
 8025e54:	68bb      	ldr	r3, [r7, #8]
 8025e56:	4293      	cmp	r3, r2
 8025e58:	bf8c      	ite	hi
 8025e5a:	2301      	movhi	r3, #1
 8025e5c:	2300      	movls	r3, #0
 8025e5e:	b2db      	uxtb	r3, r3
 8025e60:	2b00      	cmp	r3, #0
 8025e62:	d001      	beq.n	8025e68 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8025e64:	f000 f9e4 	bl	8026230 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8025e68:	68ba      	ldr	r2, [r7, #8]
 8025e6a:	4613      	mov	r3, r2
 8025e6c:	005b      	lsls	r3, r3, #1
 8025e6e:	4413      	add	r3, r2
 8025e70:	00db      	lsls	r3, r3, #3
 8025e72:	4618      	mov	r0, r3
 8025e74:	f000 f918 	bl	80260a8 <_Znwj>
 8025e78:	4603      	mov	r3, r0
 8025e7a:	bf00      	nop
      }
 8025e7c:	4618      	mov	r0, r3
 8025e7e:	3710      	adds	r7, #16
 8025e80:	46bd      	mov	sp, r7
 8025e82:	bd80      	pop	{r7, pc}

08025e84 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8025e84:	b5b0      	push	{r4, r5, r7, lr}
 8025e86:	b082      	sub	sp, #8
 8025e88:	af00      	add	r7, sp, #0
 8025e8a:	6078      	str	r0, [r7, #4]
 8025e8c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8025e8e:	6838      	ldr	r0, [r7, #0]
 8025e90:	f7ff fcbd 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8025e94:	4605      	mov	r5, r0
 8025e96:	687b      	ldr	r3, [r7, #4]
 8025e98:	4619      	mov	r1, r3
 8025e9a:	2008      	movs	r0, #8
 8025e9c:	f7db fadc 	bl	8001458 <_ZnwjPv>
 8025ea0:	4604      	mov	r4, r0
 8025ea2:	4623      	mov	r3, r4
 8025ea4:	462a      	mov	r2, r5
 8025ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025eaa:	e883 0003 	stmia.w	r3, {r0, r1}
 8025eae:	4623      	mov	r3, r4
 8025eb0:	4618      	mov	r0, r3
 8025eb2:	3708      	adds	r7, #8
 8025eb4:	46bd      	mov	sp, r7
 8025eb6:	bdb0      	pop	{r4, r5, r7, pc}

08025eb8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b084      	sub	sp, #16
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	60f8      	str	r0, [r7, #12]
 8025ec0:	60b9      	str	r1, [r7, #8]
 8025ec2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8025ec4:	6878      	ldr	r0, [r7, #4]
 8025ec6:	f7ff fca2 	bl	802580e <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8025eca:	4603      	mov	r3, r0
 8025ecc:	4619      	mov	r1, r3
 8025ece:	68b8      	ldr	r0, [r7, #8]
 8025ed0:	f7ff ffd8 	bl	8025e84 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 8025ed4:	bf00      	nop
 8025ed6:	3710      	adds	r7, #16
 8025ed8:	46bd      	mov	sp, r7
 8025eda:	bd80      	pop	{r7, pc}

08025edc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8025edc:	b480      	push	{r7}
 8025ede:	b083      	sub	sp, #12
 8025ee0:	af00      	add	r7, sp, #0
 8025ee2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8025ee4:	4b03      	ldr	r3, [pc, #12]	; (8025ef4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 8025ee6:	4618      	mov	r0, r3
 8025ee8:	370c      	adds	r7, #12
 8025eea:	46bd      	mov	sp, r7
 8025eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ef0:	4770      	bx	lr
 8025ef2:	bf00      	nop
 8025ef4:	05555555 	.word	0x05555555

08025ef8 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 8025ef8:	b580      	push	{r7, lr}
 8025efa:	b0d8      	sub	sp, #352	; 0x160
 8025efc:	af02      	add	r7, sp, #8
 8025efe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f02:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8025f06:	6018      	str	r0, [r3, #0]
 8025f08:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f0c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8025f10:	6019      	str	r1, [r3, #0]
 8025f12:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f16:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8025f1a:	681b      	ldr	r3, [r3, #0]
 8025f1c:	2b01      	cmp	r3, #1
 8025f1e:	f040 8088 	bne.w	8026032 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 8025f22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f26:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8025f2a:	681b      	ldr	r3, [r3, #0]
 8025f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025f30:	4293      	cmp	r3, r2
 8025f32:	d17e      	bne.n	8026032 <_Z41__static_initialization_and_destruction_0ii+0x13a>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8025f34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f38:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8025f3c:	4a4c      	ldr	r2, [pc, #304]	; (8026070 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8025f3e:	4618      	mov	r0, r3
 8025f40:	4611      	mov	r1, r2
 8025f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8025f46:	461a      	mov	r2, r3
 8025f48:	f000 f9c6 	bl	80262d8 <memcpy>
 8025f4c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f50:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8025f54:	f107 0214 	add.w	r2, r7, #20
 8025f58:	601a      	str	r2, [r3, #0]
 8025f5a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8025f5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8025f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025f66:	605a      	str	r2, [r3, #4]
 8025f68:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8025f6c:	4618      	mov	r0, r3
 8025f6e:	f7ec fdd0 	bl	8012b12 <_ZNSaIhEC1Ev>
 8025f72:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8025f76:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8025f7a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8025f7e:	ca06      	ldmia	r2, {r1, r2}
 8025f80:	483c      	ldr	r0, [pc, #240]	; (8026074 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8025f82:	f7ec fddd 	bl	8012b40 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8025f86:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8025f8a:	4618      	mov	r0, r3
 8025f8c:	f7ec fdcd 	bl	8012b2a <_ZNSaIhED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 8025f90:	4b39      	ldr	r3, [pc, #228]	; (8026078 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8025f92:	461a      	mov	r2, r3
 8025f94:	2300      	movs	r3, #0
 8025f96:	6013      	str	r3, [r2, #0]
 8025f98:	6053      	str	r3, [r2, #4]
 8025f9a:	6093      	str	r3, [r2, #8]
 8025f9c:	60d3      	str	r3, [r2, #12]
 8025f9e:	6113      	str	r3, [r2, #16]
 8025fa0:	6153      	str	r3, [r2, #20]
 8025fa2:	4835      	ldr	r0, [pc, #212]	; (8026078 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8025fa4:	f7fe ff67 	bl	8024e76 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 8025fa8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8025fac:	2230      	movs	r2, #48	; 0x30
 8025fae:	2100      	movs	r1, #0
 8025fb0:	4618      	mov	r0, r3
 8025fb2:	f000 f9b9 	bl	8026328 <memset>
 8025fb6:	2301      	movs	r3, #1
 8025fb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8025fbc:	2302      	movs	r3, #2
 8025fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8025fc2:	2304      	movs	r3, #4
 8025fc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8025fc8:	2304      	movs	r3, #4
 8025fca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8025fce:	2308      	movs	r3, #8
 8025fd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8025fd4:	2308      	movs	r3, #8
 8025fd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8025fda:	230c      	movs	r3, #12
 8025fdc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8025fe0:	2310      	movs	r3, #16
 8025fe2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8025fe6:	2310      	movs	r3, #16
 8025fe8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8025fec:	2320      	movs	r3, #32
 8025fee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8025ff2:	2314      	movs	r3, #20
 8025ff4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8025ff8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8025ffc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8026000:	2306      	movs	r3, #6
 8026002:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8026006:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802600a:	4618      	mov	r0, r3
 802600c:	f7fe ffae 	bl	8024f6c <_ZNSaISt4pairIKmmEEC1Ev>
 8026010:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8026014:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8026018:	9300      	str	r3, [sp, #0]
 802601a:	4613      	mov	r3, r2
 802601c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8026020:	ca06      	ldmia	r2, {r1, r2}
 8026022:	4816      	ldr	r0, [pc, #88]	; (802607c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8026024:	f7fe ffb9 	bl	8024f9a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 8026028:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802602c:	4618      	mov	r0, r3
 802602e:	f7fe ffa9 	bl	8024f84 <_ZNSaISt4pairIKmmEED1Ev>
 8026032:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8026036:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 802603a:	681b      	ldr	r3, [r3, #0]
 802603c:	2b00      	cmp	r3, #0
 802603e:	d111      	bne.n	8026064 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8026040:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8026044:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8026048:	681b      	ldr	r3, [r3, #0]
 802604a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802604e:	4293      	cmp	r3, r2
 8026050:	d108      	bne.n	8026064 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 8026052:	480a      	ldr	r0, [pc, #40]	; (802607c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8026054:	f7fe ff29 	bl	8024eaa <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 8026058:	4807      	ldr	r0, [pc, #28]	; (8026078 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 802605a:	f7fe ff19 	bl	8024e90 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 802605e:	4805      	ldr	r0, [pc, #20]	; (8026074 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8026060:	f7ec fd9c 	bl	8012b9c <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8026064:	bf00      	nop
 8026066:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 802606a:	46bd      	mov	sp, r7
 802606c:	bd80      	pop	{r7, pc}
 802606e:	bf00      	nop
 8026070:	08026b84 	.word	0x08026b84
 8026074:	240013f8 	.word	0x240013f8
 8026078:	240013fc 	.word	0x240013fc
 802607c:	24001414 	.word	0x24001414

08026080 <_GLOBAL__sub_I__ZN12InputCapture10id_managerE>:
 8026080:	b580      	push	{r7, lr}
 8026082:	af00      	add	r7, sp, #0
 8026084:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026088:	2001      	movs	r0, #1
 802608a:	f7ff ff35 	bl	8025ef8 <_Z41__static_initialization_and_destruction_0ii>
 802608e:	bd80      	pop	{r7, pc}

08026090 <_GLOBAL__sub_D__ZN12InputCapture10id_managerE>:
 8026090:	b580      	push	{r7, lr}
 8026092:	af00      	add	r7, sp, #0
 8026094:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026098:	2000      	movs	r0, #0
 802609a:	f7ff ff2d 	bl	8025ef8 <_Z41__static_initialization_and_destruction_0ii>
 802609e:	bd80      	pop	{r7, pc}

080260a0 <_ZdlPv>:
 80260a0:	f000 b912 	b.w	80262c8 <free>

080260a4 <_ZdlPvj>:
 80260a4:	f7ff bffc 	b.w	80260a0 <_ZdlPv>

080260a8 <_Znwj>:
 80260a8:	2801      	cmp	r0, #1
 80260aa:	bf38      	it	cc
 80260ac:	2001      	movcc	r0, #1
 80260ae:	b510      	push	{r4, lr}
 80260b0:	4604      	mov	r4, r0
 80260b2:	4620      	mov	r0, r4
 80260b4:	f000 f900 	bl	80262b8 <malloc>
 80260b8:	b930      	cbnz	r0, 80260c8 <_Znwj+0x20>
 80260ba:	f000 f8c3 	bl	8026244 <_ZSt15get_new_handlerv>
 80260be:	b908      	cbnz	r0, 80260c4 <_Znwj+0x1c>
 80260c0:	f000 f8c8 	bl	8026254 <abort>
 80260c4:	4780      	blx	r0
 80260c6:	e7f4      	b.n	80260b2 <_Znwj+0xa>
 80260c8:	bd10      	pop	{r4, pc}

080260ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 80260ca:	68c3      	ldr	r3, [r0, #12]
 80260cc:	689a      	ldr	r2, [r3, #8]
 80260ce:	60c2      	str	r2, [r0, #12]
 80260d0:	b510      	push	{r4, lr}
 80260d2:	b102      	cbz	r2, 80260d6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 80260d4:	6050      	str	r0, [r2, #4]
 80260d6:	6842      	ldr	r2, [r0, #4]
 80260d8:	605a      	str	r2, [r3, #4]
 80260da:	680c      	ldr	r4, [r1, #0]
 80260dc:	4284      	cmp	r4, r0
 80260de:	d103      	bne.n	80260e8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 80260e0:	600b      	str	r3, [r1, #0]
 80260e2:	6098      	str	r0, [r3, #8]
 80260e4:	6043      	str	r3, [r0, #4]
 80260e6:	bd10      	pop	{r4, pc}
 80260e8:	6891      	ldr	r1, [r2, #8]
 80260ea:	4281      	cmp	r1, r0
 80260ec:	bf0c      	ite	eq
 80260ee:	6093      	streq	r3, [r2, #8]
 80260f0:	60d3      	strne	r3, [r2, #12]
 80260f2:	e7f6      	b.n	80260e2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080260f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80260f4:	6883      	ldr	r3, [r0, #8]
 80260f6:	68da      	ldr	r2, [r3, #12]
 80260f8:	6082      	str	r2, [r0, #8]
 80260fa:	b510      	push	{r4, lr}
 80260fc:	b102      	cbz	r2, 8026100 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80260fe:	6050      	str	r0, [r2, #4]
 8026100:	6842      	ldr	r2, [r0, #4]
 8026102:	605a      	str	r2, [r3, #4]
 8026104:	680c      	ldr	r4, [r1, #0]
 8026106:	4284      	cmp	r4, r0
 8026108:	d103      	bne.n	8026112 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 802610a:	600b      	str	r3, [r1, #0]
 802610c:	60d8      	str	r0, [r3, #12]
 802610e:	6043      	str	r3, [r0, #4]
 8026110:	bd10      	pop	{r4, pc}
 8026112:	68d1      	ldr	r1, [r2, #12]
 8026114:	4281      	cmp	r1, r0
 8026116:	bf0c      	ite	eq
 8026118:	60d3      	streq	r3, [r2, #12]
 802611a:	6093      	strne	r3, [r2, #8]
 802611c:	e7f6      	b.n	802610c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0802611e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 802611e:	68c3      	ldr	r3, [r0, #12]
 8026120:	b123      	cbz	r3, 802612c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8026122:	4618      	mov	r0, r3
 8026124:	689b      	ldr	r3, [r3, #8]
 8026126:	2b00      	cmp	r3, #0
 8026128:	d1fb      	bne.n	8026122 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 802612a:	4770      	bx	lr
 802612c:	6843      	ldr	r3, [r0, #4]
 802612e:	68da      	ldr	r2, [r3, #12]
 8026130:	4282      	cmp	r2, r0
 8026132:	d102      	bne.n	802613a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 8026134:	4618      	mov	r0, r3
 8026136:	685b      	ldr	r3, [r3, #4]
 8026138:	e7f9      	b.n	802612e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 802613a:	68c2      	ldr	r2, [r0, #12]
 802613c:	4293      	cmp	r3, r2
 802613e:	bf18      	it	ne
 8026140:	4618      	movne	r0, r3
 8026142:	4770      	bx	lr

08026144 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8026144:	7803      	ldrb	r3, [r0, #0]
 8026146:	b933      	cbnz	r3, 8026156 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8026148:	6843      	ldr	r3, [r0, #4]
 802614a:	685b      	ldr	r3, [r3, #4]
 802614c:	4283      	cmp	r3, r0
 802614e:	d102      	bne.n	8026156 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8026150:	68db      	ldr	r3, [r3, #12]
 8026152:	4618      	mov	r0, r3
 8026154:	4770      	bx	lr
 8026156:	6882      	ldr	r2, [r0, #8]
 8026158:	b122      	cbz	r2, 8026164 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 802615a:	4613      	mov	r3, r2
 802615c:	68d2      	ldr	r2, [r2, #12]
 802615e:	2a00      	cmp	r2, #0
 8026160:	d1fb      	bne.n	802615a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8026162:	e7f6      	b.n	8026152 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8026164:	6843      	ldr	r3, [r0, #4]
 8026166:	689a      	ldr	r2, [r3, #8]
 8026168:	4282      	cmp	r2, r0
 802616a:	d1f2      	bne.n	8026152 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 802616c:	4618      	mov	r0, r3
 802616e:	685b      	ldr	r3, [r3, #4]
 8026170:	e7f9      	b.n	8026166 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08026172 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8026172:	f7ff bfd4 	b.w	802611e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08026176 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8026176:	f7ff bfe5 	b.w	8026144 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0802617a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 802617a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802617e:	461e      	mov	r6, r3
 8026180:	f103 0804 	add.w	r8, r3, #4
 8026184:	2300      	movs	r3, #0
 8026186:	e9c1 3302 	strd	r3, r3, [r1, #8]
 802618a:	460c      	mov	r4, r1
 802618c:	604a      	str	r2, [r1, #4]
 802618e:	700b      	strb	r3, [r1, #0]
 8026190:	b300      	cbz	r0, 80261d4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8026192:	4296      	cmp	r6, r2
 8026194:	6091      	str	r1, [r2, #8]
 8026196:	d118      	bne.n	80261ca <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8026198:	6071      	str	r1, [r6, #4]
 802619a:	60f4      	str	r4, [r6, #12]
 802619c:	2701      	movs	r7, #1
 802619e:	f04f 0900 	mov.w	r9, #0
 80261a2:	6873      	ldr	r3, [r6, #4]
 80261a4:	42a3      	cmp	r3, r4
 80261a6:	d03f      	beq.n	8026228 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80261a8:	6860      	ldr	r0, [r4, #4]
 80261aa:	7802      	ldrb	r2, [r0, #0]
 80261ac:	2a00      	cmp	r2, #0
 80261ae:	d13b      	bne.n	8026228 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 80261b0:	6845      	ldr	r5, [r0, #4]
 80261b2:	68ab      	ldr	r3, [r5, #8]
 80261b4:	4298      	cmp	r0, r3
 80261b6:	d123      	bne.n	8026200 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 80261b8:	68eb      	ldr	r3, [r5, #12]
 80261ba:	b183      	cbz	r3, 80261de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80261bc:	781a      	ldrb	r2, [r3, #0]
 80261be:	b972      	cbnz	r2, 80261de <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 80261c0:	7007      	strb	r7, [r0, #0]
 80261c2:	701f      	strb	r7, [r3, #0]
 80261c4:	702a      	strb	r2, [r5, #0]
 80261c6:	462c      	mov	r4, r5
 80261c8:	e7eb      	b.n	80261a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 80261ca:	68b3      	ldr	r3, [r6, #8]
 80261cc:	4293      	cmp	r3, r2
 80261ce:	d1e5      	bne.n	802619c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80261d0:	60b1      	str	r1, [r6, #8]
 80261d2:	e7e3      	b.n	802619c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80261d4:	60d1      	str	r1, [r2, #12]
 80261d6:	68f3      	ldr	r3, [r6, #12]
 80261d8:	4293      	cmp	r3, r2
 80261da:	d1df      	bne.n	802619c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 80261dc:	e7dd      	b.n	802619a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 80261de:	68c3      	ldr	r3, [r0, #12]
 80261e0:	42a3      	cmp	r3, r4
 80261e2:	d103      	bne.n	80261ec <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 80261e4:	4641      	mov	r1, r8
 80261e6:	f7ff ff70 	bl	80260ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80261ea:	4604      	mov	r4, r0
 80261ec:	6863      	ldr	r3, [r4, #4]
 80261ee:	4641      	mov	r1, r8
 80261f0:	701f      	strb	r7, [r3, #0]
 80261f2:	4628      	mov	r0, r5
 80261f4:	f885 9000 	strb.w	r9, [r5]
 80261f8:	f7ff ff7c 	bl	80260f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80261fc:	4625      	mov	r5, r4
 80261fe:	e7e2      	b.n	80261c6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8026200:	b113      	cbz	r3, 8026208 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8026202:	781a      	ldrb	r2, [r3, #0]
 8026204:	2a00      	cmp	r2, #0
 8026206:	d0db      	beq.n	80261c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8026208:	6883      	ldr	r3, [r0, #8]
 802620a:	42a3      	cmp	r3, r4
 802620c:	d103      	bne.n	8026216 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 802620e:	4641      	mov	r1, r8
 8026210:	f7ff ff70 	bl	80260f4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8026214:	4604      	mov	r4, r0
 8026216:	6863      	ldr	r3, [r4, #4]
 8026218:	4641      	mov	r1, r8
 802621a:	701f      	strb	r7, [r3, #0]
 802621c:	4628      	mov	r0, r5
 802621e:	f885 9000 	strb.w	r9, [r5]
 8026222:	f7ff ff52 	bl	80260ca <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8026226:	e7e9      	b.n	80261fc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8026228:	2201      	movs	r2, #1
 802622a:	701a      	strb	r2, [r3, #0]
 802622c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08026230 <_ZSt17__throw_bad_allocv>:
 8026230:	b508      	push	{r3, lr}
 8026232:	f000 f80f 	bl	8026254 <abort>

08026236 <_ZSt20__throw_length_errorPKc>:
 8026236:	b508      	push	{r3, lr}
 8026238:	f000 f80c 	bl	8026254 <abort>

0802623c <_ZSt25__throw_bad_function_callv>:
 802623c:	b508      	push	{r3, lr}
 802623e:	f000 f809 	bl	8026254 <abort>
	...

08026244 <_ZSt15get_new_handlerv>:
 8026244:	4b02      	ldr	r3, [pc, #8]	; (8026250 <_ZSt15get_new_handlerv+0xc>)
 8026246:	6818      	ldr	r0, [r3, #0]
 8026248:	f3bf 8f5b 	dmb	ish
 802624c:	4770      	bx	lr
 802624e:	bf00      	nop
 8026250:	2400142c 	.word	0x2400142c

08026254 <abort>:
 8026254:	b508      	push	{r3, lr}
 8026256:	2006      	movs	r0, #6
 8026258:	f000 f986 	bl	8026568 <raise>
 802625c:	2001      	movs	r0, #1
 802625e:	f7dd fd83 	bl	8003d68 <_exit>
	...

08026264 <__errno>:
 8026264:	4b01      	ldr	r3, [pc, #4]	; (802626c <__errno+0x8>)
 8026266:	6818      	ldr	r0, [r3, #0]
 8026268:	4770      	bx	lr
 802626a:	bf00      	nop
 802626c:	24000058 	.word	0x24000058

08026270 <__libc_init_array>:
 8026270:	b570      	push	{r4, r5, r6, lr}
 8026272:	4d0d      	ldr	r5, [pc, #52]	; (80262a8 <__libc_init_array+0x38>)
 8026274:	4c0d      	ldr	r4, [pc, #52]	; (80262ac <__libc_init_array+0x3c>)
 8026276:	1b64      	subs	r4, r4, r5
 8026278:	10a4      	asrs	r4, r4, #2
 802627a:	2600      	movs	r6, #0
 802627c:	42a6      	cmp	r6, r4
 802627e:	d109      	bne.n	8026294 <__libc_init_array+0x24>
 8026280:	4d0b      	ldr	r5, [pc, #44]	; (80262b0 <__libc_init_array+0x40>)
 8026282:	4c0c      	ldr	r4, [pc, #48]	; (80262b4 <__libc_init_array+0x44>)
 8026284:	f000 f99a 	bl	80265bc <_init>
 8026288:	1b64      	subs	r4, r4, r5
 802628a:	10a4      	asrs	r4, r4, #2
 802628c:	2600      	movs	r6, #0
 802628e:	42a6      	cmp	r6, r4
 8026290:	d105      	bne.n	802629e <__libc_init_array+0x2e>
 8026292:	bd70      	pop	{r4, r5, r6, pc}
 8026294:	f855 3b04 	ldr.w	r3, [r5], #4
 8026298:	4798      	blx	r3
 802629a:	3601      	adds	r6, #1
 802629c:	e7ee      	b.n	802627c <__libc_init_array+0xc>
 802629e:	f855 3b04 	ldr.w	r3, [r5], #4
 80262a2:	4798      	blx	r3
 80262a4:	3601      	adds	r6, #1
 80262a6:	e7f2      	b.n	802628e <__libc_init_array+0x1e>
 80262a8:	08026cd4 	.word	0x08026cd4
 80262ac:	08026cd4 	.word	0x08026cd4
 80262b0:	08026cd4 	.word	0x08026cd4
 80262b4:	08026cf4 	.word	0x08026cf4

080262b8 <malloc>:
 80262b8:	4b02      	ldr	r3, [pc, #8]	; (80262c4 <malloc+0xc>)
 80262ba:	4601      	mov	r1, r0
 80262bc:	6818      	ldr	r0, [r3, #0]
 80262be:	f000 b8a7 	b.w	8026410 <_malloc_r>
 80262c2:	bf00      	nop
 80262c4:	24000058 	.word	0x24000058

080262c8 <free>:
 80262c8:	4b02      	ldr	r3, [pc, #8]	; (80262d4 <free+0xc>)
 80262ca:	4601      	mov	r1, r0
 80262cc:	6818      	ldr	r0, [r3, #0]
 80262ce:	f000 b833 	b.w	8026338 <_free_r>
 80262d2:	bf00      	nop
 80262d4:	24000058 	.word	0x24000058

080262d8 <memcpy>:
 80262d8:	440a      	add	r2, r1
 80262da:	4291      	cmp	r1, r2
 80262dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80262e0:	d100      	bne.n	80262e4 <memcpy+0xc>
 80262e2:	4770      	bx	lr
 80262e4:	b510      	push	{r4, lr}
 80262e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80262ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80262ee:	4291      	cmp	r1, r2
 80262f0:	d1f9      	bne.n	80262e6 <memcpy+0xe>
 80262f2:	bd10      	pop	{r4, pc}

080262f4 <memmove>:
 80262f4:	4288      	cmp	r0, r1
 80262f6:	b510      	push	{r4, lr}
 80262f8:	eb01 0402 	add.w	r4, r1, r2
 80262fc:	d902      	bls.n	8026304 <memmove+0x10>
 80262fe:	4284      	cmp	r4, r0
 8026300:	4623      	mov	r3, r4
 8026302:	d807      	bhi.n	8026314 <memmove+0x20>
 8026304:	1e43      	subs	r3, r0, #1
 8026306:	42a1      	cmp	r1, r4
 8026308:	d008      	beq.n	802631c <memmove+0x28>
 802630a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802630e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026312:	e7f8      	b.n	8026306 <memmove+0x12>
 8026314:	4402      	add	r2, r0
 8026316:	4601      	mov	r1, r0
 8026318:	428a      	cmp	r2, r1
 802631a:	d100      	bne.n	802631e <memmove+0x2a>
 802631c:	bd10      	pop	{r4, pc}
 802631e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026326:	e7f7      	b.n	8026318 <memmove+0x24>

08026328 <memset>:
 8026328:	4402      	add	r2, r0
 802632a:	4603      	mov	r3, r0
 802632c:	4293      	cmp	r3, r2
 802632e:	d100      	bne.n	8026332 <memset+0xa>
 8026330:	4770      	bx	lr
 8026332:	f803 1b01 	strb.w	r1, [r3], #1
 8026336:	e7f9      	b.n	802632c <memset+0x4>

08026338 <_free_r>:
 8026338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802633a:	2900      	cmp	r1, #0
 802633c:	d044      	beq.n	80263c8 <_free_r+0x90>
 802633e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026342:	9001      	str	r0, [sp, #4]
 8026344:	2b00      	cmp	r3, #0
 8026346:	f1a1 0404 	sub.w	r4, r1, #4
 802634a:	bfb8      	it	lt
 802634c:	18e4      	addlt	r4, r4, r3
 802634e:	f000 f927 	bl	80265a0 <__malloc_lock>
 8026352:	4a1e      	ldr	r2, [pc, #120]	; (80263cc <_free_r+0x94>)
 8026354:	9801      	ldr	r0, [sp, #4]
 8026356:	6813      	ldr	r3, [r2, #0]
 8026358:	b933      	cbnz	r3, 8026368 <_free_r+0x30>
 802635a:	6063      	str	r3, [r4, #4]
 802635c:	6014      	str	r4, [r2, #0]
 802635e:	b003      	add	sp, #12
 8026360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026364:	f000 b922 	b.w	80265ac <__malloc_unlock>
 8026368:	42a3      	cmp	r3, r4
 802636a:	d908      	bls.n	802637e <_free_r+0x46>
 802636c:	6825      	ldr	r5, [r4, #0]
 802636e:	1961      	adds	r1, r4, r5
 8026370:	428b      	cmp	r3, r1
 8026372:	bf01      	itttt	eq
 8026374:	6819      	ldreq	r1, [r3, #0]
 8026376:	685b      	ldreq	r3, [r3, #4]
 8026378:	1949      	addeq	r1, r1, r5
 802637a:	6021      	streq	r1, [r4, #0]
 802637c:	e7ed      	b.n	802635a <_free_r+0x22>
 802637e:	461a      	mov	r2, r3
 8026380:	685b      	ldr	r3, [r3, #4]
 8026382:	b10b      	cbz	r3, 8026388 <_free_r+0x50>
 8026384:	42a3      	cmp	r3, r4
 8026386:	d9fa      	bls.n	802637e <_free_r+0x46>
 8026388:	6811      	ldr	r1, [r2, #0]
 802638a:	1855      	adds	r5, r2, r1
 802638c:	42a5      	cmp	r5, r4
 802638e:	d10b      	bne.n	80263a8 <_free_r+0x70>
 8026390:	6824      	ldr	r4, [r4, #0]
 8026392:	4421      	add	r1, r4
 8026394:	1854      	adds	r4, r2, r1
 8026396:	42a3      	cmp	r3, r4
 8026398:	6011      	str	r1, [r2, #0]
 802639a:	d1e0      	bne.n	802635e <_free_r+0x26>
 802639c:	681c      	ldr	r4, [r3, #0]
 802639e:	685b      	ldr	r3, [r3, #4]
 80263a0:	6053      	str	r3, [r2, #4]
 80263a2:	4421      	add	r1, r4
 80263a4:	6011      	str	r1, [r2, #0]
 80263a6:	e7da      	b.n	802635e <_free_r+0x26>
 80263a8:	d902      	bls.n	80263b0 <_free_r+0x78>
 80263aa:	230c      	movs	r3, #12
 80263ac:	6003      	str	r3, [r0, #0]
 80263ae:	e7d6      	b.n	802635e <_free_r+0x26>
 80263b0:	6825      	ldr	r5, [r4, #0]
 80263b2:	1961      	adds	r1, r4, r5
 80263b4:	428b      	cmp	r3, r1
 80263b6:	bf04      	itt	eq
 80263b8:	6819      	ldreq	r1, [r3, #0]
 80263ba:	685b      	ldreq	r3, [r3, #4]
 80263bc:	6063      	str	r3, [r4, #4]
 80263be:	bf04      	itt	eq
 80263c0:	1949      	addeq	r1, r1, r5
 80263c2:	6021      	streq	r1, [r4, #0]
 80263c4:	6054      	str	r4, [r2, #4]
 80263c6:	e7ca      	b.n	802635e <_free_r+0x26>
 80263c8:	b003      	add	sp, #12
 80263ca:	bd30      	pop	{r4, r5, pc}
 80263cc:	24001430 	.word	0x24001430

080263d0 <sbrk_aligned>:
 80263d0:	b570      	push	{r4, r5, r6, lr}
 80263d2:	4e0e      	ldr	r6, [pc, #56]	; (802640c <sbrk_aligned+0x3c>)
 80263d4:	460c      	mov	r4, r1
 80263d6:	6831      	ldr	r1, [r6, #0]
 80263d8:	4605      	mov	r5, r0
 80263da:	b911      	cbnz	r1, 80263e2 <sbrk_aligned+0x12>
 80263dc:	f000 f88c 	bl	80264f8 <_sbrk_r>
 80263e0:	6030      	str	r0, [r6, #0]
 80263e2:	4621      	mov	r1, r4
 80263e4:	4628      	mov	r0, r5
 80263e6:	f000 f887 	bl	80264f8 <_sbrk_r>
 80263ea:	1c43      	adds	r3, r0, #1
 80263ec:	d00a      	beq.n	8026404 <sbrk_aligned+0x34>
 80263ee:	1cc4      	adds	r4, r0, #3
 80263f0:	f024 0403 	bic.w	r4, r4, #3
 80263f4:	42a0      	cmp	r0, r4
 80263f6:	d007      	beq.n	8026408 <sbrk_aligned+0x38>
 80263f8:	1a21      	subs	r1, r4, r0
 80263fa:	4628      	mov	r0, r5
 80263fc:	f000 f87c 	bl	80264f8 <_sbrk_r>
 8026400:	3001      	adds	r0, #1
 8026402:	d101      	bne.n	8026408 <sbrk_aligned+0x38>
 8026404:	f04f 34ff 	mov.w	r4, #4294967295
 8026408:	4620      	mov	r0, r4
 802640a:	bd70      	pop	{r4, r5, r6, pc}
 802640c:	24001434 	.word	0x24001434

08026410 <_malloc_r>:
 8026410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026414:	1ccd      	adds	r5, r1, #3
 8026416:	f025 0503 	bic.w	r5, r5, #3
 802641a:	3508      	adds	r5, #8
 802641c:	2d0c      	cmp	r5, #12
 802641e:	bf38      	it	cc
 8026420:	250c      	movcc	r5, #12
 8026422:	2d00      	cmp	r5, #0
 8026424:	4607      	mov	r7, r0
 8026426:	db01      	blt.n	802642c <_malloc_r+0x1c>
 8026428:	42a9      	cmp	r1, r5
 802642a:	d905      	bls.n	8026438 <_malloc_r+0x28>
 802642c:	230c      	movs	r3, #12
 802642e:	603b      	str	r3, [r7, #0]
 8026430:	2600      	movs	r6, #0
 8026432:	4630      	mov	r0, r6
 8026434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026438:	4e2e      	ldr	r6, [pc, #184]	; (80264f4 <_malloc_r+0xe4>)
 802643a:	f000 f8b1 	bl	80265a0 <__malloc_lock>
 802643e:	6833      	ldr	r3, [r6, #0]
 8026440:	461c      	mov	r4, r3
 8026442:	bb34      	cbnz	r4, 8026492 <_malloc_r+0x82>
 8026444:	4629      	mov	r1, r5
 8026446:	4638      	mov	r0, r7
 8026448:	f7ff ffc2 	bl	80263d0 <sbrk_aligned>
 802644c:	1c43      	adds	r3, r0, #1
 802644e:	4604      	mov	r4, r0
 8026450:	d14d      	bne.n	80264ee <_malloc_r+0xde>
 8026452:	6834      	ldr	r4, [r6, #0]
 8026454:	4626      	mov	r6, r4
 8026456:	2e00      	cmp	r6, #0
 8026458:	d140      	bne.n	80264dc <_malloc_r+0xcc>
 802645a:	6823      	ldr	r3, [r4, #0]
 802645c:	4631      	mov	r1, r6
 802645e:	4638      	mov	r0, r7
 8026460:	eb04 0803 	add.w	r8, r4, r3
 8026464:	f000 f848 	bl	80264f8 <_sbrk_r>
 8026468:	4580      	cmp	r8, r0
 802646a:	d13a      	bne.n	80264e2 <_malloc_r+0xd2>
 802646c:	6821      	ldr	r1, [r4, #0]
 802646e:	3503      	adds	r5, #3
 8026470:	1a6d      	subs	r5, r5, r1
 8026472:	f025 0503 	bic.w	r5, r5, #3
 8026476:	3508      	adds	r5, #8
 8026478:	2d0c      	cmp	r5, #12
 802647a:	bf38      	it	cc
 802647c:	250c      	movcc	r5, #12
 802647e:	4629      	mov	r1, r5
 8026480:	4638      	mov	r0, r7
 8026482:	f7ff ffa5 	bl	80263d0 <sbrk_aligned>
 8026486:	3001      	adds	r0, #1
 8026488:	d02b      	beq.n	80264e2 <_malloc_r+0xd2>
 802648a:	6823      	ldr	r3, [r4, #0]
 802648c:	442b      	add	r3, r5
 802648e:	6023      	str	r3, [r4, #0]
 8026490:	e00e      	b.n	80264b0 <_malloc_r+0xa0>
 8026492:	6822      	ldr	r2, [r4, #0]
 8026494:	1b52      	subs	r2, r2, r5
 8026496:	d41e      	bmi.n	80264d6 <_malloc_r+0xc6>
 8026498:	2a0b      	cmp	r2, #11
 802649a:	d916      	bls.n	80264ca <_malloc_r+0xba>
 802649c:	1961      	adds	r1, r4, r5
 802649e:	42a3      	cmp	r3, r4
 80264a0:	6025      	str	r5, [r4, #0]
 80264a2:	bf18      	it	ne
 80264a4:	6059      	strne	r1, [r3, #4]
 80264a6:	6863      	ldr	r3, [r4, #4]
 80264a8:	bf08      	it	eq
 80264aa:	6031      	streq	r1, [r6, #0]
 80264ac:	5162      	str	r2, [r4, r5]
 80264ae:	604b      	str	r3, [r1, #4]
 80264b0:	4638      	mov	r0, r7
 80264b2:	f104 060b 	add.w	r6, r4, #11
 80264b6:	f000 f879 	bl	80265ac <__malloc_unlock>
 80264ba:	f026 0607 	bic.w	r6, r6, #7
 80264be:	1d23      	adds	r3, r4, #4
 80264c0:	1af2      	subs	r2, r6, r3
 80264c2:	d0b6      	beq.n	8026432 <_malloc_r+0x22>
 80264c4:	1b9b      	subs	r3, r3, r6
 80264c6:	50a3      	str	r3, [r4, r2]
 80264c8:	e7b3      	b.n	8026432 <_malloc_r+0x22>
 80264ca:	6862      	ldr	r2, [r4, #4]
 80264cc:	42a3      	cmp	r3, r4
 80264ce:	bf0c      	ite	eq
 80264d0:	6032      	streq	r2, [r6, #0]
 80264d2:	605a      	strne	r2, [r3, #4]
 80264d4:	e7ec      	b.n	80264b0 <_malloc_r+0xa0>
 80264d6:	4623      	mov	r3, r4
 80264d8:	6864      	ldr	r4, [r4, #4]
 80264da:	e7b2      	b.n	8026442 <_malloc_r+0x32>
 80264dc:	4634      	mov	r4, r6
 80264de:	6876      	ldr	r6, [r6, #4]
 80264e0:	e7b9      	b.n	8026456 <_malloc_r+0x46>
 80264e2:	230c      	movs	r3, #12
 80264e4:	603b      	str	r3, [r7, #0]
 80264e6:	4638      	mov	r0, r7
 80264e8:	f000 f860 	bl	80265ac <__malloc_unlock>
 80264ec:	e7a1      	b.n	8026432 <_malloc_r+0x22>
 80264ee:	6025      	str	r5, [r4, #0]
 80264f0:	e7de      	b.n	80264b0 <_malloc_r+0xa0>
 80264f2:	bf00      	nop
 80264f4:	24001430 	.word	0x24001430

080264f8 <_sbrk_r>:
 80264f8:	b538      	push	{r3, r4, r5, lr}
 80264fa:	4d06      	ldr	r5, [pc, #24]	; (8026514 <_sbrk_r+0x1c>)
 80264fc:	2300      	movs	r3, #0
 80264fe:	4604      	mov	r4, r0
 8026500:	4608      	mov	r0, r1
 8026502:	602b      	str	r3, [r5, #0]
 8026504:	f7dd fc3a 	bl	8003d7c <_sbrk>
 8026508:	1c43      	adds	r3, r0, #1
 802650a:	d102      	bne.n	8026512 <_sbrk_r+0x1a>
 802650c:	682b      	ldr	r3, [r5, #0]
 802650e:	b103      	cbz	r3, 8026512 <_sbrk_r+0x1a>
 8026510:	6023      	str	r3, [r4, #0]
 8026512:	bd38      	pop	{r3, r4, r5, pc}
 8026514:	24001438 	.word	0x24001438

08026518 <_raise_r>:
 8026518:	291f      	cmp	r1, #31
 802651a:	b538      	push	{r3, r4, r5, lr}
 802651c:	4604      	mov	r4, r0
 802651e:	460d      	mov	r5, r1
 8026520:	d904      	bls.n	802652c <_raise_r+0x14>
 8026522:	2316      	movs	r3, #22
 8026524:	6003      	str	r3, [r0, #0]
 8026526:	f04f 30ff 	mov.w	r0, #4294967295
 802652a:	bd38      	pop	{r3, r4, r5, pc}
 802652c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802652e:	b112      	cbz	r2, 8026536 <_raise_r+0x1e>
 8026530:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026534:	b94b      	cbnz	r3, 802654a <_raise_r+0x32>
 8026536:	4620      	mov	r0, r4
 8026538:	f000 f830 	bl	802659c <_getpid_r>
 802653c:	462a      	mov	r2, r5
 802653e:	4601      	mov	r1, r0
 8026540:	4620      	mov	r0, r4
 8026542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026546:	f000 b817 	b.w	8026578 <_kill_r>
 802654a:	2b01      	cmp	r3, #1
 802654c:	d00a      	beq.n	8026564 <_raise_r+0x4c>
 802654e:	1c59      	adds	r1, r3, #1
 8026550:	d103      	bne.n	802655a <_raise_r+0x42>
 8026552:	2316      	movs	r3, #22
 8026554:	6003      	str	r3, [r0, #0]
 8026556:	2001      	movs	r0, #1
 8026558:	e7e7      	b.n	802652a <_raise_r+0x12>
 802655a:	2400      	movs	r4, #0
 802655c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026560:	4628      	mov	r0, r5
 8026562:	4798      	blx	r3
 8026564:	2000      	movs	r0, #0
 8026566:	e7e0      	b.n	802652a <_raise_r+0x12>

08026568 <raise>:
 8026568:	4b02      	ldr	r3, [pc, #8]	; (8026574 <raise+0xc>)
 802656a:	4601      	mov	r1, r0
 802656c:	6818      	ldr	r0, [r3, #0]
 802656e:	f7ff bfd3 	b.w	8026518 <_raise_r>
 8026572:	bf00      	nop
 8026574:	24000058 	.word	0x24000058

08026578 <_kill_r>:
 8026578:	b538      	push	{r3, r4, r5, lr}
 802657a:	4d07      	ldr	r5, [pc, #28]	; (8026598 <_kill_r+0x20>)
 802657c:	2300      	movs	r3, #0
 802657e:	4604      	mov	r4, r0
 8026580:	4608      	mov	r0, r1
 8026582:	4611      	mov	r1, r2
 8026584:	602b      	str	r3, [r5, #0]
 8026586:	f7dd fbdf 	bl	8003d48 <_kill>
 802658a:	1c43      	adds	r3, r0, #1
 802658c:	d102      	bne.n	8026594 <_kill_r+0x1c>
 802658e:	682b      	ldr	r3, [r5, #0]
 8026590:	b103      	cbz	r3, 8026594 <_kill_r+0x1c>
 8026592:	6023      	str	r3, [r4, #0]
 8026594:	bd38      	pop	{r3, r4, r5, pc}
 8026596:	bf00      	nop
 8026598:	24001438 	.word	0x24001438

0802659c <_getpid_r>:
 802659c:	f7dd bbcc 	b.w	8003d38 <_getpid>

080265a0 <__malloc_lock>:
 80265a0:	4801      	ldr	r0, [pc, #4]	; (80265a8 <__malloc_lock+0x8>)
 80265a2:	f000 b809 	b.w	80265b8 <__retarget_lock_acquire_recursive>
 80265a6:	bf00      	nop
 80265a8:	2400143c 	.word	0x2400143c

080265ac <__malloc_unlock>:
 80265ac:	4801      	ldr	r0, [pc, #4]	; (80265b4 <__malloc_unlock+0x8>)
 80265ae:	f000 b804 	b.w	80265ba <__retarget_lock_release_recursive>
 80265b2:	bf00      	nop
 80265b4:	2400143c 	.word	0x2400143c

080265b8 <__retarget_lock_acquire_recursive>:
 80265b8:	4770      	bx	lr

080265ba <__retarget_lock_release_recursive>:
 80265ba:	4770      	bx	lr

080265bc <_init>:
 80265bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265be:	bf00      	nop
 80265c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80265c2:	bc08      	pop	{r3}
 80265c4:	469e      	mov	lr, r3
 80265c6:	4770      	bx	lr

080265c8 <_fini>:
 80265c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80265ca:	bf00      	nop
 80265cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80265ce:	bc08      	pop	{r3}
 80265d0:	469e      	mov	lr, r3
 80265d2:	4770      	bx	lr
