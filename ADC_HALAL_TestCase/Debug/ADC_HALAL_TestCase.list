
ADC_HALAL_TestCase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4dc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0801a7ac  0801a7ac  0002a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ac58  0801ac58  0002ac58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000014  0801ac60  0801ac60  0002ac60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000014  0801ac74  0801ac74  0002ac74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  24000000  0801ac88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000b4  0801ad3c  000300b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000114  0801ad9c  00030114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d0  24000174  0801adfc  00030174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001244  0801adfc  00031244  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008db7d  00000000  00000000  000301a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fdd  00000000  00000000  000bdd1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004ba0  00000000  00000000  000c6d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004ba0  00000000  00000000  000cb8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004bdb0  00000000  00000000  000d0440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045558  00000000  00000000  0011c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0021b272  00000000  00000000  00161748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0037c9ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015d9c  00000000  00000000  0037ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000174 	.word	0x24000174
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801a794 	.word	0x0801a794

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000178 	.word	0x24000178
 800030c:	0801a794 	.word	0x0801a794

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <HAL_ADC_MspInit>:
}

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b092      	sub	sp, #72	; 0x48
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a9f      	ldr	r2, [pc, #636]	; (80008b0 <HAL_ADC_MspInit+0x29c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	f040 80b6 	bne.w	80007a4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000638:	4b9e      	ldr	r3, [pc, #632]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a9d      	ldr	r2, [pc, #628]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 8000640:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000642:	4b9c      	ldr	r3, [pc, #624]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d10e      	bne.n	8000668 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800064a:	4b9b      	ldr	r3, [pc, #620]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800064c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000650:	4a99      	ldr	r2, [pc, #612]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000652:	f043 0320 	orr.w	r3, r3, #32
 8000656:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800065a:	4b97      	ldr	r3, [pc, #604]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800065c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000660:	f003 0320 	and.w	r3, r3, #32
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
 8000666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b93      	ldr	r3, [pc, #588]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800066a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066e:	4a92      	ldr	r2, [pc, #584]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000678:	4b8f      	ldr	r3, [pc, #572]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800067a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b8c      	ldr	r3, [pc, #560]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a8a      	ldr	r2, [pc, #552]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b88      	ldr	r3, [pc, #544]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a4:	4b84      	ldr	r3, [pc, #528]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a83      	ldr	r2, [pc, #524]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c2:	4b7d      	ldr	r3, [pc, #500]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a7b      	ldr	r2, [pc, #492]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0320 	and.w	r3, r3, #32
 80006dc:	623b      	str	r3, [r7, #32]
 80006de:	6a3b      	ldr	r3, [r7, #32]
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = ADC_16BIT_Pin;
 80006e0:	2301      	movs	r3, #1
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	2303      	movs	r3, #3
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ADC_16BIT_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f0:	4619      	mov	r1, r3
 80006f2:	4872      	ldr	r0, [pc, #456]	; (80008bc <HAL_ADC_MspInit+0x2a8>)
 80006f4:	f007 ff9e 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITA0_Pin|ADC_16BITA3_Pin|ADC_16BITA4_Pin|ADC_16BITA5_Pin
 80006f8:	2379      	movs	r3, #121	; 0x79
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	4619      	mov	r1, r3
 800070a:	486d      	ldr	r0, [pc, #436]	; (80008c0 <HAL_ADC_MspInit+0x2ac>)
 800070c:	f007 ff92 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITB0_Pin|ADC_16BITB1_Pin;
 8000710:	2303      	movs	r3, #3
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000714:	2303      	movs	r3, #3
 8000716:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000720:	4619      	mov	r1, r3
 8000722:	4868      	ldr	r0, [pc, #416]	; (80008c4 <HAL_ADC_MspInit+0x2b0>)
 8000724:	f007 ff86 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_16BITF11_Pin|ADC_16BITF12_Pin;
 8000728:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072e:	2303      	movs	r3, #3
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800073a:	4619      	mov	r1, r3
 800073c:	4862      	ldr	r0, [pc, #392]	; (80008c8 <HAL_ADC_MspInit+0x2b4>)
 800073e:	f007 ff79 	bl	8008634 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000742:	4b62      	ldr	r3, [pc, #392]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000744:	4a62      	ldr	r2, [pc, #392]	; (80008d0 <HAL_ADC_MspInit+0x2bc>)
 8000746:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000748:	4b60      	ldr	r3, [pc, #384]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800074a:	2209      	movs	r2, #9
 800074c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800074e:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000754:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075a:	4b5c      	ldr	r3, [pc, #368]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800075c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000762:	4b5a      	ldr	r3, [pc, #360]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800076a:	4b58      	ldr	r3, [pc, #352]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000772:	4b56      	ldr	r3, [pc, #344]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800077a:	4b54      	ldr	r3, [pc, #336]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000780:	4b52      	ldr	r3, [pc, #328]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000782:	2200      	movs	r2, #0
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000786:	4851      	ldr	r0, [pc, #324]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 8000788:	f004 fe4a 	bl	8005420 <HAL_DMA_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8000792:	f000 ff46 	bl	8001622 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a4c      	ldr	r2, [pc, #304]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800079a:	659a      	str	r2, [r3, #88]	; 0x58
 800079c:	4a4b      	ldr	r2, [pc, #300]	; (80008cc <HAL_ADC_MspInit+0x2b8>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007a2:	e120      	b.n	80009e6 <HAL_ADC_MspInit+0x3d2>
  else if(adcHandle->Instance==ADC2)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a4a      	ldr	r2, [pc, #296]	; (80008d4 <HAL_ADC_MspInit+0x2c0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	f040 8098 	bne.w	80008e0 <HAL_ADC_MspInit+0x2cc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007b0:	4b40      	ldr	r3, [pc, #256]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80007ba:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <HAL_ADC_MspInit+0x2a0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10e      	bne.n	80007e0 <HAL_ADC_MspInit+0x1cc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80007c2:	4b3d      	ldr	r3, [pc, #244]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007c8:	4a3b      	ldr	r2, [pc, #236]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	61fb      	str	r3, [r7, #28]
 80007de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b35      	ldr	r3, [pc, #212]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f0:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000804:	4a2c      	ldr	r2, [pc, #176]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <HAL_ADC_MspInit+0x2a4>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000820:	2303      	movs	r3, #3
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800082c:	4619      	mov	r1, r3
 800082e:	4824      	ldr	r0, [pc, #144]	; (80008c0 <HAL_ADC_MspInit+0x2ac>)
 8000830:	f007 ff00 	bl	8008634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_16BITF13_Pin|ADC_16BITF14_Pin;
 8000834:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083a:	2303      	movs	r3, #3
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000846:	4619      	mov	r1, r3
 8000848:	481f      	ldr	r0, [pc, #124]	; (80008c8 <HAL_ADC_MspInit+0x2b4>)
 800084a:	f007 fef3 	bl	8008634 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 800084e:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000850:	4a22      	ldr	r2, [pc, #136]	; (80008dc <HAL_ADC_MspInit+0x2c8>)
 8000852:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000856:	220a      	movs	r2, #10
 8000858:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000874:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000878:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000880:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000884:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000892:	4811      	ldr	r0, [pc, #68]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 8000894:	f004 fdc4 	bl	8005420 <HAL_DMA_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_ADC_MspInit+0x28e>
      Error_Handler();
 800089e:	f000 fec0 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 80008a6:	659a      	str	r2, [r3, #88]	; 0x58
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_ADC_MspInit+0x2c4>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80008ae:	e09a      	b.n	80009e6 <HAL_ADC_MspInit+0x3d2>
 80008b0:	40022000 	.word	0x40022000
 80008b4:	24000448 	.word	0x24000448
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020800 	.word	0x58020800
 80008c0:	58020000 	.word	0x58020000
 80008c4:	58020400 	.word	0x58020400
 80008c8:	58021400 	.word	0x58021400
 80008cc:	240002e0 	.word	0x240002e0
 80008d0:	40020010 	.word	0x40020010
 80008d4:	40022100 	.word	0x40022100
 80008d8:	24000358 	.word	0x24000358
 80008dc:	40020028 	.word	0x40020028
  else if(adcHandle->Instance==ADC3)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a42      	ldr	r2, [pc, #264]	; (80009f0 <HAL_ADC_MspInit+0x3dc>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d17d      	bne.n	80009e6 <HAL_ADC_MspInit+0x3d2>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	4a40      	ldr	r2, [pc, #256]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008fa:	4b3e      	ldr	r3, [pc, #248]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000908:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090e:	4a39      	ldr	r2, [pc, #228]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000918:	4b36      	ldr	r3, [pc, #216]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a31      	ldr	r2, [pc, #196]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_ADC_MspInit+0x3e0>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12BIT_Pin|ADC_12BITF6_Pin|ADC_12BITF7_Pin|ADC_12BITF8_Pin
 8000944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000952:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000956:	4619      	mov	r1, r3
 8000958:	4827      	ldr	r0, [pc, #156]	; (80009f8 <HAL_ADC_MspInit+0x3e4>)
 800095a:	f007 fe6b 	bl	8008634 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800095e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000962:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000966:	f002 fb61 	bl	800302c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800096a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800096e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000972:	f002 fb5b 	bl	800302c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream2;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_ADC_MspInit+0x3ec>)
 800097a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 800097e:	2273      	movs	r2, #115	; 0x73
 8000980:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000994:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 8000998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800099c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009a4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ac:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009bc:	f004 fd30 	bl	8005420 <HAL_DMA_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <HAL_ADC_MspInit+0x3b6>
      Error_Handler();
 80009c6:	f000 fe2c 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009ce:	659a      	str	r2, [r3, #88]	; 0x58
 80009d0:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_ADC_MspInit+0x3e8>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	207f      	movs	r0, #127	; 0x7f
 80009dc:	f004 fceb 	bl	80053b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80009e0:	207f      	movs	r0, #127	; 0x7f
 80009e2:	f004 fd02 	bl	80053ea <HAL_NVIC_EnableIRQ>
}
 80009e6:	bf00      	nop
 80009e8:	3748      	adds	r7, #72	; 0x48
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58026000 	.word	0x58026000
 80009f4:	58024400 	.word	0x58024400
 80009f8:	58021400 	.word	0x58021400
 80009fc:	240003d0 	.word	0x240003d0
 8000a00:	40020040 	.word	0x40020040

08000a04 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_CORDIC_Init+0x20>)
 8000a0a:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <MX_CORDIC_Init+0x24>)
 8000a0c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_CORDIC_Init+0x20>)
 8000a10:	f004 fbc4 	bl	800519c <HAL_CORDIC_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000a1a:	f000 fe02 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2400044c 	.word	0x2400044c
 8000a28:	48024400 	.word	0x48024400

08000a2c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_CORDIC_MspInit+0x3c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10e      	bne.n	8000a5c <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a44:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_CORDIC_MspInit+0x40>)
 8000a50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	48024400 	.word	0x48024400
 8000a6c:	58024400 	.word	0x58024400

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_DMA_Init+0x5c>)
 8000a88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2100      	movs	r1, #0
 8000a98:	200b      	movs	r0, #11
 8000a9a:	f004 fc8c 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f004 fca3 	bl	80053ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	200c      	movs	r0, #12
 8000aaa:	f004 fc84 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000aae:	200c      	movs	r0, #12
 8000ab0:	f004 fc9b 	bl	80053ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f004 fc7c 	bl	80053b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000abe:	200d      	movs	r0, #13
 8000ac0:	f004 fc93 	bl	80053ea <HAL_NVIC_EnableIRQ>

}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	58024400 	.word	0x58024400

08000ad0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <MX_ETH_Init+0x80>)
 8000ad6:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <MX_ETH_Init+0x84>)
 8000ad8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_ETH_Init+0x88>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_ETH_Init+0x88>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_ETH_Init+0x88>)
 8000ae8:	22e1      	movs	r2, #225	; 0xe1
 8000aea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_ETH_Init+0x88>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_ETH_Init+0x88>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_ETH_Init+0x88>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <MX_ETH_Init+0x88>)
 8000b02:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <MX_ETH_Init+0x8c>)
 8000b0e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b12:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <MX_ETH_Init+0x90>)
 8000b14:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b18:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b1c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_ETH_Init+0x80>)
 8000b20:	f006 fd54 	bl	80075cc <HAL_ETH_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b2a:	f000 fd7a 	bl	8001622 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b2e:	2238      	movs	r2, #56	; 0x38
 8000b30:	2100      	movs	r1, #0
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b34:	f019 fce4 	bl	801a500 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b3a:	2221      	movs	r2, #33	; 0x21
 8000b3c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b44:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_ETH_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	240004ac 	.word	0x240004ac
 8000b54:	40028000 	.word	0x40028000
 8000b58:	2400055c 	.word	0x2400055c
 8000b5c:	24000114 	.word	0x24000114
 8000b60:	240000b4 	.word	0x240000b4
 8000b64:	24000474 	.word	0x24000474

08000b68 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	; 0x38
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a59      	ldr	r2, [pc, #356]	; (8000cec <HAL_ETH_MspInit+0x184>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f040 80ab 	bne.w	8000ce2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b8c:	4b58      	ldr	r3, [pc, #352]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b92:	4a57      	ldr	r2, [pc, #348]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b98:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b9c:	4b54      	ldr	r3, [pc, #336]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000b9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ba6:	623b      	str	r3, [r7, #32]
 8000ba8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000baa:	4b51      	ldr	r3, [pc, #324]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb0:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bba:	4b4d      	ldr	r3, [pc, #308]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bc8:	4b49      	ldr	r3, [pc, #292]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bce:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bd8:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a40      	ldr	r2, [pc, #256]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a39      	ldr	r2, [pc, #228]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a31      	ldr	r2, [pc, #196]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a2a      	ldr	r2, [pc, #168]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c5e:	2332      	movs	r3, #50	; 0x32
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <HAL_ETH_MspInit+0x18c>)
 8000c7a:	f007 fcdb 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c7e:	2386      	movs	r3, #134	; 0x86
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <HAL_ETH_MspInit+0x190>)
 8000c9a:	f007 fccb 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <HAL_ETH_MspInit+0x194>)
 8000cbc:	f007 fcba 	bl	8008634 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_ETH_MspInit+0x198>)
 8000cde:	f007 fca9 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40028000 	.word	0x40028000
 8000cf0:	58024400 	.word	0x58024400
 8000cf4:	58020800 	.word	0x58020800
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	58020400 	.word	0x58020400
 8000d00:	58021800 	.word	0x58021800

08000d04 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan3;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <MX_FDCAN1_Init+0xc4>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d0e:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000d26:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d2e:	2210      	movs	r2, #16
 8000d30:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d76:	2204      	movs	r2, #4
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d82:	2204      	movs	r2, #4
 8000d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d98:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_FDCAN1_Init+0xc0>)
 8000db2:	f007 f82f 	bl	8007e14 <HAL_FDCAN_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000dbc:	f000 fc31 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000564 	.word	0x24000564
 8000dc8:	4000a000 	.word	0x4000a000

08000dcc <MX_FDCAN3_Init>:
/* FDCAN3 init function */
void MX_FDCAN3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <MX_FDCAN3_Init+0xc4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e02:	2202      	movs	r2, #2
 8000e04:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_FDCAN3_Init+0xc0>)
 8000e7a:	f006 ffcb 	bl	8007e14 <HAL_FDCAN_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000e84:	f000 fbcd 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000604 	.word	0x24000604
 8000e90:	4000d400 	.word	0x4000d400

08000e94 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b8      	sub	sp, #224	; 0xe0
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0318 	add.w	r3, r7, #24
 8000eb0:	22b4      	movs	r2, #180	; 0xb4
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f019 fb23 	bl	801a500 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_FDCAN_MspInit+0x17c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d14e      	bne.n	8000f62 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000eca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ece:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f009 f8fa 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000ee2:	f000 fb9e 	bl	8001622 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000eee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ef0:	4b48      	ldr	r3, [pc, #288]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10e      	bne.n	8000f16 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ef8:	4b47      	ldr	r3, [pc, #284]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f04:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f08:	4b43      	ldr	r3, [pc, #268]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f0a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <HAL_FDCAN_MspInit+0x188>)
 8000f5c:	f007 fb6a 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }
}
 8000f60:	e052      	b.n	8001008 <HAL_FDCAN_MspInit+0x174>
  else if(fdcanHandle->Instance==FDCAN3)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_FDCAN_MspInit+0x18c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d14d      	bne.n	8001008 <HAL_FDCAN_MspInit+0x174>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f009 f8a6 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8000f8a:	f000 fb4a 	bl	8001622 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_FDCAN_MspInit+0x180>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d10e      	bne.n	8000fbe <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fa2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fb2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_FDCAN_MspInit+0x184>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fdc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001000:	4619      	mov	r1, r3
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <HAL_FDCAN_MspInit+0x190>)
 8001004:	f007 fb16 	bl	8008634 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	37e0      	adds	r7, #224	; 0xe0
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	4000a000 	.word	0x4000a000
 8001014:	240006a4 	.word	0x240006a4
 8001018:	58024400 	.word	0x58024400
 800101c:	58020000 	.word	0x58020000
 8001020:	4000d400 	.word	0x4000d400
 8001024:	58021800 	.word	0x58021800

08001028 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_FMAC_Init+0x20>)
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <MX_FMAC_Init+0x24>)
 8001030:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_FMAC_Init+0x20>)
 8001034:	f007 fa52 	bl	80084dc <HAL_FMAC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800103e:	f000 faf0 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	240006a8 	.word	0x240006a8
 800104c:	48024000 	.word	0x48024000

08001050 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_FMAC_MspInit+0x3c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10e      	bne.n	8001080 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 8001064:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001068:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 800106a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_FMAC_MspInit+0x40>)
 8001074:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	48024000 	.word	0x48024000
 8001090:	58024400 	.word	0x58024400

08001094 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim2;
LPTIM_HandleTypeDef hlptim3;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_LPTIM1_Init+0x54>)
 800109c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b0:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_LPTIM1_Init+0x50>)
 80010d2:	f007 fc7d 	bl	80089d0 <HAL_LPTIM_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80010dc:	f000 faa1 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	240006e0 	.word	0x240006e0
 80010e8:	40002400 	.word	0x40002400

080010ec <MX_LPTIM2_Init>:
/* LPTIM2 init function */
void MX_LPTIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_LPTIM2_Init+0x50>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <MX_LPTIM2_Init+0x54>)
 80010f4:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_LPTIM2_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_LPTIM2_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_LPTIM2_Init+0x50>)
 8001104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001108:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_LPTIM2_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_LPTIM2_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_LPTIM2_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_LPTIM2_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_LPTIM2_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_LPTIM2_Init+0x50>)
 800112a:	f007 fc51 	bl	80089d0 <HAL_LPTIM_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8001134:	f000 fa75 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24000718 	.word	0x24000718
 8001140:	58002400 	.word	0x58002400

08001144 <MX_LPTIM3_Init>:
/* LPTIM3 init function */
void MX_LPTIM3_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_LPTIM3_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 800115c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001160:	615a      	str	r2, [r3, #20]
  hlptim3.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_LPTIM3_Init+0x4c>)
 800117c:	f007 fc28 	bl	80089d0 <HAL_LPTIM_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_LPTIM3_Init+0x46>
  {
    Error_Handler();
 8001186:	f000 fa4c 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	24000750 	.word	0x24000750
 8001194:	58002800 	.word	0x58002800

08001198 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0b2      	sub	sp, #200	; 0xc8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	22b4      	movs	r2, #180	; 0xb4
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f019 f9a9 	bl	801a500 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a42      	ldr	r2, [pc, #264]	; (80012bc <HAL_LPTIM_MspInit+0x124>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d126      	bne.n	8001206 <HAL_LPTIM_MspInit+0x6e>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80011b8:	2320      	movs	r3, #32
 80011ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_D2PCLK1;
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4618      	mov	r0, r3
 80011c8:	f008 ff82 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 80011d2:	f000 fa26 	bl	8001622 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 80011d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011dc:	4a38      	ldr	r2, [pc, #224]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011e6:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 80011e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	205d      	movs	r0, #93	; 0x5d
 80011fa:	f004 f8dc 	bl	80053b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80011fe:	205d      	movs	r0, #93	; 0x5d
 8001200:	f004 f8f3 	bl	80053ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
  /* USER CODE BEGIN LPTIM3_MspInit 1 */

  /* USER CODE END LPTIM3_MspInit 1 */
  }
}
 8001204:	e056      	b.n	80012b4 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM2)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_LPTIM_MspInit+0x12c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d126      	bne.n	800125e <HAL_LPTIM_MspInit+0xc6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8001210:	2340      	movs	r3, #64	; 0x40
 8001212:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_D3PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4618      	mov	r0, r3
 8001220:	f008 ff56 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_LPTIM_MspInit+0x96>
      Error_Handler();
 800122a:	f000 f9fa 	bl	8001622 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	208a      	movs	r0, #138	; 0x8a
 8001252:	f004 f8b0 	bl	80053b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8001256:	208a      	movs	r0, #138	; 0x8a
 8001258:	f004 f8c7 	bl	80053ea <HAL_NVIC_EnableIRQ>
}
 800125c:	e02a      	b.n	80012b4 <HAL_LPTIM_MspInit+0x11c>
  else if(lptimHandle->Instance==LPTIM3)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_LPTIM_MspInit+0x130>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d125      	bne.n	80012b4 <HAL_LPTIM_MspInit+0x11c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM3;
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim345ClockSelection = RCC_LPTIM345CLKSOURCE_D3PCLK1;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4618      	mov	r0, r3
 8001278:	f008 ff2a 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_LPTIM_MspInit+0xee>
      Error_Handler();
 8001282:	f000 f9ce 	bl	8001622 <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128c:	4a0c      	ldr	r2, [pc, #48]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 800128e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_LPTIM_MspInit+0x128>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(LPTIM3_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	208b      	movs	r0, #139	; 0x8b
 80012aa:	f004 f884 	bl	80053b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM3_IRQn);
 80012ae:	208b      	movs	r0, #139	; 0x8b
 80012b0:	f004 f89b 	bl	80053ea <HAL_NVIC_EnableIRQ>
}
 80012b4:	bf00      	nop
 80012b6:	37c8      	adds	r7, #200	; 0xc8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40002400 	.word	0x40002400
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58002400 	.word	0x58002400
 80012c8:	58002800 	.word	0x58002800

080012cc <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	f019 f8ac 	bl	801a42c <abort>

080012d4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0

  HAL_Init();
 80012da:	f001 fddd 	bl	8002e98 <HAL_Init>
  SystemClock_Config();
 80012de:	f000 f8e5 	bl	80014ac <_Z18SystemClock_Configv>
  PeriphCommonClock_Config();
 80012e2:	f000 f96d 	bl	80015c0 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN 1 */
  uint8_t adc = ADC::inscribe(PF11).value_or(69);
 80012e6:	4b6d      	ldr	r3, [pc, #436]	; (800149c <main+0x1c8>)
 80012e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012ec:	f00e fe48 	bl	800ff80 <_ZN3ADC8inscribeE3Pin>
 80012f0:	4603      	mov	r3, r0
 80012f2:	80bb      	strh	r3, [r7, #4]
 80012f4:	2345      	movs	r3, #69	; 0x45
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	f107 0208 	add.w	r2, r7, #8
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f9ae 	bl	8001662 <_ZNOSt8optionalIhE8value_orIiEEhOT_>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t adc2 = ADC::inscribe(PA6).value_or(70);
 800130c:	4b64      	ldr	r3, [pc, #400]	; (80014a0 <main+0x1cc>)
 800130e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001312:	f00e fe35 	bl	800ff80 <_ZN3ADC8inscribeE3Pin>
 8001316:	4603      	mov	r3, r0
 8001318:	81bb      	strh	r3, [r7, #12]
 800131a:	2346      	movs	r3, #70	; 0x46
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f99a 	bl	8001662 <_ZNOSt8optionalIhE8value_orIiEEhOT_>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  uint8_t adc3 = ADC::inscribe(PF13).value_or(71);
 8001334:	4b5b      	ldr	r3, [pc, #364]	; (80014a4 <main+0x1d0>)
 8001336:	e893 0003 	ldmia.w	r3, {r0, r1}
 800133a:	f00e fe21 	bl	800ff80 <_ZN3ADC8inscribeE3Pin>
 800133e:	4603      	mov	r3, r0
 8001340:	82bb      	strh	r3, [r7, #20]
 8001342:	2347      	movs	r3, #71	; 0x47
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	f107 0218 	add.w	r2, r7, #24
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f986 	bl	8001662 <_ZNOSt8optionalIhE8value_orIiEEhOT_>
 8001356:	4603      	mov	r3, r0
 8001358:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  uint8_t adc4 = ADC::inscribe(PF14).value_or(72);
 800135c:	4b52      	ldr	r3, [pc, #328]	; (80014a8 <main+0x1d4>)
 800135e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001362:	f00e fe0d 	bl	800ff80 <_ZN3ADC8inscribeE3Pin>
 8001366:	4603      	mov	r3, r0
 8001368:	83bb      	strh	r3, [r7, #28]
 800136a:	2348      	movs	r3, #72	; 0x48
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	f107 0220 	add.w	r2, r7, #32
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f972 	bl	8001662 <_ZNOSt8optionalIhE8value_orIiEEhOT_>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
//  uint8_t adc5 = ADC::inscribe(PC2).value_or(73);
//  uint8_t adc6 = ADC::inscribe(PC3).value_or(74);
  Pin::start();
 8001384:	f00d fcc4 	bl	800ed10 <_ZN3Pin5startEv>
  /* USER CODE END 1 */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 8001388:	f7ff fba2 	bl	8000ad0 <MX_ETH_Init>
  MX_DMA_Init();
 800138c:	f7ff fb70 	bl	8000a70 <MX_DMA_Init>
  ADC::start();
 8001390:	f00e fe72 	bl	8010078 <_ZN3ADC5startEv>
  MX_FDCAN1_Init();
 8001394:	f7ff fcb6 	bl	8000d04 <MX_FDCAN1_Init>
  MX_TIM1_Init();
 8001398:	f000 fc6a 	bl	8001c70 <MX_TIM1_Init>
  MX_TIM3_Init();
 800139c:	f000 fd72 	bl	8001e84 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013a0:	f000 fdec 	bl	8001f7c <MX_TIM4_Init>
  MX_TIM8_Init();
 80013a4:	f000 fe66 	bl	8002074 <MX_TIM8_Init>
  MX_TIM12_Init();
 80013a8:	f000 febe 	bl	8002128 <MX_TIM12_Init>
  MX_TIM23_Init();
 80013ac:	f001 f892 	bl	80024d4 <MX_TIM23_Init>
  MX_USART1_UART_Init();
 80013b0:	f001 fbfe 	bl	8002bb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80013b4:	f001 fc48 	bl	8002c48 <MX_USART2_UART_Init>
  MX_CORDIC_Init();
 80013b8:	f7ff fb24 	bl	8000a04 <MX_CORDIC_Init>
  MX_FMAC_Init();
 80013bc:	f7ff fe34 	bl	8001028 <MX_FMAC_Init>
  MX_RTC_Init();
 80013c0:	f000 f9da 	bl	8001778 <MX_RTC_Init>
  MX_TIM15_Init();
 80013c4:	f000 ff00 	bl	80021c8 <MX_TIM15_Init>
  MX_TIM16_Init();
 80013c8:	f000 ff90 	bl	80022ec <MX_TIM16_Init>
  MX_LPTIM1_Init();
 80013cc:	f7ff fe62 	bl	8001094 <MX_LPTIM1_Init>
  MX_LPTIM3_Init();
 80013d0:	f7ff feb8 	bl	8001144 <MX_LPTIM3_Init>
  MX_SPI3_Init();
 80013d4:	f000 fa28 	bl	8001828 <MX_SPI3_Init>
  MX_TIM17_Init();
 80013d8:	f001 f802 	bl	80023e0 <MX_TIM17_Init>
  MX_FDCAN3_Init();
 80013dc:	f7ff fcf6 	bl	8000dcc <MX_FDCAN3_Init>
  MX_LPTIM2_Init();
 80013e0:	f7ff fe84 	bl	80010ec <MX_LPTIM2_Init>
  MX_TIM2_Init();
 80013e4:	f000 fcf8 	bl	8001dd8 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */

  ADC::turn_on(adc);
 80013e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00e fe67 	bl	80100c0 <_ZN3ADC7turn_onEh>
  ADC::turn_on(adc2);
 80013f2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00e fe62 	bl	80100c0 <_ZN3ADC7turn_onEh>
  ADC::turn_on(adc2);
 80013fc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001400:	4618      	mov	r0, r3
 8001402:	f00e fe5d 	bl	80100c0 <_ZN3ADC7turn_onEh>
//  ADC::turn_on(adc2);
  ADC::turn_on(adc3);
 8001406:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800140a:	4618      	mov	r0, r3
 800140c:	f00e fe58 	bl	80100c0 <_ZN3ADC7turn_onEh>
//  ADC::turn_on(adc5);

  while(1) {
	  HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	; 0x64
 8001412:	f001 fdd3 	bl	8002fbc <HAL_Delay>
	  float value = ADC::get_value(adc).value();
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f00e fea9 	bl	8010178 <_ZN3ADC9get_valueEh>
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f944 	bl	80016b8 <_ZNOSt8optionalIfE5valueEv>
 8001430:	4603      	mov	r3, r0
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	653b      	str	r3, [r7, #80]	; 0x50
	  float value2 = ADC::get_value(adc2).value();
 8001436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143a:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f00e fe99 	bl	8010178 <_ZN3ADC9get_valueEh>
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f934 	bl	80016b8 <_ZNOSt8optionalIfE5valueEv>
 8001450:	4603      	mov	r3, r0
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
	  float value3 = ADC::get_value(adc3).value();
 8001456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800145a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f00e fe89 	bl	8010178 <_ZN3ADC9get_valueEh>
 8001466:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f924 	bl	80016b8 <_ZNOSt8optionalIfE5valueEv>
 8001470:	4603      	mov	r3, r0
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	64bb      	str	r3, [r7, #72]	; 0x48
	  float value4 = ADC::get_value(adc4).value();
 8001476:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800147a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f00e fe79 	bl	8010178 <_ZN3ADC9get_valueEh>
 8001486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f914 	bl	80016b8 <_ZNOSt8optionalIfE5valueEv>
 8001490:	4603      	mov	r3, r0
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	647b      	str	r3, [r7, #68]	; 0x44
//	  float value5 = ADC::get_value(adc5).value();
//	  float value6 = ADC::get_value(adc6).value();
	  __NOP();
 8001496:	bf00      	nop
  };
 8001498:	e7ba      	b.n	8001410 <main+0x13c>
 800149a:	bf00      	nop
 800149c:	24000d84 	.word	0x24000d84
 80014a0:	24000d4c 	.word	0x24000d4c
 80014a4:	24000d94 	.word	0x24000d94
 80014a8:	24000d9c 	.word	0x24000d9c

080014ac <_Z18SystemClock_Configv>:

  /* USER CODE END 2 */

}
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b09c      	sub	sp, #112	; 0x70
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	224c      	movs	r2, #76	; 0x4c
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f019 f820 	bl	801a500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2220      	movs	r2, #32
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f019 f81a 	bl	801a500 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f007 fe8b 	bl	80091e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b38      	ldr	r3, [pc, #224]	; (80015b8 <_Z18SystemClock_Configv+0x10c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4a37      	ldr	r2, [pc, #220]	; (80015b8 <_Z18SystemClock_Configv+0x10c>)
 80014dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e0:	6193      	str	r3, [r2, #24]
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <_Z18SystemClock_Configv+0x10c>)
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <_Z18SystemClock_Configv+0x10c>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014fa:	bf14      	ite	ne
 80014fc:	2301      	movne	r3, #1
 80014fe:	2300      	moveq	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d000      	beq.n	8001508 <_Z18SystemClock_Configv+0x5c>
 8001506:	e7f2      	b.n	80014ee <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <_Z18SystemClock_Configv+0x110>)
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f023 0303 	bic.w	r3, r3, #3
 8001510:	4a2a      	ldr	r2, [pc, #168]	; (80015bc <_Z18SystemClock_Configv+0x110>)
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001518:	2309      	movs	r3, #9
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001522:	2301      	movs	r3, #1
 8001524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	2302      	movs	r3, #2
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800152e:	2304      	movs	r3, #4
 8001530:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001532:	f240 1313 	movw	r3, #275	; 0x113
 8001536:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001544:	2304      	movs	r3, #4
 8001546:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001548:	2300      	movs	r3, #0
 800154a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4618      	mov	r0, r3
 8001556:	f007 fe81 	bl	800925c <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	bf14      	ite	ne
 8001560:	2301      	movne	r3, #1
 8001562:	2300      	moveq	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 800156a:	f000 f85a 	bl	8001622 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	233f      	movs	r3, #63	; 0x3f
 8001570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800157a:	2308      	movs	r3, #8
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2103      	movs	r1, #3
 8001594:	4618      	mov	r0, r3
 8001596:	f008 fa0f 	bl	80099b8 <HAL_RCC_ClockConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <_Z18SystemClock_Configv+0x102>
  {
    Error_Handler();
 80015aa:	f000 f83a 	bl	8001622 <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3770      	adds	r7, #112	; 0x70
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58024800 	.word	0x58024800
 80015bc:	58024400 	.word	0x58024400

080015c0 <_Z24PeriphCommonClock_Configv>:
void PeriphCommonClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0ae      	sub	sp, #184	; 0xb8
 80015c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	22b4      	movs	r2, #180	; 0xb4
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f018 ff97 	bl	801a500 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80015d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80015dc:	2318      	movs	r3, #24
 80015de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015ec:	23c0      	movs	r3, #192	; 0xc0
 80015ee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	4618      	mov	r0, r3
 8001602:	f008 fd65 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_Z24PeriphCommonClock_Configv+0x5a>
  {
    Error_Handler();
 8001616:	f000 f804 	bl	8001622 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	37b8      	adds	r7, #184	; 0xb8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <Error_Handler>:

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */

void Error_Handler(void) {
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001626:	b672      	cpsid	i
}
 8001628:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  /* USER CODE END Error_Handler_Debug */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>:
      // _M_reset is a 'safe' operation with no precondition.
      constexpr void
      _M_reset() noexcept
      { static_cast<_Dp*>(this)->_M_payload._M_reset(); }

      constexpr bool _M_is_engaged() const noexcept
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	785b      	ldrb	r3, [r3, #1]
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_ZNOSt8optionalIhE8value_orIiEEhOT_>:
	    ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
	}

      template<typename _Up>
	constexpr _Tp
	value_or(_Up&& __u) &&
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
	{
	  static_assert(is_move_constructible_v<_Tp>);
	  static_assert(is_convertible_v<_Up&&, _Tp>);

	  return this->_M_is_engaged()
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ffec 	bl	800164a <_ZNKSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE13_M_is_engagedEv>
 8001672:	4603      	mov	r3, r0
	    ? std::move(this->_M_get())
 8001674:	2b00      	cmp	r3, #0
 8001676:	d009      	beq.n	800168c <_ZNOSt8optionalIhE8value_orIiEEhOT_+0x2a>
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f836 	bl	80016ea <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f83f 	bl	8001704 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>
 8001686:	4603      	mov	r3, r0
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	e005      	b.n	8001698 <_ZNOSt8optionalIhE8value_orIiEEhOT_+0x36>
	    : static_cast<_Tp>(std::forward<_Up>(__u));
 800168c:	6838      	ldr	r0, [r7, #0]
 800168e:	f7ff ffd1 	bl	8001634 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8001692:	4603      	mov	r3, r0
	    ? std::move(this->_M_get())
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b2db      	uxtb	r3, r3
	}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_ZNOSt8optionalIfE5valueEv>:
      value()&&
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffed 	bl	80016a0 <_ZNKSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE13_M_is_engagedEv>
 80016c6:	4603      	mov	r3, r0
	  ? std::move(this->_M_get())
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <_ZNOSt8optionalIfE5valueEv+0x26>
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 f824 	bl	800171a <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 f82d 	bl	8001734 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80016da:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), std::move(this->_M_get()));
 80016dc:	e001      	b.n	80016e2 <_ZNOSt8optionalIfE5valueEv+0x2a>
 80016de:	f7ff fdf5 	bl	80012cc <_ZSt27__throw_bad_optional_accessv>
      }
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_ZNSt19_Optional_base_implIhSt14_Optional_baseIhLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 f828 	bl	800174a <_ZNSt22_Optional_payload_baseIhE6_M_getEv>
 80016fa:	4603      	mov	r3, r0
      }
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZSt4moveIRhEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_ZNSt19_Optional_base_implIfSt14_Optional_baseIfLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f81b 	bl	8001760 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>
 800172a:	4603      	mov	r3, r0
      }
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_ZNSt22_Optional_payload_baseIhE6_M_getEv>:
      _M_get() noexcept
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_ZNSt22_Optional_payload_baseIfE6_M_getEv>:
      _M_get() noexcept
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_RTC_Init+0x48>)
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <MX_RTC_Init+0x4c>)
 8001780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_RTC_Init+0x48>)
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001788:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <MX_RTC_Init+0x48>)
 800178a:	227f      	movs	r2, #127	; 0x7f
 800178c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_RTC_Init+0x48>)
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <MX_RTC_Init+0x48>)
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_RTC_Init+0x48>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <MX_RTC_Init+0x48>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_RTC_Init+0x48>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_RTC_Init+0x48>)
 80017ae:	f00a fd23 	bl	800c1f8 <HAL_RTC_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80017b8:	f7ff ff33 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24000788 	.word	0x24000788
 80017c4:	58004000 	.word	0x58004000

080017c8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0b0      	sub	sp, #192	; 0xc0
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	22b4      	movs	r2, #180	; 0xb4
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f018 fe91 	bl	801a500 <memset>
  if(rtcHandle->Instance==RTC)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_RTC_MspInit+0x58>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d116      	bne.n	8001816 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4618      	mov	r0, r3
 80017fc:	f008 fc68 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001806:	f7ff ff0c 	bl	8001622 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RTC_MspInit+0x5c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a05      	ldr	r2, [pc, #20]	; (8001824 <HAL_RTC_MspInit+0x5c>)
 8001810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001816:	bf00      	nop
 8001818:	37c0      	adds	r7, #192	; 0xc0
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	58004000 	.word	0x58004000
 8001824:	58024400 	.word	0x58024400

08001828 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <MX_SPI3_Init+0xa4>)
 800182e:	4a28      	ldr	r2, [pc, #160]	; (80018d0 <MX_SPI3_Init+0xa8>)
 8001830:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001834:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001838:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <MX_SPI3_Init+0xa4>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001842:	2203      	movs	r2, #3
 8001844:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_SPI3_Init+0xa4>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001854:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001858:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_SPI3_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_SPI3_Init+0xa4>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001874:	2200      	movs	r2, #0
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_SPI3_Init+0xa4>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001882:	2200      	movs	r2, #0
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_SPI3_Init+0xa4>)
 800188e:	2200      	movs	r2, #0
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_SPI3_Init+0xa4>)
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_SPI3_Init+0xa4>)
 800189a:	2200      	movs	r2, #0
 800189c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_SPI3_Init+0xa4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_SPI3_Init+0xa4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_SPI3_Init+0xa4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_SPI3_Init+0xa4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_SPI3_Init+0xa4>)
 80018b8:	f00a fdae 	bl	800c418 <HAL_SPI_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80018c2:	f7ff feae 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	240007ac 	.word	0x240007ac
 80018d0:	40003c00 	.word	0x40003c00

080018d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0b6      	sub	sp, #216	; 0xd8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	22b4      	movs	r2, #180	; 0xb4
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f018 fe03 	bl	801a500 <memset>
  if(spiHandle->Instance==SPI3)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_SPI_MspInit+0xc0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d142      	bne.n	800198a <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800190a:	2300      	movs	r3, #0
 800190c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4618      	mov	r0, r3
 8001914:	f008 fbdc 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800191e:	f7ff fe80 	bl	8001622 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 8001924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 800192a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800192e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 8001934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_SPI_MspInit+0xc4>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800195e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001978:	2306      	movs	r3, #6
 800197a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_SPI_MspInit+0xc8>)
 8001986:	f006 fe55 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800198a:	bf00      	nop
 800198c:	37d8      	adds	r7, #216	; 0xd8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40003c00 	.word	0x40003c00
 8001998:	58024400 	.word	0x58024400
 800199c:	58020800 	.word	0x58020800

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_MspInit+0x30>)
 80019a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019ac:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x30>)
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x30>)
 80019b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	58024400 	.word	0x58024400

080019d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler+0x4>

080019da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <HardFault_Handler+0x4>

080019e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <MemManage_Handler+0x4>

080019e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <BusFault_Handler+0x4>

080019ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <UsageFault_Handler+0x4>

080019f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a20:	f001 faac 	bl	8002f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f006 ffa9 	bl	8008984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f006 ffa2 	bl	8008984 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a48:	4802      	ldr	r0, [pc, #8]	; (8001a54 <DMA1_Stream0_IRQHandler+0x10>)
 8001a4a:	f004 faad 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	240002e0 	.word	0x240002e0

08001a58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001a5c:	4802      	ldr	r0, [pc, #8]	; (8001a68 <DMA1_Stream1_IRQHandler+0x10>)
 8001a5e:	f004 faa3 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	24000358 	.word	0x24000358

08001a6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001a70:	4802      	ldr	r0, [pc, #8]	; (8001a7c <DMA1_Stream2_IRQHandler+0x10>)
 8001a72:	f004 fa99 	bl	8005fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240003d0 	.word	0x240003d0

08001a80 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <LPTIM1_IRQHandler+0x10>)
 8001a86:	f007 f8bb 	bl	8008c00 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	240006e0 	.word	0x240006e0

08001a94 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <ADC3_IRQHandler+0x10>)
 8001a9a:	f002 f8ad 	bl	8003bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	24000270 	.word	0x24000270

08001aa8 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <LPTIM2_IRQHandler+0x10>)
 8001aae:	f007 f8a7 	bl	8008c00 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24000718 	.word	0x24000718

08001abc <LPTIM3_IRQHandler>:

/**
  * @brief This function handles LPTIM3 global interrupt.
  */
void LPTIM3_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM3_IRQn 0 */

  /* USER CODE END LPTIM3_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim3);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <LPTIM3_IRQHandler+0x10>)
 8001ac2:	f007 f89d 	bl	8008c00 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM3_IRQn 1 */

  /* USER CODE END LPTIM3_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24000750 	.word	0x24000750

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <_kill>:

int _kill(int pid, int sig)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aea:	f018 fca7 	bl	801a43c <__errno>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2216      	movs	r2, #22
 8001af2:	601a      	str	r2, [r3, #0]
	return -1;
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_exit>:

void _exit (int status)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffe7 	bl	8001ae0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b12:	e7fe      	b.n	8001b12 <_exit+0x12>

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	; (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f018 fc7a 	bl	801a43c <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24050000 	.word	0x24050000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	24000834 	.word	0x24000834
 8001b7c:	24001248 	.word	0x24001248

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b84:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <SystemInit+0xd0>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <SystemInit+0xd0>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b94:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <SystemInit+0xd4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d807      	bhi.n	8001bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <SystemInit+0xd4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <SystemInit+0xd4>)
 8001baa:	f043 0307 	orr.w	r3, r3, #7
 8001bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <SystemInit+0xd8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a28      	ldr	r2, [pc, #160]	; (8001c58 <SystemInit+0xd8>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <SystemInit+0xd8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <SystemInit+0xd8>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4924      	ldr	r1, [pc, #144]	; (8001c58 <SystemInit+0xd8>)
 8001bc8:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <SystemInit+0xdc>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <SystemInit+0xd4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bda:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <SystemInit+0xd4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 030f 	bic.w	r3, r3, #15
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <SystemInit+0xd4>)
 8001be4:	f043 0307 	orr.w	r3, r3, #7
 8001be8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bea:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <SystemInit+0xd8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <SystemInit+0xd8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <SystemInit+0xd8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <SystemInit+0xd8>)
 8001bfe:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <SystemInit+0xe0>)
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <SystemInit+0xd8>)
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <SystemInit+0xe4>)
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <SystemInit+0xd8>)
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <SystemInit+0xe8>)
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <SystemInit+0xd8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SystemInit+0xd8>)
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <SystemInit+0xe8>)
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <SystemInit+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <SystemInit+0xd8>)
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <SystemInit+0xe8>)
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <SystemInit+0xd8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <SystemInit+0xd8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <SystemInit+0xd8>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <SystemInit+0xd8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <SystemInit+0xec>)
 8001c40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c44:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c60:	02020200 	.word	0x02020200
 8001c64:	01ff0000 	.word	0x01ff0000
 8001c68:	01010280 	.word	0x01010280
 8001c6c:	52004000 	.word	0x52004000

08001c70 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
TIM_HandleTypeDef htim23;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b098      	sub	sp, #96	; 0x60
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2234      	movs	r2, #52	; 0x34
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f018 fc2f 	bl	801a500 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	; (8001dd4 <MX_TIM1_Init+0x164>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cce:	4840      	ldr	r0, [pc, #256]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cd0:	f00a fd1a 	bl	800c708 <HAL_TIM_PWM_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f7ff fca2 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4837      	ldr	r0, [pc, #220]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001cf2:	f00b fcbf 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cfc:	f7ff fc91 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d00:	2360      	movs	r3, #96	; 0x60
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	482a      	ldr	r0, [pc, #168]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001d26:	f00a fedf 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001d30:	f7ff fc77 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4824      	ldr	r0, [pc, #144]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001d3e:	f00a fed3 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001d48:	f7ff fc6b 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d50:	2208      	movs	r2, #8
 8001d52:	4619      	mov	r1, r3
 8001d54:	481e      	ldr	r0, [pc, #120]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001d56:	f00a fec7 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001d60:	f7ff fc5f 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d68:	220c      	movs	r2, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001d6e:	f00a febb 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001d78:	f7ff fc53 	bl	8001622 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001db2:	f00b fcfb 	bl	800d7ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8001dbc:	f7ff fc31 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM1_Init+0x160>)
 8001dc2:	f000 fd7d 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3760      	adds	r7, #96	; 0x60
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24000838 	.word	0x24000838
 8001dd4:	40010000 	.word	0x40010000

08001dd8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dea:	463b      	mov	r3, r7
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
 8001df8:	615a      	str	r2, [r3, #20]
 8001dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfc:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001dfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e24:	4816      	ldr	r0, [pc, #88]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e26:	f00a fc6f 	bl	800c708 <HAL_TIM_PWM_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001e30:	f7ff fbf7 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	480f      	ldr	r0, [pc, #60]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e44:	f00b fc16 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001e4e:	f7ff fbe8 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e52:	2360      	movs	r3, #96	; 0x60
 8001e54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e62:	463b      	mov	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_TIM2_Init+0xa8>)
 8001e6a:	f00a fe3d 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001e74:	f7ff fbd5 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	3728      	adds	r7, #40	; 0x28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	24000884 	.word	0x24000884

08001e84 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e96:	463b      	mov	r3, r7
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	615a      	str	r2, [r3, #20]
 8001ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001eaa:	4a33      	ldr	r2, [pc, #204]	; (8001f78 <MX_TIM3_Init+0xf4>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ece:	4829      	ldr	r0, [pc, #164]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001ed0:	f00a fc1a 	bl	800c708 <HAL_TIM_PWM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001eda:	f7ff fba2 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4821      	ldr	r0, [pc, #132]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001eee:	f00b fbc1 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ef8:	f7ff fb93 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4818      	ldr	r0, [pc, #96]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001f14:	f00a fde8 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f1e:	f7ff fb80 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f22:	463b      	mov	r3, r7
 8001f24:	2204      	movs	r2, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4812      	ldr	r0, [pc, #72]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001f2a:	f00a fddd 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001f34:	f7ff fb75 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480d      	ldr	r0, [pc, #52]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001f40:	f00a fdd2 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8001f4a:	f7ff fb6a 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	220c      	movs	r2, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	4807      	ldr	r0, [pc, #28]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001f56:	f00a fdc7 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8001f60:	f7ff fb5f 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_TIM3_Init+0xf0>)
 8001f66:	f000 fcab 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	; 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	240008d0 	.word	0x240008d0
 8001f78:	40000400 	.word	0x40000400

08001f7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	; 0x28
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	615a      	str	r2, [r3, #20]
 8001f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <MX_TIM4_Init+0xf4>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fc6:	4829      	ldr	r0, [pc, #164]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fc8:	f00a fb9e 	bl	800c708 <HAL_TIM_PWM_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001fd2:	f7ff fb26 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4821      	ldr	r0, [pc, #132]	; (800206c <MX_TIM4_Init+0xf0>)
 8001fe6:	f00b fb45 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001ff0:	f7ff fb17 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ff4:	2360      	movs	r3, #96	; 0x60
 8001ff6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	4818      	ldr	r0, [pc, #96]	; (800206c <MX_TIM4_Init+0xf0>)
 800200c:	f00a fd6c 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002016:	f7ff fb04 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	2204      	movs	r2, #4
 800201e:	4619      	mov	r1, r3
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <MX_TIM4_Init+0xf0>)
 8002022:	f00a fd61 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800202c:	f7ff faf9 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2208      	movs	r2, #8
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM4_Init+0xf0>)
 8002038:	f00a fd56 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002042:	f7ff faee 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002046:	463b      	mov	r3, r7
 8002048:	220c      	movs	r2, #12
 800204a:	4619      	mov	r1, r3
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM4_Init+0xf0>)
 800204e:	f00a fd4b 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002058:	f7ff fae3 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM4_Init+0xf0>)
 800205e:	f000 fc2f 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2400091c 	.word	0x2400091c
 8002070:	40000800 	.word	0x40000800

08002074 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	2224      	movs	r2, #36	; 0x24
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f018 fa3c 	bl	801a500 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	463b      	mov	r3, r7
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002092:	4b23      	ldr	r3, [pc, #140]	; (8002120 <MX_TIM8_Init+0xac>)
 8002094:	4a23      	ldr	r2, [pc, #140]	; (8002124 <MX_TIM8_Init+0xb0>)
 8002096:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <MX_TIM8_Init+0xac>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_TIM8_Init+0xac>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_TIM8_Init+0xac>)
 80020a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_TIM8_Init+0xac>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_TIM8_Init+0xac>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_TIM8_Init+0xac>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80020be:	2301      	movs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c6:	2301      	movs	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	480d      	ldr	r0, [pc, #52]	; (8002120 <MX_TIM8_Init+0xac>)
 80020ea:	f00a fbbb 	bl	800c864 <HAL_TIM_Encoder_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80020f4:	f7ff fa95 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002104:	463b      	mov	r3, r7
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_TIM8_Init+0xac>)
 800210a:	f00b fab3 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002114:	f7ff fa85 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3730      	adds	r7, #48	; 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000968 	.word	0x24000968
 8002124:	40010400 	.word	0x40010400

08002128 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
 800213c:	615a      	str	r2, [r3, #20]
 800213e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_TIM12_Init+0x98>)
 8002142:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <MX_TIM12_Init+0x9c>)
 8002144:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_TIM12_Init+0x98>)
 8002148:	2200      	movs	r2, #0
 800214a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <MX_TIM12_Init+0x98>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <MX_TIM12_Init+0x98>)
 8002154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002158:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <MX_TIM12_Init+0x98>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <MX_TIM12_Init+0x98>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002166:	4816      	ldr	r0, [pc, #88]	; (80021c0 <MX_TIM12_Init+0x98>)
 8002168:	f00a face 	bl	800c708 <HAL_TIM_PWM_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002172:	f7ff fa56 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002176:	2360      	movs	r3, #96	; 0x60
 8002178:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	2200      	movs	r2, #0
 800218a:	4619      	mov	r1, r3
 800218c:	480c      	ldr	r0, [pc, #48]	; (80021c0 <MX_TIM12_Init+0x98>)
 800218e:	f00a fcab 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002198:	f7ff fa43 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	2204      	movs	r2, #4
 80021a0:	4619      	mov	r1, r3
 80021a2:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM12_Init+0x98>)
 80021a4:	f00a fca0 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80021ae:	f7ff fa38 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM12_Init+0x98>)
 80021b4:	f000 fb84 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	240009b4 	.word	0x240009b4
 80021c4:	40001800 	.word	0x40001800

080021c8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b098      	sub	sp, #96	; 0x60
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]
 80021ea:	615a      	str	r2, [r3, #20]
 80021ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2234      	movs	r2, #52	; 0x34
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f018 f983 	bl	801a500 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <MX_TIM15_Init+0x11c>)
 80021fc:	4a3a      	ldr	r2, [pc, #232]	; (80022e8 <MX_TIM15_Init+0x120>)
 80021fe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800220c:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <MX_TIM15_Init+0x11c>)
 800220e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002212:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002214:	4b33      	ldr	r3, [pc, #204]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <MX_TIM15_Init+0x11c>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002226:	482f      	ldr	r0, [pc, #188]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002228:	f00a fa6e 	bl	800c708 <HAL_TIM_PWM_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002232:	f7ff f9f6 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800223e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002242:	4619      	mov	r1, r3
 8002244:	4827      	ldr	r0, [pc, #156]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002246:	f00b fa15 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002250:	f7ff f9e7 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002254:	2360      	movs	r3, #96	; 0x60
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002260:	2300      	movs	r3, #0
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	481a      	ldr	r0, [pc, #104]	; (80022e4 <MX_TIM15_Init+0x11c>)
 800227a:	f00a fc35 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002284:	f7ff f9cd 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002288:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800228c:	2204      	movs	r2, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4814      	ldr	r0, [pc, #80]	; (80022e4 <MX_TIM15_Init+0x11c>)
 8002292:	f00a fc29 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800229c:	f7ff f9c1 	bl	8001622 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <MX_TIM15_Init+0x11c>)
 80022c8:	f00b fa70 	bl	800d7ac <HAL_TIMEx_ConfigBreakDeadTime>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80022d2:	f7ff f9a6 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80022d6:	4803      	ldr	r0, [pc, #12]	; (80022e4 <MX_TIM15_Init+0x11c>)
 80022d8:	f000 faf2 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80022dc:	bf00      	nop
 80022de:	3760      	adds	r7, #96	; 0x60
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	24000a00 	.word	0x24000a00
 80022e8:	40014000 	.word	0x40014000

080022ec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	; 0x50
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002306:	463b      	mov	r3, r7
 8002308:	2234      	movs	r2, #52	; 0x34
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f018 f8f7 	bl	801a500 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002314:	4a31      	ldr	r2, [pc, #196]	; (80023dc <MX_TIM16_Init+0xf0>)
 8002316:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002318:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <MX_TIM16_Init+0xec>)
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002324:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <MX_TIM16_Init+0xec>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <MX_TIM16_Init+0xec>)
 800233a:	2200      	movs	r2, #0
 800233c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800233e:	4826      	ldr	r0, [pc, #152]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002340:	f00a f98b 	bl	800c65a <HAL_TIM_Base_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800234a:	f7ff f96a 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002350:	f00a f9da 	bl	800c708 <HAL_TIM_PWM_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800235a:	f7ff f962 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2360      	movs	r3, #96	; 0x60
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002366:	2300      	movs	r3, #0
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800236a:	2300      	movs	r3, #0
 800236c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800237a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800237e:	2200      	movs	r2, #0
 8002380:	4619      	mov	r1, r3
 8002382:	4815      	ldr	r0, [pc, #84]	; (80023d8 <MX_TIM16_Init+0xec>)
 8002384:	f00a fbb0 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800238e:	f7ff f948 	bl	8001622 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	4619      	mov	r1, r3
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <MX_TIM16_Init+0xec>)
 80023ba:	f00b f9f7 	bl	800d7ac <HAL_TIMEx_ConfigBreakDeadTime>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80023c4:	f7ff f92d 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80023c8:	4803      	ldr	r0, [pc, #12]	; (80023d8 <MX_TIM16_Init+0xec>)
 80023ca:	f000 fa79 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80023ce:	bf00      	nop
 80023d0:	3750      	adds	r7, #80	; 0x50
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	24000a4c 	.word	0x24000a4c
 80023dc:	40014400 	.word	0x40014400

080023e0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b094      	sub	sp, #80	; 0x50
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	615a      	str	r2, [r3, #20]
 80023f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023fa:	463b      	mov	r3, r7
 80023fc:	2234      	movs	r2, #52	; 0x34
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f018 f87d 	bl	801a500 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002406:	4b31      	ldr	r3, [pc, #196]	; (80024cc <MX_TIM17_Init+0xec>)
 8002408:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <MX_TIM17_Init+0xf0>)
 800240a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <MX_TIM17_Init+0xec>)
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <MX_TIM17_Init+0xec>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002418:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <MX_TIM17_Init+0xec>)
 800241a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002420:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <MX_TIM17_Init+0xec>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <MX_TIM17_Init+0xec>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <MX_TIM17_Init+0xec>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002432:	4826      	ldr	r0, [pc, #152]	; (80024cc <MX_TIM17_Init+0xec>)
 8002434:	f00a f911 	bl	800c65a <HAL_TIM_Base_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800243e:	f7ff f8f0 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002442:	4822      	ldr	r0, [pc, #136]	; (80024cc <MX_TIM17_Init+0xec>)
 8002444:	f00a f960 	bl	800c708 <HAL_TIM_PWM_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800244e:	f7ff f8e8 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002452:	2360      	movs	r3, #96	; 0x60
 8002454:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800245a:	2300      	movs	r3, #0
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800245e:	2300      	movs	r3, #0
 8002460:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800246e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002472:	2200      	movs	r2, #0
 8002474:	4619      	mov	r1, r3
 8002476:	4815      	ldr	r0, [pc, #84]	; (80024cc <MX_TIM17_Init+0xec>)
 8002478:	f00a fb36 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002482:	f7ff f8ce 	bl	8001622 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800249a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	4619      	mov	r1, r3
 80024ac:	4807      	ldr	r0, [pc, #28]	; (80024cc <MX_TIM17_Init+0xec>)
 80024ae:	f00b f97d 	bl	800d7ac <HAL_TIMEx_ConfigBreakDeadTime>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80024b8:	f7ff f8b3 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <MX_TIM17_Init+0xec>)
 80024be:	f000 f9ff 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80024c2:	bf00      	nop
 80024c4:	3750      	adds	r7, #80	; 0x50
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24000a98 	.word	0x24000a98
 80024d0:	40014800 	.word	0x40014800

080024d4 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	; 0x38
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f4:	463b      	mov	r3, r7
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <MX_TIM23_Init+0x120>)
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <MX_TIM23_Init+0x124>)
 800250a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <MX_TIM23_Init+0x120>)
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <MX_TIM23_Init+0x120>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <MX_TIM23_Init+0x120>)
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <MX_TIM23_Init+0x120>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <MX_TIM23_Init+0x120>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim23) != HAL_OK)
 800252c:	4831      	ldr	r0, [pc, #196]	; (80025f4 <MX_TIM23_Init+0x120>)
 800252e:	f00a f942 	bl	800c7b6 <HAL_TIM_IC_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 8002538:	f7ff f873 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800253c:	482d      	ldr	r0, [pc, #180]	; (80025f4 <MX_TIM23_Init+0x120>)
 800253e:	f00a f8e3 	bl	800c708 <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8002548:	f7ff f86b 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002558:	4619      	mov	r1, r3
 800255a:	4826      	ldr	r0, [pc, #152]	; (80025f4 <MX_TIM23_Init+0x120>)
 800255c:	f00b f88a 	bl	800d674 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM23_Init+0x96>
  {
    Error_Handler();
 8002566:	f7ff f85c 	bl	8001622 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800256e:	2301      	movs	r3, #1
 8002570:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim23, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	2200      	movs	r2, #0
 8002580:	4619      	mov	r1, r3
 8002582:	481c      	ldr	r0, [pc, #112]	; (80025f4 <MX_TIM23_Init+0x120>)
 8002584:	f00a fa14 	bl	800c9b0 <HAL_TIM_IC_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM23_Init+0xbe>
  {
    Error_Handler();
 800258e:	f7ff f848 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	; 0x60
 8002594:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025a2:	463b      	mov	r3, r7
 80025a4:	2204      	movs	r2, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4812      	ldr	r0, [pc, #72]	; (80025f4 <MX_TIM23_Init+0x120>)
 80025aa:	f00a fa9d 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM23_Init+0xe4>
  {
    Error_Handler();
 80025b4:	f7ff f835 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025b8:	463b      	mov	r3, r7
 80025ba:	2208      	movs	r2, #8
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	; (80025f4 <MX_TIM23_Init+0x120>)
 80025c0:	f00a fa92 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM23_Init+0xfa>
  {
    Error_Handler();
 80025ca:	f7ff f82a 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025ce:	463b      	mov	r3, r7
 80025d0:	220c      	movs	r2, #12
 80025d2:	4619      	mov	r1, r3
 80025d4:	4807      	ldr	r0, [pc, #28]	; (80025f4 <MX_TIM23_Init+0x120>)
 80025d6:	f00a fa87 	bl	800cae8 <HAL_TIM_PWM_ConfigChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM23_Init+0x110>
  {
    Error_Handler();
 80025e0:	f7ff f81f 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <MX_TIM23_Init+0x120>)
 80025e6:	f000 f96b 	bl	80028c0 <HAL_TIM_MspPostInit>

}
 80025ea:	bf00      	nop
 80025ec:	3738      	adds	r7, #56	; 0x38
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	24000ae4 	.word	0x24000ae4
 80025f8:	4000e000 	.word	0x4000e000

080025fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_TIM_PWM_MspInit+0x110>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d10f      	bne.n	800262e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800262c:	e067      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002636:	d10f      	bne.n	8002658 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002638:	4b35      	ldr	r3, [pc, #212]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 800263a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 800264a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	69bb      	ldr	r3, [r7, #24]
}
 8002656:	e052      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2d      	ldr	r2, [pc, #180]	; (8002714 <HAL_TIM_PWM_MspInit+0x118>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10f      	bne.n	8002682 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002662:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002664:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002668:	4a29      	ldr	r2, [pc, #164]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 800266a:	f043 0302 	orr.w	r3, r3, #2
 800266e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002672:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002674:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
}
 8002680:	e03d      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM4)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a24      	ldr	r2, [pc, #144]	; (8002718 <HAL_TIM_PWM_MspInit+0x11c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10f      	bne.n	80026ac <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 800268e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002692:	4a1f      	ldr	r2, [pc, #124]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 800269e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
}
 80026aa:	e028      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM12)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_TIM_PWM_MspInit+0x120>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10f      	bne.n	80026d6 <HAL_TIM_PWM_MspInit+0xda>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026b6:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
}
 80026d4:	e013      	b.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
  else if(tim_pwmHandle->Instance==TIM15)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a11      	ldr	r2, [pc, #68]	; (8002720 <HAL_TIM_PWM_MspInit+0x124>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d10e      	bne.n	80026fe <HAL_TIM_PWM_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PWM_MspInit+0x114>)
 80026f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
}
 80026fe:	bf00      	nop
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40010000 	.word	0x40010000
 8002710:	58024400 	.word	0x58024400
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40001800 	.word	0x40001800
 8002720:	40014000 	.word	0x40014000

08002724 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_TIM_Encoder_MspInit+0x88>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12d      	bne.n	80027a2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800274e:	f043 0302 	orr.w	r3, r3, #2
 8002752:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002764:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_Pin|ENCODER_1C7_Pin;
 8002782:	23c0      	movs	r3, #192	; 0xc0
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002792:	2303      	movs	r3, #3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800279e:	f005 ff49 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010400 	.word	0x40010400
 80027b0:	58024400 	.word	0x58024400
 80027b4:	58020800 	.word	0x58020800

080027b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_TIM_Base_MspInit+0x68>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d10f      	bne.n	80027ea <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 80027cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 80027d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 80027dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80027e8:	e013      	b.n	8002812 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM17)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_TIM_Base_MspInit+0x70>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10e      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 80027f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027fa:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 80027fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_TIM_Base_MspInit+0x6c>)
 8002806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40014400 	.word	0x40014400
 8002824:	58024400 	.word	0x58024400
 8002828:	40014800 	.word	0x40014800

0800282c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM23)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1a      	ldr	r2, [pc, #104]	; (80028b4 <HAL_TIM_IC_MspInit+0x88>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12d      	bne.n	80028aa <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM23_MspInit 0 */

  /* USER CODE END TIM23_MspInit 0 */
    /* TIM23 clock enable */
    __HAL_RCC_TIM23_CLK_ENABLE();
 800284e:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 8002850:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800285e:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 8002860:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 800286e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_TIM_IC_MspInit+0x8c>)
 800287e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    /**TIM23 GPIO Configuration
    PF0     ------> TIM23_CH1
    */
    GPIO_InitStruct.Pin = PWM_IN_Pin;
 800288a:	2301      	movs	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800289a:	230d      	movs	r3, #13
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_IN_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	4805      	ldr	r0, [pc, #20]	; (80028bc <HAL_TIM_IC_MspInit+0x90>)
 80028a6:	f005 fec5 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }
}
 80028aa:	bf00      	nop
 80028ac:	3728      	adds	r7, #40	; 0x28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	4000e000 	.word	0x4000e000
 80028b8:	58024400 	.word	0x58024400
 80028bc:	58021400 	.word	0x58021400

080028c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b090      	sub	sp, #64	; 0x40
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4aa6      	ldr	r2, [pc, #664]	; (8002b78 <HAL_TIM_MspPostInit+0x2b8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d120      	bne.n	8002924 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e2:	4ba6      	ldr	r3, [pc, #664]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e8:	4aa4      	ldr	r2, [pc, #656]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80028ea:	f043 0310 	orr.w	r3, r3, #16
 80028ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f2:	4ba2      	ldr	r3, [pc, #648]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_OUT_NE8_Pin|PWM_OUTE9_Pin|PWM_OUT_NE10_Pin|PWM_OUTE11_Pin
 8002900:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |PWM_OUT_NE12_Pin|PWM_OUTE13_Pin|PWM_OUTE14_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002906:	2302      	movs	r3, #2
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002912:	2301      	movs	r3, #1
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291a:	4619      	mov	r1, r3
 800291c:	4898      	ldr	r0, [pc, #608]	; (8002b80 <HAL_TIM_MspPostInit+0x2c0>)
 800291e:	f005 fe89 	bl	8008634 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8002922:	e125      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_TIM_MspPostInit+0x2c4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d13f      	bne.n	80029ae <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800292e:	4b93      	ldr	r3, [pc, #588]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002934:	4a91      	ldr	r2, [pc, #580]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293e:	4b8f      	ldr	r3, [pc, #572]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294c:	4b8b      	ldr	r3, [pc, #556]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002952:	4a8a      	ldr	r2, [pc, #552]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800295c:	4b87      	ldr	r3, [pc, #540]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 800295e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	623b      	str	r3, [r7, #32]
 8002968:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_OUTC8_Pin|PWM_INC9_Pin;
 800296a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800297c:	2302      	movs	r3, #2
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	4619      	mov	r1, r3
 8002986:	4880      	ldr	r0, [pc, #512]	; (8002b88 <HAL_TIM_MspPostInit+0x2c8>)
 8002988:	f005 fe54 	bl	8008634 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_OUTB4_Pin|PWM_OUTB5_Pin;
 800298c:	2330      	movs	r3, #48	; 0x30
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800299c:	2302      	movs	r3, #2
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a4:	4619      	mov	r1, r3
 80029a6:	4879      	ldr	r0, [pc, #484]	; (8002b8c <HAL_TIM_MspPostInit+0x2cc>)
 80029a8:	f005 fe44 	bl	8008634 <HAL_GPIO_Init>
}
 80029ac:	e0e0      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_TIM_MspPostInit+0x2d0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d120      	bne.n	80029fa <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b8:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80029ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029be:	4a6f      	ldr	r2, [pc, #444]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80029c0:	f043 0308 	orr.w	r3, r3, #8
 80029c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c8:	4b6c      	ldr	r3, [pc, #432]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 80029ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_OUTD12_Pin|PWM_OUTD13_Pin|GPIO_PIN_14|PWM_OUTD15_Pin;
 80029d6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e8:	2302      	movs	r3, #2
 80029ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	4868      	ldr	r0, [pc, #416]	; (8002b94 <HAL_TIM_MspPostInit+0x2d4>)
 80029f4:	f005 fe1e 	bl	8008634 <HAL_GPIO_Init>
}
 80029f8:	e0ba      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM12)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a66      	ldr	r2, [pc, #408]	; (8002b98 <HAL_TIM_MspPostInit+0x2d8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d120      	bne.n	8002a46 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a04:	4b5d      	ldr	r3, [pc, #372]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_OUTB14_Pin|PWM_OUTB15_Pin;
 8002a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8002a34:	2302      	movs	r3, #2
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4853      	ldr	r0, [pc, #332]	; (8002b8c <HAL_TIM_MspPostInit+0x2cc>)
 8002a40:	f005 fdf8 	bl	8008634 <HAL_GPIO_Init>
}
 8002a44:	e094      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM15)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_TIM_MspPostInit+0x2dc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d11f      	bne.n	8002a90 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a50:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a56:	4a49      	ldr	r2, [pc, #292]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a60:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_OUT_N_Pin|PWM_OUT_Pin|PWM_OUTE6_Pin;
 8002a6e:	2370      	movs	r3, #112	; 0x70
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a72:	2302      	movs	r3, #2
 8002a74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	4619      	mov	r1, r3
 8002a88:	483d      	ldr	r0, [pc, #244]	; (8002b80 <HAL_TIM_MspPostInit+0x2c0>)
 8002a8a:	f005 fdd3 	bl	8008634 <HAL_GPIO_Init>
}
 8002a8e:	e06f      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM16)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a42      	ldr	r2, [pc, #264]	; (8002ba0 <HAL_TIM_MspPostInit+0x2e0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d120      	bne.n	8002adc <HAL_TIM_MspPostInit+0x21c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa0:	4a36      	ldr	r2, [pc, #216]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002aa2:	f043 0302 	orr.w	r3, r3, #2
 8002aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aaa:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_OUT_NB6_Pin|PWM_OUTB8_Pin;
 8002ab8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002aca:	2301      	movs	r3, #1
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	482d      	ldr	r0, [pc, #180]	; (8002b8c <HAL_TIM_MspPostInit+0x2cc>)
 8002ad6:	f005 fdad 	bl	8008634 <HAL_GPIO_Init>
}
 8002ada:	e049      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM17)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a30      	ldr	r2, [pc, #192]	; (8002ba4 <HAL_TIM_MspPostInit+0x2e4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d120      	bne.n	8002b28 <HAL_TIM_MspPostInit+0x268>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	4b25      	ldr	r3, [pc, #148]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aec:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_OUT_NB7_Pin|PWM_OUTB9_Pin;
 8002b04:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002b16:	2301      	movs	r3, #1
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b1e:	4619      	mov	r1, r3
 8002b20:	481a      	ldr	r0, [pc, #104]	; (8002b8c <HAL_TIM_MspPostInit+0x2cc>)
 8002b22:	f005 fd87 	bl	8008634 <HAL_GPIO_Init>
}
 8002b26:	e023      	b.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
  else if(timHandle->Instance==TIM23)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_TIM_MspPostInit+0x2e8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11e      	bne.n	8002b70 <HAL_TIM_MspPostInit+0x2b0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b32:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b38:	4a10      	ldr	r2, [pc, #64]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <HAL_TIM_MspPostInit+0x2bc>)
 8002b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_OUTF1_Pin|PWM_OUTF2_Pin|PWM_OUTF3_Pin;
 8002b50:	230e      	movs	r3, #14
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8002b60:	230d      	movs	r3, #13
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4810      	ldr	r0, [pc, #64]	; (8002bac <HAL_TIM_MspPostInit+0x2ec>)
 8002b6c:	f005 fd62 	bl	8008634 <HAL_GPIO_Init>
}
 8002b70:	bf00      	nop
 8002b72:	3740      	adds	r7, #64	; 0x40
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	58021000 	.word	0x58021000
 8002b84:	40000400 	.word	0x40000400
 8002b88:	58020800 	.word	0x58020800
 8002b8c:	58020400 	.word	0x58020400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	58020c00 	.word	0x58020c00
 8002b98:	40001800 	.word	0x40001800
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800
 8002ba8:	4000e000 	.word	0x4000e000
 8002bac:	58021400 	.word	0x58021400

08002bb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <MX_USART1_UART_Init+0x94>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bf8:	4811      	ldr	r0, [pc, #68]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002bfa:	f00a fe77 	bl	800d8ec <HAL_UART_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c04:	f7fe fd0d 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002c0c:	f00b ff18 	bl	800ea40 <HAL_UARTEx_SetTxFifoThreshold>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c16:	f7fe fd04 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002c1e:	f00b ff4d 	bl	800eabc <HAL_UARTEx_SetRxFifoThreshold>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c28:	f7fe fcfb 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <MX_USART1_UART_Init+0x90>)
 8002c2e:	f00b fece 	bl	800e9ce <HAL_UARTEx_DisableFifoMode>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c38:	f7fe fcf3 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	24000b30 	.word	0x24000b30
 8002c44:	40011000 	.word	0x40011000

08002c48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c4e:	4a23      	ldr	r2, [pc, #140]	; (8002cdc <MX_USART2_UART_Init+0x94>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c90:	4811      	ldr	r0, [pc, #68]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002c92:	f00a fe2b 	bl	800d8ec <HAL_UART_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c9c:	f7fe fcc1 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	480d      	ldr	r0, [pc, #52]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002ca4:	f00b fecc 	bl	800ea40 <HAL_UARTEx_SetTxFifoThreshold>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002cae:	f7fe fcb8 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4808      	ldr	r0, [pc, #32]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002cb6:	f00b ff01 	bl	800eabc <HAL_UARTEx_SetRxFifoThreshold>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002cc0:	f7fe fcaf 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <MX_USART2_UART_Init+0x90>)
 8002cc6:	f00b fe82 	bl	800e9ce <HAL_UARTEx_DisableFifoMode>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cd0:	f7fe fca7 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	24000bc0 	.word	0x24000bc0
 8002cdc:	40004400 	.word	0x40004400

08002ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b0b8      	sub	sp, #224	; 0xe0
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf8:	f107 0318 	add.w	r3, r7, #24
 8002cfc:	22b4      	movs	r2, #180	; 0xb4
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f017 fbfd 	bl	801a500 <memset>
  if(uartHandle->Instance==USART1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a49      	ldr	r2, [pc, #292]	; (8002e30 <HAL_UART_MspInit+0x150>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d143      	bne.n	8002d98 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1a:	f107 0318 	add.w	r3, r7, #24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f007 f9d6 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d2a:	f7fe fc7a 	bl	8001622 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d36:	f043 0310 	orr.w	r3, r3, #16
 8002d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b39      	ldr	r3, [pc, #228]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d52:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d84:	2307      	movs	r3, #7
 8002d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4829      	ldr	r0, [pc, #164]	; (8002e38 <HAL_UART_MspInit+0x158>)
 8002d92:	f005 fc4f 	bl	8008634 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d96:	e046      	b.n	8002e26 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a27      	ldr	r2, [pc, #156]	; (8002e3c <HAL_UART_MspInit+0x15c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d141      	bne.n	8002e26 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dac:	f107 0318 	add.w	r3, r7, #24
 8002db0:	4618      	mov	r0, r3
 8002db2:	f007 f98d 	bl	800a0d0 <HAL_RCCEx_PeriphCLKConfig>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002dbc:	f7fe fc31 	bl	8001622 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002dc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd0:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dde:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de4:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <HAL_UART_MspInit+0x154>)
 8002df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002dfc:	2360      	movs	r3, #96	; 0x60
 8002dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e14:	2307      	movs	r3, #7
 8002e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <HAL_UART_MspInit+0x160>)
 8002e22:	f005 fc07 	bl	8008634 <HAL_GPIO_Init>
}
 8002e26:	bf00      	nop
 8002e28:	37e0      	adds	r7, #224	; 0xe0
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40011000 	.word	0x40011000
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58020000 	.word	0x58020000
 8002e3c:	40004400 	.word	0x40004400
 8002e40:	58020c00 	.word	0x58020c00

08002e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e48:	f7fe fe9a 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e4c:	480c      	ldr	r0, [pc, #48]	; (8002e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e4e:	490d      	ldr	r1, [pc, #52]	; (8002e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e50:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e54:	e002      	b.n	8002e5c <LoopCopyDataInit>

08002e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e5a:	3304      	adds	r3, #4

08002e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e60:	d3f9      	bcc.n	8002e56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e64:	4c0a      	ldr	r4, [pc, #40]	; (8002e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e68:	e001      	b.n	8002e6e <LoopFillZerobss>

08002e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e6c:	3204      	adds	r2, #4

08002e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e70:	d3fb      	bcc.n	8002e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e72:	f017 fae9 	bl	801a448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e76:	f7fe fa2d 	bl	80012d4 <main>
  bx  lr
 8002e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e7c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002e80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e84:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8002e88:	0801ac88 	.word	0x0801ac88
  ldr r2, =_sbss
 8002e8c:	24000174 	.word	0x24000174
  ldr r4, =_ebss
 8002e90:	24001244 	.word	0x24001244

08002e94 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e94:	e7fe      	b.n	8002e94 <ADC_IRQHandler>
	...

08002e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e9e:	2003      	movs	r0, #3
 8002ea0:	f002 fa7e 	bl	80053a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ea4:	f006 ff3e 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <HAL_Init+0x68>)
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	4913      	ldr	r1, [pc, #76]	; (8002f04 <HAL_Init+0x6c>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <HAL_Init+0x68>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_Init+0x6c>)
 8002ecc:	5cd3      	ldrb	r3, [r2, r3]
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_Init+0x70>)
 8002eda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_Init+0x74>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f000 f814 	bl	8002f10 <HAL_InitTick>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e002      	b.n	8002ef8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef2:	f7fe fd55 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	58024400 	.word	0x58024400
 8002f04:	0801ac10 	.word	0x0801ac10
 8002f08:	24000004 	.word	0x24000004
 8002f0c:	24000000 	.word	0x24000000

08002f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <HAL_InitTick+0x60>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e021      	b.n	8002f68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_InitTick+0x64>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <HAL_InitTick+0x60>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 fa63 	bl	8005406 <HAL_SYSTICK_Config>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00e      	b.n	8002f68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b0f      	cmp	r3, #15
 8002f4e:	d80a      	bhi.n	8002f66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f50:	2200      	movs	r2, #0
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	f04f 30ff 	mov.w	r0, #4294967295
 8002f58:	f002 fa2d 	bl	80053b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f5c:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <HAL_InitTick+0x68>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	2400000c 	.word	0x2400000c
 8002f74:	24000000 	.word	0x24000000
 8002f78:	24000008 	.word	0x24000008

08002f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_IncTick+0x20>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2400000c 	.word	0x2400000c
 8002fa0:	24000c50 	.word	0x24000c50

08002fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_GetTick+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	24000c50 	.word	0x24000c50

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff ffee 	bl	8002fa4 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d005      	beq.n	8002fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_Delay+0x44>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fe2:	bf00      	nop
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d8f7      	bhi.n	8002fe4 <HAL_Delay+0x28>
  {
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2400000c 	.word	0x2400000c

08003004 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003014:	4904      	ldr	r1, [pc, #16]	; (8003028 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	58000400 	.word	0x58000400

0800302c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	43db      	mvns	r3, r3
 800303e:	401a      	ands	r2, r3
 8003040:	4904      	ldr	r1, [pc, #16]	; (8003054 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	58000400 	.word	0x58000400

08003058 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	3360      	adds	r3, #96	; 0x60
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <LL_ADC_SetOffset+0x60>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d10b      	bne.n	80030fc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030fa:	e00b      	b.n	8003114 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	601a      	str	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	58026000 	.word	0x58026000

08003124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3360      	adds	r3, #96	; 0x60
 8003132:	461a      	mov	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	431a      	orrs	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	611a      	str	r2, [r3, #16]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00e      	beq.n	80031b6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3360      	adds	r3, #96	; 0x60
 800319c:	461a      	mov	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	601a      	str	r2, [r3, #0]
  }
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	58026000 	.word	0x58026000

080031c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <LL_ADC_SetOffsetSaturation+0x40>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10e      	bne.n	80031fa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3360      	adds	r3, #96	; 0x60
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	58026000 	.word	0x58026000

0800320c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <LL_ADC_SetOffsetSign+0x40>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10e      	bne.n	800323e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3360      	adds	r3, #96	; 0x60
 8003224:	461a      	mov	r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	431a      	orrs	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	58026000 	.word	0x58026000

08003250 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3360      	adds	r3, #96	; 0x60
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <LL_ADC_SetOffsetState+0x50>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003282:	e007      	b.n	8003294 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	431a      	orrs	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	601a      	str	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	58026000 	.word	0x58026000

080032a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b087      	sub	sp, #28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3330      	adds	r3, #48	; 0x30
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	4413      	add	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	211f      	movs	r1, #31
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	401a      	ands	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0e9b      	lsrs	r3, r3, #26
 8003302:	f003 011f 	and.w	r1, r3, #31
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 031f 	and.w	r3, r3, #31
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	431a      	orrs	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003316:	bf00      	nop
 8003318:	371c      	adds	r7, #28
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f023 0203 	bic.w	r2, r3, #3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	60da      	str	r2, [r3, #12]
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d107      	bne.n	800338a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	60da      	str	r2, [r3, #12]
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	58026000 	.word	0x58026000

0800339c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3314      	adds	r3, #20
 80033d2:	461a      	mov	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0e5b      	lsrs	r3, r3, #25
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	4413      	add	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	0d1b      	lsrs	r3, r3, #20
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2107      	movs	r1, #7
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	0d1b      	lsrs	r3, r3, #20
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	431a      	orrs	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800340c:	bf00      	nop
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d115      	bne.n	8003458 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0318 	and.w	r3, r3, #24
 8003442:	4914      	ldr	r1, [pc, #80]	; (8003494 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003444:	40d9      	lsrs	r1, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	400b      	ands	r3, r1
 800344a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003456:	e014      	b.n	8003482 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f003 0318 	and.w	r3, r3, #24
 800346e:	4909      	ldr	r1, [pc, #36]	; (8003494 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003470:	40d9      	lsrs	r1, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	400b      	ands	r3, r1
 8003476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	58026000 	.word	0x58026000
 8003494:	000fffff 	.word	0x000fffff

08003498 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 031f 	and.w	r3, r3, #31
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	4b04      	ldr	r3, [pc, #16]	; (80034f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80034de:	4013      	ands	r3, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	5fffffc0 	.word	0x5fffffc0

080034f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003508:	d101      	bne.n	800350e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <LL_ADC_EnableInternalRegulator+0x24>)
 800352a:	4013      	ands	r3, r2
 800352c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	6fffffc0 	.word	0x6fffffc0

08003544 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003558:	d101      	bne.n	800355e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <LL_ADC_Enable+0x24>)
 800357a:	4013      	ands	r3, r2
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	7fffffc0 	.word	0x7fffffc0

08003594 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <LL_ADC_IsEnabled+0x18>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <LL_ADC_IsEnabled+0x1a>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <LL_ADC_REG_StartConversion+0x24>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	f043 0204 	orr.w	r2, r3, #4
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	7fffffc0 	.word	0x7fffffc0

080035e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d101      	bne.n	80035fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d101      	bne.n	8003622 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b089      	sub	sp, #36	; 0x24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003638:	2300      	movs	r3, #0
 800363a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800363c:	2300      	movs	r3, #0
 800363e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1ee      	b.n	8003a28 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fc ffdb 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff3f 	bl	80034f4 <LL_ADC_IsDeepPowerDownEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff25 	bl	80034d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff5a 	bl	8003544 <LL_ADC_IsInternalRegulatorEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff3e 	bl	800351c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a0:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <HAL_ADC_Init+0x2ac>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	4a8e      	ldr	r2, [pc, #568]	; (80038e0 <HAL_ADC_Init+0x2b0>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	3301      	adds	r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036b2:	e002      	b.n	80036ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1f9      	bne.n	80036b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff3d 	bl	8003544 <LL_ADC_IsInternalRegulatorEnabled>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	f043 0210 	orr.w	r2, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e0:	f043 0201 	orr.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff77 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 80036f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b00      	cmp	r3, #0
 8003702:	f040 8188 	bne.w	8003a16 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f040 8184 	bne.w	8003a16 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003716:	f043 0202 	orr.w	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff36 	bl	8003594 <LL_ADC_IsEnabled>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d136      	bne.n	800379c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a6c      	ldr	r2, [pc, #432]	; (80038e4 <HAL_ADC_Init+0x2b4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_ADC_Init+0x112>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_ADC_Init+0x2b8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10e      	bne.n	8003760 <HAL_ADC_Init+0x130>
 8003742:	4868      	ldr	r0, [pc, #416]	; (80038e4 <HAL_ADC_Init+0x2b4>)
 8003744:	f7ff ff26 	bl	8003594 <LL_ADC_IsEnabled>
 8003748:	4604      	mov	r4, r0
 800374a:	4867      	ldr	r0, [pc, #412]	; (80038e8 <HAL_ADC_Init+0x2b8>)
 800374c:	f7ff ff22 	bl	8003594 <LL_ADC_IsEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	4323      	orrs	r3, r4
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e008      	b.n	8003772 <HAL_ADC_Init+0x142>
 8003760:	4862      	ldr	r0, [pc, #392]	; (80038ec <HAL_ADC_Init+0x2bc>)
 8003762:	f7ff ff17 	bl	8003594 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5a      	ldr	r2, [pc, #360]	; (80038e4 <HAL_ADC_Init+0x2b4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_ADC_Init+0x15a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <HAL_ADC_Init+0x2b8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d101      	bne.n	800378e <HAL_ADC_Init+0x15e>
 800378a:	4a59      	ldr	r2, [pc, #356]	; (80038f0 <HAL_ADC_Init+0x2c0>)
 800378c:	e000      	b.n	8003790 <HAL_ADC_Init+0x160>
 800378e:	4a59      	ldr	r2, [pc, #356]	; (80038f4 <HAL_ADC_Init+0x2c4>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f7ff fc5e 	bl	8003058 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_ADC_Init+0x2bc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d129      	bne.n	80037fa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	7e5b      	ldrb	r3, [r3, #25]
 80037aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037b0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80037b6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d013      	beq.n	80037e8 <HAL_ADC_Init+0x1b8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d00d      	beq.n	80037e4 <HAL_ADC_Init+0x1b4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b1c      	cmp	r3, #28
 80037ce:	d007      	beq.n	80037e0 <HAL_ADC_Init+0x1b0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b18      	cmp	r3, #24
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_Init+0x1ac>
 80037d8:	2318      	movs	r3, #24
 80037da:	e006      	b.n	80037ea <HAL_ADC_Init+0x1ba>
 80037dc:	2300      	movs	r3, #0
 80037de:	e004      	b.n	80037ea <HAL_ADC_Init+0x1ba>
 80037e0:	2310      	movs	r3, #16
 80037e2:	e002      	b.n	80037ea <HAL_ADC_Init+0x1ba>
 80037e4:	2308      	movs	r3, #8
 80037e6:	e000      	b.n	80037ea <HAL_ADC_Init+0x1ba>
 80037e8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80037ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e00e      	b.n	8003818 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7e5b      	ldrb	r3, [r3, #25]
 80037fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003804:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800380a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003812:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003814:	4313      	orrs	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d106      	bne.n	8003830 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	3b01      	subs	r3, #1
 8003828:	045b      	lsls	r3, r3, #17
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	4313      	orrs	r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <HAL_ADC_Init+0x2bc>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d115      	bne.n	8003882 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_ADC_Init+0x2c8>)
 800385e:	4013      	ands	r3, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	430b      	orrs	r3, r1
 8003868:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	611a      	str	r2, [r3, #16]
 8003880:	e009      	b.n	8003896 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <HAL_ADC_Init+0x2cc>)
 800388a:	4013      	ands	r3, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	430b      	orrs	r3, r1
 8003894:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fea2 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 80038a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff feaf 	bl	800360a <LL_ADC_INJ_IsConversionOngoing>
 80038ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 808e 	bne.w	80039d2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f040 808a 	bne.w	80039d2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <HAL_ADC_Init+0x2bc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d11b      	bne.n	8003900 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7e1b      	ldrb	r3, [r3, #24]
 80038cc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038d4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e018      	b.n	800390e <HAL_ADC_Init+0x2de>
 80038dc:	24000000 	.word	0x24000000
 80038e0:	053e2d63 	.word	0x053e2d63
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022100 	.word	0x40022100
 80038ec:	58026000 	.word	0x58026000
 80038f0:	40022300 	.word	0x40022300
 80038f4:	58026300 	.word	0x58026300
 80038f8:	fff04007 	.word	0xfff04007
 80038fc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7e1b      	ldrb	r3, [r3, #24]
 8003904:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_ADC_Init+0x400>)
 8003916:	4013      	ands	r3, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	69b9      	ldr	r1, [r7, #24]
 800391e:	430b      	orrs	r3, r1
 8003920:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003928:	2b01      	cmp	r3, #1
 800392a:	d137      	bne.n	800399c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a3f      	ldr	r2, [pc, #252]	; (8003a34 <HAL_ADC_Init+0x404>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d116      	bne.n	800396a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <HAL_ADC_Init+0x408>)
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800395a:	430a      	orrs	r2, r1
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	611a      	str	r2, [r3, #16]
 8003968:	e020      	b.n	80039ac <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <HAL_ADC_Init+0x40c>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003978:	3a01      	subs	r2, #1
 800397a:	0411      	lsls	r1, r2, #16
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800398c:	430a      	orrs	r2, r1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	611a      	str	r2, [r3, #16]
 800399a:	e007      	b.n	80039ac <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691a      	ldr	r2, [r3, #16]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_ADC_Init+0x404>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d002      	beq.n	80039d2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f001 f9bf 	bl	8004d50 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10c      	bne.n	80039f4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f023 010f 	bic.w	r1, r3, #15
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	1e5a      	subs	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
 80039f2:	e007      	b.n	8003a04 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 020f 	bic.w	r2, r2, #15
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a08:	f023 0303 	bic.w	r3, r3, #3
 8003a0c:	f043 0201 	orr.w	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60
 8003a14:	e007      	b.n	8003a26 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3724      	adds	r7, #36	; 0x24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd90      	pop	{r4, r7, pc}
 8003a30:	ffffbffc 	.word	0xffffbffc
 8003a34:	58026000 	.word	0x58026000
 8003a38:	fc00f81f 	.word	0xfc00f81f
 8003a3c:	fc00f81e 	.word	0xfc00f81e

08003a40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a60      	ldr	r2, [pc, #384]	; (8003bd4 <HAL_ADC_Start_DMA+0x194>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_ADC_Start_DMA+0x20>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a5f      	ldr	r2, [pc, #380]	; (8003bd8 <HAL_ADC_Start_DMA+0x198>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_ADC_Start_DMA+0x24>
 8003a60:	4b5e      	ldr	r3, [pc, #376]	; (8003bdc <HAL_ADC_Start_DMA+0x19c>)
 8003a62:	e000      	b.n	8003a66 <HAL_ADC_Start_DMA+0x26>
 8003a64:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <HAL_ADC_Start_DMA+0x1a0>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fd16 	bl	8003498 <LL_ADC_GetMultimode>
 8003a6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fdb6 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80a2 	bne.w	8003bc4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_ADC_Start_DMA+0x4e>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e09d      	b.n	8003bca <HAL_ADC_Start_DMA+0x18a>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d006      	beq.n	8003aaa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d003      	beq.n	8003aaa <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	f040 8086 	bne.w	8003bb6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f001 f832 	bl	8004b14 <ADC_Enable>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d178      	bne.n	8003bac <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <HAL_ADC_Start_DMA+0x1a4>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a42      	ldr	r2, [pc, #264]	; (8003bd8 <HAL_ADC_Start_DMA+0x198>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d002      	beq.n	8003ada <HAL_ADC_Start_DMA+0x9a>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_Start_DMA+0x9c>
 8003ada:	4b3e      	ldr	r3, [pc, #248]	; (8003bd4 <HAL_ADC_Start_DMA+0x194>)
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d002      	beq.n	8003aea <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b06:	f023 0206 	bic.w	r2, r3, #6
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	665a      	str	r2, [r3, #100]	; 0x64
 8003b0e:	e002      	b.n	8003b16 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	4a33      	ldr	r2, [pc, #204]	; (8003be8 <HAL_ADC_Start_DMA+0x1a8>)
 8003b1c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4a32      	ldr	r2, [pc, #200]	; (8003bec <HAL_ADC_Start_DMA+0x1ac>)
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4a31      	ldr	r2, [pc, #196]	; (8003bf0 <HAL_ADC_Start_DMA+0x1b0>)
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	221c      	movs	r2, #28
 8003b34:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0210 	orr.w	r2, r2, #16
 8003b4c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <HAL_ADC_Start_DMA+0x1b4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d10f      	bne.n	8003b78 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4619      	mov	r1, r3
 8003b66:	4610      	mov	r0, r2
 8003b68:	f7ff fbfe 	bl	8003368 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fbe9 	bl	8003348 <LL_ADC_EnableDMAReq>
 8003b76:	e007      	b.n	8003b88 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f7ff fbcd 	bl	8003322 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3340      	adds	r3, #64	; 0x40
 8003b92:	4619      	mov	r1, r3
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f001 ff9c 	bl	8005ad4 <HAL_DMA_Start_IT>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fd09 	bl	80035bc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003baa:	e00d      	b.n	8003bc8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8003bb4:	e008      	b.n	8003bc8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003bc2:	e001      	b.n	8003bc8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022100 	.word	0x40022100
 8003bdc:	40022300 	.word	0x40022300
 8003be0:	58026300 	.word	0x58026300
 8003be4:	fffff0fe 	.word	0xfffff0fe
 8003be8:	08004c29 	.word	0x08004c29
 8003bec:	08004d01 	.word	0x08004d01
 8003bf0:	08004d1d 	.word	0x08004d1d
 8003bf4:	58026000 	.word	0x58026000

08003bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_ADC_IRQHandler+0x240>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <HAL_ADC_IRQHandler+0x30>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a86      	ldr	r2, [pc, #536]	; (8003e3c <HAL_ADC_IRQHandler+0x244>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_ADC_IRQHandler+0x34>
 8003c28:	4b85      	ldr	r3, [pc, #532]	; (8003e40 <HAL_ADC_IRQHandler+0x248>)
 8003c2a:	e000      	b.n	8003c2e <HAL_ADC_IRQHandler+0x36>
 8003c2c:	4b85      	ldr	r3, [pc, #532]	; (8003e44 <HAL_ADC_IRQHandler+0x24c>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fc32 	bl	8003498 <LL_ADC_GetMultimode>
 8003c34:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x78>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d012      	beq.n	8003c70 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f001 f9ae 	bl	8004fc4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_ADC_IRQHandler+0x8c>
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10a      	bne.n	8003c9a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8083 	beq.w	8003d96 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d07d      	beq.n	8003d96 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d105      	bne.n	8003cb2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff faf4 	bl	80032a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d062      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <HAL_ADC_IRQHandler+0x244>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d002      	beq.n	8003cd2 <HAL_ADC_IRQHandler+0xda>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	e000      	b.n	8003cd4 <HAL_ADC_IRQHandler+0xdc>
 8003cd2:	4b59      	ldr	r3, [pc, #356]	; (8003e38 <HAL_ADC_IRQHandler+0x240>)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d008      	beq.n	8003cee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d002      	beq.n	8003cee <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	2b09      	cmp	r3, #9
 8003cec:	d104      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	623b      	str	r3, [r7, #32]
 8003cf6:	e00c      	b.n	8003d12 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4f      	ldr	r2, [pc, #316]	; (8003e3c <HAL_ADC_IRQHandler+0x244>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d002      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x110>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	e000      	b.n	8003d0a <HAL_ADC_IRQHandler+0x112>
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_ADC_IRQHandler+0x240>)
 8003d0a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d135      	bne.n	8003d88 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d12e      	bne.n	8003d88 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fc58 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11a      	bne.n	8003d70 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 020c 	bic.w	r2, r2, #12
 8003d48:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d112      	bne.n	8003d88 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	661a      	str	r2, [r3, #96]	; 0x60
 8003d6e:	e00b      	b.n	8003d88 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d74:	f043 0210 	orr.w	r2, r3, #16
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f96f 	bl	800406c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	220c      	movs	r2, #12
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_ADC_IRQHandler+0x1b2>
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a0 	beq.w	8003ef6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 809a 	beq.w	8003ef6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d105      	bne.n	8003dda <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fadc 	bl	800339c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003de4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fa5a 	bl	80032a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003df0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a11      	ldr	r2, [pc, #68]	; (8003e3c <HAL_ADC_IRQHandler+0x244>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d002      	beq.n	8003e02 <HAL_ADC_IRQHandler+0x20a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	e000      	b.n	8003e04 <HAL_ADC_IRQHandler+0x20c>
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <HAL_ADC_IRQHandler+0x240>)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d008      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d002      	beq.n	8003e1e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b07      	cmp	r3, #7
 8003e1c:	d104      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	e014      	b.n	8003e52 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a03      	ldr	r2, [pc, #12]	; (8003e3c <HAL_ADC_IRQHandler+0x244>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00a      	beq.n	8003e48 <HAL_ADC_IRQHandler+0x250>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	e008      	b.n	8003e4a <HAL_ADC_IRQHandler+0x252>
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40022100 	.word	0x40022100
 8003e40:	40022300 	.word	0x40022300
 8003e44:	58026300 	.word	0x58026300
 8003e48:	4b84      	ldr	r3, [pc, #528]	; (800405c <HAL_ADC_IRQHandler+0x464>)
 8003e4a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d047      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_ADC_IRQHandler+0x27a>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d03f      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13a      	bne.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d133      	bne.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d12e      	bne.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fbbb 	bl	800360a <LL_ADC_INJ_IsConversionOngoing>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11a      	bne.n	8003ed0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ea8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d112      	bne.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60
 8003ece:	e00b      	b.n	8003ee8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 f843 	bl	8004f74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2260      	movs	r2, #96	; 0x60
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x32c>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f8bc 	bl	8004094 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <HAL_ADC_IRQHandler+0x35c>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00d      	beq.n	8003f54 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 f829 	bl	8004f9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d012      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x38c>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f001 f81b 	bl	8004fb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d043      	beq.n	8004016 <HAL_ADC_IRQHandler+0x41e>
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03e      	beq.n	8004016 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa4:	e021      	b.n	8003fea <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d015      	beq.n	8003fd8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_ADC_IRQHandler+0x464>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_ADC_IRQHandler+0x3c8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_ADC_IRQHandler+0x468>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_IRQHandler+0x3cc>
 8003fc0:	4b28      	ldr	r3, [pc, #160]	; (8004064 <HAL_ADC_IRQHandler+0x46c>)
 8003fc2:	e000      	b.n	8003fc6 <HAL_ADC_IRQHandler+0x3ce>
 8003fc4:	4b28      	ldr	r3, [pc, #160]	; (8004068 <HAL_ADC_IRQHandler+0x470>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fa74 	bl	80034b4 <LL_ADC_GetMultiDMATransfer>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	e008      	b.n	8003fea <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d10e      	bne.n	800400e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	f043 0202 	orr.w	r2, r3, #2
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f84d 	bl	80040a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2210      	movs	r2, #16
 8004014:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <HAL_ADC_IRQHandler+0x45a>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	2b00      	cmp	r3, #0
 8004028:	d013      	beq.n	8004052 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800403a:	f043 0208 	orr.w	r2, r3, #8
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800404a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 ff9b 	bl	8004f88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40022000 	.word	0x40022000
 8004060:	40022100 	.word	0x40022100
 8004064:	40022300 	.word	0x40022300
 8004068:	58026300 	.word	0x58026300

0800406c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b0b9      	sub	sp, #228	; 0xe4
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040d6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4aa9      	ldr	r2, [pc, #676]	; (8004384 <HAL_ADC_ConfigChannel+0x2c8>)
 80040de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d102      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x34>
 80040ea:	2302      	movs	r3, #2
 80040ec:	f000 bcfa 	b.w	8004ae4 <HAL_ADC_ConfigChannel+0xa28>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff fa71 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 84de 	bne.w	8004ac6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a9e      	ldr	r2, [pc, #632]	; (8004388 <HAL_ADC_ConfigChannel+0x2cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d033      	beq.n	800417c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800411c:	2b00      	cmp	r3, #0
 800411e:	d108      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x76>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0e9b      	lsrs	r3, r3, #26
 8004126:	f003 031f 	and.w	r3, r3, #31
 800412a:	2201      	movs	r2, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	e01d      	b.n	800416e <HAL_ADC_ConfigChannel+0xb2>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004146:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800414a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800414e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004156:	2320      	movs	r3, #32
 8004158:	e004      	b.n	8004164 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800415a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2201      	movs	r2, #1
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	69d1      	ldr	r1, [r2, #28]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6812      	ldr	r2, [r2, #0]
 8004178:	430b      	orrs	r3, r1
 800417a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6859      	ldr	r1, [r3, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	f7ff f89e 	bl	80032ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff fa26 	bl	80035e4 <LL_ADC_REG_IsConversionOngoing>
 8004198:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fa32 	bl	800360a <LL_ADC_INJ_IsConversionOngoing>
 80041a6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 8270 	bne.w	8004694 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 826b 	bne.w	8004694 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	461a      	mov	r2, r3
 80041cc:	f7ff f8f9 	bl	80033c2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6c      	ldr	r2, [pc, #432]	; (8004388 <HAL_ADC_ConfigChannel+0x2cc>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10d      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	08db      	lsrs	r3, r3, #3
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041f4:	e032      	b.n	800425c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041f6:	4b65      	ldr	r3, [pc, #404]	; (800438c <HAL_ADC_ConfigChannel+0x2d0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80041fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004202:	d10b      	bne.n	800421c <HAL_ADC_ConfigChannel+0x160>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	e01d      	b.n	8004258 <HAL_ADC_ConfigChannel+0x19c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x186>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	e00a      	b.n	8004258 <HAL_ADC_ConfigChannel+0x19c>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	2b04      	cmp	r3, #4
 8004262:	d048      	beq.n	80042f6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6919      	ldr	r1, [r3, #16]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004274:	f7fe ff24 	bl	80030c0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <HAL_ADC_ConfigChannel+0x2cc>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d119      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6919      	ldr	r1, [r3, #16]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	461a      	mov	r2, r3
 8004290:	f7fe ffbc 	bl	800320c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6919      	ldr	r1, [r3, #16]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d102      	bne.n	80042ac <HAL_ADC_ConfigChannel+0x1f0>
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	e000      	b.n	80042ae <HAL_ADC_ConfigChannel+0x1f2>
 80042ac:	2300      	movs	r3, #0
 80042ae:	461a      	mov	r2, r3
 80042b0:	f7fe ff8a 	bl	80031c8 <LL_ADC_SetOffsetSaturation>
 80042b4:	e1ee      	b.n	8004694 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6919      	ldr	r1, [r3, #16]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d102      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x212>
 80042c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80042cc:	e000      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x214>
 80042ce:	2300      	movs	r3, #0
 80042d0:	461a      	mov	r2, r3
 80042d2:	f7fe ff57 	bl	8003184 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6919      	ldr	r1, [r3, #16]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	7e1b      	ldrb	r3, [r3, #24]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x230>
 80042e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042ea:	e000      	b.n	80042ee <HAL_ADC_ConfigChannel+0x232>
 80042ec:	2300      	movs	r3, #0
 80042ee:	461a      	mov	r2, r3
 80042f0:	f7fe ff2e 	bl	8003150 <LL_ADC_SetDataRightShift>
 80042f4:	e1ce      	b.n	8004694 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a23      	ldr	r2, [pc, #140]	; (8004388 <HAL_ADC_ConfigChannel+0x2cc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	f040 8181 	bne.w	8004604 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe ff0b 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800430e:	4603      	mov	r3, r0
 8004310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <HAL_ADC_ConfigChannel+0x272>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe ff00 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004324:	4603      	mov	r3, r0
 8004326:	0e9b      	lsrs	r3, r3, #26
 8004328:	f003 021f 	and.w	r2, r3, #31
 800432c:	e01e      	b.n	800436c <HAL_ADC_ConfigChannel+0x2b0>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fef5 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800433a:	4603      	mov	r3, r0
 800433c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800434c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800435c:	2320      	movs	r3, #32
 800435e:	e004      	b.n	800436a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004360:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004364:	fab3 f383 	clz	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x2d4>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	0e9b      	lsrs	r3, r3, #26
 800437e:	f003 031f 	and.w	r3, r3, #31
 8004382:	e01e      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x306>
 8004384:	47ff0000 	.word	0x47ff0000
 8004388:	58026000 	.word	0x58026000
 800438c:	5c001000 	.word	0x5c001000
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80043a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80043ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e004      	b.n	80043c2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80043b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043bc:	fab3 f383 	clz	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d106      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2200      	movs	r2, #0
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe ff3e 	bl	8003250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fea2 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_ADC_ConfigChannel+0x344>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2101      	movs	r1, #1
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fe97 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	f003 021f 	and.w	r2, r3, #31
 80043fe:	e01e      	b.n	800443e <HAL_ADC_ConfigChannel+0x382>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fe8c 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800440c:	4603      	mov	r3, r0
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800441e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e004      	b.n	800443c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004436:	fab3 f383 	clz	r3, r3
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x39a>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	0e9b      	lsrs	r3, r3, #26
 8004450:	f003 031f 	and.w	r3, r3, #31
 8004454:	e018      	b.n	8004488 <HAL_ADC_ConfigChannel+0x3cc>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800446a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004472:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800447a:	2320      	movs	r3, #32
 800447c:	e004      	b.n	8004488 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004482:	fab3 f383 	clz	r3, r3
 8004486:	b2db      	uxtb	r3, r3
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	2101      	movs	r1, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe fedb 	bl	8003250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2102      	movs	r1, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fe3f 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10a      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x40a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2102      	movs	r1, #2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fe34 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80044bc:	4603      	mov	r3, r0
 80044be:	0e9b      	lsrs	r3, r3, #26
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	e01e      	b.n	8004504 <HAL_ADC_ConfigChannel+0x448>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fe29 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044dc:	fa93 f3a3 	rbit	r3, r3
 80044e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80044e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80044ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d101      	bne.n	80044f8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80044f4:	2320      	movs	r3, #32
 80044f6:	e004      	b.n	8004502 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80044f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fc:	fab3 f383 	clz	r3, r3
 8004500:	b2db      	uxtb	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_ADC_ConfigChannel+0x460>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	e014      	b.n	8004546 <HAL_ADC_ConfigChannel+0x48a>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800452a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004530:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004538:	2320      	movs	r3, #32
 800453a:	e004      	b.n	8004546 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800453c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004540:	fab3 f383 	clz	r3, r3
 8004544:	b2db      	uxtb	r3, r3
 8004546:	429a      	cmp	r2, r3
 8004548:	d106      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2200      	movs	r2, #0
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fe7c 	bl	8003250 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2103      	movs	r1, #3
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fde0 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004564:	4603      	mov	r3, r0
 8004566:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x4c8>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2103      	movs	r1, #3
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe fdd5 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800457a:	4603      	mov	r3, r0
 800457c:	0e9b      	lsrs	r3, r3, #26
 800457e:	f003 021f 	and.w	r2, r3, #31
 8004582:	e017      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x4f8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2103      	movs	r1, #3
 800458a:	4618      	mov	r0, r3
 800458c:	f7fe fdca 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004590:	4603      	mov	r3, r0
 8004592:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800459c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80045a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80045a6:	2320      	movs	r3, #32
 80045a8:	e003      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80045aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x510>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	e011      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x534>
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80045da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045dc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80045de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e003      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80045e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d14f      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2103      	movs	r1, #3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fe27 	bl	8003250 <LL_ADC_SetOffsetState>
 8004602:	e047      	b.n	8004694 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	069b      	lsls	r3, r3, #26
 8004614:	429a      	cmp	r2, r3
 8004616:	d107      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004626:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	069b      	lsls	r3, r3, #26
 8004638:	429a      	cmp	r2, r3
 800463a:	d107      	bne.n	800464c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800464a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004652:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	069b      	lsls	r3, r3, #26
 800465c:	429a      	cmp	r2, r3
 800465e:	d107      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800466e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004692:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe ff7b 	bl	8003594 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f040 8219 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6819      	ldr	r1, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	461a      	mov	r2, r3
 80046b4:	f7fe feb0 	bl	8003418 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4aa1      	ldr	r2, [pc, #644]	; (8004944 <HAL_ADC_ConfigChannel+0x888>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	f040 812e 	bne.w	8004920 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x630>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0e9b      	lsrs	r3, r3, #26
 80046da:	3301      	adds	r3, #1
 80046dc:	f003 031f 	and.w	r3, r3, #31
 80046e0:	2b09      	cmp	r3, #9
 80046e2:	bf94      	ite	ls
 80046e4:	2301      	movls	r3, #1
 80046e6:	2300      	movhi	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	e019      	b.n	8004720 <HAL_ADC_ConfigChannel+0x664>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80046fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80046fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004704:	2320      	movs	r3, #32
 8004706:	e003      	b.n	8004710 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2b09      	cmp	r3, #9
 8004718:	bf94      	ite	ls
 800471a:	2301      	movls	r3, #1
 800471c:	2300      	movhi	r3, #0
 800471e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004720:	2b00      	cmp	r3, #0
 8004722:	d079      	beq.n	8004818 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x684>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	3301      	adds	r3, #1
 8004738:	069b      	lsls	r3, r3, #26
 800473a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800473e:	e015      	b.n	800476c <HAL_ADC_ConfigChannel+0x6b0>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800474e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004750:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800475c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	069b      	lsls	r3, r3, #26
 8004768:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_ADC_ConfigChannel+0x6d0>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	0e9b      	lsrs	r3, r3, #26
 800477e:	3301      	adds	r3, #1
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	e017      	b.n	80047bc <HAL_ADC_ConfigChannel+0x700>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800479e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80047a4:	2320      	movs	r3, #32
 80047a6:	e003      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3301      	adds	r3, #1
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2101      	movs	r1, #1
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_ADC_ConfigChannel+0x726>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 021f 	and.w	r2, r3, #31
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	051b      	lsls	r3, r3, #20
 80047e0:	e018      	b.n	8004814 <HAL_ADC_ConfigChannel+0x758>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	fa93 f3a3 	rbit	r3, r3
 80047ee:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e003      	b.n	8004806 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80047fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	3301      	adds	r3, #1
 8004808:	f003 021f 	and.w	r2, r3, #31
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004814:	430b      	orrs	r3, r1
 8004816:	e07e      	b.n	8004916 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x778>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	0e9b      	lsrs	r3, r3, #26
 800482a:	3301      	adds	r3, #1
 800482c:	069b      	lsls	r3, r3, #26
 800482e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004832:	e015      	b.n	8004860 <HAL_ADC_ConfigChannel+0x7a4>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800484c:	2320      	movs	r3, #32
 800484e:	e003      	b.n	8004858 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	fab3 f383 	clz	r3, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3301      	adds	r3, #1
 800485a:	069b      	lsls	r3, r3, #26
 800485c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004868:	2b00      	cmp	r3, #0
 800486a:	d109      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x7c4>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	0e9b      	lsrs	r3, r3, #26
 8004872:	3301      	adds	r3, #1
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	2101      	movs	r1, #1
 800487a:	fa01 f303 	lsl.w	r3, r1, r3
 800487e:	e017      	b.n	80048b0 <HAL_ADC_ConfigChannel+0x7f4>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	61bb      	str	r3, [r7, #24]
  return result;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e003      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	2101      	movs	r1, #1
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	ea42 0103 	orr.w	r1, r2, r3
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10d      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x820>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	0e9b      	lsrs	r3, r3, #26
 80048c6:	3301      	adds	r3, #1
 80048c8:	f003 021f 	and.w	r2, r3, #31
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	3b1e      	subs	r3, #30
 80048d4:	051b      	lsls	r3, r3, #20
 80048d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048da:	e01b      	b.n	8004914 <HAL_ADC_ConfigChannel+0x858>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	60fb      	str	r3, [r7, #12]
  return result;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e003      	b.n	8004900 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f003 021f 	and.w	r2, r3, #31
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	3b1e      	subs	r3, #30
 800490e:	051b      	lsls	r3, r3, #20
 8004910:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004914:	430b      	orrs	r3, r1
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	6892      	ldr	r2, [r2, #8]
 800491a:	4619      	mov	r1, r3
 800491c:	f7fe fd51 	bl	80033c2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f280 80d7 	bge.w	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a06      	ldr	r2, [pc, #24]	; (8004948 <HAL_ADC_ConfigChannel+0x88c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d004      	beq.n	800493e <HAL_ADC_ConfigChannel+0x882>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <HAL_ADC_ConfigChannel+0x890>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10a      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x898>
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <HAL_ADC_ConfigChannel+0x894>)
 8004940:	e009      	b.n	8004956 <HAL_ADC_ConfigChannel+0x89a>
 8004942:	bf00      	nop
 8004944:	47ff0000 	.word	0x47ff0000
 8004948:	40022000 	.word	0x40022000
 800494c:	40022100 	.word	0x40022100
 8004950:	40022300 	.word	0x40022300
 8004954:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_ADC_ConfigChannel+0xa30>)
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fba4 	bl	80030a4 <LL_ADC_GetCommonPathInternalCh>
 800495c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a62      	ldr	r2, [pc, #392]	; (8004af0 <HAL_ADC_ConfigChannel+0xa34>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_ADC_ConfigChannel+0x8b8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a61      	ldr	r2, [pc, #388]	; (8004af4 <HAL_ADC_ConfigChannel+0xa38>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10e      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x8d6>
 8004974:	485e      	ldr	r0, [pc, #376]	; (8004af0 <HAL_ADC_ConfigChannel+0xa34>)
 8004976:	f7fe fe0d 	bl	8003594 <LL_ADC_IsEnabled>
 800497a:	4604      	mov	r4, r0
 800497c:	485d      	ldr	r0, [pc, #372]	; (8004af4 <HAL_ADC_ConfigChannel+0xa38>)
 800497e:	f7fe fe09 	bl	8003594 <LL_ADC_IsEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	4323      	orrs	r3, r4
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e008      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x8e8>
 8004992:	4859      	ldr	r0, [pc, #356]	; (8004af8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004994:	f7fe fdfe 	bl	8003594 <LL_ADC_IsEnabled>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8084 	beq.w	8004ab2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a53      	ldr	r2, [pc, #332]	; (8004afc <HAL_ADC_ConfigChannel+0xa40>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d132      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x95e>
 80049b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d12c      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a4c      	ldr	r2, [pc, #304]	; (8004af8 <HAL_ADC_ConfigChannel+0xa3c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	f040 8086 	bne.w	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a47      	ldr	r2, [pc, #284]	; (8004af0 <HAL_ADC_ConfigChannel+0xa34>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d004      	beq.n	80049e0 <HAL_ADC_ConfigChannel+0x924>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a46      	ldr	r2, [pc, #280]	; (8004af4 <HAL_ADC_ConfigChannel+0xa38>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x928>
 80049e0:	4a47      	ldr	r2, [pc, #284]	; (8004b00 <HAL_ADC_ConfigChannel+0xa44>)
 80049e2:	e000      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x92a>
 80049e4:	4a41      	ldr	r2, [pc, #260]	; (8004aec <HAL_ADC_ConfigChannel+0xa30>)
 80049e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe fb44 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049f6:	4b43      	ldr	r3, [pc, #268]	; (8004b04 <HAL_ADC_ConfigChannel+0xa48>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	099b      	lsrs	r3, r3, #6
 80049fc:	4a42      	ldr	r2, [pc, #264]	; (8004b08 <HAL_ADC_ConfigChannel+0xa4c>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	3301      	adds	r3, #1
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a0a:	e002      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f9      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a18:	e05e      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a3b      	ldr	r2, [pc, #236]	; (8004b0c <HAL_ADC_ConfigChannel+0xa50>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d120      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x9aa>
 8004a24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11a      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a30      	ldr	r2, [pc, #192]	; (8004af8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d14e      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <HAL_ADC_ConfigChannel+0xa34>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_ADC_ConfigChannel+0x992>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <HAL_ADC_ConfigChannel+0xa38>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d101      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x996>
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <HAL_ADC_ConfigChannel+0xa44>)
 8004a50:	e000      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x998>
 8004a52:	4a26      	ldr	r2, [pc, #152]	; (8004aec <HAL_ADC_ConfigChannel+0xa30>)
 8004a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7fe fb0d 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a64:	e038      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <HAL_ADC_ConfigChannel+0xa54>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d133      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
 8004a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d12d      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d128      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <HAL_ADC_ConfigChannel+0xa34>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_ADC_ConfigChannel+0x9de>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a17      	ldr	r2, [pc, #92]	; (8004af4 <HAL_ADC_ConfigChannel+0xa38>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x9e2>
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <HAL_ADC_ConfigChannel+0xa44>)
 8004a9c:	e000      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x9e4>
 8004a9e:	4a13      	ldr	r2, [pc, #76]	; (8004aec <HAL_ADC_ConfigChannel+0xa30>)
 8004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aa4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fe fae7 	bl	800307e <LL_ADC_SetCommonPathInternalCh>
 8004ab0:	e012      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004ac4:	e008      	b.n	8004ad8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aca:	f043 0220 	orr.w	r2, r3, #32
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004ae0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	37e4      	adds	r7, #228	; 0xe4
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd90      	pop	{r4, r7, pc}
 8004aec:	58026300 	.word	0x58026300
 8004af0:	40022000 	.word	0x40022000
 8004af4:	40022100 	.word	0x40022100
 8004af8:	58026000 	.word	0x58026000
 8004afc:	c7520000 	.word	0xc7520000
 8004b00:	40022300 	.word	0x40022300
 8004b04:	24000000 	.word	0x24000000
 8004b08:	053e2d63 	.word	0x053e2d63
 8004b0c:	c3210000 	.word	0xc3210000
 8004b10:	cb840000 	.word	0xcb840000

08004b14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe fd37 	bl	8003594 <LL_ADC_IsEnabled>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d16e      	bne.n	8004c0a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689a      	ldr	r2, [r3, #8]
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <ADC_Enable+0x100>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e05a      	b.n	8004c0c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fd06 	bl	800356c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b60:	f7fe fa20 	bl	8002fa4 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <ADC_Enable+0x104>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d004      	beq.n	8004b7a <ADC_Enable+0x66>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <ADC_Enable+0x108>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d101      	bne.n	8004b7e <ADC_Enable+0x6a>
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <ADC_Enable+0x10c>)
 8004b7c:	e000      	b.n	8004b80 <ADC_Enable+0x6c>
 8004b7e:	4b29      	ldr	r3, [pc, #164]	; (8004c24 <ADC_Enable+0x110>)
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe fc89 	bl	8003498 <LL_ADC_GetMultimode>
 8004b86:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <ADC_Enable+0x108>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d002      	beq.n	8004b98 <ADC_Enable+0x84>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	e000      	b.n	8004b9a <ADC_Enable+0x86>
 8004b98:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <ADC_Enable+0x104>)
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d02c      	beq.n	8004bfc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d130      	bne.n	8004c0a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ba8:	e028      	b.n	8004bfc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fcf0 	bl	8003594 <LL_ADC_IsEnabled>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fcd4 	bl	800356c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004bc4:	f7fe f9ee 	bl	8002fa4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d914      	bls.n	8004bfc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d00d      	beq.n	8004bfc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be4:	f043 0210 	orr.w	r2, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf0:	f043 0201 	orr.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e007      	b.n	8004c0c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d1cf      	bne.n	8004baa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	8000003f 	.word	0x8000003f
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40022100 	.word	0x40022100
 8004c20:	40022300 	.word	0x40022300
 8004c24:	58026300 	.word	0x58026300

08004c28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d14b      	bne.n	8004cda <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d021      	beq.n	8004ca0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe fb1f 	bl	80032a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d032      	beq.n	8004cd2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12b      	bne.n	8004cd2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11f      	bne.n	8004cd2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c96:	f043 0201 	orr.w	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	661a      	str	r2, [r3, #96]	; 0x60
 8004c9e:	e018      	b.n	8004cd2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d111      	bne.n	8004cd2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f043 0201 	orr.w	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f7ff f9ca 	bl	800406c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cd8:	e00e      	b.n	8004cf8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff f9de 	bl	80040a8 <HAL_ADC_ErrorCallback>
}
 8004cec:	e004      	b.n	8004cf8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff f9b6 	bl	8004080 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3a:	f043 0204 	orr.w	r2, r3, #4
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff f9b0 	bl	80040a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <ADC_ConfigureBoostMode+0x1bc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d004      	beq.n	8004d6c <ADC_ConfigureBoostMode+0x1c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6a      	ldr	r2, [pc, #424]	; (8004f10 <ADC_ConfigureBoostMode+0x1c0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <ADC_ConfigureBoostMode+0x30>
 8004d6c:	4b69      	ldr	r3, [pc, #420]	; (8004f14 <ADC_ConfigureBoostMode+0x1c4>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e008      	b.n	8004d92 <ADC_ConfigureBoostMode+0x42>
 8004d80:	4b65      	ldr	r3, [pc, #404]	; (8004f18 <ADC_ConfigureBoostMode+0x1c8>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	bf14      	ite	ne
 8004d8c:	2301      	movne	r3, #1
 8004d8e:	2300      	moveq	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d96:	f005 f93f 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 8004d9a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004da4:	d010      	beq.n	8004dc8 <ADC_ConfigureBoostMode+0x78>
 8004da6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004daa:	d871      	bhi.n	8004e90 <ADC_ConfigureBoostMode+0x140>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d002      	beq.n	8004db8 <ADC_ConfigureBoostMode+0x68>
 8004db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db6:	d16b      	bne.n	8004e90 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
        break;
 8004dc6:	e066      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	089b      	lsrs	r3, r3, #2
 8004dcc:	60fb      	str	r3, [r7, #12]
        break;
 8004dce:	e062      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004dd0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004dd4:	f006 f876 	bl	800aec4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dd8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004de2:	d051      	beq.n	8004e88 <ADC_ConfigureBoostMode+0x138>
 8004de4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004de8:	d854      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004dea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004dee:	d047      	beq.n	8004e80 <ADC_ConfigureBoostMode+0x130>
 8004df0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004df4:	d84e      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004df6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dfa:	d03d      	beq.n	8004e78 <ADC_ConfigureBoostMode+0x128>
 8004dfc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e00:	d848      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e06:	d033      	beq.n	8004e70 <ADC_ConfigureBoostMode+0x120>
 8004e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e0c:	d842      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e0e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e12:	d029      	beq.n	8004e68 <ADC_ConfigureBoostMode+0x118>
 8004e14:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e18:	d83c      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e1a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e1e:	d01a      	beq.n	8004e56 <ADC_ConfigureBoostMode+0x106>
 8004e20:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e24:	d836      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e2a:	d014      	beq.n	8004e56 <ADC_ConfigureBoostMode+0x106>
 8004e2c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e30:	d830      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e36:	d00e      	beq.n	8004e56 <ADC_ConfigureBoostMode+0x106>
 8004e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e3c:	d82a      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e42:	d008      	beq.n	8004e56 <ADC_ConfigureBoostMode+0x106>
 8004e44:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e48:	d824      	bhi.n	8004e94 <ADC_ConfigureBoostMode+0x144>
 8004e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e4e:	d002      	beq.n	8004e56 <ADC_ConfigureBoostMode+0x106>
 8004e50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e54:	d11e      	bne.n	8004e94 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	0c9b      	lsrs	r3, r3, #18
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e64:	60fb      	str	r3, [r7, #12]
        break;
 8004e66:	e016      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e012      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	60fb      	str	r3, [r7, #12]
        break;
 8004e76:	e00e      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	099b      	lsrs	r3, r3, #6
 8004e7c:	60fb      	str	r3, [r7, #12]
        break;
 8004e7e:	e00a      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]
        break;
 8004e86:	e006      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	60fb      	str	r3, [r7, #12]
        break;
 8004e8e:	e002      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
        break;
 8004e90:	bf00      	nop
 8004e92:	e000      	b.n	8004e96 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004e94:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <ADC_ConfigureBoostMode+0x1cc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d808      	bhi.n	8004eb6 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004eb2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004eb4:	e025      	b.n	8004f02 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a19      	ldr	r2, [pc, #100]	; (8004f20 <ADC_ConfigureBoostMode+0x1d0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d80a      	bhi.n	8004ed4 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ed0:	609a      	str	r2, [r3, #8]
}
 8004ed2:	e016      	b.n	8004f02 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <ADC_ConfigureBoostMode+0x1d4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d80a      	bhi.n	8004ef2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eee:	609a      	str	r2, [r3, #8]
}
 8004ef0:	e007      	b.n	8004f02 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40022000 	.word	0x40022000
 8004f10:	40022100 	.word	0x40022100
 8004f14:	40022300 	.word	0x40022300
 8004f18:	58026300 	.word	0x58026300
 8004f1c:	005f5e10 	.word	0x005f5e10
 8004f20:	00bebc20 	.word	0x00bebc20
 8004f24:	017d7840 	.word	0x017d7840

08004f28 <LL_ADC_IsEnabled>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <LL_ADC_IsEnabled+0x18>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <LL_ADC_IsEnabled+0x1a>
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d101      	bne.n	8004f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b0a3      	sub	sp, #140	; 0x8c
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e0c1      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004ffe:	2300      	movs	r3, #0
 8005000:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005002:	2300      	movs	r3, #0
 8005004:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5e      	ldr	r2, [pc, #376]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d102      	bne.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005010:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	e001      	b.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005024:	f043 0220 	orr.w	r2, r3, #32
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0a0      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ff87 	bl	8004f4e <LL_ADC_REG_IsConversionOngoing>
 8005040:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff80 	bl	8004f4e <LL_ADC_REG_IsConversionOngoing>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	f040 8081 	bne.w	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005056:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d17c      	bne.n	8005158 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a48      	ldr	r2, [pc, #288]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a46      	ldr	r2, [pc, #280]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005072:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005074:	e000      	b.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005076:	4b46      	ldr	r3, [pc, #280]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005078:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d039      	beq.n	80050f6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	431a      	orrs	r2, r3
 8005090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005092:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3a      	ldr	r2, [pc, #232]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a39      	ldr	r2, [pc, #228]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d10e      	bne.n	80050c6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050a8:	4836      	ldr	r0, [pc, #216]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050aa:	f7ff ff3d 	bl	8004f28 <LL_ADC_IsEnabled>
 80050ae:	4604      	mov	r4, r0
 80050b0:	4835      	ldr	r0, [pc, #212]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050b2:	f7ff ff39 	bl	8004f28 <LL_ADC_IsEnabled>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4323      	orrs	r3, r4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e008      	b.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80050c6:	4833      	ldr	r0, [pc, #204]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050c8:	f7ff ff2e 	bl	8004f28 <LL_ADC_IsEnabled>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d047      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	4b2d      	ldr	r3, [pc, #180]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	6811      	ldr	r1, [r2, #0]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	6892      	ldr	r2, [r2, #8]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	431a      	orrs	r2, r3
 80050f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050f4:	e03a      	b.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80050f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005100:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d004      	beq.n	8005116 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d10e      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005116:	481b      	ldr	r0, [pc, #108]	; (8005184 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005118:	f7ff ff06 	bl	8004f28 <LL_ADC_IsEnabled>
 800511c:	4604      	mov	r4, r0
 800511e:	481a      	ldr	r0, [pc, #104]	; (8005188 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005120:	f7ff ff02 	bl	8004f28 <LL_ADC_IsEnabled>
 8005124:	4603      	mov	r3, r0
 8005126:	4323      	orrs	r3, r4
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e008      	b.n	8005146 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005134:	4817      	ldr	r0, [pc, #92]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005136:	f7ff fef7 	bl	8004f28 <LL_ADC_IsEnabled>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	bf0c      	ite	eq
 8005140:	2301      	moveq	r3, #1
 8005142:	2300      	movne	r3, #0
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800514a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005150:	4013      	ands	r3, r2
 8005152:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005154:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005156:	e009      	b.n	800516c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800516a:	e000      	b.n	800516e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800516c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005176:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800517a:	4618      	mov	r0, r3
 800517c:	378c      	adds	r7, #140	; 0x8c
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	bf00      	nop
 8005184:	40022000 	.word	0x40022000
 8005188:	40022100 	.word	0x40022100
 800518c:	40022300 	.word	0x40022300
 8005190:	58026300 	.word	0x58026300
 8005194:	58026000 	.word	0x58026000
 8005198:	fffff0e0 	.word	0xfffff0e0

0800519c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e023      	b.n	80051f6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fb fc32 	bl	8000a2c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <__NVIC_SetPriorityGrouping+0x40>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800521c:	4013      	ands	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <__NVIC_SetPriorityGrouping+0x44>)
 800522a:	4313      	orrs	r3, r2
 800522c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800522e:	4a04      	ldr	r2, [pc, #16]	; (8005240 <__NVIC_SetPriorityGrouping+0x40>)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	60d3      	str	r3, [r2, #12]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	e000ed00 	.word	0xe000ed00
 8005244:	05fa0000 	.word	0x05fa0000

08005248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800524c:	4b04      	ldr	r3, [pc, #16]	; (8005260 <__NVIC_GetPriorityGrouping+0x18>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	f003 0307 	and.w	r3, r3, #7
}
 8005256:	4618      	mov	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800526e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	db0b      	blt.n	800528e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	f003 021f 	and.w	r2, r3, #31
 800527c:	4907      	ldr	r1, [pc, #28]	; (800529c <__NVIC_EnableIRQ+0x38>)
 800527e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	2001      	movs	r0, #1
 8005286:	fa00 f202 	lsl.w	r2, r0, r2
 800528a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	e000e100 	.word	0xe000e100

080052a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	6039      	str	r1, [r7, #0]
 80052aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	db0a      	blt.n	80052ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	490c      	ldr	r1, [pc, #48]	; (80052ec <__NVIC_SetPriority+0x4c>)
 80052ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052be:	0112      	lsls	r2, r2, #4
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	440b      	add	r3, r1
 80052c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c8:	e00a      	b.n	80052e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4908      	ldr	r1, [pc, #32]	; (80052f0 <__NVIC_SetPriority+0x50>)
 80052d0:	88fb      	ldrh	r3, [r7, #6]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	3b04      	subs	r3, #4
 80052d8:	0112      	lsls	r2, r2, #4
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	440b      	add	r3, r1
 80052de:	761a      	strb	r2, [r3, #24]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	e000e100 	.word	0xe000e100
 80052f0:	e000ed00 	.word	0xe000ed00

080052f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b089      	sub	sp, #36	; 0x24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 0307 	and.w	r3, r3, #7
 8005306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f1c3 0307 	rsb	r3, r3, #7
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf28      	it	cs
 8005312:	2304      	movcs	r3, #4
 8005314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3304      	adds	r3, #4
 800531a:	2b06      	cmp	r3, #6
 800531c:	d902      	bls.n	8005324 <NVIC_EncodePriority+0x30>
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3b03      	subs	r3, #3
 8005322:	e000      	b.n	8005326 <NVIC_EncodePriority+0x32>
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005328:	f04f 32ff 	mov.w	r2, #4294967295
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43da      	mvns	r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	401a      	ands	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800533c:	f04f 31ff 	mov.w	r1, #4294967295
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	43d9      	mvns	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800534c:	4313      	orrs	r3, r2
         );
}
 800534e:	4618      	mov	r0, r3
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3b01      	subs	r3, #1
 8005368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800536c:	d301      	bcc.n	8005372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800536e:	2301      	movs	r3, #1
 8005370:	e00f      	b.n	8005392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <SysTick_Config+0x40>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3b01      	subs	r3, #1
 8005378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800537a:	210f      	movs	r1, #15
 800537c:	f04f 30ff 	mov.w	r0, #4294967295
 8005380:	f7ff ff8e 	bl	80052a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <SysTick_Config+0x40>)
 8005386:	2200      	movs	r2, #0
 8005388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800538a:	4b04      	ldr	r3, [pc, #16]	; (800539c <SysTick_Config+0x40>)
 800538c:	2207      	movs	r2, #7
 800538e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	e000e010 	.word	0xe000e010

080053a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7ff ff29 	bl	8005200 <__NVIC_SetPriorityGrouping>
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	4603      	mov	r3, r0
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053c4:	f7ff ff40 	bl	8005248 <__NVIC_GetPriorityGrouping>
 80053c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	6978      	ldr	r0, [r7, #20]
 80053d0:	f7ff ff90 	bl	80052f4 <NVIC_EncodePriority>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff5f 	bl	80052a0 <__NVIC_SetPriority>
}
 80053e2:	bf00      	nop
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	4603      	mov	r3, r0
 80053f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff ff33 	bl	8005264 <__NVIC_EnableIRQ>
}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ffa4 	bl	800535c <SysTick_Config>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7fd fdbc 	bl	8002fa4 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e314      	b.n	8005a62 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a66      	ldr	r2, [pc, #408]	; (80055d8 <HAL_DMA_Init+0x1b8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d04a      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_DMA_Init+0x1bc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d045      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a63      	ldr	r2, [pc, #396]	; (80055e0 <HAL_DMA_Init+0x1c0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d040      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a62      	ldr	r2, [pc, #392]	; (80055e4 <HAL_DMA_Init+0x1c4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d03b      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a60      	ldr	r2, [pc, #384]	; (80055e8 <HAL_DMA_Init+0x1c8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d036      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5f      	ldr	r2, [pc, #380]	; (80055ec <HAL_DMA_Init+0x1cc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d031      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5d      	ldr	r2, [pc, #372]	; (80055f0 <HAL_DMA_Init+0x1d0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d02c      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a5c      	ldr	r2, [pc, #368]	; (80055f4 <HAL_DMA_Init+0x1d4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d027      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a5a      	ldr	r2, [pc, #360]	; (80055f8 <HAL_DMA_Init+0x1d8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a59      	ldr	r2, [pc, #356]	; (80055fc <HAL_DMA_Init+0x1dc>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a57      	ldr	r2, [pc, #348]	; (8005600 <HAL_DMA_Init+0x1e0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a56      	ldr	r2, [pc, #344]	; (8005604 <HAL_DMA_Init+0x1e4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a54      	ldr	r2, [pc, #336]	; (8005608 <HAL_DMA_Init+0x1e8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a53      	ldr	r2, [pc, #332]	; (800560c <HAL_DMA_Init+0x1ec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a51      	ldr	r2, [pc, #324]	; (8005610 <HAL_DMA_Init+0x1f0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_DMA_Init+0xb8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a50      	ldr	r2, [pc, #320]	; (8005614 <HAL_DMA_Init+0x1f4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_DMA_Init+0xbc>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_DMA_Init+0xbe>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 813c 	beq.w	800575c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a37      	ldr	r2, [pc, #220]	; (80055d8 <HAL_DMA_Init+0x1b8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04a      	beq.n	8005594 <HAL_DMA_Init+0x174>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a36      	ldr	r2, [pc, #216]	; (80055dc <HAL_DMA_Init+0x1bc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d045      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a34      	ldr	r2, [pc, #208]	; (80055e0 <HAL_DMA_Init+0x1c0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d040      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a33      	ldr	r2, [pc, #204]	; (80055e4 <HAL_DMA_Init+0x1c4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03b      	beq.n	8005594 <HAL_DMA_Init+0x174>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a31      	ldr	r2, [pc, #196]	; (80055e8 <HAL_DMA_Init+0x1c8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d036      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a30      	ldr	r2, [pc, #192]	; (80055ec <HAL_DMA_Init+0x1cc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d031      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a2e      	ldr	r2, [pc, #184]	; (80055f0 <HAL_DMA_Init+0x1d0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02c      	beq.n	8005594 <HAL_DMA_Init+0x174>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <HAL_DMA_Init+0x1d4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d027      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2b      	ldr	r2, [pc, #172]	; (80055f8 <HAL_DMA_Init+0x1d8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_DMA_Init+0x174>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_DMA_Init+0x1dc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a28      	ldr	r2, [pc, #160]	; (8005600 <HAL_DMA_Init+0x1e0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_DMA_Init+0x1e4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_DMA_Init+0x174>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a25      	ldr	r2, [pc, #148]	; (8005608 <HAL_DMA_Init+0x1e8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_DMA_Init+0x1ec>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_DMA_Init+0x174>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_DMA_Init+0x1f0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_DMA_Init+0x174>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <HAL_DMA_Init+0x1f4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <HAL_DMA_Init+0x186>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e007      	b.n	80055b6 <HAL_DMA_Init+0x196>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055b6:	e02f      	b.n	8005618 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b8:	f7fd fcf4 	bl	8002fa4 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d928      	bls.n	8005618 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2203      	movs	r2, #3
 80055d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e244      	b.n	8005a62 <HAL_DMA_Init+0x642>
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1c8      	bne.n	80055b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4b84      	ldr	r3, [pc, #528]	; (8005844 <HAL_DMA_Init+0x424>)
 8005632:	4013      	ands	r3, r2
 8005634:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800563e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800564a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005656:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	2b04      	cmp	r3, #4
 800566a:	d107      	bne.n	800567c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4313      	orrs	r3, r2
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b28      	cmp	r3, #40	; 0x28
 8005682:	d903      	bls.n	800568c <HAL_DMA_Init+0x26c>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b2e      	cmp	r3, #46	; 0x2e
 800568a:	d91f      	bls.n	80056cc <HAL_DMA_Init+0x2ac>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b3e      	cmp	r3, #62	; 0x3e
 8005692:	d903      	bls.n	800569c <HAL_DMA_Init+0x27c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b42      	cmp	r3, #66	; 0x42
 800569a:	d917      	bls.n	80056cc <HAL_DMA_Init+0x2ac>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b46      	cmp	r3, #70	; 0x46
 80056a2:	d903      	bls.n	80056ac <HAL_DMA_Init+0x28c>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b48      	cmp	r3, #72	; 0x48
 80056aa:	d90f      	bls.n	80056cc <HAL_DMA_Init+0x2ac>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b4e      	cmp	r3, #78	; 0x4e
 80056b2:	d903      	bls.n	80056bc <HAL_DMA_Init+0x29c>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2b52      	cmp	r3, #82	; 0x52
 80056ba:	d907      	bls.n	80056cc <HAL_DMA_Init+0x2ac>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b73      	cmp	r3, #115	; 0x73
 80056c2:	d905      	bls.n	80056d0 <HAL_DMA_Init+0x2b0>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	2b77      	cmp	r3, #119	; 0x77
 80056ca:	d801      	bhi.n	80056d0 <HAL_DMA_Init+0x2b0>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_DMA_Init+0x2b2>
 80056d0:	2300      	movs	r3, #0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b04      	cmp	r3, #4
 8005706:	d117      	bne.n	8005738 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f001 fdcc 	bl	80072b8 <DMA_CheckFifoParam>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2240      	movs	r2, #64	; 0x40
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e194      	b.n	8005a62 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 fd07 	bl	8007154 <DMA_CalcBaseAndBitshift>
 8005746:	4603      	mov	r3, r0
 8005748:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	223f      	movs	r2, #63	; 0x3f
 8005754:	409a      	lsls	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
 800575a:	e0ca      	b.n	80058f2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a39      	ldr	r2, [pc, #228]	; (8005848 <HAL_DMA_Init+0x428>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d022      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a38      	ldr	r2, [pc, #224]	; (800584c <HAL_DMA_Init+0x42c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d01d      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a36      	ldr	r2, [pc, #216]	; (8005850 <HAL_DMA_Init+0x430>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d018      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a35      	ldr	r2, [pc, #212]	; (8005854 <HAL_DMA_Init+0x434>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d013      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a33      	ldr	r2, [pc, #204]	; (8005858 <HAL_DMA_Init+0x438>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00e      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a32      	ldr	r2, [pc, #200]	; (800585c <HAL_DMA_Init+0x43c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a30      	ldr	r2, [pc, #192]	; (8005860 <HAL_DMA_Init+0x440>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <HAL_DMA_Init+0x38c>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2f      	ldr	r2, [pc, #188]	; (8005864 <HAL_DMA_Init+0x444>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <HAL_DMA_Init+0x390>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_DMA_Init+0x392>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8094 	beq.w	80058e0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a22      	ldr	r2, [pc, #136]	; (8005848 <HAL_DMA_Init+0x428>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d021      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a21      	ldr	r2, [pc, #132]	; (800584c <HAL_DMA_Init+0x42c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d01c      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <HAL_DMA_Init+0x430>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d017      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_DMA_Init+0x434>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d012      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <HAL_DMA_Init+0x438>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00d      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_DMA_Init+0x43c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d008      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <HAL_DMA_Init+0x440>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <HAL_DMA_Init+0x3e6>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <HAL_DMA_Init+0x444>)
 8005804:	4293      	cmp	r3, r2
 8005806:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4b11      	ldr	r3, [pc, #68]	; (8005868 <HAL_DMA_Init+0x448>)
 8005824:	4013      	ands	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d01d      	beq.n	800586c <HAL_DMA_Init+0x44c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b80      	cmp	r3, #128	; 0x80
 8005836:	d102      	bne.n	800583e <HAL_DMA_Init+0x41e>
 8005838:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800583c:	e017      	b.n	800586e <HAL_DMA_Init+0x44e>
 800583e:	2300      	movs	r3, #0
 8005840:	e015      	b.n	800586e <HAL_DMA_Init+0x44e>
 8005842:	bf00      	nop
 8005844:	fe10803f 	.word	0xfe10803f
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494
 8005868:	fffe000f 	.word	0xfffe000f
 800586c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68d2      	ldr	r2, [r2, #12]
 8005872:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005874:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800587c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005884:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800588c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005894:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800589c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	4b6e      	ldr	r3, [pc, #440]	; (8005a6c <HAL_DMA_Init+0x64c>)
 80058b4:	4413      	add	r3, r2
 80058b6:	4a6e      	ldr	r2, [pc, #440]	; (8005a70 <HAL_DMA_Init+0x650>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f001 fc45 	bl	8007154 <DMA_CalcBaseAndBitshift>
 80058ca:	4603      	mov	r3, r0
 80058cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2201      	movs	r2, #1
 80058d8:	409a      	lsls	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e008      	b.n	80058f2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2203      	movs	r2, #3
 80058ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0b7      	b.n	8005a62 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5f      	ldr	r2, [pc, #380]	; (8005a74 <HAL_DMA_Init+0x654>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d072      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5d      	ldr	r2, [pc, #372]	; (8005a78 <HAL_DMA_Init+0x658>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d06d      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a5c      	ldr	r2, [pc, #368]	; (8005a7c <HAL_DMA_Init+0x65c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d068      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a5a      	ldr	r2, [pc, #360]	; (8005a80 <HAL_DMA_Init+0x660>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d063      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a59      	ldr	r2, [pc, #356]	; (8005a84 <HAL_DMA_Init+0x664>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d05e      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a57      	ldr	r2, [pc, #348]	; (8005a88 <HAL_DMA_Init+0x668>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d059      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a56      	ldr	r2, [pc, #344]	; (8005a8c <HAL_DMA_Init+0x66c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d054      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <HAL_DMA_Init+0x670>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d04f      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a53      	ldr	r2, [pc, #332]	; (8005a94 <HAL_DMA_Init+0x674>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d04a      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a51      	ldr	r2, [pc, #324]	; (8005a98 <HAL_DMA_Init+0x678>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d045      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a50      	ldr	r2, [pc, #320]	; (8005a9c <HAL_DMA_Init+0x67c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d040      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a4e      	ldr	r2, [pc, #312]	; (8005aa0 <HAL_DMA_Init+0x680>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d03b      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a4d      	ldr	r2, [pc, #308]	; (8005aa4 <HAL_DMA_Init+0x684>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d036      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <HAL_DMA_Init+0x688>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d031      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a4a      	ldr	r2, [pc, #296]	; (8005aac <HAL_DMA_Init+0x68c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d02c      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a48      	ldr	r2, [pc, #288]	; (8005ab0 <HAL_DMA_Init+0x690>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d027      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a47      	ldr	r2, [pc, #284]	; (8005ab4 <HAL_DMA_Init+0x694>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d022      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a45      	ldr	r2, [pc, #276]	; (8005ab8 <HAL_DMA_Init+0x698>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a44      	ldr	r2, [pc, #272]	; (8005abc <HAL_DMA_Init+0x69c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d018      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a42      	ldr	r2, [pc, #264]	; (8005ac0 <HAL_DMA_Init+0x6a0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <HAL_DMA_Init+0x6a4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d00e      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3f      	ldr	r2, [pc, #252]	; (8005ac8 <HAL_DMA_Init+0x6a8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d009      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <HAL_DMA_Init+0x6ac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d004      	beq.n	80059e2 <HAL_DMA_Init+0x5c2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <HAL_DMA_Init+0x6b0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d101      	bne.n	80059e6 <HAL_DMA_Init+0x5c6>
 80059e2:	2301      	movs	r3, #1
 80059e4:	e000      	b.n	80059e8 <HAL_DMA_Init+0x5c8>
 80059e6:	2300      	movs	r3, #0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d032      	beq.n	8005a52 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fcdf 	bl	80073b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d102      	bne.n	8005a00 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d010      	beq.n	8005a40 <HAL_DMA_Init+0x620>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d80c      	bhi.n	8005a40 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 fd5c 	bl	80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	e008      	b.n	8005a52 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	a7fdabf8 	.word	0xa7fdabf8
 8005a70:	cccccccd 	.word	0xcccccccd
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8
 8005ab4:	58025408 	.word	0x58025408
 8005ab8:	5802541c 	.word	0x5802541c
 8005abc:	58025430 	.word	0x58025430
 8005ac0:	58025444 	.word	0x58025444
 8005ac4:	58025458 	.word	0x58025458
 8005ac8:	5802546c 	.word	0x5802546c
 8005acc:	58025480 	.word	0x58025480
 8005ad0:	58025494 	.word	0x58025494

08005ad4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e226      	b.n	8005f3e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_DMA_Start_IT+0x2a>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e21f      	b.n	8005f3e <HAL_DMA_Start_IT+0x46a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	f040 820a 	bne.w	8005f28 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a68      	ldr	r2, [pc, #416]	; (8005cc8 <HAL_DMA_Start_IT+0x1f4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d04a      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a66      	ldr	r2, [pc, #408]	; (8005ccc <HAL_DMA_Start_IT+0x1f8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d045      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a65      	ldr	r2, [pc, #404]	; (8005cd0 <HAL_DMA_Start_IT+0x1fc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d040      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a63      	ldr	r2, [pc, #396]	; (8005cd4 <HAL_DMA_Start_IT+0x200>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d03b      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a62      	ldr	r2, [pc, #392]	; (8005cd8 <HAL_DMA_Start_IT+0x204>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d036      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a60      	ldr	r2, [pc, #384]	; (8005cdc <HAL_DMA_Start_IT+0x208>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d031      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a5f      	ldr	r2, [pc, #380]	; (8005ce0 <HAL_DMA_Start_IT+0x20c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d02c      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a5d      	ldr	r2, [pc, #372]	; (8005ce4 <HAL_DMA_Start_IT+0x210>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d027      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a5c      	ldr	r2, [pc, #368]	; (8005ce8 <HAL_DMA_Start_IT+0x214>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d022      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a5a      	ldr	r2, [pc, #360]	; (8005cec <HAL_DMA_Start_IT+0x218>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01d      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a59      	ldr	r2, [pc, #356]	; (8005cf0 <HAL_DMA_Start_IT+0x21c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d018      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a57      	ldr	r2, [pc, #348]	; (8005cf4 <HAL_DMA_Start_IT+0x220>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d013      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a56      	ldr	r2, [pc, #344]	; (8005cf8 <HAL_DMA_Start_IT+0x224>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a54      	ldr	r2, [pc, #336]	; (8005cfc <HAL_DMA_Start_IT+0x228>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d009      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a53      	ldr	r2, [pc, #332]	; (8005d00 <HAL_DMA_Start_IT+0x22c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_Start_IT+0xee>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a51      	ldr	r2, [pc, #324]	; (8005d04 <HAL_DMA_Start_IT+0x230>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d108      	bne.n	8005bd4 <HAL_DMA_Start_IT+0x100>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e007      	b.n	8005be4 <HAL_DMA_Start_IT+0x110>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f001 f906 	bl	8006dfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <HAL_DMA_Start_IT+0x1f4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d04a      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a33      	ldr	r2, [pc, #204]	; (8005ccc <HAL_DMA_Start_IT+0x1f8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d045      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <HAL_DMA_Start_IT+0x1fc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d040      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <HAL_DMA_Start_IT+0x200>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d03b      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	; (8005cd8 <HAL_DMA_Start_IT+0x204>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d036      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <HAL_DMA_Start_IT+0x208>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d031      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <HAL_DMA_Start_IT+0x20c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d02c      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <HAL_DMA_Start_IT+0x210>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d027      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <HAL_DMA_Start_IT+0x214>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d022      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a27      	ldr	r2, [pc, #156]	; (8005cec <HAL_DMA_Start_IT+0x218>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d01d      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <HAL_DMA_Start_IT+0x21c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <HAL_DMA_Start_IT+0x220>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <HAL_DMA_Start_IT+0x224>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_DMA_Start_IT+0x228>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	; (8005d00 <HAL_DMA_Start_IT+0x22c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_DMA_Start_IT+0x1bc>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <HAL_DMA_Start_IT+0x230>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d101      	bne.n	8005c94 <HAL_DMA_Start_IT+0x1c0>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <HAL_DMA_Start_IT+0x1c2>
 8005c94:	2300      	movs	r3, #0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d036      	beq.n	8005d08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f023 021e 	bic.w	r2, r3, #30
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0216 	orr.w	r2, r2, #22
 8005cac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d03e      	beq.n	8005d34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0208 	orr.w	r2, r2, #8
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	e035      	b.n	8005d34 <HAL_DMA_Start_IT+0x260>
 8005cc8:	40020010 	.word	0x40020010
 8005ccc:	40020028 	.word	0x40020028
 8005cd0:	40020040 	.word	0x40020040
 8005cd4:	40020058 	.word	0x40020058
 8005cd8:	40020070 	.word	0x40020070
 8005cdc:	40020088 	.word	0x40020088
 8005ce0:	400200a0 	.word	0x400200a0
 8005ce4:	400200b8 	.word	0x400200b8
 8005ce8:	40020410 	.word	0x40020410
 8005cec:	40020428 	.word	0x40020428
 8005cf0:	40020440 	.word	0x40020440
 8005cf4:	40020458 	.word	0x40020458
 8005cf8:	40020470 	.word	0x40020470
 8005cfc:	40020488 	.word	0x40020488
 8005d00:	400204a0 	.word	0x400204a0
 8005d04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f023 020e 	bic.w	r2, r3, #14
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 020a 	orr.w	r2, r2, #10
 8005d1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0204 	orr.w	r2, r2, #4
 8005d32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a83      	ldr	r2, [pc, #524]	; (8005f48 <HAL_DMA_Start_IT+0x474>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d072      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a82      	ldr	r2, [pc, #520]	; (8005f4c <HAL_DMA_Start_IT+0x478>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d06d      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a80      	ldr	r2, [pc, #512]	; (8005f50 <HAL_DMA_Start_IT+0x47c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d068      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a7f      	ldr	r2, [pc, #508]	; (8005f54 <HAL_DMA_Start_IT+0x480>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d063      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a7d      	ldr	r2, [pc, #500]	; (8005f58 <HAL_DMA_Start_IT+0x484>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d05e      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a7c      	ldr	r2, [pc, #496]	; (8005f5c <HAL_DMA_Start_IT+0x488>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d059      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7a      	ldr	r2, [pc, #488]	; (8005f60 <HAL_DMA_Start_IT+0x48c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d054      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a79      	ldr	r2, [pc, #484]	; (8005f64 <HAL_DMA_Start_IT+0x490>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d04f      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a77      	ldr	r2, [pc, #476]	; (8005f68 <HAL_DMA_Start_IT+0x494>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04a      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a76      	ldr	r2, [pc, #472]	; (8005f6c <HAL_DMA_Start_IT+0x498>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d045      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a74      	ldr	r2, [pc, #464]	; (8005f70 <HAL_DMA_Start_IT+0x49c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d040      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a73      	ldr	r2, [pc, #460]	; (8005f74 <HAL_DMA_Start_IT+0x4a0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d03b      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a71      	ldr	r2, [pc, #452]	; (8005f78 <HAL_DMA_Start_IT+0x4a4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d036      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a70      	ldr	r2, [pc, #448]	; (8005f7c <HAL_DMA_Start_IT+0x4a8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a6e      	ldr	r2, [pc, #440]	; (8005f80 <HAL_DMA_Start_IT+0x4ac>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02c      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6d      	ldr	r2, [pc, #436]	; (8005f84 <HAL_DMA_Start_IT+0x4b0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d027      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a6b      	ldr	r2, [pc, #428]	; (8005f88 <HAL_DMA_Start_IT+0x4b4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6a      	ldr	r2, [pc, #424]	; (8005f8c <HAL_DMA_Start_IT+0x4b8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01d      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a68      	ldr	r2, [pc, #416]	; (8005f90 <HAL_DMA_Start_IT+0x4bc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a67      	ldr	r2, [pc, #412]	; (8005f94 <HAL_DMA_Start_IT+0x4c0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a65      	ldr	r2, [pc, #404]	; (8005f98 <HAL_DMA_Start_IT+0x4c4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a64      	ldr	r2, [pc, #400]	; (8005f9c <HAL_DMA_Start_IT+0x4c8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a62      	ldr	r2, [pc, #392]	; (8005fa0 <HAL_DMA_Start_IT+0x4cc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_DMA_Start_IT+0x350>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a61      	ldr	r2, [pc, #388]	; (8005fa4 <HAL_DMA_Start_IT+0x4d0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d101      	bne.n	8005e28 <HAL_DMA_Start_IT+0x354>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_DMA_Start_IT+0x356>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01a      	beq.n	8005e64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d007      	beq.n	8005e4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a37      	ldr	r2, [pc, #220]	; (8005f48 <HAL_DMA_Start_IT+0x474>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d04a      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a36      	ldr	r2, [pc, #216]	; (8005f4c <HAL_DMA_Start_IT+0x478>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d045      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <HAL_DMA_Start_IT+0x47c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d040      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <HAL_DMA_Start_IT+0x480>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d03b      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <HAL_DMA_Start_IT+0x484>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d036      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <HAL_DMA_Start_IT+0x488>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d031      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <HAL_DMA_Start_IT+0x48c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d02c      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <HAL_DMA_Start_IT+0x490>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d027      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a2b      	ldr	r2, [pc, #172]	; (8005f68 <HAL_DMA_Start_IT+0x494>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <HAL_DMA_Start_IT+0x498>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d01d      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <HAL_DMA_Start_IT+0x49c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <HAL_DMA_Start_IT+0x4a0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <HAL_DMA_Start_IT+0x4a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_DMA_Start_IT+0x4a8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <HAL_DMA_Start_IT+0x4ac>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_DMA_Start_IT+0x430>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_DMA_Start_IT+0x4b0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <HAL_DMA_Start_IT+0x442>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f042 0201 	orr.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e012      	b.n	8005f3c <HAL_DMA_Start_IT+0x468>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e009      	b.n	8005f3c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	40020010 	.word	0x40020010
 8005f4c:	40020028 	.word	0x40020028
 8005f50:	40020040 	.word	0x40020040
 8005f54:	40020058 	.word	0x40020058
 8005f58:	40020070 	.word	0x40020070
 8005f5c:	40020088 	.word	0x40020088
 8005f60:	400200a0 	.word	0x400200a0
 8005f64:	400200b8 	.word	0x400200b8
 8005f68:	40020410 	.word	0x40020410
 8005f6c:	40020428 	.word	0x40020428
 8005f70:	40020440 	.word	0x40020440
 8005f74:	40020458 	.word	0x40020458
 8005f78:	40020470 	.word	0x40020470
 8005f7c:	40020488 	.word	0x40020488
 8005f80:	400204a0 	.word	0x400204a0
 8005f84:	400204b8 	.word	0x400204b8
 8005f88:	58025408 	.word	0x58025408
 8005f8c:	5802541c 	.word	0x5802541c
 8005f90:	58025430 	.word	0x58025430
 8005f94:	58025444 	.word	0x58025444
 8005f98:	58025458 	.word	0x58025458
 8005f9c:	5802546c 	.word	0x5802546c
 8005fa0:	58025480 	.word	0x58025480
 8005fa4:	58025494 	.word	0x58025494

08005fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fb4:	4b67      	ldr	r3, [pc, #412]	; (8006154 <HAL_DMA_IRQHandler+0x1ac>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a67      	ldr	r2, [pc, #412]	; (8006158 <HAL_DMA_IRQHandler+0x1b0>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0a9b      	lsrs	r3, r3, #10
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a5f      	ldr	r2, [pc, #380]	; (800615c <HAL_DMA_IRQHandler+0x1b4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d04a      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a5d      	ldr	r2, [pc, #372]	; (8006160 <HAL_DMA_IRQHandler+0x1b8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d045      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <HAL_DMA_IRQHandler+0x1bc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d040      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5a      	ldr	r2, [pc, #360]	; (8006168 <HAL_DMA_IRQHandler+0x1c0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d03b      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a59      	ldr	r2, [pc, #356]	; (800616c <HAL_DMA_IRQHandler+0x1c4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d036      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a57      	ldr	r2, [pc, #348]	; (8006170 <HAL_DMA_IRQHandler+0x1c8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d031      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a56      	ldr	r2, [pc, #344]	; (8006174 <HAL_DMA_IRQHandler+0x1cc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d02c      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_DMA_IRQHandler+0x1d0>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d027      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a53      	ldr	r2, [pc, #332]	; (800617c <HAL_DMA_IRQHandler+0x1d4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d022      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a51      	ldr	r2, [pc, #324]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01d      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a50      	ldr	r2, [pc, #320]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d018      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a4e      	ldr	r2, [pc, #312]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a4d      	ldr	r2, [pc, #308]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00e      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a4b      	ldr	r2, [pc, #300]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d009      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a4a      	ldr	r2, [pc, #296]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d004      	beq.n	800607a <HAL_DMA_IRQHandler+0xd2>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a48      	ldr	r2, [pc, #288]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d101      	bne.n	800607e <HAL_DMA_IRQHandler+0xd6>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_DMA_IRQHandler+0xd8>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 842b 	beq.w	80068dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2208      	movs	r2, #8
 8006090:	409a      	lsls	r2, r3
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80a2 	beq.w	80061e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2e      	ldr	r2, [pc, #184]	; (800615c <HAL_DMA_IRQHandler+0x1b4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d04a      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_DMA_IRQHandler+0x1b8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d045      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2b      	ldr	r2, [pc, #172]	; (8006164 <HAL_DMA_IRQHandler+0x1bc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d040      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a2a      	ldr	r2, [pc, #168]	; (8006168 <HAL_DMA_IRQHandler+0x1c0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d03b      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a28      	ldr	r2, [pc, #160]	; (800616c <HAL_DMA_IRQHandler+0x1c4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d036      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a27      	ldr	r2, [pc, #156]	; (8006170 <HAL_DMA_IRQHandler+0x1c8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d031      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a25      	ldr	r2, [pc, #148]	; (8006174 <HAL_DMA_IRQHandler+0x1cc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d02c      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	; (8006178 <HAL_DMA_IRQHandler+0x1d0>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d027      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_DMA_IRQHandler+0x1d4>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d022      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a21      	ldr	r2, [pc, #132]	; (8006180 <HAL_DMA_IRQHandler+0x1d8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d01d      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_DMA_IRQHandler+0x1dc>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d018      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_DMA_IRQHandler+0x1e0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d013      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_DMA_IRQHandler+0x1e4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00e      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <HAL_DMA_IRQHandler+0x1e8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d009      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_DMA_IRQHandler+0x1ec>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_DMA_IRQHandler+0x194>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a18      	ldr	r2, [pc, #96]	; (8006198 <HAL_DMA_IRQHandler+0x1f0>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d12f      	bne.n	800619c <HAL_DMA_IRQHandler+0x1f4>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2301      	movne	r3, #1
 800614c:	2300      	moveq	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	e02e      	b.n	80061b0 <HAL_DMA_IRQHandler+0x208>
 8006152:	bf00      	nop
 8006154:	24000000 	.word	0x24000000
 8006158:	1b4e81b5 	.word	0x1b4e81b5
 800615c:	40020010 	.word	0x40020010
 8006160:	40020028 	.word	0x40020028
 8006164:	40020040 	.word	0x40020040
 8006168:	40020058 	.word	0x40020058
 800616c:	40020070 	.word	0x40020070
 8006170:	40020088 	.word	0x40020088
 8006174:	400200a0 	.word	0x400200a0
 8006178:	400200b8 	.word	0x400200b8
 800617c:	40020410 	.word	0x40020410
 8006180:	40020428 	.word	0x40020428
 8006184:	40020440 	.word	0x40020440
 8006188:	40020458 	.word	0x40020458
 800618c:	40020470 	.word	0x40020470
 8006190:	40020488 	.word	0x40020488
 8006194:	400204a0 	.word	0x400204a0
 8006198:	400204b8 	.word	0x400204b8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d015      	beq.n	80061e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0204 	bic.w	r2, r2, #4
 80061c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2208      	movs	r2, #8
 80061ce:	409a      	lsls	r2, r3
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	f043 0201 	orr.w	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	fa22 f303 	lsr.w	r3, r2, r3
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d06e      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a69      	ldr	r2, [pc, #420]	; (80063a0 <HAL_DMA_IRQHandler+0x3f8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d04a      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a67      	ldr	r2, [pc, #412]	; (80063a4 <HAL_DMA_IRQHandler+0x3fc>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d045      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a66      	ldr	r2, [pc, #408]	; (80063a8 <HAL_DMA_IRQHandler+0x400>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d040      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a64      	ldr	r2, [pc, #400]	; (80063ac <HAL_DMA_IRQHandler+0x404>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d03b      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a63      	ldr	r2, [pc, #396]	; (80063b0 <HAL_DMA_IRQHandler+0x408>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d036      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a61      	ldr	r2, [pc, #388]	; (80063b4 <HAL_DMA_IRQHandler+0x40c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a60      	ldr	r2, [pc, #384]	; (80063b8 <HAL_DMA_IRQHandler+0x410>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d02c      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5e      	ldr	r2, [pc, #376]	; (80063bc <HAL_DMA_IRQHandler+0x414>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d027      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5d      	ldr	r2, [pc, #372]	; (80063c0 <HAL_DMA_IRQHandler+0x418>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d022      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5b      	ldr	r2, [pc, #364]	; (80063c4 <HAL_DMA_IRQHandler+0x41c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01d      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5a      	ldr	r2, [pc, #360]	; (80063c8 <HAL_DMA_IRQHandler+0x420>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a58      	ldr	r2, [pc, #352]	; (80063cc <HAL_DMA_IRQHandler+0x424>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d013      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a57      	ldr	r2, [pc, #348]	; (80063d0 <HAL_DMA_IRQHandler+0x428>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00e      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a55      	ldr	r2, [pc, #340]	; (80063d4 <HAL_DMA_IRQHandler+0x42c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d009      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a54      	ldr	r2, [pc, #336]	; (80063d8 <HAL_DMA_IRQHandler+0x430>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d004      	beq.n	8006296 <HAL_DMA_IRQHandler+0x2ee>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a52      	ldr	r2, [pc, #328]	; (80063dc <HAL_DMA_IRQHandler+0x434>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d10a      	bne.n	80062ac <HAL_DMA_IRQHandler+0x304>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	e003      	b.n	80062b4 <HAL_DMA_IRQHandler+0x30c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2300      	movs	r3, #0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	f003 031f 	and.w	r3, r3, #31
 80062c0:	2201      	movs	r2, #1
 80062c2:	409a      	lsls	r2, r3
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062cc:	f043 0202 	orr.w	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2204      	movs	r2, #4
 80062de:	409a      	lsls	r2, r3
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 808f 	beq.w	8006408 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a2c      	ldr	r2, [pc, #176]	; (80063a0 <HAL_DMA_IRQHandler+0x3f8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d04a      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <HAL_DMA_IRQHandler+0x3fc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d045      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <HAL_DMA_IRQHandler+0x400>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d040      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <HAL_DMA_IRQHandler+0x404>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d03b      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <HAL_DMA_IRQHandler+0x408>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d036      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_DMA_IRQHandler+0x40c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d031      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <HAL_DMA_IRQHandler+0x410>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d02c      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a21      	ldr	r2, [pc, #132]	; (80063bc <HAL_DMA_IRQHandler+0x414>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d027      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_DMA_IRQHandler+0x418>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d022      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <HAL_DMA_IRQHandler+0x41c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d01d      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_DMA_IRQHandler+0x420>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d018      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_DMA_IRQHandler+0x424>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d013      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a1a      	ldr	r2, [pc, #104]	; (80063d0 <HAL_DMA_IRQHandler+0x428>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d00e      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_DMA_IRQHandler+0x42c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d009      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <HAL_DMA_IRQHandler+0x430>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d004      	beq.n	800638a <HAL_DMA_IRQHandler+0x3e2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a15      	ldr	r2, [pc, #84]	; (80063dc <HAL_DMA_IRQHandler+0x434>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d12a      	bne.n	80063e0 <HAL_DMA_IRQHandler+0x438>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2301      	movne	r3, #1
 800639a:	2300      	moveq	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	e023      	b.n	80063e8 <HAL_DMA_IRQHandler+0x440>
 80063a0:	40020010 	.word	0x40020010
 80063a4:	40020028 	.word	0x40020028
 80063a8:	40020040 	.word	0x40020040
 80063ac:	40020058 	.word	0x40020058
 80063b0:	40020070 	.word	0x40020070
 80063b4:	40020088 	.word	0x40020088
 80063b8:	400200a0 	.word	0x400200a0
 80063bc:	400200b8 	.word	0x400200b8
 80063c0:	40020410 	.word	0x40020410
 80063c4:	40020428 	.word	0x40020428
 80063c8:	40020440 	.word	0x40020440
 80063cc:	40020458 	.word	0x40020458
 80063d0:	40020470 	.word	0x40020470
 80063d4:	40020488 	.word	0x40020488
 80063d8:	400204a0 	.word	0x400204a0
 80063dc:	400204b8 	.word	0x400204b8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2300      	movs	r3, #0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2204      	movs	r2, #4
 80063f6:	409a      	lsls	r2, r3
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006400:	f043 0204 	orr.w	r2, r3, #4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2210      	movs	r2, #16
 8006412:	409a      	lsls	r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a6 	beq.w	800656a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a85      	ldr	r2, [pc, #532]	; (8006638 <HAL_DMA_IRQHandler+0x690>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d04a      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a83      	ldr	r2, [pc, #524]	; (800663c <HAL_DMA_IRQHandler+0x694>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d045      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a82      	ldr	r2, [pc, #520]	; (8006640 <HAL_DMA_IRQHandler+0x698>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d040      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a80      	ldr	r2, [pc, #512]	; (8006644 <HAL_DMA_IRQHandler+0x69c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d03b      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7f      	ldr	r2, [pc, #508]	; (8006648 <HAL_DMA_IRQHandler+0x6a0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d036      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7d      	ldr	r2, [pc, #500]	; (800664c <HAL_DMA_IRQHandler+0x6a4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d031      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a7c      	ldr	r2, [pc, #496]	; (8006650 <HAL_DMA_IRQHandler+0x6a8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d02c      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a7a      	ldr	r2, [pc, #488]	; (8006654 <HAL_DMA_IRQHandler+0x6ac>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a79      	ldr	r2, [pc, #484]	; (8006658 <HAL_DMA_IRQHandler+0x6b0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a77      	ldr	r2, [pc, #476]	; (800665c <HAL_DMA_IRQHandler+0x6b4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a76      	ldr	r2, [pc, #472]	; (8006660 <HAL_DMA_IRQHandler+0x6b8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a74      	ldr	r2, [pc, #464]	; (8006664 <HAL_DMA_IRQHandler+0x6bc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a73      	ldr	r2, [pc, #460]	; (8006668 <HAL_DMA_IRQHandler+0x6c0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a71      	ldr	r2, [pc, #452]	; (800666c <HAL_DMA_IRQHandler+0x6c4>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a70      	ldr	r2, [pc, #448]	; (8006670 <HAL_DMA_IRQHandler+0x6c8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_IRQHandler+0x516>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6e      	ldr	r2, [pc, #440]	; (8006674 <HAL_DMA_IRQHandler+0x6cc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d10a      	bne.n	80064d4 <HAL_DMA_IRQHandler+0x52c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e009      	b.n	80064e8 <HAL_DMA_IRQHandler+0x540>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bf14      	ite	ne
 80064e2:	2301      	movne	r3, #1
 80064e4:	2300      	moveq	r3, #0
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d03e      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2210      	movs	r2, #16
 80064f6:	409a      	lsls	r2, r3
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d108      	bne.n	800652a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d024      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	e01f      	b.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	4798      	blx	r3
 800653a:	e016      	b.n	800656a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	2b00      	cmp	r3, #0
 8006548:	d107      	bne.n	800655a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0208 	bic.w	r2, r2, #8
 8006558:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2220      	movs	r2, #32
 8006574:	409a      	lsls	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8110 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2c      	ldr	r2, [pc, #176]	; (8006638 <HAL_DMA_IRQHandler+0x690>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2b      	ldr	r2, [pc, #172]	; (800663c <HAL_DMA_IRQHandler+0x694>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a29      	ldr	r2, [pc, #164]	; (8006640 <HAL_DMA_IRQHandler+0x698>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a28      	ldr	r2, [pc, #160]	; (8006644 <HAL_DMA_IRQHandler+0x69c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a26      	ldr	r2, [pc, #152]	; (8006648 <HAL_DMA_IRQHandler+0x6a0>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a25      	ldr	r2, [pc, #148]	; (800664c <HAL_DMA_IRQHandler+0x6a4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a23      	ldr	r2, [pc, #140]	; (8006650 <HAL_DMA_IRQHandler+0x6a8>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a22      	ldr	r2, [pc, #136]	; (8006654 <HAL_DMA_IRQHandler+0x6ac>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <HAL_DMA_IRQHandler+0x6b0>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1f      	ldr	r2, [pc, #124]	; (800665c <HAL_DMA_IRQHandler+0x6b4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <HAL_DMA_IRQHandler+0x6b8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <HAL_DMA_IRQHandler+0x6bc>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_DMA_IRQHandler+0x6c0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a19      	ldr	r2, [pc, #100]	; (800666c <HAL_DMA_IRQHandler+0x6c4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <HAL_DMA_IRQHandler+0x6c8>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_DMA_IRQHandler+0x678>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a16      	ldr	r2, [pc, #88]	; (8006674 <HAL_DMA_IRQHandler+0x6cc>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d12b      	bne.n	8006678 <HAL_DMA_IRQHandler+0x6d0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0310 	and.w	r3, r3, #16
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e02a      	b.n	800668c <HAL_DMA_IRQHandler+0x6e4>
 8006636:	bf00      	nop
 8006638:	40020010 	.word	0x40020010
 800663c:	40020028 	.word	0x40020028
 8006640:	40020040 	.word	0x40020040
 8006644:	40020058 	.word	0x40020058
 8006648:	40020070 	.word	0x40020070
 800664c:	40020088 	.word	0x40020088
 8006650:	400200a0 	.word	0x400200a0
 8006654:	400200b8 	.word	0x400200b8
 8006658:	40020410 	.word	0x40020410
 800665c:	40020428 	.word	0x40020428
 8006660:	40020440 	.word	0x40020440
 8006664:	40020458 	.word	0x40020458
 8006668:	40020470 	.word	0x40020470
 800666c:	40020488 	.word	0x40020488
 8006670:	400204a0 	.word	0x400204a0
 8006674:	400204b8 	.word	0x400204b8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8087 	beq.w	80067a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	f003 031f 	and.w	r3, r3, #31
 800669a:	2220      	movs	r2, #32
 800669c:	409a      	lsls	r2, r3
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d139      	bne.n	8006722 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0216 	bic.w	r2, r2, #22
 80066bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	695a      	ldr	r2, [r3, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <HAL_DMA_IRQHandler+0x736>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0208 	bic.w	r2, r2, #8
 80066ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	f003 031f 	and.w	r3, r3, #31
 80066f6:	223f      	movs	r2, #63	; 0x3f
 80066f8:	409a      	lsls	r2, r3
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 834a 	beq.w	8006dac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
          }
          return;
 8006720:	e344      	b.n	8006dac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d018      	beq.n	8006762 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d108      	bne.n	8006750 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02c      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	4798      	blx	r3
 800674e:	e027      	b.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	4798      	blx	r3
 8006760:	e01e      	b.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10f      	bne.n	8006790 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0210 	bic.w	r2, r2, #16
 800677e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8306 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8088 	beq.w	80068c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2204      	movs	r2, #4
 80067bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a7a      	ldr	r2, [pc, #488]	; (80069b0 <HAL_DMA_IRQHandler+0xa08>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d04a      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a79      	ldr	r2, [pc, #484]	; (80069b4 <HAL_DMA_IRQHandler+0xa0c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d045      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a77      	ldr	r2, [pc, #476]	; (80069b8 <HAL_DMA_IRQHandler+0xa10>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d040      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a76      	ldr	r2, [pc, #472]	; (80069bc <HAL_DMA_IRQHandler+0xa14>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d03b      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a74      	ldr	r2, [pc, #464]	; (80069c0 <HAL_DMA_IRQHandler+0xa18>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d036      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a73      	ldr	r2, [pc, #460]	; (80069c4 <HAL_DMA_IRQHandler+0xa1c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d031      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a71      	ldr	r2, [pc, #452]	; (80069c8 <HAL_DMA_IRQHandler+0xa20>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02c      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a70      	ldr	r2, [pc, #448]	; (80069cc <HAL_DMA_IRQHandler+0xa24>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d027      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6e      	ldr	r2, [pc, #440]	; (80069d0 <HAL_DMA_IRQHandler+0xa28>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d022      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a6d      	ldr	r2, [pc, #436]	; (80069d4 <HAL_DMA_IRQHandler+0xa2c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d01d      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a6b      	ldr	r2, [pc, #428]	; (80069d8 <HAL_DMA_IRQHandler+0xa30>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a6a      	ldr	r2, [pc, #424]	; (80069dc <HAL_DMA_IRQHandler+0xa34>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a68      	ldr	r2, [pc, #416]	; (80069e0 <HAL_DMA_IRQHandler+0xa38>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d00e      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <HAL_DMA_IRQHandler+0xa3c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a65      	ldr	r2, [pc, #404]	; (80069e8 <HAL_DMA_IRQHandler+0xa40>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d004      	beq.n	8006860 <HAL_DMA_IRQHandler+0x8b8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a64      	ldr	r2, [pc, #400]	; (80069ec <HAL_DMA_IRQHandler+0xa44>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <HAL_DMA_IRQHandler+0x8ca>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
 8006870:	e007      	b.n	8006882 <HAL_DMA_IRQHandler+0x8da>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	429a      	cmp	r2, r3
 800688c:	d307      	bcc.n	800689e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f2      	bne.n	8006882 <HAL_DMA_IRQHandler+0x8da>
 800689c:	e000      	b.n	80068a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800689e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2203      	movs	r2, #3
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80068b6:	e003      	b.n	80068c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8272 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	e26c      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a43      	ldr	r2, [pc, #268]	; (80069f0 <HAL_DMA_IRQHandler+0xa48>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a42      	ldr	r2, [pc, #264]	; (80069f4 <HAL_DMA_IRQHandler+0xa4c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a40      	ldr	r2, [pc, #256]	; (80069f8 <HAL_DMA_IRQHandler+0xa50>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3f      	ldr	r2, [pc, #252]	; (80069fc <HAL_DMA_IRQHandler+0xa54>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a3d      	ldr	r2, [pc, #244]	; (8006a00 <HAL_DMA_IRQHandler+0xa58>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a3c      	ldr	r2, [pc, #240]	; (8006a04 <HAL_DMA_IRQHandler+0xa5c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a3a      	ldr	r2, [pc, #232]	; (8006a08 <HAL_DMA_IRQHandler+0xa60>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_DMA_IRQHandler+0x984>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a39      	ldr	r2, [pc, #228]	; (8006a0c <HAL_DMA_IRQHandler+0xa64>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <HAL_DMA_IRQHandler+0x988>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <HAL_DMA_IRQHandler+0x98a>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 823f 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2204      	movs	r2, #4
 800694a:	409a      	lsls	r2, r3
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80cd 	beq.w	8006af0 <HAL_DMA_IRQHandler+0xb48>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80c7 	beq.w	8006af0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	2204      	movs	r2, #4
 800696c:	409a      	lsls	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d049      	beq.n	8006a10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8210 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006998:	e20a      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8206 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069ac:	e200      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
 80069ae:	bf00      	nop
 80069b0:	40020010 	.word	0x40020010
 80069b4:	40020028 	.word	0x40020028
 80069b8:	40020040 	.word	0x40020040
 80069bc:	40020058 	.word	0x40020058
 80069c0:	40020070 	.word	0x40020070
 80069c4:	40020088 	.word	0x40020088
 80069c8:	400200a0 	.word	0x400200a0
 80069cc:	400200b8 	.word	0x400200b8
 80069d0:	40020410 	.word	0x40020410
 80069d4:	40020428 	.word	0x40020428
 80069d8:	40020440 	.word	0x40020440
 80069dc:	40020458 	.word	0x40020458
 80069e0:	40020470 	.word	0x40020470
 80069e4:	40020488 	.word	0x40020488
 80069e8:	400204a0 	.word	0x400204a0
 80069ec:	400204b8 	.word	0x400204b8
 80069f0:	58025408 	.word	0x58025408
 80069f4:	5802541c 	.word	0x5802541c
 80069f8:	58025430 	.word	0x58025430
 80069fc:	58025444 	.word	0x58025444
 8006a00:	58025458 	.word	0x58025458
 8006a04:	5802546c 	.word	0x5802546c
 8006a08:	58025480 	.word	0x58025480
 8006a0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d160      	bne.n	8006adc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a7f      	ldr	r2, [pc, #508]	; (8006c1c <HAL_DMA_IRQHandler+0xc74>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a7d      	ldr	r2, [pc, #500]	; (8006c20 <HAL_DMA_IRQHandler+0xc78>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a7c      	ldr	r2, [pc, #496]	; (8006c24 <HAL_DMA_IRQHandler+0xc7c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a7a      	ldr	r2, [pc, #488]	; (8006c28 <HAL_DMA_IRQHandler+0xc80>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a79      	ldr	r2, [pc, #484]	; (8006c2c <HAL_DMA_IRQHandler+0xc84>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a77      	ldr	r2, [pc, #476]	; (8006c30 <HAL_DMA_IRQHandler+0xc88>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a76      	ldr	r2, [pc, #472]	; (8006c34 <HAL_DMA_IRQHandler+0xc8c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a74      	ldr	r2, [pc, #464]	; (8006c38 <HAL_DMA_IRQHandler+0xc90>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a73      	ldr	r2, [pc, #460]	; (8006c3c <HAL_DMA_IRQHandler+0xc94>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_DMA_IRQHandler+0xc98>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a70      	ldr	r2, [pc, #448]	; (8006c44 <HAL_DMA_IRQHandler+0xc9c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6e      	ldr	r2, [pc, #440]	; (8006c48 <HAL_DMA_IRQHandler+0xca0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_DMA_IRQHandler+0xca4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_DMA_IRQHandler+0xca8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_DMA_IRQHandler+0xcac>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0xb12>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <HAL_DMA_IRQHandler+0xcb0>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d108      	bne.n	8006acc <HAL_DMA_IRQHandler+0xb24>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0208 	bic.w	r2, r2, #8
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e007      	b.n	8006adc <HAL_DMA_IRQHandler+0xb34>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0204 	bic.w	r2, r2, #4
 8006ada:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 8165 	beq.w	8006db0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aee:	e15f      	b.n	8006db0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	f003 031f 	and.w	r3, r3, #31
 8006af8:	2202      	movs	r2, #2
 8006afa:	409a      	lsls	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80c5 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xce8>
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 80bf 	beq.w	8006c90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	409a      	lsls	r2, r3
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d018      	beq.n	8006b5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 813a 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b48:	e134      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 8130 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b5c:	e12a      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8089 	bne.w	8006c7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2b      	ldr	r2, [pc, #172]	; (8006c1c <HAL_DMA_IRQHandler+0xc74>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <HAL_DMA_IRQHandler+0xc78>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d045      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a28      	ldr	r2, [pc, #160]	; (8006c24 <HAL_DMA_IRQHandler+0xc7c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <HAL_DMA_IRQHandler+0xc80>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d03b      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <HAL_DMA_IRQHandler+0xc84>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d036      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a23      	ldr	r2, [pc, #140]	; (8006c30 <HAL_DMA_IRQHandler+0xc88>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d031      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <HAL_DMA_IRQHandler+0xc8c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d02c      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <HAL_DMA_IRQHandler+0xc90>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d027      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <HAL_DMA_IRQHandler+0xc94>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d022      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <HAL_DMA_IRQHandler+0xc98>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d01d      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a1c      	ldr	r2, [pc, #112]	; (8006c44 <HAL_DMA_IRQHandler+0xc9c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d018      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a1a      	ldr	r2, [pc, #104]	; (8006c48 <HAL_DMA_IRQHandler+0xca0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d013      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_DMA_IRQHandler+0xca4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_DMA_IRQHandler+0xca8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d009      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <HAL_DMA_IRQHandler+0xcac>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0xc62>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <HAL_DMA_IRQHandler+0xcb0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d128      	bne.n	8006c5c <HAL_DMA_IRQHandler+0xcb4>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0214 	bic.w	r2, r2, #20
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e027      	b.n	8006c6c <HAL_DMA_IRQHandler+0xcc4>
 8006c1c:	40020010 	.word	0x40020010
 8006c20:	40020028 	.word	0x40020028
 8006c24:	40020040 	.word	0x40020040
 8006c28:	40020058 	.word	0x40020058
 8006c2c:	40020070 	.word	0x40020070
 8006c30:	40020088 	.word	0x40020088
 8006c34:	400200a0 	.word	0x400200a0
 8006c38:	400200b8 	.word	0x400200b8
 8006c3c:	40020410 	.word	0x40020410
 8006c40:	40020428 	.word	0x40020428
 8006c44:	40020440 	.word	0x40020440
 8006c48:	40020458 	.word	0x40020458
 8006c4c:	40020470 	.word	0x40020470
 8006c50:	40020488 	.word	0x40020488
 8006c54:	400204a0 	.word	0x400204a0
 8006c58:	400204b8 	.word	0x400204b8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 020a 	bic.w	r2, r2, #10
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8097 	beq.w	8006db4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c8e:	e091      	b.n	8006db4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2208      	movs	r2, #8
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8088 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8082 	beq.w	8006db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <HAL_DMA_IRQHandler+0xe14>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d04a      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a3f      	ldr	r2, [pc, #252]	; (8006dc0 <HAL_DMA_IRQHandler+0xe18>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d045      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3e      	ldr	r2, [pc, #248]	; (8006dc4 <HAL_DMA_IRQHandler+0xe1c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d040      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a3c      	ldr	r2, [pc, #240]	; (8006dc8 <HAL_DMA_IRQHandler+0xe20>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d03b      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a3b      	ldr	r2, [pc, #236]	; (8006dcc <HAL_DMA_IRQHandler+0xe24>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d036      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a39      	ldr	r2, [pc, #228]	; (8006dd0 <HAL_DMA_IRQHandler+0xe28>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d031      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a38      	ldr	r2, [pc, #224]	; (8006dd4 <HAL_DMA_IRQHandler+0xe2c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d02c      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a36      	ldr	r2, [pc, #216]	; (8006dd8 <HAL_DMA_IRQHandler+0xe30>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d027      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a35      	ldr	r2, [pc, #212]	; (8006ddc <HAL_DMA_IRQHandler+0xe34>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a33      	ldr	r2, [pc, #204]	; (8006de0 <HAL_DMA_IRQHandler+0xe38>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01d      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a32      	ldr	r2, [pc, #200]	; (8006de4 <HAL_DMA_IRQHandler+0xe3c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a30      	ldr	r2, [pc, #192]	; (8006de8 <HAL_DMA_IRQHandler+0xe40>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2f      	ldr	r2, [pc, #188]	; (8006dec <HAL_DMA_IRQHandler+0xe44>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a2d      	ldr	r2, [pc, #180]	; (8006df0 <HAL_DMA_IRQHandler+0xe48>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a2c      	ldr	r2, [pc, #176]	; (8006df4 <HAL_DMA_IRQHandler+0xe4c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_DMA_IRQHandler+0xdaa>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2a      	ldr	r2, [pc, #168]	; (8006df8 <HAL_DMA_IRQHandler+0xe50>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d108      	bne.n	8006d64 <HAL_DMA_IRQHandler+0xdbc>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 021c 	bic.w	r2, r2, #28
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e007      	b.n	8006d74 <HAL_DMA_IRQHandler+0xdcc>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 020e 	bic.w	r2, r2, #14
 8006d72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
 8006daa:	e004      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006dac:	bf00      	nop
 8006dae:	e002      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006db6:	3728      	adds	r7, #40	; 0x28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40020010 	.word	0x40020010
 8006dc0:	40020028 	.word	0x40020028
 8006dc4:	40020040 	.word	0x40020040
 8006dc8:	40020058 	.word	0x40020058
 8006dcc:	40020070 	.word	0x40020070
 8006dd0:	40020088 	.word	0x40020088
 8006dd4:	400200a0 	.word	0x400200a0
 8006dd8:	400200b8 	.word	0x400200b8
 8006ddc:	40020410 	.word	0x40020410
 8006de0:	40020428 	.word	0x40020428
 8006de4:	40020440 	.word	0x40020440
 8006de8:	40020458 	.word	0x40020458
 8006dec:	40020470 	.word	0x40020470
 8006df0:	40020488 	.word	0x40020488
 8006df4:	400204a0 	.word	0x400204a0
 8006df8:	400204b8 	.word	0x400204b8

08006dfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7f      	ldr	r2, [pc, #508]	; (8007018 <DMA_SetConfig+0x21c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d072      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7d      	ldr	r2, [pc, #500]	; (800701c <DMA_SetConfig+0x220>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d06d      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7c      	ldr	r2, [pc, #496]	; (8007020 <DMA_SetConfig+0x224>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d068      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <DMA_SetConfig+0x228>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d063      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a79      	ldr	r2, [pc, #484]	; (8007028 <DMA_SetConfig+0x22c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d05e      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a77      	ldr	r2, [pc, #476]	; (800702c <DMA_SetConfig+0x230>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d059      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a76      	ldr	r2, [pc, #472]	; (8007030 <DMA_SetConfig+0x234>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d054      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a74      	ldr	r2, [pc, #464]	; (8007034 <DMA_SetConfig+0x238>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d04f      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a73      	ldr	r2, [pc, #460]	; (8007038 <DMA_SetConfig+0x23c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d04a      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a71      	ldr	r2, [pc, #452]	; (800703c <DMA_SetConfig+0x240>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d045      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a70      	ldr	r2, [pc, #448]	; (8007040 <DMA_SetConfig+0x244>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d040      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6e      	ldr	r2, [pc, #440]	; (8007044 <DMA_SetConfig+0x248>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d03b      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6d      	ldr	r2, [pc, #436]	; (8007048 <DMA_SetConfig+0x24c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d036      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6b      	ldr	r2, [pc, #428]	; (800704c <DMA_SetConfig+0x250>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d031      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a6a      	ldr	r2, [pc, #424]	; (8007050 <DMA_SetConfig+0x254>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d02c      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a68      	ldr	r2, [pc, #416]	; (8007054 <DMA_SetConfig+0x258>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d027      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a67      	ldr	r2, [pc, #412]	; (8007058 <DMA_SetConfig+0x25c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d022      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a65      	ldr	r2, [pc, #404]	; (800705c <DMA_SetConfig+0x260>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d01d      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a64      	ldr	r2, [pc, #400]	; (8007060 <DMA_SetConfig+0x264>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d018      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a62      	ldr	r2, [pc, #392]	; (8007064 <DMA_SetConfig+0x268>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d013      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a61      	ldr	r2, [pc, #388]	; (8007068 <DMA_SetConfig+0x26c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d00e      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a5f      	ldr	r2, [pc, #380]	; (800706c <DMA_SetConfig+0x270>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d009      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a5e      	ldr	r2, [pc, #376]	; (8007070 <DMA_SetConfig+0x274>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d004      	beq.n	8006f06 <DMA_SetConfig+0x10a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <DMA_SetConfig+0x278>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <DMA_SetConfig+0x10e>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <DMA_SetConfig+0x110>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00d      	beq.n	8006f2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a39      	ldr	r2, [pc, #228]	; (8007018 <DMA_SetConfig+0x21c>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d04a      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a38      	ldr	r2, [pc, #224]	; (800701c <DMA_SetConfig+0x220>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d045      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a36      	ldr	r2, [pc, #216]	; (8007020 <DMA_SetConfig+0x224>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d040      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a35      	ldr	r2, [pc, #212]	; (8007024 <DMA_SetConfig+0x228>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d03b      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a33      	ldr	r2, [pc, #204]	; (8007028 <DMA_SetConfig+0x22c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d036      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a32      	ldr	r2, [pc, #200]	; (800702c <DMA_SetConfig+0x230>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d031      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a30      	ldr	r2, [pc, #192]	; (8007030 <DMA_SetConfig+0x234>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d02c      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <DMA_SetConfig+0x238>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d027      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a2d      	ldr	r2, [pc, #180]	; (8007038 <DMA_SetConfig+0x23c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d022      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2c      	ldr	r2, [pc, #176]	; (800703c <DMA_SetConfig+0x240>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d01d      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <DMA_SetConfig+0x244>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d018      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a29      	ldr	r2, [pc, #164]	; (8007044 <DMA_SetConfig+0x248>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d013      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a27      	ldr	r2, [pc, #156]	; (8007048 <DMA_SetConfig+0x24c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00e      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a26      	ldr	r2, [pc, #152]	; (800704c <DMA_SetConfig+0x250>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d009      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a24      	ldr	r2, [pc, #144]	; (8007050 <DMA_SetConfig+0x254>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <DMA_SetConfig+0x1d0>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <DMA_SetConfig+0x258>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d101      	bne.n	8006fd0 <DMA_SetConfig+0x1d4>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <DMA_SetConfig+0x1d6>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d059      	beq.n	800708a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	223f      	movs	r2, #63	; 0x3f
 8006fe0:	409a      	lsls	r2, r3
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ff4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	2b40      	cmp	r3, #64	; 0x40
 8007004:	d138      	bne.n	8007078 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007016:	e086      	b.n	8007126 <DMA_SetConfig+0x32a>
 8007018:	40020010 	.word	0x40020010
 800701c:	40020028 	.word	0x40020028
 8007020:	40020040 	.word	0x40020040
 8007024:	40020058 	.word	0x40020058
 8007028:	40020070 	.word	0x40020070
 800702c:	40020088 	.word	0x40020088
 8007030:	400200a0 	.word	0x400200a0
 8007034:	400200b8 	.word	0x400200b8
 8007038:	40020410 	.word	0x40020410
 800703c:	40020428 	.word	0x40020428
 8007040:	40020440 	.word	0x40020440
 8007044:	40020458 	.word	0x40020458
 8007048:	40020470 	.word	0x40020470
 800704c:	40020488 	.word	0x40020488
 8007050:	400204a0 	.word	0x400204a0
 8007054:	400204b8 	.word	0x400204b8
 8007058:	58025408 	.word	0x58025408
 800705c:	5802541c 	.word	0x5802541c
 8007060:	58025430 	.word	0x58025430
 8007064:	58025444 	.word	0x58025444
 8007068:	58025458 	.word	0x58025458
 800706c:	5802546c 	.word	0x5802546c
 8007070:	58025480 	.word	0x58025480
 8007074:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	60da      	str	r2, [r3, #12]
}
 8007088:	e04d      	b.n	8007126 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a29      	ldr	r2, [pc, #164]	; (8007134 <DMA_SetConfig+0x338>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d022      	beq.n	80070da <DMA_SetConfig+0x2de>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a27      	ldr	r2, [pc, #156]	; (8007138 <DMA_SetConfig+0x33c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01d      	beq.n	80070da <DMA_SetConfig+0x2de>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a26      	ldr	r2, [pc, #152]	; (800713c <DMA_SetConfig+0x340>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d018      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a24      	ldr	r2, [pc, #144]	; (8007140 <DMA_SetConfig+0x344>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a23      	ldr	r2, [pc, #140]	; (8007144 <DMA_SetConfig+0x348>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00e      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a21      	ldr	r2, [pc, #132]	; (8007148 <DMA_SetConfig+0x34c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d009      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a20      	ldr	r2, [pc, #128]	; (800714c <DMA_SetConfig+0x350>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <DMA_SetConfig+0x2de>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1e      	ldr	r2, [pc, #120]	; (8007150 <DMA_SetConfig+0x354>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d101      	bne.n	80070de <DMA_SetConfig+0x2e2>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <DMA_SetConfig+0x2e4>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2201      	movs	r2, #1
 80070ee:	409a      	lsls	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d108      	bne.n	8007116 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	60da      	str	r2, [r3, #12]
}
 8007114:	e007      	b.n	8007126 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	60da      	str	r2, [r3, #12]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	58025408 	.word	0x58025408
 8007138:	5802541c 	.word	0x5802541c
 800713c:	58025430 	.word	0x58025430
 8007140:	58025444 	.word	0x58025444
 8007144:	58025458 	.word	0x58025458
 8007148:	5802546c 	.word	0x5802546c
 800714c:	58025480 	.word	0x58025480
 8007150:	58025494 	.word	0x58025494

08007154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a42      	ldr	r2, [pc, #264]	; (800726c <DMA_CalcBaseAndBitshift+0x118>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d04a      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a41      	ldr	r2, [pc, #260]	; (8007270 <DMA_CalcBaseAndBitshift+0x11c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d045      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a3f      	ldr	r2, [pc, #252]	; (8007274 <DMA_CalcBaseAndBitshift+0x120>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d040      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a3e      	ldr	r2, [pc, #248]	; (8007278 <DMA_CalcBaseAndBitshift+0x124>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d03b      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a3c      	ldr	r2, [pc, #240]	; (800727c <DMA_CalcBaseAndBitshift+0x128>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d036      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <DMA_CalcBaseAndBitshift+0x12c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d031      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a39      	ldr	r2, [pc, #228]	; (8007284 <DMA_CalcBaseAndBitshift+0x130>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d02c      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a38      	ldr	r2, [pc, #224]	; (8007288 <DMA_CalcBaseAndBitshift+0x134>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d027      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a36      	ldr	r2, [pc, #216]	; (800728c <DMA_CalcBaseAndBitshift+0x138>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d022      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a35      	ldr	r2, [pc, #212]	; (8007290 <DMA_CalcBaseAndBitshift+0x13c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d01d      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a33      	ldr	r2, [pc, #204]	; (8007294 <DMA_CalcBaseAndBitshift+0x140>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d018      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a32      	ldr	r2, [pc, #200]	; (8007298 <DMA_CalcBaseAndBitshift+0x144>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d013      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a30      	ldr	r2, [pc, #192]	; (800729c <DMA_CalcBaseAndBitshift+0x148>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00e      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a2f      	ldr	r2, [pc, #188]	; (80072a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d009      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a2d      	ldr	r2, [pc, #180]	; (80072a4 <DMA_CalcBaseAndBitshift+0x150>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d004      	beq.n	80071fc <DMA_CalcBaseAndBitshift+0xa8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a2c      	ldr	r2, [pc, #176]	; (80072a8 <DMA_CalcBaseAndBitshift+0x154>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d101      	bne.n	8007200 <DMA_CalcBaseAndBitshift+0xac>
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <DMA_CalcBaseAndBitshift+0xae>
 8007200:	2300      	movs	r3, #0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d024      	beq.n	8007250 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	3b10      	subs	r3, #16
 800720e:	4a27      	ldr	r2, [pc, #156]	; (80072ac <DMA_CalcBaseAndBitshift+0x158>)
 8007210:	fba2 2303 	umull	r2, r3, r2, r3
 8007214:	091b      	lsrs	r3, r3, #4
 8007216:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007220:	5cd3      	ldrb	r3, [r2, r3]
 8007222:	461a      	mov	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d908      	bls.n	8007240 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007236:	4013      	ands	r3, r2
 8007238:	1d1a      	adds	r2, r3, #4
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	659a      	str	r2, [r3, #88]	; 0x58
 800723e:	e00d      	b.n	800725c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <DMA_CalcBaseAndBitshift+0x160>)
 8007248:	4013      	ands	r3, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6593      	str	r3, [r2, #88]	; 0x58
 800724e:	e005      	b.n	800725c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	40020010 	.word	0x40020010
 8007270:	40020028 	.word	0x40020028
 8007274:	40020040 	.word	0x40020040
 8007278:	40020058 	.word	0x40020058
 800727c:	40020070 	.word	0x40020070
 8007280:	40020088 	.word	0x40020088
 8007284:	400200a0 	.word	0x400200a0
 8007288:	400200b8 	.word	0x400200b8
 800728c:	40020410 	.word	0x40020410
 8007290:	40020428 	.word	0x40020428
 8007294:	40020440 	.word	0x40020440
 8007298:	40020458 	.word	0x40020458
 800729c:	40020470 	.word	0x40020470
 80072a0:	40020488 	.word	0x40020488
 80072a4:	400204a0 	.word	0x400204a0
 80072a8:	400204b8 	.word	0x400204b8
 80072ac:	aaaaaaab 	.word	0xaaaaaaab
 80072b0:	0801ac20 	.word	0x0801ac20
 80072b4:	fffffc00 	.word	0xfffffc00

080072b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d120      	bne.n	800730e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d858      	bhi.n	8007386 <DMA_CheckFifoParam+0xce>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <DMA_CheckFifoParam+0x24>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072ed 	.word	0x080072ed
 80072e0:	080072ff 	.word	0x080072ff
 80072e4:	080072ed 	.word	0x080072ed
 80072e8:	08007387 	.word	0x08007387
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d048      	beq.n	800738a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072fc:	e045      	b.n	800738a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007306:	d142      	bne.n	800738e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800730c:	e03f      	b.n	800738e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007316:	d123      	bne.n	8007360 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	2b03      	cmp	r3, #3
 800731e:	d838      	bhi.n	8007392 <DMA_CheckFifoParam+0xda>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <DMA_CheckFifoParam+0x70>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	08007339 	.word	0x08007339
 800732c:	0800733f 	.word	0x0800733f
 8007330:	08007339 	.word	0x08007339
 8007334:	08007351 	.word	0x08007351
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
        break;
 800733c:	e030      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d025      	beq.n	8007396 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800734e:	e022      	b.n	8007396 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007358:	d11f      	bne.n	800739a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800735e:	e01c      	b.n	800739a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007364:	2b02      	cmp	r3, #2
 8007366:	d902      	bls.n	800736e <DMA_CheckFifoParam+0xb6>
 8007368:	2b03      	cmp	r3, #3
 800736a:	d003      	beq.n	8007374 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800736c:	e018      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
        break;
 8007372:	e015      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00e      	beq.n	800739e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
    break;
 8007384:	e00b      	b.n	800739e <DMA_CheckFifoParam+0xe6>
        break;
 8007386:	bf00      	nop
 8007388:	e00a      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800738a:	bf00      	nop
 800738c:	e008      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800738e:	bf00      	nop
 8007390:	e006      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007392:	bf00      	nop
 8007394:	e004      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 8007396:	bf00      	nop
 8007398:	e002      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
        break;
 800739a:	bf00      	nop
 800739c:	e000      	b.n	80073a0 <DMA_CheckFifoParam+0xe8>
    break;
 800739e:	bf00      	nop
    }
  }

  return status;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a38      	ldr	r2, [pc, #224]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d022      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a36      	ldr	r2, [pc, #216]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01d      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a35      	ldr	r2, [pc, #212]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d018      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a33      	ldr	r2, [pc, #204]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a32      	ldr	r2, [pc, #200]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00e      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a30      	ldr	r2, [pc, #192]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d009      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a2f      	ldr	r2, [pc, #188]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a2d      	ldr	r2, [pc, #180]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d101      	bne.n	8007412 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800740e:	2301      	movs	r3, #1
 8007410:	e000      	b.n	8007414 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007412:	2300      	movs	r3, #0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	b2db      	uxtb	r3, r3
 800741e:	3b08      	subs	r3, #8
 8007420:	4a28      	ldr	r2, [pc, #160]	; (80074c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007422:	fba2 2303 	umull	r2, r3, r2, r3
 8007426:	091b      	lsrs	r3, r3, #4
 8007428:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a24      	ldr	r2, [pc, #144]	; (80074cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800743c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2201      	movs	r2, #1
 8007446:	409a      	lsls	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800744c:	e024      	b.n	8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	3b10      	subs	r3, #16
 8007456:	4a1e      	ldr	r2, [pc, #120]	; (80074d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	091b      	lsrs	r3, r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	4a1c      	ldr	r2, [pc, #112]	; (80074d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d806      	bhi.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d902      	bls.n	8007476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3308      	adds	r3, #8
 8007474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a16      	ldr	r2, [pc, #88]	; (80074e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007488:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 031f 	and.w	r3, r3, #31
 8007490:	2201      	movs	r2, #1
 8007492:	409a      	lsls	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007498:	bf00      	nop
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	58025408 	.word	0x58025408
 80074a8:	5802541c 	.word	0x5802541c
 80074ac:	58025430 	.word	0x58025430
 80074b0:	58025444 	.word	0x58025444
 80074b4:	58025458 	.word	0x58025458
 80074b8:	5802546c 	.word	0x5802546c
 80074bc:	58025480 	.word	0x58025480
 80074c0:	58025494 	.word	0x58025494
 80074c4:	cccccccd 	.word	0xcccccccd
 80074c8:	16009600 	.word	0x16009600
 80074cc:	58025880 	.word	0x58025880
 80074d0:	aaaaaaab 	.word	0xaaaaaaab
 80074d4:	400204b8 	.word	0x400204b8
 80074d8:	4002040f 	.word	0x4002040f
 80074dc:	10008200 	.word	0x10008200
 80074e0:	40020880 	.word	0x40020880

080074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d04a      	beq.n	8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d847      	bhi.n	8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a25      	ldr	r2, [pc, #148]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d022      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a24      	ldr	r2, [pc, #144]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d01d      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d018      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00e      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d009      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d101      	bne.n	8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007554:	2300      	movs	r3, #0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4b17      	ldr	r3, [pc, #92]	; (80075bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800756c:	671a      	str	r2, [r3, #112]	; 0x70
 800756e:	e009      	b.n	8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	461a      	mov	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a11      	ldr	r2, [pc, #68]	; (80075c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007582:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	2201      	movs	r2, #1
 800758a:	409a      	lsls	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	58025408 	.word	0x58025408
 80075a0:	5802541c 	.word	0x5802541c
 80075a4:	58025430 	.word	0x58025430
 80075a8:	58025444 	.word	0x58025444
 80075ac:	58025458 	.word	0x58025458
 80075b0:	5802546c 	.word	0x5802546c
 80075b4:	58025480 	.word	0x58025480
 80075b8:	58025494 	.word	0x58025494
 80075bc:	1600963f 	.word	0x1600963f
 80075c0:	58025940 	.word	0x58025940
 80075c4:	1000823f 	.word	0x1000823f
 80075c8:	40020940 	.word	0x40020940

080075cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e0cf      	b.n	800777e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2223      	movs	r2, #35	; 0x23
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f7f9 fab9 	bl	8000b68 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075f6:	4b64      	ldr	r3, [pc, #400]	; (8007788 <HAL_ETH_Init+0x1bc>)
 80075f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075fc:	4a62      	ldr	r2, [pc, #392]	; (8007788 <HAL_ETH_Init+0x1bc>)
 80075fe:	f043 0302 	orr.w	r3, r3, #2
 8007602:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007606:	4b60      	ldr	r3, [pc, #384]	; (8007788 <HAL_ETH_Init+0x1bc>)
 8007608:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	7a1b      	ldrb	r3, [r3, #8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800761c:	2000      	movs	r0, #0
 800761e:	f7fb fcf1 	bl	8003004 <HAL_SYSCFG_ETHInterfaceSelect>
 8007622:	e003      	b.n	800762c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007624:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007628:	f7fb fcec 	bl	8003004 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800762c:	4b57      	ldr	r3, [pc, #348]	; (800778c <HAL_ETH_Init+0x1c0>)
 800762e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6812      	ldr	r2, [r2, #0]
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007646:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007648:	f7fb fcac 	bl	8002fa4 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800764e:	e011      	b.n	8007674 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007650:	f7fb fca8 	bl	8002fa4 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800765e:	d909      	bls.n	8007674 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	22e0      	movs	r2, #224	; 0xe0
 800766c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e084      	b.n	800777e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e4      	bne.n	8007650 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f886 	bl	8007798 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800768c:	f002 fcc4 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 8007690:	4603      	mov	r3, r0
 8007692:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <HAL_ETH_Init+0x1c4>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	0c9a      	lsrs	r2, r3, #18
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3a01      	subs	r2, #1
 80076a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fa71 	bl	8007b8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80076b6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80076c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	22e0      	movs	r2, #224	; 0xe0
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e049      	b.n	800777e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80076f6:	4b27      	ldr	r3, [pc, #156]	; (8007794 <HAL_ETH_Init+0x1c8>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	6952      	ldr	r2, [r2, #20]
 80076fe:	0051      	lsls	r1, r2, #1
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6812      	ldr	r2, [r2, #0]
 8007704:	430b      	orrs	r3, r1
 8007706:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800770a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fad9 	bl	8007cc6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb1f 	bl	8007d58 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	3305      	adds	r3, #5
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	3304      	adds	r3, #4
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4619      	mov	r1, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	3303      	adds	r3, #3
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	061a      	lsls	r2, r3, #24
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	3302      	adds	r3, #2
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	3301      	adds	r3, #1
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007758:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007766:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2210      	movs	r2, #16
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
 800778c:	58000400 	.word	0x58000400
 8007790:	431bde83 	.word	0x431bde83
 8007794:	ffff8001 	.word	0xffff8001

08007798 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80077b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80077b2:	f002 fc31 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 80077b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d908      	bls.n	80077d2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d804      	bhi.n	80077d2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e027      	b.n	8007822 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d908      	bls.n	80077ec <HAL_ETH_SetMDIOClockRange+0x54>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	4a17      	ldr	r2, [pc, #92]	; (800783c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d204      	bcs.n	80077ec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e01a      	b.n	8007822 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	4a13      	ldr	r2, [pc, #76]	; (800783c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d303      	bcc.n	80077fc <HAL_ETH_SetMDIOClockRange+0x64>
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4a12      	ldr	r2, [pc, #72]	; (8007840 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d911      	bls.n	8007820 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	4a10      	ldr	r2, [pc, #64]	; (8007840 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d908      	bls.n	8007816 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4a0f      	ldr	r2, [pc, #60]	; (8007844 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d804      	bhi.n	8007816 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	e005      	b.n	8007822 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	e000      	b.n	8007822 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007820:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	01312cff 	.word	0x01312cff
 8007838:	02160ebf 	.word	0x02160ebf
 800783c:	03938700 	.word	0x03938700
 8007840:	05f5e0ff 	.word	0x05f5e0ff
 8007844:	08f0d17f 	.word	0x08f0d17f

08007848 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800785a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	791b      	ldrb	r3, [r3, #4]
 8007860:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	7b1b      	ldrb	r3, [r3, #12]
 8007868:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800786a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	7b5b      	ldrb	r3, [r3, #13]
 8007870:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	7b9b      	ldrb	r3, [r3, #14]
 8007878:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800787a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	7bdb      	ldrb	r3, [r3, #15]
 8007880:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007882:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	2a00      	cmp	r2, #0
 800788a:	d102      	bne.n	8007892 <ETH_SetMACConfig+0x4a>
 800788c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007890:	e000      	b.n	8007894 <ETH_SetMACConfig+0x4c>
 8007892:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007894:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	7c52      	ldrb	r2, [r2, #17]
 800789a:	2a00      	cmp	r2, #0
 800789c:	d102      	bne.n	80078a4 <ETH_SetMACConfig+0x5c>
 800789e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80078a2:	e000      	b.n	80078a6 <ETH_SetMACConfig+0x5e>
 80078a4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80078a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	7c9b      	ldrb	r3, [r3, #18]
 80078ac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80078ae:	431a      	orrs	r2, r3
               macconf->Speed |
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80078b4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80078ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	7f1b      	ldrb	r3, [r3, #28]
 80078c0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80078c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	7f5b      	ldrb	r3, [r3, #29]
 80078c8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80078ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	7f92      	ldrb	r2, [r2, #30]
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	d102      	bne.n	80078da <ETH_SetMACConfig+0x92>
 80078d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078d8:	e000      	b.n	80078dc <ETH_SetMACConfig+0x94>
 80078da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80078dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	7fdb      	ldrb	r3, [r3, #31]
 80078e2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80078e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d102      	bne.n	80078f6 <ETH_SetMACConfig+0xae>
 80078f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078f4:	e000      	b.n	80078f8 <ETH_SetMACConfig+0xb0>
 80078f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80078f8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80078fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007906:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007908:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b56      	ldr	r3, [pc, #344]	; (8007a74 <ETH_SetMACConfig+0x22c>)
 800791a:	4013      	ands	r3, r2
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	68f9      	ldr	r1, [r7, #12]
 8007922:	430b      	orrs	r3, r1
 8007924:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007932:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007934:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800793c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800793e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007946:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007950:	2a00      	cmp	r2, #0
 8007952:	d102      	bne.n	800795a <ETH_SetMACConfig+0x112>
 8007954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007958:	e000      	b.n	800795c <ETH_SetMACConfig+0x114>
 800795a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800795c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007962:	4313      	orrs	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b42      	ldr	r3, [pc, #264]	; (8007a78 <ETH_SetMACConfig+0x230>)
 800796e:	4013      	ands	r3, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	430b      	orrs	r3, r1
 8007978:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007980:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007986:	4313      	orrs	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <ETH_SetMACConfig+0x234>)
 8007992:	4013      	ands	r3, r2
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	6812      	ldr	r2, [r2, #0]
 8007998:	68f9      	ldr	r1, [r7, #12]
 800799a:	430b      	orrs	r3, r1
 800799c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80079a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80079aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	d101      	bne.n	80079ba <ETH_SetMACConfig+0x172>
 80079b6:	2280      	movs	r2, #128	; 0x80
 80079b8:	e000      	b.n	80079bc <ETH_SetMACConfig+0x174>
 80079ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80079bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079ce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80079d2:	4013      	ands	r3, r2
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	68f9      	ldr	r1, [r7, #12]
 80079da:	430b      	orrs	r3, r1
 80079dc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80079e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80079ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fa:	f023 0103 	bic.w	r1, r3, #3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007a12:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007a2e:	2a00      	cmp	r2, #0
 8007a30:	d101      	bne.n	8007a36 <ETH_SetMACConfig+0x1ee>
 8007a32:	2240      	movs	r2, #64	; 0x40
 8007a34:	e000      	b.n	8007a38 <ETH_SetMACConfig+0x1f0>
 8007a36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007a38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007a40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007a4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007a58:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007a68:	bf00      	nop
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	00048083 	.word	0x00048083
 8007a78:	c0f88000 	.word	0xc0f88000
 8007a7c:	fffffef0 	.word	0xfffffef0

08007a80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	4b38      	ldr	r3, [pc, #224]	; (8007b78 <ETH_SetDMAConfig+0xf8>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	6811      	ldr	r1, [r2, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007aa6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	791b      	ldrb	r3, [r3, #4]
 8007aac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007ab2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	7b1b      	ldrb	r3, [r3, #12]
 8007ab8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	4b2c      	ldr	r3, [pc, #176]	; (8007b7c <ETH_SetDMAConfig+0xfc>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ad8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	7b5b      	ldrb	r3, [r3, #13]
 8007ade:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8007af4:	4b22      	ldr	r3, [pc, #136]	; (8007b80 <ETH_SetDMAConfig+0x100>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	430b      	orrs	r3, r1
 8007b00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	7d1b      	ldrb	r3, [r3, #20]
 8007b10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007b12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	7f5b      	ldrb	r3, [r3, #29]
 8007b18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007b2a:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <ETH_SetDMAConfig+0x104>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6812      	ldr	r2, [r2, #0]
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	430b      	orrs	r3, r1
 8007b36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b3a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	7f1b      	ldrb	r3, [r3, #28]
 8007b42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b54:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007b58:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <ETH_SetDMAConfig+0x108>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	68f9      	ldr	r1, [r7, #12]
 8007b62:	430b      	orrs	r3, r1
 8007b64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	ffff87fd 	.word	0xffff87fd
 8007b7c:	ffff2ffe 	.word	0xffff2ffe
 8007b80:	fffec000 	.word	0xfffec000
 8007b84:	ffc0efef 	.word	0xffc0efef
 8007b88:	7fc0ffff 	.word	0x7fc0ffff

08007b8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b0a4      	sub	sp, #144	; 0x90
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007b94:	2301      	movs	r3, #1
 8007b96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bcc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8007be4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007be8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007c06:	2300      	movs	r3, #0
 8007c08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007c24:	2320      	movs	r3, #32
 8007c26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007c30:	2300      	movs	r3, #0
 8007c32:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007c36:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007c3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007c42:	2300      	movs	r3, #0
 8007c44:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007c66:	2300      	movs	r3, #0
 8007c68:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c74:	4619      	mov	r1, r3
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fde6 	bl	8007848 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8007c80:	2301      	movs	r3, #1
 8007c82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007c96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007ca0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007ca4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007cac:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fee1 	bl	8007a80 <ETH_SetDMAConfig>
}
 8007cbe:	bf00      	nop
 8007cc0:	3790      	adds	r7, #144	; 0x90
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007cce:	2300      	movs	r3, #0
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e01d      	b.n	8007d10 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68d9      	ldr	r1, [r3, #12]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	005b      	lsls	r3, r3, #1
 8007cde:	4413      	add	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	440b      	add	r3, r1
 8007ce4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	3206      	adds	r2, #6
 8007d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d9de      	bls.n	8007cd4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d24:	461a      	mov	r2, r3
 8007d26:	2303      	movs	r3, #3
 8007d28:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68da      	ldr	r2, [r3, #12]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d38:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d48:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e023      	b.n	8007dae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6919      	ldr	r1, [r3, #16]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	440b      	add	r3, r1
 8007d76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2200      	movs	r2, #0
 8007d94:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007d9c:	68b9      	ldr	r1, [r7, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	3212      	adds	r2, #18
 8007da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d9d8      	bls.n	8007d66 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2303      	movs	r3, #3
 8007dde:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691a      	ldr	r2, [r3, #16]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e02:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b098      	sub	sp, #96	; 0x60
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007e1c:	4a84      	ldr	r2, [pc, #528]	; (8008030 <HAL_FDCAN_Init+0x21c>)
 8007e1e:	f107 030c 	add.w	r3, r7, #12
 8007e22:	4611      	mov	r1, r2
 8007e24:	224c      	movs	r2, #76	; 0x4c
 8007e26:	4618      	mov	r0, r3
 8007e28:	f012 fb42 	bl	801a4b0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e1c6      	b.n	80081c4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a7e      	ldr	r2, [pc, #504]	; (8008034 <HAL_FDCAN_Init+0x220>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d106      	bne.n	8007e4e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7f9 f816 	bl	8000e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699a      	ldr	r2, [r3, #24]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0210 	bic.w	r2, r2, #16
 8007e76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007e78:	f7fb f894 	bl	8002fa4 <HAL_GetTick>
 8007e7c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007e7e:	e014      	b.n	8007eaa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007e80:	f7fb f890 	bl	8002fa4 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b0a      	cmp	r3, #10
 8007e8c:	d90d      	bls.n	8007eaa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e94:	f043 0201 	orr.w	r2, r3, #1
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e18c      	b.n	80081c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d0e3      	beq.n	8007e80 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ec8:	f7fb f86c 	bl	8002fa4 <HAL_GetTick>
 8007ecc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ece:	e014      	b.n	8007efa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007ed0:	f7fb f868 	bl	8002fa4 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b0a      	cmp	r3, #10
 8007edc:	d90d      	bls.n	8007efa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ee4:	f043 0201 	orr.w	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2203      	movs	r2, #3
 8007ef2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e164      	b.n	80081c4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0e3      	beq.n	8007ed0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0202 	orr.w	r2, r2, #2
 8007f16:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7c1b      	ldrb	r3, [r3, #16]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d108      	bne.n	8007f32 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f2e:	619a      	str	r2, [r3, #24]
 8007f30:	e007      	b.n	8007f42 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f40:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7c5b      	ldrb	r3, [r3, #17]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d108      	bne.n	8007f5c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f58:	619a      	str	r2, [r3, #24]
 8007f5a:	e007      	b.n	8007f6c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7c9b      	ldrb	r3, [r3, #18]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d108      	bne.n	8007f86 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f82:	619a      	str	r2, [r3, #24]
 8007f84:	e007      	b.n	8007f96 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f94:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007fba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0210 	bic.w	r2, r2, #16
 8007fca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d108      	bne.n	8007fe6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0204 	orr.w	r2, r2, #4
 8007fe2:	619a      	str	r2, [r3, #24]
 8007fe4:	e030      	b.n	8008048 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d02c      	beq.n	8008048 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d020      	beq.n	8008038 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008004:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0210 	orr.w	r2, r2, #16
 8008014:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b03      	cmp	r3, #3
 800801c:	d114      	bne.n	8008048 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0220 	orr.w	r2, r2, #32
 800802c:	619a      	str	r2, [r3, #24]
 800802e:	e00b      	b.n	8008048 <HAL_FDCAN_Init+0x234>
 8008030:	0801a7ac 	.word	0x0801a7ac
 8008034:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0220 	orr.w	r2, r2, #32
 8008046:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	3b01      	subs	r3, #1
 800804e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	3b01      	subs	r3, #1
 8008056:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008058:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008060:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	3b01      	subs	r3, #1
 800806a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008070:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008072:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800807c:	d115      	bne.n	80080aa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	3b01      	subs	r3, #1
 800808a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800808c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008092:	3b01      	subs	r3, #1
 8008094:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008096:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	3b01      	subs	r3, #1
 80080a0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80080a6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80080a8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d0:	4413      	add	r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80080de:	f023 0107 	bic.w	r1, r3, #7
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	3360      	adds	r3, #96	; 0x60
 80080ea:	443b      	add	r3, r7
 80080ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d011      	beq.n	8008126 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800810a:	f023 0107 	bic.w	r1, r3, #7
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	3360      	adds	r3, #96	; 0x60
 8008116:	443b      	add	r3, r7
 8008118:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812a:	2b00      	cmp	r3, #0
 800812c:	d012      	beq.n	8008154 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008136:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	3360      	adds	r3, #96	; 0x60
 8008142:	443b      	add	r3, r7
 8008144:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008148:	011a      	lsls	r2, r3, #4
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	2b00      	cmp	r3, #0
 800815a:	d012      	beq.n	8008182 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008164:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	3360      	adds	r3, #96	; 0x60
 8008170:	443b      	add	r3, r7
 8008172:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008176:	021a      	lsls	r2, r3, #8
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	430a      	orrs	r2, r1
 800817e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <HAL_FDCAN_Init+0x3b8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d107      	bne.n	800819c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f022 0203 	bic.w	r2, r2, #3
 800819a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f80b 	bl	80081d0 <FDCAN_CalcultateRamBlockAddresses>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80081c0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3760      	adds	r7, #96	; 0x60
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	4000a000 	.word	0x4000a000

080081d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80081e6:	4ba7      	ldr	r3, [pc, #668]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	0091      	lsls	r1, r2, #2
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	430b      	orrs	r3, r1
 80081f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008200:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	041a      	lsls	r2, r3, #16
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008226:	4b97      	ldr	r3, [pc, #604]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008228:	4013      	ands	r3, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	0091      	lsls	r1, r2, #2
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	430b      	orrs	r3, r1
 8008234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008240:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008248:	041a      	lsls	r2, r3, #16
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	4413      	add	r3, r2
 800825e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008268:	4b86      	ldr	r3, [pc, #536]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800826a:	4013      	ands	r3, r2
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	0091      	lsls	r1, r2, #2
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	430b      	orrs	r3, r1
 8008276:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008282:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	041a      	lsls	r2, r3, #16
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800829e:	fb02 f303 	mul.w	r3, r2, r3
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	4413      	add	r3, r2
 80082a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80082b0:	4b74      	ldr	r3, [pc, #464]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	0091      	lsls	r1, r2, #2
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	430b      	orrs	r3, r1
 80082be:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d2:	041a      	lsls	r2, r3, #16
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80082e6:	fb02 f303 	mul.w	r3, r2, r3
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4413      	add	r3, r2
 80082ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80082f8:	4b62      	ldr	r3, [pc, #392]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082fa:	4013      	ands	r3, r2
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	0091      	lsls	r1, r2, #2
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6812      	ldr	r2, [r2, #0]
 8008304:	430b      	orrs	r3, r1
 8008306:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008312:	fb02 f303 	mul.w	r3, r2, r3
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4413      	add	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008324:	4b57      	ldr	r3, [pc, #348]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008326:	4013      	ands	r3, r2
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	0091      	lsls	r1, r2, #2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6812      	ldr	r2, [r2, #0]
 8008330:	430b      	orrs	r3, r1
 8008332:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800833e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008346:	041a      	lsls	r2, r3, #16
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	4413      	add	r3, r2
 800835c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008366:	4b47      	ldr	r3, [pc, #284]	; (8008484 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008368:	4013      	ands	r3, r2
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	0091      	lsls	r1, r2, #2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6812      	ldr	r2, [r2, #0]
 8008372:	430b      	orrs	r3, r1
 8008374:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008380:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008388:	041a      	lsls	r2, r3, #16
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	430a      	orrs	r2, r1
 8008390:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800839c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a4:	061a      	lsls	r2, r3, #24
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b4:	4b34      	ldr	r3, [pc, #208]	; (8008488 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80083b6:	4413      	add	r3, r2
 80083b8:	009a      	lsls	r2, r3, #2
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	441a      	add	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	441a      	add	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008416:	6879      	ldr	r1, [r7, #4]
 8008418:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	441a      	add	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008432:	00db      	lsls	r3, r3, #3
 8008434:	441a      	add	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800844a:	fb01 f303 	mul.w	r3, r1, r3
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	441a      	add	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008466:	fb01 f303 	mul.w	r3, r1, r3
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	441a      	add	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847a:	4a04      	ldr	r2, [pc, #16]	; (800848c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d915      	bls.n	80084ac <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008480:	e006      	b.n	8008490 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008482:	bf00      	nop
 8008484:	ffff0003 	.word	0xffff0003
 8008488:	10002b00 	.word	0x10002b00
 800848c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008496:	f043 0220 	orr.w	r2, r3, #32
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2203      	movs	r2, #3
 80084a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e010      	b.n	80084ce <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e005      	b.n	80084c0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3304      	adds	r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d3f3      	bcc.n	80084b4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop

080084dc <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d101      	bne.n	80084ee <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e033      	b.n	8008556 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 fda4 	bl	8001050 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f854 	bl	80085bc <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f822 	bl	800855e <FMAC_Reset>
 800851a:	4603      	mov	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d10c      	bne.n	800853a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	f043 0210 	orr.w	r2, r3, #16
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	22a0      	movs	r2, #160	; 0xa0
 8008530:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	73fb      	strb	r3, [r7, #15]
 8008538:	e008      	b.n	800854c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008566:	f7fa fd1d 	bl	8002fa4 <HAL_GetTick>
 800856a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	691a      	ldr	r2, [r3, #16]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800857a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800857c:	e00f      	b.n	800859e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800857e:	f7fa fd11 	bl	8002fa4 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800858c:	d907      	bls.n	800859e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e00a      	b.n	80085b4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e8      	bne.n	800857e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f807 	bl	80085d8 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f81b 	bl	8008606 <FMAC_ResetOutputStateAndDataPointers>
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2220      	movs	r2, #32
 80085f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008634:	b480      	push	{r7}
 8008636:	b089      	sub	sp, #36	; 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008642:	4b86      	ldr	r3, [pc, #536]	; (800885c <HAL_GPIO_Init+0x228>)
 8008644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008646:	e18c      	b.n	8008962 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	2101      	movs	r1, #1
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	fa01 f303 	lsl.w	r3, r1, r3
 8008654:	4013      	ands	r3, r2
 8008656:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 817e 	beq.w	800895c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d005      	beq.n	8008678 <HAL_GPIO_Init+0x44>
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f003 0303 	and.w	r3, r3, #3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d130      	bne.n	80086da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	2203      	movs	r2, #3
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	43db      	mvns	r3, r3
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	4013      	ands	r3, r2
 800868e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68da      	ldr	r2, [r3, #12]
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	4313      	orrs	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086ae:	2201      	movs	r2, #1
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	fa02 f303 	lsl.w	r3, r2, r3
 80086b6:	43db      	mvns	r3, r3
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	4013      	ands	r3, r2
 80086bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	091b      	lsrs	r3, r3, #4
 80086c4:	f003 0201 	and.w	r2, r3, #1
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	d017      	beq.n	8008716 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	005b      	lsls	r3, r3, #1
 80086f0:	2203      	movs	r2, #3
 80086f2:	fa02 f303 	lsl.w	r3, r2, r3
 80086f6:	43db      	mvns	r3, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4013      	ands	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d123      	bne.n	800876a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	08da      	lsrs	r2, r3, #3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3208      	adds	r2, #8
 800872a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	220f      	movs	r2, #15
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	691a      	ldr	r2, [r3, #16]
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	4313      	orrs	r3, r2
 800875a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	08da      	lsrs	r2, r3, #3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3208      	adds	r2, #8
 8008764:	69b9      	ldr	r1, [r7, #24]
 8008766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	2203      	movs	r2, #3
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	43db      	mvns	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4013      	ands	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f003 0203 	and.w	r2, r3, #3
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	fa02 f303 	lsl.w	r3, r2, r3
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	4313      	orrs	r3, r2
 8008796:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	69ba      	ldr	r2, [r7, #24]
 800879c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 80d8 	beq.w	800895c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087ac:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <HAL_GPIO_Init+0x22c>)
 80087ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087b2:	4a2b      	ldr	r2, [pc, #172]	; (8008860 <HAL_GPIO_Init+0x22c>)
 80087b4:	f043 0302 	orr.w	r3, r3, #2
 80087b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087bc:	4b28      	ldr	r3, [pc, #160]	; (8008860 <HAL_GPIO_Init+0x22c>)
 80087be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087ca:	4a26      	ldr	r2, [pc, #152]	; (8008864 <HAL_GPIO_Init+0x230>)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	089b      	lsrs	r3, r3, #2
 80087d0:	3302      	adds	r3, #2
 80087d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	f003 0303 	and.w	r3, r3, #3
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	220f      	movs	r2, #15
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43db      	mvns	r3, r3
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	4013      	ands	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1d      	ldr	r2, [pc, #116]	; (8008868 <HAL_GPIO_Init+0x234>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d04a      	beq.n	800888c <HAL_GPIO_Init+0x258>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1c      	ldr	r2, [pc, #112]	; (800886c <HAL_GPIO_Init+0x238>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d02b      	beq.n	8008856 <HAL_GPIO_Init+0x222>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1b      	ldr	r2, [pc, #108]	; (8008870 <HAL_GPIO_Init+0x23c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d025      	beq.n	8008852 <HAL_GPIO_Init+0x21e>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1a      	ldr	r2, [pc, #104]	; (8008874 <HAL_GPIO_Init+0x240>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d01f      	beq.n	800884e <HAL_GPIO_Init+0x21a>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a19      	ldr	r2, [pc, #100]	; (8008878 <HAL_GPIO_Init+0x244>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d019      	beq.n	800884a <HAL_GPIO_Init+0x216>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a18      	ldr	r2, [pc, #96]	; (800887c <HAL_GPIO_Init+0x248>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d013      	beq.n	8008846 <HAL_GPIO_Init+0x212>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a17      	ldr	r2, [pc, #92]	; (8008880 <HAL_GPIO_Init+0x24c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d00d      	beq.n	8008842 <HAL_GPIO_Init+0x20e>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a16      	ldr	r2, [pc, #88]	; (8008884 <HAL_GPIO_Init+0x250>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d007      	beq.n	800883e <HAL_GPIO_Init+0x20a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a15      	ldr	r2, [pc, #84]	; (8008888 <HAL_GPIO_Init+0x254>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d101      	bne.n	800883a <HAL_GPIO_Init+0x206>
 8008836:	2309      	movs	r3, #9
 8008838:	e029      	b.n	800888e <HAL_GPIO_Init+0x25a>
 800883a:	230a      	movs	r3, #10
 800883c:	e027      	b.n	800888e <HAL_GPIO_Init+0x25a>
 800883e:	2307      	movs	r3, #7
 8008840:	e025      	b.n	800888e <HAL_GPIO_Init+0x25a>
 8008842:	2306      	movs	r3, #6
 8008844:	e023      	b.n	800888e <HAL_GPIO_Init+0x25a>
 8008846:	2305      	movs	r3, #5
 8008848:	e021      	b.n	800888e <HAL_GPIO_Init+0x25a>
 800884a:	2304      	movs	r3, #4
 800884c:	e01f      	b.n	800888e <HAL_GPIO_Init+0x25a>
 800884e:	2303      	movs	r3, #3
 8008850:	e01d      	b.n	800888e <HAL_GPIO_Init+0x25a>
 8008852:	2302      	movs	r3, #2
 8008854:	e01b      	b.n	800888e <HAL_GPIO_Init+0x25a>
 8008856:	2301      	movs	r3, #1
 8008858:	e019      	b.n	800888e <HAL_GPIO_Init+0x25a>
 800885a:	bf00      	nop
 800885c:	58000080 	.word	0x58000080
 8008860:	58024400 	.word	0x58024400
 8008864:	58000400 	.word	0x58000400
 8008868:	58020000 	.word	0x58020000
 800886c:	58020400 	.word	0x58020400
 8008870:	58020800 	.word	0x58020800
 8008874:	58020c00 	.word	0x58020c00
 8008878:	58021000 	.word	0x58021000
 800887c:	58021400 	.word	0x58021400
 8008880:	58021800 	.word	0x58021800
 8008884:	58021c00 	.word	0x58021c00
 8008888:	58022400 	.word	0x58022400
 800888c:	2300      	movs	r3, #0
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	f002 0203 	and.w	r2, r2, #3
 8008894:	0092      	lsls	r2, r2, #2
 8008896:	4093      	lsls	r3, r2
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	4313      	orrs	r3, r2
 800889c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800889e:	4938      	ldr	r1, [pc, #224]	; (8008980 <HAL_GPIO_Init+0x34c>)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	3302      	adds	r3, #2
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	43db      	mvns	r3, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4013      	ands	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	43db      	mvns	r3, r3
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4013      	ands	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4313      	orrs	r3, r2
 800892a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	43db      	mvns	r3, r3
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	4013      	ands	r3, r2
 8008940:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	4313      	orrs	r3, r2
 8008954:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	3301      	adds	r3, #1
 8008960:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	fa22 f303 	lsr.w	r3, r2, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f ae6b 	bne.w	8008648 <HAL_GPIO_Init+0x14>
  }
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	3724      	adds	r7, #36	; 0x24
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	58000400 	.word	0x58000400

08008984 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800898e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008996:	88fb      	ldrh	r3, [r7, #6]
 8008998:	4013      	ands	r3, r2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d008      	beq.n	80089b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800899e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f000 f804 	bl	80089b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	4603      	mov	r3, r0
 80089c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e097      	b.n	8008b12 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7f8 fbcb 	bl	8001198 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d004      	beq.n	8008a24 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a22:	d103      	bne.n	8008a2c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 031e 	bic.w	r3, r3, #30
 8008a2a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	4b38      	ldr	r3, [pc, #224]	; (8008b1c <HAL_LPTIM_Init+0x14c>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <HAL_LPTIM_Init+0x150>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008a50:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008a56:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8008a5c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008a62:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d107      	bne.n	8008a82 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d004      	beq.n	8008a94 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a92:	d107      	bne.n	8008aa4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d00a      	beq.n	8008ac6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ab8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008abe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a14      	ldr	r2, [pc, #80]	; (8008b24 <HAL_LPTIM_Init+0x154>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d004      	beq.n	8008ae2 <HAL_LPTIM_Init+0x112>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a12      	ldr	r2, [pc, #72]	; (8008b28 <HAL_LPTIM_Init+0x158>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d108      	bne.n	8008af4 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24
 8008af2:	e009      	b.n	8008b08 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a0c      	ldr	r2, [pc, #48]	; (8008b2c <HAL_LPTIM_Init+0x15c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d104      	bne.n	8008b08 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008b06:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	ffff1f3f 	.word	0xffff1f3f
 8008b20:	ff19f1fe 	.word	0xff19f1fe
 8008b24:	40002400 	.word	0x40002400
 8008b28:	58002400 	.word	0x58002400
 8008b2c:	58002800 	.word	0x58002800

08008b30 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2202      	movs	r2, #2
 8008b40:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f042 0201 	orr.w	r2, r2, #1
 8008b62:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2210      	movs	r2, #16
 8008b6a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008b74:	2110      	movs	r1, #16
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f932 	bl	8008de0 <LPTIM_WaitForFlag>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d101      	bne.n	8008b86 <HAL_LPTIM_TimeOut_Start_IT+0x56>
  {
    return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e038      	b.n	8008bf8 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8008b96:	2108      	movs	r1, #8
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f921 	bl	8008de0 <LPTIM_WaitForFlag>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d101      	bne.n	8008ba8 <HAL_LPTIM_TimeOut_Start_IT+0x78>
  {
    return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e027      	b.n	8008bf8 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f949 	bl	8008e40 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f907 	bl	8008dc2 <HAL_LPTIM_GetState>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d101      	bne.n	8008bbe <HAL_LPTIM_TimeOut_Start_IT+0x8e>
  {
    return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e01c      	b.n	8008bf8 <HAL_LPTIM_TimeOut_Start_IT+0xc8>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689a      	ldr	r2, [r3, #8]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0201 	orr.w	r2, r2, #1
 8008bdc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0204 	orr.w	r2, r2, #4
 8008bec:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d10d      	bne.n	8008c32 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d106      	bne.n	8008c32 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f882 	bl	8008d36 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0302 	and.w	r3, r3, #2
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d10d      	bne.n	8008c5c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d106      	bne.n	8008c5c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2202      	movs	r2, #2
 8008c54:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f877 	bl	8008d4a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d10d      	bne.n	8008c86 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d106      	bne.n	8008c86 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2204      	movs	r2, #4
 8008c7e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f86c 	bl	8008d5e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0308 	and.w	r3, r3, #8
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10d      	bne.n	8008cb0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d106      	bne.n	8008cb0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f861 	bl	8008d72 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0310 	and.w	r3, r3, #16
 8008cba:	2b10      	cmp	r3, #16
 8008cbc:	d10d      	bne.n	8008cda <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d106      	bne.n	8008cda <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2210      	movs	r2, #16
 8008cd2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f856 	bl	8008d86 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d10d      	bne.n	8008d04 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d106      	bne.n	8008d04 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f84b 	bl	8008d9a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d10d      	bne.n	8008d2e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1c:	2b40      	cmp	r3, #64	; 0x40
 8008d1e:	d106      	bne.n	8008d2e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2240      	movs	r2, #64	; 0x40
 8008d26:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 f840 	bl	8008dae <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d36:	b480      	push	{r7}
 8008d38:	b083      	sub	sp, #12
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b083      	sub	sp, #12
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b083      	sub	sp, #12
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008d66:	bf00      	nop
 8008d68:	370c      	adds	r7, #12
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr

08008d72 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008d7a:	bf00      	nop
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d86:	b480      	push	{r7}
 8008d88:	b083      	sub	sp, #12
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008dd0:	b2db      	uxtb	r3, r3
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <LPTIM_WaitForFlag+0x58>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <LPTIM_WaitForFlag+0x5c>)
 8008df4:	fba2 2303 	umull	r2, r3, r2, r3
 8008df8:	0b9b      	lsrs	r3, r3, #14
 8008dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dfe:	fb02 f303 	mul.w	r3, r2, r3
 8008e02:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	3b01      	subs	r3, #1
 8008e08:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d101      	bne.n	8008e14 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008e10:	2303      	movs	r3, #3
 8008e12:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d002      	beq.n	8008e2a <LPTIM_WaitForFlag+0x4a>
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1ec      	bne.n	8008e04 <LPTIM_WaitForFlag+0x24>

  return result;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	24000000 	.word	0x24000000
 8008e3c:	d1b71759 	.word	0xd1b71759

08008e40 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08c      	sub	sp, #48	; 0x30
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e52:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e56:	2301      	movs	r3, #1
 8008e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f383 8810 	msr	PRIMASK, r3
}
 8008e60:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a81      	ldr	r2, [pc, #516]	; (800906c <LPTIM_Disable+0x22c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d02d      	beq.n	8008ec8 <LPTIM_Disable+0x88>
 8008e6c:	4a7f      	ldr	r2, [pc, #508]	; (800906c <LPTIM_Disable+0x22c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d830      	bhi.n	8008ed4 <LPTIM_Disable+0x94>
 8008e72:	4a7f      	ldr	r2, [pc, #508]	; (8009070 <LPTIM_Disable+0x230>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d021      	beq.n	8008ebc <LPTIM_Disable+0x7c>
 8008e78:	4a7d      	ldr	r2, [pc, #500]	; (8009070 <LPTIM_Disable+0x230>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d82a      	bhi.n	8008ed4 <LPTIM_Disable+0x94>
 8008e7e:	4a7d      	ldr	r2, [pc, #500]	; (8009074 <LPTIM_Disable+0x234>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d015      	beq.n	8008eb0 <LPTIM_Disable+0x70>
 8008e84:	4a7b      	ldr	r2, [pc, #492]	; (8009074 <LPTIM_Disable+0x234>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d824      	bhi.n	8008ed4 <LPTIM_Disable+0x94>
 8008e8a:	4a7b      	ldr	r2, [pc, #492]	; (8009078 <LPTIM_Disable+0x238>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d003      	beq.n	8008e98 <LPTIM_Disable+0x58>
 8008e90:	4a7a      	ldr	r2, [pc, #488]	; (800907c <LPTIM_Disable+0x23c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d006      	beq.n	8008ea4 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008e96:	e01d      	b.n	8008ed4 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008e98:	4b79      	ldr	r3, [pc, #484]	; (8009080 <LPTIM_Disable+0x240>)
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008ea2:	e018      	b.n	8008ed6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008ea4:	4b76      	ldr	r3, [pc, #472]	; (8009080 <LPTIM_Disable+0x240>)
 8008ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008eae:	e012      	b.n	8008ed6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008eb0:	4b73      	ldr	r3, [pc, #460]	; (8009080 <LPTIM_Disable+0x240>)
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008eba:	e00c      	b.n	8008ed6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008ebc:	4b70      	ldr	r3, [pc, #448]	; (8009080 <LPTIM_Disable+0x240>)
 8008ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008ec6:	e006      	b.n	8008ed6 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008ec8:	4b6d      	ldr	r3, [pc, #436]	; (8009080 <LPTIM_Disable+0x240>)
 8008eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ecc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008ed2:	e000      	b.n	8008ed6 <LPTIM_Disable+0x96>
      break;
 8008ed4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a5a      	ldr	r2, [pc, #360]	; (800906c <LPTIM_Disable+0x22c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d059      	beq.n	8008fbc <LPTIM_Disable+0x17c>
 8008f08:	4a58      	ldr	r2, [pc, #352]	; (800906c <LPTIM_Disable+0x22c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d867      	bhi.n	8008fde <LPTIM_Disable+0x19e>
 8008f0e:	4a58      	ldr	r2, [pc, #352]	; (8009070 <LPTIM_Disable+0x230>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d042      	beq.n	8008f9a <LPTIM_Disable+0x15a>
 8008f14:	4a56      	ldr	r2, [pc, #344]	; (8009070 <LPTIM_Disable+0x230>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d861      	bhi.n	8008fde <LPTIM_Disable+0x19e>
 8008f1a:	4a56      	ldr	r2, [pc, #344]	; (8009074 <LPTIM_Disable+0x234>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d02b      	beq.n	8008f78 <LPTIM_Disable+0x138>
 8008f20:	4a54      	ldr	r2, [pc, #336]	; (8009074 <LPTIM_Disable+0x234>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d85b      	bhi.n	8008fde <LPTIM_Disable+0x19e>
 8008f26:	4a54      	ldr	r2, [pc, #336]	; (8009078 <LPTIM_Disable+0x238>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <LPTIM_Disable+0xf4>
 8008f2c:	4a53      	ldr	r2, [pc, #332]	; (800907c <LPTIM_Disable+0x23c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d011      	beq.n	8008f56 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8008f32:	e054      	b.n	8008fde <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008f34:	4b52      	ldr	r3, [pc, #328]	; (8009080 <LPTIM_Disable+0x240>)
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3a:	4a51      	ldr	r2, [pc, #324]	; (8009080 <LPTIM_Disable+0x240>)
 8008f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008f44:	4b4e      	ldr	r3, [pc, #312]	; (8009080 <LPTIM_Disable+0x240>)
 8008f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4a:	4a4d      	ldr	r2, [pc, #308]	; (8009080 <LPTIM_Disable+0x240>)
 8008f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8008f54:	e044      	b.n	8008fe0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008f56:	4b4a      	ldr	r3, [pc, #296]	; (8009080 <LPTIM_Disable+0x240>)
 8008f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f5c:	4a48      	ldr	r2, [pc, #288]	; (8009080 <LPTIM_Disable+0x240>)
 8008f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f62:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008f66:	4b46      	ldr	r3, [pc, #280]	; (8009080 <LPTIM_Disable+0x240>)
 8008f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f6c:	4a44      	ldr	r2, [pc, #272]	; (8009080 <LPTIM_Disable+0x240>)
 8008f6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008f76:	e033      	b.n	8008fe0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008f78:	4b41      	ldr	r3, [pc, #260]	; (8009080 <LPTIM_Disable+0x240>)
 8008f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f7e:	4a40      	ldr	r2, [pc, #256]	; (8009080 <LPTIM_Disable+0x240>)
 8008f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f84:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008f88:	4b3d      	ldr	r3, [pc, #244]	; (8009080 <LPTIM_Disable+0x240>)
 8008f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <LPTIM_Disable+0x240>)
 8008f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008f98:	e022      	b.n	8008fe0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8008f9a:	4b39      	ldr	r3, [pc, #228]	; (8009080 <LPTIM_Disable+0x240>)
 8008f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fa0:	4a37      	ldr	r2, [pc, #220]	; (8009080 <LPTIM_Disable+0x240>)
 8008fa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008fa6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8008faa:	4b35      	ldr	r3, [pc, #212]	; (8009080 <LPTIM_Disable+0x240>)
 8008fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fb0:	4a33      	ldr	r2, [pc, #204]	; (8009080 <LPTIM_Disable+0x240>)
 8008fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008fba:	e011      	b.n	8008fe0 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8008fbc:	4b30      	ldr	r3, [pc, #192]	; (8009080 <LPTIM_Disable+0x240>)
 8008fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fc2:	4a2f      	ldr	r2, [pc, #188]	; (8009080 <LPTIM_Disable+0x240>)
 8008fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fc8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8008fcc:	4b2c      	ldr	r3, [pc, #176]	; (8009080 <LPTIM_Disable+0x240>)
 8008fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008fd2:	4a2b      	ldr	r2, [pc, #172]	; (8009080 <LPTIM_Disable+0x240>)
 8008fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fd8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008fdc:	e000      	b.n	8008fe0 <LPTIM_Disable+0x1a0>
      break;
 8008fde:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <LPTIM_Disable+0x1ae>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 80d0 	beq.w	800918e <LPTIM_Disable+0x34e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1e      	ldr	r2, [pc, #120]	; (800906c <LPTIM_Disable+0x22c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d031      	beq.n	800905c <LPTIM_Disable+0x21c>
 8008ff8:	4a1c      	ldr	r2, [pc, #112]	; (800906c <LPTIM_Disable+0x22c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d842      	bhi.n	8009084 <LPTIM_Disable+0x244>
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <LPTIM_Disable+0x230>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d024      	beq.n	800904e <LPTIM_Disable+0x20e>
 8009004:	4a1a      	ldr	r2, [pc, #104]	; (8009070 <LPTIM_Disable+0x230>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d83c      	bhi.n	8009084 <LPTIM_Disable+0x244>
 800900a:	4a1a      	ldr	r2, [pc, #104]	; (8009074 <LPTIM_Disable+0x234>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d017      	beq.n	8009040 <LPTIM_Disable+0x200>
 8009010:	4a18      	ldr	r2, [pc, #96]	; (8009074 <LPTIM_Disable+0x234>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d836      	bhi.n	8009084 <LPTIM_Disable+0x244>
 8009016:	4a18      	ldr	r2, [pc, #96]	; (8009078 <LPTIM_Disable+0x238>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <LPTIM_Disable+0x1e4>
 800901c:	4a17      	ldr	r2, [pc, #92]	; (800907c <LPTIM_Disable+0x23c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d007      	beq.n	8009032 <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009022:	e02f      	b.n	8009084 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009024:	4b16      	ldr	r3, [pc, #88]	; (8009080 <LPTIM_Disable+0x240>)
 8009026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <LPTIM_Disable+0x240>)
 800902a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800902e:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009030:	e029      	b.n	8009086 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009032:	4b13      	ldr	r3, [pc, #76]	; (8009080 <LPTIM_Disable+0x240>)
 8009034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <LPTIM_Disable+0x240>)
 8009038:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800903c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800903e:	e022      	b.n	8009086 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009040:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <LPTIM_Disable+0x240>)
 8009042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009044:	4a0e      	ldr	r2, [pc, #56]	; (8009080 <LPTIM_Disable+0x240>)
 8009046:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800904a:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800904c:	e01b      	b.n	8009086 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <LPTIM_Disable+0x240>)
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	4a0b      	ldr	r2, [pc, #44]	; (8009080 <LPTIM_Disable+0x240>)
 8009054:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009058:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 800905a:	e014      	b.n	8009086 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 800905c:	4b08      	ldr	r3, [pc, #32]	; (8009080 <LPTIM_Disable+0x240>)
 800905e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009060:	4a07      	ldr	r2, [pc, #28]	; (8009080 <LPTIM_Disable+0x240>)
 8009062:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009066:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009068:	e00d      	b.n	8009086 <LPTIM_Disable+0x246>
 800906a:	bf00      	nop
 800906c:	58003000 	.word	0x58003000
 8009070:	58002c00 	.word	0x58002c00
 8009074:	58002800 	.word	0x58002800
 8009078:	40002400 	.word	0x40002400
 800907c:	58002400 	.word	0x58002400
 8009080:	58024400 	.word	0x58024400
        break;
 8009084:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01a      	beq.n	80090c2 <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f042 0201 	orr.w	r2, r2, #1
 800909a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	69fa      	ldr	r2, [r7, #28]
 80090a2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80090a4:	2108      	movs	r1, #8
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fe9a 	bl	8008de0 <LPTIM_WaitForFlag>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d103      	bne.n	80090ba <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2203      	movs	r2, #3
 80090b6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2208      	movs	r2, #8
 80090c0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01a      	beq.n	80090fe <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80090e0:	2110      	movs	r1, #16
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f7ff fe7c 	bl	8008de0 <LPTIM_WaitForFlag>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d103      	bne.n	80090f6 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2203      	movs	r2, #3
 80090f2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2210      	movs	r2, #16
 80090fc:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a33      	ldr	r2, [pc, #204]	; (80091d0 <LPTIM_Disable+0x390>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d039      	beq.n	800917c <LPTIM_Disable+0x33c>
 8009108:	4a31      	ldr	r2, [pc, #196]	; (80091d0 <LPTIM_Disable+0x390>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d841      	bhi.n	8009192 <LPTIM_Disable+0x352>
 800910e:	4a31      	ldr	r2, [pc, #196]	; (80091d4 <LPTIM_Disable+0x394>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d02a      	beq.n	800916a <LPTIM_Disable+0x32a>
 8009114:	4a2f      	ldr	r2, [pc, #188]	; (80091d4 <LPTIM_Disable+0x394>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d83b      	bhi.n	8009192 <LPTIM_Disable+0x352>
 800911a:	4a2f      	ldr	r2, [pc, #188]	; (80091d8 <LPTIM_Disable+0x398>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d01b      	beq.n	8009158 <LPTIM_Disable+0x318>
 8009120:	4a2d      	ldr	r2, [pc, #180]	; (80091d8 <LPTIM_Disable+0x398>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d835      	bhi.n	8009192 <LPTIM_Disable+0x352>
 8009126:	4a2d      	ldr	r2, [pc, #180]	; (80091dc <LPTIM_Disable+0x39c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <LPTIM_Disable+0x2f4>
 800912c:	4a2c      	ldr	r2, [pc, #176]	; (80091e0 <LPTIM_Disable+0x3a0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009132:	e02e      	b.n	8009192 <LPTIM_Disable+0x352>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009134:	4b2b      	ldr	r3, [pc, #172]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800913c:	4929      	ldr	r1, [pc, #164]	; (80091e4 <LPTIM_Disable+0x3a4>)
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	4313      	orrs	r3, r2
 8009142:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009144:	e026      	b.n	8009194 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009146:	4b27      	ldr	r3, [pc, #156]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800914e:	4925      	ldr	r1, [pc, #148]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009152:	4313      	orrs	r3, r2
 8009154:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009156:	e01d      	b.n	8009194 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009158:	4b22      	ldr	r3, [pc, #136]	; (80091e4 <LPTIM_Disable+0x3a4>)
 800915a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800915c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009160:	4920      	ldr	r1, [pc, #128]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	4313      	orrs	r3, r2
 8009166:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009168:	e014      	b.n	8009194 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 800916a:	4b1e      	ldr	r3, [pc, #120]	; (80091e4 <LPTIM_Disable+0x3a4>)
 800916c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009172:	491c      	ldr	r1, [pc, #112]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	4313      	orrs	r3, r2
 8009178:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800917a:	e00b      	b.n	8009194 <LPTIM_Disable+0x354>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 800917c:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <LPTIM_Disable+0x3a4>)
 800917e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009180:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009184:	4917      	ldr	r1, [pc, #92]	; (80091e4 <LPTIM_Disable+0x3a4>)
 8009186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009188:	4313      	orrs	r3, r2
 800918a:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 800918c:	e002      	b.n	8009194 <LPTIM_Disable+0x354>
    }
  }
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <LPTIM_Disable+0x354>
        break;
 8009192:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	691a      	ldr	r2, [r3, #16]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091aa:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	f383 8810 	msr	PRIMASK, r3
}
 80091c6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80091c8:	bf00      	nop
 80091ca:	3730      	adds	r7, #48	; 0x30
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	58003000 	.word	0x58003000
 80091d4:	58002c00 	.word	0x58002c00
 80091d8:	58002800 	.word	0x58002800
 80091dc:	40002400 	.word	0x40002400
 80091e0:	58002400 	.word	0x58002400
 80091e4:	58024400 	.word	0x58024400

080091e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80091f0:	4b19      	ldr	r3, [pc, #100]	; (8009258 <HAL_PWREx_ConfigSupply+0x70>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d00a      	beq.n	8009212 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80091fc:	4b16      	ldr	r3, [pc, #88]	; (8009258 <HAL_PWREx_ConfigSupply+0x70>)
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d001      	beq.n	800920e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e01f      	b.n	800924e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	e01d      	b.n	800924e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009212:	4b11      	ldr	r3, [pc, #68]	; (8009258 <HAL_PWREx_ConfigSupply+0x70>)
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f023 0207 	bic.w	r2, r3, #7
 800921a:	490f      	ldr	r1, [pc, #60]	; (8009258 <HAL_PWREx_ConfigSupply+0x70>)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4313      	orrs	r3, r2
 8009220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009222:	f7f9 febf 	bl	8002fa4 <HAL_GetTick>
 8009226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009228:	e009      	b.n	800923e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800922a:	f7f9 febb 	bl	8002fa4 <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009238:	d901      	bls.n	800923e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e007      	b.n	800924e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_PWREx_ConfigSupply+0x70>)
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924a:	d1ee      	bne.n	800922a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	58024800 	.word	0x58024800

0800925c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08c      	sub	sp, #48	; 0x30
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e39d      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8087 	beq.w	800938a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800927c:	4b88      	ldr	r3, [pc, #544]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009284:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009286:	4b86      	ldr	r3, [pc, #536]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	2b10      	cmp	r3, #16
 8009290:	d007      	beq.n	80092a2 <HAL_RCC_OscConfig+0x46>
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b18      	cmp	r3, #24
 8009296:	d110      	bne.n	80092ba <HAL_RCC_OscConfig+0x5e>
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d10b      	bne.n	80092ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092a2:	4b7f      	ldr	r3, [pc, #508]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d06c      	beq.n	8009388 <HAL_RCC_OscConfig+0x12c>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d168      	bne.n	8009388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e377      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c2:	d106      	bne.n	80092d2 <HAL_RCC_OscConfig+0x76>
 80092c4:	4b76      	ldr	r3, [pc, #472]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a75      	ldr	r2, [pc, #468]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e02e      	b.n	8009330 <HAL_RCC_OscConfig+0xd4>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10c      	bne.n	80092f4 <HAL_RCC_OscConfig+0x98>
 80092da:	4b71      	ldr	r3, [pc, #452]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a70      	ldr	r2, [pc, #448]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4b6e      	ldr	r3, [pc, #440]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a6d      	ldr	r2, [pc, #436]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80092ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e01d      	b.n	8009330 <HAL_RCC_OscConfig+0xd4>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092fc:	d10c      	bne.n	8009318 <HAL_RCC_OscConfig+0xbc>
 80092fe:	4b68      	ldr	r3, [pc, #416]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a67      	ldr	r2, [pc, #412]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	4b65      	ldr	r3, [pc, #404]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a64      	ldr	r2, [pc, #400]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	e00b      	b.n	8009330 <HAL_RCC_OscConfig+0xd4>
 8009318:	4b61      	ldr	r3, [pc, #388]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a60      	ldr	r2, [pc, #384]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800931e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	4b5e      	ldr	r3, [pc, #376]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a5d      	ldr	r2, [pc, #372]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800932a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800932e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d013      	beq.n	8009360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009338:	f7f9 fe34 	bl	8002fa4 <HAL_GetTick>
 800933c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009340:	f7f9 fe30 	bl	8002fa4 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b64      	cmp	r3, #100	; 0x64
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e32b      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009352:	4b53      	ldr	r3, [pc, #332]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f0      	beq.n	8009340 <HAL_RCC_OscConfig+0xe4>
 800935e:	e014      	b.n	800938a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009360:	f7f9 fe20 	bl	8002fa4 <HAL_GetTick>
 8009364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009366:	e008      	b.n	800937a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009368:	f7f9 fe1c 	bl	8002fa4 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b64      	cmp	r3, #100	; 0x64
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e317      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800937a:	4b49      	ldr	r3, [pc, #292]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1f0      	bne.n	8009368 <HAL_RCC_OscConfig+0x10c>
 8009386:	e000      	b.n	800938a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 808c 	beq.w	80094b0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009398:	4b41      	ldr	r3, [pc, #260]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093a2:	4b3f      	ldr	r3, [pc, #252]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <HAL_RCC_OscConfig+0x162>
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	2b18      	cmp	r3, #24
 80093b2:	d137      	bne.n	8009424 <HAL_RCC_OscConfig+0x1c8>
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d132      	bne.n	8009424 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80093be:	4b38      	ldr	r3, [pc, #224]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0304 	and.w	r3, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_RCC_OscConfig+0x17a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e2e9      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80093d6:	4b32      	ldr	r3, [pc, #200]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f023 0219 	bic.w	r2, r3, #25
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	492f      	ldr	r1, [pc, #188]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093e8:	f7f9 fddc 	bl	8002fa4 <HAL_GetTick>
 80093ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093f0:	f7f9 fdd8 	bl	8002fa4 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e2d3      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009402:	4b27      	ldr	r3, [pc, #156]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d0f0      	beq.n	80093f0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800940e:	4b24      	ldr	r3, [pc, #144]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	061b      	lsls	r3, r3, #24
 800941c:	4920      	ldr	r1, [pc, #128]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800941e:	4313      	orrs	r3, r2
 8009420:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009422:	e045      	b.n	80094b0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d026      	beq.n	800947a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800942c:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f023 0219 	bic.w	r2, r3, #25
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	4919      	ldr	r1, [pc, #100]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800943a:	4313      	orrs	r3, r2
 800943c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943e:	f7f9 fdb1 	bl	8002fa4 <HAL_GetTick>
 8009442:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009444:	e008      	b.n	8009458 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009446:	f7f9 fdad 	bl	8002fa4 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e2a8      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009458:	4b11      	ldr	r3, [pc, #68]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0f0      	beq.n	8009446 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009464:	4b0e      	ldr	r3, [pc, #56]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	061b      	lsls	r3, r3, #24
 8009472:	490b      	ldr	r1, [pc, #44]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009474:	4313      	orrs	r3, r2
 8009476:	604b      	str	r3, [r1, #4]
 8009478:	e01a      	b.n	80094b0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800947a:	4b09      	ldr	r3, [pc, #36]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a08      	ldr	r2, [pc, #32]	; (80094a0 <HAL_RCC_OscConfig+0x244>)
 8009480:	f023 0301 	bic.w	r3, r3, #1
 8009484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009486:	f7f9 fd8d 	bl	8002fa4 <HAL_GetTick>
 800948a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800948c:	e00a      	b.n	80094a4 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800948e:	f7f9 fd89 	bl	8002fa4 <HAL_GetTick>
 8009492:	4602      	mov	r2, r0
 8009494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009496:	1ad3      	subs	r3, r2, r3
 8009498:	2b02      	cmp	r3, #2
 800949a:	d903      	bls.n	80094a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e284      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
 80094a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80094a4:	4b96      	ldr	r3, [pc, #600]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1ee      	bne.n	800948e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d06a      	beq.n	8009592 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80094bc:	4b90      	ldr	r3, [pc, #576]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80094c6:	4b8e      	ldr	r3, [pc, #568]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b08      	cmp	r3, #8
 80094d0:	d007      	beq.n	80094e2 <HAL_RCC_OscConfig+0x286>
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	2b18      	cmp	r3, #24
 80094d6:	d11b      	bne.n	8009510 <HAL_RCC_OscConfig+0x2b4>
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d116      	bne.n	8009510 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80094e2:	4b87      	ldr	r3, [pc, #540]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <HAL_RCC_OscConfig+0x29e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	2b80      	cmp	r3, #128	; 0x80
 80094f4:	d001      	beq.n	80094fa <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e257      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094fa:	4b81      	ldr	r3, [pc, #516]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	061b      	lsls	r3, r3, #24
 8009508:	497d      	ldr	r1, [pc, #500]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800950a:	4313      	orrs	r3, r2
 800950c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800950e:	e040      	b.n	8009592 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	69db      	ldr	r3, [r3, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d023      	beq.n	8009560 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009518:	4b79      	ldr	r3, [pc, #484]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a78      	ldr	r2, [pc, #480]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800951e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009524:	f7f9 fd3e 	bl	8002fa4 <HAL_GetTick>
 8009528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800952c:	f7f9 fd3a 	bl	8002fa4 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e235      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800953e:	4b70      	ldr	r3, [pc, #448]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800954a:	4b6d      	ldr	r3, [pc, #436]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	4969      	ldr	r1, [pc, #420]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800955a:	4313      	orrs	r3, r2
 800955c:	60cb      	str	r3, [r1, #12]
 800955e:	e018      	b.n	8009592 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009560:	4b67      	ldr	r3, [pc, #412]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a66      	ldr	r2, [pc, #408]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800956a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800956c:	f7f9 fd1a 	bl	8002fa4 <HAL_GetTick>
 8009570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009574:	f7f9 fd16 	bl	8002fa4 <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e211      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009586:	4b5e      	ldr	r3, [pc, #376]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f0      	bne.n	8009574 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	2b00      	cmp	r3, #0
 800959c:	d036      	beq.n	800960c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d019      	beq.n	80095da <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095a6:	4b56      	ldr	r3, [pc, #344]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80095a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095aa:	4a55      	ldr	r2, [pc, #340]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80095ac:	f043 0301 	orr.w	r3, r3, #1
 80095b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b2:	f7f9 fcf7 	bl	8002fa4 <HAL_GetTick>
 80095b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095b8:	e008      	b.n	80095cc <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095ba:	f7f9 fcf3 	bl	8002fa4 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e1ee      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80095cc:	4b4c      	ldr	r3, [pc, #304]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80095ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0f0      	beq.n	80095ba <HAL_RCC_OscConfig+0x35e>
 80095d8:	e018      	b.n	800960c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095da:	4b49      	ldr	r3, [pc, #292]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80095dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095de:	4a48      	ldr	r2, [pc, #288]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80095e0:	f023 0301 	bic.w	r3, r3, #1
 80095e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e6:	f7f9 fcdd 	bl	8002fa4 <HAL_GetTick>
 80095ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80095ec:	e008      	b.n	8009600 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095ee:	f7f9 fcd9 	bl	8002fa4 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e1d4      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009600:	4b3f      	ldr	r3, [pc, #252]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009604:	f003 0302 	and.w	r3, r3, #2
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f0      	bne.n	80095ee <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d036      	beq.n	8009686 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d019      	beq.n	8009654 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009620:	4b37      	ldr	r3, [pc, #220]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a36      	ldr	r2, [pc, #216]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800962a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800962c:	f7f9 fcba 	bl	8002fa4 <HAL_GetTick>
 8009630:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009632:	e008      	b.n	8009646 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009634:	f7f9 fcb6 	bl	8002fa4 <HAL_GetTick>
 8009638:	4602      	mov	r2, r0
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	1ad3      	subs	r3, r2, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d901      	bls.n	8009646 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009642:	2303      	movs	r3, #3
 8009644:	e1b1      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009646:	4b2e      	ldr	r3, [pc, #184]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f0      	beq.n	8009634 <HAL_RCC_OscConfig+0x3d8>
 8009652:	e018      	b.n	8009686 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a29      	ldr	r2, [pc, #164]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800965a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009660:	f7f9 fca0 	bl	8002fa4 <HAL_GetTick>
 8009664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009666:	e008      	b.n	800967a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009668:	f7f9 fc9c 	bl	8002fa4 <HAL_GetTick>
 800966c:	4602      	mov	r2, r0
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d901      	bls.n	800967a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009676:	2303      	movs	r3, #3
 8009678:	e197      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1f0      	bne.n	8009668 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0304 	and.w	r3, r3, #4
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 8086 	beq.w	80097a0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009694:	4b1b      	ldr	r3, [pc, #108]	; (8009704 <HAL_RCC_OscConfig+0x4a8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a1a      	ldr	r2, [pc, #104]	; (8009704 <HAL_RCC_OscConfig+0x4a8>)
 800969a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800969e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096a0:	f7f9 fc80 	bl	8002fa4 <HAL_GetTick>
 80096a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096a6:	e008      	b.n	80096ba <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096a8:	f7f9 fc7c 	bl	8002fa4 <HAL_GetTick>
 80096ac:	4602      	mov	r2, r0
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	1ad3      	subs	r3, r2, r3
 80096b2:	2b64      	cmp	r3, #100	; 0x64
 80096b4:	d901      	bls.n	80096ba <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80096b6:	2303      	movs	r3, #3
 80096b8:	e177      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096ba:	4b12      	ldr	r3, [pc, #72]	; (8009704 <HAL_RCC_OscConfig+0x4a8>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d0f0      	beq.n	80096a8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d106      	bne.n	80096dc <HAL_RCC_OscConfig+0x480>
 80096ce:	4b0c      	ldr	r3, [pc, #48]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d2:	4a0b      	ldr	r2, [pc, #44]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	6713      	str	r3, [r2, #112]	; 0x70
 80096da:	e032      	b.n	8009742 <HAL_RCC_OscConfig+0x4e6>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d111      	bne.n	8009708 <HAL_RCC_OscConfig+0x4ac>
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096e8:	4a05      	ldr	r2, [pc, #20]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096ea:	f023 0301 	bic.w	r3, r3, #1
 80096ee:	6713      	str	r3, [r2, #112]	; 0x70
 80096f0:	4b03      	ldr	r3, [pc, #12]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f4:	4a02      	ldr	r2, [pc, #8]	; (8009700 <HAL_RCC_OscConfig+0x4a4>)
 80096f6:	f023 0304 	bic.w	r3, r3, #4
 80096fa:	6713      	str	r3, [r2, #112]	; 0x70
 80096fc:	e021      	b.n	8009742 <HAL_RCC_OscConfig+0x4e6>
 80096fe:	bf00      	nop
 8009700:	58024400 	.word	0x58024400
 8009704:	58024800 	.word	0x58024800
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	2b05      	cmp	r3, #5
 800970e:	d10c      	bne.n	800972a <HAL_RCC_OscConfig+0x4ce>
 8009710:	4b83      	ldr	r3, [pc, #524]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	4a82      	ldr	r2, [pc, #520]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009716:	f043 0304 	orr.w	r3, r3, #4
 800971a:	6713      	str	r3, [r2, #112]	; 0x70
 800971c:	4b80      	ldr	r3, [pc, #512]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009720:	4a7f      	ldr	r2, [pc, #508]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009722:	f043 0301 	orr.w	r3, r3, #1
 8009726:	6713      	str	r3, [r2, #112]	; 0x70
 8009728:	e00b      	b.n	8009742 <HAL_RCC_OscConfig+0x4e6>
 800972a:	4b7d      	ldr	r3, [pc, #500]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800972c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972e:	4a7c      	ldr	r2, [pc, #496]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009730:	f023 0301 	bic.w	r3, r3, #1
 8009734:	6713      	str	r3, [r2, #112]	; 0x70
 8009736:	4b7a      	ldr	r3, [pc, #488]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	4a79      	ldr	r2, [pc, #484]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800973c:	f023 0304 	bic.w	r3, r3, #4
 8009740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d015      	beq.n	8009776 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800974a:	f7f9 fc2b 	bl	8002fa4 <HAL_GetTick>
 800974e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009750:	e00a      	b.n	8009768 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009752:	f7f9 fc27 	bl	8002fa4 <HAL_GetTick>
 8009756:	4602      	mov	r2, r0
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009760:	4293      	cmp	r3, r2
 8009762:	d901      	bls.n	8009768 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009764:	2303      	movs	r3, #3
 8009766:	e120      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009768:	4b6d      	ldr	r3, [pc, #436]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800976a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0ee      	beq.n	8009752 <HAL_RCC_OscConfig+0x4f6>
 8009774:	e014      	b.n	80097a0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009776:	f7f9 fc15 	bl	8002fa4 <HAL_GetTick>
 800977a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800977c:	e00a      	b.n	8009794 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800977e:	f7f9 fc11 	bl	8002fa4 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	f241 3288 	movw	r2, #5000	; 0x1388
 800978c:	4293      	cmp	r3, r2
 800978e:	d901      	bls.n	8009794 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e10a      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009794:	4b62      	ldr	r3, [pc, #392]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1ee      	bne.n	800977e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80ff 	beq.w	80099a8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80097aa:	4b5d      	ldr	r3, [pc, #372]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097b2:	2b18      	cmp	r3, #24
 80097b4:	f000 80ba 	beq.w	800992c <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	2b02      	cmp	r3, #2
 80097be:	f040 8095 	bne.w	80098ec <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097c2:	4b57      	ldr	r3, [pc, #348]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a56      	ldr	r2, [pc, #344]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80097c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097ce:	f7f9 fbe9 	bl	8002fa4 <HAL_GetTick>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097d4:	e008      	b.n	80097e8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097d6:	f7f9 fbe5 	bl	8002fa4 <HAL_GetTick>
 80097da:	4602      	mov	r2, r0
 80097dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d901      	bls.n	80097e8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80097e4:	2303      	movs	r3, #3
 80097e6:	e0e0      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80097e8:	4b4d      	ldr	r3, [pc, #308]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d1f0      	bne.n	80097d6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80097f4:	4b4a      	ldr	r3, [pc, #296]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80097f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097f8:	4b4a      	ldr	r3, [pc, #296]	; (8009924 <HAL_RCC_OscConfig+0x6c8>)
 80097fa:	4013      	ands	r3, r2
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009804:	0112      	lsls	r2, r2, #4
 8009806:	430a      	orrs	r2, r1
 8009808:	4945      	ldr	r1, [pc, #276]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800980a:	4313      	orrs	r3, r2
 800980c:	628b      	str	r3, [r1, #40]	; 0x28
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	3b01      	subs	r3, #1
 8009814:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981c:	3b01      	subs	r3, #1
 800981e:	025b      	lsls	r3, r3, #9
 8009820:	b29b      	uxth	r3, r3
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009828:	3b01      	subs	r3, #1
 800982a:	041b      	lsls	r3, r3, #16
 800982c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009836:	3b01      	subs	r3, #1
 8009838:	061b      	lsls	r3, r3, #24
 800983a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800983e:	4938      	ldr	r1, [pc, #224]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009840:	4313      	orrs	r3, r2
 8009842:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009844:	4b36      	ldr	r3, [pc, #216]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	4a35      	ldr	r2, [pc, #212]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009850:	4b33      	ldr	r3, [pc, #204]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009854:	4b34      	ldr	r3, [pc, #208]	; (8009928 <HAL_RCC_OscConfig+0x6cc>)
 8009856:	4013      	ands	r3, r2
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800985c:	00d2      	lsls	r2, r2, #3
 800985e:	4930      	ldr	r1, [pc, #192]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009860:	4313      	orrs	r3, r2
 8009862:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009864:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009868:	f023 020c 	bic.w	r2, r3, #12
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	492b      	ldr	r1, [pc, #172]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009872:	4313      	orrs	r3, r2
 8009874:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009876:	4b2a      	ldr	r3, [pc, #168]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987a:	f023 0202 	bic.w	r2, r3, #2
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009882:	4927      	ldr	r1, [pc, #156]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009884:	4313      	orrs	r3, r2
 8009886:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009888:	4b25      	ldr	r3, [pc, #148]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	4a24      	ldr	r2, [pc, #144]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800988e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009892:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009894:	4b22      	ldr	r3, [pc, #136]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a21      	ldr	r2, [pc, #132]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 800989a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800989e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80098a0:	4b1f      	ldr	r3, [pc, #124]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a4:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80098ac:	4b1c      	ldr	r3, [pc, #112]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098b2:	f043 0301 	orr.w	r3, r3, #1
 80098b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098b8:	4b19      	ldr	r3, [pc, #100]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a18      	ldr	r2, [pc, #96]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c4:	f7f9 fb6e 	bl	8002fa4 <HAL_GetTick>
 80098c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098ca:	e008      	b.n	80098de <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098cc:	f7f9 fb6a 	bl	8002fa4 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d901      	bls.n	80098de <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e065      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0f0      	beq.n	80098cc <HAL_RCC_OscConfig+0x670>
 80098ea:	e05d      	b.n	80099a8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a0b      	ldr	r2, [pc, #44]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 80098f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f8:	f7f9 fb54 	bl	8002fa4 <HAL_GetTick>
 80098fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098fe:	e008      	b.n	8009912 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009900:	f7f9 fb50 	bl	8002fa4 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e04b      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009912:	4b03      	ldr	r3, [pc, #12]	; (8009920 <HAL_RCC_OscConfig+0x6c4>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1f0      	bne.n	8009900 <HAL_RCC_OscConfig+0x6a4>
 800991e:	e043      	b.n	80099a8 <HAL_RCC_OscConfig+0x74c>
 8009920:	58024400 	.word	0x58024400
 8009924:	fffffc0c 	.word	0xfffffc0c
 8009928:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800992c:	4b21      	ldr	r3, [pc, #132]	; (80099b4 <HAL_RCC_OscConfig+0x758>)
 800992e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009930:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009932:	4b20      	ldr	r3, [pc, #128]	; (80099b4 <HAL_RCC_OscConfig+0x758>)
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b01      	cmp	r3, #1
 800993e:	d031      	beq.n	80099a4 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	f003 0203 	and.w	r2, r3, #3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800994a:	429a      	cmp	r2, r3
 800994c:	d12a      	bne.n	80099a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	091b      	lsrs	r3, r3, #4
 8009952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800995a:	429a      	cmp	r2, r3
 800995c:	d122      	bne.n	80099a4 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009968:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800996a:	429a      	cmp	r2, r3
 800996c:	d11a      	bne.n	80099a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	0a5b      	lsrs	r3, r3, #9
 8009972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800997c:	429a      	cmp	r2, r3
 800997e:	d111      	bne.n	80099a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	0c1b      	lsrs	r3, r3, #16
 8009984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800998e:	429a      	cmp	r2, r3
 8009990:	d108      	bne.n	80099a4 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	0e1b      	lsrs	r3, r3, #24
 8009996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d001      	beq.n	80099a8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3730      	adds	r7, #48	; 0x30
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	58024400 	.word	0x58024400

080099b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e19c      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099cc:	4b8a      	ldr	r3, [pc, #552]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 030f 	and.w	r3, r3, #15
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d910      	bls.n	80099fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b87      	ldr	r3, [pc, #540]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 020f 	bic.w	r2, r3, #15
 80099e2:	4985      	ldr	r1, [pc, #532]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099ea:	4b83      	ldr	r3, [pc, #524]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 030f 	and.w	r3, r3, #15
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d001      	beq.n	80099fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e184      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d010      	beq.n	8009a2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	4b7b      	ldr	r3, [pc, #492]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d908      	bls.n	8009a2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a18:	4b78      	ldr	r3, [pc, #480]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	4975      	ldr	r1, [pc, #468]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d010      	beq.n	8009a58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695a      	ldr	r2, [r3, #20]
 8009a3a:	4b70      	ldr	r3, [pc, #448]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d908      	bls.n	8009a58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a46:	4b6d      	ldr	r3, [pc, #436]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	496a      	ldr	r1, [pc, #424]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d010      	beq.n	8009a86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	4b64      	ldr	r3, [pc, #400]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d908      	bls.n	8009a86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a74:	4b61      	ldr	r3, [pc, #388]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	495e      	ldr	r1, [pc, #376]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d010      	beq.n	8009ab4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	69da      	ldr	r2, [r3, #28]
 8009a96:	4b59      	ldr	r3, [pc, #356]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d908      	bls.n	8009ab4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009aa2:	4b56      	ldr	r3, [pc, #344]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	4953      	ldr	r1, [pc, #332]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0302 	and.w	r3, r3, #2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d010      	beq.n	8009ae2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68da      	ldr	r2, [r3, #12]
 8009ac4:	4b4d      	ldr	r3, [pc, #308]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f003 030f 	and.w	r3, r3, #15
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d908      	bls.n	8009ae2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad0:	4b4a      	ldr	r3, [pc, #296]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	f023 020f 	bic.w	r2, r3, #15
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	4947      	ldr	r1, [pc, #284]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d055      	beq.n	8009b9a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009aee:	4b43      	ldr	r3, [pc, #268]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	4940      	ldr	r1, [pc, #256]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d107      	bne.n	8009b18 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b08:	4b3c      	ldr	r3, [pc, #240]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d121      	bne.n	8009b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0f6      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d107      	bne.n	8009b30 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b20:	4b36      	ldr	r3, [pc, #216]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d115      	bne.n	8009b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e0ea      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d107      	bne.n	8009b48 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b38:	4b30      	ldr	r3, [pc, #192]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d109      	bne.n	8009b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e0de      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b48:	4b2c      	ldr	r3, [pc, #176]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0d6      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b58:	4b28      	ldr	r3, [pc, #160]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	f023 0207 	bic.w	r2, r3, #7
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4925      	ldr	r1, [pc, #148]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b6a:	f7f9 fa1b 	bl	8002fa4 <HAL_GetTick>
 8009b6e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b70:	e00a      	b.n	8009b88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b72:	f7f9 fa17 	bl	8002fa4 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e0be      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d1eb      	bne.n	8009b72 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0302 	and.w	r3, r3, #2
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	4b14      	ldr	r3, [pc, #80]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d208      	bcs.n	8009bc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009bb8:	699b      	ldr	r3, [r3, #24]
 8009bba:	f023 020f 	bic.w	r2, r3, #15
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	490e      	ldr	r1, [pc, #56]	; (8009bfc <HAL_RCC_ClockConfig+0x244>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 030f 	and.w	r3, r3, #15
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d214      	bcs.n	8009c00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bd6:	4b08      	ldr	r3, [pc, #32]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f023 020f 	bic.w	r2, r3, #15
 8009bde:	4906      	ldr	r1, [pc, #24]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009be6:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <HAL_RCC_ClockConfig+0x240>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 030f 	and.w	r3, r3, #15
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d005      	beq.n	8009c00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e086      	b.n	8009d06 <HAL_RCC_ClockConfig+0x34e>
 8009bf8:	52002000 	.word	0x52002000
 8009bfc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d010      	beq.n	8009c2e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	4b3f      	ldr	r3, [pc, #252]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d208      	bcs.n	8009c2e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009c1c:	4b3c      	ldr	r3, [pc, #240]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c1e:	699b      	ldr	r3, [r3, #24]
 8009c20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	4939      	ldr	r1, [pc, #228]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d010      	beq.n	8009c5c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	695a      	ldr	r2, [r3, #20]
 8009c3e:	4b34      	ldr	r3, [pc, #208]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c40:	69db      	ldr	r3, [r3, #28]
 8009c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d208      	bcs.n	8009c5c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009c4a:	4b31      	ldr	r3, [pc, #196]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	695b      	ldr	r3, [r3, #20]
 8009c56:	492e      	ldr	r1, [pc, #184]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d010      	beq.n	8009c8a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699a      	ldr	r2, [r3, #24]
 8009c6c:	4b28      	ldr	r3, [pc, #160]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d208      	bcs.n	8009c8a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c78:	4b25      	ldr	r3, [pc, #148]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c7a:	69db      	ldr	r3, [r3, #28]
 8009c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	4922      	ldr	r1, [pc, #136]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d010      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	69da      	ldr	r2, [r3, #28]
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d208      	bcs.n	8009cb8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ca6:	4b1a      	ldr	r3, [pc, #104]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009ca8:	6a1b      	ldr	r3, [r3, #32]
 8009caa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	4917      	ldr	r1, [pc, #92]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009cb8:	f000 f834 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	4b14      	ldr	r3, [pc, #80]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	4912      	ldr	r1, [pc, #72]	; (8009d14 <HAL_RCC_ClockConfig+0x35c>)
 8009cca:	5ccb      	ldrb	r3, [r1, r3]
 8009ccc:	f003 031f 	and.w	r3, r3, #31
 8009cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009cd6:	4b0e      	ldr	r3, [pc, #56]	; (8009d10 <HAL_RCC_ClockConfig+0x358>)
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f003 030f 	and.w	r3, r3, #15
 8009cde:	4a0d      	ldr	r2, [pc, #52]	; (8009d14 <HAL_RCC_ClockConfig+0x35c>)
 8009ce0:	5cd3      	ldrb	r3, [r2, r3]
 8009ce2:	f003 031f 	and.w	r3, r3, #31
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	4a0a      	ldr	r2, [pc, #40]	; (8009d18 <HAL_RCC_ClockConfig+0x360>)
 8009cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <HAL_RCC_ClockConfig+0x364>)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009cf6:	4b0a      	ldr	r3, [pc, #40]	; (8009d20 <HAL_RCC_ClockConfig+0x368>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7f9 f908 	bl	8002f10 <HAL_InitTick>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	58024400 	.word	0x58024400
 8009d14:	0801ac10 	.word	0x0801ac10
 8009d18:	24000004 	.word	0x24000004
 8009d1c:	24000000 	.word	0x24000000
 8009d20:	24000008 	.word	0x24000008

08009d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b089      	sub	sp, #36	; 0x24
 8009d28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d2a:	4bb3      	ldr	r3, [pc, #716]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d32:	2b18      	cmp	r3, #24
 8009d34:	f200 8155 	bhi.w	8009fe2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009d38:	a201      	add	r2, pc, #4	; (adr r2, 8009d40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3e:	bf00      	nop
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009fe3 	.word	0x08009fe3
 8009d48:	08009fe3 	.word	0x08009fe3
 8009d4c:	08009fe3 	.word	0x08009fe3
 8009d50:	08009fe3 	.word	0x08009fe3
 8009d54:	08009fe3 	.word	0x08009fe3
 8009d58:	08009fe3 	.word	0x08009fe3
 8009d5c:	08009fe3 	.word	0x08009fe3
 8009d60:	08009dcb 	.word	0x08009dcb
 8009d64:	08009fe3 	.word	0x08009fe3
 8009d68:	08009fe3 	.word	0x08009fe3
 8009d6c:	08009fe3 	.word	0x08009fe3
 8009d70:	08009fe3 	.word	0x08009fe3
 8009d74:	08009fe3 	.word	0x08009fe3
 8009d78:	08009fe3 	.word	0x08009fe3
 8009d7c:	08009fe3 	.word	0x08009fe3
 8009d80:	08009dd1 	.word	0x08009dd1
 8009d84:	08009fe3 	.word	0x08009fe3
 8009d88:	08009fe3 	.word	0x08009fe3
 8009d8c:	08009fe3 	.word	0x08009fe3
 8009d90:	08009fe3 	.word	0x08009fe3
 8009d94:	08009fe3 	.word	0x08009fe3
 8009d98:	08009fe3 	.word	0x08009fe3
 8009d9c:	08009fe3 	.word	0x08009fe3
 8009da0:	08009dd7 	.word	0x08009dd7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da4:	4b94      	ldr	r3, [pc, #592]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0320 	and.w	r3, r3, #32
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db0:	4b91      	ldr	r3, [pc, #580]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	4a90      	ldr	r2, [pc, #576]	; (8009ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009dc2:	e111      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009dc4:	4b8d      	ldr	r3, [pc, #564]	; (8009ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dc6:	61bb      	str	r3, [r7, #24]
    break;
 8009dc8:	e10e      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009dca:	4b8d      	ldr	r3, [pc, #564]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009dcc:	61bb      	str	r3, [r7, #24]
    break;
 8009dce:	e10b      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009dd0:	4b8c      	ldr	r3, [pc, #560]	; (800a004 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009dd2:	61bb      	str	r3, [r7, #24]
    break;
 8009dd4:	e108      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009dd6:	4b88      	ldr	r3, [pc, #544]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009de0:	4b85      	ldr	r3, [pc, #532]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	091b      	lsrs	r3, r3, #4
 8009de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009dec:	4b82      	ldr	r3, [pc, #520]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	f003 0301 	and.w	r3, r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009df6:	4b80      	ldr	r3, [pc, #512]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	08db      	lsrs	r3, r3, #3
 8009dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	fb02 f303 	mul.w	r3, r2, r3
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 80e1 	beq.w	8009fdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	f000 8083 	beq.w	8009f28 <HAL_RCC_GetSysClockFreq+0x204>
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f200 80a1 	bhi.w	8009f6c <HAL_RCC_GetSysClockFreq+0x248>
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_RCC_GetSysClockFreq+0x114>
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d056      	beq.n	8009ee4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009e36:	e099      	b.n	8009f6c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e38:	4b6f      	ldr	r3, [pc, #444]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 0320 	and.w	r3, r3, #32
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d02d      	beq.n	8009ea0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e44:	4b6c      	ldr	r3, [pc, #432]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	08db      	lsrs	r3, r3, #3
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	4a6b      	ldr	r2, [pc, #428]	; (8009ffc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009e50:	fa22 f303 	lsr.w	r3, r2, r3
 8009e54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	ee07 3a90 	vmov	s15, r3
 8009e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e6e:	4b62      	ldr	r3, [pc, #392]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e82:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009e9e:	e087      	b.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	ee07 3a90 	vmov	s15, r3
 8009ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a00c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eb2:	4b51      	ldr	r3, [pc, #324]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ec6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ee2:	e065      	b.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	ee07 3a90 	vmov	s15, r3
 8009eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eee:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ef6:	4b40      	ldr	r3, [pc, #256]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f26:	e043      	b.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	ee07 3a90 	vmov	s15, r3
 8009f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f32:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a014 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f3a:	4b2f      	ldr	r3, [pc, #188]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f42:	ee07 3a90 	vmov	s15, r3
 8009f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f6a:	e021      	b.n	8009fb0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	ee07 3a90 	vmov	s15, r3
 8009f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f76:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a010 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7e:	4b1e      	ldr	r3, [pc, #120]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f86:	ee07 3a90 	vmov	s15, r3
 8009f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a008 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009fb0:	4b11      	ldr	r3, [pc, #68]	; (8009ff8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb4:	0a5b      	lsrs	r3, r3, #9
 8009fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fba:	3301      	adds	r3, #1
 8009fbc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	ee07 3a90 	vmov	s15, r3
 8009fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fd4:	ee17 3a90 	vmov	r3, s15
 8009fd8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009fda:	e005      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61bb      	str	r3, [r7, #24]
    break;
 8009fe0:	e002      	b.n	8009fe8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009fe2:	4b07      	ldr	r3, [pc, #28]	; (800a000 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009fe4:	61bb      	str	r3, [r7, #24]
    break;
 8009fe6:	bf00      	nop
  }

  return sysclockfreq;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3724      	adds	r7, #36	; 0x24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	003d0900 	.word	0x003d0900
 800a004:	007a1200 	.word	0x007a1200
 800a008:	46000000 	.word	0x46000000
 800a00c:	4c742400 	.word	0x4c742400
 800a010:	4a742400 	.word	0x4a742400
 800a014:	4af42400 	.word	0x4af42400

0800a018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a01e:	f7ff fe81 	bl	8009d24 <HAL_RCC_GetSysClockFreq>
 800a022:	4602      	mov	r2, r0
 800a024:	4b10      	ldr	r3, [pc, #64]	; (800a068 <HAL_RCC_GetHCLKFreq+0x50>)
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	0a1b      	lsrs	r3, r3, #8
 800a02a:	f003 030f 	and.w	r3, r3, #15
 800a02e:	490f      	ldr	r1, [pc, #60]	; (800a06c <HAL_RCC_GetHCLKFreq+0x54>)
 800a030:	5ccb      	ldrb	r3, [r1, r3]
 800a032:	f003 031f 	and.w	r3, r3, #31
 800a036:	fa22 f303 	lsr.w	r3, r2, r3
 800a03a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <HAL_RCC_GetHCLKFreq+0x50>)
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	f003 030f 	and.w	r3, r3, #15
 800a044:	4a09      	ldr	r2, [pc, #36]	; (800a06c <HAL_RCC_GetHCLKFreq+0x54>)
 800a046:	5cd3      	ldrb	r3, [r2, r3]
 800a048:	f003 031f 	and.w	r3, r3, #31
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	fa22 f303 	lsr.w	r3, r2, r3
 800a052:	4a07      	ldr	r2, [pc, #28]	; (800a070 <HAL_RCC_GetHCLKFreq+0x58>)
 800a054:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a056:	4a07      	ldr	r2, [pc, #28]	; (800a074 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a05c:	4b04      	ldr	r3, [pc, #16]	; (800a070 <HAL_RCC_GetHCLKFreq+0x58>)
 800a05e:	681b      	ldr	r3, [r3, #0]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	58024400 	.word	0x58024400
 800a06c:	0801ac10 	.word	0x0801ac10
 800a070:	24000004 	.word	0x24000004
 800a074:	24000000 	.word	0x24000000

0800a078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a07c:	f7ff ffcc 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 800a080:	4602      	mov	r2, r0
 800a082:	4b06      	ldr	r3, [pc, #24]	; (800a09c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	091b      	lsrs	r3, r3, #4
 800a088:	f003 0307 	and.w	r3, r3, #7
 800a08c:	4904      	ldr	r1, [pc, #16]	; (800a0a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a08e:	5ccb      	ldrb	r3, [r1, r3]
 800a090:	f003 031f 	and.w	r3, r3, #31
 800a094:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a098:	4618      	mov	r0, r3
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	0801ac10 	.word	0x0801ac10

0800a0a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a0a8:	f7ff ffb6 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	0a1b      	lsrs	r3, r3, #8
 800a0b4:	f003 0307 	and.w	r3, r3, #7
 800a0b8:	4904      	ldr	r1, [pc, #16]	; (800a0cc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a0ba:	5ccb      	ldrb	r3, [r1, r3]
 800a0bc:	f003 031f 	and.w	r3, r3, #31
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	58024400 	.word	0x58024400
 800a0cc:	0801ac10 	.word	0x0801ac10

0800a0d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a0d8:	2300      	movs	r3, #0
 800a0da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a0dc:	2300      	movs	r3, #0
 800a0de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d03f      	beq.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0f4:	d02a      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a0f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a0fa:	d824      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a0fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a100:	d018      	beq.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a106:	d81e      	bhi.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a10c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a110:	d007      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a112:	e018      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a114:	4ba4      	ldr	r3, [pc, #656]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a118:	4aa3      	ldr	r2, [pc, #652]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a11a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a11e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a120:	e015      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	3304      	adds	r3, #4
 800a126:	2102      	movs	r1, #2
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 ff01 	bl	800bf30 <RCCEx_PLL2_Config>
 800a12e:	4603      	mov	r3, r0
 800a130:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a132:	e00c      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3324      	adds	r3, #36	; 0x24
 800a138:	2102      	movs	r1, #2
 800a13a:	4618      	mov	r0, r3
 800a13c:	f001 ffaa 	bl	800c094 <RCCEx_PLL3_Config>
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a144:	e003      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	e000      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a14c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a154:	4b94      	ldr	r3, [pc, #592]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a160:	4991      	ldr	r1, [pc, #580]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a162:	4313      	orrs	r3, r2
 800a164:	650b      	str	r3, [r1, #80]	; 0x50
 800a166:	e001      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a174:	2b00      	cmp	r3, #0
 800a176:	d03d      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d826      	bhi.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a180:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a186:	bf00      	nop
 800a188:	0800a19d 	.word	0x0800a19d
 800a18c:	0800a1ab 	.word	0x0800a1ab
 800a190:	0800a1bd 	.word	0x0800a1bd
 800a194:	0800a1d5 	.word	0x0800a1d5
 800a198:	0800a1d5 	.word	0x0800a1d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a19c:	4b82      	ldr	r3, [pc, #520]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	4a81      	ldr	r2, [pc, #516]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1a8:	e015      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f001 febd 	bl	800bf30 <RCCEx_PLL2_Config>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1ba:	e00c      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3324      	adds	r3, #36	; 0x24
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 ff66 	bl	800c094 <RCCEx_PLL3_Config>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1cc:	e003      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d2:	e000      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a1d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d109      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1dc:	4b72      	ldr	r3, [pc, #456]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1e0:	f023 0207 	bic.w	r2, r3, #7
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e8:	496f      	ldr	r1, [pc, #444]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	650b      	str	r3, [r1, #80]	; 0x50
 800a1ee:	e001      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d051      	beq.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a206:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a20a:	d036      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a20c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a210:	d830      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a212:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a216:	d032      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a21c:	d82a      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a21e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a222:	d02e      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a224:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a228:	d824      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a22a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a22e:	d018      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a234:	d81e      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a23a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a23e:	d007      	beq.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a240:	e018      	b.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a242:	4b59      	ldr	r3, [pc, #356]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a58      	ldr	r2, [pc, #352]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a24e:	e019      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	3304      	adds	r3, #4
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f001 fe6a 	bl	800bf30 <RCCEx_PLL2_Config>
 800a25c:	4603      	mov	r3, r0
 800a25e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a260:	e010      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3324      	adds	r3, #36	; 0x24
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 ff13 	bl	800c094 <RCCEx_PLL3_Config>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a272:	e007      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
      break;
 800a278:	e004      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a27a:	bf00      	nop
 800a27c:	e002      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a27e:	bf00      	nop
 800a280:	e000      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a282:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d10a      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a28a:	4b47      	ldr	r3, [pc, #284]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a298:	4943      	ldr	r1, [pc, #268]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	658b      	str	r3, [r1, #88]	; 0x58
 800a29e:	e001      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d051      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a2ba:	d036      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a2bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a2c0:	d830      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2c6:	d032      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a2c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2cc:	d82a      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2d2:	d02e      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a2d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2d8:	d824      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2de:	d018      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a2e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e4:	d81e      	bhi.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a2ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2ee:	d007      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a2f0:	e018      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f2:	4b2d      	ldr	r3, [pc, #180]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4a2c      	ldr	r2, [pc, #176]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a2fe:	e019      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	3304      	adds	r3, #4
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f001 fe12 	bl	800bf30 <RCCEx_PLL2_Config>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a310:	e010      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3324      	adds	r3, #36	; 0x24
 800a316:	2100      	movs	r1, #0
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 febb 	bl	800c094 <RCCEx_PLL3_Config>
 800a31e:	4603      	mov	r3, r0
 800a320:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a322:	e007      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	75fb      	strb	r3, [r7, #23]
      break;
 800a328:	e004      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a332:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a33a:	4b1b      	ldr	r3, [pc, #108]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a33e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a348:	4917      	ldr	r1, [pc, #92]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	658b      	str	r3, [r1, #88]	; 0x58
 800a34e:	e001      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d035      	beq.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a364:	2b30      	cmp	r3, #48	; 0x30
 800a366:	d01c      	beq.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a368:	2b30      	cmp	r3, #48	; 0x30
 800a36a:	d817      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d00c      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d813      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a374:	2b00      	cmp	r3, #0
 800a376:	d019      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a378:	2b10      	cmp	r3, #16
 800a37a:	d10f      	bne.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a37c:	4b0a      	ldr	r3, [pc, #40]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a380:	4a09      	ldr	r2, [pc, #36]	; (800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a386:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a388:	e011      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3304      	adds	r3, #4
 800a38e:	2102      	movs	r1, #2
 800a390:	4618      	mov	r0, r3
 800a392:	f001 fdcd 	bl	800bf30 <RCCEx_PLL2_Config>
 800a396:	4603      	mov	r3, r0
 800a398:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a39a:	e008      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a0:	e005      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e003      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a3a6:	bf00      	nop
 800a3a8:	58024400 	.word	0x58024400
      break;
 800a3ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ae:	7dfb      	ldrb	r3, [r7, #23]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d109      	bne.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a3b4:	4ba3      	ldr	r3, [pc, #652]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a3b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3c0:	49a0      	ldr	r1, [pc, #640]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3c6:	e001      	b.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d047      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e0:	d030      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a3e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e6:	d82a      	bhi.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a3e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3ec:	d02c      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a3ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3f2:	d824      	bhi.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a3f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f8:	d018      	beq.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a3fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fe:	d81e      	bhi.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a408:	d007      	beq.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a40a:	e018      	b.n	800a43e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40c:	4b8d      	ldr	r3, [pc, #564]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a410:	4a8c      	ldr	r2, [pc, #560]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a418:	e017      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f001 fd85 	bl	800bf30 <RCCEx_PLL2_Config>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a42a:	e00e      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3324      	adds	r3, #36	; 0x24
 800a430:	2100      	movs	r1, #0
 800a432:	4618      	mov	r0, r3
 800a434:	f001 fe2e 	bl	800c094 <RCCEx_PLL3_Config>
 800a438:	4603      	mov	r3, r0
 800a43a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a43c:	e005      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a43e:	2301      	movs	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]
      break;
 800a442:	e002      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a444:	bf00      	nop
 800a446:	e000      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d109      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a450:	4b7c      	ldr	r3, [pc, #496]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a454:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a45c:	4979      	ldr	r1, [pc, #484]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	650b      	str	r3, [r1, #80]	; 0x50
 800a462:	e001      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d049      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a478:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a47c:	d02e      	beq.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a47e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a482:	d828      	bhi.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a488:	d02a      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a48a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a48e:	d822      	bhi.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a490:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a494:	d026      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a496:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a49a:	d81c      	bhi.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a0:	d010      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a6:	d816      	bhi.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01d      	beq.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4b0:	d111      	bne.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f001 fd39 	bl	800bf30 <RCCEx_PLL2_Config>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a4c2:	e012      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3324      	adds	r3, #36	; 0x24
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 fde2 	bl	800c094 <RCCEx_PLL3_Config>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a4d4:	e009      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4da:	e006      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4dc:	bf00      	nop
 800a4de:	e004      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4e0:	bf00      	nop
 800a4e2:	e002      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4e4:	bf00      	nop
 800a4e6:	e000      	b.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a4e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d109      	bne.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4f0:	4b54      	ldr	r3, [pc, #336]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	4951      	ldr	r1, [pc, #324]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	650b      	str	r3, [r1, #80]	; 0x50
 800a502:	e001      	b.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a504:	7dfb      	ldrb	r3, [r7, #23]
 800a506:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d04b      	beq.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a51a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a51e:	d02e      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a524:	d828      	bhi.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52a:	d02a      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a530:	d822      	bhi.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a532:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a536:	d026      	beq.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a53c:	d81c      	bhi.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a53e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a542:	d010      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a548:	d816      	bhi.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d01d      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a54e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a552:	d111      	bne.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3304      	adds	r3, #4
 800a558:	2101      	movs	r1, #1
 800a55a:	4618      	mov	r0, r3
 800a55c:	f001 fce8 	bl	800bf30 <RCCEx_PLL2_Config>
 800a560:	4603      	mov	r3, r0
 800a562:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a564:	e012      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3324      	adds	r3, #36	; 0x24
 800a56a:	2101      	movs	r1, #1
 800a56c:	4618      	mov	r0, r3
 800a56e:	f001 fd91 	bl	800c094 <RCCEx_PLL3_Config>
 800a572:	4603      	mov	r3, r0
 800a574:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a576:	e009      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	75fb      	strb	r3, [r7, #23]
      break;
 800a57c:	e006      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a57e:	bf00      	nop
 800a580:	e004      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a582:	bf00      	nop
 800a584:	e002      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a586:	bf00      	nop
 800a588:	e000      	b.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a58a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10a      	bne.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a592:	4b2c      	ldr	r3, [pc, #176]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a5a0:	4928      	ldr	r1, [pc, #160]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	658b      	str	r3, [r1, #88]	; 0x58
 800a5a6:	e001      	b.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a8:	7dfb      	ldrb	r3, [r7, #23]
 800a5aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d02f      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c0:	d00e      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c6:	d814      	bhi.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d015      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a5cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5d0:	d10f      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5d2:	4b1c      	ldr	r3, [pc, #112]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d6:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a5d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5de:	e00c      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f001 fca2 	bl	800bf30 <RCCEx_PLL2_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5f0:	e003      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f6:	e000      	b.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a5f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d109      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a600:	4b10      	ldr	r3, [pc, #64]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a604:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a60c:	490d      	ldr	r1, [pc, #52]	; (800a644 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	650b      	str	r3, [r1, #80]	; 0x50
 800a612:	e001      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d034      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d81d      	bhi.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a62c:	a201      	add	r2, pc, #4	; (adr r2, 800a634 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a632:	bf00      	nop
 800a634:	0800a66f 	.word	0x0800a66f
 800a638:	0800a649 	.word	0x0800a649
 800a63c:	0800a657 	.word	0x0800a657
 800a640:	0800a66f 	.word	0x0800a66f
 800a644:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a648:	4bb1      	ldr	r3, [pc, #708]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	4ab0      	ldr	r2, [pc, #704]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a654:	e00c      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	3304      	adds	r3, #4
 800a65a:	2102      	movs	r1, #2
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 fc67 	bl	800bf30 <RCCEx_PLL2_Config>
 800a662:	4603      	mov	r3, r0
 800a664:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a666:	e003      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]
      break;
 800a66c:	e000      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a66e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d109      	bne.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a676:	4ba6      	ldr	r3, [pc, #664]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67a:	f023 0203 	bic.w	r2, r3, #3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a682:	49a3      	ldr	r1, [pc, #652]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a684:	4313      	orrs	r3, r2
 800a686:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a688:	e001      	b.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a68a:	7dfb      	ldrb	r3, [r7, #23]
 800a68c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 8086 	beq.w	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a69c:	4b9d      	ldr	r3, [pc, #628]	; (800a914 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a9c      	ldr	r2, [pc, #624]	; (800a914 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a6a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a6a8:	f7f8 fc7c 	bl	8002fa4 <HAL_GetTick>
 800a6ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6ae:	e009      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6b0:	f7f8 fc78 	bl	8002fa4 <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b64      	cmp	r3, #100	; 0x64
 800a6bc:	d902      	bls.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	75fb      	strb	r3, [r7, #23]
        break;
 800a6c2:	e005      	b.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6c4:	4b93      	ldr	r3, [pc, #588]	; (800a914 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0ef      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d166      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a6d6:	4b8e      	ldr	r3, [pc, #568]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a6d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6e0:	4053      	eors	r3, r2
 800a6e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d013      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6ea:	4b89      	ldr	r3, [pc, #548]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6f4:	4b86      	ldr	r3, [pc, #536]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f8:	4a85      	ldr	r2, [pc, #532]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a6fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a700:	4b83      	ldr	r3, [pc, #524]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a704:	4a82      	ldr	r2, [pc, #520]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a70a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a70c:	4a80      	ldr	r2, [pc, #512]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a71c:	d115      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a71e:	f7f8 fc41 	bl	8002fa4 <HAL_GetTick>
 800a722:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a724:	e00b      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a726:	f7f8 fc3d 	bl	8002fa4 <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	f241 3288 	movw	r2, #5000	; 0x1388
 800a734:	4293      	cmp	r3, r2
 800a736:	d902      	bls.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	75fb      	strb	r3, [r7, #23]
            break;
 800a73c:	e005      	b.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a73e:	4b74      	ldr	r3, [pc, #464]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0ed      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d126      	bne.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a75a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a75e:	d10d      	bne.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a760:	4b6b      	ldr	r3, [pc, #428]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a76e:	0919      	lsrs	r1, r3, #4
 800a770:	4b69      	ldr	r3, [pc, #420]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a772:	400b      	ands	r3, r1
 800a774:	4966      	ldr	r1, [pc, #408]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a776:	4313      	orrs	r3, r2
 800a778:	610b      	str	r3, [r1, #16]
 800a77a:	e005      	b.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a77c:	4b64      	ldr	r3, [pc, #400]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	4a63      	ldr	r2, [pc, #396]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a782:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a786:	6113      	str	r3, [r2, #16]
 800a788:	4b61      	ldr	r3, [pc, #388]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a78a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a796:	495e      	ldr	r1, [pc, #376]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a798:	4313      	orrs	r3, r2
 800a79a:	670b      	str	r3, [r1, #112]	; 0x70
 800a79c:	e004      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a79e:	7dfb      	ldrb	r3, [r7, #23]
 800a7a0:	75bb      	strb	r3, [r7, #22]
 800a7a2:	e001      	b.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d07e      	beq.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b8:	2b28      	cmp	r3, #40	; 0x28
 800a7ba:	d867      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a7bc:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a893 	.word	0x0800a893
 800a7c8:	0800a88d 	.word	0x0800a88d
 800a7cc:	0800a88d 	.word	0x0800a88d
 800a7d0:	0800a88d 	.word	0x0800a88d
 800a7d4:	0800a88d 	.word	0x0800a88d
 800a7d8:	0800a88d 	.word	0x0800a88d
 800a7dc:	0800a88d 	.word	0x0800a88d
 800a7e0:	0800a88d 	.word	0x0800a88d
 800a7e4:	0800a869 	.word	0x0800a869
 800a7e8:	0800a88d 	.word	0x0800a88d
 800a7ec:	0800a88d 	.word	0x0800a88d
 800a7f0:	0800a88d 	.word	0x0800a88d
 800a7f4:	0800a88d 	.word	0x0800a88d
 800a7f8:	0800a88d 	.word	0x0800a88d
 800a7fc:	0800a88d 	.word	0x0800a88d
 800a800:	0800a88d 	.word	0x0800a88d
 800a804:	0800a87b 	.word	0x0800a87b
 800a808:	0800a88d 	.word	0x0800a88d
 800a80c:	0800a88d 	.word	0x0800a88d
 800a810:	0800a88d 	.word	0x0800a88d
 800a814:	0800a88d 	.word	0x0800a88d
 800a818:	0800a88d 	.word	0x0800a88d
 800a81c:	0800a88d 	.word	0x0800a88d
 800a820:	0800a88d 	.word	0x0800a88d
 800a824:	0800a893 	.word	0x0800a893
 800a828:	0800a88d 	.word	0x0800a88d
 800a82c:	0800a88d 	.word	0x0800a88d
 800a830:	0800a88d 	.word	0x0800a88d
 800a834:	0800a88d 	.word	0x0800a88d
 800a838:	0800a88d 	.word	0x0800a88d
 800a83c:	0800a88d 	.word	0x0800a88d
 800a840:	0800a88d 	.word	0x0800a88d
 800a844:	0800a893 	.word	0x0800a893
 800a848:	0800a88d 	.word	0x0800a88d
 800a84c:	0800a88d 	.word	0x0800a88d
 800a850:	0800a88d 	.word	0x0800a88d
 800a854:	0800a88d 	.word	0x0800a88d
 800a858:	0800a88d 	.word	0x0800a88d
 800a85c:	0800a88d 	.word	0x0800a88d
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	0800a893 	.word	0x0800a893
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3304      	adds	r3, #4
 800a86c:	2101      	movs	r1, #1
 800a86e:	4618      	mov	r0, r3
 800a870:	f001 fb5e 	bl	800bf30 <RCCEx_PLL2_Config>
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a878:	e00c      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3324      	adds	r3, #36	; 0x24
 800a87e:	2101      	movs	r1, #1
 800a880:	4618      	mov	r0, r3
 800a882:	f001 fc07 	bl	800c094 <RCCEx_PLL3_Config>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a88a:	e003      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	75fb      	strb	r3, [r7, #23]
      break;
 800a890:	e000      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a892:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d109      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a89a:	4b1d      	ldr	r3, [pc, #116]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a6:	491a      	ldr	r1, [pc, #104]	; (800a910 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	654b      	str	r3, [r1, #84]	; 0x54
 800a8ac:	e001      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
 800a8b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d03e      	beq.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d820      	bhi.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a91d 	.word	0x0800a91d
 800a8d0:	0800a8e5 	.word	0x0800a8e5
 800a8d4:	0800a8f7 	.word	0x0800a8f7
 800a8d8:	0800a91d 	.word	0x0800a91d
 800a8dc:	0800a91d 	.word	0x0800a91d
 800a8e0:	0800a91d 	.word	0x0800a91d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 fb20 	bl	800bf30 <RCCEx_PLL2_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a8f4:	e013      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3324      	adds	r3, #36	; 0x24
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fbc9 	bl	800c094 <RCCEx_PLL3_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a906:	e00a      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	75fb      	strb	r3, [r7, #23]
      break;
 800a90c:	e007      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a90e:	bf00      	nop
 800a910:	58024400 	.word	0x58024400
 800a914:	58024800 	.word	0x58024800
 800a918:	00ffffcf 	.word	0x00ffffcf
      break;
 800a91c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d109      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a924:	4b9f      	ldr	r3, [pc, #636]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a928:	f023 0207 	bic.w	r2, r3, #7
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a930:	499c      	ldr	r1, [pc, #624]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a932:	4313      	orrs	r3, r2
 800a934:	654b      	str	r3, [r1, #84]	; 0x54
 800a936:	e001      	b.n	800a93c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a938:	7dfb      	ldrb	r3, [r7, #23]
 800a93a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d039      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a94e:	2b05      	cmp	r3, #5
 800a950:	d820      	bhi.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a952:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a99b 	.word	0x0800a99b
 800a95c:	0800a971 	.word	0x0800a971
 800a960:	0800a983 	.word	0x0800a983
 800a964:	0800a99b 	.word	0x0800a99b
 800a968:	0800a99b 	.word	0x0800a99b
 800a96c:	0800a99b 	.word	0x0800a99b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3304      	adds	r3, #4
 800a974:	2101      	movs	r1, #1
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fada 	bl	800bf30 <RCCEx_PLL2_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a980:	e00c      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	3324      	adds	r3, #36	; 0x24
 800a986:	2101      	movs	r1, #1
 800a988:	4618      	mov	r0, r3
 800a98a:	f001 fb83 	bl	800c094 <RCCEx_PLL3_Config>
 800a98e:	4603      	mov	r3, r0
 800a990:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a992:	e003      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a994:	2301      	movs	r3, #1
 800a996:	75fb      	strb	r3, [r7, #23]
      break;
 800a998:	e000      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a99a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9a2:	4b80      	ldr	r3, [pc, #512]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a6:	f023 0207 	bic.w	r2, r3, #7
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9b0:	497c      	ldr	r1, [pc, #496]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	658b      	str	r3, [r1, #88]	; 0x58
 800a9b6:	e001      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d04b      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d2:	d02e      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a9d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d8:	d828      	bhi.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9de:	d02a      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a9e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e4:	d822      	bhi.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a9e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ea:	d026      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a9ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9f0:	d81c      	bhi.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a9f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f6:	d010      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a9f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9fc:	d816      	bhi.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d01d      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800aa02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa06:	d111      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	3304      	adds	r3, #4
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f001 fa8e 	bl	800bf30 <RCCEx_PLL2_Config>
 800aa14:	4603      	mov	r3, r0
 800aa16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aa18:	e012      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3324      	adds	r3, #36	; 0x24
 800aa1e:	2102      	movs	r1, #2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fb37 	bl	800c094 <RCCEx_PLL3_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aa2a:	e009      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa30:	e006      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800aa32:	bf00      	nop
 800aa34:	e004      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800aa36:	bf00      	nop
 800aa38:	e002      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800aa3a:	bf00      	nop
 800aa3c:	e000      	b.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800aa3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d10a      	bne.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa46:	4b57      	ldr	r3, [pc, #348]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa54:	4953      	ldr	r1, [pc, #332]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	654b      	str	r3, [r1, #84]	; 0x54
 800aa5a:	e001      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5c:	7dfb      	ldrb	r3, [r7, #23]
 800aa5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d04b      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa76:	d02e      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800aa78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa7c:	d828      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800aa7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa82:	d02a      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800aa84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa88:	d822      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800aa8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa8e:	d026      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800aa90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa94:	d81c      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800aa96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa9a:	d010      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800aa9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaa0:	d816      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01d      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800aaa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaaa:	d111      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3304      	adds	r3, #4
 800aab0:	2100      	movs	r1, #0
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fa3c 	bl	800bf30 <RCCEx_PLL2_Config>
 800aab8:	4603      	mov	r3, r0
 800aaba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aabc:	e012      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3324      	adds	r3, #36	; 0x24
 800aac2:	2102      	movs	r1, #2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f001 fae5 	bl	800c094 <RCCEx_PLL3_Config>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aace:	e009      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aad0:	2301      	movs	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
      break;
 800aad4:	e006      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800aad6:	bf00      	nop
 800aad8:	e004      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800aada:	bf00      	nop
 800aadc:	e002      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800aade:	bf00      	nop
 800aae0:	e000      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800aae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aae4:	7dfb      	ldrb	r3, [r7, #23]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10a      	bne.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaea:	4b2e      	ldr	r3, [pc, #184]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aaf8:	492a      	ldr	r1, [pc, #168]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	658b      	str	r3, [r1, #88]	; 0x58
 800aafe:	e001      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d04d      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab1a:	d02e      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ab1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab20:	d828      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ab22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab26:	d02a      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ab28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab2c:	d822      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ab2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab32:	d026      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ab34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab38:	d81c      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ab3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab3e:	d010      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ab40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab44:	d816      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d01d      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ab4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4e:	d111      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	3304      	adds	r3, #4
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 f9ea 	bl	800bf30 <RCCEx_PLL2_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab60:	e012      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3324      	adds	r3, #36	; 0x24
 800ab66:	2102      	movs	r1, #2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f001 fa93 	bl	800c094 <RCCEx_PLL3_Config>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab72:	e009      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	75fb      	strb	r3, [r7, #23]
      break;
 800ab78:	e006      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ab7a:	bf00      	nop
 800ab7c:	e004      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e002      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ab82:	bf00      	nop
 800ab84:	e000      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ab86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10c      	bne.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab8e:	4b05      	ldr	r3, [pc, #20]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab9c:	4901      	ldr	r1, [pc, #4]	; (800aba4 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	658b      	str	r3, [r1, #88]	; 0x58
 800aba2:	e003      	b.n	800abac <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800aba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba8:	7dfb      	ldrb	r3, [r7, #23]
 800abaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0308 	and.w	r3, r3, #8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d018      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abc0:	d10a      	bne.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3324      	adds	r3, #36	; 0x24
 800abc6:	2102      	movs	r1, #2
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 fa63 	bl	800c094 <RCCEx_PLL3_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d001      	beq.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800abd8:	4b8a      	ldr	r3, [pc, #552]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800abda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abe4:	4987      	ldr	r1, [pc, #540]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d01a      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac00:	d10a      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	3324      	adds	r3, #36	; 0x24
 800ac06:	2102      	movs	r1, #2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f001 fa43 	bl	800c094 <RCCEx_PLL3_Config>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac18:	4b7a      	ldr	r3, [pc, #488]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac26:	4977      	ldr	r1, [pc, #476]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d034      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac42:	d01d      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ac44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac48:	d817      	bhi.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ac4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac52:	d009      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ac54:	e011      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3304      	adds	r3, #4
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 f967 	bl	800bf30 <RCCEx_PLL2_Config>
 800ac62:	4603      	mov	r3, r0
 800ac64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac66:	e00c      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3324      	adds	r3, #36	; 0x24
 800ac6c:	2102      	movs	r1, #2
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f001 fa10 	bl	800c094 <RCCEx_PLL3_Config>
 800ac74:	4603      	mov	r3, r0
 800ac76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac78:	e003      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7e:	e000      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ac80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac88:	4b5e      	ldr	r3, [pc, #376]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac96:	495b      	ldr	r1, [pc, #364]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	658b      	str	r3, [r1, #88]	; 0x58
 800ac9c:	e001      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d033      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acb8:	d01c      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800acba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acbe:	d816      	bhi.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800acc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc4:	d003      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800acc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acca:	d007      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800accc:	e00f      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acce:	4b4d      	ldr	r3, [pc, #308]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	4a4c      	ldr	r2, [pc, #304]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800acda:	e00c      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3324      	adds	r3, #36	; 0x24
 800ace0:	2101      	movs	r1, #1
 800ace2:	4618      	mov	r0, r3
 800ace4:	f001 f9d6 	bl	800c094 <RCCEx_PLL3_Config>
 800ace8:	4603      	mov	r3, r0
 800acea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800acec:	e003      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	75fb      	strb	r3, [r7, #23]
      break;
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800acf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acfc:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800acfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad0a:	493e      	ldr	r1, [pc, #248]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	654b      	str	r3, [r1, #84]	; 0x54
 800ad10:	e001      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d029      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800ad2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2e:	d007      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ad30:	e00f      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad32:	4b34      	ldr	r3, [pc, #208]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4a33      	ldr	r2, [pc, #204]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad3e:	e00b      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3304      	adds	r3, #4
 800ad44:	2102      	movs	r1, #2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f001 f8f2 	bl	800bf30 <RCCEx_PLL2_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad50:	e002      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	75fb      	strb	r3, [r7, #23]
      break;
 800ad56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad5e:	4b29      	ldr	r3, [pc, #164]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad6a:	4926      	ldr	r1, [pc, #152]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad70:	e001      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3324      	adds	r3, #36	; 0x24
 800ad86:	2102      	movs	r1, #2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f001 f983 	bl	800c094 <RCCEx_PLL3_Config>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d033      	beq.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ada8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adac:	d017      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800adae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb2:	d811      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800adb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb8:	d013      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800adba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adbe:	d80b      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d010      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc8:	d106      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adca:	4b0e      	ldr	r3, [pc, #56]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	4a0d      	ldr	r2, [pc, #52]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800add0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800add6:	e007      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]
      break;
 800addc:	e004      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800adde:	bf00      	nop
 800ade0:	e002      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ade2:	bf00      	nop
 800ade4:	e000      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ade6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10c      	bne.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adee:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adfa:	4902      	ldr	r1, [pc, #8]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	654b      	str	r3, [r1, #84]	; 0x54
 800ae00:	e004      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800ae02:	bf00      	nop
 800ae04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d008      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae18:	4b29      	ldr	r3, [pc, #164]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae24:	4926      	ldr	r1, [pc, #152]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae26:	4313      	orrs	r3, r2
 800ae28:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d008      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae36:	4b22      	ldr	r3, [pc, #136]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae42:	491f      	ldr	r1, [pc, #124]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00d      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae54:	4b1a      	ldr	r3, [pc, #104]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	4a19      	ldr	r2, [pc, #100]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae5e:	6113      	str	r3, [r2, #16]
 800ae60:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae6a:	4915      	ldr	r1, [pc, #84]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	da08      	bge.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae84:	490e      	ldr	r1, [pc, #56]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d009      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae96:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aea4:	4906      	ldr	r1, [pc, #24]	; (800aec0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aeaa:	7dbb      	ldrb	r3, [r7, #22]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	58024400 	.word	0x58024400

0800aec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b090      	sub	sp, #64	; 0x40
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed2:	f040 8089 	bne.w	800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800aed6:	4b95      	ldr	r3, [pc, #596]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeda:	f003 0307 	and.w	r3, r3, #7
 800aede:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d87d      	bhi.n	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af01 	.word	0x0800af01
 800aef0:	0800af25 	.word	0x0800af25
 800aef4:	0800af49 	.word	0x0800af49
 800aef8:	0800afdd 	.word	0x0800afdd
 800aefc:	0800af6d 	.word	0x0800af6d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af00:	4b8a      	ldr	r3, [pc, #552]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af0c:	d107      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af12:	4618      	mov	r0, r3
 800af14:	f000 feba 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af1c:	e3ef      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af22:	e3ec      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af24:	4b81      	ldr	r3, [pc, #516]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af30:	d107      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af32:	f107 0318 	add.w	r3, r7, #24
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fc00 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af40:	e3dd      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af46:	e3da      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af48:	4b78      	ldr	r3, [pc, #480]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af54:	d107      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fd42 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800af64:	e3cb      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af6a:	e3c8      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800af6c:	4b6f      	ldr	r3, [pc, #444]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af74:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af76:	4b6d      	ldr	r3, [pc, #436]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	2b04      	cmp	r3, #4
 800af80:	d10c      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800af82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af88:	4b68      	ldr	r3, [pc, #416]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	08db      	lsrs	r3, r3, #3
 800af8e:	f003 0303 	and.w	r3, r3, #3
 800af92:	4a67      	ldr	r2, [pc, #412]	; (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800af94:	fa22 f303 	lsr.w	r3, r2, r3
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af9a:	e01e      	b.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af9c:	4b63      	ldr	r3, [pc, #396]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa8:	d106      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800afaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afb0:	d102      	bne.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800afb2:	4b60      	ldr	r3, [pc, #384]	; (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afb6:	e010      	b.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afb8:	4b5c      	ldr	r3, [pc, #368]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afc4:	d106      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800afc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afcc:	d102      	bne.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800afce:	4b5a      	ldr	r3, [pc, #360]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800afd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd2:	e002      	b.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800afd4:	2300      	movs	r3, #0
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800afd8:	e391      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800afda:	e390      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800afdc:	4b57      	ldr	r3, [pc, #348]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800afde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afe0:	e38d      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800afe2:	2300      	movs	r3, #0
 800afe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afe6:	e38a      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afee:	f040 80a7 	bne.w	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800aff2:	4b4e      	ldr	r3, [pc, #312]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800affa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b002:	d054      	beq.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b00a:	f200 808b 	bhi.w	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b010:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b014:	f000 8083 	beq.w	800b11e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b01e:	f200 8081 	bhi.w	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b028:	d02f      	beq.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b030:	d878      	bhi.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800b032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800b038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b03e:	d012      	beq.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800b040:	e070      	b.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b042:	4b3a      	ldr	r3, [pc, #232]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b04a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b04e:	d107      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fe19 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b05e:	e34e      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b064:	e34b      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b066:	4b31      	ldr	r3, [pc, #196]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b06e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b072:	d107      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b074:	f107 0318 	add.w	r3, r7, #24
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fb5f 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b082:	e33c      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b088:	e339      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b08a:	4b28      	ldr	r3, [pc, #160]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b096:	d107      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b098:	f107 030c 	add.w	r3, r7, #12
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fca1 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b0a6:	e32a      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0ac:	e327      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b0ae:	4b1f      	ldr	r3, [pc, #124]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0b6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0b8:	4b1c      	ldr	r3, [pc, #112]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 0304 	and.w	r3, r3, #4
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d10c      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800b0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b0ca:	4b18      	ldr	r3, [pc, #96]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	08db      	lsrs	r3, r3, #3
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	4a16      	ldr	r2, [pc, #88]	; (800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0dc:	e01e      	b.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0de:	4b13      	ldr	r3, [pc, #76]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ea:	d106      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0f2:	d102      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b0f4:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f8:	e010      	b.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b106:	d106      	bne.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800b108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b10e:	d102      	bne.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b110:	4b09      	ldr	r3, [pc, #36]	; (800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b114:	e002      	b.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b11a:	e2f0      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b11c:	e2ef      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b122:	e2ec      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b128:	e2e9      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b12a:	bf00      	nop
 800b12c:	58024400 	.word	0x58024400
 800b130:	03d09000 	.word	0x03d09000
 800b134:	003d0900 	.word	0x003d0900
 800b138:	007a1200 	.word	0x007a1200
 800b13c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b146:	f040 809c 	bne.w	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b14a:	4b9d      	ldr	r3, [pc, #628]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b152:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b15a:	d054      	beq.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b162:	f200 808b 	bhi.w	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b16c:	f000 8083 	beq.w	800b276 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b176:	f200 8081 	bhi.w	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b180:	d02f      	beq.n	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b188:	d878      	bhi.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b196:	d012      	beq.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b198:	e070      	b.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b19a:	4b89      	ldr	r3, [pc, #548]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1a6:	d107      	bne.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fd6d 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1b6:	e2a2      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1bc:	e29f      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1be:	4b80      	ldr	r3, [pc, #512]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ca:	d107      	bne.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1cc:	f107 0318 	add.w	r3, r7, #24
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f000 fab3 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b1da:	e290      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1e0:	e28d      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1e2:	4b77      	ldr	r3, [pc, #476]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ee:	d107      	bne.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1f0:	f107 030c 	add.w	r3, r7, #12
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fbf5 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b1fe:	e27e      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b204:	e27b      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b206:	4b6e      	ldr	r3, [pc, #440]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b20a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b20e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b210:	4b6b      	ldr	r3, [pc, #428]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d10c      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d109      	bne.n	800b236 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b222:	4b67      	ldr	r3, [pc, #412]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	08db      	lsrs	r3, r3, #3
 800b228:	f003 0303 	and.w	r3, r3, #3
 800b22c:	4a65      	ldr	r2, [pc, #404]	; (800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b22e:	fa22 f303 	lsr.w	r3, r2, r3
 800b232:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b234:	e01e      	b.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b236:	4b62      	ldr	r3, [pc, #392]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b242:	d106      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800b244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b24a:	d102      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b24c:	4b5e      	ldr	r3, [pc, #376]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b250:	e010      	b.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b252:	4b5b      	ldr	r3, [pc, #364]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b25a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b25e:	d106      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800b260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b266:	d102      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b268:	4b58      	ldr	r3, [pc, #352]	; (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b26a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b26c:	e002      	b.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b272:	e244      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b274:	e243      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b276:	4b56      	ldr	r3, [pc, #344]	; (800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b27a:	e240      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b280:	e23d      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b288:	f040 80a7 	bne.w	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b28c:	4b4c      	ldr	r3, [pc, #304]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b290:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b294:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b29c:	d055      	beq.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800b29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2a4:	f200 8096 	bhi.w	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2ae:	f000 8084 	beq.w	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b2b8:	f200 808c 	bhi.w	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c2:	d030      	beq.n	800b326 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800b2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2ca:	f200 8083 	bhi.w	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d004      	beq.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2da:	d012      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800b2dc:	e07a      	b.n	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2de:	4b38      	ldr	r3, [pc, #224]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 fccb 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2fa:	e200      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b300:	e1fd      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b302:	4b2f      	ldr	r3, [pc, #188]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b30a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b30e:	d107      	bne.n	800b320 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b310:	f107 0318 	add.w	r3, r7, #24
 800b314:	4618      	mov	r0, r3
 800b316:	f000 fa11 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b31e:	e1ee      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b324:	e1eb      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b326:	4b26      	ldr	r3, [pc, #152]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b32e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b332:	d107      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f000 fb53 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b342:	e1dc      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b348:	e1d9      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b34a:	4b1d      	ldr	r3, [pc, #116]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b34c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b352:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b354:	4b1a      	ldr	r3, [pc, #104]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 0304 	and.w	r3, r3, #4
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d10c      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800b360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b362:	2b00      	cmp	r3, #0
 800b364:	d109      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b366:	4b16      	ldr	r3, [pc, #88]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	08db      	lsrs	r3, r3, #3
 800b36c:	f003 0303 	and.w	r3, r3, #3
 800b370:	4a14      	ldr	r2, [pc, #80]	; (800b3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b372:	fa22 f303 	lsr.w	r3, r2, r3
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b378:	e01e      	b.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b386:	d106      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800b388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b38e:	d102      	bne.n	800b396 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b390:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b394:	e010      	b.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b396:	4b0a      	ldr	r3, [pc, #40]	; (800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b39e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3a2:	d106      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800b3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3aa:	d102      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b3ac:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3b0:	e002      	b.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b3b6:	e1a2      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b3b8:	e1a1      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b3ba:	4b05      	ldr	r3, [pc, #20]	; (800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3be:	e19e      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b3c0:	58024400 	.word	0x58024400
 800b3c4:	03d09000 	.word	0x03d09000
 800b3c8:	003d0900 	.word	0x003d0900
 800b3cc:	007a1200 	.word	0x007a1200
 800b3d0:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3d8:	e191      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b3e0:	d173      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b3e2:	4b9b      	ldr	r3, [pc, #620]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b3ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3f2:	d02f      	beq.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3fa:	d863      	bhi.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d004      	beq.n	800b40c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b408:	d012      	beq.n	800b430 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800b40a:	e05b      	b.n	800b4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b40c:	4b90      	ldr	r3, [pc, #576]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b418:	d107      	bne.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41a:	f107 0318 	add.w	r3, r7, #24
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f98c 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b428:	e169      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b42e:	e166      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b430:	4b87      	ldr	r3, [pc, #540]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b43c:	d107      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b43e:	f107 030c 	add.w	r3, r7, #12
 800b442:	4618      	mov	r0, r3
 800b444:	f000 face 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b44c:	e157      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b452:	e154      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b454:	4b7e      	ldr	r3, [pc, #504]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b45c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b45e:	4b7c      	ldr	r3, [pc, #496]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0304 	and.w	r3, r3, #4
 800b466:	2b04      	cmp	r3, #4
 800b468:	d10c      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b470:	4b77      	ldr	r3, [pc, #476]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	08db      	lsrs	r3, r3, #3
 800b476:	f003 0303 	and.w	r3, r3, #3
 800b47a:	4a76      	ldr	r2, [pc, #472]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b47c:	fa22 f303 	lsr.w	r3, r2, r3
 800b480:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b482:	e01e      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b484:	4b72      	ldr	r3, [pc, #456]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b490:	d106      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800b492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b498:	d102      	bne.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b49a:	4b6f      	ldr	r3, [pc, #444]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b49e:	e010      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a0:	4b6b      	ldr	r3, [pc, #428]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ac:	d106      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800b4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b4:	d102      	bne.n	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b4b6:	4b69      	ldr	r3, [pc, #420]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b4c0:	e11d      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b4c2:	e11c      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4c8:	e119      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d0:	d133      	bne.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b4d2:	4b5f      	ldr	r3, [pc, #380]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e8:	d012      	beq.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b4ea:	e023      	b.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4ec:	4b58      	ldr	r3, [pc, #352]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4f8:	d107      	bne.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4fe:	4618      	mov	r0, r3
 800b500:	f000 fbc4 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b506:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b508:	e0f9      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b50a:	2300      	movs	r3, #0
 800b50c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b50e:	e0f6      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b510:	4b4f      	ldr	r3, [pc, #316]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b51c:	d107      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b51e:	f107 0318 	add.w	r3, r7, #24
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f90a 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b52c:	e0e7      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b532:	e0e4      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800b534:	2300      	movs	r3, #0
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b538:	e0e1      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b540:	f040 808e 	bne.w	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b544:	4b42      	ldr	r3, [pc, #264]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b548:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b54c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b554:	d06b      	beq.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800b556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b55c:	d874      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b564:	d056      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800b566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b56c:	d86c      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b574:	d03b      	beq.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800b576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b57c:	d864      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b584:	d021      	beq.n	800b5ca <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800b586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b58c:	d85c      	bhi.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b590:	2b00      	cmp	r3, #0
 800b592:	d004      	beq.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b59a:	d004      	beq.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800b59c:	e054      	b.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b59e:	f000 f8b7 	bl	800b710 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5a2:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b5a4:	e0ab      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5a6:	4b2a      	ldr	r3, [pc, #168]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5b2:	d107      	bne.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5b4:	f107 0318 	add.w	r3, r7, #24
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f8bf 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5c2:	e09c      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5c8:	e099      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5ca:	4b21      	ldr	r3, [pc, #132]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d6:	d107      	bne.n	800b5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d8:	f107 030c 	add.w	r3, r7, #12
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fa01 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5e6:	e08a      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ec:	e087      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5ee:	4b18      	ldr	r3, [pc, #96]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 0304 	and.w	r3, r3, #4
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d109      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b5fa:	4b15      	ldr	r3, [pc, #84]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	08db      	lsrs	r3, r3, #3
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	4a13      	ldr	r2, [pc, #76]	; (800b654 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b606:	fa22 f303 	lsr.w	r3, r2, r3
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b60c:	e077      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b612:	e074      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b614:	4b0e      	ldr	r3, [pc, #56]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b61c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b620:	d102      	bne.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800b622:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b626:	e06a      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800b628:	2300      	movs	r3, #0
 800b62a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b62c:	e067      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b62e:	4b08      	ldr	r3, [pc, #32]	; (800b650 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b63a:	d102      	bne.n	800b642 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800b63c:	4b07      	ldr	r3, [pc, #28]	; (800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b640:	e05d      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b642:	2300      	movs	r3, #0
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b646:	e05a      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b648:	2300      	movs	r3, #0
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64c:	e057      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b64e:	bf00      	nop
 800b650:	58024400 	.word	0x58024400
 800b654:	03d09000 	.word	0x03d09000
 800b658:	003d0900 	.word	0x003d0900
 800b65c:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b666:	d148      	bne.n	800b6fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b668:	4b27      	ldr	r3, [pc, #156]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b670:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b678:	d02a      	beq.n	800b6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b67c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b680:	d838      	bhi.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800b682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800b688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b68a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b68e:	d00d      	beq.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800b690:	e030      	b.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b692:	4b1d      	ldr	r3, [pc, #116]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b69a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b69e:	d102      	bne.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800b6a0:	4b1a      	ldr	r3, [pc, #104]	; (800b70c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6a4:	e02b      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6aa:	e028      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6ac:	4b16      	ldr	r3, [pc, #88]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6b8:	d107      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 fae4 	bl	800bc8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6c8:	e019      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ce:	e016      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6d0:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6dc:	d107      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6de:	f107 0318 	add.w	r3, r7, #24
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f000 f82a 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b6ec:	e007      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f2:	e004      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f8:	e001      	b.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b700:	4618      	mov	r0, r3
 800b702:	3740      	adds	r7, #64	; 0x40
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	58024400 	.word	0x58024400
 800b70c:	007a1200 	.word	0x007a1200

0800b710 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b714:	f7fe fc80 	bl	800a018 <HAL_RCC_GetHCLKFreq>
 800b718:	4602      	mov	r2, r0
 800b71a:	4b06      	ldr	r3, [pc, #24]	; (800b734 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	091b      	lsrs	r3, r3, #4
 800b720:	f003 0307 	and.w	r3, r3, #7
 800b724:	4904      	ldr	r1, [pc, #16]	; (800b738 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b726:	5ccb      	ldrb	r3, [r1, r3]
 800b728:	f003 031f 	and.w	r3, r3, #31
 800b72c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b730:	4618      	mov	r0, r3
 800b732:	bd80      	pop	{r7, pc}
 800b734:	58024400 	.word	0x58024400
 800b738:	0801ac10 	.word	0x0801ac10

0800b73c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b089      	sub	sp, #36	; 0x24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b744:	4ba1      	ldr	r3, [pc, #644]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b748:	f003 0303 	and.w	r3, r3, #3
 800b74c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b74e:	4b9f      	ldr	r3, [pc, #636]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b752:	0b1b      	lsrs	r3, r3, #12
 800b754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b758:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b75a:	4b9c      	ldr	r3, [pc, #624]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75e:	091b      	lsrs	r3, r3, #4
 800b760:	f003 0301 	and.w	r3, r3, #1
 800b764:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b766:	4b99      	ldr	r3, [pc, #612]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76a:	08db      	lsrs	r3, r3, #3
 800b76c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	fb02 f303 	mul.w	r3, r2, r3
 800b776:	ee07 3a90 	vmov	s15, r3
 800b77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8111 	beq.w	800b9ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	f000 8083 	beq.w	800b898 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2b02      	cmp	r3, #2
 800b796:	f200 80a1 	bhi.w	800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d056      	beq.n	800b854 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7a6:	e099      	b.n	800b8dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7a8:	4b88      	ldr	r3, [pc, #544]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 0320 	and.w	r3, r3, #32
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d02d      	beq.n	800b810 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b7b4:	4b85      	ldr	r3, [pc, #532]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	08db      	lsrs	r3, r3, #3
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	4a84      	ldr	r2, [pc, #528]	; (800b9d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	ee07 3a90 	vmov	s15, r3
 800b7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7de:	4b7b      	ldr	r3, [pc, #492]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b80e:	e087      	b.n	800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b81e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b822:	4b6a      	ldr	r3, [pc, #424]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b832:	ed97 6a03 	vldr	s12, [r7, #12]
 800b836:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b83a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b83e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b84a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b84e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b852:	e065      	b.n	800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b866:	4b59      	ldr	r3, [pc, #356]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b86a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b876:	ed97 6a03 	vldr	s12, [r7, #12]
 800b87a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b87e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b88a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b88e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b896:	e043      	b.n	800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8aa:	4b48      	ldr	r3, [pc, #288]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8da:	e021      	b.n	800b920 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ee:	4b37      	ldr	r3, [pc, #220]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f6:	ee07 3a90 	vmov	s15, r3
 800b8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b902:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b91e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b920:	4b2a      	ldr	r3, [pc, #168]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b924:	0a5b      	lsrs	r3, r3, #9
 800b926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b932:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b93e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b946:	ee17 2a90 	vmov	r2, s15
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b94e:	4b1f      	ldr	r3, [pc, #124]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b952:	0c1b      	lsrs	r3, r3, #16
 800b954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b958:	ee07 3a90 	vmov	s15, r3
 800b95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b964:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b968:	edd7 6a07 	vldr	s13, [r7, #28]
 800b96c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b974:	ee17 2a90 	vmov	r2, s15
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b97c:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b980:	0e1b      	lsrs	r3, r3, #24
 800b982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b992:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b996:	edd7 6a07 	vldr	s13, [r7, #28]
 800b99a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a2:	ee17 2a90 	vmov	r2, s15
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9aa:	e008      	b.n	800b9be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	609a      	str	r2, [r3, #8]
}
 800b9be:	bf00      	nop
 800b9c0:	3724      	adds	r7, #36	; 0x24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	58024400 	.word	0x58024400
 800b9d0:	03d09000 	.word	0x03d09000
 800b9d4:	46000000 	.word	0x46000000
 800b9d8:	4c742400 	.word	0x4c742400
 800b9dc:	4a742400 	.word	0x4a742400
 800b9e0:	4af42400 	.word	0x4af42400

0800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b089      	sub	sp, #36	; 0x24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9ec:	4ba1      	ldr	r3, [pc, #644]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f0:	f003 0303 	and.w	r3, r3, #3
 800b9f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b9f6:	4b9f      	ldr	r3, [pc, #636]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fa:	0d1b      	lsrs	r3, r3, #20
 800b9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba02:	4b9c      	ldr	r3, [pc, #624]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ba0e:	4b99      	ldr	r3, [pc, #612]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba12:	08db      	lsrs	r3, r3, #3
 800ba14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	fb02 f303 	mul.w	r3, r2, r3
 800ba1e:	ee07 3a90 	vmov	s15, r3
 800ba22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 8111 	beq.w	800bc54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	f000 8083 	beq.w	800bb40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	f200 80a1 	bhi.w	800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d056      	beq.n	800bafc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba4e:	e099      	b.n	800bb84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba50:	4b88      	ldr	r3, [pc, #544]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0320 	and.w	r3, r3, #32
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d02d      	beq.n	800bab8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba5c:	4b85      	ldr	r3, [pc, #532]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	08db      	lsrs	r3, r3, #3
 800ba62:	f003 0303 	and.w	r3, r3, #3
 800ba66:	4a84      	ldr	r2, [pc, #528]	; (800bc78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba68:	fa22 f303 	lsr.w	r3, r2, r3
 800ba6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba86:	4b7b      	ldr	r3, [pc, #492]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bab6:	e087      	b.n	800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baca:	4b6a      	ldr	r3, [pc, #424]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bada:	ed97 6a03 	vldr	s12, [r7, #12]
 800bade:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bafa:	e065      	b.n	800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	ee07 3a90 	vmov	s15, r3
 800bb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb0e:	4b59      	ldr	r3, [pc, #356]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb3e:	e043      	b.n	800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb52:	4b48      	ldr	r3, [pc, #288]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb62:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb82:	e021      	b.n	800bbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb96:	4b37      	ldr	r3, [pc, #220]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	ee07 3a90 	vmov	s15, r3
 800bba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bbc8:	4b2a      	ldr	r3, [pc, #168]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbcc:	0a5b      	lsrs	r3, r3, #9
 800bbce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbee:	ee17 2a90 	vmov	r2, s15
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bbf6:	4b1f      	ldr	r3, [pc, #124]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfa:	0c1b      	lsrs	r3, r3, #16
 800bbfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc00:	ee07 3a90 	vmov	s15, r3
 800bc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc10:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc1c:	ee17 2a90 	vmov	r2, s15
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bc24:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc28:	0e1b      	lsrs	r3, r3, #24
 800bc2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4a:	ee17 2a90 	vmov	r2, s15
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc52:	e008      	b.n	800bc66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	609a      	str	r2, [r3, #8]
}
 800bc66:	bf00      	nop
 800bc68:	3724      	adds	r7, #36	; 0x24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	58024400 	.word	0x58024400
 800bc78:	03d09000 	.word	0x03d09000
 800bc7c:	46000000 	.word	0x46000000
 800bc80:	4c742400 	.word	0x4c742400
 800bc84:	4a742400 	.word	0x4a742400
 800bc88:	4af42400 	.word	0x4af42400

0800bc8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b089      	sub	sp, #36	; 0x24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc94:	4ba0      	ldr	r3, [pc, #640]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bc9e:	4b9e      	ldr	r3, [pc, #632]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca2:	091b      	lsrs	r3, r3, #4
 800bca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bca8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bcaa:	4b9b      	ldr	r3, [pc, #620]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bcb4:	4b98      	ldr	r3, [pc, #608]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcb8:	08db      	lsrs	r3, r3, #3
 800bcba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcbe:	693a      	ldr	r2, [r7, #16]
 800bcc0:	fb02 f303 	mul.w	r3, r2, r3
 800bcc4:	ee07 3a90 	vmov	s15, r3
 800bcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bccc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 8111 	beq.w	800befa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	f000 8083 	beq.w	800bde6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	f200 80a1 	bhi.w	800be2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d003      	beq.n	800bcf6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d056      	beq.n	800bda2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bcf4:	e099      	b.n	800be2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcf6:	4b88      	ldr	r3, [pc, #544]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0320 	and.w	r3, r3, #32
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d02d      	beq.n	800bd5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd02:	4b85      	ldr	r3, [pc, #532]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	08db      	lsrs	r3, r3, #3
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	4a83      	ldr	r2, [pc, #524]	; (800bf1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd12:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	ee07 3a90 	vmov	s15, r3
 800bd1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2c:	4b7a      	ldr	r3, [pc, #488]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd34:	ee07 3a90 	vmov	s15, r3
 800bd38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd40:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd58:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd5c:	e087      	b.n	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	ee07 3a90 	vmov	s15, r3
 800bd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd68:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd70:	4b69      	ldr	r3, [pc, #420]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd78:	ee07 3a90 	vmov	s15, r3
 800bd7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd80:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd84:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bda0:	e065      	b.n	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	ee07 3a90 	vmov	s15, r3
 800bda8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bdb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb4:	4b58      	ldr	r3, [pc, #352]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdbc:	ee07 3a90 	vmov	s15, r3
 800bdc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdc8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bde4:	e043      	b.n	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	ee07 3a90 	vmov	s15, r3
 800bdec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bdf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdf8:	4b47      	ldr	r3, [pc, #284]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be00:	ee07 3a90 	vmov	s15, r3
 800be04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be08:	ed97 6a03 	vldr	s12, [r7, #12]
 800be0c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be28:	e021      	b.n	800be6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	ee07 3a90 	vmov	s15, r3
 800be30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be34:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bf24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be3c:	4b36      	ldr	r3, [pc, #216]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be44:	ee07 3a90 	vmov	s15, r3
 800be48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be50:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800be6e:	4b2a      	ldr	r3, [pc, #168]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be72:	0a5b      	lsrs	r3, r3, #9
 800be74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be88:	edd7 6a07 	vldr	s13, [r7, #28]
 800be8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be94:	ee17 2a90 	vmov	r2, s15
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800be9c:	4b1e      	ldr	r3, [pc, #120]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea0:	0c1b      	lsrs	r3, r3, #16
 800bea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800beba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec2:	ee17 2a90 	vmov	r2, s15
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800becc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bece:	0e1b      	lsrs	r3, r3, #24
 800bed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bed4:	ee07 3a90 	vmov	s15, r3
 800bed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bedc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef0:	ee17 2a90 	vmov	r2, s15
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bef8:	e008      	b.n	800bf0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	609a      	str	r2, [r3, #8]
}
 800bf0c:	bf00      	nop
 800bf0e:	3724      	adds	r7, #36	; 0x24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	58024400 	.word	0x58024400
 800bf1c:	03d09000 	.word	0x03d09000
 800bf20:	46000000 	.word	0x46000000
 800bf24:	4c742400 	.word	0x4c742400
 800bf28:	4a742400 	.word	0x4a742400
 800bf2c:	4af42400 	.word	0x4af42400

0800bf30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf3e:	4b53      	ldr	r3, [pc, #332]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	f003 0303 	and.w	r3, r3, #3
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d101      	bne.n	800bf4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e099      	b.n	800c082 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf4e:	4b4f      	ldr	r3, [pc, #316]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a4e      	ldr	r2, [pc, #312]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf5a:	f7f7 f823 	bl	8002fa4 <HAL_GetTick>
 800bf5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf60:	e008      	b.n	800bf74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bf62:	f7f7 f81f 	bl	8002fa4 <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d901      	bls.n	800bf74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e086      	b.n	800c082 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf74:	4b45      	ldr	r3, [pc, #276]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1f0      	bne.n	800bf62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bf80:	4b42      	ldr	r3, [pc, #264]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	031b      	lsls	r3, r3, #12
 800bf8e:	493f      	ldr	r1, [pc, #252]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	628b      	str	r3, [r1, #40]	; 0x28
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	3b01      	subs	r3, #1
 800bf9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	025b      	lsls	r3, r3, #9
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	041b      	lsls	r3, r3, #16
 800bfb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfb6:	431a      	orrs	r2, r3
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	061b      	lsls	r3, r3, #24
 800bfc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfc4:	4931      	ldr	r1, [pc, #196]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bfca:	4b30      	ldr	r3, [pc, #192]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	492d      	ldr	r1, [pc, #180]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bfdc:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bfde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe0:	f023 0220 	bic.w	r2, r3, #32
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	4928      	ldr	r1, [pc, #160]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bfea:	4313      	orrs	r3, r2
 800bfec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bfee:	4b27      	ldr	r3, [pc, #156]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff2:	4a26      	ldr	r2, [pc, #152]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bff4:	f023 0310 	bic.w	r3, r3, #16
 800bff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bffa:	4b24      	ldr	r3, [pc, #144]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800bffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bffe:	4b24      	ldr	r3, [pc, #144]	; (800c090 <RCCEx_PLL2_Config+0x160>)
 800c000:	4013      	ands	r3, r2
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	69d2      	ldr	r2, [r2, #28]
 800c006:	00d2      	lsls	r2, r2, #3
 800c008:	4920      	ldr	r1, [pc, #128]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c00a:	4313      	orrs	r3, r2
 800c00c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c00e:	4b1f      	ldr	r3, [pc, #124]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c012:	4a1e      	ldr	r2, [pc, #120]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c014:	f043 0310 	orr.w	r3, r3, #16
 800c018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c020:	4b1a      	ldr	r3, [pc, #104]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c024:	4a19      	ldr	r2, [pc, #100]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c02a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c02c:	e00f      	b.n	800c04e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c034:	4b15      	ldr	r3, [pc, #84]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	4a14      	ldr	r2, [pc, #80]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c03a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c03e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c040:	e005      	b.n	800c04e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c042:	4b12      	ldr	r3, [pc, #72]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	4a11      	ldr	r2, [pc, #68]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c04c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a0e      	ldr	r2, [pc, #56]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c054:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c05a:	f7f6 ffa3 	bl	8002fa4 <HAL_GetTick>
 800c05e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c060:	e008      	b.n	800c074 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c062:	f7f6 ff9f 	bl	8002fa4 <HAL_GetTick>
 800c066:	4602      	mov	r2, r0
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	d901      	bls.n	800c074 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e006      	b.n	800c082 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c074:	4b05      	ldr	r3, [pc, #20]	; (800c08c <RCCEx_PLL2_Config+0x15c>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0f0      	beq.n	800c062 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	58024400 	.word	0x58024400
 800c090:	ffff0007 	.word	0xffff0007

0800c094 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0a2:	4b53      	ldr	r3, [pc, #332]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	f003 0303 	and.w	r3, r3, #3
 800c0aa:	2b03      	cmp	r3, #3
 800c0ac:	d101      	bne.n	800c0b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e099      	b.n	800c1e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c0b2:	4b4f      	ldr	r3, [pc, #316]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a4e      	ldr	r2, [pc, #312]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0be:	f7f6 ff71 	bl	8002fa4 <HAL_GetTick>
 800c0c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0c4:	e008      	b.n	800c0d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c0c6:	f7f6 ff6d 	bl	8002fa4 <HAL_GetTick>
 800c0ca:	4602      	mov	r2, r0
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d901      	bls.n	800c0d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e086      	b.n	800c1e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0d8:	4b45      	ldr	r3, [pc, #276]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1f0      	bne.n	800c0c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c0e4:	4b42      	ldr	r3, [pc, #264]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	051b      	lsls	r3, r3, #20
 800c0f2:	493f      	ldr	r1, [pc, #252]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	628b      	str	r3, [r1, #40]	; 0x28
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	3b01      	subs	r3, #1
 800c0fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	3b01      	subs	r3, #1
 800c108:	025b      	lsls	r3, r3, #9
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	3b01      	subs	r3, #1
 800c114:	041b      	lsls	r3, r3, #16
 800c116:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c11a:	431a      	orrs	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	3b01      	subs	r3, #1
 800c122:	061b      	lsls	r3, r3, #24
 800c124:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c128:	4931      	ldr	r1, [pc, #196]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c12a:	4313      	orrs	r3, r2
 800c12c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c12e:	4b30      	ldr	r3, [pc, #192]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	492d      	ldr	r1, [pc, #180]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c13c:	4313      	orrs	r3, r2
 800c13e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c140:	4b2b      	ldr	r3, [pc, #172]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	699b      	ldr	r3, [r3, #24]
 800c14c:	4928      	ldr	r1, [pc, #160]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c152:	4b27      	ldr	r3, [pc, #156]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c156:	4a26      	ldr	r2, [pc, #152]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c15c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c162:	4b24      	ldr	r3, [pc, #144]	; (800c1f4 <RCCEx_PLL3_Config+0x160>)
 800c164:	4013      	ands	r3, r2
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	69d2      	ldr	r2, [r2, #28]
 800c16a:	00d2      	lsls	r2, r2, #3
 800c16c:	4920      	ldr	r1, [pc, #128]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c16e:	4313      	orrs	r3, r2
 800c170:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c172:	4b1f      	ldr	r3, [pc, #124]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c176:	4a1e      	ldr	r2, [pc, #120]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c17c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d106      	bne.n	800c192 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c184:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c188:	4a19      	ldr	r2, [pc, #100]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c18a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c18e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c190:	e00f      	b.n	800c1b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d106      	bne.n	800c1a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c198:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c19c:	4a14      	ldr	r2, [pc, #80]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c19e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c1a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1a4:	e005      	b.n	800c1b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c1a6:	4b12      	ldr	r3, [pc, #72]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	4a11      	ldr	r2, [pc, #68]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c1ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c1b2:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a0e      	ldr	r2, [pc, #56]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1be:	f7f6 fef1 	bl	8002fa4 <HAL_GetTick>
 800c1c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1c4:	e008      	b.n	800c1d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c1c6:	f7f6 feed 	bl	8002fa4 <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d901      	bls.n	800c1d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e006      	b.n	800c1e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <RCCEx_PLL3_Config+0x15c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d0f0      	beq.n	800c1c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	58024400 	.word	0x58024400
 800c1f4:	ffff0007 	.word	0xffff0007

0800c1f8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d067      	beq.n	800c2da <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	d106      	bne.n	800c224 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7f5 fad2 	bl	80017c8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2202      	movs	r2, #2
 800c228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	22ca      	movs	r2, #202	; 0xca
 800c232:	625a      	str	r2, [r3, #36]	; 0x24
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2253      	movs	r2, #83	; 0x53
 800c23a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f879 	bl	800c334 <RTC_EnterInitMode>
 800c242:	4603      	mov	r3, r0
 800c244:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c246:	7bfb      	ldrb	r3, [r7, #15]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d13b      	bne.n	800c2c4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6899      	ldr	r1, [r3, #8]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	4b23      	ldr	r3, [pc, #140]	; (800c2e4 <HAL_RTC_Init+0xec>)
 800c258:	400b      	ands	r3, r1
 800c25a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	6899      	ldr	r1, [r3, #8]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	685a      	ldr	r2, [r3, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	431a      	orrs	r2, r3
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	0419      	lsls	r1, r3, #16
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68da      	ldr	r2, [r3, #12]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f885 	bl	800c39c <RTC_ExitInitMode>
 800c292:	4603      	mov	r3, r0
 800c294:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c296:	7bfb      	ldrb	r3, [r7, #15]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d113      	bne.n	800c2c4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f022 0203 	bic.w	r2, r2, #3
 800c2aa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	69da      	ldr	r2, [r3, #28]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	22ff      	movs	r2, #255	; 0xff
 800c2ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d103      	bne.n	800c2da <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	ff8fffbf 	.word	0xff8fffbf

0800c2e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68da      	ldr	r2, [r3, #12]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c2fe:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c300:	f7f6 fe50 	bl	8002fa4 <HAL_GetTick>
 800c304:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c306:	e009      	b.n	800c31c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c308:	f7f6 fe4c 	bl	8002fa4 <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c316:	d901      	bls.n	800c31c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e007      	b.n	800c32c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	f003 0320 	and.w	r3, r3, #32
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0ee      	beq.n	800c308 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d120      	bne.n	800c390 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f04f 32ff 	mov.w	r2, #4294967295
 800c356:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c358:	f7f6 fe24 	bl	8002fa4 <HAL_GetTick>
 800c35c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c35e:	e00d      	b.n	800c37c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c360:	f7f6 fe20 	bl	8002fa4 <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c36e:	d905      	bls.n	800c37c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2203      	movs	r2, #3
 800c378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c386:	2b00      	cmp	r3, #0
 800c388:	d102      	bne.n	800c390 <RTC_EnterInitMode+0x5c>
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d1e7      	bne.n	800c360 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c390:	7bfb      	ldrb	r3, [r7, #15]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c3a8:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	4a19      	ldr	r2, [pc, #100]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c3b4:	4b17      	ldr	r3, [pc, #92]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	f003 0320 	and.w	r3, r3, #32
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10c      	bne.n	800c3da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f7ff ff91 	bl	800c2e8 <HAL_RTC_WaitForSynchro>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01e      	beq.n	800c40a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2203      	movs	r2, #3
 800c3d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	73fb      	strb	r3, [r7, #15]
 800c3d8:	e017      	b.n	800c40a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c3da:	4b0e      	ldr	r3, [pc, #56]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	4a0d      	ldr	r2, [pc, #52]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c3e0:	f023 0320 	bic.w	r3, r3, #32
 800c3e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff ff7e 	bl	800c2e8 <HAL_RTC_WaitForSynchro>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d005      	beq.n	800c3fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2203      	movs	r2, #3
 800c3f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	4a04      	ldr	r2, [pc, #16]	; (800c414 <RTC_ExitInitMode+0x78>)
 800c404:	f043 0320 	orr.w	r3, r3, #32
 800c408:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	58004000 	.word	0x58004000

0800c418 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e0f1      	b.n	800c60e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2200      	movs	r2, #0
 800c42e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a78      	ldr	r2, [pc, #480]	; (800c618 <HAL_SPI_Init+0x200>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d00f      	beq.n	800c45a <HAL_SPI_Init+0x42>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a77      	ldr	r2, [pc, #476]	; (800c61c <HAL_SPI_Init+0x204>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d00a      	beq.n	800c45a <HAL_SPI_Init+0x42>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a75      	ldr	r2, [pc, #468]	; (800c620 <HAL_SPI_Init+0x208>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d005      	beq.n	800c45a <HAL_SPI_Init+0x42>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	2b0f      	cmp	r3, #15
 800c454:	d901      	bls.n	800c45a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e0d9      	b.n	800c60e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f8e2 	bl	800c624 <SPI_GetPacketSize>
 800c460:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a6c      	ldr	r2, [pc, #432]	; (800c618 <HAL_SPI_Init+0x200>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d00c      	beq.n	800c486 <HAL_SPI_Init+0x6e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a6a      	ldr	r2, [pc, #424]	; (800c61c <HAL_SPI_Init+0x204>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d007      	beq.n	800c486 <HAL_SPI_Init+0x6e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a69      	ldr	r2, [pc, #420]	; (800c620 <HAL_SPI_Init+0x208>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d002      	beq.n	800c486 <HAL_SPI_Init+0x6e>
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b08      	cmp	r3, #8
 800c484:	d811      	bhi.n	800c4aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c48a:	4a63      	ldr	r2, [pc, #396]	; (800c618 <HAL_SPI_Init+0x200>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d009      	beq.n	800c4a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a61      	ldr	r2, [pc, #388]	; (800c61c <HAL_SPI_Init+0x204>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d004      	beq.n	800c4a4 <HAL_SPI_Init+0x8c>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4a60      	ldr	r2, [pc, #384]	; (800c620 <HAL_SPI_Init+0x208>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d104      	bne.n	800c4ae <HAL_SPI_Init+0x96>
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2b10      	cmp	r3, #16
 800c4a8:	d901      	bls.n	800c4ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	e0af      	b.n	800c60e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d106      	bne.n	800c4c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f7f5 fa06 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2202      	movs	r2, #2
 800c4cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f022 0201 	bic.w	r2, r2, #1
 800c4de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c4ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4f4:	d119      	bne.n	800c52a <HAL_SPI_Init+0x112>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4fe:	d103      	bne.n	800c508 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c504:	2b00      	cmp	r3, #0
 800c506:	d008      	beq.n	800c51a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c518:	d107      	bne.n	800c52a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c528:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	69da      	ldr	r2, [r3, #28]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c532:	431a      	orrs	r2, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	431a      	orrs	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	ea42 0103 	orr.w	r1, r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	68da      	ldr	r2, [r3, #12]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	431a      	orrs	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55a:	431a      	orrs	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	431a      	orrs	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	431a      	orrs	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	431a      	orrs	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	431a      	orrs	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	431a      	orrs	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c57e:	431a      	orrs	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	431a      	orrs	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c58a:	ea42 0103 	orr.w	r1, r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d113      	bne.n	800c5ca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5b4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5c8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d00a      	beq.n	800c5fc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	430a      	orrs	r2, r1
 800c5fa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3710      	adds	r7, #16
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	40013000 	.word	0x40013000
 800c61c:	40003800 	.word	0x40003800
 800c620:	40003c00 	.word	0x40003c00

0800c624 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c630:	095b      	lsrs	r3, r3, #5
 800c632:	3301      	adds	r3, #1
 800c634:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	3301      	adds	r3, #1
 800c63c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	3307      	adds	r3, #7
 800c642:	08db      	lsrs	r3, r3, #3
 800c644:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d101      	bne.n	800c66c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e049      	b.n	800c700 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c672:	b2db      	uxtb	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d106      	bne.n	800c686 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7f6 f899 	bl	80027b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2202      	movs	r2, #2
 800c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	3304      	adds	r3, #4
 800c696:	4619      	mov	r1, r3
 800c698:	4610      	mov	r0, r2
 800c69a:	f000 fb39 	bl	800cd10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	e049      	b.n	800c7ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7f5 ff64 	bl	80025fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2202      	movs	r2, #2
 800c738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3304      	adds	r3, #4
 800c744:	4619      	mov	r1, r3
 800c746:	4610      	mov	r0, r2
 800c748:	f000 fae2 	bl	800cd10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e049      	b.n	800c85c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7f6 f825 	bl	800282c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2202      	movs	r2, #2
 800c7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	4610      	mov	r0, r2
 800c7f6:	f000 fa8b 	bl	800cd10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2201      	movs	r2, #1
 800c81e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c85a:	2300      	movs	r3, #0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e08f      	b.n	800c998 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c87e:	b2db      	uxtb	r3, r3
 800c880:	2b00      	cmp	r3, #0
 800c882:	d106      	bne.n	800c892 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7f5 ff49 	bl	8002724 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2202      	movs	r2, #2
 800c896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6899      	ldr	r1, [r3, #8]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	4b3e      	ldr	r3, [pc, #248]	; (800c9a0 <HAL_TIM_Encoder_Init+0x13c>)
 800c8a6:	400b      	ands	r3, r1
 800c8a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f000 fa2b 	bl	800cd10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6a1b      	ldr	r3, [r3, #32]
 800c8d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	4b31      	ldr	r3, [pc, #196]	; (800c9a4 <HAL_TIM_Encoder_Init+0x140>)
 800c8e0:	4013      	ands	r3, r2
 800c8e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	699b      	ldr	r3, [r3, #24]
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	4b2b      	ldr	r3, [pc, #172]	; (800c9a8 <HAL_TIM_Encoder_Init+0x144>)
 800c8fa:	4013      	ands	r3, r2
 800c8fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <HAL_TIM_Encoder_Init+0x148>)
 800c902:	4013      	ands	r3, r2
 800c904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	68da      	ldr	r2, [r3, #12]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	4313      	orrs	r3, r2
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	4313      	orrs	r3, r2
 800c916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	011a      	lsls	r2, r3, #4
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	031b      	lsls	r3, r3, #12
 800c924:	4313      	orrs	r3, r2
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	4313      	orrs	r3, r2
 800c92a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c932:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c93a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	695b      	ldr	r3, [r3, #20]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	4313      	orrs	r3, r2
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2201      	movs	r2, #1
 800c992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	fffebff8 	.word	0xfffebff8
 800c9a4:	fffffcfc 	.word	0xfffffcfc
 800c9a8:	fffff3f3 	.word	0xfffff3f3
 800c9ac:	ffff0f0f 	.word	0xffff0f0f

0800c9b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d101      	bne.n	800c9ce <HAL_TIM_IC_ConfigChannel+0x1e>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e088      	b.n	800cae0 <HAL_TIM_IC_ConfigChannel+0x130>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d11b      	bne.n	800ca14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6818      	ldr	r0, [r3, #0]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	6819      	ldr	r1, [r3, #0]
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	685a      	ldr	r2, [r3, #4]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	f000 fd0c 	bl	800d408 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	699a      	ldr	r2, [r3, #24]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f022 020c 	bic.w	r2, r2, #12
 800c9fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	6999      	ldr	r1, [r3, #24]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	430a      	orrs	r2, r1
 800ca10:	619a      	str	r2, [r3, #24]
 800ca12:	e060      	b.n	800cad6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b04      	cmp	r3, #4
 800ca18:	d11c      	bne.n	800ca54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	6819      	ldr	r1, [r3, #0]
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f000 fd6d 	bl	800d508 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	699a      	ldr	r2, [r3, #24]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800ca3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6999      	ldr	r1, [r3, #24]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	021a      	lsls	r2, r3, #8
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	619a      	str	r2, [r3, #24]
 800ca52:	e040      	b.n	800cad6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b08      	cmp	r3, #8
 800ca58:	d11b      	bne.n	800ca92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6818      	ldr	r0, [r3, #0]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6819      	ldr	r1, [r3, #0]
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	685a      	ldr	r2, [r3, #4]
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	f000 fd8a 	bl	800d582 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	69da      	ldr	r2, [r3, #28]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f022 020c 	bic.w	r2, r2, #12
 800ca7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	69d9      	ldr	r1, [r3, #28]
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	689a      	ldr	r2, [r3, #8]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	61da      	str	r2, [r3, #28]
 800ca90:	e021      	b.n	800cad6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b0c      	cmp	r3, #12
 800ca96:	d11c      	bne.n	800cad2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6818      	ldr	r0, [r3, #0]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	685a      	ldr	r2, [r3, #4]
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f000 fda7 	bl	800d5fa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	69da      	ldr	r2, [r3, #28]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800caba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	69d9      	ldr	r1, [r3, #28]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	021a      	lsls	r2, r3, #8
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	430a      	orrs	r2, r1
 800cace:	61da      	str	r2, [r3, #28]
 800cad0:	e001      	b.n	800cad6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cade:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3718      	adds	r7, #24
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d101      	bne.n	800cb06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800cb02:	2302      	movs	r3, #2
 800cb04:	e0ff      	b.n	800cd06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b14      	cmp	r3, #20
 800cb12:	f200 80f0 	bhi.w	800ccf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cb16:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb71 	.word	0x0800cb71
 800cb20:	0800ccf7 	.word	0x0800ccf7
 800cb24:	0800ccf7 	.word	0x0800ccf7
 800cb28:	0800ccf7 	.word	0x0800ccf7
 800cb2c:	0800cbb1 	.word	0x0800cbb1
 800cb30:	0800ccf7 	.word	0x0800ccf7
 800cb34:	0800ccf7 	.word	0x0800ccf7
 800cb38:	0800ccf7 	.word	0x0800ccf7
 800cb3c:	0800cbf3 	.word	0x0800cbf3
 800cb40:	0800ccf7 	.word	0x0800ccf7
 800cb44:	0800ccf7 	.word	0x0800ccf7
 800cb48:	0800ccf7 	.word	0x0800ccf7
 800cb4c:	0800cc33 	.word	0x0800cc33
 800cb50:	0800ccf7 	.word	0x0800ccf7
 800cb54:	0800ccf7 	.word	0x0800ccf7
 800cb58:	0800ccf7 	.word	0x0800ccf7
 800cb5c:	0800cc75 	.word	0x0800cc75
 800cb60:	0800ccf7 	.word	0x0800ccf7
 800cb64:	0800ccf7 	.word	0x0800ccf7
 800cb68:	0800ccf7 	.word	0x0800ccf7
 800cb6c:	0800ccb5 	.word	0x0800ccb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68b9      	ldr	r1, [r7, #8]
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 f970 	bl	800ce5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	699a      	ldr	r2, [r3, #24]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f042 0208 	orr.w	r2, r2, #8
 800cb8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	699a      	ldr	r2, [r3, #24]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f022 0204 	bic.w	r2, r2, #4
 800cb9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	6999      	ldr	r1, [r3, #24]
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	691a      	ldr	r2, [r3, #16]
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	430a      	orrs	r2, r1
 800cbac:	619a      	str	r2, [r3, #24]
      break;
 800cbae:	e0a5      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68b9      	ldr	r1, [r7, #8]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f9e0 	bl	800cf7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	699a      	ldr	r2, [r3, #24]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	699a      	ldr	r2, [r3, #24]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cbda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6999      	ldr	r1, [r3, #24]
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	021a      	lsls	r2, r3, #8
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	430a      	orrs	r2, r1
 800cbee:	619a      	str	r2, [r3, #24]
      break;
 800cbf0:	e084      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68b9      	ldr	r1, [r7, #8]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 fa49 	bl	800d090 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69da      	ldr	r2, [r3, #28]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f042 0208 	orr.w	r2, r2, #8
 800cc0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	69da      	ldr	r2, [r3, #28]
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 0204 	bic.w	r2, r2, #4
 800cc1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69d9      	ldr	r1, [r3, #28]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	691a      	ldr	r2, [r3, #16]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	61da      	str	r2, [r3, #28]
      break;
 800cc30:	e064      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68b9      	ldr	r1, [r7, #8]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f000 fab1 	bl	800d1a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	69da      	ldr	r2, [r3, #28]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	69da      	ldr	r2, [r3, #28]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	69d9      	ldr	r1, [r3, #28]
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	691b      	ldr	r3, [r3, #16]
 800cc68:	021a      	lsls	r2, r3, #8
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	430a      	orrs	r2, r1
 800cc70:	61da      	str	r2, [r3, #28]
      break;
 800cc72:	e043      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 fafa 	bl	800d274 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f042 0208 	orr.w	r2, r2, #8
 800cc8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 0204 	bic.w	r2, r2, #4
 800cc9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	691a      	ldr	r2, [r3, #16]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	430a      	orrs	r2, r1
 800ccb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccb2:	e023      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68b9      	ldr	r1, [r7, #8]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f000 fb3e 	bl	800d33c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	021a      	lsls	r2, r3, #8
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	430a      	orrs	r2, r1
 800ccf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ccf4:	e002      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	75fb      	strb	r3, [r7, #23]
      break;
 800ccfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cd04:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3718      	adds	r7, #24
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop

0800cd10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a44      	ldr	r2, [pc, #272]	; (800ce34 <TIM_Base_SetConfig+0x124>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d013      	beq.n	800cd50 <TIM_Base_SetConfig+0x40>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd2e:	d00f      	beq.n	800cd50 <TIM_Base_SetConfig+0x40>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a41      	ldr	r2, [pc, #260]	; (800ce38 <TIM_Base_SetConfig+0x128>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d00b      	beq.n	800cd50 <TIM_Base_SetConfig+0x40>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a40      	ldr	r2, [pc, #256]	; (800ce3c <TIM_Base_SetConfig+0x12c>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d007      	beq.n	800cd50 <TIM_Base_SetConfig+0x40>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a3f      	ldr	r2, [pc, #252]	; (800ce40 <TIM_Base_SetConfig+0x130>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d003      	beq.n	800cd50 <TIM_Base_SetConfig+0x40>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a3e      	ldr	r2, [pc, #248]	; (800ce44 <TIM_Base_SetConfig+0x134>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d108      	bne.n	800cd62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4a33      	ldr	r2, [pc, #204]	; (800ce34 <TIM_Base_SetConfig+0x124>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d027      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd70:	d023      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a30      	ldr	r2, [pc, #192]	; (800ce38 <TIM_Base_SetConfig+0x128>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d01f      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a2f      	ldr	r2, [pc, #188]	; (800ce3c <TIM_Base_SetConfig+0x12c>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d01b      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a2e      	ldr	r2, [pc, #184]	; (800ce40 <TIM_Base_SetConfig+0x130>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d017      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a2d      	ldr	r2, [pc, #180]	; (800ce44 <TIM_Base_SetConfig+0x134>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d013      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4a2c      	ldr	r2, [pc, #176]	; (800ce48 <TIM_Base_SetConfig+0x138>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d00f      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4a2b      	ldr	r2, [pc, #172]	; (800ce4c <TIM_Base_SetConfig+0x13c>)
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d00b      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a2a      	ldr	r2, [pc, #168]	; (800ce50 <TIM_Base_SetConfig+0x140>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d007      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	4a29      	ldr	r2, [pc, #164]	; (800ce54 <TIM_Base_SetConfig+0x144>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d003      	beq.n	800cdba <TIM_Base_SetConfig+0xaa>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	4a28      	ldr	r2, [pc, #160]	; (800ce58 <TIM_Base_SetConfig+0x148>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d108      	bne.n	800cdcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	695b      	ldr	r3, [r3, #20]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4a10      	ldr	r2, [pc, #64]	; (800ce34 <TIM_Base_SetConfig+0x124>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d00f      	beq.n	800ce18 <TIM_Base_SetConfig+0x108>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a12      	ldr	r2, [pc, #72]	; (800ce44 <TIM_Base_SetConfig+0x134>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d00b      	beq.n	800ce18 <TIM_Base_SetConfig+0x108>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a11      	ldr	r2, [pc, #68]	; (800ce48 <TIM_Base_SetConfig+0x138>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d007      	beq.n	800ce18 <TIM_Base_SetConfig+0x108>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4a10      	ldr	r2, [pc, #64]	; (800ce4c <TIM_Base_SetConfig+0x13c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d003      	beq.n	800ce18 <TIM_Base_SetConfig+0x108>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a0f      	ldr	r2, [pc, #60]	; (800ce50 <TIM_Base_SetConfig+0x140>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d103      	bne.n	800ce20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2201      	movs	r2, #1
 800ce24:	615a      	str	r2, [r3, #20]
}
 800ce26:	bf00      	nop
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	40010000 	.word	0x40010000
 800ce38:	40000400 	.word	0x40000400
 800ce3c:	40000800 	.word	0x40000800
 800ce40:	40000c00 	.word	0x40000c00
 800ce44:	40010400 	.word	0x40010400
 800ce48:	40014000 	.word	0x40014000
 800ce4c:	40014400 	.word	0x40014400
 800ce50:	40014800 	.word	0x40014800
 800ce54:	4000e000 	.word	0x4000e000
 800ce58:	4000e400 	.word	0x4000e400

0800ce5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	f023 0201 	bic.w	r2, r3, #1
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	4b37      	ldr	r3, [pc, #220]	; (800cf64 <TIM_OC1_SetConfig+0x108>)
 800ce88:	4013      	ands	r3, r2
 800ce8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f023 0303 	bic.w	r3, r3, #3
 800ce92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f023 0302 	bic.w	r3, r3, #2
 800cea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	697a      	ldr	r2, [r7, #20]
 800ceac:	4313      	orrs	r3, r2
 800ceae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a2d      	ldr	r2, [pc, #180]	; (800cf68 <TIM_OC1_SetConfig+0x10c>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d00f      	beq.n	800ced8 <TIM_OC1_SetConfig+0x7c>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a2c      	ldr	r2, [pc, #176]	; (800cf6c <TIM_OC1_SetConfig+0x110>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d00b      	beq.n	800ced8 <TIM_OC1_SetConfig+0x7c>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	4a2b      	ldr	r2, [pc, #172]	; (800cf70 <TIM_OC1_SetConfig+0x114>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d007      	beq.n	800ced8 <TIM_OC1_SetConfig+0x7c>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4a2a      	ldr	r2, [pc, #168]	; (800cf74 <TIM_OC1_SetConfig+0x118>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d003      	beq.n	800ced8 <TIM_OC1_SetConfig+0x7c>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a29      	ldr	r2, [pc, #164]	; (800cf78 <TIM_OC1_SetConfig+0x11c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d10c      	bne.n	800cef2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	f023 0308 	bic.w	r3, r3, #8
 800cede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f023 0304 	bic.w	r3, r3, #4
 800cef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4a1c      	ldr	r2, [pc, #112]	; (800cf68 <TIM_OC1_SetConfig+0x10c>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d00f      	beq.n	800cf1a <TIM_OC1_SetConfig+0xbe>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4a1b      	ldr	r2, [pc, #108]	; (800cf6c <TIM_OC1_SetConfig+0x110>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d00b      	beq.n	800cf1a <TIM_OC1_SetConfig+0xbe>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4a1a      	ldr	r2, [pc, #104]	; (800cf70 <TIM_OC1_SetConfig+0x114>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d007      	beq.n	800cf1a <TIM_OC1_SetConfig+0xbe>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4a19      	ldr	r2, [pc, #100]	; (800cf74 <TIM_OC1_SetConfig+0x118>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d003      	beq.n	800cf1a <TIM_OC1_SetConfig+0xbe>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	4a18      	ldr	r2, [pc, #96]	; (800cf78 <TIM_OC1_SetConfig+0x11c>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d111      	bne.n	800cf3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cf28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	699b      	ldr	r3, [r3, #24]
 800cf38:	693a      	ldr	r2, [r7, #16]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	693a      	ldr	r2, [r7, #16]
 800cf42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	697a      	ldr	r2, [r7, #20]
 800cf56:	621a      	str	r2, [r3, #32]
}
 800cf58:	bf00      	nop
 800cf5a:	371c      	adds	r7, #28
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr
 800cf64:	fffeff8f 	.word	0xfffeff8f
 800cf68:	40010000 	.word	0x40010000
 800cf6c:	40010400 	.word	0x40010400
 800cf70:	40014000 	.word	0x40014000
 800cf74:	40014400 	.word	0x40014400
 800cf78:	40014800 	.word	0x40014800

0800cf7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b087      	sub	sp, #28
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	f023 0210 	bic.w	r2, r3, #16
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a1b      	ldr	r3, [r3, #32]
 800cf96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	699b      	ldr	r3, [r3, #24]
 800cfa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4b34      	ldr	r3, [pc, #208]	; (800d078 <TIM_OC2_SetConfig+0xfc>)
 800cfa8:	4013      	ands	r3, r2
 800cfaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	021b      	lsls	r3, r3, #8
 800cfba:	68fa      	ldr	r2, [r7, #12]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f023 0320 	bic.w	r3, r3, #32
 800cfc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	011b      	lsls	r3, r3, #4
 800cfce:	697a      	ldr	r2, [r7, #20]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a29      	ldr	r2, [pc, #164]	; (800d07c <TIM_OC2_SetConfig+0x100>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d003      	beq.n	800cfe4 <TIM_OC2_SetConfig+0x68>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a28      	ldr	r2, [pc, #160]	; (800d080 <TIM_OC2_SetConfig+0x104>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d10d      	bne.n	800d000 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cffe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a1e      	ldr	r2, [pc, #120]	; (800d07c <TIM_OC2_SetConfig+0x100>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00f      	beq.n	800d028 <TIM_OC2_SetConfig+0xac>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a1d      	ldr	r2, [pc, #116]	; (800d080 <TIM_OC2_SetConfig+0x104>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d00b      	beq.n	800d028 <TIM_OC2_SetConfig+0xac>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a1c      	ldr	r2, [pc, #112]	; (800d084 <TIM_OC2_SetConfig+0x108>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d007      	beq.n	800d028 <TIM_OC2_SetConfig+0xac>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a1b      	ldr	r2, [pc, #108]	; (800d088 <TIM_OC2_SetConfig+0x10c>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d003      	beq.n	800d028 <TIM_OC2_SetConfig+0xac>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4a1a      	ldr	r2, [pc, #104]	; (800d08c <TIM_OC2_SetConfig+0x110>)
 800d024:	4293      	cmp	r3, r2
 800d026:	d113      	bne.n	800d050 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d02e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	695b      	ldr	r3, [r3, #20]
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	693a      	ldr	r2, [r7, #16]
 800d040:	4313      	orrs	r3, r2
 800d042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	699b      	ldr	r3, [r3, #24]
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	693a      	ldr	r2, [r7, #16]
 800d04c:	4313      	orrs	r3, r2
 800d04e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	685a      	ldr	r2, [r3, #4]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	621a      	str	r2, [r3, #32]
}
 800d06a:	bf00      	nop
 800d06c:	371c      	adds	r7, #28
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop
 800d078:	feff8fff 	.word	0xfeff8fff
 800d07c:	40010000 	.word	0x40010000
 800d080:	40010400 	.word	0x40010400
 800d084:	40014000 	.word	0x40014000
 800d088:	40014400 	.word	0x40014400
 800d08c:	40014800 	.word	0x40014800

0800d090 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d090:	b480      	push	{r7}
 800d092:	b087      	sub	sp, #28
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a1b      	ldr	r3, [r3, #32]
 800d0aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	4b33      	ldr	r3, [pc, #204]	; (800d188 <TIM_OC3_SetConfig+0xf8>)
 800d0bc:	4013      	ands	r3, r2
 800d0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f023 0303 	bic.w	r3, r3, #3
 800d0c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	697a      	ldr	r2, [r7, #20]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a28      	ldr	r2, [pc, #160]	; (800d18c <TIM_OC3_SetConfig+0xfc>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d003      	beq.n	800d0f6 <TIM_OC3_SetConfig+0x66>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a27      	ldr	r2, [pc, #156]	; (800d190 <TIM_OC3_SetConfig+0x100>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d10d      	bne.n	800d112 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	021b      	lsls	r3, r3, #8
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	4313      	orrs	r3, r2
 800d108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a1d      	ldr	r2, [pc, #116]	; (800d18c <TIM_OC3_SetConfig+0xfc>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00f      	beq.n	800d13a <TIM_OC3_SetConfig+0xaa>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a1c      	ldr	r2, [pc, #112]	; (800d190 <TIM_OC3_SetConfig+0x100>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d00b      	beq.n	800d13a <TIM_OC3_SetConfig+0xaa>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a1b      	ldr	r2, [pc, #108]	; (800d194 <TIM_OC3_SetConfig+0x104>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d007      	beq.n	800d13a <TIM_OC3_SetConfig+0xaa>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4a1a      	ldr	r2, [pc, #104]	; (800d198 <TIM_OC3_SetConfig+0x108>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d003      	beq.n	800d13a <TIM_OC3_SetConfig+0xaa>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	4a19      	ldr	r2, [pc, #100]	; (800d19c <TIM_OC3_SetConfig+0x10c>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d113      	bne.n	800d162 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	011b      	lsls	r3, r3, #4
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	4313      	orrs	r3, r2
 800d154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	699b      	ldr	r3, [r3, #24]
 800d15a:	011b      	lsls	r3, r3, #4
 800d15c:	693a      	ldr	r2, [r7, #16]
 800d15e:	4313      	orrs	r3, r2
 800d160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	621a      	str	r2, [r3, #32]
}
 800d17c:	bf00      	nop
 800d17e:	371c      	adds	r7, #28
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	fffeff8f 	.word	0xfffeff8f
 800d18c:	40010000 	.word	0x40010000
 800d190:	40010400 	.word	0x40010400
 800d194:	40014000 	.word	0x40014000
 800d198:	40014400 	.word	0x40014400
 800d19c:	40014800 	.word	0x40014800

0800d1a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6a1b      	ldr	r3, [r3, #32]
 800d1ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	4b24      	ldr	r3, [pc, #144]	; (800d25c <TIM_OC4_SetConfig+0xbc>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	021b      	lsls	r3, r3, #8
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	031b      	lsls	r3, r3, #12
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a19      	ldr	r2, [pc, #100]	; (800d260 <TIM_OC4_SetConfig+0xc0>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d00f      	beq.n	800d220 <TIM_OC4_SetConfig+0x80>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a18      	ldr	r2, [pc, #96]	; (800d264 <TIM_OC4_SetConfig+0xc4>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d00b      	beq.n	800d220 <TIM_OC4_SetConfig+0x80>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <TIM_OC4_SetConfig+0xc8>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d007      	beq.n	800d220 <TIM_OC4_SetConfig+0x80>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a16      	ldr	r2, [pc, #88]	; (800d26c <TIM_OC4_SetConfig+0xcc>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d003      	beq.n	800d220 <TIM_OC4_SetConfig+0x80>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a15      	ldr	r2, [pc, #84]	; (800d270 <TIM_OC4_SetConfig+0xd0>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d109      	bne.n	800d234 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	019b      	lsls	r3, r3, #6
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	4313      	orrs	r3, r2
 800d232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	621a      	str	r2, [r3, #32]
}
 800d24e:	bf00      	nop
 800d250:	371c      	adds	r7, #28
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	feff8fff 	.word	0xfeff8fff
 800d260:	40010000 	.word	0x40010000
 800d264:	40010400 	.word	0x40010400
 800d268:	40014000 	.word	0x40014000
 800d26c:	40014400 	.word	0x40014400
 800d270:	40014800 	.word	0x40014800

0800d274 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d274:	b480      	push	{r7}
 800d276:	b087      	sub	sp, #28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	4b21      	ldr	r3, [pc, #132]	; (800d324 <TIM_OC5_SetConfig+0xb0>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d2b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	689b      	ldr	r3, [r3, #8]
 800d2ba:	041b      	lsls	r3, r3, #16
 800d2bc:	693a      	ldr	r2, [r7, #16]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a18      	ldr	r2, [pc, #96]	; (800d328 <TIM_OC5_SetConfig+0xb4>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d00f      	beq.n	800d2ea <TIM_OC5_SetConfig+0x76>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a17      	ldr	r2, [pc, #92]	; (800d32c <TIM_OC5_SetConfig+0xb8>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00b      	beq.n	800d2ea <TIM_OC5_SetConfig+0x76>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a16      	ldr	r2, [pc, #88]	; (800d330 <TIM_OC5_SetConfig+0xbc>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d007      	beq.n	800d2ea <TIM_OC5_SetConfig+0x76>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a15      	ldr	r2, [pc, #84]	; (800d334 <TIM_OC5_SetConfig+0xc0>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d003      	beq.n	800d2ea <TIM_OC5_SetConfig+0x76>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a14      	ldr	r2, [pc, #80]	; (800d338 <TIM_OC5_SetConfig+0xc4>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d109      	bne.n	800d2fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	695b      	ldr	r3, [r3, #20]
 800d2f6:	021b      	lsls	r3, r3, #8
 800d2f8:	697a      	ldr	r2, [r7, #20]
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	697a      	ldr	r2, [r7, #20]
 800d302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	621a      	str	r2, [r3, #32]
}
 800d318:	bf00      	nop
 800d31a:	371c      	adds	r7, #28
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr
 800d324:	fffeff8f 	.word	0xfffeff8f
 800d328:	40010000 	.word	0x40010000
 800d32c:	40010400 	.word	0x40010400
 800d330:	40014000 	.word	0x40014000
 800d334:	40014400 	.word	0x40014400
 800d338:	40014800 	.word	0x40014800

0800d33c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b087      	sub	sp, #28
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d364:	68fa      	ldr	r2, [r7, #12]
 800d366:	4b22      	ldr	r3, [pc, #136]	; (800d3f0 <TIM_OC6_SetConfig+0xb4>)
 800d368:	4013      	ands	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	4313      	orrs	r3, r2
 800d376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d37e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	051b      	lsls	r3, r3, #20
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4313      	orrs	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	4a19      	ldr	r2, [pc, #100]	; (800d3f4 <TIM_OC6_SetConfig+0xb8>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d00f      	beq.n	800d3b4 <TIM_OC6_SetConfig+0x78>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a18      	ldr	r2, [pc, #96]	; (800d3f8 <TIM_OC6_SetConfig+0xbc>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d00b      	beq.n	800d3b4 <TIM_OC6_SetConfig+0x78>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a17      	ldr	r2, [pc, #92]	; (800d3fc <TIM_OC6_SetConfig+0xc0>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d007      	beq.n	800d3b4 <TIM_OC6_SetConfig+0x78>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a16      	ldr	r2, [pc, #88]	; (800d400 <TIM_OC6_SetConfig+0xc4>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d003      	beq.n	800d3b4 <TIM_OC6_SetConfig+0x78>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a15      	ldr	r2, [pc, #84]	; (800d404 <TIM_OC6_SetConfig+0xc8>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d109      	bne.n	800d3c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	695b      	ldr	r3, [r3, #20]
 800d3c0:	029b      	lsls	r3, r3, #10
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	697a      	ldr	r2, [r7, #20]
 800d3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	621a      	str	r2, [r3, #32]
}
 800d3e2:	bf00      	nop
 800d3e4:	371c      	adds	r7, #28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	feff8fff 	.word	0xfeff8fff
 800d3f4:	40010000 	.word	0x40010000
 800d3f8:	40010400 	.word	0x40010400
 800d3fc:	40014000 	.word	0x40014000
 800d400:	40014400 	.word	0x40014400
 800d404:	40014800 	.word	0x40014800

0800d408 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d408:	b480      	push	{r7}
 800d40a:	b087      	sub	sp, #28
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6a1b      	ldr	r3, [r3, #32]
 800d41a:	f023 0201 	bic.w	r2, r3, #1
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	4a2c      	ldr	r2, [pc, #176]	; (800d4e4 <TIM_TI1_SetConfig+0xdc>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d023      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d43c:	d01f      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	4a29      	ldr	r2, [pc, #164]	; (800d4e8 <TIM_TI1_SetConfig+0xe0>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d01b      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	4a28      	ldr	r2, [pc, #160]	; (800d4ec <TIM_TI1_SetConfig+0xe4>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d017      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	4a27      	ldr	r2, [pc, #156]	; (800d4f0 <TIM_TI1_SetConfig+0xe8>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d013      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4a26      	ldr	r2, [pc, #152]	; (800d4f4 <TIM_TI1_SetConfig+0xec>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d00f      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	4a25      	ldr	r2, [pc, #148]	; (800d4f8 <TIM_TI1_SetConfig+0xf0>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d00b      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4a24      	ldr	r2, [pc, #144]	; (800d4fc <TIM_TI1_SetConfig+0xf4>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d007      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4a23      	ldr	r2, [pc, #140]	; (800d500 <TIM_TI1_SetConfig+0xf8>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d003      	beq.n	800d47e <TIM_TI1_SetConfig+0x76>
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4a22      	ldr	r2, [pc, #136]	; (800d504 <TIM_TI1_SetConfig+0xfc>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d101      	bne.n	800d482 <TIM_TI1_SetConfig+0x7a>
 800d47e:	2301      	movs	r3, #1
 800d480:	e000      	b.n	800d484 <TIM_TI1_SetConfig+0x7c>
 800d482:	2300      	movs	r3, #0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d008      	beq.n	800d49a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f023 0303 	bic.w	r3, r3, #3
 800d48e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d490:	697a      	ldr	r2, [r7, #20]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4313      	orrs	r3, r2
 800d496:	617b      	str	r3, [r7, #20]
 800d498:	e003      	b.n	800d4a2 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f043 0301 	orr.w	r3, r3, #1
 800d4a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	011b      	lsls	r3, r3, #4
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	f023 030a 	bic.w	r3, r3, #10
 800d4bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	f003 030a 	and.w	r3, r3, #10
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	693a      	ldr	r2, [r7, #16]
 800d4d4:	621a      	str	r2, [r3, #32]
}
 800d4d6:	bf00      	nop
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	40010000 	.word	0x40010000
 800d4e8:	40000400 	.word	0x40000400
 800d4ec:	40000800 	.word	0x40000800
 800d4f0:	40000c00 	.word	0x40000c00
 800d4f4:	40010400 	.word	0x40010400
 800d4f8:	40001800 	.word	0x40001800
 800d4fc:	40014000 	.word	0x40014000
 800d500:	4000e000 	.word	0x4000e000
 800d504:	4000e400 	.word	0x4000e400

0800d508 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d508:	b480      	push	{r7}
 800d50a:	b087      	sub	sp, #28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
 800d514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	f023 0210 	bic.w	r2, r3, #16
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	021b      	lsls	r3, r3, #8
 800d53a:	697a      	ldr	r2, [r7, #20]
 800d53c:	4313      	orrs	r3, r2
 800d53e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	031b      	lsls	r3, r3, #12
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	4313      	orrs	r3, r2
 800d552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d55a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d564:	693a      	ldr	r2, [r7, #16]
 800d566:	4313      	orrs	r3, r2
 800d568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	697a      	ldr	r2, [r7, #20]
 800d56e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	621a      	str	r2, [r3, #32]
}
 800d576:	bf00      	nop
 800d578:	371c      	adds	r7, #28
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d582:	b480      	push	{r7}
 800d584:	b087      	sub	sp, #28
 800d586:	af00      	add	r7, sp, #0
 800d588:	60f8      	str	r0, [r7, #12]
 800d58a:	60b9      	str	r1, [r7, #8]
 800d58c:	607a      	str	r2, [r7, #4]
 800d58e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6a1b      	ldr	r3, [r3, #32]
 800d594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	69db      	ldr	r3, [r3, #28]
 800d5a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f023 0303 	bic.w	r3, r3, #3
 800d5ae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4313      	orrs	r3, r2
 800d5b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	011b      	lsls	r3, r3, #4
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800d5d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	021b      	lsls	r3, r3, #8
 800d5d8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800d5dc:	693a      	ldr	r2, [r7, #16]
 800d5de:	4313      	orrs	r3, r2
 800d5e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	693a      	ldr	r2, [r7, #16]
 800d5ec:	621a      	str	r2, [r3, #32]
}
 800d5ee:	bf00      	nop
 800d5f0:	371c      	adds	r7, #28
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d5fa:	b480      	push	{r7}
 800d5fc:	b087      	sub	sp, #28
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	607a      	str	r2, [r7, #4]
 800d606:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6a1b      	ldr	r3, [r3, #32]
 800d60c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d626:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	021b      	lsls	r3, r3, #8
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	4313      	orrs	r3, r2
 800d630:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d638:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	031b      	lsls	r3, r3, #12
 800d63e:	b29b      	uxth	r3, r3
 800d640:	697a      	ldr	r2, [r7, #20]
 800d642:	4313      	orrs	r3, r2
 800d644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800d64c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	031b      	lsls	r3, r3, #12
 800d652:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800d656:	693a      	ldr	r2, [r7, #16]
 800d658:	4313      	orrs	r3, r2
 800d65a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	621a      	str	r2, [r3, #32]
}
 800d668:	bf00      	nop
 800d66a:	371c      	adds	r7, #28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d672:	4770      	bx	lr

0800d674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d684:	2b01      	cmp	r3, #1
 800d686:	d101      	bne.n	800d68c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d688:	2302      	movs	r3, #2
 800d68a:	e077      	b.n	800d77c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2202      	movs	r2, #2
 800d698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a35      	ldr	r2, [pc, #212]	; (800d788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d004      	beq.n	800d6c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a34      	ldr	r2, [pc, #208]	; (800d78c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d108      	bne.n	800d6d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d6c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	4313      	orrs	r3, r2
 800d6d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a25      	ldr	r2, [pc, #148]	; (800d788 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d02c      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6fe:	d027      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a22      	ldr	r2, [pc, #136]	; (800d790 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d022      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a21      	ldr	r2, [pc, #132]	; (800d794 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d01d      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a1f      	ldr	r2, [pc, #124]	; (800d798 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d018      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a1a      	ldr	r2, [pc, #104]	; (800d78c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d724:	4293      	cmp	r3, r2
 800d726:	d013      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a1b      	ldr	r2, [pc, #108]	; (800d79c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d00e      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a1a      	ldr	r2, [pc, #104]	; (800d7a0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d009      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a18      	ldr	r2, [pc, #96]	; (800d7a4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d742:	4293      	cmp	r3, r2
 800d744:	d004      	beq.n	800d750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a17      	ldr	r2, [pc, #92]	; (800d7a8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d10c      	bne.n	800d76a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d756:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	4313      	orrs	r3, r2
 800d760:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	40010000 	.word	0x40010000
 800d78c:	40010400 	.word	0x40010400
 800d790:	40000400 	.word	0x40000400
 800d794:	40000800 	.word	0x40000800
 800d798:	40000c00 	.word	0x40000c00
 800d79c:	40001800 	.word	0x40001800
 800d7a0:	40014000 	.word	0x40014000
 800d7a4:	4000e000 	.word	0x4000e000
 800d7a8:	4000e400 	.word	0x4000e400

0800d7ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d101      	bne.n	800d7c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	e087      	b.n	800d8d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	4313      	orrs	r3, r2
 800d7dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4313      	orrs	r3, r2
 800d806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	691b      	ldr	r3, [r3, #16]
 800d812:	4313      	orrs	r3, r2
 800d814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	695b      	ldr	r3, [r3, #20]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	699b      	ldr	r3, [r3, #24]
 800d83c:	041b      	lsls	r3, r3, #16
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a27      	ldr	r2, [pc, #156]	; (800d8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d004      	beq.n	800d856 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a25      	ldr	r2, [pc, #148]	; (800d8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d106      	bne.n	800d864 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	69db      	ldr	r3, [r3, #28]
 800d860:	4313      	orrs	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a1e      	ldr	r2, [pc, #120]	; (800d8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d004      	beq.n	800d878 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a1d      	ldr	r2, [pc, #116]	; (800d8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d126      	bne.n	800d8c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d882:	051b      	lsls	r3, r3, #20
 800d884:	4313      	orrs	r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	6a1b      	ldr	r3, [r3, #32]
 800d892:	4313      	orrs	r3, r2
 800d894:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a0e      	ldr	r2, [pc, #56]	; (800d8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d004      	beq.n	800d8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a0d      	ldr	r2, [pc, #52]	; (800d8e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d106      	bne.n	800d8c6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d8d6:	2300      	movs	r3, #0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr
 800d8e4:	40010000 	.word	0x40010000
 800d8e8:	40010400 	.word	0x40010400

0800d8ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e042      	b.n	800d984 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7f5 f9e5 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2224      	movs	r2, #36	; 0x24
 800d91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f022 0201 	bic.w	r2, r2, #1
 800d92c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 f82c 	bl	800d98c <UART_SetConfig>
 800d934:	4603      	mov	r3, r0
 800d936:	2b01      	cmp	r3, #1
 800d938:	d101      	bne.n	800d93e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e022      	b.n	800d984 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d942:	2b00      	cmp	r3, #0
 800d944:	d002      	beq.n	800d94c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fe8c 	bl	800e664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d95a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	689a      	ldr	r2, [r3, #8]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d96a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f042 0201 	orr.w	r2, r2, #1
 800d97a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 ff13 	bl	800e7a8 <UART_CheckIdleState>
 800d982:	4603      	mov	r3, r0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d98c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d990:	b092      	sub	sp, #72	; 0x48
 800d992:	af00      	add	r7, sp, #0
 800d994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d996:	2300      	movs	r3, #0
 800d998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	689a      	ldr	r2, [r3, #8]
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	695b      	ldr	r3, [r3, #20]
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	4bbe      	ldr	r3, [pc, #760]	; (800dcb4 <UART_SetConfig+0x328>)
 800d9bc:	4013      	ands	r3, r2
 800d9be:	697a      	ldr	r2, [r7, #20]
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9c4:	430b      	orrs	r3, r1
 800d9c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	68da      	ldr	r2, [r3, #12]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4ab3      	ldr	r2, [pc, #716]	; (800dcb8 <UART_SetConfig+0x32c>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d004      	beq.n	800d9f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9ee:	697b      	ldr	r3, [r7, #20]
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	689a      	ldr	r2, [r3, #8]
 800d9fe:	4baf      	ldr	r3, [pc, #700]	; (800dcbc <UART_SetConfig+0x330>)
 800da00:	4013      	ands	r3, r2
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	6812      	ldr	r2, [r2, #0]
 800da06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800da08:	430b      	orrs	r3, r1
 800da0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da12:	f023 010f 	bic.w	r1, r3, #15
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4aa6      	ldr	r2, [pc, #664]	; (800dcc0 <UART_SetConfig+0x334>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d177      	bne.n	800db1c <UART_SetConfig+0x190>
 800da2c:	4ba5      	ldr	r3, [pc, #660]	; (800dcc4 <UART_SetConfig+0x338>)
 800da2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da34:	2b28      	cmp	r3, #40	; 0x28
 800da36:	d86d      	bhi.n	800db14 <UART_SetConfig+0x188>
 800da38:	a201      	add	r2, pc, #4	; (adr r2, 800da40 <UART_SetConfig+0xb4>)
 800da3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3e:	bf00      	nop
 800da40:	0800dae5 	.word	0x0800dae5
 800da44:	0800db15 	.word	0x0800db15
 800da48:	0800db15 	.word	0x0800db15
 800da4c:	0800db15 	.word	0x0800db15
 800da50:	0800db15 	.word	0x0800db15
 800da54:	0800db15 	.word	0x0800db15
 800da58:	0800db15 	.word	0x0800db15
 800da5c:	0800db15 	.word	0x0800db15
 800da60:	0800daed 	.word	0x0800daed
 800da64:	0800db15 	.word	0x0800db15
 800da68:	0800db15 	.word	0x0800db15
 800da6c:	0800db15 	.word	0x0800db15
 800da70:	0800db15 	.word	0x0800db15
 800da74:	0800db15 	.word	0x0800db15
 800da78:	0800db15 	.word	0x0800db15
 800da7c:	0800db15 	.word	0x0800db15
 800da80:	0800daf5 	.word	0x0800daf5
 800da84:	0800db15 	.word	0x0800db15
 800da88:	0800db15 	.word	0x0800db15
 800da8c:	0800db15 	.word	0x0800db15
 800da90:	0800db15 	.word	0x0800db15
 800da94:	0800db15 	.word	0x0800db15
 800da98:	0800db15 	.word	0x0800db15
 800da9c:	0800db15 	.word	0x0800db15
 800daa0:	0800dafd 	.word	0x0800dafd
 800daa4:	0800db15 	.word	0x0800db15
 800daa8:	0800db15 	.word	0x0800db15
 800daac:	0800db15 	.word	0x0800db15
 800dab0:	0800db15 	.word	0x0800db15
 800dab4:	0800db15 	.word	0x0800db15
 800dab8:	0800db15 	.word	0x0800db15
 800dabc:	0800db15 	.word	0x0800db15
 800dac0:	0800db05 	.word	0x0800db05
 800dac4:	0800db15 	.word	0x0800db15
 800dac8:	0800db15 	.word	0x0800db15
 800dacc:	0800db15 	.word	0x0800db15
 800dad0:	0800db15 	.word	0x0800db15
 800dad4:	0800db15 	.word	0x0800db15
 800dad8:	0800db15 	.word	0x0800db15
 800dadc:	0800db15 	.word	0x0800db15
 800dae0:	0800db0d 	.word	0x0800db0d
 800dae4:	2301      	movs	r3, #1
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e326      	b.n	800e13a <UART_SetConfig+0x7ae>
 800daec:	2304      	movs	r3, #4
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e322      	b.n	800e13a <UART_SetConfig+0x7ae>
 800daf4:	2308      	movs	r3, #8
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e31e      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dafc:	2310      	movs	r3, #16
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e31a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db04:	2320      	movs	r3, #32
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e316      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e312      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e30e      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a69      	ldr	r2, [pc, #420]	; (800dcc8 <UART_SetConfig+0x33c>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d130      	bne.n	800db88 <UART_SetConfig+0x1fc>
 800db26:	4b67      	ldr	r3, [pc, #412]	; (800dcc4 <UART_SetConfig+0x338>)
 800db28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2a:	f003 0307 	and.w	r3, r3, #7
 800db2e:	2b05      	cmp	r3, #5
 800db30:	d826      	bhi.n	800db80 <UART_SetConfig+0x1f4>
 800db32:	a201      	add	r2, pc, #4	; (adr r2, 800db38 <UART_SetConfig+0x1ac>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800db51 	.word	0x0800db51
 800db3c:	0800db59 	.word	0x0800db59
 800db40:	0800db61 	.word	0x0800db61
 800db44:	0800db69 	.word	0x0800db69
 800db48:	0800db71 	.word	0x0800db71
 800db4c:	0800db79 	.word	0x0800db79
 800db50:	2300      	movs	r3, #0
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db56:	e2f0      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db58:	2304      	movs	r3, #4
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5e:	e2ec      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db60:	2308      	movs	r3, #8
 800db62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db66:	e2e8      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db68:	2310      	movs	r3, #16
 800db6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6e:	e2e4      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db70:	2320      	movs	r3, #32
 800db72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db76:	e2e0      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db78:	2340      	movs	r3, #64	; 0x40
 800db7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7e:	e2dc      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db80:	2380      	movs	r3, #128	; 0x80
 800db82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db86:	e2d8      	b.n	800e13a <UART_SetConfig+0x7ae>
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4a4f      	ldr	r2, [pc, #316]	; (800dccc <UART_SetConfig+0x340>)
 800db8e:	4293      	cmp	r3, r2
 800db90:	d130      	bne.n	800dbf4 <UART_SetConfig+0x268>
 800db92:	4b4c      	ldr	r3, [pc, #304]	; (800dcc4 <UART_SetConfig+0x338>)
 800db94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db96:	f003 0307 	and.w	r3, r3, #7
 800db9a:	2b05      	cmp	r3, #5
 800db9c:	d826      	bhi.n	800dbec <UART_SetConfig+0x260>
 800db9e:	a201      	add	r2, pc, #4	; (adr r2, 800dba4 <UART_SetConfig+0x218>)
 800dba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dba4:	0800dbbd 	.word	0x0800dbbd
 800dba8:	0800dbc5 	.word	0x0800dbc5
 800dbac:	0800dbcd 	.word	0x0800dbcd
 800dbb0:	0800dbd5 	.word	0x0800dbd5
 800dbb4:	0800dbdd 	.word	0x0800dbdd
 800dbb8:	0800dbe5 	.word	0x0800dbe5
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbc2:	e2ba      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbc4:	2304      	movs	r3, #4
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbca:	e2b6      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbcc:	2308      	movs	r3, #8
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd2:	e2b2      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbd4:	2310      	movs	r3, #16
 800dbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbda:	e2ae      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbdc:	2320      	movs	r3, #32
 800dbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe2:	e2aa      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbe4:	2340      	movs	r3, #64	; 0x40
 800dbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbea:	e2a6      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbec:	2380      	movs	r3, #128	; 0x80
 800dbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf2:	e2a2      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a35      	ldr	r2, [pc, #212]	; (800dcd0 <UART_SetConfig+0x344>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d130      	bne.n	800dc60 <UART_SetConfig+0x2d4>
 800dbfe:	4b31      	ldr	r3, [pc, #196]	; (800dcc4 <UART_SetConfig+0x338>)
 800dc00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc02:	f003 0307 	and.w	r3, r3, #7
 800dc06:	2b05      	cmp	r3, #5
 800dc08:	d826      	bhi.n	800dc58 <UART_SetConfig+0x2cc>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <UART_SetConfig+0x284>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc29 	.word	0x0800dc29
 800dc14:	0800dc31 	.word	0x0800dc31
 800dc18:	0800dc39 	.word	0x0800dc39
 800dc1c:	0800dc41 	.word	0x0800dc41
 800dc20:	0800dc49 	.word	0x0800dc49
 800dc24:	0800dc51 	.word	0x0800dc51
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e284      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc30:	2304      	movs	r3, #4
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e280      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc38:	2308      	movs	r3, #8
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e27c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc40:	2310      	movs	r3, #16
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e278      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc48:	2320      	movs	r3, #32
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e274      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc50:	2340      	movs	r3, #64	; 0x40
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e270      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc58:	2380      	movs	r3, #128	; 0x80
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e26c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4a1b      	ldr	r2, [pc, #108]	; (800dcd4 <UART_SetConfig+0x348>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d142      	bne.n	800dcf0 <UART_SetConfig+0x364>
 800dc6a:	4b16      	ldr	r3, [pc, #88]	; (800dcc4 <UART_SetConfig+0x338>)
 800dc6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc6e:	f003 0307 	and.w	r3, r3, #7
 800dc72:	2b05      	cmp	r3, #5
 800dc74:	d838      	bhi.n	800dce8 <UART_SetConfig+0x35c>
 800dc76:	a201      	add	r2, pc, #4	; (adr r2, 800dc7c <UART_SetConfig+0x2f0>)
 800dc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7c:	0800dc95 	.word	0x0800dc95
 800dc80:	0800dc9d 	.word	0x0800dc9d
 800dc84:	0800dca5 	.word	0x0800dca5
 800dc88:	0800dcad 	.word	0x0800dcad
 800dc8c:	0800dcd9 	.word	0x0800dcd9
 800dc90:	0800dce1 	.word	0x0800dce1
 800dc94:	2300      	movs	r3, #0
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e24e      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dc9c:	2304      	movs	r3, #4
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e24a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dca4:	2308      	movs	r3, #8
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcaa:	e246      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dcac:	2310      	movs	r3, #16
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb2:	e242      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dcb4:	cfff69f3 	.word	0xcfff69f3
 800dcb8:	58000c00 	.word	0x58000c00
 800dcbc:	11fff4ff 	.word	0x11fff4ff
 800dcc0:	40011000 	.word	0x40011000
 800dcc4:	58024400 	.word	0x58024400
 800dcc8:	40004400 	.word	0x40004400
 800dccc:	40004800 	.word	0x40004800
 800dcd0:	40004c00 	.word	0x40004c00
 800dcd4:	40005000 	.word	0x40005000
 800dcd8:	2320      	movs	r3, #32
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcde:	e22c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dce0:	2340      	movs	r3, #64	; 0x40
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce6:	e228      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dce8:	2380      	movs	r3, #128	; 0x80
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcee:	e224      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4ab1      	ldr	r2, [pc, #708]	; (800dfbc <UART_SetConfig+0x630>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d176      	bne.n	800dde8 <UART_SetConfig+0x45c>
 800dcfa:	4bb1      	ldr	r3, [pc, #708]	; (800dfc0 <UART_SetConfig+0x634>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd02:	2b28      	cmp	r3, #40	; 0x28
 800dd04:	d86c      	bhi.n	800dde0 <UART_SetConfig+0x454>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <UART_SetConfig+0x380>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800ddb1 	.word	0x0800ddb1
 800dd10:	0800dde1 	.word	0x0800dde1
 800dd14:	0800dde1 	.word	0x0800dde1
 800dd18:	0800dde1 	.word	0x0800dde1
 800dd1c:	0800dde1 	.word	0x0800dde1
 800dd20:	0800dde1 	.word	0x0800dde1
 800dd24:	0800dde1 	.word	0x0800dde1
 800dd28:	0800dde1 	.word	0x0800dde1
 800dd2c:	0800ddb9 	.word	0x0800ddb9
 800dd30:	0800dde1 	.word	0x0800dde1
 800dd34:	0800dde1 	.word	0x0800dde1
 800dd38:	0800dde1 	.word	0x0800dde1
 800dd3c:	0800dde1 	.word	0x0800dde1
 800dd40:	0800dde1 	.word	0x0800dde1
 800dd44:	0800dde1 	.word	0x0800dde1
 800dd48:	0800dde1 	.word	0x0800dde1
 800dd4c:	0800ddc1 	.word	0x0800ddc1
 800dd50:	0800dde1 	.word	0x0800dde1
 800dd54:	0800dde1 	.word	0x0800dde1
 800dd58:	0800dde1 	.word	0x0800dde1
 800dd5c:	0800dde1 	.word	0x0800dde1
 800dd60:	0800dde1 	.word	0x0800dde1
 800dd64:	0800dde1 	.word	0x0800dde1
 800dd68:	0800dde1 	.word	0x0800dde1
 800dd6c:	0800ddc9 	.word	0x0800ddc9
 800dd70:	0800dde1 	.word	0x0800dde1
 800dd74:	0800dde1 	.word	0x0800dde1
 800dd78:	0800dde1 	.word	0x0800dde1
 800dd7c:	0800dde1 	.word	0x0800dde1
 800dd80:	0800dde1 	.word	0x0800dde1
 800dd84:	0800dde1 	.word	0x0800dde1
 800dd88:	0800dde1 	.word	0x0800dde1
 800dd8c:	0800ddd1 	.word	0x0800ddd1
 800dd90:	0800dde1 	.word	0x0800dde1
 800dd94:	0800dde1 	.word	0x0800dde1
 800dd98:	0800dde1 	.word	0x0800dde1
 800dd9c:	0800dde1 	.word	0x0800dde1
 800dda0:	0800dde1 	.word	0x0800dde1
 800dda4:	0800dde1 	.word	0x0800dde1
 800dda8:	0800dde1 	.word	0x0800dde1
 800ddac:	0800ddd9 	.word	0x0800ddd9
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e1c0      	b.n	800e13a <UART_SetConfig+0x7ae>
 800ddb8:	2304      	movs	r3, #4
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e1bc      	b.n	800e13a <UART_SetConfig+0x7ae>
 800ddc0:	2308      	movs	r3, #8
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e1b8      	b.n	800e13a <UART_SetConfig+0x7ae>
 800ddc8:	2310      	movs	r3, #16
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e1b4      	b.n	800e13a <UART_SetConfig+0x7ae>
 800ddd0:	2320      	movs	r3, #32
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e1b0      	b.n	800e13a <UART_SetConfig+0x7ae>
 800ddd8:	2340      	movs	r3, #64	; 0x40
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e1ac      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dde0:	2380      	movs	r3, #128	; 0x80
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e1a8      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a75      	ldr	r2, [pc, #468]	; (800dfc4 <UART_SetConfig+0x638>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d130      	bne.n	800de54 <UART_SetConfig+0x4c8>
 800ddf2:	4b73      	ldr	r3, [pc, #460]	; (800dfc0 <UART_SetConfig+0x634>)
 800ddf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	2b05      	cmp	r3, #5
 800ddfc:	d826      	bhi.n	800de4c <UART_SetConfig+0x4c0>
 800ddfe:	a201      	add	r2, pc, #4	; (adr r2, 800de04 <UART_SetConfig+0x478>)
 800de00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de04:	0800de1d 	.word	0x0800de1d
 800de08:	0800de25 	.word	0x0800de25
 800de0c:	0800de2d 	.word	0x0800de2d
 800de10:	0800de35 	.word	0x0800de35
 800de14:	0800de3d 	.word	0x0800de3d
 800de18:	0800de45 	.word	0x0800de45
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e18a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de24:	2304      	movs	r3, #4
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e186      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de2c:	2308      	movs	r3, #8
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de32:	e182      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de34:	2310      	movs	r3, #16
 800de36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de3a:	e17e      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de3c:	2320      	movs	r3, #32
 800de3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de42:	e17a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de44:	2340      	movs	r3, #64	; 0x40
 800de46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de4a:	e176      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de4c:	2380      	movs	r3, #128	; 0x80
 800de4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de52:	e172      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a5b      	ldr	r2, [pc, #364]	; (800dfc8 <UART_SetConfig+0x63c>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d130      	bne.n	800dec0 <UART_SetConfig+0x534>
 800de5e:	4b58      	ldr	r3, [pc, #352]	; (800dfc0 <UART_SetConfig+0x634>)
 800de60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b05      	cmp	r3, #5
 800de68:	d826      	bhi.n	800deb8 <UART_SetConfig+0x52c>
 800de6a:	a201      	add	r2, pc, #4	; (adr r2, 800de70 <UART_SetConfig+0x4e4>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800de89 	.word	0x0800de89
 800de74:	0800de91 	.word	0x0800de91
 800de78:	0800de99 	.word	0x0800de99
 800de7c:	0800dea1 	.word	0x0800dea1
 800de80:	0800dea9 	.word	0x0800dea9
 800de84:	0800deb1 	.word	0x0800deb1
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de8e:	e154      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de90:	2304      	movs	r3, #4
 800de92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de96:	e150      	b.n	800e13a <UART_SetConfig+0x7ae>
 800de98:	2308      	movs	r3, #8
 800de9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de9e:	e14c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dea0:	2310      	movs	r3, #16
 800dea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dea6:	e148      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dea8:	2320      	movs	r3, #32
 800deaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deae:	e144      	b.n	800e13a <UART_SetConfig+0x7ae>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deb6:	e140      	b.n	800e13a <UART_SetConfig+0x7ae>
 800deb8:	2380      	movs	r3, #128	; 0x80
 800deba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800debe:	e13c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a41      	ldr	r2, [pc, #260]	; (800dfcc <UART_SetConfig+0x640>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	f040 8082 	bne.w	800dfd0 <UART_SetConfig+0x644>
 800decc:	4b3c      	ldr	r3, [pc, #240]	; (800dfc0 <UART_SetConfig+0x634>)
 800dece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ded0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ded4:	2b28      	cmp	r3, #40	; 0x28
 800ded6:	d86d      	bhi.n	800dfb4 <UART_SetConfig+0x628>
 800ded8:	a201      	add	r2, pc, #4	; (adr r2, 800dee0 <UART_SetConfig+0x554>)
 800deda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dede:	bf00      	nop
 800dee0:	0800df85 	.word	0x0800df85
 800dee4:	0800dfb5 	.word	0x0800dfb5
 800dee8:	0800dfb5 	.word	0x0800dfb5
 800deec:	0800dfb5 	.word	0x0800dfb5
 800def0:	0800dfb5 	.word	0x0800dfb5
 800def4:	0800dfb5 	.word	0x0800dfb5
 800def8:	0800dfb5 	.word	0x0800dfb5
 800defc:	0800dfb5 	.word	0x0800dfb5
 800df00:	0800df8d 	.word	0x0800df8d
 800df04:	0800dfb5 	.word	0x0800dfb5
 800df08:	0800dfb5 	.word	0x0800dfb5
 800df0c:	0800dfb5 	.word	0x0800dfb5
 800df10:	0800dfb5 	.word	0x0800dfb5
 800df14:	0800dfb5 	.word	0x0800dfb5
 800df18:	0800dfb5 	.word	0x0800dfb5
 800df1c:	0800dfb5 	.word	0x0800dfb5
 800df20:	0800df95 	.word	0x0800df95
 800df24:	0800dfb5 	.word	0x0800dfb5
 800df28:	0800dfb5 	.word	0x0800dfb5
 800df2c:	0800dfb5 	.word	0x0800dfb5
 800df30:	0800dfb5 	.word	0x0800dfb5
 800df34:	0800dfb5 	.word	0x0800dfb5
 800df38:	0800dfb5 	.word	0x0800dfb5
 800df3c:	0800dfb5 	.word	0x0800dfb5
 800df40:	0800df9d 	.word	0x0800df9d
 800df44:	0800dfb5 	.word	0x0800dfb5
 800df48:	0800dfb5 	.word	0x0800dfb5
 800df4c:	0800dfb5 	.word	0x0800dfb5
 800df50:	0800dfb5 	.word	0x0800dfb5
 800df54:	0800dfb5 	.word	0x0800dfb5
 800df58:	0800dfb5 	.word	0x0800dfb5
 800df5c:	0800dfb5 	.word	0x0800dfb5
 800df60:	0800dfa5 	.word	0x0800dfa5
 800df64:	0800dfb5 	.word	0x0800dfb5
 800df68:	0800dfb5 	.word	0x0800dfb5
 800df6c:	0800dfb5 	.word	0x0800dfb5
 800df70:	0800dfb5 	.word	0x0800dfb5
 800df74:	0800dfb5 	.word	0x0800dfb5
 800df78:	0800dfb5 	.word	0x0800dfb5
 800df7c:	0800dfb5 	.word	0x0800dfb5
 800df80:	0800dfad 	.word	0x0800dfad
 800df84:	2301      	movs	r3, #1
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8a:	e0d6      	b.n	800e13a <UART_SetConfig+0x7ae>
 800df8c:	2304      	movs	r3, #4
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df92:	e0d2      	b.n	800e13a <UART_SetConfig+0x7ae>
 800df94:	2308      	movs	r3, #8
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df9a:	e0ce      	b.n	800e13a <UART_SetConfig+0x7ae>
 800df9c:	2310      	movs	r3, #16
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfa2:	e0ca      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfaa:	e0c6      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dfac:	2340      	movs	r3, #64	; 0x40
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfb2:	e0c2      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfba:	e0be      	b.n	800e13a <UART_SetConfig+0x7ae>
 800dfbc:	40011400 	.word	0x40011400
 800dfc0:	58024400 	.word	0x58024400
 800dfc4:	40007800 	.word	0x40007800
 800dfc8:	40007c00 	.word	0x40007c00
 800dfcc:	40011800 	.word	0x40011800
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4aad      	ldr	r2, [pc, #692]	; (800e28c <UART_SetConfig+0x900>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d176      	bne.n	800e0c8 <UART_SetConfig+0x73c>
 800dfda:	4bad      	ldr	r3, [pc, #692]	; (800e290 <UART_SetConfig+0x904>)
 800dfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfe2:	2b28      	cmp	r3, #40	; 0x28
 800dfe4:	d86c      	bhi.n	800e0c0 <UART_SetConfig+0x734>
 800dfe6:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <UART_SetConfig+0x660>)
 800dfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfec:	0800e091 	.word	0x0800e091
 800dff0:	0800e0c1 	.word	0x0800e0c1
 800dff4:	0800e0c1 	.word	0x0800e0c1
 800dff8:	0800e0c1 	.word	0x0800e0c1
 800dffc:	0800e0c1 	.word	0x0800e0c1
 800e000:	0800e0c1 	.word	0x0800e0c1
 800e004:	0800e0c1 	.word	0x0800e0c1
 800e008:	0800e0c1 	.word	0x0800e0c1
 800e00c:	0800e099 	.word	0x0800e099
 800e010:	0800e0c1 	.word	0x0800e0c1
 800e014:	0800e0c1 	.word	0x0800e0c1
 800e018:	0800e0c1 	.word	0x0800e0c1
 800e01c:	0800e0c1 	.word	0x0800e0c1
 800e020:	0800e0c1 	.word	0x0800e0c1
 800e024:	0800e0c1 	.word	0x0800e0c1
 800e028:	0800e0c1 	.word	0x0800e0c1
 800e02c:	0800e0a1 	.word	0x0800e0a1
 800e030:	0800e0c1 	.word	0x0800e0c1
 800e034:	0800e0c1 	.word	0x0800e0c1
 800e038:	0800e0c1 	.word	0x0800e0c1
 800e03c:	0800e0c1 	.word	0x0800e0c1
 800e040:	0800e0c1 	.word	0x0800e0c1
 800e044:	0800e0c1 	.word	0x0800e0c1
 800e048:	0800e0c1 	.word	0x0800e0c1
 800e04c:	0800e0a9 	.word	0x0800e0a9
 800e050:	0800e0c1 	.word	0x0800e0c1
 800e054:	0800e0c1 	.word	0x0800e0c1
 800e058:	0800e0c1 	.word	0x0800e0c1
 800e05c:	0800e0c1 	.word	0x0800e0c1
 800e060:	0800e0c1 	.word	0x0800e0c1
 800e064:	0800e0c1 	.word	0x0800e0c1
 800e068:	0800e0c1 	.word	0x0800e0c1
 800e06c:	0800e0b1 	.word	0x0800e0b1
 800e070:	0800e0c1 	.word	0x0800e0c1
 800e074:	0800e0c1 	.word	0x0800e0c1
 800e078:	0800e0c1 	.word	0x0800e0c1
 800e07c:	0800e0c1 	.word	0x0800e0c1
 800e080:	0800e0c1 	.word	0x0800e0c1
 800e084:	0800e0c1 	.word	0x0800e0c1
 800e088:	0800e0c1 	.word	0x0800e0c1
 800e08c:	0800e0b9 	.word	0x0800e0b9
 800e090:	2301      	movs	r3, #1
 800e092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e096:	e050      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e098:	2304      	movs	r3, #4
 800e09a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e09e:	e04c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0a0:	2308      	movs	r3, #8
 800e0a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0a6:	e048      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0a8:	2310      	movs	r3, #16
 800e0aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ae:	e044      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0b0:	2320      	movs	r3, #32
 800e0b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0b6:	e040      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0b8:	2340      	movs	r3, #64	; 0x40
 800e0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0be:	e03c      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0c0:	2380      	movs	r3, #128	; 0x80
 800e0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c6:	e038      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a71      	ldr	r2, [pc, #452]	; (800e294 <UART_SetConfig+0x908>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d130      	bne.n	800e134 <UART_SetConfig+0x7a8>
 800e0d2:	4b6f      	ldr	r3, [pc, #444]	; (800e290 <UART_SetConfig+0x904>)
 800e0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0d6:	f003 0307 	and.w	r3, r3, #7
 800e0da:	2b05      	cmp	r3, #5
 800e0dc:	d826      	bhi.n	800e12c <UART_SetConfig+0x7a0>
 800e0de:	a201      	add	r2, pc, #4	; (adr r2, 800e0e4 <UART_SetConfig+0x758>)
 800e0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0e4:	0800e0fd 	.word	0x0800e0fd
 800e0e8:	0800e105 	.word	0x0800e105
 800e0ec:	0800e10d 	.word	0x0800e10d
 800e0f0:	0800e115 	.word	0x0800e115
 800e0f4:	0800e11d 	.word	0x0800e11d
 800e0f8:	0800e125 	.word	0x0800e125
 800e0fc:	2302      	movs	r3, #2
 800e0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e102:	e01a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e104:	2304      	movs	r3, #4
 800e106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10a:	e016      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e10c:	2308      	movs	r3, #8
 800e10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e112:	e012      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e114:	2310      	movs	r3, #16
 800e116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11a:	e00e      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e11c:	2320      	movs	r3, #32
 800e11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e122:	e00a      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e124:	2340      	movs	r3, #64	; 0x40
 800e126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12a:	e006      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e12c:	2380      	movs	r3, #128	; 0x80
 800e12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e132:	e002      	b.n	800e13a <UART_SetConfig+0x7ae>
 800e134:	2380      	movs	r3, #128	; 0x80
 800e136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	4a55      	ldr	r2, [pc, #340]	; (800e294 <UART_SetConfig+0x908>)
 800e140:	4293      	cmp	r3, r2
 800e142:	f040 80f8 	bne.w	800e336 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e146:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e14a:	2b20      	cmp	r3, #32
 800e14c:	dc46      	bgt.n	800e1dc <UART_SetConfig+0x850>
 800e14e:	2b02      	cmp	r3, #2
 800e150:	db75      	blt.n	800e23e <UART_SetConfig+0x8b2>
 800e152:	3b02      	subs	r3, #2
 800e154:	2b1e      	cmp	r3, #30
 800e156:	d872      	bhi.n	800e23e <UART_SetConfig+0x8b2>
 800e158:	a201      	add	r2, pc, #4	; (adr r2, 800e160 <UART_SetConfig+0x7d4>)
 800e15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15e:	bf00      	nop
 800e160:	0800e1e3 	.word	0x0800e1e3
 800e164:	0800e23f 	.word	0x0800e23f
 800e168:	0800e1eb 	.word	0x0800e1eb
 800e16c:	0800e23f 	.word	0x0800e23f
 800e170:	0800e23f 	.word	0x0800e23f
 800e174:	0800e23f 	.word	0x0800e23f
 800e178:	0800e1fb 	.word	0x0800e1fb
 800e17c:	0800e23f 	.word	0x0800e23f
 800e180:	0800e23f 	.word	0x0800e23f
 800e184:	0800e23f 	.word	0x0800e23f
 800e188:	0800e23f 	.word	0x0800e23f
 800e18c:	0800e23f 	.word	0x0800e23f
 800e190:	0800e23f 	.word	0x0800e23f
 800e194:	0800e23f 	.word	0x0800e23f
 800e198:	0800e20b 	.word	0x0800e20b
 800e19c:	0800e23f 	.word	0x0800e23f
 800e1a0:	0800e23f 	.word	0x0800e23f
 800e1a4:	0800e23f 	.word	0x0800e23f
 800e1a8:	0800e23f 	.word	0x0800e23f
 800e1ac:	0800e23f 	.word	0x0800e23f
 800e1b0:	0800e23f 	.word	0x0800e23f
 800e1b4:	0800e23f 	.word	0x0800e23f
 800e1b8:	0800e23f 	.word	0x0800e23f
 800e1bc:	0800e23f 	.word	0x0800e23f
 800e1c0:	0800e23f 	.word	0x0800e23f
 800e1c4:	0800e23f 	.word	0x0800e23f
 800e1c8:	0800e23f 	.word	0x0800e23f
 800e1cc:	0800e23f 	.word	0x0800e23f
 800e1d0:	0800e23f 	.word	0x0800e23f
 800e1d4:	0800e23f 	.word	0x0800e23f
 800e1d8:	0800e231 	.word	0x0800e231
 800e1dc:	2b40      	cmp	r3, #64	; 0x40
 800e1de:	d02a      	beq.n	800e236 <UART_SetConfig+0x8aa>
 800e1e0:	e02d      	b.n	800e23e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1e2:	f7fd fa95 	bl	800b710 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1e8:	e02f      	b.n	800e24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fd faa4 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1f8:	e027      	b.n	800e24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1fa:	f107 0318 	add.w	r3, r7, #24
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fd fbf0 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e208:	e01f      	b.n	800e24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e20a:	4b21      	ldr	r3, [pc, #132]	; (800e290 <UART_SetConfig+0x904>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0320 	and.w	r3, r3, #32
 800e212:	2b00      	cmp	r3, #0
 800e214:	d009      	beq.n	800e22a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e216:	4b1e      	ldr	r3, [pc, #120]	; (800e290 <UART_SetConfig+0x904>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	08db      	lsrs	r3, r3, #3
 800e21c:	f003 0303 	and.w	r3, r3, #3
 800e220:	4a1d      	ldr	r2, [pc, #116]	; (800e298 <UART_SetConfig+0x90c>)
 800e222:	fa22 f303 	lsr.w	r3, r2, r3
 800e226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e228:	e00f      	b.n	800e24a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e22a:	4b1b      	ldr	r3, [pc, #108]	; (800e298 <UART_SetConfig+0x90c>)
 800e22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e22e:	e00c      	b.n	800e24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e230:	4b1a      	ldr	r3, [pc, #104]	; (800e29c <UART_SetConfig+0x910>)
 800e232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e234:	e009      	b.n	800e24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23c:	e005      	b.n	800e24a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e23e:	2300      	movs	r3, #0
 800e240:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e248:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f000 81ee 	beq.w	800e62e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e256:	4a12      	ldr	r2, [pc, #72]	; (800e2a0 <UART_SetConfig+0x914>)
 800e258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e25c:	461a      	mov	r2, r3
 800e25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e260:	fbb3 f3f2 	udiv	r3, r3, r2
 800e264:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	685a      	ldr	r2, [r3, #4]
 800e26a:	4613      	mov	r3, r2
 800e26c:	005b      	lsls	r3, r3, #1
 800e26e:	4413      	add	r3, r2
 800e270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e272:	429a      	cmp	r2, r3
 800e274:	d305      	bcc.n	800e282 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e27c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27e:	429a      	cmp	r2, r3
 800e280:	d910      	bls.n	800e2a4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e288:	e1d1      	b.n	800e62e <UART_SetConfig+0xca2>
 800e28a:	bf00      	nop
 800e28c:	40011c00 	.word	0x40011c00
 800e290:	58024400 	.word	0x58024400
 800e294:	58000c00 	.word	0x58000c00
 800e298:	03d09000 	.word	0x03d09000
 800e29c:	003d0900 	.word	0x003d0900
 800e2a0:	0801ac28 	.word	0x0801ac28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	60bb      	str	r3, [r7, #8]
 800e2aa:	60fa      	str	r2, [r7, #12]
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b0:	4ac0      	ldr	r2, [pc, #768]	; (800e5b4 <UART_SetConfig+0xc28>)
 800e2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	603b      	str	r3, [r7, #0]
 800e2bc:	607a      	str	r2, [r7, #4]
 800e2be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e2c6:	f7f2 f823 	bl	8000310 <__aeabi_uldivmod>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	f04f 0200 	mov.w	r2, #0
 800e2d6:	f04f 0300 	mov.w	r3, #0
 800e2da:	020b      	lsls	r3, r1, #8
 800e2dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2e0:	0202      	lsls	r2, r0, #8
 800e2e2:	6979      	ldr	r1, [r7, #20]
 800e2e4:	6849      	ldr	r1, [r1, #4]
 800e2e6:	0849      	lsrs	r1, r1, #1
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	eb12 0804 	adds.w	r8, r2, r4
 800e2f2:	eb43 0905 	adc.w	r9, r3, r5
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	469a      	mov	sl, r3
 800e2fe:	4693      	mov	fp, r2
 800e300:	4652      	mov	r2, sl
 800e302:	465b      	mov	r3, fp
 800e304:	4640      	mov	r0, r8
 800e306:	4649      	mov	r1, r9
 800e308:	f7f2 f802 	bl	8000310 <__aeabi_uldivmod>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	4613      	mov	r3, r2
 800e312:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e31a:	d308      	bcc.n	800e32e <UART_SetConfig+0x9a2>
 800e31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e322:	d204      	bcs.n	800e32e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e32a:	60da      	str	r2, [r3, #12]
 800e32c:	e17f      	b.n	800e62e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e32e:	2301      	movs	r3, #1
 800e330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e334:	e17b      	b.n	800e62e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	69db      	ldr	r3, [r3, #28]
 800e33a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e33e:	f040 80bd 	bne.w	800e4bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e342:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e346:	2b20      	cmp	r3, #32
 800e348:	dc48      	bgt.n	800e3dc <UART_SetConfig+0xa50>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	db7b      	blt.n	800e446 <UART_SetConfig+0xaba>
 800e34e:	2b20      	cmp	r3, #32
 800e350:	d879      	bhi.n	800e446 <UART_SetConfig+0xaba>
 800e352:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <UART_SetConfig+0x9cc>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e3e3 	.word	0x0800e3e3
 800e35c:	0800e3eb 	.word	0x0800e3eb
 800e360:	0800e447 	.word	0x0800e447
 800e364:	0800e447 	.word	0x0800e447
 800e368:	0800e3f3 	.word	0x0800e3f3
 800e36c:	0800e447 	.word	0x0800e447
 800e370:	0800e447 	.word	0x0800e447
 800e374:	0800e447 	.word	0x0800e447
 800e378:	0800e403 	.word	0x0800e403
 800e37c:	0800e447 	.word	0x0800e447
 800e380:	0800e447 	.word	0x0800e447
 800e384:	0800e447 	.word	0x0800e447
 800e388:	0800e447 	.word	0x0800e447
 800e38c:	0800e447 	.word	0x0800e447
 800e390:	0800e447 	.word	0x0800e447
 800e394:	0800e447 	.word	0x0800e447
 800e398:	0800e413 	.word	0x0800e413
 800e39c:	0800e447 	.word	0x0800e447
 800e3a0:	0800e447 	.word	0x0800e447
 800e3a4:	0800e447 	.word	0x0800e447
 800e3a8:	0800e447 	.word	0x0800e447
 800e3ac:	0800e447 	.word	0x0800e447
 800e3b0:	0800e447 	.word	0x0800e447
 800e3b4:	0800e447 	.word	0x0800e447
 800e3b8:	0800e447 	.word	0x0800e447
 800e3bc:	0800e447 	.word	0x0800e447
 800e3c0:	0800e447 	.word	0x0800e447
 800e3c4:	0800e447 	.word	0x0800e447
 800e3c8:	0800e447 	.word	0x0800e447
 800e3cc:	0800e447 	.word	0x0800e447
 800e3d0:	0800e447 	.word	0x0800e447
 800e3d4:	0800e447 	.word	0x0800e447
 800e3d8:	0800e439 	.word	0x0800e439
 800e3dc:	2b40      	cmp	r3, #64	; 0x40
 800e3de:	d02e      	beq.n	800e43e <UART_SetConfig+0xab2>
 800e3e0:	e031      	b.n	800e446 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3e2:	f7fb fe49 	bl	800a078 <HAL_RCC_GetPCLK1Freq>
 800e3e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3e8:	e033      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3ea:	f7fb fe5b 	bl	800a0a4 <HAL_RCC_GetPCLK2Freq>
 800e3ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e3f0:	e02f      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fd f9a0 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e400:	e027      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e402:	f107 0318 	add.w	r3, r7, #24
 800e406:	4618      	mov	r0, r3
 800e408:	f7fd faec 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e410:	e01f      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e412:	4b69      	ldr	r3, [pc, #420]	; (800e5b8 <UART_SetConfig+0xc2c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	f003 0320 	and.w	r3, r3, #32
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d009      	beq.n	800e432 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e41e:	4b66      	ldr	r3, [pc, #408]	; (800e5b8 <UART_SetConfig+0xc2c>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	08db      	lsrs	r3, r3, #3
 800e424:	f003 0303 	and.w	r3, r3, #3
 800e428:	4a64      	ldr	r2, [pc, #400]	; (800e5bc <UART_SetConfig+0xc30>)
 800e42a:	fa22 f303 	lsr.w	r3, r2, r3
 800e42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e430:	e00f      	b.n	800e452 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e432:	4b62      	ldr	r3, [pc, #392]	; (800e5bc <UART_SetConfig+0xc30>)
 800e434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e436:	e00c      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e438:	4b61      	ldr	r3, [pc, #388]	; (800e5c0 <UART_SetConfig+0xc34>)
 800e43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e43c:	e009      	b.n	800e452 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e43e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e444:	e005      	b.n	800e452 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e446:	2300      	movs	r3, #0
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e44a:	2301      	movs	r3, #1
 800e44c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e450:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e454:	2b00      	cmp	r3, #0
 800e456:	f000 80ea 	beq.w	800e62e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45e:	4a55      	ldr	r2, [pc, #340]	; (800e5b4 <UART_SetConfig+0xc28>)
 800e460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e464:	461a      	mov	r2, r3
 800e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e468:	fbb3 f3f2 	udiv	r3, r3, r2
 800e46c:	005a      	lsls	r2, r3, #1
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	085b      	lsrs	r3, r3, #1
 800e474:	441a      	add	r2, r3
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e47e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e482:	2b0f      	cmp	r3, #15
 800e484:	d916      	bls.n	800e4b4 <UART_SetConfig+0xb28>
 800e486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e48c:	d212      	bcs.n	800e4b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e490:	b29b      	uxth	r3, r3
 800e492:	f023 030f 	bic.w	r3, r3, #15
 800e496:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	085b      	lsrs	r3, r3, #1
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	f003 0307 	and.w	r3, r3, #7
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e4b0:	60da      	str	r2, [r3, #12]
 800e4b2:	e0bc      	b.n	800e62e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e4ba:	e0b8      	b.n	800e62e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e4c0:	2b20      	cmp	r3, #32
 800e4c2:	dc4b      	bgt.n	800e55c <UART_SetConfig+0xbd0>
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f2c0 8087 	blt.w	800e5d8 <UART_SetConfig+0xc4c>
 800e4ca:	2b20      	cmp	r3, #32
 800e4cc:	f200 8084 	bhi.w	800e5d8 <UART_SetConfig+0xc4c>
 800e4d0:	a201      	add	r2, pc, #4	; (adr r2, 800e4d8 <UART_SetConfig+0xb4c>)
 800e4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4d6:	bf00      	nop
 800e4d8:	0800e563 	.word	0x0800e563
 800e4dc:	0800e56b 	.word	0x0800e56b
 800e4e0:	0800e5d9 	.word	0x0800e5d9
 800e4e4:	0800e5d9 	.word	0x0800e5d9
 800e4e8:	0800e573 	.word	0x0800e573
 800e4ec:	0800e5d9 	.word	0x0800e5d9
 800e4f0:	0800e5d9 	.word	0x0800e5d9
 800e4f4:	0800e5d9 	.word	0x0800e5d9
 800e4f8:	0800e583 	.word	0x0800e583
 800e4fc:	0800e5d9 	.word	0x0800e5d9
 800e500:	0800e5d9 	.word	0x0800e5d9
 800e504:	0800e5d9 	.word	0x0800e5d9
 800e508:	0800e5d9 	.word	0x0800e5d9
 800e50c:	0800e5d9 	.word	0x0800e5d9
 800e510:	0800e5d9 	.word	0x0800e5d9
 800e514:	0800e5d9 	.word	0x0800e5d9
 800e518:	0800e593 	.word	0x0800e593
 800e51c:	0800e5d9 	.word	0x0800e5d9
 800e520:	0800e5d9 	.word	0x0800e5d9
 800e524:	0800e5d9 	.word	0x0800e5d9
 800e528:	0800e5d9 	.word	0x0800e5d9
 800e52c:	0800e5d9 	.word	0x0800e5d9
 800e530:	0800e5d9 	.word	0x0800e5d9
 800e534:	0800e5d9 	.word	0x0800e5d9
 800e538:	0800e5d9 	.word	0x0800e5d9
 800e53c:	0800e5d9 	.word	0x0800e5d9
 800e540:	0800e5d9 	.word	0x0800e5d9
 800e544:	0800e5d9 	.word	0x0800e5d9
 800e548:	0800e5d9 	.word	0x0800e5d9
 800e54c:	0800e5d9 	.word	0x0800e5d9
 800e550:	0800e5d9 	.word	0x0800e5d9
 800e554:	0800e5d9 	.word	0x0800e5d9
 800e558:	0800e5cb 	.word	0x0800e5cb
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d037      	beq.n	800e5d0 <UART_SetConfig+0xc44>
 800e560:	e03a      	b.n	800e5d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e562:	f7fb fd89 	bl	800a078 <HAL_RCC_GetPCLK1Freq>
 800e566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e568:	e03c      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e56a:	f7fb fd9b 	bl	800a0a4 <HAL_RCC_GetPCLK2Freq>
 800e56e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e570:	e038      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e576:	4618      	mov	r0, r3
 800e578:	f7fd f8e0 	bl	800b73c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e580:	e030      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e582:	f107 0318 	add.w	r3, r7, #24
 800e586:	4618      	mov	r0, r3
 800e588:	f7fd fa2c 	bl	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e590:	e028      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e592:	4b09      	ldr	r3, [pc, #36]	; (800e5b8 <UART_SetConfig+0xc2c>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	f003 0320 	and.w	r3, r3, #32
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d012      	beq.n	800e5c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e59e:	4b06      	ldr	r3, [pc, #24]	; (800e5b8 <UART_SetConfig+0xc2c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	08db      	lsrs	r3, r3, #3
 800e5a4:	f003 0303 	and.w	r3, r3, #3
 800e5a8:	4a04      	ldr	r2, [pc, #16]	; (800e5bc <UART_SetConfig+0xc30>)
 800e5aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5b0:	e018      	b.n	800e5e4 <UART_SetConfig+0xc58>
 800e5b2:	bf00      	nop
 800e5b4:	0801ac28 	.word	0x0801ac28
 800e5b8:	58024400 	.word	0x58024400
 800e5bc:	03d09000 	.word	0x03d09000
 800e5c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e5c4:	4b24      	ldr	r3, [pc, #144]	; (800e658 <UART_SetConfig+0xccc>)
 800e5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5c8:	e00c      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5ca:	4b24      	ldr	r3, [pc, #144]	; (800e65c <UART_SetConfig+0xcd0>)
 800e5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5ce:	e009      	b.n	800e5e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5d6:	e005      	b.n	800e5e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e5e2:	bf00      	nop
    }

    if (pclk != 0U)
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d021      	beq.n	800e62e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	4a1c      	ldr	r2, [pc, #112]	; (800e660 <UART_SetConfig+0xcd4>)
 800e5f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5f4:	461a      	mov	r2, r3
 800e5f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	441a      	add	r2, r3
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	fbb2 f3f3 	udiv	r3, r2, r3
 800e60c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	2b0f      	cmp	r3, #15
 800e612:	d909      	bls.n	800e628 <UART_SetConfig+0xc9c>
 800e614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e61a:	d205      	bcs.n	800e628 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e61e:	b29a      	uxth	r2, r3
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	60da      	str	r2, [r3, #12]
 800e626:	e002      	b.n	800e62e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e628:	2301      	movs	r3, #1
 800e62a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2201      	movs	r2, #1
 800e632:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2201      	movs	r2, #1
 800e63a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2200      	movs	r2, #0
 800e642:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	2200      	movs	r2, #0
 800e648:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e64a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3748      	adds	r7, #72	; 0x48
 800e652:	46bd      	mov	sp, r7
 800e654:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e658:	03d09000 	.word	0x03d09000
 800e65c:	003d0900 	.word	0x003d0900
 800e660:	0801ac28 	.word	0x0801ac28

0800e664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	f003 0301 	and.w	r3, r3, #1
 800e674:	2b00      	cmp	r3, #0
 800e676:	d00a      	beq.n	800e68e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	430a      	orrs	r2, r1
 800e68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d00a      	beq.n	800e6b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	685b      	ldr	r3, [r3, #4]
 800e6a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	430a      	orrs	r2, r1
 800e6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d00a      	beq.n	800e6d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	430a      	orrs	r2, r1
 800e6d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d6:	f003 0308 	and.w	r3, r3, #8
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00a      	beq.n	800e6f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	430a      	orrs	r2, r1
 800e6f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f8:	f003 0310 	and.w	r3, r3, #16
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00a      	beq.n	800e716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	430a      	orrs	r2, r1
 800e714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e71a:	f003 0320 	and.w	r3, r3, #32
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00a      	beq.n	800e738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	430a      	orrs	r2, r1
 800e736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e740:	2b00      	cmp	r3, #0
 800e742:	d01a      	beq.n	800e77a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	430a      	orrs	r2, r1
 800e758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e75e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e762:	d10a      	bne.n	800e77a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	430a      	orrs	r2, r1
 800e778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00a      	beq.n	800e79c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	430a      	orrs	r2, r1
 800e79a:	605a      	str	r2, [r3, #4]
  }
}
 800e79c:	bf00      	nop
 800e79e:	370c      	adds	r7, #12
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr

0800e7a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b086      	sub	sp, #24
 800e7ac:	af02      	add	r7, sp, #8
 800e7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7b8:	f7f4 fbf4 	bl	8002fa4 <HAL_GetTick>
 800e7bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f003 0308 	and.w	r3, r3, #8
 800e7c8:	2b08      	cmp	r3, #8
 800e7ca:	d10e      	bne.n	800e7ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f82f 	bl	800e83e <UART_WaitOnFlagUntilTimeout>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d001      	beq.n	800e7ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e025      	b.n	800e836 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f003 0304 	and.w	r3, r3, #4
 800e7f4:	2b04      	cmp	r3, #4
 800e7f6:	d10e      	bne.n	800e816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2200      	movs	r2, #0
 800e802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 f819 	bl	800e83e <UART_WaitOnFlagUntilTimeout>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d001      	beq.n	800e816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e812:	2303      	movs	r3, #3
 800e814:	e00f      	b.n	800e836 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2220      	movs	r2, #32
 800e81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2220      	movs	r2, #32
 800e822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2200      	movs	r2, #0
 800e82a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3710      	adds	r7, #16
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b09c      	sub	sp, #112	; 0x70
 800e842:	af00      	add	r7, sp, #0
 800e844:	60f8      	str	r0, [r7, #12]
 800e846:	60b9      	str	r1, [r7, #8]
 800e848:	603b      	str	r3, [r7, #0]
 800e84a:	4613      	mov	r3, r2
 800e84c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e84e:	e0a9      	b.n	800e9a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	f000 80a5 	beq.w	800e9a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e85a:	f7f4 fba3 	bl	8002fa4 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e866:	429a      	cmp	r2, r3
 800e868:	d302      	bcc.n	800e870 <UART_WaitOnFlagUntilTimeout+0x32>
 800e86a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d140      	bne.n	800e8f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e878:	e853 3f00 	ldrex	r3, [r3]
 800e87c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e884:	667b      	str	r3, [r7, #100]	; 0x64
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e88e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e890:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e896:	e841 2300 	strex	r3, r2, [r1]
 800e89a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e89c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1e6      	bne.n	800e870 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	3308      	adds	r3, #8
 800e8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ac:	e853 3f00 	ldrex	r3, [r3]
 800e8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b4:	f023 0301 	bic.w	r3, r3, #1
 800e8b8:	663b      	str	r3, [r7, #96]	; 0x60
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	3308      	adds	r3, #8
 800e8c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e8c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ca:	e841 2300 	strex	r3, r2, [r1]
 800e8ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1e5      	bne.n	800e8a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2220      	movs	r2, #32
 800e8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2220      	movs	r2, #32
 800e8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	e069      	b.n	800e9c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f003 0304 	and.w	r3, r3, #4
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d051      	beq.n	800e9a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e90a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e90e:	d149      	bne.n	800e9a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e918:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e92e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	461a      	mov	r2, r3
 800e936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e938:	637b      	str	r3, [r7, #52]	; 0x34
 800e93a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e940:	e841 2300 	strex	r3, r2, [r1]
 800e944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1e6      	bne.n	800e91a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	3308      	adds	r3, #8
 800e952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	e853 3f00 	ldrex	r3, [r3]
 800e95a:	613b      	str	r3, [r7, #16]
   return(result);
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f023 0301 	bic.w	r3, r3, #1
 800e962:	66bb      	str	r3, [r7, #104]	; 0x68
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3308      	adds	r3, #8
 800e96a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e96c:	623a      	str	r2, [r7, #32]
 800e96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	69f9      	ldr	r1, [r7, #28]
 800e972:	6a3a      	ldr	r2, [r7, #32]
 800e974:	e841 2300 	strex	r3, r2, [r1]
 800e978:	61bb      	str	r3, [r7, #24]
   return(result);
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1e5      	bne.n	800e94c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2220      	movs	r2, #32
 800e984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2220      	movs	r2, #32
 800e98c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2220      	movs	r2, #32
 800e994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	e010      	b.n	800e9c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	69da      	ldr	r2, [r3, #28]
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	4013      	ands	r3, r2
 800e9ae:	68ba      	ldr	r2, [r7, #8]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	bf0c      	ite	eq
 800e9b4:	2301      	moveq	r3, #1
 800e9b6:	2300      	movne	r3, #0
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	79fb      	ldrb	r3, [r7, #7]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	f43f af46 	beq.w	800e850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3770      	adds	r7, #112	; 0x70
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9ce:	b480      	push	{r7}
 800e9d0:	b085      	sub	sp, #20
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d101      	bne.n	800e9e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	e027      	b.n	800ea34 <HAL_UARTEx_DisableFifoMode+0x66>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2224      	movs	r2, #36	; 0x24
 800e9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f022 0201 	bic.w	r2, r2, #1
 800ea0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2200      	movs	r2, #0
 800ea18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	68fa      	ldr	r2, [r7, #12]
 800ea20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2220      	movs	r2, #32
 800ea26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3714      	adds	r7, #20
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d101      	bne.n	800ea58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea54:	2302      	movs	r3, #2
 800ea56:	e02d      	b.n	800eab4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2224      	movs	r2, #36	; 0x24
 800ea64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f022 0201 	bic.w	r2, r2, #1
 800ea7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	430a      	orrs	r2, r1
 800ea92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f84f 	bl	800eb38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2220      	movs	r2, #32
 800eaa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}

0800eabc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ead0:	2302      	movs	r3, #2
 800ead2:	e02d      	b.n	800eb30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2224      	movs	r2, #36	; 0x24
 800eae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f022 0201 	bic.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	430a      	orrs	r2, r1
 800eb0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 f811 	bl	800eb38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2220      	movs	r2, #32
 800eb22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	2200      	movs	r2, #0
 800eb2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb2e:	2300      	movs	r3, #0
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d108      	bne.n	800eb5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2201      	movs	r2, #1
 800eb54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb58:	e031      	b.n	800ebbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb5a:	2310      	movs	r3, #16
 800eb5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb5e:	2310      	movs	r3, #16
 800eb60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	0e5b      	lsrs	r3, r3, #25
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	f003 0307 	and.w	r3, r3, #7
 800eb70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	0f5b      	lsrs	r3, r3, #29
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 0307 	and.w	r3, r3, #7
 800eb80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb82:	7bbb      	ldrb	r3, [r7, #14]
 800eb84:	7b3a      	ldrb	r2, [r7, #12]
 800eb86:	4911      	ldr	r1, [pc, #68]	; (800ebcc <UARTEx_SetNbDataToProcess+0x94>)
 800eb88:	5c8a      	ldrb	r2, [r1, r2]
 800eb8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb8e:	7b3a      	ldrb	r2, [r7, #12]
 800eb90:	490f      	ldr	r1, [pc, #60]	; (800ebd0 <UARTEx_SetNbDataToProcess+0x98>)
 800eb92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb94:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb98:	b29a      	uxth	r2, r3
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800eba0:	7bfb      	ldrb	r3, [r7, #15]
 800eba2:	7b7a      	ldrb	r2, [r7, #13]
 800eba4:	4909      	ldr	r1, [pc, #36]	; (800ebcc <UARTEx_SetNbDataToProcess+0x94>)
 800eba6:	5c8a      	ldrb	r2, [r1, r2]
 800eba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebac:	7b7a      	ldrb	r2, [r7, #13]
 800ebae:	4908      	ldr	r1, [pc, #32]	; (800ebd0 <UARTEx_SetNbDataToProcess+0x98>)
 800ebb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ebbe:	bf00      	nop
 800ebc0:	3714      	adds	r7, #20
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	0801ac40 	.word	0x0801ac40
 800ebd0:	0801ac48 	.word	0x0801ac48

0800ebd4 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 800ebd4:	b480      	push	{r7}
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe2:	4770      	bx	lr

0800ebe4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	370c      	adds	r7, #12
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d201      	bcs.n	800ec16 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	e000      	b.n	800ec18 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 800ec16:	687b      	ldr	r3, [r7, #4]
    }
 800ec18:	4618      	mov	r0, r3
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>:

#include "PinModel/Pin.hpp"

Pin::Pin(){}

Pin::Pin(GPIO_TypeDef* port, GPIO_Pin gpio_pin) : port(port), gpio_pin(gpio_pin){}
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	4613      	mov	r3, r2
 800ec30:	80fb      	strh	r3, [r7, #6]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	601a      	str	r2, [r3, #0]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	88fa      	ldrh	r2, [r7, #6]
 800ec3c:	809a      	strh	r2, [r3, #4]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2200      	movs	r2, #0
 800ec42:	719a      	strb	r2, [r3, #6]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	4618      	mov	r0, r3
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <_ZN3Pin8inscribeERS_14Operation_Mode>:
PD14,PD15,PD2,PD3,PD4,PD5,PD6,PD7,PD8,PD9,PE0,PE1,PE10,PE11,PE12,PE13,PE14,PE15,PE2,PE3,
PE4,PE5,PE6,PE7,PE8,PE9,PF0,PF1,PF10,PF11,PF12,PF13,PF14,PF15,PF2,PF3,PF4,PF5,PF6,PF7,
PF8,PF9,PG0,PG1,PG10,PG11,PG12,PG13,PG14,PG15,PG2,PG3,PG4,PG5,PG6,PG7,PG8,PG9,PH0,PH1,
PA2,PA3,PA4,PA5,PA6,PA7,PA8};

void Pin::inscribe(Pin& pin, Operation_Mode mode){
 800ec52:	b480      	push	{r7}
 800ec54:	b083      	sub	sp, #12
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	70fb      	strb	r3, [r7, #3]
	if(pin.mode != Operation_Mode::NOT_USED){
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	799b      	ldrb	r3, [r3, #6]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d103      	bne.n	800ec6e <_ZN3Pin8inscribeERS_14Operation_Mode+0x1c>
		return;
	}
	pin.mode = mode;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	78fa      	ldrb	r2, [r7, #3]
 800ec6a:	719a      	strb	r2, [r3, #6]
 800ec6c:	e000      	b.n	800ec70 <_ZN3Pin8inscribeERS_14Operation_Mode+0x1e>
		return;
 800ec6e:	bf00      	nop
}
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800ec7a:	b480      	push	{r7}
 800ec7c:	b083      	sub	sp, #12
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800ec90:	b590      	push	{r4, r7, lr}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7ff ffed 	bl	800ec7a <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 800eca0:	4603      	mov	r3, r0
 800eca2:	681c      	ldr	r4, [r3, #0]
 800eca4:	6838      	ldr	r0, [r7, #0]
 800eca6:	f7ff ffe8 	bl	800ec7a <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEE4baseEv>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	429c      	cmp	r4, r3
 800ecb0:	bf0c      	ite	eq
 800ecb2:	2301      	moveq	r3, #1
 800ecb4:	2300      	movne	r3, #0
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	4618      	mov	r0, r3
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd90      	pop	{r4, r7, pc}

0800ecc0 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	1d1a      	adds	r2, r3, #4
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	601a      	str	r2, [r3, #0]
	return *this;
 800ecd2:	687b      	ldr	r3, [r7, #4]
      }
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>:

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

      _GLIBCXX20_CONSTEXPR
      operator _Tp&() const noexcept
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
      { return this->get(); }
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f000 f971 	bl	800efd0 <_ZNKSt17reference_wrapperI3PinE3getEv>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4618      	mov	r0, r3
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <_ZN3Pin5startEv>:

void Pin::start(){
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b090      	sub	sp, #64	; 0x40
 800ed14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800ed16:	4b72      	ldr	r3, [pc, #456]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed1c:	4a70      	ldr	r2, [pc, #448]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed1e:	f043 0302 	orr.w	r3, r3, #2
 800ed22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed26:	4b6e      	ldr	r3, [pc, #440]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed2c:	f003 0302 	and.w	r3, r3, #2
 800ed30:	623b      	str	r3, [r7, #32]
 800ed32:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800ed34:	4b6a      	ldr	r3, [pc, #424]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed3a:	4a69      	ldr	r2, [pc, #420]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed3c:	f043 0301 	orr.w	r3, r3, #1
 800ed40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed44:	4b66      	ldr	r3, [pc, #408]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed4a:	f003 0301 	and.w	r3, r3, #1
 800ed4e:	61fb      	str	r3, [r7, #28]
 800ed50:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800ed52:	4b63      	ldr	r3, [pc, #396]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed58:	4a61      	ldr	r2, [pc, #388]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed5a:	f043 0304 	orr.w	r3, r3, #4
 800ed5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed62:	4b5f      	ldr	r3, [pc, #380]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed68:	f003 0304 	and.w	r3, r3, #4
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800ed70:	4b5b      	ldr	r3, [pc, #364]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed76:	4a5a      	ldr	r2, [pc, #360]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed78:	f043 0308 	orr.w	r3, r3, #8
 800ed7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed80:	4b57      	ldr	r3, [pc, #348]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed86:	f003 0308 	and.w	r3, r3, #8
 800ed8a:	617b      	str	r3, [r7, #20]
 800ed8c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800ed8e:	4b54      	ldr	r3, [pc, #336]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ed94:	4a52      	ldr	r2, [pc, #328]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800ed96:	f043 0310 	orr.w	r3, r3, #16
 800ed9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ed9e:	4b50      	ldr	r3, [pc, #320]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800eda0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eda4:	f003 0310 	and.w	r3, r3, #16
 800eda8:	613b      	str	r3, [r7, #16]
 800edaa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800edac:	4b4c      	ldr	r3, [pc, #304]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800edae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edb2:	4a4b      	ldr	r2, [pc, #300]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800edb4:	f043 0320 	orr.w	r3, r3, #32
 800edb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800edbc:	4b48      	ldr	r3, [pc, #288]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800edbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edc2:	f003 0320 	and.w	r3, r3, #32
 800edc6:	60fb      	str	r3, [r7, #12]
 800edc8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800edca:	4b45      	ldr	r3, [pc, #276]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800edcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edd0:	4a43      	ldr	r2, [pc, #268]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800edd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800edda:	4b41      	ldr	r3, [pc, #260]	; (800eee0 <_ZN3Pin5startEv+0x1d0>)
 800eddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ede0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede4:	60bb      	str	r3, [r7, #8]
 800ede6:	68bb      	ldr	r3, [r7, #8]

	for(Pin& pin : Pin::pinVector){
 800ede8:	4b3e      	ldr	r3, [pc, #248]	; (800eee4 <_ZN3Pin5startEv+0x1d4>)
 800edea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800edee:	f000 f8ce 	bl	800ef8e <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>
 800edf2:	4603      	mov	r3, r0
 800edf4:	607b      	str	r3, [r7, #4]
 800edf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800edf8:	f000 f8d9 	bl	800efae <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>
 800edfc:	4603      	mov	r3, r0
 800edfe:	603b      	str	r3, [r7, #0]
 800ee00:	463a      	mov	r2, r7
 800ee02:	1d3b      	adds	r3, r7, #4
 800ee04:	4611      	mov	r1, r2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff ff42 	bl	800ec90 <_ZN9__gnu_cxxeqIPSt17reference_wrapperI3PinES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	f083 0301 	eor.w	r3, r3, #1
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d05f      	beq.n	800eed8 <_ZN3Pin5startEv+0x1c8>
 800ee18:	1d3b      	adds	r3, r7, #4
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7ff ff6c 	bl	800ecf8 <_ZNK9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEdeEv>
 800ee20:	4603      	mov	r3, r0
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7ff ff5c 	bl	800ece0 <_ZNKSt17reference_wrapperI3PinEcvRS0_Ev>
 800ee28:	63b8      	str	r0, [r7, #56]	; 0x38
		GPIO_InitStruct = {0};
 800ee2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee2e:	2200      	movs	r2, #0
 800ee30:	601a      	str	r2, [r3, #0]
 800ee32:	605a      	str	r2, [r3, #4]
 800ee34:	609a      	str	r2, [r3, #8]
 800ee36:	60da      	str	r2, [r3, #12]
 800ee38:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Pin = pin.gpio_pin;
 800ee3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3c:	889b      	ldrh	r3, [r3, #4]
 800ee3e:	627b      	str	r3, [r7, #36]	; 0x24
		switch(pin.mode){
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	799b      	ldrb	r3, [r3, #6]
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d841      	bhi.n	800eecc <_ZN3Pin5startEv+0x1bc>
 800ee48:	a201      	add	r2, pc, #4	; (adr r2, 800ee50 <_ZN3Pin5startEv+0x140>)
 800ee4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4e:	bf00      	nop
 800ee50:	0800ee61 	.word	0x0800ee61
 800ee54:	0800ee99 	.word	0x0800ee99
 800ee58:	0800ee7b 	.word	0x0800ee7b
 800ee5c:	0800eeb3 	.word	0x0800eeb3

		case Operation_Mode::NOT_USED:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 800ee60:	2300      	movs	r3, #0
 800ee62:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ee64:	2302      	movs	r3, #2
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ee70:	4611      	mov	r1, r2
 800ee72:	4618      	mov	r0, r3
 800ee74:	f7f9 fbde 	bl	8008634 <HAL_GPIO_Init>
			break;
 800ee78:	e029      	b.n	800eece <_ZN3Pin5startEv+0x1be>

		case Operation_Mode::OUTPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_OUTPUT_PP;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	62fb      	str	r3, [r7, #44]	; 0x2c
			GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee82:	2300      	movs	r3, #0
 800ee84:	633b      	str	r3, [r7, #48]	; 0x30
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ee8e:	4611      	mov	r1, r2
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7f9 fbcf 	bl	8008634 <HAL_GPIO_Init>
			break;
 800ee96:	e01a      	b.n	800eece <_ZN3Pin5startEv+0x1be>

		case Operation_Mode::INPUT:
			GPIO_InitStruct.Mode =  GPIO_MODE_INPUT;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f9 fbc2 	bl	8008634 <HAL_GPIO_Init>
			break;
 800eeb0:	e00d      	b.n	800eece <_ZN3Pin5startEv+0x1be>

		case Operation_Mode::ANALOG:
			GPIO_InitStruct.Mode =  GPIO_MODE_ANALOG;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	62fb      	str	r3, [r7, #44]	; 0x2c
			HAL_GPIO_Init(pin.port, &GPIO_InitStruct);
 800eeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800eec2:	4611      	mov	r1, r2
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7f9 fbb5 	bl	8008634 <HAL_GPIO_Init>
			break;
 800eeca:	e000      	b.n	800eece <_ZN3Pin5startEv+0x1be>

		default:
			break;
 800eecc:	bf00      	nop
	for(Pin& pin : Pin::pinVector){
 800eece:	1d3b      	adds	r3, r7, #4
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7ff fef5 	bl	800ecc0 <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEppEv>
 800eed6:	e793      	b.n	800ee00 <_ZN3Pin5startEv+0xf0>
		}
	}
}
 800eed8:	bf00      	nop
 800eeda:	3740      	adds	r7, #64	; 0x40
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	58024400 	.word	0x58024400
 800eee4:	24000fc4 	.word	0x24000fc4

0800eee8 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b082      	sub	sp, #8
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f879 	bl	800efe8 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <_ZNSaISt17reference_wrapperI3PinEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800ef00:	b480      	push	{r7}
 800ef02:	b083      	sub	sp, #12
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	370c      	adds	r7, #12
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef14:	4770      	bx	lr

0800ef16 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 800ef16:	b5b0      	push	{r4, r5, r7, lr}
 800ef18:	b086      	sub	sp, #24
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	60f8      	str	r0, [r7, #12]
 800ef1e:	1d38      	adds	r0, r7, #4
 800ef20:	e880 0006 	stmia.w	r0, {r1, r2}
 800ef24:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 f873 	bl	800f016 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 800ef30:	1d3b      	adds	r3, r7, #4
 800ef32:	4618      	mov	r0, r3
 800ef34:	f000 f897 	bl	800f066 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800ef38:	4604      	mov	r4, r0
 800ef3a:	1d3b      	adds	r3, r7, #4
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f000 f89e 	bl	800f07e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>
 800ef42:	4602      	mov	r2, r0
 800ef44:	462b      	mov	r3, r5
 800ef46:	4621      	mov	r1, r4
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 f8be 	bl	800f0ca <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4618      	mov	r0, r3
 800ef52:	3718      	adds	r7, #24
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bdb0      	pop	{r4, r5, r7, pc}

0800ef58 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 800ef58:	b5b0      	push	{r4, r5, r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681c      	ldr	r4, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 f8e6 	bl	800f13c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800ef70:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ef72:	461a      	mov	r2, r3
 800ef74:	4629      	mov	r1, r5
 800ef76:	4620      	mov	r0, r4
 800ef78:	f000 f8eb 	bl	800f152 <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 f858 	bl	800f034 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bdb0      	pop	{r4, r5, r7, pc}

0800ef8e <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE5beginEv>:
       *  Returns a read/write iterator that points to the first
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 800ef8e:	b580      	push	{r7, lr}
 800ef90:	b084      	sub	sp, #16
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	f107 030c 	add.w	r3, r7, #12
 800ef9c:	4611      	mov	r1, r2
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 f8e5 	bl	800f16e <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4618      	mov	r0, r3
 800efa8:	3710      	adds	r7, #16
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}

0800efae <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 800efae:	b580      	push	{r7, lr}
 800efb0:	b084      	sub	sp, #16
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	1d1a      	adds	r2, r3, #4
 800efba:	f107 030c 	add.w	r3, r7, #12
 800efbe:	4611      	mov	r1, r2
 800efc0:	4618      	mov	r0, r3
 800efc2:	f000 f8d4 	bl	800f16e <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <_ZNKSt17reference_wrapperI3PinE3getEv>:

      _GLIBCXX20_CONSTEXPR
      _Tp&
      get() const noexcept
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
      { return *_M_data; }
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	4618      	mov	r0, r3
 800efde:	370c      	adds	r7, #12
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800efe8:	b480      	push	{r7}
 800efea:	b083      	sub	sp, #12
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4618      	mov	r0, r3
 800eff4:	370c      	adds	r7, #12
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7ff ff7a 	bl	800ef00 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EEC1ERKS3_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800f016:	b580      	push	{r7, lr}
 800f018:	b082      	sub	sp, #8
 800f01a:	af00      	add	r7, sp, #0
 800f01c:	6078      	str	r0, [r7, #4]
 800f01e:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	4618      	mov	r0, r3
 800f026:	f000 f8b2 	bl	800f18e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	689a      	ldr	r2, [r3, #8]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	1ad3      	subs	r3, r2, r3
 800f04a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800f04c:	461a      	mov	r2, r3
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f8af 	bl	800f1b2 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>
      }
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff ffd1 	bl	800effe <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implD1Ev>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800f066:	b480      	push	{r7}
 800f068:	b083      	sub	sp, #12
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 800f07e:	b590      	push	{r4, r7, lr}
 800f080:	b083      	sub	sp, #12
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff ffed 	bl	800f066 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE5beginEv>
 800f08c:	4604      	mov	r4, r0
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 f8a2 	bl	800f1d8 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>
 800f094:	4603      	mov	r3, r0
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4423      	add	r3, r4
 800f09a:	4618      	mov	r0, r3
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd90      	pop	{r4, r7, pc}

0800f0a2 <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800f0a2:	b5b0      	push	{r4, r5, r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 800f0ac:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 800f0ae:	1d3b      	adds	r3, r7, #4
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 f89d 	bl	800f1f0 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>
      return std::__distance(__first, __last,
 800f0b6:	462a      	mov	r2, r5
 800f0b8:	6839      	ldr	r1, [r7, #0]
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 f8a2 	bl	800f204 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>
 800f0c0:	4603      	mov	r3, r0
    }
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3708      	adds	r7, #8
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bdb0      	pop	{r4, r5, r7, pc}

0800f0ca <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE19_M_range_initializeIPKS2_EEvT_S8_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 800f0ca:	b590      	push	{r4, r7, lr}
 800f0cc:	b087      	sub	sp, #28
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	60f8      	str	r0, [r7, #12]
 800f0d2:	60b9      	str	r1, [r7, #8]
 800f0d4:	607a      	str	r2, [r7, #4]
 800f0d6:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	68b8      	ldr	r0, [r7, #8]
 800f0dc:	f7ff ffe1 	bl	800f0a2 <_ZSt8distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800f0e4:	68fc      	ldr	r4, [r7, #12]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 f827 	bl	800f13c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	6978      	ldr	r0, [r7, #20]
 800f0f4:	f000 f896 	bl	800f224 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4620      	mov	r0, r4
 800f0fe:	f000 f8b9 	bl	800f274 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>
 800f102:	4602      	mov	r2, r0
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	441a      	add	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f80d 	bl	800f13c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>
 800f122:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800f124:	4622      	mov	r2, r4
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	68b8      	ldr	r0, [r7, #8]
 800f12a:	f000 f8b7 	bl	800f29c <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>
 800f12e:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	605a      	str	r2, [r3, #4]
	}
 800f134:	bf00      	nop
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}

0800f13c <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4618      	mov	r0, r3
 800f148:	370c      	adds	r7, #12
 800f14a:	46bd      	mov	sp, r7
 800f14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f150:	4770      	bx	lr

0800f152 <_ZSt8_DestroyIPSt17reference_wrapperI3PinES2_EvT_S4_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	60b9      	str	r1, [r7, #8]
 800f15c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800f15e:	68b9      	ldr	r1, [r7, #8]
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f000 f8ac 	bl	800f2be <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>
    }
 800f166:	bf00      	nop
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}

0800f16e <_ZN9__gnu_cxx17__normal_iteratorIPSt17reference_wrapperI3PinESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f16e:	b480      	push	{r7}
 800f170:	b083      	sub	sp, #12
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	601a      	str	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	4618      	mov	r0, r3
 800f184:	370c      	adds	r7, #12
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr

0800f18e <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE12_Vector_implC1ERKS3_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800f18e:	b580      	push	{r7, lr}
 800f190:	b082      	sub	sp, #8
 800f192:	af00      	add	r7, sp, #0
 800f194:	6078      	str	r0, [r7, #4]
 800f196:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 800f198:	6839      	ldr	r1, [r7, #0]
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 f8a5 	bl	800f2ea <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 f8af 	bl	800f306 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3708      	adds	r7, #8
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}

0800f1b2 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b084      	sub	sp, #16
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60f8      	str	r0, [r7, #12]
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	607a      	str	r2, [r7, #4]
	if (__p)
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d005      	beq.n	800f1d0 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	68b9      	ldr	r1, [r7, #8]
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 f8af 	bl	800f32e <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>
      }
 800f1d0:	bf00      	nop
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <_ZNKSt16initializer_listISt17reference_wrapperI3PinEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800f1d8:	b480      	push	{r7}
 800f1da:	b083      	sub	sp, #12
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	370c      	adds	r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr

0800f1f0 <_ZSt19__iterator_categoryIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E17iterator_categoryERKS6_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	370c      	adds	r7, #12
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <_ZSt10__distanceIPKSt17reference_wrapperI3PinEENSt15iterator_traitsIT_E15difference_typeES6_S6_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	109b      	asrs	r3, r3, #2
    }
 800f218:	4618      	mov	r0, r3
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 800f224:	b590      	push	{r4, r7, lr}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 800f22e:	f107 030c 	add.w	r3, r7, #12
 800f232:	6839      	ldr	r1, [r7, #0]
 800f234:	4618      	mov	r0, r3
 800f236:	f000 f858 	bl	800f2ea <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>
 800f23a:	f107 030c 	add.w	r3, r7, #12
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 f8a0 	bl	800f384 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>
 800f244:	4602      	mov	r2, r0
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4293      	cmp	r3, r2
 800f24a:	bf8c      	ite	hi
 800f24c:	2301      	movhi	r3, #1
 800f24e:	2300      	movls	r3, #0
 800f250:	b2dc      	uxtb	r4, r3
 800f252:	f107 030c 	add.w	r3, r7, #12
 800f256:	4618      	mov	r0, r3
 800f258:	f7ff fe52 	bl	800ef00 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800f25c:	2c00      	cmp	r4, #0
 800f25e:	d002      	beq.n	800f266 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x42>
	  __throw_length_error(
 800f260:	4803      	ldr	r0, [pc, #12]	; (800f270 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE17_S_check_init_lenEjRKS3_+0x4c>)
 800f262:	f00b f8d8 	bl	801a416 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 800f266:	687b      	ldr	r3, [r7, #4]
      }
 800f268:	4618      	mov	r0, r3
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd90      	pop	{r4, r7, pc}
 800f270:	0801a7f8 	.word	0x0801a7f8

0800f274 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d006      	beq.n	800f292 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x1e>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 f895 	bl	800f3b8 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>
 800f28e:	4603      	mov	r3, r0
 800f290:	e000      	b.n	800f294 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE11_M_allocateEj+0x20>
 800f292:	2300      	movs	r3, #0
      }
 800f294:	4618      	mov	r0, r3
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <_ZSt22__uninitialized_copy_aIPKSt17reference_wrapperI3PinEPS2_S2_ET0_T_S7_S6_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
 800f2a8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	68b9      	ldr	r1, [r7, #8]
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f000 f8a2 	bl	800f3f8 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
 800f2c6:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 800f2c8:	f7ff fc84 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d004      	beq.n	800f2dc <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800f2d2:	6839      	ldr	r1, [r7, #0]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 f8a1 	bl	800f41c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
 800f2da:	e003      	b.n	800f2e4 <_ZSt8_DestroyIPSt17reference_wrapperI3PinEEvT_S4_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f8b4 	bl	800f44c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>
    }
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <_ZNSaISt17reference_wrapperI3PinEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b082      	sub	sp, #8
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800f2f4:	6839      	ldr	r1, [r7, #0]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 f8b3 	bl	800f462 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	3708      	adds	r7, #8
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <_ZNSt12_Vector_baseISt17reference_wrapperI3PinESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	605a      	str	r2, [r3, #4]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2200      	movs	r2, #0
 800f31e:	609a      	str	r2, [r3, #8]
	{ }
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	4618      	mov	r0, r3
 800f324:	370c      	adds	r7, #12
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr

0800f32e <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800f32e:	b580      	push	{r7, lr}
 800f330:	b088      	sub	sp, #32
 800f332:	af00      	add	r7, sp, #0
 800f334:	60f8      	str	r0, [r7, #12]
 800f336:	60b9      	str	r1, [r7, #8]
 800f338:	607a      	str	r2, [r7, #4]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	61fb      	str	r3, [r7, #28]
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	61bb      	str	r3, [r7, #24]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 800f346:	f7ff fc45 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 800f34a:	4603      	mov	r3, r0
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d003      	beq.n	800f358 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x2a>
	  {
	    ::operator delete(__p);
 800f350:	69b8      	ldr	r0, [r7, #24]
 800f352:	f00a ff95 	bl	801a280 <_ZdlPv>
	    return;
 800f356:	e005      	b.n	800f364 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE10deallocateERS3_PS2_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800f358:	697a      	ldr	r2, [r7, #20]
 800f35a:	69b9      	ldr	r1, [r7, #24]
 800f35c:	69f8      	ldr	r0, [r7, #28]
 800f35e:	f000 f8c2 	bl	800f4e6 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 800f362:	bf00      	nop
 800f364:	bf00      	nop
 800f366:	3720      	adds	r7, #32
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800f374:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800f378:	4618      	mov	r0, r3
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EE11_S_max_sizeERKS3_>:

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800f38c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800f390:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff ffea 	bl	800f36c <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8max_sizeERKS3_>
 800f398:	4603      	mov	r3, r0
 800f39a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800f39c:	f107 0208 	add.w	r2, r7, #8
 800f3a0:	f107 030c 	add.w	r3, r7, #12
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7ff fc28 	bl	800ebfc <_ZSt3minIjERKT_S2_S2_>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	681b      	ldr	r3, [r3, #0]
      }
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	60fb      	str	r3, [r7, #12]
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800f3ca:	f7ff fc03 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d006      	beq.n	800f3e2 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f00a ff55 	bl	801a288 <_Znwj>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	e006      	b.n	800f3f0 <_ZNSt16allocator_traitsISaISt17reference_wrapperI3PinEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	68b9      	ldr	r1, [r7, #8]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f000 f88c 	bl	800f504 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	bf00      	nop
      { return __a.allocate(__n); }
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3710      	adds	r7, #16
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <_ZSt18uninitialized_copyIPKSt17reference_wrapperI3PinEPS2_ET0_T_S7_S6_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b086      	sub	sp, #24
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800f404:	2301      	movs	r3, #1
 800f406:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800f408:	687a      	ldr	r2, [r7, #4]
 800f40a:	68b9      	ldr	r1, [r7, #8]
 800f40c:	68f8      	ldr	r0, [r7, #12]
 800f40e:	f000 f834 	bl	800f47a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>
 800f412:	4603      	mov	r3, r0
    }
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d00a      	beq.n	800f444 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f843 	bl	800f4ba <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800f434:	4603      	mov	r3, r0
 800f436:	4618      	mov	r0, r3
 800f438:	f000 f84a 	bl	800f4d0 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>
	  for (; __first != __last; ++__first)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	3304      	adds	r3, #4
 800f440:	607b      	str	r3, [r7, #4]
 800f442:	e7f0      	b.n	800f426 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_+0xa>
	}
 800f444:	bf00      	nop
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <_ZNSt12_Destroy_auxILb1EE9__destroyIPSt17reference_wrapperI3PinEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
 800f456:	bf00      	nop
 800f458:	370c      	adds	r7, #12
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr

0800f462 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEEC1ERKS4_>:

      _GLIBCXX20_CONSTEXPR
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800f462:	b480      	push	{r7}
 800f464:	b083      	sub	sp, #12
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
 800f46a:	6039      	str	r1, [r7, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b086      	sub	sp, #24
 800f47e:	af00      	add	r7, sp, #0
 800f480:	60f8      	str	r0, [r7, #12]
 800f482:	60b9      	str	r1, [r7, #8]
 800f484:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800f48a:	68fa      	ldr	r2, [r7, #12]
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d00e      	beq.n	800f4b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800f492:	6978      	ldr	r0, [r7, #20]
 800f494:	f000 f811 	bl	800f4ba <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>
 800f498:	4603      	mov	r3, r0
 800f49a:	68f9      	ldr	r1, [r7, #12]
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 f850 	bl	800f542 <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	3304      	adds	r3, #4
 800f4a6:	60fb      	str	r3, [r7, #12]
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	3304      	adds	r3, #4
 800f4ac:	617b      	str	r3, [r7, #20]
 800f4ae:	e7ec      	b.n	800f48a <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPKSt17reference_wrapperI3PinEPS4_EET0_T_S9_S8_+0x10>
	      return __cur;
 800f4b0:	697b      	ldr	r3, [r7, #20]
	}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <_ZSt11__addressofISt17reference_wrapperI3PinEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800f4ba:	b480      	push	{r7}
 800f4bc:	b083      	sub	sp, #12
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	370c      	adds	r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr

0800f4d0 <_ZSt8_DestroyISt17reference_wrapperI3PinEEvPT_>:
    _Destroy(_Tp* __pointer)
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f847 	bl	800f56c <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>
    }
 800f4de:	bf00      	nop
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE10deallocateEPS3_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b084      	sub	sp, #16
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	60f8      	str	r0, [r7, #12]
 800f4ee:	60b9      	str	r1, [r7, #8]
 800f4f0:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	68b8      	ldr	r0, [r7, #8]
 800f4fa:	f00a fec3 	bl	801a284 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}

0800f504 <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f000 f835 	bl	800f580 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>
 800f516:	4602      	mov	r2, r0
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	4293      	cmp	r3, r2
 800f51c:	bf8c      	ite	hi
 800f51e:	2301      	movhi	r3, #1
 800f520:	2300      	movls	r3, #0
 800f522:	b2db      	uxtb	r3, r3
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <_ZN9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800f528:	f00a ff72 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	009b      	lsls	r3, r3, #2
 800f530:	4618      	mov	r0, r3
 800f532:	f00a fea9 	bl	801a288 <_Znwj>
 800f536:	4603      	mov	r3, r0
 800f538:	bf00      	nop
      }
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <_ZSt10_ConstructISt17reference_wrapperI3PinEJRKS2_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800f542:	b590      	push	{r4, r7, lr}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 800f54c:	6838      	ldr	r0, [r7, #0]
 800f54e:	f000 f823 	bl	800f598 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>
 800f552:	4604      	mov	r4, r0
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4619      	mov	r1, r3
 800f558:	2004      	movs	r0, #4
 800f55a:	f7ff fb43 	bl	800ebe4 <_ZnwjPv>
 800f55e:	4602      	mov	r2, r0
 800f560:	6823      	ldr	r3, [r4, #0]
 800f562:	6013      	str	r3, [r2, #0]
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd90      	pop	{r4, r7, pc}

0800f56c <_ZSt10destroy_atISt17reference_wrapperI3PinEEvPT_>:
    destroy_at(_Tp* __location)
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
    }
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <_ZNK9__gnu_cxx13new_allocatorISt17reference_wrapperI3PinEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800f580:	b480      	push	{r7}
 800f582:	b083      	sub	sp, #12
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800f588:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <_ZSt7forwardIRKSt17reference_wrapperI3PinEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
	...

0800f5b0 <_Z41__static_initialization_and_destruction_0ii>:
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b0f4      	sub	sp, #464	; 0x1d0
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800f5ba:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800f5be:	6018      	str	r0, [r3, #0]
 800f5c0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800f5c4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800f5c8:	6019      	str	r1, [r3, #0]
 800f5ca:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800f5ce:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	f040 832c 	bne.w	800fc32 <_Z41__static_initialization_and_destruction_0ii+0x682>
 800f5da:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800f5de:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	f040 8322 	bne.w	800fc32 <_Z41__static_initialization_and_destruction_0ii+0x682>
Pin PE2(GPIOE,GPIO_Pin::PIN_2);
 800f5ee:	2204      	movs	r2, #4
 800f5f0:	49ba      	ldr	r1, [pc, #744]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f5f2:	48bb      	ldr	r0, [pc, #748]	; (800f8e0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800f5f4:	f7ff fb16 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE3(GPIOE,GPIO_Pin::PIN_3);
 800f5f8:	2208      	movs	r2, #8
 800f5fa:	49b8      	ldr	r1, [pc, #736]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f5fc:	48b9      	ldr	r0, [pc, #740]	; (800f8e4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800f5fe:	f7ff fb11 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE4(GPIOE,GPIO_Pin::PIN_4);
 800f602:	2210      	movs	r2, #16
 800f604:	49b5      	ldr	r1, [pc, #724]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f606:	48b8      	ldr	r0, [pc, #736]	; (800f8e8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800f608:	f7ff fb0c 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE5(GPIOE,GPIO_Pin::PIN_5);
 800f60c:	2220      	movs	r2, #32
 800f60e:	49b3      	ldr	r1, [pc, #716]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f610:	48b6      	ldr	r0, [pc, #728]	; (800f8ec <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800f612:	f7ff fb07 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE6(GPIOE,GPIO_Pin::PIN_6);
 800f616:	2240      	movs	r2, #64	; 0x40
 800f618:	49b0      	ldr	r1, [pc, #704]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f61a:	48b5      	ldr	r0, [pc, #724]	; (800f8f0 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800f61c:	f7ff fb02 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC13(GPIOC,GPIO_Pin::PIN_13);
 800f620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f624:	49b3      	ldr	r1, [pc, #716]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f626:	48b4      	ldr	r0, [pc, #720]	; (800f8f8 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800f628:	f7ff fafc 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC14(GPIOC,GPIO_Pin::PIN_14);
 800f62c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f630:	49b0      	ldr	r1, [pc, #704]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f632:	48b2      	ldr	r0, [pc, #712]	; (800f8fc <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800f634:	f7ff faf6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC15(GPIOC,GPIO_Pin::PIN_15);
 800f638:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f63c:	49ad      	ldr	r1, [pc, #692]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f63e:	48b0      	ldr	r0, [pc, #704]	; (800f900 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800f640:	f7ff faf0 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF0(GPIOF,GPIO_Pin::PIN_0);
 800f644:	2201      	movs	r2, #1
 800f646:	49af      	ldr	r1, [pc, #700]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f648:	48af      	ldr	r0, [pc, #700]	; (800f908 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800f64a:	f7ff faeb 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF1(GPIOF,GPIO_Pin::PIN_1);
 800f64e:	2202      	movs	r2, #2
 800f650:	49ac      	ldr	r1, [pc, #688]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f652:	48ae      	ldr	r0, [pc, #696]	; (800f90c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800f654:	f7ff fae6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF2(GPIOF,GPIO_Pin::PIN_2);
 800f658:	2204      	movs	r2, #4
 800f65a:	49aa      	ldr	r1, [pc, #680]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f65c:	48ac      	ldr	r0, [pc, #688]	; (800f910 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800f65e:	f7ff fae1 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF3(GPIOF,GPIO_Pin::PIN_3);
 800f662:	2208      	movs	r2, #8
 800f664:	49a7      	ldr	r1, [pc, #668]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f666:	48ab      	ldr	r0, [pc, #684]	; (800f914 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800f668:	f7ff fadc 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF4(GPIOF,GPIO_Pin::PIN_4);
 800f66c:	2210      	movs	r2, #16
 800f66e:	49a5      	ldr	r1, [pc, #660]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f670:	48a9      	ldr	r0, [pc, #676]	; (800f918 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800f672:	f7ff fad7 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF5(GPIOF,GPIO_Pin::PIN_5);
 800f676:	2220      	movs	r2, #32
 800f678:	49a2      	ldr	r1, [pc, #648]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f67a:	48a8      	ldr	r0, [pc, #672]	; (800f91c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800f67c:	f7ff fad2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF6(GPIOF,GPIO_Pin::PIN_6);
 800f680:	2240      	movs	r2, #64	; 0x40
 800f682:	49a0      	ldr	r1, [pc, #640]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f684:	48a6      	ldr	r0, [pc, #664]	; (800f920 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800f686:	f7ff facd 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF7(GPIOF,GPIO_Pin::PIN_7);
 800f68a:	2280      	movs	r2, #128	; 0x80
 800f68c:	499d      	ldr	r1, [pc, #628]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f68e:	48a5      	ldr	r0, [pc, #660]	; (800f924 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800f690:	f7ff fac8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF8(GPIOF,GPIO_Pin::PIN_8);
 800f694:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f698:	499a      	ldr	r1, [pc, #616]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f69a:	48a3      	ldr	r0, [pc, #652]	; (800f928 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800f69c:	f7ff fac2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF9(GPIOF,GPIO_Pin::PIN_9);
 800f6a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6a4:	4997      	ldr	r1, [pc, #604]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f6a6:	48a1      	ldr	r0, [pc, #644]	; (800f92c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800f6a8:	f7ff fabc 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF10(GPIOF,GPIO_Pin::PIN_10);
 800f6ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f6b0:	4994      	ldr	r1, [pc, #592]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f6b2:	489f      	ldr	r0, [pc, #636]	; (800f930 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800f6b4:	f7ff fab6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH0(GPIOH,GPIO_Pin::PIN_0);
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	499e      	ldr	r1, [pc, #632]	; (800f934 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f6bc:	489e      	ldr	r0, [pc, #632]	; (800f938 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800f6be:	f7ff fab1 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PH1(GPIOH,GPIO_Pin::PIN_1);
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	499b      	ldr	r1, [pc, #620]	; (800f934 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800f6c6:	489d      	ldr	r0, [pc, #628]	; (800f93c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800f6c8:	f7ff faac 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC0(GPIOC,GPIO_Pin::PIN_0);
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	4989      	ldr	r1, [pc, #548]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f6d0:	489b      	ldr	r0, [pc, #620]	; (800f940 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800f6d2:	f7ff faa7 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC1(GPIOC,GPIO_Pin::PIN_1);
 800f6d6:	2202      	movs	r2, #2
 800f6d8:	4986      	ldr	r1, [pc, #536]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f6da:	489a      	ldr	r0, [pc, #616]	; (800f944 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800f6dc:	f7ff faa2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC2(GPIOC,GPIO_Pin::PIN_2);
 800f6e0:	2204      	movs	r2, #4
 800f6e2:	4984      	ldr	r1, [pc, #528]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f6e4:	4898      	ldr	r0, [pc, #608]	; (800f948 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800f6e6:	f7ff fa9d 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC3(GPIOC,GPIO_Pin::PIN_3);
 800f6ea:	2208      	movs	r2, #8
 800f6ec:	4981      	ldr	r1, [pc, #516]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f6ee:	4897      	ldr	r0, [pc, #604]	; (800f94c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800f6f0:	f7ff fa98 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA0(GPIOA,GPIO_Pin::PIN_0);
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	4996      	ldr	r1, [pc, #600]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f6f8:	4896      	ldr	r0, [pc, #600]	; (800f954 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800f6fa:	f7ff fa93 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA1(GPIOA,GPIO_Pin::PIN_1);
 800f6fe:	2202      	movs	r2, #2
 800f700:	4993      	ldr	r1, [pc, #588]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f702:	4895      	ldr	r0, [pc, #596]	; (800f958 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800f704:	f7ff fa8e 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA2(GPIOA,GPIO_Pin::PIN_2);
 800f708:	2204      	movs	r2, #4
 800f70a:	4991      	ldr	r1, [pc, #580]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f70c:	4893      	ldr	r0, [pc, #588]	; (800f95c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800f70e:	f7ff fa89 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA3(GPIOA,GPIO_Pin::PIN_3);
 800f712:	2208      	movs	r2, #8
 800f714:	498e      	ldr	r1, [pc, #568]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f716:	4892      	ldr	r0, [pc, #584]	; (800f960 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800f718:	f7ff fa84 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA4(GPIOA,GPIO_Pin::PIN_4);
 800f71c:	2210      	movs	r2, #16
 800f71e:	498c      	ldr	r1, [pc, #560]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f720:	4890      	ldr	r0, [pc, #576]	; (800f964 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800f722:	f7ff fa7f 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA5(GPIOA,GPIO_Pin::PIN_5);
 800f726:	2220      	movs	r2, #32
 800f728:	4989      	ldr	r1, [pc, #548]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f72a:	488f      	ldr	r0, [pc, #572]	; (800f968 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800f72c:	f7ff fa7a 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA6(GPIOA,GPIO_Pin::PIN_6);
 800f730:	2240      	movs	r2, #64	; 0x40
 800f732:	4987      	ldr	r1, [pc, #540]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f734:	488d      	ldr	r0, [pc, #564]	; (800f96c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800f736:	f7ff fa75 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA7(GPIOA,GPIO_Pin::PIN_7);
 800f73a:	2280      	movs	r2, #128	; 0x80
 800f73c:	4984      	ldr	r1, [pc, #528]	; (800f950 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800f73e:	488c      	ldr	r0, [pc, #560]	; (800f970 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800f740:	f7ff fa70 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC4(GPIOC,GPIO_Pin::PIN_4);
 800f744:	2210      	movs	r2, #16
 800f746:	496b      	ldr	r1, [pc, #428]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f748:	488a      	ldr	r0, [pc, #552]	; (800f974 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800f74a:	f7ff fa6b 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC5(GPIOC,GPIO_Pin::PIN_5);
 800f74e:	2220      	movs	r2, #32
 800f750:	4968      	ldr	r1, [pc, #416]	; (800f8f4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800f752:	4889      	ldr	r0, [pc, #548]	; (800f978 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800f754:	f7ff fa66 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB0(GPIOB,GPIO_Pin::PIN_0);
 800f758:	2201      	movs	r2, #1
 800f75a:	4988      	ldr	r1, [pc, #544]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f75c:	4888      	ldr	r0, [pc, #544]	; (800f980 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800f75e:	f7ff fa61 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB1(GPIOB,GPIO_Pin::PIN_1);
 800f762:	2202      	movs	r2, #2
 800f764:	4985      	ldr	r1, [pc, #532]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f766:	4887      	ldr	r0, [pc, #540]	; (800f984 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800f768:	f7ff fa5c 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB2(GPIOB,GPIO_Pin::PIN_2);
 800f76c:	2204      	movs	r2, #4
 800f76e:	4983      	ldr	r1, [pc, #524]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f770:	4885      	ldr	r0, [pc, #532]	; (800f988 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800f772:	f7ff fa57 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF11(GPIOF,GPIO_Pin::PIN_11);
 800f776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f77a:	4962      	ldr	r1, [pc, #392]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f77c:	4883      	ldr	r0, [pc, #524]	; (800f98c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800f77e:	f7ff fa51 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF12(GPIOF,GPIO_Pin::PIN_12);
 800f782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f786:	495f      	ldr	r1, [pc, #380]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f788:	4881      	ldr	r0, [pc, #516]	; (800f990 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800f78a:	f7ff fa4b 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF13(GPIOF,GPIO_Pin::PIN_13);
 800f78e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f792:	495c      	ldr	r1, [pc, #368]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f794:	487f      	ldr	r0, [pc, #508]	; (800f994 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800f796:	f7ff fa45 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF14(GPIOF,GPIO_Pin::PIN_14);
 800f79a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f79e:	4959      	ldr	r1, [pc, #356]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f7a0:	487d      	ldr	r0, [pc, #500]	; (800f998 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800f7a2:	f7ff fa3f 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PF15(GPIOF,GPIO_Pin::PIN_15);
 800f7a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f7aa:	4956      	ldr	r1, [pc, #344]	; (800f904 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800f7ac:	487b      	ldr	r0, [pc, #492]	; (800f99c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800f7ae:	f7ff fa39 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG0(GPIOG,GPIO_Pin::PIN_0);
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	497a      	ldr	r1, [pc, #488]	; (800f9a0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800f7b6:	487b      	ldr	r0, [pc, #492]	; (800f9a4 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800f7b8:	f7ff fa34 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG1(GPIOG,GPIO_Pin::PIN_1);
 800f7bc:	2202      	movs	r2, #2
 800f7be:	4978      	ldr	r1, [pc, #480]	; (800f9a0 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800f7c0:	4879      	ldr	r0, [pc, #484]	; (800f9a8 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800f7c2:	f7ff fa2f 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE7(GPIOE,GPIO_Pin::PIN_7);
 800f7c6:	2280      	movs	r2, #128	; 0x80
 800f7c8:	4944      	ldr	r1, [pc, #272]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f7ca:	4878      	ldr	r0, [pc, #480]	; (800f9ac <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800f7cc:	f7ff fa2a 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE8(GPIOE,GPIO_Pin::PIN_8);
 800f7d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7d4:	4941      	ldr	r1, [pc, #260]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f7d6:	4876      	ldr	r0, [pc, #472]	; (800f9b0 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800f7d8:	f7ff fa24 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE9(GPIOE,GPIO_Pin::PIN_9);
 800f7dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f7e0:	493e      	ldr	r1, [pc, #248]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f7e2:	4874      	ldr	r0, [pc, #464]	; (800f9b4 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800f7e4:	f7ff fa1e 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE10(GPIOE,GPIO_Pin::PIN_10);
 800f7e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f7ec:	493b      	ldr	r1, [pc, #236]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f7ee:	4872      	ldr	r0, [pc, #456]	; (800f9b8 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800f7f0:	f7ff fa18 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE11(GPIOE,GPIO_Pin::PIN_11);
 800f7f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f7f8:	4938      	ldr	r1, [pc, #224]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f7fa:	4870      	ldr	r0, [pc, #448]	; (800f9bc <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800f7fc:	f7ff fa12 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE12(GPIOE,GPIO_Pin::PIN_12);
 800f800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f804:	4935      	ldr	r1, [pc, #212]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f806:	486e      	ldr	r0, [pc, #440]	; (800f9c0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800f808:	f7ff fa0c 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE13(GPIOE,GPIO_Pin::PIN_13);
 800f80c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f810:	4932      	ldr	r1, [pc, #200]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f812:	486c      	ldr	r0, [pc, #432]	; (800f9c4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800f814:	f7ff fa06 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE14(GPIOE,GPIO_Pin::PIN_14);
 800f818:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f81c:	492f      	ldr	r1, [pc, #188]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f81e:	486a      	ldr	r0, [pc, #424]	; (800f9c8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800f820:	f7ff fa00 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE15(GPIOE,GPIO_Pin::PIN_15);
 800f824:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f828:	492c      	ldr	r1, [pc, #176]	; (800f8dc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800f82a:	4868      	ldr	r0, [pc, #416]	; (800f9cc <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800f82c:	f7ff f9fa 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB10(GPIOB,GPIO_Pin::PIN_10);
 800f830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f834:	4951      	ldr	r1, [pc, #324]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f836:	4866      	ldr	r0, [pc, #408]	; (800f9d0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800f838:	f7ff f9f4 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB11(GPIOB,GPIO_Pin::PIN_11);
 800f83c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f840:	494e      	ldr	r1, [pc, #312]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f842:	4864      	ldr	r0, [pc, #400]	; (800f9d4 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800f844:	f7ff f9ee 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB12(GPIOB,GPIO_Pin::PIN_12);
 800f848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f84c:	494b      	ldr	r1, [pc, #300]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f84e:	4862      	ldr	r0, [pc, #392]	; (800f9d8 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800f850:	f7ff f9e8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB13(GPIOB,GPIO_Pin::PIN_13);
 800f854:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f858:	4948      	ldr	r1, [pc, #288]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f85a:	4860      	ldr	r0, [pc, #384]	; (800f9dc <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 800f85c:	f7ff f9e2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB14(GPIOB,GPIO_Pin::PIN_14);
 800f860:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f864:	4945      	ldr	r1, [pc, #276]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f866:	485e      	ldr	r0, [pc, #376]	; (800f9e0 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 800f868:	f7ff f9dc 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB15(GPIOB,GPIO_Pin::PIN_15);
 800f86c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f870:	4942      	ldr	r1, [pc, #264]	; (800f97c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800f872:	485c      	ldr	r0, [pc, #368]	; (800f9e4 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 800f874:	f7ff f9d6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD8(GPIOD,GPIO_Pin::PIN_8);
 800f878:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f87c:	495a      	ldr	r1, [pc, #360]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f87e:	485b      	ldr	r0, [pc, #364]	; (800f9ec <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 800f880:	f7ff f9d0 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD9(GPIOD,GPIO_Pin::PIN_9);
 800f884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f888:	4957      	ldr	r1, [pc, #348]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f88a:	4859      	ldr	r0, [pc, #356]	; (800f9f0 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 800f88c:	f7ff f9ca 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD10(GPIOD,GPIO_Pin::PIN_10);
 800f890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f894:	4954      	ldr	r1, [pc, #336]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f896:	4857      	ldr	r0, [pc, #348]	; (800f9f4 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 800f898:	f7ff f9c4 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD11(GPIOD,GPIO_Pin::PIN_11);
 800f89c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f8a0:	4951      	ldr	r1, [pc, #324]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f8a2:	4855      	ldr	r0, [pc, #340]	; (800f9f8 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 800f8a4:	f7ff f9be 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD12(GPIOD,GPIO_Pin::PIN_12);
 800f8a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f8ac:	494e      	ldr	r1, [pc, #312]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f8ae:	4853      	ldr	r0, [pc, #332]	; (800f9fc <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 800f8b0:	f7ff f9b8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD13(GPIOD,GPIO_Pin::PIN_13);
 800f8b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f8b8:	494b      	ldr	r1, [pc, #300]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f8ba:	4851      	ldr	r0, [pc, #324]	; (800fa00 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 800f8bc:	f7ff f9b2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD14(GPIOD,GPIO_Pin::PIN_14);
 800f8c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f8c4:	4948      	ldr	r1, [pc, #288]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f8c6:	484f      	ldr	r0, [pc, #316]	; (800fa04 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 800f8c8:	f7ff f9ac 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD15(GPIOD,GPIO_Pin::PIN_15);
 800f8cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f8d0:	4945      	ldr	r1, [pc, #276]	; (800f9e8 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 800f8d2:	484d      	ldr	r0, [pc, #308]	; (800fa08 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 800f8d4:	f7ff f9a6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
 800f8d8:	e098      	b.n	800fa0c <_Z41__static_initialization_and_destruction_0ii+0x45c>
 800f8da:	bf00      	nop
 800f8dc:	58021000 	.word	0x58021000
 800f8e0:	24000c54 	.word	0x24000c54
 800f8e4:	24000c5c 	.word	0x24000c5c
 800f8e8:	24000c64 	.word	0x24000c64
 800f8ec:	24000c6c 	.word	0x24000c6c
 800f8f0:	24000c74 	.word	0x24000c74
 800f8f4:	58020800 	.word	0x58020800
 800f8f8:	24000c7c 	.word	0x24000c7c
 800f8fc:	24000c84 	.word	0x24000c84
 800f900:	24000c8c 	.word	0x24000c8c
 800f904:	58021400 	.word	0x58021400
 800f908:	24000c94 	.word	0x24000c94
 800f90c:	24000c9c 	.word	0x24000c9c
 800f910:	24000ca4 	.word	0x24000ca4
 800f914:	24000cac 	.word	0x24000cac
 800f918:	24000cb4 	.word	0x24000cb4
 800f91c:	24000cbc 	.word	0x24000cbc
 800f920:	24000cc4 	.word	0x24000cc4
 800f924:	24000ccc 	.word	0x24000ccc
 800f928:	24000cd4 	.word	0x24000cd4
 800f92c:	24000cdc 	.word	0x24000cdc
 800f930:	24000ce4 	.word	0x24000ce4
 800f934:	58021c00 	.word	0x58021c00
 800f938:	24000cec 	.word	0x24000cec
 800f93c:	24000cf4 	.word	0x24000cf4
 800f940:	24000cfc 	.word	0x24000cfc
 800f944:	24000d04 	.word	0x24000d04
 800f948:	24000d0c 	.word	0x24000d0c
 800f94c:	24000d14 	.word	0x24000d14
 800f950:	58020000 	.word	0x58020000
 800f954:	24000d1c 	.word	0x24000d1c
 800f958:	24000d24 	.word	0x24000d24
 800f95c:	24000d2c 	.word	0x24000d2c
 800f960:	24000d34 	.word	0x24000d34
 800f964:	24000d3c 	.word	0x24000d3c
 800f968:	24000d44 	.word	0x24000d44
 800f96c:	24000d4c 	.word	0x24000d4c
 800f970:	24000d54 	.word	0x24000d54
 800f974:	24000d5c 	.word	0x24000d5c
 800f978:	24000d64 	.word	0x24000d64
 800f97c:	58020400 	.word	0x58020400
 800f980:	24000d6c 	.word	0x24000d6c
 800f984:	24000d74 	.word	0x24000d74
 800f988:	24000d7c 	.word	0x24000d7c
 800f98c:	24000d84 	.word	0x24000d84
 800f990:	24000d8c 	.word	0x24000d8c
 800f994:	24000d94 	.word	0x24000d94
 800f998:	24000d9c 	.word	0x24000d9c
 800f99c:	24000da4 	.word	0x24000da4
 800f9a0:	58021800 	.word	0x58021800
 800f9a4:	24000dac 	.word	0x24000dac
 800f9a8:	24000db4 	.word	0x24000db4
 800f9ac:	24000dbc 	.word	0x24000dbc
 800f9b0:	24000dc4 	.word	0x24000dc4
 800f9b4:	24000dcc 	.word	0x24000dcc
 800f9b8:	24000dd4 	.word	0x24000dd4
 800f9bc:	24000ddc 	.word	0x24000ddc
 800f9c0:	24000de4 	.word	0x24000de4
 800f9c4:	24000dec 	.word	0x24000dec
 800f9c8:	24000df4 	.word	0x24000df4
 800f9cc:	24000dfc 	.word	0x24000dfc
 800f9d0:	24000e04 	.word	0x24000e04
 800f9d4:	24000e0c 	.word	0x24000e0c
 800f9d8:	24000e14 	.word	0x24000e14
 800f9dc:	24000e1c 	.word	0x24000e1c
 800f9e0:	24000e24 	.word	0x24000e24
 800f9e4:	24000e2c 	.word	0x24000e2c
 800f9e8:	58020c00 	.word	0x58020c00
 800f9ec:	24000e34 	.word	0x24000e34
 800f9f0:	24000e3c 	.word	0x24000e3c
 800f9f4:	24000e44 	.word	0x24000e44
 800f9f8:	24000e4c 	.word	0x24000e4c
 800f9fc:	24000e54 	.word	0x24000e54
 800fa00:	24000e5c 	.word	0x24000e5c
 800fa04:	24000e64 	.word	0x24000e64
 800fa08:	24000e6c 	.word	0x24000e6c
Pin PG2(GPIOG,GPIO_Pin::PIN_2);
 800fa0c:	2204      	movs	r2, #4
 800fa0e:	4995      	ldr	r1, [pc, #596]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa10:	4895      	ldr	r0, [pc, #596]	; (800fc68 <_Z41__static_initialization_and_destruction_0ii+0x6b8>)
 800fa12:	f7ff f907 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG3(GPIOG,GPIO_Pin::PIN_3);
 800fa16:	2208      	movs	r2, #8
 800fa18:	4992      	ldr	r1, [pc, #584]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa1a:	4894      	ldr	r0, [pc, #592]	; (800fc6c <_Z41__static_initialization_and_destruction_0ii+0x6bc>)
 800fa1c:	f7ff f902 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG4(GPIOG,GPIO_Pin::PIN_4);
 800fa20:	2210      	movs	r2, #16
 800fa22:	4990      	ldr	r1, [pc, #576]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa24:	4892      	ldr	r0, [pc, #584]	; (800fc70 <_Z41__static_initialization_and_destruction_0ii+0x6c0>)
 800fa26:	f7ff f8fd 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG5(GPIOG,GPIO_Pin::PIN_5);
 800fa2a:	2220      	movs	r2, #32
 800fa2c:	498d      	ldr	r1, [pc, #564]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa2e:	4891      	ldr	r0, [pc, #580]	; (800fc74 <_Z41__static_initialization_and_destruction_0ii+0x6c4>)
 800fa30:	f7ff f8f8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG6(GPIOG,GPIO_Pin::PIN_6);
 800fa34:	2240      	movs	r2, #64	; 0x40
 800fa36:	498b      	ldr	r1, [pc, #556]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa38:	488f      	ldr	r0, [pc, #572]	; (800fc78 <_Z41__static_initialization_and_destruction_0ii+0x6c8>)
 800fa3a:	f7ff f8f3 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG7(GPIOG,GPIO_Pin::PIN_7);
 800fa3e:	2280      	movs	r2, #128	; 0x80
 800fa40:	4988      	ldr	r1, [pc, #544]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa42:	488e      	ldr	r0, [pc, #568]	; (800fc7c <_Z41__static_initialization_and_destruction_0ii+0x6cc>)
 800fa44:	f7ff f8ee 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG8(GPIOG,GPIO_Pin::PIN_8);
 800fa48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa4c:	4985      	ldr	r1, [pc, #532]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fa4e:	488c      	ldr	r0, [pc, #560]	; (800fc80 <_Z41__static_initialization_and_destruction_0ii+0x6d0>)
 800fa50:	f7ff f8e8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC6(GPIOC,GPIO_Pin::PIN_6);
 800fa54:	2240      	movs	r2, #64	; 0x40
 800fa56:	498b      	ldr	r1, [pc, #556]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fa58:	488b      	ldr	r0, [pc, #556]	; (800fc88 <_Z41__static_initialization_and_destruction_0ii+0x6d8>)
 800fa5a:	f7ff f8e3 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC7(GPIOC,GPIO_Pin::PIN_7);
 800fa5e:	2280      	movs	r2, #128	; 0x80
 800fa60:	4988      	ldr	r1, [pc, #544]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fa62:	488a      	ldr	r0, [pc, #552]	; (800fc8c <_Z41__static_initialization_and_destruction_0ii+0x6dc>)
 800fa64:	f7ff f8de 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC8(GPIOC,GPIO_Pin::PIN_8);
 800fa68:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa6c:	4985      	ldr	r1, [pc, #532]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fa6e:	4888      	ldr	r0, [pc, #544]	; (800fc90 <_Z41__static_initialization_and_destruction_0ii+0x6e0>)
 800fa70:	f7ff f8d8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC9(GPIOC,GPIO_Pin::PIN_9);
 800fa74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa78:	4982      	ldr	r1, [pc, #520]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fa7a:	4886      	ldr	r0, [pc, #536]	; (800fc94 <_Z41__static_initialization_and_destruction_0ii+0x6e4>)
 800fa7c:	f7ff f8d2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA8(GPIOA,GPIO_Pin::PIN_8);
 800fa80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa84:	4984      	ldr	r1, [pc, #528]	; (800fc98 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800fa86:	4885      	ldr	r0, [pc, #532]	; (800fc9c <_Z41__static_initialization_and_destruction_0ii+0x6ec>)
 800fa88:	f7ff f8cc 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA9(GPIOA,GPIO_Pin::PIN_9);
 800fa8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa90:	4981      	ldr	r1, [pc, #516]	; (800fc98 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800fa92:	4883      	ldr	r0, [pc, #524]	; (800fca0 <_Z41__static_initialization_and_destruction_0ii+0x6f0>)
 800fa94:	f7ff f8c6 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA10(GPIOA,GPIO_Pin::PIN_10);
 800fa98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fa9c:	497e      	ldr	r1, [pc, #504]	; (800fc98 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800fa9e:	4881      	ldr	r0, [pc, #516]	; (800fca4 <_Z41__static_initialization_and_destruction_0ii+0x6f4>)
 800faa0:	f7ff f8c0 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA11(GPIOA,GPIO_Pin::PIN_11);
 800faa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800faa8:	497b      	ldr	r1, [pc, #492]	; (800fc98 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800faaa:	487f      	ldr	r0, [pc, #508]	; (800fca8 <_Z41__static_initialization_and_destruction_0ii+0x6f8>)
 800faac:	f7ff f8ba 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PA12(GPIOA,GPIO_Pin::PIN_12);
 800fab0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fab4:	4978      	ldr	r1, [pc, #480]	; (800fc98 <_Z41__static_initialization_and_destruction_0ii+0x6e8>)
 800fab6:	487d      	ldr	r0, [pc, #500]	; (800fcac <_Z41__static_initialization_and_destruction_0ii+0x6fc>)
 800fab8:	f7ff f8b4 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC10(GPIOC,GPIO_Pin::PIN_10);
 800fabc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fac0:	4970      	ldr	r1, [pc, #448]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fac2:	487b      	ldr	r0, [pc, #492]	; (800fcb0 <_Z41__static_initialization_and_destruction_0ii+0x700>)
 800fac4:	f7ff f8ae 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC11(GPIOC,GPIO_Pin::PIN_11);
 800fac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800facc:	496d      	ldr	r1, [pc, #436]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800face:	4879      	ldr	r0, [pc, #484]	; (800fcb4 <_Z41__static_initialization_and_destruction_0ii+0x704>)
 800fad0:	f7ff f8a8 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PC12(GPIOC,GPIO_Pin::PIN_12);
 800fad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fad8:	496a      	ldr	r1, [pc, #424]	; (800fc84 <_Z41__static_initialization_and_destruction_0ii+0x6d4>)
 800fada:	4877      	ldr	r0, [pc, #476]	; (800fcb8 <_Z41__static_initialization_and_destruction_0ii+0x708>)
 800fadc:	f7ff f8a2 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD0(GPIOD,GPIO_Pin::PIN_0);
 800fae0:	2201      	movs	r2, #1
 800fae2:	4976      	ldr	r1, [pc, #472]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fae4:	4876      	ldr	r0, [pc, #472]	; (800fcc0 <_Z41__static_initialization_and_destruction_0ii+0x710>)
 800fae6:	f7ff f89d 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD1(GPIOD,GPIO_Pin::PIN_1);
 800faea:	2202      	movs	r2, #2
 800faec:	4973      	ldr	r1, [pc, #460]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800faee:	4875      	ldr	r0, [pc, #468]	; (800fcc4 <_Z41__static_initialization_and_destruction_0ii+0x714>)
 800faf0:	f7ff f898 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD2(GPIOD,GPIO_Pin::PIN_2);
 800faf4:	2204      	movs	r2, #4
 800faf6:	4971      	ldr	r1, [pc, #452]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800faf8:	4873      	ldr	r0, [pc, #460]	; (800fcc8 <_Z41__static_initialization_and_destruction_0ii+0x718>)
 800fafa:	f7ff f893 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD3(GPIOD,GPIO_Pin::PIN_3);
 800fafe:	2208      	movs	r2, #8
 800fb00:	496e      	ldr	r1, [pc, #440]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fb02:	4872      	ldr	r0, [pc, #456]	; (800fccc <_Z41__static_initialization_and_destruction_0ii+0x71c>)
 800fb04:	f7ff f88e 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD4(GPIOD,GPIO_Pin::PIN_4);
 800fb08:	2210      	movs	r2, #16
 800fb0a:	496c      	ldr	r1, [pc, #432]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fb0c:	4870      	ldr	r0, [pc, #448]	; (800fcd0 <_Z41__static_initialization_and_destruction_0ii+0x720>)
 800fb0e:	f7ff f889 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD5(GPIOD,GPIO_Pin::PIN_5);
 800fb12:	2220      	movs	r2, #32
 800fb14:	4969      	ldr	r1, [pc, #420]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fb16:	486f      	ldr	r0, [pc, #444]	; (800fcd4 <_Z41__static_initialization_and_destruction_0ii+0x724>)
 800fb18:	f7ff f884 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD6(GPIOD,GPIO_Pin::PIN_6);
 800fb1c:	2240      	movs	r2, #64	; 0x40
 800fb1e:	4967      	ldr	r1, [pc, #412]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fb20:	486d      	ldr	r0, [pc, #436]	; (800fcd8 <_Z41__static_initialization_and_destruction_0ii+0x728>)
 800fb22:	f7ff f87f 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PD7(GPIOD,GPIO_Pin::PIN_7);
 800fb26:	2280      	movs	r2, #128	; 0x80
 800fb28:	4964      	ldr	r1, [pc, #400]	; (800fcbc <_Z41__static_initialization_and_destruction_0ii+0x70c>)
 800fb2a:	486c      	ldr	r0, [pc, #432]	; (800fcdc <_Z41__static_initialization_and_destruction_0ii+0x72c>)
 800fb2c:	f7ff f87a 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG9(GPIOG,GPIO_Pin::PIN_9);
 800fb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb34:	494b      	ldr	r1, [pc, #300]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb36:	486a      	ldr	r0, [pc, #424]	; (800fce0 <_Z41__static_initialization_and_destruction_0ii+0x730>)
 800fb38:	f7ff f874 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG10(GPIOG,GPIO_Pin::PIN_10);
 800fb3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fb40:	4948      	ldr	r1, [pc, #288]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb42:	4868      	ldr	r0, [pc, #416]	; (800fce4 <_Z41__static_initialization_and_destruction_0ii+0x734>)
 800fb44:	f7ff f86e 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG11(GPIOG,GPIO_Pin::PIN_11);
 800fb48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fb4c:	4945      	ldr	r1, [pc, #276]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb4e:	4866      	ldr	r0, [pc, #408]	; (800fce8 <_Z41__static_initialization_and_destruction_0ii+0x738>)
 800fb50:	f7ff f868 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG12(GPIOG,GPIO_Pin::PIN_12);
 800fb54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fb58:	4942      	ldr	r1, [pc, #264]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb5a:	4864      	ldr	r0, [pc, #400]	; (800fcec <_Z41__static_initialization_and_destruction_0ii+0x73c>)
 800fb5c:	f7ff f862 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG13(GPIOG,GPIO_Pin::PIN_13);
 800fb60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb64:	493f      	ldr	r1, [pc, #252]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb66:	4862      	ldr	r0, [pc, #392]	; (800fcf0 <_Z41__static_initialization_and_destruction_0ii+0x740>)
 800fb68:	f7ff f85c 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG14(GPIOG,GPIO_Pin::PIN_14);
 800fb6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800fb70:	493c      	ldr	r1, [pc, #240]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb72:	4860      	ldr	r0, [pc, #384]	; (800fcf4 <_Z41__static_initialization_and_destruction_0ii+0x744>)
 800fb74:	f7ff f856 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PG15(GPIOG,GPIO_Pin::PIN_15);
 800fb78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800fb7c:	4939      	ldr	r1, [pc, #228]	; (800fc64 <_Z41__static_initialization_and_destruction_0ii+0x6b4>)
 800fb7e:	485e      	ldr	r0, [pc, #376]	; (800fcf8 <_Z41__static_initialization_and_destruction_0ii+0x748>)
 800fb80:	f7ff f850 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB4(GPIOB,GPIO_Pin::PIN_4);
 800fb84:	2210      	movs	r2, #16
 800fb86:	495d      	ldr	r1, [pc, #372]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fb88:	485d      	ldr	r0, [pc, #372]	; (800fd00 <_Z41__static_initialization_and_destruction_0ii+0x750>)
 800fb8a:	f7ff f84b 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB5(GPIOB,GPIO_Pin::PIN_5);
 800fb8e:	2220      	movs	r2, #32
 800fb90:	495a      	ldr	r1, [pc, #360]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fb92:	485c      	ldr	r0, [pc, #368]	; (800fd04 <_Z41__static_initialization_and_destruction_0ii+0x754>)
 800fb94:	f7ff f846 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB6(GPIOB,GPIO_Pin::PIN_6);
 800fb98:	2240      	movs	r2, #64	; 0x40
 800fb9a:	4958      	ldr	r1, [pc, #352]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fb9c:	485a      	ldr	r0, [pc, #360]	; (800fd08 <_Z41__static_initialization_and_destruction_0ii+0x758>)
 800fb9e:	f7ff f841 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB7(GPIOB,GPIO_Pin::PIN_7);
 800fba2:	2280      	movs	r2, #128	; 0x80
 800fba4:	4955      	ldr	r1, [pc, #340]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fba6:	4859      	ldr	r0, [pc, #356]	; (800fd0c <_Z41__static_initialization_and_destruction_0ii+0x75c>)
 800fba8:	f7ff f83c 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB8(GPIOB,GPIO_Pin::PIN_8);
 800fbac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbb0:	4952      	ldr	r1, [pc, #328]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fbb2:	4857      	ldr	r0, [pc, #348]	; (800fd10 <_Z41__static_initialization_and_destruction_0ii+0x760>)
 800fbb4:	f7ff f836 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PB9(GPIOB,GPIO_Pin::PIN_9);
 800fbb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fbbc:	494f      	ldr	r1, [pc, #316]	; (800fcfc <_Z41__static_initialization_and_destruction_0ii+0x74c>)
 800fbbe:	4855      	ldr	r0, [pc, #340]	; (800fd14 <_Z41__static_initialization_and_destruction_0ii+0x764>)
 800fbc0:	f7ff f830 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE0(GPIOE,GPIO_Pin::PIN_0);
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	4954      	ldr	r1, [pc, #336]	; (800fd18 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800fbc8:	4854      	ldr	r0, [pc, #336]	; (800fd1c <_Z41__static_initialization_and_destruction_0ii+0x76c>)
 800fbca:	f7ff f82b 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
Pin PE1(GPIOE,GPIO_Pin::PIN_1);
 800fbce:	2202      	movs	r2, #2
 800fbd0:	4951      	ldr	r1, [pc, #324]	; (800fd18 <_Z41__static_initialization_and_destruction_0ii+0x768>)
 800fbd2:	4853      	ldr	r0, [pc, #332]	; (800fd20 <_Z41__static_initialization_and_destruction_0ii+0x770>)
 800fbd4:	f7ff f826 	bl	800ec24 <_ZN3PinC1EP12GPIO_TypeDef8GPIO_Pin>
vector<reference_wrapper<Pin>> Pin::pinVector = {PA0,PA1,PA10,PA11,PA12,
 800fbd8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fbdc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800fbe0:	4a50      	ldr	r2, [pc, #320]	; (800fd24 <_Z41__static_initialization_and_destruction_0ii+0x774>)
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800fbea:	461a      	mov	r2, r3
 800fbec:	f00a fc60 	bl	801a4b0 <memcpy>
 800fbf0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fbf4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800fbf8:	f107 0214 	add.w	r2, r7, #20
 800fbfc:	601a      	str	r2, [r3, #0]
 800fbfe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fc02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800fc06:	226e      	movs	r2, #110	; 0x6e
 800fc08:	605a      	str	r2, [r3, #4]
 800fc0a:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7ff f96a 	bl	800eee8 <_ZNSaISt17reference_wrapperI3PinEEC1Ev>
 800fc14:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800fc18:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 800fc1c:	f5a2 72e2 	sub.w	r2, r2, #452	; 0x1c4
 800fc20:	ca06      	ldmia	r2, {r1, r2}
 800fc22:	4841      	ldr	r0, [pc, #260]	; (800fd28 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800fc24:	f7ff f977 	bl	800ef16 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EEC1ESt16initializer_listIS2_ERKS3_>
 800fc28:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff f967 	bl	800ef00 <_ZNSaISt17reference_wrapperI3PinEED1Ev>
 800fc32:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fc36:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10b      	bne.n	800fc58 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800fc40:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800fc44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d102      	bne.n	800fc58 <_Z41__static_initialization_and_destruction_0ii+0x6a8>
 800fc52:	4835      	ldr	r0, [pc, #212]	; (800fd28 <_Z41__static_initialization_and_destruction_0ii+0x778>)
 800fc54:	f7ff f980 	bl	800ef58 <_ZNSt6vectorISt17reference_wrapperI3PinESaIS2_EED1Ev>
}
 800fc58:	bf00      	nop
 800fc5a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	58021800 	.word	0x58021800
 800fc68:	24000e74 	.word	0x24000e74
 800fc6c:	24000e7c 	.word	0x24000e7c
 800fc70:	24000e84 	.word	0x24000e84
 800fc74:	24000e8c 	.word	0x24000e8c
 800fc78:	24000e94 	.word	0x24000e94
 800fc7c:	24000e9c 	.word	0x24000e9c
 800fc80:	24000ea4 	.word	0x24000ea4
 800fc84:	58020800 	.word	0x58020800
 800fc88:	24000eac 	.word	0x24000eac
 800fc8c:	24000eb4 	.word	0x24000eb4
 800fc90:	24000ebc 	.word	0x24000ebc
 800fc94:	24000ec4 	.word	0x24000ec4
 800fc98:	58020000 	.word	0x58020000
 800fc9c:	24000ecc 	.word	0x24000ecc
 800fca0:	24000ed4 	.word	0x24000ed4
 800fca4:	24000edc 	.word	0x24000edc
 800fca8:	24000ee4 	.word	0x24000ee4
 800fcac:	24000eec 	.word	0x24000eec
 800fcb0:	24000ef4 	.word	0x24000ef4
 800fcb4:	24000efc 	.word	0x24000efc
 800fcb8:	24000f04 	.word	0x24000f04
 800fcbc:	58020c00 	.word	0x58020c00
 800fcc0:	24000f0c 	.word	0x24000f0c
 800fcc4:	24000f14 	.word	0x24000f14
 800fcc8:	24000f1c 	.word	0x24000f1c
 800fccc:	24000f24 	.word	0x24000f24
 800fcd0:	24000f2c 	.word	0x24000f2c
 800fcd4:	24000f34 	.word	0x24000f34
 800fcd8:	24000f3c 	.word	0x24000f3c
 800fcdc:	24000f44 	.word	0x24000f44
 800fce0:	24000f4c 	.word	0x24000f4c
 800fce4:	24000f54 	.word	0x24000f54
 800fce8:	24000f5c 	.word	0x24000f5c
 800fcec:	24000f64 	.word	0x24000f64
 800fcf0:	24000f6c 	.word	0x24000f6c
 800fcf4:	24000f74 	.word	0x24000f74
 800fcf8:	24000f7c 	.word	0x24000f7c
 800fcfc:	58020400 	.word	0x58020400
 800fd00:	24000f84 	.word	0x24000f84
 800fd04:	24000f8c 	.word	0x24000f8c
 800fd08:	24000f94 	.word	0x24000f94
 800fd0c:	24000f9c 	.word	0x24000f9c
 800fd10:	24000fa4 	.word	0x24000fa4
 800fd14:	24000fac 	.word	0x24000fac
 800fd18:	58021000 	.word	0x58021000
 800fd1c:	24000fb4 	.word	0x24000fb4
 800fd20:	24000fbc 	.word	0x24000fbc
 800fd24:	0801a82c 	.word	0x0801a82c
 800fd28:	24000fc4 	.word	0x24000fc4

0800fd2c <_GLOBAL__sub_I__ZN3PinC2Ev>:
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fd34:	2001      	movs	r0, #1
 800fd36:	f7ff fc3b 	bl	800f5b0 <_Z41__static_initialization_and_destruction_0ii>
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <_GLOBAL__sub_D__ZN3PinC2Ev>:
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fd44:	2000      	movs	r0, #0
 800fd46:	f7ff fc33 	bl	800f5b0 <_Z41__static_initialization_and_destruction_0ii>
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	701a      	strb	r2, [r3, #0]
      _M_reset();
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f805 	bl	800fd6a <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 800fd6a:	b480      	push	{r7}
 800fd6c:	b083      	sub	sp, #12
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2200      	movs	r2, #0
 800fd76:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2200      	movs	r2, #0
 800fd88:	611a      	str	r2, [r3, #16]
    }
 800fd8a:	bf00      	nop
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
      struct _Vector_impl
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b082      	sub	sp, #8
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fb64 	bl	801046c <_ZNSaImED1Ev>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	4618      	mov	r0, r3
 800fda8:	3708      	adds	r7, #8
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <_ZNK3PinltERKS_>:

	bool operator== (const Pin &other) const {
		return (gpio_pin == other.gpio_pin && port == other.port);
	}

	bool operator< (const Pin &other) const {
 800fdae:	b480      	push	{r7}
 800fdb0:	b083      	sub	sp, #12
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	6039      	str	r1, [r7, #0]
		if (port == other.port)
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d109      	bne.n	800fdd8 <_ZNK3PinltERKS_+0x2a>
			return gpio_pin < other.gpio_pin;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	889a      	ldrh	r2, [r3, #4]
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	889b      	ldrh	r3, [r3, #4]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	bf34      	ite	cc
 800fdd0:	2301      	movcc	r3, #1
 800fdd2:	2300      	movcs	r3, #0
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	e008      	b.n	800fdea <_ZNK3PinltERKS_+0x3c>
		return port < other.port;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	bf34      	ite	cc
 800fde4:	2301      	movcc	r3, #1
 800fde6:	2300      	movcs	r3, #0
 800fde8:	b2db      	uxtb	r3, r3
	}
 800fdea:	4618      	mov	r0, r3
 800fdec:	370c      	adds	r7, #12
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr

0800fdf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 800fdf6:	b580      	push	{r7, lr}
 800fdf8:	b082      	sub	sp, #8
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	6078      	str	r0, [r7, #4]
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f000 fbea 	bl	80105d8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b082      	sub	sp, #8
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f000 fbc8 	bl	80105ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7ff ffeb 	bl	800fe0e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}

0800fe42 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~map() = default;
 800fe42:	b580      	push	{r7, lr}
 800fe44:	b082      	sub	sp, #8
 800fe46:	af00      	add	r7, sp, #0
 800fe48:	6078      	str	r0, [r7, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 fbce 	bl	80105ee <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4618      	mov	r0, r3
 800fe56:	3708      	adds	r7, #8
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>:
extern ADC_HandleTypeDef hadc3;

forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
map<uint8_t, ADC::Instance> ADC::active_instances = {};

ADC::InitData::InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels) :
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	603b      	str	r3, [r7, #0]
		adc(adc), resolution(resolution), external_trigger(external_trigger), channels(channels) {}
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	601a      	str	r2, [r3, #0]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	605a      	str	r2, [r3, #4]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	683a      	ldr	r2, [r7, #0]
 800fe7a:	609a      	str	r2, [r3, #8]
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	330c      	adds	r3, #12
 800fe80:	69b9      	ldr	r1, [r7, #24]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f000 fbc8 	bl	8010618 <_ZNSt6vectorImSaImEEC1ERKS1_>
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <_ZN3ADC8InitDataC1ERKS0_>:
#define MAX_12BIT 4095.0
#define MAX_16BIT 65535.0

class ADC {
public:
	struct InitData {
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b082      	sub	sp, #8
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	6039      	str	r1, [r7, #0]
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	685a      	ldr	r2, [r3, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	605a      	str	r2, [r3, #4]
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	689a      	ldr	r2, [r3, #8]
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	609a      	str	r2, [r3, #8]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f103 020c 	add.w	r2, r3, #12
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	330c      	adds	r3, #12
 800febe:	4619      	mov	r1, r3
 800fec0:	4610      	mov	r0, r2
 800fec2:	f000 fba9 	bl	8010618 <_ZNSt6vectorImSaImEEC1ERKS1_>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	4618      	mov	r0, r3
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <_ZN3ADC8InitDataD1Ev>:
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	330c      	adds	r3, #12
 800fedc:	4618      	mov	r0, r3
 800fede:	f000 fae9 	bl	80104b4 <_ZNSt6vectorImSaImEED1Ev>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4618      	mov	r0, r3
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>:

ADC::Peripheral::Peripheral(ADC_HandleTypeDef* handle, uint16_t* dma_stream, LowPowerTimer& timer, InitData& init_data) :
 800feec:	b580      	push	{r7, lr}
 800feee:	b084      	sub	sp, #16
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	60b9      	str	r1, [r7, #8]
 800fef6:	607a      	str	r2, [r7, #4]
 800fef8:	603b      	str	r3, [r7, #0]
	handle(handle), dma_stream(dma_stream), timer(timer), init_data(init_data) {}
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	68ba      	ldr	r2, [r7, #8]
 800fefe:	601a      	str	r2, [r3, #0]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	605a      	str	r2, [r3, #4]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ff10:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	3310      	adds	r3, #16
 800ff18:	69b9      	ldr	r1, [r7, #24]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7ff ffb9 	bl	800fe92 <_ZN3ADC8InitDataC1ERKS0_>
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	2200      	movs	r2, #0
 800ff24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}

0800ff32 <_ZN3ADC10Peripheral13is_registeredEv>:

bool ADC::Peripheral::is_registered() {
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b082      	sub	sp, #8
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
	return init_data.channels.size();
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	331c      	adds	r3, #28
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 fad3 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bf14      	ite	ne
 800ff4a:	2301      	movne	r3, #1
 800ff4c:	2300      	moveq	r3, #0
 800ff4e:	b2db      	uxtb	r3, r3
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3708      	adds	r7, #8
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}

0800ff58 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>:

ADC::Instance::Instance(ADC::Peripheral* peripheral, uint32_t channel) :
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
		peripheral(peripheral), channel(channel) {}
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	601a      	str	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	605a      	str	r2, [r3, #4]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	4618      	mov	r0, r3
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr
	...

0800ff80 <_ZN3ADC8inscribeE3Pin>:

optional<uint8_t> ADC::inscribe(Pin pin) {
 800ff80:	b590      	push	{r4, r7, lr}
 800ff82:	b089      	sub	sp, #36	; 0x24
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	463b      	mov	r3, r7
 800ff88:	e883 0003 	stmia.w	r3, {r0, r1}
	if (not available_instances.contains(pin)) {
 800ff8c:	463b      	mov	r3, r7
 800ff8e:	4619      	mov	r1, r3
 800ff90:	4836      	ldr	r0, [pc, #216]	; (801006c <_ZN3ADC8inscribeE3Pin+0xec>)
 800ff92:	f000 fb7e 	bl	8010692 <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>
 800ff96:	4603      	mov	r3, r0
 800ff98:	f083 0301 	eor.w	r3, r3, #1
 800ff9c:	b2db      	uxtb	r3, r3
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d008      	beq.n	800ffb4 <_ZN3ADC8inscribeE3Pin+0x34>
		return nullopt;
 800ffa2:	f107 0314 	add.w	r3, r7, #20
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f000 fbc9 	bl	8010740 <_ZNSt8optionalIhEC1ESt9nullopt_t>
 800ffae:	8abb      	ldrh	r3, [r7, #20]
 800ffb0:	823b      	strh	r3, [r7, #16]
 800ffb2:	e04f      	b.n	8010054 <_ZN3ADC8inscribeE3Pin+0xd4>
	}

	Pin::inscribe(pin, ANALOG);
 800ffb4:	463b      	mov	r3, r7
 800ffb6:	2103      	movs	r1, #3
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fe fe4a 	bl	800ec52 <_ZN3Pin8inscribeERS_14Operation_Mode>
	uint8_t id = id_manager.front();
 800ffbe:	482c      	ldr	r0, [pc, #176]	; (8010070 <_ZN3ADC8inscribeE3Pin+0xf0>)
 800ffc0:	f000 fbcc 	bl	801075c <_ZNSt12forward_listIhSaIhEE5frontEv>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	73fb      	strb	r3, [r7, #15]
	active_instances[id] = available_instances[pin];
 800ffca:	463b      	mov	r3, r7
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4827      	ldr	r0, [pc, #156]	; (801006c <_ZN3ADC8inscribeE3Pin+0xec>)
 800ffd0:	f000 fc30 	bl	8010834 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	f107 030f 	add.w	r3, r7, #15
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4825      	ldr	r0, [pc, #148]	; (8010074 <_ZN3ADC8inscribeE3Pin+0xf4>)
 800ffde:	f000 fbcd 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	ca07      	ldmia	r2, {r0, r1, r2}
 800ffe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	id_manager.pop_front();
 800ffec:	4820      	ldr	r0, [pc, #128]	; (8010070 <_ZN3ADC8inscribeE3Pin+0xf0>)
 800ffee:	f000 fc7d 	bl	80108ec <_ZNSt12forward_listIhSaIhEE9pop_frontEv>

	InitData& init_data = active_instances[id].peripheral->init_data;
 800fff2:	f107 030f 	add.w	r3, r7, #15
 800fff6:	4619      	mov	r1, r3
 800fff8:	481e      	ldr	r0, [pc, #120]	; (8010074 <_ZN3ADC8inscribeE3Pin+0xf4>)
 800fffa:	f000 fbbf 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 800fffe:	4603      	mov	r3, r0
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3310      	adds	r3, #16
 8010004:	61fb      	str	r3, [r7, #28]
	active_instances[id].rank = init_data.channels.size();
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	330c      	adds	r3, #12
 801000a:	4618      	mov	r0, r3
 801000c:	f000 fa6d 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8010010:	4604      	mov	r4, r0
 8010012:	f107 030f 	add.w	r3, r7, #15
 8010016:	4619      	mov	r1, r3
 8010018:	4816      	ldr	r0, [pc, #88]	; (8010074 <_ZN3ADC8inscribeE3Pin+0xf4>)
 801001a:	f000 fbaf 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 801001e:	4603      	mov	r3, r0
 8010020:	609c      	str	r4, [r3, #8]
	init_data.channels.push_back(active_instances[id].channel);
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	f103 040c 	add.w	r4, r3, #12
 8010028:	f107 030f 	add.w	r3, r7, #15
 801002c:	4619      	mov	r1, r3
 801002e:	4811      	ldr	r0, [pc, #68]	; (8010074 <_ZN3ADC8inscribeE3Pin+0xf4>)
 8010030:	f000 fba4 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 8010034:	4603      	mov	r3, r0
 8010036:	3304      	adds	r3, #4
 8010038:	4619      	mov	r1, r3
 801003a:	4620      	mov	r0, r4
 801003c:	f000 fc64 	bl	8010908 <_ZNSt6vectorImSaImEE9push_backERKm>
	return id;
 8010040:	f107 020f 	add.w	r2, r7, #15
 8010044:	f107 0318 	add.w	r3, r7, #24
 8010048:	4611      	mov	r1, r2
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fc81 	bl	8010952 <_ZNSt8optionalIhEC1IhLb1EEEOT_>
 8010050:	8b3b      	ldrh	r3, [r7, #24]
 8010052:	823b      	strh	r3, [r7, #16]
}
 8010054:	2300      	movs	r3, #0
 8010056:	7c3a      	ldrb	r2, [r7, #16]
 8010058:	f362 0307 	bfi	r3, r2, #0, #8
 801005c:	7c7a      	ldrb	r2, [r7, #17]
 801005e:	f362 230f 	bfi	r3, r2, #8, #8
 8010062:	4618      	mov	r0, r3
 8010064:	3724      	adds	r7, #36	; 0x24
 8010066:	46bd      	mov	sp, r7
 8010068:	bd90      	pop	{r4, r7, pc}
 801006a:	bf00      	nop
 801006c:	240011cc 	.word	0x240011cc
 8010070:	24000fd0 	.word	0x24000fd0
 8010074:	24000fd4 	.word	0x24000fd4

08010078 <_ZN3ADC5startEv>:

void ADC::start() {
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
	for(Peripheral& peripheral : peripherals) {
 801007e:	4b0e      	ldr	r3, [pc, #56]	; (80100b8 <_ZN3ADC5startEv+0x40>)
 8010080:	60bb      	str	r3, [r7, #8]
 8010082:	4b0d      	ldr	r3, [pc, #52]	; (80100b8 <_ZN3ADC5startEv+0x40>)
 8010084:	60fb      	str	r3, [r7, #12]
 8010086:	4b0d      	ldr	r3, [pc, #52]	; (80100bc <_ZN3ADC5startEv+0x44>)
 8010088:	607b      	str	r3, [r7, #4]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d00e      	beq.n	80100b0 <_ZN3ADC5startEv+0x38>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	603b      	str	r3, [r7, #0]
		if (peripheral.is_registered()) {
 8010096:	6838      	ldr	r0, [r7, #0]
 8010098:	f7ff ff4b 	bl	800ff32 <_ZN3ADC10Peripheral13is_registeredEv>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d002      	beq.n	80100a8 <_ZN3ADC5startEv+0x30>
			ADC::init(peripheral);
 80100a2:	6838      	ldr	r0, [r7, #0]
 80100a4:	f000 f914 	bl	80102d0 <_ZN3ADC4initERNS_10PeripheralE>
	for(Peripheral& peripheral : peripherals) {
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	332c      	adds	r3, #44	; 0x2c
 80100ac:	60fb      	str	r3, [r7, #12]
 80100ae:	e7ec      	b.n	801008a <_ZN3ADC5startEv+0x12>
		}
	}
}
 80100b0:	bf00      	nop
 80100b2:	3710      	adds	r7, #16
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	24001148 	.word	0x24001148
 80100bc:	240011cc 	.word	0x240011cc

080100c0 <_ZN3ADC7turn_onEh>:

void ADC::turn_on(uint8_t id){
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	4603      	mov	r3, r0
 80100c8:	71fb      	strb	r3, [r7, #7]
	if (not active_instances.contains(id)) {
 80100ca:	1dfb      	adds	r3, r7, #7
 80100cc:	4619      	mov	r1, r3
 80100ce:	4829      	ldr	r0, [pc, #164]	; (8010174 <_ZN3ADC7turn_onEh+0xb4>)
 80100d0:	f000 fc53 	bl	801097a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 80100d4:	4603      	mov	r3, r0
 80100d6:	f083 0301 	eor.w	r3, r3, #1
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d13e      	bne.n	801015e <_ZN3ADC7turn_onEh+0x9e>
		return;
	}

	Peripheral* peripheral = active_instances[id].peripheral;
 80100e0:	1dfb      	adds	r3, r7, #7
 80100e2:	4619      	mov	r1, r3
 80100e4:	4823      	ldr	r0, [pc, #140]	; (8010174 <_ZN3ADC7turn_onEh+0xb4>)
 80100e6:	f000 fb49 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80100ea:	4603      	mov	r3, r0
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	617b      	str	r3, [r7, #20]
	if (peripheral->is_on) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d133      	bne.n	8010162 <_ZN3ADC7turn_onEh+0xa2>
		return;
	}

	uint32_t buffer_length = peripheral->init_data.channels.size();
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	331c      	adds	r3, #28
 80100fe:	4618      	mov	r0, r3
 8010100:	f000 f9f3 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8010104:	6138      	str	r0, [r7, #16]
	if (HAL_ADC_Start_DMA(peripheral->handle, (uint32_t*) peripheral->dma_stream, buffer_length) != HAL_OK) {
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	6818      	ldr	r0, [r3, #0]
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	693a      	ldr	r2, [r7, #16]
 8010110:	4619      	mov	r1, r3
 8010112:	f7f3 fc95 	bl	8003a40 <HAL_ADC_Start_DMA>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	bf14      	ite	ne
 801011c:	2301      	movne	r3, #1
 801011e:	2300      	moveq	r3, #0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	d11f      	bne.n	8010166 <_ZN3ADC7turn_onEh+0xa6>
		return; //TODO: Error handler
	}

	LowPowerTimer& timer = peripheral->timer;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	3308      	adds	r3, #8
 801012a:	60fb      	str	r3, [r7, #12]
	if (HAL_LPTIM_TimeOut_Start_IT(timer.handle, timer.period, timer.period / 2) != HAL_OK) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	889b      	ldrh	r3, [r3, #4]
 8010134:	4619      	mov	r1, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	889b      	ldrh	r3, [r3, #4]
 801013a:	085b      	lsrs	r3, r3, #1
 801013c:	b29b      	uxth	r3, r3
 801013e:	461a      	mov	r2, r3
 8010140:	f7f8 fcf6 	bl	8008b30 <HAL_LPTIM_TimeOut_Start_IT>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	bf14      	ite	ne
 801014a:	2301      	movne	r3, #1
 801014c:	2300      	moveq	r3, #0
 801014e:	b2db      	uxtb	r3, r3
 8010150:	2b00      	cmp	r3, #0
 8010152:	d10a      	bne.n	801016a <_ZN3ADC7turn_onEh+0xaa>
		return; //TODO: Error handler
	}
	peripheral->is_on = true;
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2201      	movs	r2, #1
 8010158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801015c:	e006      	b.n	801016c <_ZN3ADC7turn_onEh+0xac>
		return;
 801015e:	bf00      	nop
 8010160:	e004      	b.n	801016c <_ZN3ADC7turn_onEh+0xac>
		return;
 8010162:	bf00      	nop
 8010164:	e002      	b.n	801016c <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 8010166:	bf00      	nop
 8010168:	e000      	b.n	801016c <_ZN3ADC7turn_onEh+0xac>
		return; //TODO: Error handler
 801016a:	bf00      	nop
}
 801016c:	3718      	adds	r7, #24
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}
 8010172:	bf00      	nop
 8010174:	24000fd4 	.word	0x24000fd4

08010178 <_ZN3ADC9get_valueEh>:

optional<float> ADC::get_value(uint8_t id) {
 8010178:	b590      	push	{r4, r7, lr}
 801017a:	b089      	sub	sp, #36	; 0x24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	70fb      	strb	r3, [r7, #3]
	if (not active_instances.contains(id)) {
 8010184:	1cfb      	adds	r3, r7, #3
 8010186:	4619      	mov	r1, r3
 8010188:	482f      	ldr	r0, [pc, #188]	; (8010248 <_ZN3ADC9get_valueEh+0xd0>)
 801018a:	f000 fbf6 	bl	801097a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>
 801018e:	4603      	mov	r3, r0
 8010190:	f083 0301 	eor.w	r3, r3, #1
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d004      	beq.n	80101a4 <_ZN3ADC9get_valueEh+0x2c>
		return nullopt;
 801019a:	4621      	mov	r1, r4
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fc43 	bl	8010a28 <_ZNSt8optionalIfEC1ESt9nullopt_t>
 80101a2:	e03f      	b.n	8010224 <_ZN3ADC9get_valueEh+0xac>
	}

	Instance& instance = active_instances[id];
 80101a4:	1cfb      	adds	r3, r7, #3
 80101a6:	4619      	mov	r1, r3
 80101a8:	4827      	ldr	r0, [pc, #156]	; (8010248 <_ZN3ADC9get_valueEh+0xd0>)
 80101aa:	f000 fae7 	bl	801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>
 80101ae:	61f8      	str	r0, [r7, #28]
	uint16_t raw = instance.peripheral->dma_stream[instance.rank];
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	005b      	lsls	r3, r3, #1
 80101bc:	4413      	add	r3, r2
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	837b      	strh	r3, [r7, #26]
	if(instance.peripheral->handle == &hadc3) {
 80101c2:	69fb      	ldr	r3, [r7, #28]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4a20      	ldr	r2, [pc, #128]	; (801024c <_ZN3ADC9get_valueEh+0xd4>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d115      	bne.n	80101fa <_ZN3ADC9get_valueEh+0x82>
		return raw / MAX_12BIT * MAX_VOLTAGE;
 80101ce:	8b7b      	ldrh	r3, [r7, #26]
 80101d0:	ee07 3a90 	vmov	s15, r3
 80101d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80101d8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8010230 <_ZN3ADC9get_valueEh+0xb8>
 80101dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101e0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010238 <_ZN3ADC9get_valueEh+0xc0>
 80101e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101e8:	ed87 7b02 	vstr	d7, [r7, #8]
 80101ec:	f107 0308 	add.w	r3, r7, #8
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 fc26 	bl	8010a44 <_ZNSt8optionalIfEC1IdLb1EEEOT_>
	}
	else {
		return raw / MAX_16BIT * MAX_VOLTAGE;
	}
}
 80101f8:	e014      	b.n	8010224 <_ZN3ADC9get_valueEh+0xac>
		return raw / MAX_16BIT * MAX_VOLTAGE;
 80101fa:	8b7b      	ldrh	r3, [r7, #26]
 80101fc:	ee07 3a90 	vmov	s15, r3
 8010200:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8010204:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8010240 <_ZN3ADC9get_valueEh+0xc8>
 8010208:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801020c:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8010238 <_ZN3ADC9get_valueEh+0xc0>
 8010210:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010214:	ed87 7b04 	vstr	d7, [r7, #16]
 8010218:	f107 0310 	add.w	r3, r7, #16
 801021c:	4619      	mov	r1, r3
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 fc10 	bl	8010a44 <_ZNSt8optionalIfEC1IdLb1EEEOT_>
}
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	3724      	adds	r7, #36	; 0x24
 8010228:	46bd      	mov	sp, r7
 801022a:	bd90      	pop	{r4, r7, pc}
 801022c:	f3af 8000 	nop.w
 8010230:	00000000 	.word	0x00000000
 8010234:	40affe00 	.word	0x40affe00
 8010238:	66666666 	.word	0x66666666
 801023c:	400a6666 	.word	0x400a6666
 8010240:	00000000 	.word	0x00000000
 8010244:	40efffe0 	.word	0x40efffe0
 8010248:	24000fd4 	.word	0x24000fd4
 801024c:	24000270 	.word	0x24000270

08010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4618      	mov	r0, r3
 801025c:	370c      	adds	r7, #12
 801025e:	46bd      	mov	sp, r7
 8010260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010264:	4770      	bx	lr

08010266 <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8010266:	b590      	push	{r4, r7, lr}
 8010268:	b083      	sub	sp, #12
 801026a:	af00      	add	r7, sp, #0
 801026c:	6078      	str	r0, [r7, #4]
 801026e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f7ff ffed 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8010276:	4603      	mov	r3, r0
 8010278:	681c      	ldr	r4, [r3, #0]
 801027a:	6838      	ldr	r0, [r7, #0]
 801027c:	f7ff ffe8 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8010280:	4603      	mov	r3, r0
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	429c      	cmp	r4, r3
 8010286:	bf0c      	ite	eq
 8010288:	2301      	moveq	r3, #1
 801028a:	2300      	movne	r3, #0
 801028c:	b2db      	uxtb	r3, r3
 801028e:	4618      	mov	r0, r3
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	bd90      	pop	{r4, r7, pc}

08010296 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8010296:	b480      	push	{r7}
 8010298:	b083      	sub	sp, #12
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
	++_M_current;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	1d1a      	adds	r2, r3, #4
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	601a      	str	r2, [r3, #0]
	return *this;
 80102a8:	687b      	ldr	r3, [r7, #4]
      }
 80102aa:	4618      	mov	r0, r3
 80102ac:	370c      	adds	r7, #12
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80102b6:	b480      	push	{r7}
 80102b8:	b083      	sub	sp, #12
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4618      	mov	r0, r3
 80102c4:	370c      	adds	r7, #12
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
	...

080102d0 <_ZN3ADC4initERNS_10PeripheralE>:

void ADC::init(Peripheral& peripheral) {
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b09a      	sub	sp, #104	; 0x68
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]


	  ADC_MultiModeTypeDef multimode = {0};
 80102d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	605a      	str	r2, [r3, #4]
 80102e2:	609a      	str	r2, [r3, #8]
	  ADC_ChannelConfTypeDef sConfig = {0};
 80102e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80102e8:	2224      	movs	r2, #36	; 0x24
 80102ea:	2100      	movs	r1, #0
 80102ec:	4618      	mov	r0, r3
 80102ee:	f00a f907 	bl	801a500 <memset>
	  ADC_HandleTypeDef& adc_handle = *peripheral.handle;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	663b      	str	r3, [r7, #96]	; 0x60
	  InitData init_data = peripheral.init_data;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f103 0210 	add.w	r2, r3, #16
 80102fe:	f107 0310 	add.w	r3, r7, #16
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f7ff fdc4 	bl	800fe92 <_ZN3ADC8InitDataC1ERKS0_>

	  adc_handle.Instance = init_data.adc;
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801030e:	601a      	str	r2, [r3, #0]
	  adc_handle.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8010310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010312:	2200      	movs	r2, #0
 8010314:	605a      	str	r2, [r3, #4]
	  adc_handle.Init.Resolution = init_data.resolution;
 8010316:	697a      	ldr	r2, [r7, #20]
 8010318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801031a:	609a      	str	r2, [r3, #8]
	  adc_handle.Init.ScanConvMode = ADC_SCAN_ENABLE;
 801031c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801031e:	2201      	movs	r2, #1
 8010320:	611a      	str	r2, [r3, #16]
	  adc_handle.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8010322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010324:	2208      	movs	r2, #8
 8010326:	615a      	str	r2, [r3, #20]
	  adc_handle.Init.LowPowerAutoWait = DISABLE;
 8010328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801032a:	2200      	movs	r2, #0
 801032c:	761a      	strb	r2, [r3, #24]
	  adc_handle.Init.ContinuousConvMode = DISABLE;
 801032e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010330:	2200      	movs	r2, #0
 8010332:	765a      	strb	r2, [r3, #25]
	  adc_handle.Init.NbrOfConversion = init_data.channels.size();
 8010334:	f107 0310 	add.w	r3, r7, #16
 8010338:	330c      	adds	r3, #12
 801033a:	4618      	mov	r0, r3
 801033c:	f000 f8d5 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8010340:	4602      	mov	r2, r0
 8010342:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010344:	61da      	str	r2, [r3, #28]
	  adc_handle.Init.DiscontinuousConvMode = DISABLE;
 8010346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2020 	strb.w	r2, [r3, #32]
	  adc_handle.Init.ExternalTrigConv = init_data.external_trigger;
 801034e:	69ba      	ldr	r2, [r7, #24]
 8010350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010352:	629a      	str	r2, [r3, #40]	; 0x28
	  adc_handle.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8010354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801035a:	62da      	str	r2, [r3, #44]	; 0x2c
	  adc_handle.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 801035c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801035e:	2203      	movs	r2, #3
 8010360:	631a      	str	r2, [r3, #48]	; 0x30
	  adc_handle.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8010362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010364:	2200      	movs	r2, #0
 8010366:	63da      	str	r2, [r3, #60]	; 0x3c
	  adc_handle.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8010368:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801036a:	2200      	movs	r2, #0
 801036c:	641a      	str	r2, [r3, #64]	; 0x40
	  adc_handle.Init.OversamplingMode = DISABLE;
 801036e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010370:	2200      	movs	r2, #0
 8010372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	  if (HAL_ADC_Init(&adc_handle) != HAL_OK) {
 8010376:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010378:	f7f3 f95a 	bl	8003630 <HAL_ADC_Init>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
	    //TODO: Error handler
	  }

	  multimode.Mode = ADC_MODE_INDEPENDENT;
 8010380:	2300      	movs	r3, #0
 8010382:	64fb      	str	r3, [r7, #76]	; 0x4c
	  if (HAL_ADCEx_MultiModeConfigChannel(&adc_handle, &multimode) != HAL_OK) {
 8010384:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010388:	4619      	mov	r1, r3
 801038a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801038c:	f7f4 fe24 	bl	8004fd8 <HAL_ADCEx_MultiModeConfigChannel>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
	    //TODO: Error handler
	  }


	  uint8_t counter = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  for(uint32_t channel : peripheral.init_data.channels) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	331c      	adds	r3, #28
 801039e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80103a2:	f000 fb63 	bl	8010a6c <_ZNSt6vectorImSaImEE5beginEv>
 80103a6:	4603      	mov	r3, r0
 80103a8:	60fb      	str	r3, [r7, #12]
 80103aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80103ac:	f000 fb6e 	bl	8010a8c <_ZNSt6vectorImSaImEE3endEv>
 80103b0:	4603      	mov	r3, r0
 80103b2:	60bb      	str	r3, [r7, #8]
 80103b4:	f107 0208 	add.w	r2, r7, #8
 80103b8:	f107 030c 	add.w	r3, r7, #12
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7ff ff51 	bl	8010266 <_ZN9__gnu_cxxeqIPmS1_St6vectorImSaImEEEEbRKNS_17__normal_iteratorIT_T1_EERKNS5_IT0_S7_EE>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f083 0301 	eor.w	r3, r3, #1
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d02e      	beq.n	801042e <_ZN3ADC4initERNS_10PeripheralE+0x15e>
 80103d0:	f107 030c 	add.w	r3, r7, #12
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7ff ff6e 	bl	80102b6 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEdeEv>
 80103da:	4603      	mov	r3, r0
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	65bb      	str	r3, [r7, #88]	; 0x58
		  sConfig.Channel = channel;
 80103e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103e2:	62bb      	str	r3, [r7, #40]	; 0x28
	  	  sConfig.Rank = ranks[counter];
 80103e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103e8:	4a15      	ldr	r2, [pc, #84]	; (8010440 <_ZN3ADC4initERNS_10PeripheralE+0x170>)
 80103ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80103f0:	2300      	movs	r3, #0
 80103f2:	633b      	str	r3, [r7, #48]	; 0x30
	  	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80103f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80103f8:	637b      	str	r3, [r7, #52]	; 0x34
	  	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80103fa:	2304      	movs	r3, #4
 80103fc:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  sConfig.Offset = 0;
 80103fe:	2300      	movs	r3, #0
 8010400:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  sConfig.OffsetSignedSaturation = DISABLE;
 8010402:	2300      	movs	r3, #0
 8010404:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	  	  if (HAL_ADC_ConfigChannel(&adc_handle, &sConfig) != HAL_OK) {
 8010408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801040c:	4619      	mov	r1, r3
 801040e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010410:	f7f3 fe54 	bl	80040bc <HAL_ADC_ConfigChannel>
 8010414:	4603      	mov	r3, r0
 8010416:	2b00      	cmp	r3, #0
	  		  //TODO: Error handler
	  	  }
	  	  counter++;
 8010418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801041c:	3301      	adds	r3, #1
 801041e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	  for(uint32_t channel : peripheral.init_data.channels) {
 8010422:	f107 030c 	add.w	r3, r7, #12
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff ff35 	bl	8010296 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEppEv>
 801042c:	e7c2      	b.n	80103b4 <_ZN3ADC4initERNS_10PeripheralE+0xe4>
	  InitData init_data = peripheral.init_data;
 801042e:	f107 0310 	add.w	r3, r7, #16
 8010432:	4618      	mov	r0, r3
 8010434:	f7ff fd4c 	bl	800fed0 <_ZN3ADC8InitDataD1Ev>
	  }
}
 8010438:	bf00      	nop
 801043a:	3768      	adds	r7, #104	; 0x68
 801043c:	46bd      	mov	sp, r7
 801043e:	bd80      	pop	{r7, pc}
 8010440:	24000010 	.word	0x24000010

08010444 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	429a      	cmp	r2, r3
 8010458:	d201      	bcs.n	801045e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	e000      	b.n	8010460 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 801045e:	687b      	ldr	r3, [r7, #4]
    }
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <_ZNSaImED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010482:	b580      	push	{r7, lr}
 8010484:	b082      	sub	sp, #8
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	689a      	ldr	r2, [r3, #8]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801049a:	461a      	mov	r2, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fb1a 	bl	8010ad6 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7ff fc76 	bl	800fd96 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <_ZNSt6vectorImSaImEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80104b4:	b5b0      	push	{r4, r5, r7, lr}
 80104b6:	b082      	sub	sp, #8
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681c      	ldr	r4, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	4618      	mov	r0, r3
 80104c8:	f000 fb18 	bl	8010afc <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80104cc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80104ce:	461a      	mov	r2, r3
 80104d0:	4629      	mov	r1, r5
 80104d2:	4620      	mov	r0, r4
 80104d4:	f000 fb1d 	bl	8010b12 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      }
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff ffd1 	bl	8010482 <_ZNSt12_Vector_baseImSaImEED1Ev>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	4618      	mov	r0, r3
 80104e4:	3708      	adds	r7, #8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bdb0      	pop	{r4, r5, r7, pc}

080104ea <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80104ea:	b480      	push	{r7}
 80104ec:	b083      	sub	sp, #12
 80104ee:	af00      	add	r7, sp, #0
 80104f0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	685a      	ldr	r2, [r3, #4]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	1ad3      	subs	r3, r2, r3
 80104fc:	109b      	asrs	r3, r3, #2
 80104fe:	4618      	mov	r0, r3
 8010500:	370c      	adds	r7, #12
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <_ZNSaIhEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801050a:	b580      	push	{r7, lr}
 801050c:	b082      	sub	sp, #8
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 fb0b 	bl	8010b2e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	4618      	mov	r0, r3
 801051c:	3708      	adds	r7, #8
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <_ZNSaIhED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010522:	b480      	push	{r7}
 8010524:	b083      	sub	sp, #12
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4618      	mov	r0, r3
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  @param  __al  An allocator object.
       *
       *  Create a %forward_list consisting of copies of the elements
       *  in the initializer_list @a __il.  This is linear in __il.size().
       */
      forward_list(std::initializer_list<_Tp> __il,
 8010538:	b590      	push	{r4, r7, lr}
 801053a:	b087      	sub	sp, #28
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	1d38      	adds	r0, r7, #4
 8010542:	e880 0006 	stmia.w	r0, {r1, r2}
 8010546:	603b      	str	r3, [r7, #0]
		   const _Alloc& __al = _Alloc())
      : _Base(_Node_alloc_type(__al))
 8010548:	68fc      	ldr	r4, [r7, #12]
 801054a:	f107 0314 	add.w	r3, r7, #20
 801054e:	6839      	ldr	r1, [r7, #0]
 8010550:	4618      	mov	r0, r3
 8010552:	f000 faf7 	bl	8010b44 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>
 8010556:	f107 0314 	add.w	r3, r7, #20
 801055a:	4619      	mov	r1, r3
 801055c:	4620      	mov	r0, r4
 801055e:	f000 fb15 	bl	8010b8c <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>
 8010562:	f107 0314 	add.w	r3, r7, #20
 8010566:	4618      	mov	r0, r3
 8010568:	f000 faf9 	bl	8010b5e <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
      { _M_range_initialize(__il.begin(), __il.end()); }
 801056c:	1d3b      	adds	r3, r7, #4
 801056e:	4618      	mov	r0, r3
 8010570:	f000 fb32 	bl	8010bd8 <_ZNKSt16initializer_listIhE5beginEv>
 8010574:	4604      	mov	r4, r0
 8010576:	1d3b      	adds	r3, r7, #4
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fb39 	bl	8010bf0 <_ZNKSt16initializer_listIhE3endEv>
 801057e:	4603      	mov	r3, r0
 8010580:	461a      	mov	r2, r3
 8010582:	4621      	mov	r1, r4
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f000 fb44 	bl	8010c12 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4618      	mov	r0, r3
 801058e:	371c      	adds	r7, #28
 8010590:	46bd      	mov	sp, r7
 8010592:	bd90      	pop	{r4, r7, pc}

08010594 <_ZNSt12forward_listIhSaIhEED1Ev>:

      /**
       *  @brief  The forward_list dtor.
       */
      ~forward_list() noexcept
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
      { }
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 fb07 	bl	8010bb2 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b082      	sub	sp, #8
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fb4a 	bl	8010c50 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fb52 	bl	8010c68 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff fbbf 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	3708      	adds	r7, #8
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEED1Ev>:
 80105d8:	b480      	push	{r7}
 80105da:	b083      	sub	sp, #12
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	4618      	mov	r0, r3
 80105e4:	370c      	adds	r7, #12
 80105e6:	46bd      	mov	sp, r7
 80105e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ec:	4770      	bx	lr

080105ee <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80105ee:	b580      	push	{r7, lr}
 80105f0:	b082      	sub	sp, #8
 80105f2:	af00      	add	r7, sp, #0
 80105f4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fb60 	bl	8010cbc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 80105fc:	4603      	mov	r3, r0
 80105fe:	4619      	mov	r1, r3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 fb3c 	bl	8010c7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff fbf4 	bl	800fdf6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <_ZNSt6vectorImSaImEEC1ERKS1_>:
      vector(const vector& __x)
 8010618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801061a:	b085      	sub	sp, #20
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8010622:	687c      	ldr	r4, [r7, #4]
 8010624:	6838      	ldr	r0, [r7, #0]
 8010626:	f7ff ff60 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 801062a:	4605      	mov	r5, r0
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	4618      	mov	r0, r3
 8010630:	f000 fb5e 	bl	8010cf0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8010634:	4602      	mov	r2, r0
 8010636:	f107 030c 	add.w	r3, r7, #12
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f000 fb49 	bl	8010cd4 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>
 8010642:	f107 030c 	add.w	r3, r7, #12
 8010646:	461a      	mov	r2, r3
 8010648:	4629      	mov	r1, r5
 801064a:	4620      	mov	r0, r4
 801064c:	f000 fb5b 	bl	8010d06 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>
 8010650:	f107 030c 	add.w	r3, r7, #12
 8010654:	4618      	mov	r0, r3
 8010656:	f7ff ff09 	bl	801046c <_ZNSaImED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 801065a:	6838      	ldr	r0, [r7, #0]
 801065c:	f000 fb67 	bl	8010d2e <_ZNKSt6vectorImSaImEE5beginEv>
 8010660:	4605      	mov	r5, r0
 8010662:	6838      	ldr	r0, [r7, #0]
 8010664:	f000 fb73 	bl	8010d4e <_ZNKSt6vectorImSaImEE3endEv>
 8010668:	4606      	mov	r6, r0
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	4618      	mov	r0, r3
 8010672:	f000 fa43 	bl	8010afc <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8010676:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8010678:	4622      	mov	r2, r4
 801067a:	4631      	mov	r1, r6
 801067c:	4628      	mov	r0, r5
 801067e:	f000 fb77 	bl	8010d70 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>
 8010682:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	605a      	str	r2, [r3, #4]
      }
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	4618      	mov	r0, r3
 801068c:	3714      	adds	r7, #20
 801068e:	46bd      	mov	sp, r7
 8010690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010692 <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8containsERS6_>:
       *  @brief  Finds whether an element with the given key exists.
       *  @param  __x  Key of (key, value) pairs to be located.
       *  @return  True if there is an element with the specified key.
       */
      bool
      contains(const key_type& __x) const
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	4618      	mov	r0, r3
 80106a2:	f000 fb76 	bl	8010d92 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>
 80106a6:	4603      	mov	r3, r0
 80106a8:	60bb      	str	r3, [r7, #8]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 fbac 	bl	8010e0a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80106b2:	4603      	mov	r3, r0
 80106b4:	60fb      	str	r3, [r7, #12]
 80106b6:	f107 020c 	add.w	r2, r7, #12
 80106ba:	f107 0308 	add.w	r3, r7, #8
 80106be:	4611      	mov	r1, r2
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 fbb3 	bl	8010e2c <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 80106c6:	4603      	mov	r3, r0
 80106c8:	f083 0301 	eor.w	r3, r3, #1
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 80106d6:	b480      	push	{r7}
 80106d8:	b083      	sub	sp, #12
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	370c      	adds	r7, #12
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <_ZNSt22_Optional_payload_baseIhEC1Ev>:
      _Optional_payload_base() = default;
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ff ffed 	bl	80106d6 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1Ev>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	705a      	strb	r2, [r3, #1]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4618      	mov	r0, r3
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	f7ff ffe8 	bl	80106ec <_ZNSt22_Optional_payload_baseIhEC1Ev>
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	4618      	mov	r0, r3
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}

08010726 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8010726:	b580      	push	{r7, lr}
 8010728:	b082      	sub	sp, #8
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff ffeb 	bl	801070c <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EEC1Ev>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	3708      	adds	r7, #8
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <_ZNSt8optionalIhEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 8010740:	b580      	push	{r7, lr}
 8010742:	b082      	sub	sp, #8
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
 8010748:	7039      	strb	r1, [r7, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4618      	mov	r0, r3
 801074e:	f7ff ffea 	bl	8010726 <_ZNSt14_Optional_baseIhLb1ELb1EEC1Ev>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <_ZNSt12forward_listIhSaIhEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %forward_list.
       */
      reference
      front()
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
      {
	_Node* __front = static_cast<_Node*>(this->_M_impl._M_head._M_next);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	60fb      	str	r3, [r7, #12]
	return *__front->_M_valptr();
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f000 fb72 	bl	8010e54 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8010770:	4603      	mov	r3, r0
      }
 8010772:	4618      	mov	r0, r3
 8010774:	3710      	adds	r7, #16
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_>:
      operator[](const key_type& __k)
 801077c:	b590      	push	{r4, r7, lr}
 801077e:	b08b      	sub	sp, #44	; 0x2c
 8010780:	af02      	add	r7, sp, #8
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fb71 	bl	8010e70 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>
 801078e:	4603      	mov	r3, r0
 8010790:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f000 fb7b 	bl	8010e8e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>
 8010798:	4603      	mov	r3, r0
 801079a:	60fb      	str	r3, [r7, #12]
 801079c:	f107 020c 	add.w	r2, r7, #12
 80107a0:	f107 0308 	add.w	r3, r7, #8
 80107a4:	4611      	mov	r1, r2
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 fb7e 	bl	8010ea8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d112      	bne.n	80107d8 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x5c>
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 fb8c 	bl	8010ed0 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>
 80107b8:	f107 0308 	add.w	r3, r7, #8
 80107bc:	4618      	mov	r0, r3
 80107be:	f000 fb94 	bl	8010eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 80107c2:	4603      	mov	r3, r0
 80107c4:	461a      	mov	r2, r3
 80107c6:	f107 0310 	add.w	r3, r7, #16
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 fb9a 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d001      	beq.n	80107dc <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x60>
 80107d8:	2301      	movs	r3, #1
 80107da:	e000      	b.n	80107de <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x62>
 80107dc:	2300      	movs	r3, #0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d01b      	beq.n	801081a <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80107e2:	687c      	ldr	r4, [r7, #4]
 80107e4:	f107 0208 	add.w	r2, r7, #8
 80107e8:	f107 0314 	add.w	r3, r7, #20
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f000 fbad 	bl	8010f4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 80107f4:	f107 0318 	add.w	r3, r7, #24
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	4618      	mov	r0, r3
 80107fc:	f000 fb98 	bl	8010f30 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010800:	f107 0218 	add.w	r2, r7, #24
 8010804:	f107 031c 	add.w	r3, r7, #28
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	4613      	mov	r3, r2
 801080c:	4a08      	ldr	r2, [pc, #32]	; (8010830 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEixERS5_+0xb4>)
 801080e:	6979      	ldr	r1, [r7, #20]
 8010810:	4620      	mov	r0, r4
 8010812:	f000 fbac 	bl	8010f6e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8010816:	4603      	mov	r3, r0
 8010818:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	4618      	mov	r0, r3
 8010820:	f000 fb63 	bl	8010eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>
 8010824:	4603      	mov	r3, r0
 8010826:	3304      	adds	r3, #4
      }
 8010828:	4618      	mov	r0, r3
 801082a:	3724      	adds	r7, #36	; 0x24
 801082c:	46bd      	mov	sp, r7
 801082e:	bd90      	pop	{r4, r7, pc}
 8010830:	0801ac50 	.word	0x0801ac50

08010834 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_>:
      operator[](const key_type& __k)
 8010834:	b590      	push	{r4, r7, lr}
 8010836:	b08b      	sub	sp, #44	; 0x2c
 8010838:	af02      	add	r7, sp, #8
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fbd2 	bl	8010fea <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>
 8010846:	4603      	mov	r3, r0
 8010848:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fbdc 	bl	8011008 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>
 8010850:	4603      	mov	r3, r0
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	f107 020c 	add.w	r2, r7, #12
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	4611      	mov	r1, r2
 801085e:	4618      	mov	r0, r3
 8010860:	f000 fbdf 	bl	8011022 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d112      	bne.n	8010890 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x5c>
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fbed 	bl	801104a <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>
 8010870:	f107 0308 	add.w	r3, r7, #8
 8010874:	4618      	mov	r0, r3
 8010876:	f000 fbf5 	bl	8011064 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 801087a:	4603      	mov	r3, r0
 801087c:	461a      	mov	r2, r3
 801087e:	f107 0310 	add.w	r3, r7, #16
 8010882:	6839      	ldr	r1, [r7, #0]
 8010884:	4618      	mov	r0, r3
 8010886:	f000 fbfb 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d001      	beq.n	8010894 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x60>
 8010890:	2301      	movs	r3, #1
 8010892:	e000      	b.n	8010896 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x62>
 8010894:	2300      	movs	r3, #0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d01b      	beq.n	80108d2 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 801089a:	687c      	ldr	r4, [r7, #4]
 801089c:	f107 0208 	add.w	r2, r7, #8
 80108a0:	f107 0314 	add.w	r3, r7, #20
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fc08 	bl	80110bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80108ac:	f107 0318 	add.w	r3, r7, #24
 80108b0:	6839      	ldr	r1, [r7, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 fbf3 	bl	801109e <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80108b8:	f107 0218 	add.w	r2, r7, #24
 80108bc:	f107 031c 	add.w	r3, r7, #28
 80108c0:	9300      	str	r3, [sp, #0]
 80108c2:	4613      	mov	r3, r2
 80108c4:	4a08      	ldr	r2, [pc, #32]	; (80108e8 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEixERS6_+0xb4>)
 80108c6:	6979      	ldr	r1, [r7, #20]
 80108c8:	4620      	mov	r0, r4
 80108ca:	f000 fc07 	bl	80110dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 80108ce:	4603      	mov	r3, r0
 80108d0:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80108d2:	f107 0308 	add.w	r3, r7, #8
 80108d6:	4618      	mov	r0, r3
 80108d8:	f000 fbc4 	bl	8011064 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>
 80108dc:	4603      	mov	r3, r0
 80108de:	3308      	adds	r3, #8
      }
 80108e0:	4618      	mov	r0, r3
 80108e2:	3724      	adds	r7, #36	; 0x24
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd90      	pop	{r4, r7, pc}
 80108e8:	0801ac50 	.word	0x0801ac50

080108ec <_ZNSt12forward_listIhSaIhEE9pop_frontEv>:
       *  Note that no data is returned, and if the first element's data
       *  is needed, it should be retrieved before pop_front() is
       *  called.
       */
      void
      pop_front()
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
      { this->_M_erase_after(&this->_M_impl._M_head); }
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	687a      	ldr	r2, [r7, #4]
 80108f8:	4611      	mov	r1, r2
 80108fa:	4618      	mov	r0, r3
 80108fc:	f000 fc2c 	bl	8011158 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>
 8010900:	bf00      	nop
 8010902:	3708      	adds	r7, #8
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <_ZNSt6vectorImSaImEE9push_backERKm>:
      push_back(const value_type& __x)
 8010908:	b580      	push	{r7, lr}
 801090a:	b082      	sub	sp, #8
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685a      	ldr	r2, [r3, #4]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	689b      	ldr	r3, [r3, #8]
 801091a:	429a      	cmp	r2, r3
 801091c:	d00c      	beq.n	8010938 <_ZNSt6vectorImSaImEE9push_backERKm+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	4619      	mov	r1, r3
 8010928:	f000 fc4d 	bl	80111c6 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	1d1a      	adds	r2, r3, #4
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	605a      	str	r2, [r3, #4]
      }
 8010936:	e008      	b.n	801094a <_ZNSt6vectorImSaImEE9push_backERKm+0x42>
	  _M_realloc_insert(end(), __x);
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 f8a7 	bl	8010a8c <_ZNSt6vectorImSaImEE3endEv>
 801093e:	4603      	mov	r3, r0
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 fc51 	bl	80111ec <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <_ZNSt8optionalIhEC1IhLb1EEEOT_>:
	optional(_Up&& __t)
 8010952:	b5b0      	push	{r4, r5, r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801095c:	687c      	ldr	r4, [r7, #4]
 801095e:	6838      	ldr	r0, [r7, #0]
 8010960:	f000 fcc0 	bl	80112e4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8010964:	4603      	mov	r3, r0
 8010966:	461a      	mov	r2, r3
 8010968:	4629      	mov	r1, r5
 801096a:	4620      	mov	r0, r4
 801096c:	f000 fcd6 	bl	801131c <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4618      	mov	r0, r3
 8010974:	3708      	adds	r7, #8
 8010976:	46bd      	mov	sp, r7
 8010978:	bdb0      	pop	{r4, r5, r7, pc}

0801097a <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8containsERS5_>:
      contains(const key_type& __x) const
 801097a:	b580      	push	{r7, lr}
 801097c:	b084      	sub	sp, #16
 801097e:	af00      	add	r7, sp, #0
 8010980:	6078      	str	r0, [r7, #4]
 8010982:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6839      	ldr	r1, [r7, #0]
 8010988:	4618      	mov	r0, r3
 801098a:	f000 fcdc 	bl	8011346 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>
 801098e:	4603      	mov	r3, r0
 8010990:	60bb      	str	r3, [r7, #8]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4618      	mov	r0, r3
 8010996:	f000 fd12 	bl	80113be <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 801099a:	4603      	mov	r3, r0
 801099c:	60fb      	str	r3, [r7, #12]
 801099e:	f107 020c 	add.w	r2, r7, #12
 80109a2:	f107 0308 	add.w	r3, r7, #8
 80109a6:	4611      	mov	r1, r2
 80109a8:	4618      	mov	r0, r3
 80109aa:	f000 fd19 	bl	80113e0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 80109ae:	4603      	mov	r3, r0
 80109b0:	f083 0301 	eor.w	r3, r3, #1
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	4618      	mov	r0, r3
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>:
	  constexpr _Storage() noexcept : _M_empty() { }
 80109be:	b480      	push	{r7}
 80109c0:	b083      	sub	sp, #12
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	4618      	mov	r0, r3
 80109ca:	370c      	adds	r7, #12
 80109cc:	46bd      	mov	sp, r7
 80109ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d2:	4770      	bx	lr

080109d4 <_ZNSt22_Optional_payload_baseIfEC1Ev>:
      _Optional_payload_base() = default;
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff ffed 	bl	80109be <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1Ev>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	711a      	strb	r2, [r3, #4]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4618      	mov	r0, r3
 80109ee:	3708      	adds	r7, #8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>:
      _Optional_payload() = default;
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f7ff ffe8 	bl	80109d4 <_ZNSt22_Optional_payload_baseIfEC1Ev>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	4618      	mov	r0, r3
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>:
      constexpr _Optional_base() = default;
 8010a0e:	b580      	push	{r7, lr}
 8010a10:	b082      	sub	sp, #8
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7ff ffeb 	bl	80109f4 <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EEC1Ev>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	3708      	adds	r7, #8
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <_ZNSt8optionalIfEC1ESt9nullopt_t>:
      constexpr optional(nullopt_t) noexcept { }
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	7039      	strb	r1, [r7, #0]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7ff ffea 	bl	8010a0e <_ZNSt14_Optional_baseIfLb1ELb1EEC1Ev>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <_ZNSt8optionalIfEC1IdLb1EEEOT_>:
	optional(_Up&& __t)
 8010a44:	b5b0      	push	{r4, r5, r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
 8010a4c:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8010a4e:	687c      	ldr	r4, [r7, #4]
 8010a50:	6838      	ldr	r0, [r7, #0]
 8010a52:	f000 fcd9 	bl	8011408 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8010a56:	4603      	mov	r3, r0
 8010a58:	461a      	mov	r2, r3
 8010a5a:	4629      	mov	r1, r5
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	f000 fcef 	bl	8011440 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4618      	mov	r0, r3
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bdb0      	pop	{r4, r5, r7, pc}

08010a6c <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b084      	sub	sp, #16
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010a74:	687a      	ldr	r2, [r7, #4]
 8010a76:	f107 030c 	add.w	r3, r7, #12
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f000 fcf4 	bl	801146a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	4618      	mov	r0, r3
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	1d1a      	adds	r2, r3, #4
 8010a98:	f107 030c 	add.w	r3, r7, #12
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f000 fce3 	bl	801146a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3710      	adds	r7, #16
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010aae:	b480      	push	{r7}
 8010ab0:	b083      	sub	sp, #12
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	605a      	str	r2, [r3, #4]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	609a      	str	r2, [r3, #8]
	{ }
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b084      	sub	sp, #16
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	60f8      	str	r0, [r7, #12]
 8010ade:	60b9      	str	r1, [r7, #8]
 8010ae0:	607a      	str	r2, [r7, #4]
	if (__p)
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d005      	beq.n	8010af4 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	68b9      	ldr	r1, [r7, #8]
 8010aee:	4618      	mov	r0, r3
 8010af0:	f000 fccb 	bl	801148a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8010af4:	bf00      	nop
 8010af6:	3710      	adds	r7, #16
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010afc:	b480      	push	{r7}
 8010afe:	b083      	sub	sp, #12
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	370c      	adds	r7, #12
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr

08010b12 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010b12:	b580      	push	{r7, lr}
 8010b14:	b084      	sub	sp, #16
 8010b16:	af00      	add	r7, sp, #0
 8010b18:	60f8      	str	r0, [r7, #12]
 8010b1a:	60b9      	str	r1, [r7, #8]
 8010b1c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010b1e:	68b9      	ldr	r1, [r7, #8]
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f000 fcd1 	bl	80114c8 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8010b26:	bf00      	nop
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8010b2e:	b480      	push	{r7}
 8010b30:	b083      	sub	sp, #12
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4618      	mov	r0, r3
 8010b3a:	370c      	adds	r7, #12
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr

08010b44 <_ZNSaISt14_Fwd_list_nodeIhEEC1IhEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fcd0 	bl	80114f4 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010b5e:	b480      	push	{r7}
 8010b60:	b083      	sub	sp, #12
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr

08010b74 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>:
      struct _Fwd_list_impl
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7ff ffee 	bl	8010b5e <_ZNSaISt14_Fwd_list_nodeIhEED1Ev>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <_ZNSt14_Fwd_list_baseIhSaIhEEC1EOSaISt14_Fwd_list_nodeIhEE>:
      _Fwd_list_base(_Node_alloc_type&& __a)
 8010b8c:	b590      	push	{r4, r7, lr}
 8010b8e:	b083      	sub	sp, #12
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
      : _M_impl(std::move(__a)) { }
 8010b96:	687c      	ldr	r4, [r7, #4]
 8010b98:	6838      	ldr	r0, [r7, #0]
 8010b9a:	f000 fcb6 	bl	801150a <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	f000 fcca 	bl	801153c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd90      	pop	{r4, r7, pc}

08010bb2 <_ZNSt14_Fwd_list_baseIhSaIhEED1Ev>:
      ~_Fwd_list_base()
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b082      	sub	sp, #8
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
      { _M_erase_after(&_M_impl._M_head, nullptr); }
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fcd4 	bl	801156e <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff ffd3 	bl	8010b74 <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implD1Ev>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <_ZNKSt16initializer_listIhE5beginEv>:
      begin() const noexcept { return _M_array; }
 8010bd8:	b480      	push	{r7}
 8010bda:	b083      	sub	sp, #12
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	4618      	mov	r0, r3
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <_ZNKSt16initializer_listIhE3endEv>:
      end() const noexcept { return begin() + size(); }
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b083      	sub	sp, #12
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7ff ffed 	bl	8010bd8 <_ZNKSt16initializer_listIhE5beginEv>
 8010bfe:	4604      	mov	r4, r0
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 fcdf 	bl	80115c4 <_ZNKSt16initializer_listIhE4sizeEv>
 8010c06:	4603      	mov	r3, r0
 8010c08:	4423      	add	r3, r4
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd90      	pop	{r4, r7, pc}

08010c12 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_>:

  // Called by the range constructor to implement [23.3.4.2]/9
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      forward_list<_Tp, _Alloc>::
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b086      	sub	sp, #24
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	60f8      	str	r0, [r7, #12]
 8010c1a:	60b9      	str	r1, [r7, #8]
 8010c1c:	607a      	str	r2, [r7, #4]
      _M_range_initialize(_InputIterator __first, _InputIterator __last)
      {
	_Node_base* __to = &this->_M_impl._M_head;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d00e      	beq.n	8010c48 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x36>
	  {
	    __to->_M_next = this->_M_create_node(*__first);
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	68b9      	ldr	r1, [r7, #8]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 fce1 	bl	80115f6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>
 8010c34:	4602      	mov	r2, r0
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	601a      	str	r2, [r3, #0]
	    __to = __to->_M_next;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	617b      	str	r3, [r7, #20]
	for (; __first != __last; ++__first)
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	3301      	adds	r3, #1
 8010c44:	60bb      	str	r3, [r7, #8]
 8010c46:	e7ec      	b.n	8010c22 <_ZNSt12forward_listIhSaIhEE19_M_range_initializeIPKhEEvT_S5_+0x10>
	  }
      }
 8010c48:	bf00      	nop
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f000 fcf4 	bl	8011646 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	4618      	mov	r0, r3
 8010c62:	3708      	adds	r7, #8
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>:
      _Rb_tree_key_compare()
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
      { }
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	4618      	mov	r0, r3
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b084      	sub	sp, #16
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d012      	beq.n	8010cb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8010c8e:	6838      	ldr	r0, [r7, #0]
 8010c90:	f000 fce4 	bl	801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8010c94:	4603      	mov	r3, r0
 8010c96:	4619      	mov	r1, r3
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f7ff fff0 	bl	8010c7e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8010c9e:	6838      	ldr	r0, [r7, #0]
 8010ca0:	f000 fce8 	bl	8011674 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8010ca4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 fcef 	bl	801168c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8010cb2:	e7e9      	b.n	8010c88 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
	}
    }
 8010cb4:	bf00      	nop
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	689b      	ldr	r3, [r3, #8]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	370c      	adds	r7, #12
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd2:	4770      	bx	lr

08010cd4 <_ZN9__gnu_cxx14__alloc_traitsISaImEmE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6839      	ldr	r1, [r7, #0]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f000 fce3 	bl	80116ae <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8010cf0:	b480      	push	{r7}
 8010cf2:	b083      	sub	sp, #12
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <_ZNSt12_Vector_baseImSaImEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b084      	sub	sp, #16
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	60f8      	str	r0, [r7, #12]
 8010d0e:	60b9      	str	r1, [r7, #8]
 8010d10:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6879      	ldr	r1, [r7, #4]
 8010d16:	4618      	mov	r0, r3
 8010d18:	f000 fcd6 	bl	80116c8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8010d1c:	68b9      	ldr	r1, [r7, #8]
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f000 fce4 	bl	80116ec <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}

08010d2e <_ZNKSt6vectorImSaImEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8010d2e:	b580      	push	{r7, lr}
 8010d30:	b084      	sub	sp, #16
 8010d32:	af00      	add	r7, sp, #0
 8010d34:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	f107 030c 	add.w	r3, r7, #12
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f000 fcef 	bl	8011722 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <_ZNKSt6vectorImSaImEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b084      	sub	sp, #16
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	1d1a      	adds	r2, r3, #4
 8010d5a:	f107 030c 	add.w	r3, r7, #12
 8010d5e:	4611      	mov	r1, r2
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 fcde 	bl	8011722 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}

08010d70 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmmET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f000 fcdd 	bl	8011742 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3710      	adds	r7, #16
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010d92:	b590      	push	{r4, r7, lr}
 8010d94:	b085      	sub	sp, #20
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fce2 	bl	8011766 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8010da2:	4604      	mov	r4, r0
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fcea 	bl	801177e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8010daa:	4602      	mov	r2, r0
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	4621      	mov	r1, r4
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fcf0 	bl	8011796 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>
 8010db6:	4603      	mov	r3, r0
 8010db8:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 f825 	bl	8010e0a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	f107 020c 	add.w	r2, r7, #12
 8010dc8:	f107 0308 	add.w	r3, r7, #8
 8010dcc:	4611      	mov	r1, r2
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f82c 	bl	8010e2c <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8010dd4:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d10d      	bne.n	8010df6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x64>
	      || _M_impl._M_key_compare(__k,
 8010dda:	687c      	ldr	r4, [r7, #4]
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f000 fd0a 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010de4:	4603      	mov	r3, r0
 8010de6:	461a      	mov	r2, r3
 8010de8:	6839      	ldr	r1, [r7, #0]
 8010dea:	4620      	mov	r0, r4
 8010dec:	f000 f948 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d004      	beq.n	8010e00 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 f807 	bl	8010e0a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	e000      	b.n	8010e02 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4findERS2_+0x70>
 8010e00:	68bb      	ldr	r3, [r7, #8]
    }
 8010e02:	4618      	mov	r0, r3
 8010e04:	3714      	adds	r7, #20
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd90      	pop	{r4, r7, pc}

08010e0a <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b084      	sub	sp, #16
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	1d1a      	adds	r2, r3, #4
 8010e16:	f107 030c 	add.w	r3, r7, #12
 8010e1a:	4611      	mov	r1, r2
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f000 fcf7 	bl	8011810 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	4618      	mov	r0, r3
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	bf0c      	ite	eq
 8010e42:	2301      	moveq	r3, #1
 8010e44:	2300      	movne	r3, #0
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>:
      _M_valptr() noexcept
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	3304      	adds	r3, #4
 8010e60:	4618      	mov	r0, r3
 8010e62:	f000 fce4 	bl	801182e <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>
 8010e66:	4603      	mov	r3, r0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE11lower_boundERS5_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6839      	ldr	r1, [r7, #0]
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f000 fce1 	bl	8011846 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>
 8010e84:	4603      	mov	r3, r0
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f000 fceb 	bl	8011874 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3708      	adds	r7, #8
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}

08010ea8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681a      	ldr	r2, [r3, #0]
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	bf0c      	ite	eq
 8010ebe:	2301      	moveq	r3, #1
 8010ec0:	2300      	movne	r3, #0
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr

08010ed0 <_ZNKSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEE8key_compEv>:
      key_comp() const
 8010ed0:	b590      	push	{r4, r7, lr}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	4618      	mov	r0, r3
 8010edc:	f000 fcdb 	bl	8011896 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>
 8010ee0:	bf00      	nop
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	370c      	adds	r7, #12
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd90      	pop	{r4, r7, pc}

08010eea <_ZNKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010eea:	b580      	push	{r7, lr}
 8010eec:	b082      	sub	sp, #8
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f000 fcd8 	bl	80118ac <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8010efc:	4603      	mov	r3, r0
 8010efe:	4618      	mov	r0, r3
 8010f00:	3708      	adds	r7, #8
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <_ZNKSt4lessIhEclERKhS2_>:
  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8010f06:	b480      	push	{r7}
 8010f08:	b085      	sub	sp, #20
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	60f8      	str	r0, [r7, #12]
 8010f0e:	60b9      	str	r1, [r7, #8]
 8010f10:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	781a      	ldrb	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	bf34      	ite	cc
 8010f1e:	2301      	movcc	r3, #1
 8010f20:	2300      	movcs	r3, #0
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	4618      	mov	r0, r3
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2e:	4770      	bx	lr

08010f30 <_ZNSt5tupleIJRKhEEC1ILb1ELb1EEES1_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f000 fcc2 	bl	80118c8 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}

08010f4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8010f4e:	b480      	push	{r7}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	601a      	str	r2, [r3, #0]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	4618      	mov	r0, r3
 8010f64:	370c      	adds	r7, #12
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010f6e:	b5b0      	push	{r4, r5, r7, lr}
 8010f70:	b088      	sub	sp, #32
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 fcb2 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010f82:	4604      	mov	r4, r0
 8010f84:	6838      	ldr	r0, [r7, #0]
 8010f86:	f000 fcb9 	bl	80118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f8e:	f000 fcc0 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010f92:	4603      	mov	r3, r0
 8010f94:	462a      	mov	r2, r5
 8010f96:	4621      	mov	r1, r4
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 fcc5 	bl	8011928 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8010f9e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010fa0:	69f8      	ldr	r0, [r7, #28]
 8010fa2:	f000 fe07 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	f107 0010 	add.w	r0, r7, #16
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	68f9      	ldr	r1, [r7, #12]
 8010fb0:	f000 fcdd 	bl	801196e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d007      	beq.n	8010fca <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010fba:	6939      	ldr	r1, [r7, #16]
 8010fbc:	697a      	ldr	r2, [r7, #20]
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	68f8      	ldr	r0, [r7, #12]
 8010fc2:	f000 fe0a 	bl	8011bda <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	e00b      	b.n	8010fe2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010fca:	69f9      	ldr	r1, [r7, #28]
 8010fcc:	68f8      	ldr	r0, [r7, #12]
 8010fce:	f000 fb5d 	bl	801168c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8010fd2:	693a      	ldr	r2, [r7, #16]
 8010fd4:	f107 0318 	add.w	r3, r7, #24
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 fe3a 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8010fe0:	69bb      	ldr	r3, [r7, #24]
      }
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3720      	adds	r7, #32
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bdb0      	pop	{r4, r5, r7, pc}

08010fea <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE11lower_boundERS6_>:
      lower_bound(const key_type& __x)
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
 8010ff2:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6839      	ldr	r1, [r7, #0]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 fe3a 	bl	8011c72 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>
 8010ffe:	4603      	mov	r3, r0
 8011000:	4618      	mov	r0, r3
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011008:	b580      	push	{r7, lr}
 801100a:	b082      	sub	sp, #8
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4618      	mov	r0, r3
 8011014:	f000 fe44 	bl	8011ca0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8011018:	4603      	mov	r3, r0
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8011022:	b480      	push	{r7}
 8011024:	b083      	sub	sp, #12
 8011026:	af00      	add	r7, sp, #0
 8011028:	6078      	str	r0, [r7, #4]
 801102a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	429a      	cmp	r2, r3
 8011036:	bf0c      	ite	eq
 8011038:	2301      	moveq	r3, #1
 801103a:	2300      	movne	r3, #0
 801103c:	b2db      	uxtb	r3, r3
 801103e:	4618      	mov	r0, r3
 8011040:	370c      	adds	r7, #12
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <_ZNKSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEE8key_compEv>:
      key_comp() const
 801104a:	b590      	push	{r4, r7, lr}
 801104c:	b083      	sub	sp, #12
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	f000 fe34 	bl	8011cc2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>
 801105a:	bf00      	nop
 801105c:	4620      	mov	r0, r4
 801105e:	370c      	adds	r7, #12
 8011060:	46bd      	mov	sp, r7
 8011062:	bd90      	pop	{r4, r7, pc}

08011064 <_ZNKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4618      	mov	r0, r3
 8011072:	f000 fe31 	bl	8011cd8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8011076:	4603      	mov	r3, r0
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <_ZNKSt4lessI3PinEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 801108c:	6879      	ldr	r1, [r7, #4]
 801108e:	68b8      	ldr	r0, [r7, #8]
 8011090:	f7fe fe8d 	bl	800fdae <_ZNK3PinltERKS_>
 8011094:	4603      	mov	r3, r0
 8011096:	4618      	mov	r0, r3
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <_ZNSt5tupleIJRK3PinEEC1ILb1ELb1EEES2_>:
	tuple(const _Elements&... __elements)
 801109e:	b580      	push	{r7, lr}
 80110a0:	b082      	sub	sp, #8
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	4618      	mov	r0, r3
 80110ae:	f000 fe21 	bl	8011cf4 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	4618      	mov	r0, r3
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	601a      	str	r2, [r3, #0]
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	4618      	mov	r0, r3
 80110d2:	370c      	adds	r7, #12
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80110dc:	b5b0      	push	{r4, r5, r7, lr}
 80110de:	b088      	sub	sp, #32
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f000 fbfb 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80110f0:	4604      	mov	r4, r0
 80110f2:	6838      	ldr	r0, [r7, #0]
 80110f4:	f000 fe0d 	bl	8011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80110f8:	4605      	mov	r5, r0
 80110fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110fc:	f000 fc09 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011100:	4603      	mov	r3, r0
 8011102:	462a      	mov	r2, r5
 8011104:	4621      	mov	r1, r4
 8011106:	68f8      	ldr	r0, [r7, #12]
 8011108:	f000 fe0e 	bl	8011d28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801110c:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 801110e:	69f8      	ldr	r0, [r7, #28]
 8011110:	f000 ff50 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8011114:	4603      	mov	r3, r0
 8011116:	f107 0010 	add.w	r0, r7, #16
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	68f9      	ldr	r1, [r7, #12]
 801111e:	f000 fe26 	bl	8011d6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
	    if (__res.second)
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d007      	beq.n	8011138 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011128:	6939      	ldr	r1, [r7, #16]
 801112a:	697a      	ldr	r2, [r7, #20]
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 ff53 	bl	8011fda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8011134:	4603      	mov	r3, r0
 8011136:	e00b      	b.n	8011150 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011138:	69f9      	ldr	r1, [r7, #28]
 801113a:	68f8      	ldr	r0, [r7, #12]
 801113c:	f000 ff8a 	bl	8012054 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8011140:	693a      	ldr	r2, [r7, #16]
 8011142:	f107 0318 	add.w	r3, r7, #24
 8011146:	4611      	mov	r1, r2
 8011148:	4618      	mov	r0, r3
 801114a:	f000 ff94 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801114e:	69bb      	ldr	r3, [r7, #24]
      }
 8011150:	4618      	mov	r0, r3
 8011152:	3720      	adds	r7, #32
 8011154:	46bd      	mov	sp, r7
 8011156:	bdb0      	pop	{r4, r5, r7, pc}

08011158 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_base>:
    _Fwd_list_base<_Tp, _Alloc>::
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b085      	sub	sp, #20
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	60fb      	str	r3, [r7, #12]
      __pos->_M_next = __curr->_M_next;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	681a      	ldr	r2, [r3, #0]
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	601a      	str	r2, [r3, #0]
      _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 ff8f 	bl	8012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8011176:	4604      	mov	r4, r0
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f7ff fe6b 	bl	8010e54 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 801117e:	4603      	mov	r3, r0
 8011180:	4619      	mov	r1, r3
 8011182:	4620      	mov	r0, r4
 8011184:	f000 ff91 	bl	80120aa <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
      _M_put_node(__curr);
 8011188:	68f9      	ldr	r1, [r7, #12]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 ffa5 	bl	80120da <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      return __pos->_M_next;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	681b      	ldr	r3, [r3, #0]
    }
 8011194:	4618      	mov	r0, r3
 8011196:	3714      	adds	r7, #20
 8011198:	46bd      	mov	sp, r7
 801119a:	bd90      	pop	{r4, r7, pc}

0801119c <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801119c:	b590      	push	{r4, r7, lr}
 801119e:	b083      	sub	sp, #12
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80111a6:	6838      	ldr	r0, [r7, #0]
 80111a8:	f000 ffad 	bl	8012106 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80111ac:	4603      	mov	r3, r0
 80111ae:	681c      	ldr	r4, [r3, #0]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	4619      	mov	r1, r3
 80111b4:	2004      	movs	r0, #4
 80111b6:	f7fd fd15 	bl	800ebe4 <_ZnwjPv>
 80111ba:	4603      	mov	r3, r0
 80111bc:	601c      	str	r4, [r3, #0]
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd90      	pop	{r4, r7, pc}

080111c6 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b084      	sub	sp, #16
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	60f8      	str	r0, [r7, #12]
 80111ce:	60b9      	str	r1, [r7, #8]
 80111d0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80111d2:	6878      	ldr	r0, [r7, #4]
 80111d4:	f000 ff97 	bl	8012106 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80111d8:	4603      	mov	r3, r0
 80111da:	4619      	mov	r1, r3
 80111dc:	68b8      	ldr	r0, [r7, #8]
 80111de:	f7ff ffdd 	bl	801119c <_ZSt12construct_atImJRKmEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
	...

080111ec <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 80111ec:	b5b0      	push	{r4, r5, r7, lr}
 80111ee:	b08c      	sub	sp, #48	; 0x30
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80111f8:	4a39      	ldr	r2, [pc, #228]	; (80112e0 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJRKmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xf4>)
 80111fa:	2101      	movs	r1, #1
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f000 ff8d 	bl	801211c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8011202:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011210:	68f8      	ldr	r0, [r7, #12]
 8011212:	f7ff fc2b 	bl	8010a6c <_ZNSt6vectorImSaImEE5beginEv>
 8011216:	4603      	mov	r3, r0
 8011218:	617b      	str	r3, [r7, #20]
 801121a:	f107 0214 	add.w	r2, r7, #20
 801121e:	f107 0308 	add.w	r3, r7, #8
 8011222:	4611      	mov	r1, r2
 8011224:	4618      	mov	r0, r3
 8011226:	f000 ffc0 	bl	80121aa <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 801122a:	4603      	mov	r3, r0
 801122c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011232:	4618      	mov	r0, r3
 8011234:	f000 ffce 	bl	80121d4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8011238:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 801123e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011240:	6a3b      	ldr	r3, [r7, #32]
 8011242:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011244:	69fa      	ldr	r2, [r7, #28]
 8011246:	18d5      	adds	r5, r2, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 ff5c 	bl	8012106 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 801124e:	4603      	mov	r3, r0
 8011250:	461a      	mov	r2, r3
 8011252:	4629      	mov	r1, r5
 8011254:	4620      	mov	r0, r4
 8011256:	f7ff ffb6 	bl	80111c6 <_ZNSt16allocator_traitsISaImEE9constructImJRKmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 801125a:	2300      	movs	r3, #0
 801125c:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801125e:	f107 0308 	add.w	r3, r7, #8
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe fff4 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8011268:	4603      	mov	r3, r0
 801126a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	4618      	mov	r0, r3
 8011270:	f7ff fc44 	bl	8010afc <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8011274:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011276:	69fa      	ldr	r2, [r7, #28]
 8011278:	4621      	mov	r1, r4
 801127a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801127c:	f000 ffbe 	bl	80121fc <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8011280:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	3304      	adds	r3, #4
 8011286:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011288:	f107 0308 	add.w	r3, r7, #8
 801128c:	4618      	mov	r0, r3
 801128e:	f7fe ffdf 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8011292:	4603      	mov	r3, r0
 8011294:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	4618      	mov	r0, r3
 801129a:	f7ff fc2f 	bl	8010afc <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 801129e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80112a0:	69ba      	ldr	r2, [r7, #24]
 80112a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112a4:	4620      	mov	r0, r4
 80112a6:	f000 ffa9 	bl	80121fc <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 80112aa:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80112ac:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	689a      	ldr	r2, [r3, #8]
 80112b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b4:	1ad3      	subs	r3, r2, r3
 80112b6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80112b8:	461a      	mov	r2, r3
 80112ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112bc:	f7ff fc0b 	bl	8010ad6 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	69fa      	ldr	r2, [r7, #28]
 80112c4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	69ba      	ldr	r2, [r7, #24]
 80112ca:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	69fa      	ldr	r2, [r7, #28]
 80112d2:	441a      	add	r2, r3
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	609a      	str	r2, [r3, #8]
    }
 80112d8:	bf00      	nop
 80112da:	3730      	adds	r7, #48	; 0x30
 80112dc:	46bd      	mov	sp, r7
 80112de:	bdb0      	pop	{r4, r5, r7, pc}
 80112e0:	0801a9e4 	.word	0x0801a9e4

080112e4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	4618      	mov	r0, r3
 80112f0:	370c      	adds	r7, #12
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr

080112fa <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80112fa:	b590      	push	{r4, r7, lr}
 80112fc:	b085      	sub	sp, #20
 80112fe:	af00      	add	r7, sp, #0
 8011300:	60f8      	str	r0, [r7, #12]
 8011302:	7239      	strb	r1, [r7, #8]
 8011304:	607a      	str	r2, [r7, #4]
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	4621      	mov	r1, r4
 801130c:	4618      	mov	r0, r3
 801130e:	f000 ff9b 	bl	8012248 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	4618      	mov	r0, r3
 8011316:	3714      	adds	r7, #20
 8011318:	46bd      	mov	sp, r7
 801131a:	bd90      	pop	{r4, r7, pc}

0801131c <_ZNSt14_Optional_baseIhLb1ELb1EEC1IJhELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801131c:	b5b0      	push	{r4, r5, r7, lr}
 801131e:	b084      	sub	sp, #16
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	7239      	strb	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8011328:	68fc      	ldr	r4, [r7, #12]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7ff ffda 	bl	80112e4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8011330:	4603      	mov	r3, r0
 8011332:	461a      	mov	r2, r3
 8011334:	4629      	mov	r1, r5
 8011336:	4620      	mov	r0, r4
 8011338:	f7ff ffdf 	bl	80112fa <_ZNSt17_Optional_payloadIhLb1ELb1ELb1EECI1St22_Optional_payload_baseIhEIJhEEESt10in_place_tDpOT_>
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	4618      	mov	r0, r3
 8011340:	3710      	adds	r7, #16
 8011342:	46bd      	mov	sp, r7
 8011344:	bdb0      	pop	{r4, r5, r7, pc}

08011346 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011346:	b590      	push	{r4, r7, lr}
 8011348:	b085      	sub	sp, #20
 801134a:	af00      	add	r7, sp, #0
 801134c:	6078      	str	r0, [r7, #4]
 801134e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8011350:	6878      	ldr	r0, [r7, #4]
 8011352:	f000 ff91 	bl	8012278 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8011356:	4604      	mov	r4, r0
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f000 ff99 	bl	8012290 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801135e:	4602      	mov	r2, r0
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	4621      	mov	r1, r4
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 ff9f 	bl	80122a8 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>
 801136a:	4603      	mov	r3, r0
 801136c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f000 f825 	bl	80113be <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 8011374:	4603      	mov	r3, r0
 8011376:	60fb      	str	r3, [r7, #12]
 8011378:	f107 020c 	add.w	r2, r7, #12
 801137c:	f107 0308 	add.w	r3, r7, #8
 8011380:	4611      	mov	r1, r2
 8011382:	4618      	mov	r0, r3
 8011384:	f000 f82c 	bl	80113e0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 8011388:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10d      	bne.n	80113aa <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x64>
	      || _M_impl._M_key_compare(__k,
 801138e:	687c      	ldr	r4, [r7, #4]
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	4618      	mov	r0, r3
 8011394:	f000 ffb9 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011398:	4603      	mov	r3, r0
 801139a:	461a      	mov	r2, r3
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	4620      	mov	r0, r4
 80113a0:	f7ff fdb1 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d004      	beq.n	80113b4 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x6e>
					_S_key(__j._M_node))) ? end() : __j;
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 f807 	bl	80113be <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>
 80113b0:	4603      	mov	r3, r0
 80113b2:	e000      	b.n	80113b6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4findERS1_+0x70>
 80113b4:	68bb      	ldr	r3, [r7, #8]
    }
 80113b6:	4618      	mov	r0, r3
 80113b8:	3714      	adds	r7, #20
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd90      	pop	{r4, r7, pc}

080113be <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80113be:	b580      	push	{r7, lr}
 80113c0:	b084      	sub	sp, #16
 80113c2:	af00      	add	r7, sp, #0
 80113c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	1d1a      	adds	r2, r3, #4
 80113ca:	f107 030c 	add.w	r3, r7, #12
 80113ce:	4611      	mov	r1, r2
 80113d0:	4618      	mov	r0, r3
 80113d2:	f000 ffa6 	bl	8012322 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681a      	ldr	r2, [r3, #0]
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	429a      	cmp	r2, r3
 80113f4:	bf0c      	ite	eq
 80113f6:	2301      	moveq	r3, #1
 80113f8:	2300      	movne	r3, #0
 80113fa:	b2db      	uxtb	r3, r3
 80113fc:	4618      	mov	r0, r3
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	4618      	mov	r0, r3
 8011414:	370c      	adds	r7, #12
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr

0801141e <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 801141e:	b590      	push	{r4, r7, lr}
 8011420:	b085      	sub	sp, #20
 8011422:	af00      	add	r7, sp, #0
 8011424:	60f8      	str	r0, [r7, #12]
 8011426:	7239      	strb	r1, [r7, #8]
 8011428:	607a      	str	r2, [r7, #4]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	687a      	ldr	r2, [r7, #4]
 801142e:	4621      	mov	r1, r4
 8011430:	4618      	mov	r0, r3
 8011432:	f000 ff9b 	bl	801236c <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	4618      	mov	r0, r3
 801143a:	3714      	adds	r7, #20
 801143c:	46bd      	mov	sp, r7
 801143e:	bd90      	pop	{r4, r7, pc}

08011440 <_ZNSt14_Optional_baseIfLb1ELb1EEC1IJdELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8011440:	b5b0      	push	{r4, r5, r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	7239      	strb	r1, [r7, #8]
 801144a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801144c:	68fc      	ldr	r4, [r7, #12]
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff ffda 	bl	8011408 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8011454:	4603      	mov	r3, r0
 8011456:	461a      	mov	r2, r3
 8011458:	4629      	mov	r1, r5
 801145a:	4620      	mov	r0, r4
 801145c:	f7ff ffdf 	bl	801141e <_ZNSt17_Optional_payloadIfLb1ELb1ELb1EECI1St22_Optional_payload_baseIfEIJdEEESt10in_place_tDpOT_>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bdb0      	pop	{r4, r5, r7, pc}

0801146a <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801146a:	b480      	push	{r7}
 801146c:	b083      	sub	sp, #12
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801148a:	b580      	push	{r7, lr}
 801148c:	b088      	sub	sp, #32
 801148e:	af00      	add	r7, sp, #0
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	61fb      	str	r3, [r7, #28]
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	61bb      	str	r3, [r7, #24]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80114a2:	f7fd fb97 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d003      	beq.n	80114b4 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x2a>
	    ::operator delete(__p);
 80114ac:	69b8      	ldr	r0, [r7, #24]
 80114ae:	f008 fee7 	bl	801a280 <_ZdlPv>
	    return;
 80114b2:	e005      	b.n	80114c0 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	69b9      	ldr	r1, [r7, #24]
 80114b8:	69f8      	ldr	r0, [r7, #28]
 80114ba:	f001 fc86 	bl	8012dca <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
      { __a.deallocate(__p, __n); }
 80114be:	bf00      	nop
 80114c0:	bf00      	nop
 80114c2:	3720      	adds	r7, #32
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80114d2:	f7fd fb7f 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d004      	beq.n	80114e6 <_ZSt8_DestroyIPmEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80114dc:	6839      	ldr	r1, [r7, #0]
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 ff5c 	bl	801239c <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>
 80114e4:	e003      	b.n	80114ee <_ZSt8_DestroyIPmEvT_S1_+0x26>
	__destroy(__first, __last);
 80114e6:	6839      	ldr	r1, [r7, #0]
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f000 ff6f 	bl	80123cc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 80114ee:	3708      	adds	r7, #8
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1Ev>:
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	4618      	mov	r0, r3
 8011500:	370c      	adds	r7, #12
 8011502:	46bd      	mov	sp, r7
 8011504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011508:	4770      	bx	lr

0801150a <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801150a:	b480      	push	{r7}
 801150c:	b083      	sub	sp, #12
 801150e:	af00      	add	r7, sp, #0
 8011510:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <_ZNSt19_Fwd_list_node_baseC1Ev>:
    _Fwd_list_node_base() = default;
 8011520:	b480      	push	{r7}
 8011522:	b083      	sub	sp, #12
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2200      	movs	r2, #0
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4618      	mov	r0, r3
 8011532:	370c      	adds	r7, #12
 8011534:	46bd      	mov	sp, r7
 8011536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153a:	4770      	bx	lr

0801153c <_ZNSt14_Fwd_list_baseIhSaIhEE14_Fwd_list_implC1EOSaISt14_Fwd_list_nodeIhEE>:
	_Fwd_list_impl(_Node_alloc_type&& __a)
 801153c:	b580      	push	{r7, lr}
 801153e:	b082      	sub	sp, #8
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
	: _Node_alloc_type(std::move(__a)), _M_head()
 8011546:	6838      	ldr	r0, [r7, #0]
 8011548:	f7ff ffdf 	bl	801150a <_ZSt4moveIRSaISt14_Fwd_list_nodeIhEEEONSt16remove_referenceIT_E4typeEOS5_>
 801154c:	4603      	mov	r3, r0
 801154e:	4619      	mov	r1, r3
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f000 ff46 	bl	80123e2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	601a      	str	r2, [r3, #0]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4618      	mov	r0, r3
 8011560:	f7ff ffde 	bl	8011520 <_ZNSt19_Fwd_list_node_baseC1Ev>
	{ }
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	4618      	mov	r0, r3
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_>:
    _Fwd_list_base<_Tp, _Alloc>::
 801156e:	b590      	push	{r4, r7, lr}
 8011570:	b087      	sub	sp, #28
 8011572:	af00      	add	r7, sp, #0
 8011574:	60f8      	str	r0, [r7, #12]
 8011576:	60b9      	str	r1, [r7, #8]
 8011578:	607a      	str	r2, [r7, #4]
      _Node* __curr = static_cast<_Node*>(__pos->_M_next);
 801157a:	68bb      	ldr	r3, [r7, #8]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	617b      	str	r3, [r7, #20]
      while (__curr != __last)
 8011580:	697a      	ldr	r2, [r7, #20]
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	429a      	cmp	r2, r3
 8011586:	d015      	beq.n	80115b4 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x46>
	  _Node* __temp = __curr;
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	613b      	str	r3, [r7, #16]
	  __curr = static_cast<_Node*>(__curr->_M_next);
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	617b      	str	r3, [r7, #20]
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(),
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f000 fd7e 	bl	8012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8011598:	4604      	mov	r4, r0
 801159a:	6938      	ldr	r0, [r7, #16]
 801159c:	f7ff fc5a 	bl	8010e54 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 80115a0:	4603      	mov	r3, r0
 80115a2:	4619      	mov	r1, r3
 80115a4:	4620      	mov	r0, r4
 80115a6:	f000 fd80 	bl	80120aa <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>
	  _M_put_node(__temp);
 80115aa:	6939      	ldr	r1, [r7, #16]
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f000 fd94 	bl	80120da <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>
      while (__curr != __last)
 80115b2:	e7e5      	b.n	8011580 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_erase_afterEPSt19_Fwd_list_node_baseS3_+0x12>
      __pos->_M_next = __last;
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	601a      	str	r2, [r3, #0]
      return __last;
 80115ba:	687b      	ldr	r3, [r7, #4]
    }
 80115bc:	4618      	mov	r0, r3
 80115be:	371c      	adds	r7, #28
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd90      	pop	{r4, r7, pc}

080115c4 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	4618      	mov	r0, r3
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr

080115dc <_ZNSt14_Fwd_list_nodeIhEC1Ev>:
      _Fwd_list_node() = default;
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff ff9a 	bl	8011520 <_ZNSt19_Fwd_list_node_baseC1Ev>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4618      	mov	r0, r3
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <_ZNSt14_Fwd_list_baseIhSaIhEE14_M_create_nodeIJRKhEEEPSt14_Fwd_list_nodeIhEDpOT_>:
	_M_create_node(_Args&&... __args)
 80115f6:	b5b0      	push	{r4, r5, r7, lr}
 80115f8:	b084      	sub	sp, #16
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
 80115fe:	6039      	str	r1, [r7, #0]
	  _Node* __node = this->_M_get_node();
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f000 fefc 	bl	80123fe <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>
 8011606:	60f8      	str	r0, [r7, #12]
	      ::new ((void*)__node) _Node;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	4619      	mov	r1, r3
 801160c:	2008      	movs	r0, #8
 801160e:	f7fd fae9 	bl	800ebe4 <_ZnwjPv>
 8011612:	4603      	mov	r3, r0
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff ffe1 	bl	80115dc <_ZNSt14_Fwd_list_nodeIhEC1Ev>
	      _Node_alloc_traits::construct(_M_get_Node_allocator(),
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f000 fd3a 	bl	8012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 8011620:	4604      	mov	r4, r0
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f7ff fc16 	bl	8010e54 <_ZNSt14_Fwd_list_nodeIhE9_M_valptrEv>
 8011628:	4605      	mov	r5, r0
 801162a:	6838      	ldr	r0, [r7, #0]
 801162c:	f000 fefc 	bl	8012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8011630:	4603      	mov	r3, r0
 8011632:	461a      	mov	r2, r3
 8011634:	4629      	mov	r1, r5
 8011636:	4620      	mov	r0, r4
 8011638:	f000 ff17 	bl	801246a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>
	  return __node;
 801163c:	68fb      	ldr	r3, [r7, #12]
	}
 801163e:	4618      	mov	r0, r3
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bdb0      	pop	{r4, r5, r7, pc}

08011646 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEC1Ev>:
 8011646:	b480      	push	{r7}
 8011648:	b083      	sub	sp, #12
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr

0801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	4618      	mov	r0, r3
 801166a:	370c      	adds	r7, #12
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	4618      	mov	r0, r3
 8011682:	370c      	adds	r7, #12
 8011684:	46bd      	mov	sp, r7
 8011686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168a:	4770      	bx	lr

0801168c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8011696:	6839      	ldr	r1, [r7, #0]
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f000 fef8 	bl	801248e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801169e:	6839      	ldr	r1, [r7, #0]
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f000 ff09 	bl	80124b8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80116a6:	bf00      	nop
 80116a8:	3708      	adds	r7, #8
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}

080116ae <_ZNSt16allocator_traitsISaImEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80116ae:	b580      	push	{r7, lr}
 80116b0:	b082      	sub	sp, #8
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
 80116b6:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80116b8:	6839      	ldr	r1, [r7, #0]
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 ff0e 	bl	80124dc <_ZNSaImEC1ERKS_>
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 80116d2:	6839      	ldr	r1, [r7, #0]
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 ff01 	bl	80124dc <_ZNSaImEC1ERKS_>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	f7ff f9e6 	bl	8010aae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4618      	mov	r0, r3
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}

080116ec <_ZNSt12_Vector_baseImSaImEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 80116f6:	6839      	ldr	r1, [r7, #0]
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f000 fd6b 	bl	80121d4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 80116fe:	4602      	mov	r2, r0
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681a      	ldr	r2, [r3, #0]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	441a      	add	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	609a      	str	r2, [r3, #8]
      }
 801171a:	bf00      	nop
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <_ZN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011722:	b480      	push	{r7}
 8011724:	b083      	sub	sp, #12
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
 801172a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	601a      	str	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	4618      	mov	r0, r3
 8011738:	370c      	adds	r7, #12
 801173a:	46bd      	mov	sp, r7
 801173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011740:	4770      	bx	lr

08011742 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8011742:	b580      	push	{r7, lr}
 8011744:	b086      	sub	sp, #24
 8011746:	af00      	add	r7, sp, #0
 8011748:	60f8      	str	r0, [r7, #12]
 801174a:	60b9      	str	r1, [r7, #8]
 801174c:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801174e:	2301      	movs	r3, #1
 8011750:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	68b9      	ldr	r1, [r7, #8]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f000 fece 	bl	80124f8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>
 801175c:	4603      	mov	r3, r0
    }
 801175e:	4618      	mov	r0, r3
 8011760:	3718      	adds	r7, #24
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011766:	b480      	push	{r7}
 8011768:	b083      	sub	sp, #12
 801176a:	af00      	add	r7, sp, #0
 801176c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	689b      	ldr	r3, [r3, #8]
      }
 8011772:	4618      	mov	r0, r3
 8011774:	370c      	adds	r7, #12
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr

0801177e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801177e:	b480      	push	{r7}
 8011780:	b083      	sub	sp, #12
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	3304      	adds	r3, #4
 801178a:	4618      	mov	r0, r3
 801178c:	370c      	adds	r7, #12
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr

08011796 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011796:	b590      	push	{r4, r7, lr}
 8011798:	b087      	sub	sp, #28
 801179a:	af00      	add	r7, sp, #0
 801179c:	60f8      	str	r0, [r7, #12]
 801179e:	60b9      	str	r1, [r7, #8]
 80117a0:	607a      	str	r2, [r7, #4]
 80117a2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d01b      	beq.n	80117e2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80117aa:	68fc      	ldr	r4, [r7, #12]
 80117ac:	68b8      	ldr	r0, [r7, #8]
 80117ae:	f000 fc01 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80117b2:	4603      	mov	r3, r0
 80117b4:	683a      	ldr	r2, [r7, #0]
 80117b6:	4619      	mov	r1, r3
 80117b8:	4620      	mov	r0, r4
 80117ba:	f7ff fc61 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80117be:	4603      	mov	r3, r0
 80117c0:	f083 0301 	eor.w	r3, r3, #1
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d006      	beq.n	80117d8 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	607b      	str	r3, [r7, #4]
 80117ce:	68b8      	ldr	r0, [r7, #8]
 80117d0:	f000 fea2 	bl	8012518 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80117d4:	60b8      	str	r0, [r7, #8]
 80117d6:	e7e5      	b.n	80117a4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 80117d8:	68b8      	ldr	r0, [r7, #8]
 80117da:	f000 fea9 	bl	8012530 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80117de:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80117e0:	e7e0      	b.n	80117a4 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS2_+0xe>
      return const_iterator(__y);
 80117e2:	f107 0314 	add.w	r3, r7, #20
 80117e6:	6879      	ldr	r1, [r7, #4]
 80117e8:	4618      	mov	r0, r3
 80117ea:	f000 f811 	bl	8011810 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 80117ee:	697b      	ldr	r3, [r7, #20]
    }
 80117f0:	4618      	mov	r0, r3
 80117f2:	371c      	adds	r7, #28
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd90      	pop	{r4, r7, pc}

080117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fbd7 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8011806:	4603      	mov	r3, r0
 8011808:	4618      	mov	r0, r3
 801180a:	3708      	adds	r7, #8
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	601a      	str	r2, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4618      	mov	r0, r3
 8011824:	370c      	adds	r7, #12
 8011826:	46bd      	mov	sp, r7
 8011828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182c:	4770      	bx	lr

0801182e <_ZN9__gnu_cxx16__aligned_bufferIhE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 801182e:	b580      	push	{r7, lr}
 8011830:	b082      	sub	sp, #8
 8011832:	af00      	add	r7, sp, #0
 8011834:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 fe86 	bl	8012548 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>
 801183c:	4603      	mov	r3, r0
 801183e:	4618      	mov	r0, r3
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8011846:	b590      	push	{r4, r7, lr}
 8011848:	b083      	sub	sp, #12
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
 801184e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7ff fa33 	bl	8010cbc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8011856:	4604      	mov	r4, r0
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f000 fe80 	bl	801255e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 801185e:	4602      	mov	r2, r0
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	4621      	mov	r1, r4
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f000 fe86 	bl	8012576 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 801186a:	4603      	mov	r3, r0
 801186c:	4618      	mov	r0, r3
 801186e:	370c      	adds	r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	bd90      	pop	{r4, r7, pc}

08011874 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	1d1a      	adds	r2, r3, #4
 8011880:	f107 030c 	add.w	r3, r7, #12
 8011884:	4611      	mov	r1, r2
 8011886:	4618      	mov	r0, r3
 8011888:	f000 f9e4 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	4618      	mov	r0, r3
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8key_compEv>:
      key_comp() const
 8011896:	b480      	push	{r7}
 8011898:	b083      	sub	sp, #12
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801189e:	bf00      	nop
 80118a0:	4618      	mov	r0, r3
 80118a2:	370c      	adds	r7, #12
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b082      	sub	sp, #8
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	3310      	adds	r3, #16
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 fe8d 	bl	80125d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 80118be:	4603      	mov	r3, r0
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <_ZNSt11_Tuple_implILj0EJRKhEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	4618      	mov	r0, r3
 80118d8:	f000 fe8a 	bl	80125f0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	4618      	mov	r0, r3
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}

080118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80118e6:	b480      	push	{r7}
 80118e8:	b083      	sub	sp, #12
 80118ea:	af00      	add	r7, sp, #0
 80118ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	4618      	mov	r0, r3
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4618      	mov	r0, r3
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011910:	4770      	bx	lr

08011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011912:	b480      	push	{r7}
 8011914:	b083      	sub	sp, #12
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4618      	mov	r0, r3
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr

08011928 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011928:	b5b0      	push	{r4, r5, r7, lr}
 801192a:	b088      	sub	sp, #32
 801192c:	af02      	add	r7, sp, #8
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
 8011934:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	f000 fe69 	bl	801260e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>
 801193c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801193e:	68b8      	ldr	r0, [r7, #8]
 8011940:	f7ff ffd1 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011944:	4604      	mov	r4, r0
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7ff ffd8 	bl	80118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801194c:	4605      	mov	r5, r0
 801194e:	6838      	ldr	r0, [r7, #0]
 8011950:	f7ff ffdf 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011954:	4603      	mov	r3, r0
 8011956:	9300      	str	r3, [sp, #0]
 8011958:	462b      	mov	r3, r5
 801195a:	4622      	mov	r2, r4
 801195c:	6979      	ldr	r1, [r7, #20]
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	f000 fe66 	bl	8012630 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8011964:	697b      	ldr	r3, [r7, #20]
	}
 8011966:	4618      	mov	r0, r3
 8011968:	3718      	adds	r7, #24
 801196a:	46bd      	mov	sp, r7
 801196c:	bdb0      	pop	{r4, r5, r7, pc}

0801196e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801196e:	b590      	push	{r4, r7, lr}
 8011970:	b08d      	sub	sp, #52	; 0x34
 8011972:	af00      	add	r7, sp, #0
 8011974:	60f8      	str	r0, [r7, #12]
 8011976:	60b9      	str	r1, [r7, #8]
 8011978:	607a      	str	r2, [r7, #4]
 801197a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801197c:	1d3b      	adds	r3, r7, #4
 801197e:	4618      	mov	r0, r3
 8011980:	f000 fe83 	bl	801268a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>
 8011984:	4603      	mov	r3, r0
 8011986:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8011988:	69bc      	ldr	r4, [r7, #24]
 801198a:	68b8      	ldr	r0, [r7, #8]
 801198c:	f000 fde7 	bl	801255e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8011990:	4603      	mov	r3, r0
 8011992:	429c      	cmp	r4, r3
 8011994:	bf0c      	ite	eq
 8011996:	2301      	moveq	r3, #1
 8011998:	2300      	movne	r3, #0
 801199a:	b2db      	uxtb	r3, r3
 801199c:	2b00      	cmp	r3, #0
 801199e:	d030      	beq.n	8011a02 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 80119a0:	68b8      	ldr	r0, [r7, #8]
 80119a2:	f000 fe83 	bl	80126ac <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>
 80119a6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d013      	beq.n	80119d4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80119ac:	68bc      	ldr	r4, [r7, #8]
 80119ae:	68b8      	ldr	r0, [r7, #8]
 80119b0:	f000 fe88 	bl	80126c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80119b4:	4603      	mov	r3, r0
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f000 fca6 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80119be:	4603      	mov	r3, r0
 80119c0:	683a      	ldr	r2, [r7, #0]
 80119c2:	4619      	mov	r1, r3
 80119c4:	4620      	mov	r0, r4
 80119c6:	f7ff fa9e 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d001      	beq.n	80119d4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80119d0:	2301      	movs	r3, #1
 80119d2:	e000      	b.n	80119d6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 80119d4:	2300      	movs	r3, #0
	  if (size() > 0
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00c      	beq.n	80119f4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80119da:	2300      	movs	r3, #0
 80119dc:	61fb      	str	r3, [r7, #28]
 80119de:	68b8      	ldr	r0, [r7, #8]
 80119e0:	f000 fe70 	bl	80126c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 80119e4:	4602      	mov	r2, r0
 80119e6:	f107 031c 	add.w	r3, r7, #28
 80119ea:	4619      	mov	r1, r3
 80119ec:	68f8      	ldr	r0, [r7, #12]
 80119ee:	f000 fe75 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80119f2:	e0db      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	683a      	ldr	r2, [r7, #0]
 80119f8:	68b9      	ldr	r1, [r7, #8]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f000 fe84 	bl	8012708 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011a00:	e0d4      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8011a02:	68bc      	ldr	r4, [r7, #8]
 8011a04:	69bb      	ldr	r3, [r7, #24]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 fc7f 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	461a      	mov	r2, r3
 8011a10:	6839      	ldr	r1, [r7, #0]
 8011a12:	4620      	mov	r0, r4
 8011a14:	f7ff fa77 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d057      	beq.n	8011ace <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8011a22:	69bc      	ldr	r4, [r7, #24]
 8011a24:	68b8      	ldr	r0, [r7, #8]
 8011a26:	f000 fef4 	bl	8012812 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8011a2a:	4603      	mov	r3, r0
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	429c      	cmp	r4, r3
 8011a30:	bf0c      	ite	eq
 8011a32:	2301      	moveq	r3, #1
 8011a34:	2300      	movne	r3, #0
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d00d      	beq.n	8011a58 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8011a3c:	68b8      	ldr	r0, [r7, #8]
 8011a3e:	f000 fee8 	bl	8012812 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8011a42:	4604      	mov	r4, r0
 8011a44:	68b8      	ldr	r0, [r7, #8]
 8011a46:	f000 fee4 	bl	8012812 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	461a      	mov	r2, r3
 8011a4e:	4621      	mov	r1, r4
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f000 feea 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011a56:	e0a9      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011a58:	68bc      	ldr	r4, [r7, #8]
 8011a5a:	f107 0314 	add.w	r3, r7, #20
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f000 fefc 	bl	801285c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
 8011a64:	4603      	mov	r3, r0
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f000 fc4e 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	4619      	mov	r1, r3
 8011a74:	4620      	mov	r0, r4
 8011a76:	f7ff fa46 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d01f      	beq.n	8011ac0 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7ff fdea 	bl	801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	bf0c      	ite	eq
 8011a8e:	2301      	moveq	r3, #1
 8011a90:	2300      	movne	r3, #0
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d00a      	beq.n	8011aae <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8011a98:	2300      	movs	r3, #0
 8011a9a:	623b      	str	r3, [r7, #32]
 8011a9c:	f107 0214 	add.w	r2, r7, #20
 8011aa0:	f107 0320 	add.w	r3, r7, #32
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f000 fe18 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011aac:	e07e      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011aae:	f107 0218 	add.w	r2, r7, #24
 8011ab2:	f107 0318 	add.w	r3, r7, #24
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f000 feb6 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011abe:	e075      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	68b9      	ldr	r1, [r7, #8]
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f000 fe1e 	bl	8012708 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011acc:	e06e      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011ace:	68bc      	ldr	r4, [r7, #8]
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f000 fc19 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	4619      	mov	r1, r3
 8011ade:	4620      	mov	r0, r4
 8011ae0:	f7ff fa11 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d056      	beq.n	8011b98 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011aee:	69bc      	ldr	r4, [r7, #24]
 8011af0:	68b8      	ldr	r0, [r7, #8]
 8011af2:	f000 fde7 	bl	80126c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8011af6:	4603      	mov	r3, r0
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	429c      	cmp	r4, r3
 8011afc:	bf0c      	ite	eq
 8011afe:	2301      	moveq	r3, #1
 8011b00:	2300      	movne	r3, #0
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d00c      	beq.n	8011b22 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8011b08:	2300      	movs	r3, #0
 8011b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8011b0c:	68b8      	ldr	r0, [r7, #8]
 8011b0e:	f000 fdd9 	bl	80126c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>
 8011b12:	4602      	mov	r2, r0
 8011b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b18:	4619      	mov	r1, r3
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f000 fdde 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011b20:	e044      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8011b22:	68bc      	ldr	r4, [r7, #8]
 8011b24:	f107 0310 	add.w	r3, r7, #16
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f000 fea8 	bl	801287e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f000 fbe9 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	6839      	ldr	r1, [r7, #0]
 8011b3e:	4620      	mov	r0, r4
 8011b40:	f7ff f9e1 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d01f      	beq.n	8011b8a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff fd85 	bl	801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	bf0c      	ite	eq
 8011b58:	2301      	moveq	r3, #1
 8011b5a:	2300      	movne	r3, #0
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00a      	beq.n	8011b78 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8011b62:	2300      	movs	r3, #0
 8011b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8011b66:	f107 0218 	add.w	r2, r7, #24
 8011b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011b6e:	4619      	mov	r1, r3
 8011b70:	68f8      	ldr	r0, [r7, #12]
 8011b72:	f000 fdb3 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011b76:	e019      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011b78:	f107 0210 	add.w	r2, r7, #16
 8011b7c:	f107 0310 	add.w	r3, r7, #16
 8011b80:	4619      	mov	r1, r3
 8011b82:	68f8      	ldr	r0, [r7, #12]
 8011b84:	f000 fe51 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011b88:	e010      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	683a      	ldr	r2, [r7, #0]
 8011b8e:	68b9      	ldr	r1, [r7, #8]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f000 fdb9 	bl	8012708 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011b96:	e009      	b.n	8011bac <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8011b98:	2300      	movs	r3, #0
 8011b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011b9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011ba0:	f107 0318 	add.w	r3, r7, #24
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f000 fe7a 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011bac:	68f8      	ldr	r0, [r7, #12]
 8011bae:	3734      	adds	r7, #52	; 0x34
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd90      	pop	{r4, r7, pc}

08011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 fe85 	bl	80128cc <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	f107 030c 	add.w	r3, r7, #12
 8011bc8:	4611      	mov	r1, r2
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 fe8c 	bl	80128e8 <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>
 8011bd0:	4603      	mov	r3, r0
      }
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011bda:	b5b0      	push	{r4, r5, r7, lr}
 8011bdc:	b086      	sub	sp, #24
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	60f8      	str	r0, [r7, #12]
 8011be2:	60b9      	str	r1, [r7, #8]
 8011be4:	607a      	str	r2, [r7, #4]
 8011be6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d117      	bne.n	8011c1e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011bee:	68f8      	ldr	r0, [r7, #12]
 8011bf0:	f000 fcb5 	bl	801255e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d010      	beq.n	8011c1e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8011bfc:	68fc      	ldr	r4, [r7, #12]
 8011bfe:	6838      	ldr	r0, [r7, #0]
 8011c00:	f7ff ffd8 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011c04:	4605      	mov	r5, r0
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f000 fb7f 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	461a      	mov	r2, r3
 8011c10:	4629      	mov	r1, r5
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff f977 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d001      	beq.n	8011c22 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e000      	b.n	8011c24 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8011c22:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011c24:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011c2a:	7df8      	ldrb	r0, [r7, #23]
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	f008 fb93 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	695b      	ldr	r3, [r3, #20]
 8011c38:	1c5a      	adds	r2, r3, #1
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011c3e:	f107 0310 	add.w	r3, r7, #16
 8011c42:	6839      	ldr	r1, [r7, #0]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f000 f805 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8011c4a:	693b      	ldr	r3, [r7, #16]
    }
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3718      	adds	r7, #24
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bdb0      	pop	{r4, r5, r7, pc}

08011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	683a      	ldr	r2, [r7, #0]
 8011c62:	601a      	str	r2, [r3, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	4618      	mov	r0, r3
 8011c68:	370c      	adds	r7, #12
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c70:	4770      	bx	lr

08011c72 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 8011c72:	b590      	push	{r4, r7, lr}
 8011c74:	b083      	sub	sp, #12
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f000 fe3f 	bl	8012900 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8011c82:	4604      	mov	r4, r0
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 fe47 	bl	8012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	4621      	mov	r1, r4
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f000 fe4d 	bl	8012930 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>
 8011c96:	4603      	mov	r3, r0
 8011c98:	4618      	mov	r0, r3
 8011c9a:	370c      	adds	r7, #12
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd90      	pop	{r4, r7, pc}

08011ca0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	1d1a      	adds	r2, r3, #4
 8011cac:	f107 030c 	add.w	r3, r7, #12
 8011cb0:	4611      	mov	r1, r2
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f000 f9df 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	4618      	mov	r0, r3
 8011cbc:	3710      	adds	r7, #16
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8key_compEv>:
      key_comp() const
 8011cc2:	b480      	push	{r7}
 8011cc4:	b083      	sub	sp, #12
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8011cca:	bf00      	nop
 8011ccc:	4618      	mov	r0, r3
 8011cce:	370c      	adds	r7, #12
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3310      	adds	r3, #16
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f000 fe54 	bl	8012992 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8011cea:	4603      	mov	r3, r0
 8011cec:	4618      	mov	r0, r3
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1ES2_>:
      constexpr _Tuple_impl(const _Head& __head)
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b082      	sub	sp, #8
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6839      	ldr	r1, [r7, #0]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f000 fe51 	bl	80129aa <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	370c      	adds	r7, #12
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011d28:	b5b0      	push	{r4, r5, r7, lr}
 8011d2a:	b088      	sub	sp, #32
 8011d2c:	af02      	add	r7, sp, #8
 8011d2e:	60f8      	str	r0, [r7, #12]
 8011d30:	60b9      	str	r1, [r7, #8]
 8011d32:	607a      	str	r2, [r7, #4]
 8011d34:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f000 fe46 	bl	80129c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8011d3c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8011d3e:	68b8      	ldr	r0, [r7, #8]
 8011d40:	f7ff fdd1 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d44:	4604      	mov	r4, r0
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f7ff ffe3 	bl	8011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8011d4c:	4605      	mov	r5, r0
 8011d4e:	6838      	ldr	r0, [r7, #0]
 8011d50:	f7ff fddf 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011d54:	4603      	mov	r3, r0
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	462b      	mov	r3, r5
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	6979      	ldr	r1, [r7, #20]
 8011d5e:	68f8      	ldr	r0, [r7, #12]
 8011d60:	f000 fe43 	bl	80129ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8011d64:	697b      	ldr	r3, [r7, #20]
	}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3718      	adds	r7, #24
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bdb0      	pop	{r4, r5, r7, pc}

08011d6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011d6e:	b590      	push	{r4, r7, lr}
 8011d70:	b08d      	sub	sp, #52	; 0x34
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	60f8      	str	r0, [r7, #12]
 8011d76:	60b9      	str	r1, [r7, #8]
 8011d78:	607a      	str	r2, [r7, #4]
 8011d7a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8011d7c:	1d3b      	adds	r3, r7, #4
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f000 fe60 	bl	8012a44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>
 8011d84:	4603      	mov	r3, r0
 8011d86:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8011d88:	69bc      	ldr	r4, [r7, #24]
 8011d8a:	68b8      	ldr	r0, [r7, #8]
 8011d8c:	f000 fdc4 	bl	8012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8011d90:	4603      	mov	r3, r0
 8011d92:	429c      	cmp	r4, r3
 8011d94:	bf0c      	ite	eq
 8011d96:	2301      	moveq	r3, #1
 8011d98:	2300      	movne	r3, #0
 8011d9a:	b2db      	uxtb	r3, r3
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d030      	beq.n	8011e02 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 8011da0:	68b8      	ldr	r0, [r7, #8]
 8011da2:	f000 fe60 	bl	8012a66 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 8011da6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d013      	beq.n	8011dd4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8011dac:	68bc      	ldr	r4, [r7, #8]
 8011dae:	68b8      	ldr	r0, [r7, #8]
 8011db0:	f000 fe65 	bl	8012a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8011db4:	4603      	mov	r3, r0
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	4618      	mov	r0, r3
 8011dba:	f7ff fd1d 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	683a      	ldr	r2, [r7, #0]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f7ff f95b 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	e000      	b.n	8011dd6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 8011dd4:	2300      	movs	r3, #0
	  if (size() > 0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00c      	beq.n	8011df4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8011dda:	2300      	movs	r3, #0
 8011ddc:	61fb      	str	r3, [r7, #28]
 8011dde:	68b8      	ldr	r0, [r7, #8]
 8011de0:	f000 fe4d 	bl	8012a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8011de4:	4602      	mov	r2, r0
 8011de6:	f107 031c 	add.w	r3, r7, #28
 8011dea:	4619      	mov	r1, r3
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 fc75 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011df2:	e0db      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	683a      	ldr	r2, [r7, #0]
 8011df8:	68b9      	ldr	r1, [r7, #8]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f000 fe4b 	bl	8012a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8011e00:	e0d4      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8011e02:	68bc      	ldr	r4, [r7, #8]
 8011e04:	69bb      	ldr	r3, [r7, #24]
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7ff fcf6 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	461a      	mov	r2, r3
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	4620      	mov	r0, r4
 8011e14:	f7ff f934 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d057      	beq.n	8011ece <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8011e1e:	69bb      	ldr	r3, [r7, #24]
 8011e20:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8011e22:	69bc      	ldr	r4, [r7, #24]
 8011e24:	68b8      	ldr	r0, [r7, #8]
 8011e26:	f000 febb 	bl	8012ba0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	429c      	cmp	r4, r3
 8011e30:	bf0c      	ite	eq
 8011e32:	2301      	moveq	r3, #1
 8011e34:	2300      	movne	r3, #0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00d      	beq.n	8011e58 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8011e3c:	68b8      	ldr	r0, [r7, #8]
 8011e3e:	f000 feaf 	bl	8012ba0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8011e42:	4604      	mov	r4, r0
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	f000 feab 	bl	8012ba0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	461a      	mov	r2, r3
 8011e4e:	4621      	mov	r1, r4
 8011e50:	68f8      	ldr	r0, [r7, #12]
 8011e52:	f000 fcea 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011e56:	e0a9      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011e58:	68bc      	ldr	r4, [r7, #8]
 8011e5a:	f107 0314 	add.w	r3, r7, #20
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f000 feaa 	bl	8012bb8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
 8011e64:	4603      	mov	r3, r0
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7ff fcc5 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	683a      	ldr	r2, [r7, #0]
 8011e72:	4619      	mov	r1, r3
 8011e74:	4620      	mov	r0, r4
 8011e76:	f7ff f903 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d01f      	beq.n	8011ec0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	4618      	mov	r0, r3
 8011e84:	f000 fea9 	bl	8012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	bf0c      	ite	eq
 8011e8e:	2301      	moveq	r3, #1
 8011e90:	2300      	movne	r3, #0
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d00a      	beq.n	8011eae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8011e98:	2300      	movs	r3, #0
 8011e9a:	623b      	str	r3, [r7, #32]
 8011e9c:	f107 0214 	add.w	r2, r7, #20
 8011ea0:	f107 0320 	add.w	r3, r7, #32
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f000 fc18 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011eac:	e07e      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011eae:	f107 0218 	add.w	r2, r7, #24
 8011eb2:	f107 0318 	add.w	r3, r7, #24
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f000 fcb6 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011ebe:	e075      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	683a      	ldr	r2, [r7, #0]
 8011ec4:	68b9      	ldr	r1, [r7, #8]
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f000 fde5 	bl	8012a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8011ecc:	e06e      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011ece:	68bc      	ldr	r4, [r7, #8]
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7ff fc90 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	4619      	mov	r1, r3
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f7ff f8ce 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d056      	beq.n	8011f98 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 8011eea:	69bb      	ldr	r3, [r7, #24]
 8011eec:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011eee:	69bc      	ldr	r4, [r7, #24]
 8011ef0:	68b8      	ldr	r0, [r7, #8]
 8011ef2:	f000 fdc4 	bl	8012a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	429c      	cmp	r4, r3
 8011efc:	bf0c      	ite	eq
 8011efe:	2301      	moveq	r3, #1
 8011f00:	2300      	movne	r3, #0
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00c      	beq.n	8011f22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8011f08:	2300      	movs	r3, #0
 8011f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8011f0c:	68b8      	ldr	r0, [r7, #8]
 8011f0e:	f000 fdb6 	bl	8012a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8011f12:	4602      	mov	r2, r0
 8011f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f18:	4619      	mov	r1, r3
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f000 fbde 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011f20:	e044      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8011f22:	68bc      	ldr	r4, [r7, #8]
 8011f24:	f107 0310 	add.w	r3, r7, #16
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f000 fe62 	bl	8012bf2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff fc60 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f7ff f89e 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d01f      	beq.n	8011f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8011f4a:	69bb      	ldr	r3, [r7, #24]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 fe44 	bl	8012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	bf0c      	ite	eq
 8011f58:	2301      	moveq	r3, #1
 8011f5a:	2300      	movne	r3, #0
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00a      	beq.n	8011f78 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8011f62:	2300      	movs	r3, #0
 8011f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f66:	f107 0218 	add.w	r2, r7, #24
 8011f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f6e:	4619      	mov	r1, r3
 8011f70:	68f8      	ldr	r0, [r7, #12]
 8011f72:	f000 fbb3 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011f76:	e019      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011f78:	f107 0210 	add.w	r2, r7, #16
 8011f7c:	f107 0310 	add.w	r3, r7, #16
 8011f80:	4619      	mov	r1, r3
 8011f82:	68f8      	ldr	r0, [r7, #12]
 8011f84:	f000 fc51 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011f88:	e010      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	683a      	ldr	r2, [r7, #0]
 8011f8e:	68b9      	ldr	r1, [r7, #8]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f000 fd80 	bl	8012a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8011f96:	e009      	b.n	8011fac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8011f98:	2300      	movs	r3, #0
 8011f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011fa0:	f107 0318 	add.w	r3, r7, #24
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	68f8      	ldr	r0, [r7, #12]
 8011fa8:	f000 fc7a 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011fac:	68f8      	ldr	r0, [r7, #12]
 8011fae:	3734      	adds	r7, #52	; 0x34
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd90      	pop	{r4, r7, pc}

08011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f000 fe29 	bl	8012c14 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	f107 030c 	add.w	r3, r7, #12
 8011fc8:	4611      	mov	r1, r2
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f000 fe30 	bl	8012c30 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8011fd0:	4603      	mov	r3, r0
      }
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011fda:	b5b0      	push	{r4, r5, r7, lr}
 8011fdc:	b086      	sub	sp, #24
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	60b9      	str	r1, [r7, #8]
 8011fe4:	607a      	str	r2, [r7, #4]
 8011fe6:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d117      	bne.n	801201e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011fee:	68f8      	ldr	r0, [r7, #12]
 8011ff0:	f000 fc92 	bl	8012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d010      	beq.n	801201e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8011ffc:	68fc      	ldr	r4, [r7, #12]
 8011ffe:	6838      	ldr	r0, [r7, #0]
 8012000:	f7ff ffd8 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8012004:	4605      	mov	r5, r0
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7ff fbf6 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801200c:	4603      	mov	r3, r0
 801200e:	461a      	mov	r2, r3
 8012010:	4629      	mov	r1, r5
 8012012:	4620      	mov	r0, r4
 8012014:	f7ff f834 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
 801201e:	2301      	movs	r3, #1
 8012020:	e000      	b.n	8012024 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4a>
 8012022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8012024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801202a:	7df8      	ldrb	r0, [r7, #23]
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	6839      	ldr	r1, [r7, #0]
 8012030:	f008 f993 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	695b      	ldr	r3, [r3, #20]
 8012038:	1c5a      	adds	r2, r3, #1
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 801203e:	f107 0310 	add.w	r3, r7, #16
 8012042:	6839      	ldr	r1, [r7, #0]
 8012044:	4618      	mov	r0, r3
 8012046:	f000 f816 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801204a:	693b      	ldr	r3, [r7, #16]
    }
 801204c:	4618      	mov	r0, r3
 801204e:	3718      	adds	r7, #24
 8012050:	46bd      	mov	sp, r7
 8012052:	bdb0      	pop	{r4, r5, r7, pc}

08012054 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012054:	b580      	push	{r7, lr}
 8012056:	b082      	sub	sp, #8
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 801205e:	6839      	ldr	r1, [r7, #0]
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f000 fdf1 	bl	8012c48 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 fe02 	bl	8012c72 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 801206e:	bf00      	nop
 8012070:	3708      	adds	r7, #8
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012076:	b480      	push	{r7}
 8012078:	b083      	sub	sp, #12
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
 801207e:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	683a      	ldr	r2, [r7, #0]
 8012084:	601a      	str	r2, [r3, #0]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	370c      	adds	r7, #12
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() noexcept
 8012094:	b480      	push	{r7}
 8012096:	b083      	sub	sp, #12
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	4618      	mov	r0, r3
 80120a0:	370c      	adds	r7, #12
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr

080120aa <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE7destroyIhEEvRS2_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80120aa:	b580      	push	{r7, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	af00      	add	r7, sp, #0
 80120b0:	6078      	str	r0, [r7, #4]
 80120b2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80120b4:	6838      	ldr	r0, [r7, #0]
 80120b6:	f000 fdee 	bl	8012c96 <_ZSt10destroy_atIhEvPT_>
	}
 80120ba:	bf00      	nop
 80120bc:	3708      	adds	r7, #8
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type @c element_type
       *  @return @c addressof(__r)
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b082      	sub	sp, #8
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 fded 	bl	8012caa <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 80120d0:	4603      	mov	r3, r0
 80120d2:	4618      	mov	r0, r3
 80120d4:	3708      	adds	r7, #8
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}

080120da <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_put_nodeEPSt14_Fwd_list_nodeIhE>:
      _M_put_node(_Node* __p)
 80120da:	b580      	push	{r7, lr}
 80120dc:	b084      	sub	sp, #16
 80120de:	af00      	add	r7, sp, #0
 80120e0:	6078      	str	r0, [r7, #4]
 80120e2:	6039      	str	r1, [r7, #0]
	auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__p);
 80120e4:	6838      	ldr	r0, [r7, #0]
 80120e6:	f7ff ffec 	bl	80120c2 <_ZNSt14pointer_traitsIPSt14_Fwd_list_nodeIhEE10pointer_toERS1_>
 80120ea:	60f8      	str	r0, [r7, #12]
	_Node_alloc_traits::deallocate(_M_get_Node_allocator(), __ptr, 1);
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f7ff ffd1 	bl	8012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2201      	movs	r2, #1
 80120f6:	68f9      	ldr	r1, [r7, #12]
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 fde2 	bl	8012cc2 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>
      }
 80120fe:	bf00      	nop
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012106:	b480      	push	{r7}
 8012108:	b083      	sub	sp, #12
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	370c      	adds	r7, #12
 8012114:	46bd      	mov	sp, r7
 8012116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211a:	4770      	bx	lr

0801211c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801211c:	b590      	push	{r4, r7, lr}
 801211e:	b087      	sub	sp, #28
 8012120:	af00      	add	r7, sp, #0
 8012122:	60f8      	str	r0, [r7, #12]
 8012124:	60b9      	str	r1, [r7, #8]
 8012126:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012128:	68f8      	ldr	r0, [r7, #12]
 801212a:	f000 fde9 	bl	8012d00 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801212e:	4604      	mov	r4, r0
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f7fe f9da 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8012136:	4603      	mov	r3, r0
 8012138:	1ae2      	subs	r2, r4, r3
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	429a      	cmp	r2, r3
 801213e:	bf34      	ite	cc
 8012140:	2301      	movcc	r3, #1
 8012142:	2300      	movcs	r3, #0
 8012144:	b2db      	uxtb	r3, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	d002      	beq.n	8012150 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f008 f963 	bl	801a416 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7fe f9ca 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8012156:	4604      	mov	r4, r0
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f7fe f9c6 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 801215e:	4603      	mov	r3, r0
 8012160:	613b      	str	r3, [r7, #16]
 8012162:	f107 0208 	add.w	r2, r7, #8
 8012166:	f107 0310 	add.w	r3, r7, #16
 801216a:	4611      	mov	r1, r2
 801216c:	4618      	mov	r0, r3
 801216e:	f7fe f969 	bl	8010444 <_ZSt3maxIjERKT_S2_S2_>
 8012172:	4603      	mov	r3, r0
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4423      	add	r3, r4
 8012178:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801217a:	68f8      	ldr	r0, [r7, #12]
 801217c:	f7fe f9b5 	bl	80104ea <_ZNKSt6vectorImSaImEE4sizeEv>
 8012180:	4602      	mov	r2, r0
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	4293      	cmp	r3, r2
 8012186:	d306      	bcc.n	8012196 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f000 fdb9 	bl	8012d00 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801218e:	4602      	mov	r2, r0
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	4293      	cmp	r3, r2
 8012194:	d904      	bls.n	80121a0 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f000 fdb2 	bl	8012d00 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 801219c:	4603      	mov	r3, r0
 801219e:	e000      	b.n	80121a2 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 80121a0:	697b      	ldr	r3, [r7, #20]
      }
 80121a2:	4618      	mov	r0, r3
 80121a4:	371c      	adds	r7, #28
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd90      	pop	{r4, r7, pc}

080121aa <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80121aa:	b590      	push	{r4, r7, lr}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
 80121b2:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7fe f84b 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80121ba:	4603      	mov	r3, r0
 80121bc:	681c      	ldr	r4, [r3, #0]
 80121be:	6838      	ldr	r0, [r7, #0]
 80121c0:	f7fe f846 	bl	8010250 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 80121c4:	4603      	mov	r3, r0
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	1ae3      	subs	r3, r4, r3
 80121ca:	109b      	asrs	r3, r3, #2
 80121cc:	4618      	mov	r0, r3
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd90      	pop	{r4, r7, pc}

080121d4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d006      	beq.n	80121f2 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6839      	ldr	r1, [r7, #0]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f000 fd9a 	bl	8012d22 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80121ee:	4603      	mov	r3, r0
 80121f0:	e000      	b.n	80121f4 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 80121f2:	2300      	movs	r3, #0
      }
 80121f4:	4618      	mov	r0, r3
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}

080121fc <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80121fc:	b590      	push	{r4, r7, lr}
 80121fe:	b087      	sub	sp, #28
 8012200:	af02      	add	r7, sp, #8
 8012202:	60f8      	str	r0, [r7, #12]
 8012204:	60b9      	str	r1, [r7, #8]
 8012206:	607a      	str	r2, [r7, #4]
 8012208:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801220a:	f88d 4000 	strb.w	r4, [sp]
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	68b9      	ldr	r1, [r7, #8]
 8012214:	68f8      	ldr	r0, [r7, #12]
 8012216:	f000 fda4 	bl	8012d62 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 801221a:	4603      	mov	r3, r0
      }
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}

08012224 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	7239      	strb	r1, [r7, #8]
 801222e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	f7ff f857 	bl	80112e4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8012236:	4603      	mov	r3, r0
 8012238:	781a      	ldrb	r2, [r3, #0]
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	701a      	strb	r2, [r3, #0]
	    { }
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	4618      	mov	r0, r3
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <_ZNSt22_Optional_payload_baseIhEC1IJhEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8012248:	b5b0      	push	{r4, r5, r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	7239      	strb	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8012254:	68fc      	ldr	r4, [r7, #12]
 8012256:	6878      	ldr	r0, [r7, #4]
 8012258:	f7ff f844 	bl	80112e4 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 801225c:	4603      	mov	r3, r0
 801225e:	461a      	mov	r2, r3
 8012260:	4629      	mov	r1, r5
 8012262:	4620      	mov	r0, r4
 8012264:	f7ff ffde 	bl	8012224 <_ZNSt22_Optional_payload_baseIhE8_StorageIhLb1EEC1IJhEEESt10in_place_tDpOT_>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2201      	movs	r2, #1
 801226c:	705a      	strb	r2, [r3, #1]
	{ }
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	4618      	mov	r0, r3
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bdb0      	pop	{r4, r5, r7, pc}

08012278 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	689b      	ldr	r3, [r3, #8]
      }
 8012284:	4618      	mov	r0, r3
 8012286:	370c      	adds	r7, #12
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8012290:	b480      	push	{r7}
 8012292:	b083      	sub	sp, #12
 8012294:	af00      	add	r7, sp, #0
 8012296:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	3304      	adds	r3, #4
 801229c:	4618      	mov	r0, r3
 801229e:	370c      	adds	r7, #12
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b087      	sub	sp, #28
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d01b      	beq.n	80122f4 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80122bc:	68fc      	ldr	r4, [r7, #12]
 80122be:	68b8      	ldr	r0, [r7, #8]
 80122c0:	f7ff fc78 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80122c4:	4603      	mov	r3, r0
 80122c6:	683a      	ldr	r2, [r7, #0]
 80122c8:	4619      	mov	r1, r3
 80122ca:	4620      	mov	r0, r4
 80122cc:	f7fe fe1b 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 80122d0:	4603      	mov	r3, r0
 80122d2:	f083 0301 	eor.w	r3, r3, #1
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d006      	beq.n	80122ea <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	607b      	str	r3, [r7, #4]
 80122e0:	68b8      	ldr	r0, [r7, #8]
 80122e2:	f000 fd5a 	bl	8012d9a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80122e6:	60b8      	str	r0, [r7, #8]
 80122e8:	e7e5      	b.n	80122b6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80122ea:	68b8      	ldr	r0, [r7, #8]
 80122ec:	f000 fd61 	bl	8012db2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80122f0:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80122f2:	e7e0      	b.n	80122b6 <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS4_EPKSt18_Rb_tree_node_baseRS1_+0xe>
      return const_iterator(__y);
 80122f4:	f107 0314 	add.w	r3, r7, #20
 80122f8:	6879      	ldr	r1, [r7, #4]
 80122fa:	4618      	mov	r0, r3
 80122fc:	f000 f811 	bl	8012322 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>
 8012300:	697b      	ldr	r3, [r7, #20]
    }
 8012302:	4618      	mov	r0, r3
 8012304:	371c      	adds	r7, #28
 8012306:	46bd      	mov	sp, r7
 8012308:	bd90      	pop	{r4, r7, pc}

0801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 801230a:	b580      	push	{r7, lr}
 801230c:	b082      	sub	sp, #8
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f7ff fc4e 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012318:	4603      	mov	r3, r0
 801231a:	4618      	mov	r0, r3
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}

08012322 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012322:	b480      	push	{r7}
 8012324:	b083      	sub	sp, #12
 8012326:	af00      	add	r7, sp, #0
 8012328:	6078      	str	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	601a      	str	r2, [r3, #0]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	4618      	mov	r0, r3
 8012336:	370c      	adds	r7, #12
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	7239      	strb	r1, [r7, #8]
 801234a:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f7ff f85b 	bl	8011408 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8012352:	4603      	mov	r3, r0
 8012354:	ed93 7b00 	vldr	d7, [r3]
 8012358:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	edc3 7a00 	vstr	s15, [r3]
	    { }
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	4618      	mov	r0, r3
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <_ZNSt22_Optional_payload_baseIfEC1IJdEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801236c:	b5b0      	push	{r4, r5, r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	7239      	strb	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8012378:	68fc      	ldr	r4, [r7, #12]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff f844 	bl	8011408 <_ZSt7forwardIdEOT_RNSt16remove_referenceIS0_E4typeE>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	4629      	mov	r1, r5
 8012386:	4620      	mov	r0, r4
 8012388:	f7ff ffda 	bl	8012340 <_ZNSt22_Optional_payload_baseIfE8_StorageIfLb1EEC1IJdEEESt10in_place_tDpOT_>
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2201      	movs	r2, #1
 8012390:	711a      	strb	r2, [r3, #4]
	{ }
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	4618      	mov	r0, r3
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bdb0      	pop	{r4, r5, r7, pc}

0801239c <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d00a      	beq.n	80123c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f000 fd1a 	bl	8012de8 <_ZSt11__addressofImEPT_RS0_>
 80123b4:	4603      	mov	r3, r0
 80123b6:	4618      	mov	r0, r3
 80123b8:	f000 fd21 	bl	8012dfe <_ZSt8_DestroyImEvPT_>
	  for (; __first != __last; ++__first)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	3304      	adds	r3, #4
 80123c0:	607b      	str	r3, [r7, #4]
 80123c2:	e7f0      	b.n	80123a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPmEEvT_S3_+0xa>
	}
 80123c4:	bf00      	nop
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80123cc:	b480      	push	{r7}
 80123ce:	b083      	sub	sp, #12
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
 80123d6:	bf00      	nop
 80123d8:	370c      	adds	r7, #12
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr

080123e2 <_ZNSaISt14_Fwd_list_nodeIhEEC1ERKS1_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b082      	sub	sp, #8
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80123ec:	6839      	ldr	r1, [r7, #0]
 80123ee:	6878      	ldr	r0, [r7, #4]
 80123f0:	f000 fd10 	bl	8012e14 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	4618      	mov	r0, r3
 80123f8:	3708      	adds	r7, #8
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <_ZNSt14_Fwd_list_baseIhSaIhEE11_M_get_nodeEv>:
      _M_get_node()
 80123fe:	b580      	push	{r7, lr}
 8012400:	b084      	sub	sp, #16
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
	auto __ptr = _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7ff fe44 	bl	8012094 <_ZNSt14_Fwd_list_baseIhSaIhEE21_M_get_Node_allocatorEv>
 801240c:	4603      	mov	r3, r0
 801240e:	2101      	movs	r1, #1
 8012410:	4618      	mov	r0, r3
 8012412:	f000 fd0b 	bl	8012e2c <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>
 8012416:	60f8      	str	r0, [r7, #12]
	return std::__to_address(__ptr);
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f000 fd27 	bl	8012e6c <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>
 801241e:	4603      	mov	r3, r0
      }
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012428:	b480      	push	{r7}
 801242a:	b083      	sub	sp, #12
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	4618      	mov	r0, r3
 8012434:	370c      	adds	r7, #12
 8012436:	46bd      	mov	sp, r7
 8012438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243c:	4770      	bx	lr

0801243e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801243e:	b590      	push	{r4, r7, lr}
 8012440:	b083      	sub	sp, #12
 8012442:	af00      	add	r7, sp, #0
 8012444:	6078      	str	r0, [r7, #4]
 8012446:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012448:	6838      	ldr	r0, [r7, #0]
 801244a:	f7ff ffed 	bl	8012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801244e:	4603      	mov	r3, r0
 8012450:	781c      	ldrb	r4, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	4619      	mov	r1, r3
 8012456:	2001      	movs	r0, #1
 8012458:	f7fc fbc4 	bl	800ebe4 <_ZnwjPv>
 801245c:	4603      	mov	r3, r0
 801245e:	4622      	mov	r2, r4
 8012460:	701a      	strb	r2, [r3, #0]
 8012462:	4618      	mov	r0, r3
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	bd90      	pop	{r4, r7, pc}

0801246a <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE9constructIhJRKhEEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801246a:	b580      	push	{r7, lr}
 801246c:	b084      	sub	sp, #16
 801246e:	af00      	add	r7, sp, #0
 8012470:	60f8      	str	r0, [r7, #12]
 8012472:	60b9      	str	r1, [r7, #8]
 8012474:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7ff ffd6 	bl	8012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 801247c:	4603      	mov	r3, r0
 801247e:	4619      	mov	r1, r3
 8012480:	68b8      	ldr	r0, [r7, #8]
 8012482:	f7ff ffdc 	bl	801243e <_ZSt12construct_atIhJRKhEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8012486:	bf00      	nop
 8012488:	3710      	adds	r7, #16
 801248a:	46bd      	mov	sp, r7
 801248c:	bd80      	pop	{r7, pc}

0801248e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801248e:	b590      	push	{r4, r7, lr}
 8012490:	b083      	sub	sp, #12
 8012492:	af00      	add	r7, sp, #0
 8012494:	6078      	str	r0, [r7, #4]
 8012496:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 fcf2 	bl	8012e82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801249e:	4604      	mov	r4, r0
 80124a0:	6838      	ldr	r0, [r7, #0]
 80124a2:	f7ff fa03 	bl	80118ac <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 80124a6:	4603      	mov	r3, r0
 80124a8:	4619      	mov	r1, r3
 80124aa:	4620      	mov	r0, r4
 80124ac:	f000 fcf4 	bl	8012e98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 80124b0:	bf00      	nop
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd90      	pop	{r4, r7, pc}

080124b8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 fcdd 	bl	8012e82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2201      	movs	r2, #1
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	4618      	mov	r0, r3
 80124d0:	f000 fcee 	bl	8012eb0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <_ZNSaImEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f000 fd00 	bl	8012eee <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	4618      	mov	r0, r3
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	68b9      	ldr	r1, [r7, #8]
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	f000 fcfc 	bl	8012f06 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>
 801250e:	4603      	mov	r3, r0
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	689b      	ldr	r3, [r3, #8]
 8012524:	4618      	mov	r0, r3
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012530:	b480      	push	{r7}
 8012532:	b083      	sub	sp, #12
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	4618      	mov	r0, r3
 801253e:	370c      	adds	r7, #12
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr

08012548 <_ZN9__gnu_cxx16__aligned_bufferIhE7_M_addrEv>:
      _M_addr() noexcept
 8012548:	b480      	push	{r7}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8012550:	687b      	ldr	r3, [r7, #4]
      }
 8012552:	4618      	mov	r0, r3
 8012554:	370c      	adds	r7, #12
 8012556:	46bd      	mov	sp, r7
 8012558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801255c:	4770      	bx	lr

0801255e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801255e:	b480      	push	{r7}
 8012560:	b083      	sub	sp, #12
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	3304      	adds	r3, #4
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012574:	4770      	bx	lr

08012576 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012576:	b590      	push	{r4, r7, lr}
 8012578:	b087      	sub	sp, #28
 801257a:	af00      	add	r7, sp, #0
 801257c:	60f8      	str	r0, [r7, #12]
 801257e:	60b9      	str	r1, [r7, #8]
 8012580:	607a      	str	r2, [r7, #4]
 8012582:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d01b      	beq.n	80125c2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801258a:	68fc      	ldr	r4, [r7, #12]
 801258c:	68b8      	ldr	r0, [r7, #8]
 801258e:	f7ff fb11 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012592:	4603      	mov	r3, r0
 8012594:	683a      	ldr	r2, [r7, #0]
 8012596:	4619      	mov	r1, r3
 8012598:	4620      	mov	r0, r4
 801259a:	f7fe fcb4 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 801259e:	4603      	mov	r3, r0
 80125a0:	f083 0301 	eor.w	r3, r3, #1
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d006      	beq.n	80125b8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	607b      	str	r3, [r7, #4]
 80125ae:	68b8      	ldr	r0, [r7, #8]
 80125b0:	f7ff f860 	bl	8011674 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80125b4:	60b8      	str	r0, [r7, #8]
 80125b6:	e7e5      	b.n	8012584 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 80125b8:	68b8      	ldr	r0, [r7, #8]
 80125ba:	f7ff f84f 	bl	801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80125be:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80125c0:	e7e0      	b.n	8012584 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 80125c2:	f107 0314 	add.w	r3, r7, #20
 80125c6:	6879      	ldr	r1, [r7, #4]
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7ff fb43 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80125ce:	697b      	ldr	r3, [r7, #20]
    }
 80125d0:	4618      	mov	r0, r3
 80125d2:	371c      	adds	r7, #28
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd90      	pop	{r4, r7, pc}

080125d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f000 fca8 	bl	8012f36 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 80125e6:	4603      	mov	r3, r0
 80125e8:	4618      	mov	r0, r3
 80125ea:	3708      	adds	r7, #8
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 80125f0:	b480      	push	{r7}
 80125f2:	b083      	sub	sp, #12
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	683a      	ldr	r2, [r7, #0]
 80125fe:	601a      	str	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	370c      	adds	r7, #12
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr

0801260e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 801260e:	b580      	push	{r7, lr}
 8012610:	b082      	sub	sp, #8
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 fc33 	bl	8012e82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 801261c:	4603      	mov	r3, r0
 801261e:	2101      	movs	r1, #1
 8012620:	4618      	mov	r0, r3
 8012622:	f000 fc93 	bl	8012f4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>
 8012626:	4603      	mov	r3, r0
 8012628:	4618      	mov	r0, r3
 801262a:	3708      	adds	r7, #8
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012634:	b086      	sub	sp, #24
 8012636:	af02      	add	r7, sp, #8
 8012638:	60f8      	str	r0, [r7, #12]
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	607a      	str	r2, [r7, #4]
 801263e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	4619      	mov	r1, r3
 8012644:	2020      	movs	r0, #32
 8012646:	f7fc facd 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f000 fc19 	bl	8012e82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8012650:	4604      	mov	r4, r0
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	f7ff f92a 	bl	80118ac <_ZNSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>
 8012658:	4605      	mov	r5, r0
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f7ff f943 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012660:	4606      	mov	r6, r0
 8012662:	6838      	ldr	r0, [r7, #0]
 8012664:	f7ff f94a 	bl	80118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012668:	4680      	mov	r8, r0
 801266a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801266c:	f7ff f951 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012670:	4603      	mov	r3, r0
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	4643      	mov	r3, r8
 8012676:	4632      	mov	r2, r6
 8012678:	4629      	mov	r1, r5
 801267a:	4620      	mov	r0, r4
 801267c:	f000 fcc0 	bl	8013000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8012680:	bf00      	nop
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801268a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKhN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801268a:	b580      	push	{r7, lr}
 801268c:	b084      	sub	sp, #16
 801268e:	af00      	add	r7, sp, #0
 8012690:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	f107 030c 	add.w	r3, r7, #12
 801269a:	4611      	mov	r1, r2
 801269c:	4618      	mov	r0, r3
 801269e:	f7ff fad9 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	4618      	mov	r0, r3
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <_ZNKSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80126ac:	b480      	push	{r7}
 80126ae:	b083      	sub	sp, #12
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	695b      	ldr	r3, [r3, #20]
 80126b8:	4618      	mov	r0, r3
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr

080126c4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	3310      	adds	r3, #16
 80126d0:	4618      	mov	r0, r3
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	681a      	ldr	r2, [r3, #0]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	601a      	str	r2, [r3, #0]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 fca1 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80126f6:	4603      	mov	r3, r0
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	605a      	str	r2, [r3, #4]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	4618      	mov	r0, r3
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012708:	b590      	push	{r4, r7, lr}
 801270a:	b08b      	sub	sp, #44	; 0x2c
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8012714:	68b8      	ldr	r0, [r7, #8]
 8012716:	f7fe fad1 	bl	8010cbc <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 801271a:	4603      	mov	r3, r0
 801271c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f7ff ff1d 	bl	801255e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_M_endEv>
 8012724:	4603      	mov	r3, r0
 8012726:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d020      	beq.n	8012776 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012738:	68bc      	ldr	r4, [r7, #8]
 801273a:	69bb      	ldr	r3, [r7, #24]
 801273c:	4618      	mov	r0, r3
 801273e:	f7ff fa39 	bl	8011bb4 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012742:	4603      	mov	r3, r0
 8012744:	461a      	mov	r2, r3
 8012746:	6879      	ldr	r1, [r7, #4]
 8012748:	4620      	mov	r0, r4
 801274a:	f7fe fbdc 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 801274e:	4603      	mov	r3, r0
 8012750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8012754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	4618      	mov	r0, r3
 8012760:	f7fe ff88 	bl	8011674 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012764:	4603      	mov	r3, r0
 8012766:	e004      	b.n	8012772 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe ff76 	bl	801165c <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012770:	4603      	mov	r3, r0
 8012772:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8012774:	e7db      	b.n	801272e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8012776:	697a      	ldr	r2, [r7, #20]
 8012778:	f107 0310 	add.w	r3, r7, #16
 801277c:	4611      	mov	r1, r2
 801277e:	4618      	mov	r0, r3
 8012780:	f7ff fa68 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8012784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012788:	2b00      	cmp	r3, #0
 801278a:	d01d      	beq.n	80127c8 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 801278c:	68b8      	ldr	r0, [r7, #8]
 801278e:	f000 fc5e 	bl	801304e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>
 8012792:	4603      	mov	r3, r0
 8012794:	61fb      	str	r3, [r7, #28]
 8012796:	f107 021c 	add.w	r2, r7, #28
 801279a:	f107 0310 	add.w	r3, r7, #16
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f7fe fb81 	bl	8010ea8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEES7_>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d008      	beq.n	80127be <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 80127ac:	f107 0214 	add.w	r2, r7, #20
 80127b0:	f107 0318 	add.w	r3, r7, #24
 80127b4:	4619      	mov	r1, r3
 80127b6:	68f8      	ldr	r0, [r7, #12]
 80127b8:	f000 fc5a 	bl	8013070 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 80127bc:	e025      	b.n	801280a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 80127be:	f107 0310 	add.w	r3, r7, #16
 80127c2:	4618      	mov	r0, r3
 80127c4:	f000 f84a 	bl	801285c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80127c8:	68bc      	ldr	r4, [r7, #8]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7ff fd9c 	bl	801230a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127d2:	4603      	mov	r3, r0
 80127d4:	687a      	ldr	r2, [r7, #4]
 80127d6:	4619      	mov	r1, r3
 80127d8:	4620      	mov	r0, r4
 80127da:	f7fe fb94 	bl	8010f06 <_ZNKSt4lessIhEclERKhS2_>
 80127de:	4603      	mov	r3, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d008      	beq.n	80127f6 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80127e4:	f107 0214 	add.w	r2, r7, #20
 80127e8:	f107 0318 	add.w	r3, r7, #24
 80127ec:	4619      	mov	r1, r3
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f000 fc3e 	bl	8013070 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 80127f4:	e009      	b.n	801280a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80127f6:	2300      	movs	r3, #0
 80127f8:	623b      	str	r3, [r7, #32]
 80127fa:	f107 0220 	add.w	r2, r7, #32
 80127fe:	f107 0310 	add.w	r3, r7, #16
 8012802:	4619      	mov	r1, r3
 8012804:	68f8      	ldr	r0, [r7, #12]
 8012806:	f000 f84b 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	372c      	adds	r7, #44	; 0x2c
 801280e:	46bd      	mov	sp, r7
 8012810:	bd90      	pop	{r4, r7, pc}

08012812 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8012812:	b480      	push	{r7}
 8012814:	b083      	sub	sp, #12
 8012816:	af00      	add	r7, sp, #0
 8012818:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	330c      	adds	r3, #12
 801281e:	4618      	mov	r0, r3
 8012820:	370c      	adds	r7, #12
 8012822:	46bd      	mov	sp, r7
 8012824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012828:	4770      	bx	lr

0801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 801282a:	b580      	push	{r7, lr}
 801282c:	b084      	sub	sp, #16
 801282e:	af00      	add	r7, sp, #0
 8012830:	60f8      	str	r0, [r7, #12]
 8012832:	60b9      	str	r1, [r7, #8]
 8012834:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8012836:	68b8      	ldr	r0, [r7, #8]
 8012838:	f000 fbfe 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801283c:	4603      	mov	r3, r0
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	601a      	str	r2, [r3, #0]
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f000 fbf7 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801284a:	4603      	mov	r3, r0
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	605a      	str	r2, [r3, #4]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	4618      	mov	r0, r3
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4618      	mov	r0, r3
 801286a:	f007 fd74 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801286e:	4602      	mov	r2, r0
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	601a      	str	r2, [r3, #0]
	return *this;
 8012874:	687b      	ldr	r3, [r7, #4]
      }
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801287e:	b580      	push	{r7, lr}
 8012880:	b082      	sub	sp, #8
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4618      	mov	r0, r3
 801288c:	f007 fd61 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8012890:	4602      	mov	r2, r0
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	601a      	str	r2, [r3, #0]
	return *this;
 8012896:	687b      	ldr	r3, [r7, #4]
      }
 8012898:	4618      	mov	r0, r3
 801289a:	3708      	adds	r7, #8
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	60f8      	str	r0, [r7, #12]
 80128a8:	60b9      	str	r1, [r7, #8]
 80128aa:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 80128ac:	68b8      	ldr	r0, [r7, #8]
 80128ae:	f000 fbc3 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 80128b2:	4603      	mov	r3, r0
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	601a      	str	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	605a      	str	r2, [r3, #4]
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	4618      	mov	r0, r3
 80128c6:	3710      	adds	r7, #16
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <_ZNKSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	3310      	adds	r3, #16
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 fbe2 	bl	80130a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>
 80128de:	4603      	mov	r3, r0
 80128e0:	4618      	mov	r0, r3
 80128e2:	3708      	adds	r7, #8
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <_ZNKSt10_Select1stISt4pairIKhN3ADC8InstanceEEEclERKS4_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80128e8:	b480      	push	{r7}
 80128ea:	b083      	sub	sp, #12
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	4618      	mov	r0, r3
 80128f6:	370c      	adds	r7, #12
 80128f8:	46bd      	mov	sp, r7
 80128fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fe:	4770      	bx	lr

08012900 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8012900:	b480      	push	{r7}
 8012902:	b083      	sub	sp, #12
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	689b      	ldr	r3, [r3, #8]
 801290c:	4618      	mov	r0, r3
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	3304      	adds	r3, #4
 8012924:	4618      	mov	r0, r3
 8012926:	370c      	adds	r7, #12
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr

08012930 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012930:	b590      	push	{r4, r7, lr}
 8012932:	b087      	sub	sp, #28
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
 801293c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d01b      	beq.n	801297c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012944:	68fc      	ldr	r4, [r7, #12]
 8012946:	68b8      	ldr	r0, [r7, #8]
 8012948:	f7ff fb34 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801294c:	4603      	mov	r3, r0
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	4619      	mov	r1, r3
 8012952:	4620      	mov	r0, r4
 8012954:	f7fe fb94 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012958:	4603      	mov	r3, r0
 801295a:	f083 0301 	eor.w	r3, r3, #1
 801295e:	b2db      	uxtb	r3, r3
 8012960:	2b00      	cmp	r3, #0
 8012962:	d006      	beq.n	8012972 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	607b      	str	r3, [r7, #4]
 8012968:	68b8      	ldr	r0, [r7, #8]
 801296a:	f000 fba6 	bl	80130ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 801296e:	60b8      	str	r0, [r7, #8]
 8012970:	e7e5      	b.n	801293e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8012972:	68b8      	ldr	r0, [r7, #8]
 8012974:	f000 f931 	bl	8012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012978:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801297a:	e7e0      	b.n	801293e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 801297c:	f107 0314 	add.w	r3, r7, #20
 8012980:	6879      	ldr	r1, [r7, #4]
 8012982:	4618      	mov	r0, r3
 8012984:	f7ff fb77 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8012988:	697b      	ldr	r3, [r7, #20]
    }
 801298a:	4618      	mov	r0, r3
 801298c:	371c      	adds	r7, #28
 801298e:	46bd      	mov	sp, r7
 8012990:	bd90      	pop	{r4, r7, pc}

08012992 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8012992:	b580      	push	{r7, lr}
 8012994:	b082      	sub	sp, #8
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 fb99 	bl	80130d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 80129a0:	4603      	mov	r3, r0
 80129a2:	4618      	mov	r0, r3
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}

080129aa <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>:
      constexpr _Head_base(const _Head& __h)
 80129aa:	b480      	push	{r7}
 80129ac:	b083      	sub	sp, #12
 80129ae:	af00      	add	r7, sp, #0
 80129b0:	6078      	str	r0, [r7, #4]
 80129b2:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	601a      	str	r2, [r3, #0]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4618      	mov	r0, r3
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f000 fb89 	bl	80130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2101      	movs	r1, #1
 80129da:	4618      	mov	r0, r3
 80129dc:	f000 fb8f 	bl	80130fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>
 80129e0:	4603      	mov	r3, r0
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS2_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80129ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ee:	b086      	sub	sp, #24
 80129f0:	af02      	add	r7, sp, #8
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	607a      	str	r2, [r7, #4]
 80129f8:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	4619      	mov	r1, r3
 80129fe:	2024      	movs	r0, #36	; 0x24
 8012a00:	f7fc f8f0 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f000 fb6f 	bl	80130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	68b8      	ldr	r0, [r7, #8]
 8012a0e:	f7ff f963 	bl	8011cd8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8012a12:	4605      	mov	r5, r0
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7fe ff66 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012a1a:	4606      	mov	r6, r0
 8012a1c:	6838      	ldr	r0, [r7, #0]
 8012a1e:	f7ff f978 	bl	8011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 8012a22:	4680      	mov	r8, r0
 8012a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012a26:	f7fe ff74 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	4643      	mov	r3, r8
 8012a30:	4632      	mov	r2, r6
 8012a32:	4629      	mov	r1, r5
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 fbbf 	bl	80131b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8012a3a:	bf00      	nop
 8012a3c:	3710      	adds	r7, #16
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012a44 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681a      	ldr	r2, [r3, #0]
 8012a50:	f107 030c 	add.w	r3, r7, #12
 8012a54:	4611      	mov	r1, r2
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7ff fb0d 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3710      	adds	r7, #16
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012a66:	b480      	push	{r7}
 8012a68:	b083      	sub	sp, #12
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	4618      	mov	r0, r3
 8012a74:	370c      	adds	r7, #12
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr

08012a7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8012a7e:	b480      	push	{r7}
 8012a80:	b083      	sub	sp, #12
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	3310      	adds	r3, #16
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	370c      	adds	r7, #12
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a94:	4770      	bx	lr

08012a96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012a96:	b590      	push	{r4, r7, lr}
 8012a98:	b08b      	sub	sp, #44	; 0x2c
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	60f8      	str	r0, [r7, #12]
 8012a9e:	60b9      	str	r1, [r7, #8]
 8012aa0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8012aa2:	68b8      	ldr	r0, [r7, #8]
 8012aa4:	f7ff ff2c 	bl	8012900 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8012aac:	68b8      	ldr	r0, [r7, #8]
 8012aae:	f7ff ff33 	bl	8012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 8012ab2:	4603      	mov	r3, r0
 8012ab4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8012abc:	69bb      	ldr	r3, [r7, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d020      	beq.n	8012b04 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012ac6:	68bc      	ldr	r4, [r7, #8]
 8012ac8:	69bb      	ldr	r3, [r7, #24]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7ff fa72 	bl	8011fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	6879      	ldr	r1, [r7, #4]
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f7fe fad2 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012adc:	4603      	mov	r3, r0
 8012ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8012ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d005      	beq.n	8012af6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f000 fae4 	bl	80130ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012af2:	4603      	mov	r3, r0
 8012af4:	e004      	b.n	8012b00 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f000 f86e 	bl	8012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012afe:	4603      	mov	r3, r0
 8012b00:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8012b02:	e7db      	b.n	8012abc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	f107 0310 	add.w	r3, r7, #16
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7ff fab2 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8012b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d01d      	beq.n	8012b56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8012b1a:	68b8      	ldr	r0, [r7, #8]
 8012b1c:	f000 fb68 	bl	80131f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8012b20:	4603      	mov	r3, r0
 8012b22:	61fb      	str	r3, [r7, #28]
 8012b24:	f107 021c 	add.w	r2, r7, #28
 8012b28:	f107 0310 	add.w	r3, r7, #16
 8012b2c:	4611      	mov	r1, r2
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fe fa77 	bl	8011022 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEES8_>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d008      	beq.n	8012b4c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8012b3a:	f107 0214 	add.w	r2, r7, #20
 8012b3e:	f107 0318 	add.w	r3, r7, #24
 8012b42:	4619      	mov	r1, r3
 8012b44:	68f8      	ldr	r0, [r7, #12]
 8012b46:	f000 fb64 	bl	8013212 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8012b4a:	e025      	b.n	8012b98 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8012b4c:	f107 0310 	add.w	r3, r7, #16
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 f831 	bl	8012bb8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012b56:	68bc      	ldr	r4, [r7, #8]
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fe fe4c 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012b60:	4603      	mov	r3, r0
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	4619      	mov	r1, r3
 8012b66:	4620      	mov	r0, r4
 8012b68:	f7fe fa8a 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d008      	beq.n	8012b84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8012b72:	f107 0214 	add.w	r2, r7, #20
 8012b76:	f107 0318 	add.w	r3, r7, #24
 8012b7a:	4619      	mov	r1, r3
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f000 fb48 	bl	8013212 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>
 8012b82:	e009      	b.n	8012b98 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8012b84:	2300      	movs	r3, #0
 8012b86:	623b      	str	r3, [r7, #32]
 8012b88:	f107 0220 	add.w	r2, r7, #32
 8012b8c:	f107 0310 	add.w	r3, r7, #16
 8012b90:	4619      	mov	r1, r3
 8012b92:	68f8      	ldr	r0, [r7, #12]
 8012b94:	f7ff fe84 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	372c      	adds	r7, #44	; 0x2c
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd90      	pop	{r4, r7, pc}

08012ba0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8012ba0:	b480      	push	{r7}
 8012ba2:	b083      	sub	sp, #12
 8012ba4:	af00      	add	r7, sp, #0
 8012ba6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	330c      	adds	r3, #12
 8012bac:	4618      	mov	r0, r3
 8012bae:	370c      	adds	r7, #12
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb6:	4770      	bx	lr

08012bb8 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f007 fbc6 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	601a      	str	r2, [r3, #0]
	return *this;
 8012bd0:	687b      	ldr	r3, [r7, #4]
      }
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012bda:	b480      	push	{r7}
 8012bdc:	b083      	sub	sp, #12
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	68db      	ldr	r3, [r3, #12]
 8012be6:	4618      	mov	r0, r3
 8012be8:	370c      	adds	r7, #12
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr

08012bf2 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b082      	sub	sp, #8
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f007 fba7 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8012c04:	4602      	mov	r2, r0
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	601a      	str	r2, [r3, #0]
	return *this;
 8012c0a:	687b      	ldr	r3, [r7, #4]
      }
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	3310      	adds	r3, #16
 8012c20:	4618      	mov	r0, r3
 8012c22:	f000 fb0f 	bl	8013244 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>
 8012c26:	4603      	mov	r3, r0
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3708      	adds	r7, #8
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
 8012c38:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	370c      	adds	r7, #12
 8012c40:	46bd      	mov	sp, r7
 8012c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c46:	4770      	bx	lr

08012c48 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012c48:	b590      	push	{r4, r7, lr}
 8012c4a:	b083      	sub	sp, #12
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
 8012c50:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 fa48 	bl	80130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012c58:	4604      	mov	r4, r0
 8012c5a:	6838      	ldr	r0, [r7, #0]
 8012c5c:	f7ff f83c 	bl	8011cd8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 8012c60:	4603      	mov	r3, r0
 8012c62:	4619      	mov	r1, r3
 8012c64:	4620      	mov	r0, r4
 8012c66:	f000 faf9 	bl	801325c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 8012c6a:	bf00      	nop
 8012c6c:	370c      	adds	r7, #12
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	bd90      	pop	{r4, r7, pc}

08012c72 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8012c72:	b580      	push	{r7, lr}
 8012c74:	b082      	sub	sp, #8
 8012c76:	af00      	add	r7, sp, #0
 8012c78:	6078      	str	r0, [r7, #4]
 8012c7a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 fa33 	bl	80130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2201      	movs	r2, #1
 8012c86:	6839      	ldr	r1, [r7, #0]
 8012c88:	4618      	mov	r0, r3
 8012c8a:	f000 faf3 	bl	8013274 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>
 8012c8e:	bf00      	nop
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <_ZSt10destroy_atIhEvPT_>:
    destroy_at(_Tp* __location)
 8012c96:	b480      	push	{r7}
 8012c98:	b083      	sub	sp, #12
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
    }
 8012c9e:	bf00      	nop
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <_ZSt9addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
   *  @param  __r  Reference to an object or function.
   *  @return   The actual address.
  */
  template<typename _Tp>
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b082      	sub	sp, #8
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8012cb2:	6878      	ldr	r0, [r7, #4]
 8012cb4:	f000 fafd 	bl	80132b2 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3708      	adds	r7, #8
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}

08012cc2 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012cc2:	b580      	push	{r7, lr}
 8012cc4:	b088      	sub	sp, #32
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	60f8      	str	r0, [r7, #12]
 8012cca:	60b9      	str	r1, [r7, #8]
 8012ccc:	607a      	str	r2, [r7, #4]
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	61fb      	str	r3, [r7, #28]
 8012cd2:	68bb      	ldr	r3, [r7, #8]
 8012cd4:	61bb      	str	r3, [r7, #24]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012cda:	f7fb ff7b 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d003      	beq.n	8012cec <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8012ce4:	69b8      	ldr	r0, [r7, #24]
 8012ce6:	f007 facb 	bl	801a280 <_ZdlPv>
	    return;
 8012cea:	e005      	b.n	8012cf8 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012cec:	697a      	ldr	r2, [r7, #20]
 8012cee:	69b9      	ldr	r1, [r7, #24]
 8012cf0:	69f8      	ldr	r0, [r7, #28]
 8012cf2:	f000 fc32 	bl	801355a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8012cf6:	bf00      	nop
 8012cf8:	bf00      	nop
 8012cfa:	3720      	adds	r7, #32
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fd fff0 	bl	8010cf0 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8012d10:	4603      	mov	r3, r0
 8012d12:	4618      	mov	r0, r3
 8012d14:	f000 fae4 	bl	80132e0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}

08012d22 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b084      	sub	sp, #16
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
 8012d2a:	6039      	str	r1, [r7, #0]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	60fb      	str	r3, [r7, #12]
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012d34:	f7fb ff4e 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	4618      	mov	r0, r3
 8012d44:	f007 faa0 	bl	801a288 <_Znwj>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	e006      	b.n	8012d5a <_ZNSt16allocator_traitsISaImEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	68b9      	ldr	r1, [r7, #8]
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f000 fc11 	bl	8013578 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8012d56:	4603      	mov	r3, r0
 8012d58:	bf00      	nop
      { return __a.allocate(__n); }
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3710      	adds	r7, #16
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}

08012d62 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012d62:	b580      	push	{r7, lr}
 8012d64:	b084      	sub	sp, #16
 8012d66:	af00      	add	r7, sp, #0
 8012d68:	60f8      	str	r0, [r7, #12]
 8012d6a:	60b9      	str	r1, [r7, #8]
 8012d6c:	607a      	str	r2, [r7, #4]
 8012d6e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	687a      	ldr	r2, [r7, #4]
 8012d74:	68b9      	ldr	r1, [r7, #8]
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f000 facc 	bl	8013314 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8012d7c:	4603      	mov	r3, r0
      }
 8012d7e:	4618      	mov	r0, r3
 8012d80:	3710      	adds	r7, #16
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd80      	pop	{r7, pc}

08012d86 <_ZSt10destroy_atImEvPT_>:
    destroy_at(_Tp* __location)
 8012d86:	b480      	push	{r7}
 8012d88:	b083      	sub	sp, #12
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
    }
 8012d8e:	bf00      	nop
 8012d90:	370c      	adds	r7, #12
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr

08012d9a <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012d9a:	b480      	push	{r7}
 8012d9c:	b083      	sub	sp, #12
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	4618      	mov	r0, r3
 8012da8:	370c      	adds	r7, #12
 8012daa:	46bd      	mov	sp, r7
 8012dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db0:	4770      	bx	lr

08012db2 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012db2:	b480      	push	{r7}
 8012db4:	b083      	sub	sp, #12
 8012db6:	af00      	add	r7, sp, #0
 8012db8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	370c      	adds	r7, #12
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr

08012dca <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
      deallocate(_Tp* __p, size_type __t)
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b084      	sub	sp, #16
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	60f8      	str	r0, [r7, #12]
 8012dd2:	60b9      	str	r1, [r7, #8]
 8012dd4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	4619      	mov	r1, r3
 8012ddc:	68b8      	ldr	r0, [r7, #8]
 8012dde:	f007 fa51 	bl	801a284 <_ZdlPvj>
      }
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <_ZSt11__addressofImEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	370c      	adds	r7, #12
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr

08012dfe <_ZSt8_DestroyImEvPT_>:
    _Destroy(_Tp* __pointer)
 8012dfe:	b580      	push	{r7, lr}
 8012e00:	b082      	sub	sp, #8
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f7ff ffbd 	bl	8012d86 <_ZSt10destroy_atImEvPT_>
    }
 8012e0c:	bf00      	nop
 8012e0e:	3708      	adds	r7, #8
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEEC1ERKS3_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8012e14:	b480      	push	{r7}
 8012e16:	b083      	sub	sp, #12
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	370c      	adds	r7, #12
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr

08012e2c <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	60fb      	str	r3, [r7, #12]
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012e3e:	f7fb fec9 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d006      	beq.n	8012e56 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	00db      	lsls	r3, r3, #3
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f007 fa1b 	bl	801a288 <_Znwj>
 8012e52:	4603      	mov	r3, r0
 8012e54:	e006      	b.n	8012e64 <_ZNSt16allocator_traitsISaISt14_Fwd_list_nodeIhEEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012e56:	2200      	movs	r2, #0
 8012e58:	68b9      	ldr	r1, [r7, #8]
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f000 fbd4 	bl	8013608 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>
 8012e60:	4603      	mov	r3, r0
 8012e62:	bf00      	nop
      { return __a.allocate(__n); }
 8012e64:	4618      	mov	r0, r3
 8012e66:	3710      	adds	r7, #16
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	bd80      	pop	{r7, pc}

08012e6c <_ZSt12__to_addressISt14_Fwd_list_nodeIhEEPT_S3_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8012e74:	687b      	ldr	r3, [r7, #4]
    }
 8012e76:	4618      	mov	r0, r3
 8012e78:	370c      	adds	r7, #12
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr

08012e82 <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8012e82:	b480      	push	{r7}
 8012e84:	b083      	sub	sp, #12
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr

08012e98 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8012ea2:	6838      	ldr	r0, [r7, #0]
 8012ea4:	f000 fa53 	bl	801334e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>
	}
 8012ea8:	bf00      	nop
 8012eaa:	3708      	adds	r7, #8
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b088      	sub	sp, #32
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	61fb      	str	r3, [r7, #28]
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	61bb      	str	r3, [r7, #24]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012ec8:	f7fb fe84 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d003      	beq.n	8012eda <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8012ed2:	69b8      	ldr	r0, [r7, #24]
 8012ed4:	f007 f9d4 	bl	801a280 <_ZdlPv>
	    return;
 8012ed8:	e005      	b.n	8012ee6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8012eda:	697a      	ldr	r2, [r7, #20]
 8012edc:	69b9      	ldr	r1, [r7, #24]
 8012ede:	69f8      	ldr	r0, [r7, #28]
 8012ee0:	f000 fbb1 	bl	8013646 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8012ee4:	bf00      	nop
 8012ee6:	bf00      	nop
 8012ee8:	3720      	adds	r7, #32
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <_ZN9__gnu_cxx13new_allocatorImEC1ERKS1_>:
 8012eee:	b480      	push	{r7}
 8012ef0:	b083      	sub	sp, #12
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
 8012ef6:	6039      	str	r1, [r7, #0]
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	4618      	mov	r0, r3
 8012efc:	370c      	adds	r7, #12
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET0_T_SA_S9_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8012f06:	b590      	push	{r4, r7, lr}
 8012f08:	b085      	sub	sp, #20
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	60f8      	str	r0, [r7, #12]
 8012f0e:	60b9      	str	r1, [r7, #8]
 8012f10:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8012f12:	68f8      	ldr	r0, [r7, #12]
 8012f14:	f000 fa25 	bl	8013362 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8012f18:	4604      	mov	r4, r0
 8012f1a:	68b8      	ldr	r0, [r7, #8]
 8012f1c:	f000 fa21 	bl	8013362 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>
 8012f20:	4603      	mov	r3, r0
 8012f22:	687a      	ldr	r2, [r7, #4]
 8012f24:	4619      	mov	r1, r3
 8012f26:	4620      	mov	r0, r4
 8012f28:	f000 fa26 	bl	8013378 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>
 8012f2c:	4603      	mov	r3, r0
    }
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3714      	adds	r7, #20
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd90      	pop	{r4, r7, pc}

08012f36 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8012f36:	b480      	push	{r7}
 8012f38:	b083      	sub	sp, #12
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	4618      	mov	r0, r3
 8012f42:	370c      	adds	r7, #12
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	60fb      	str	r3, [r7, #12]
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012f5e:	f7fb fe39 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d006      	beq.n	8012f76 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	015b      	lsls	r3, r3, #5
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f007 f98b 	bl	801a288 <_Znwj>
 8012f72:	4603      	mov	r3, r0
 8012f74:	e006      	b.n	8012f84 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012f76:	2200      	movs	r2, #0
 8012f78:	68b9      	ldr	r1, [r7, #8]
 8012f7a:	68f8      	ldr	r0, [r7, #12]
 8012f7c:	f000 fb9c 	bl	80136b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>
 8012f80:	4603      	mov	r3, r0
 8012f82:	bf00      	nop
      { return __a.allocate(__n); }
 8012f84:	4618      	mov	r0, r3
 8012f86:	3710      	adds	r7, #16
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <_ZNSt5tupleIJRKhEEC1EOS2_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b082      	sub	sp, #8
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	6078      	str	r0, [r7, #4]
 8012f94:	6039      	str	r1, [r7, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	4611      	mov	r1, r2
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f000 fa0e 	bl	80133be <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012fac:	b5b0      	push	{r4, r5, r7, lr}
 8012fae:	b088      	sub	sp, #32
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	60b9      	str	r1, [r7, #8]
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012fba:	68b8      	ldr	r0, [r7, #8]
 8012fbc:	f7fe fc93 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7fe fc9b 	bl	80118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012fc6:	4602      	mov	r2, r0
 8012fc8:	f107 0318 	add.w	r3, r7, #24
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7ff ffdc 	bl	8012f8c <_ZNSt5tupleIJRKhEEC1EOS2_>
 8012fd4:	f107 0418 	add.w	r4, r7, #24
 8012fd8:	6838      	ldr	r0, [r7, #0]
 8012fda:	f7fe fc9a 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	2010      	movs	r0, #16
 8012fe4:	f7fb fdfe 	bl	800ebe4 <_ZnwjPv>
 8012fe8:	4605      	mov	r5, r0
 8012fea:	7f3b      	ldrb	r3, [r7, #28]
 8012fec:	4622      	mov	r2, r4
 8012fee:	7d39      	ldrb	r1, [r7, #20]
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f000 fa1b 	bl	801342c <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8012ff6:	462b      	mov	r3, r5
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3720      	adds	r7, #32
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bdb0      	pop	{r4, r5, r7, pc}

08013000 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8013000:	b5b0      	push	{r4, r5, r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7fe fc69 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013014:	4604      	mov	r4, r0
 8013016:	6838      	ldr	r0, [r7, #0]
 8013018:	f7fe fc70 	bl	80118fc <_ZSt7forwardISt5tupleIJRKhEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801301c:	4605      	mov	r5, r0
 801301e:	6a38      	ldr	r0, [r7, #32]
 8013020:	f7fe fc77 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013024:	4603      	mov	r3, r0
 8013026:	462a      	mov	r2, r5
 8013028:	4621      	mov	r1, r4
 801302a:	68b8      	ldr	r0, [r7, #8]
 801302c:	f7ff ffbe 	bl	8012fac <_ZSt12construct_atISt4pairIKhN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8013030:	bf00      	nop
 8013032:	3710      	adds	r7, #16
 8013034:	46bd      	mov	sp, r7
 8013036:	bdb0      	pop	{r4, r5, r7, pc}

08013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	4618      	mov	r0, r3
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr

0801304e <_ZNSt8_Rb_treeIhSt4pairIKhN3ADC8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801304e:	b580      	push	{r7, lr}
 8013050:	b084      	sub	sp, #16
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	68da      	ldr	r2, [r3, #12]
 801305a:	f107 030c 	add.w	r3, r7, #12
 801305e:	4611      	mov	r1, r2
 8013060:	4618      	mov	r0, r3
 8013062:	f7fe fdf7 	bl	8011c54 <_ZNSt17_Rb_tree_iteratorISt4pairIKhN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	4618      	mov	r0, r3
 801306a:	3710      	adds	r7, #16
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKhN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013070:	b580      	push	{r7, lr}
 8013072:	b084      	sub	sp, #16
 8013074:	af00      	add	r7, sp, #0
 8013076:	60f8      	str	r0, [r7, #12]
 8013078:	60b9      	str	r1, [r7, #8]
 801307a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801307c:	68b8      	ldr	r0, [r7, #8]
 801307e:	f000 f9e9 	bl	8013454 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8013082:	4603      	mov	r3, r0
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	601a      	str	r2, [r3, #0]
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f7ff ffd4 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013090:	4603      	mov	r3, r0
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	605a      	str	r2, [r3, #4]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	4618      	mov	r0, r3
 801309c:	3710      	adds	r7, #16
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}

080130a2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b082      	sub	sp, #8
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f000 f9dd 	bl	801346a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>
 80130b0:	4603      	mov	r3, r0
 80130b2:	4618      	mov	r0, r3
 80130b4:	3708      	adds	r7, #8
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}

080130ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80130ba:	b480      	push	{r7}
 80130bc:	b083      	sub	sp, #12
 80130be:	af00      	add	r7, sp, #0
 80130c0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	689b      	ldr	r3, [r3, #8]
 80130c6:	4618      	mov	r0, r3
 80130c8:	370c      	adds	r7, #12
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr

080130d2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 80130d2:	b480      	push	{r7}
 80130d4:	b083      	sub	sp, #12
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4618      	mov	r0, r3
 80130de:	370c      	adds	r7, #12
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr

080130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80130e8:	b480      	push	{r7}
 80130ea:	b083      	sub	sp, #12
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	4618      	mov	r0, r3
 80130f4:	370c      	adds	r7, #12
 80130f6:	46bd      	mov	sp, r7
 80130f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fc:	4770      	bx	lr

080130fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80130fe:	b580      	push	{r7, lr}
 8013100:	b084      	sub	sp, #16
 8013102:	af00      	add	r7, sp, #0
 8013104:	6078      	str	r0, [r7, #4]
 8013106:	6039      	str	r1, [r7, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	60fb      	str	r3, [r7, #12]
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013110:	f7fb fd60 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d009      	beq.n	801312e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801311a:	68ba      	ldr	r2, [r7, #8]
 801311c:	4613      	mov	r3, r2
 801311e:	00db      	lsls	r3, r3, #3
 8013120:	4413      	add	r3, r2
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	4618      	mov	r0, r3
 8013126:	f007 f8af 	bl	801a288 <_Znwj>
 801312a:	4603      	mov	r3, r0
 801312c:	e006      	b.n	801313c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801312e:	2200      	movs	r2, #0
 8013130:	68b9      	ldr	r1, [r7, #8]
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	f000 faf9 	bl	801372a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>
 8013138:	4603      	mov	r3, r0
 801313a:	bf00      	nop
      { return __a.allocate(__n); }
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <_ZNSt5tupleIJRK3PinEEC1EOS3_>:
 8013144:	b580      	push	{r7, lr}
 8013146:	b082      	sub	sp, #8
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	683a      	ldr	r2, [r7, #0]
 8013152:	4611      	mov	r1, r2
 8013154:	4618      	mov	r0, r3
 8013156:	f000 f993 	bl	8013480 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	4618      	mov	r0, r3
 801315e:	3708      	adds	r7, #8
 8013160:	46bd      	mov	sp, r7
 8013162:	bd80      	pop	{r7, pc}

08013164 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013164:	b5b0      	push	{r4, r5, r7, lr}
 8013166:	b088      	sub	sp, #32
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
 8013170:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8013172:	68b8      	ldr	r0, [r7, #8]
 8013174:	f7fe fbb7 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7fe fdca 	bl	8011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 801317e:	4602      	mov	r2, r0
 8013180:	f107 0318 	add.w	r3, r7, #24
 8013184:	4611      	mov	r1, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f7ff ffdc 	bl	8013144 <_ZNSt5tupleIJRK3PinEEC1EOS3_>
 801318c:	f107 0418 	add.w	r4, r7, #24
 8013190:	6838      	ldr	r0, [r7, #0]
 8013192:	f7fe fbbe 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	4619      	mov	r1, r3
 801319a:	2014      	movs	r0, #20
 801319c:	f7fb fd22 	bl	800ebe4 <_ZnwjPv>
 80131a0:	4605      	mov	r5, r0
 80131a2:	7f3b      	ldrb	r3, [r7, #28]
 80131a4:	4622      	mov	r2, r4
 80131a6:	7d39      	ldrb	r1, [r7, #20]
 80131a8:	4628      	mov	r0, r5
 80131aa:	f000 f9a2 	bl	80134f2 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 80131ae:	462b      	mov	r3, r5
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bdb0      	pop	{r4, r5, r7, pc}

080131b8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80131b8:	b5b0      	push	{r4, r5, r7, lr}
 80131ba:	b084      	sub	sp, #16
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
 80131c4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f7fe fb8d 	bl	80118e6 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80131cc:	4604      	mov	r4, r0
 80131ce:	6838      	ldr	r0, [r7, #0]
 80131d0:	f7fe fd9f 	bl	8011d12 <_ZSt7forwardISt5tupleIJRK3PinEEEOT_RNSt16remove_referenceIS5_E4typeE>
 80131d4:	4605      	mov	r5, r0
 80131d6:	6a38      	ldr	r0, [r7, #32]
 80131d8:	f7fe fb9b 	bl	8011912 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80131dc:	4603      	mov	r3, r0
 80131de:	462a      	mov	r2, r5
 80131e0:	4621      	mov	r1, r4
 80131e2:	68b8      	ldr	r0, [r7, #8]
 80131e4:	f7ff ffbe 	bl	8013164 <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKSt21piecewise_construct_tSt5tupleIJRS2_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80131e8:	bf00      	nop
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bdb0      	pop	{r4, r5, r7, pc}

080131f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	68da      	ldr	r2, [r3, #12]
 80131fc:	f107 030c 	add.w	r3, r7, #12
 8013200:	4611      	mov	r1, r2
 8013202:	4618      	mov	r0, r3
 8013204:	f7fe ff37 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN3ADC8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013212:	b580      	push	{r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	60f8      	str	r0, [r7, #12]
 801321a:	60b9      	str	r1, [r7, #8]
 801321c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801321e:	68b8      	ldr	r0, [r7, #8]
 8013220:	f000 f97b 	bl	801351a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8013224:	4603      	mov	r3, r0
 8013226:	681a      	ldr	r2, [r3, #0]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	601a      	str	r2, [r3, #0]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff ff03 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013232:	4603      	mov	r3, r0
 8013234:	681a      	ldr	r2, [r3, #0]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	605a      	str	r2, [r3, #4]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	4618      	mov	r0, r3
 801323e:	3710      	adds	r7, #16
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8013244:	b580      	push	{r7, lr}
 8013246:	b082      	sub	sp, #8
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 f96f 	bl	8013530 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>
 8013252:	4603      	mov	r3, r0
 8013254:	4618      	mov	r0, r3
 8013256:	3708      	adds	r7, #8
 8013258:	46bd      	mov	sp, r7
 801325a:	bd80      	pop	{r7, pc}

0801325c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 801325c:	b580      	push	{r7, lr}
 801325e:	b082      	sub	sp, #8
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8013266:	6838      	ldr	r0, [r7, #0]
 8013268:	f000 f96d 	bl	8013546 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>
	}
 801326c:	bf00      	nop
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8013274:	b580      	push	{r7, lr}
 8013276:	b088      	sub	sp, #32
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	61bb      	str	r3, [r7, #24]
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 801328c:	f7fb fca2 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d003      	beq.n	801329e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8013296:	69b8      	ldr	r0, [r7, #24]
 8013298:	f006 fff2 	bl	801a280 <_ZdlPv>
	    return;
 801329c:	e005      	b.n	80132aa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801329e:	697a      	ldr	r2, [r7, #20]
 80132a0:	69b9      	ldr	r1, [r7, #24]
 80132a2:	69f8      	ldr	r0, [r7, #28]
 80132a4:	f000 fa88 	bl	80137b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 80132a8:	bf00      	nop
 80132aa:	bf00      	nop
 80132ac:	3720      	adds	r7, #32
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}

080132b2 <_ZSt11__addressofISt14_Fwd_list_nodeIhEEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80132b2:	b480      	push	{r7}
 80132b4:	b083      	sub	sp, #12
 80132b6:	af00      	add	r7, sp, #0
 80132b8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4618      	mov	r0, r3
 80132be:	370c      	adds	r7, #12
 80132c0:	46bd      	mov	sp, r7
 80132c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c6:	4770      	bx	lr

080132c8 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80132c8:	b480      	push	{r7}
 80132ca:	b083      	sub	sp, #12
 80132cc:	af00      	add	r7, sp, #0
 80132ce:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80132d0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80132d4:	4618      	mov	r0, r3
 80132d6:	370c      	adds	r7, #12
 80132d8:	46bd      	mov	sp, r7
 80132da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132de:	4770      	bx	lr

080132e0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80132e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80132ec:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f7ff ffea 	bl	80132c8 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 80132f4:	4603      	mov	r3, r0
 80132f6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80132f8:	f107 0208 	add.w	r2, r7, #8
 80132fc:	f107 030c 	add.w	r3, r7, #12
 8013300:	4611      	mov	r1, r2
 8013302:	4618      	mov	r0, r3
 8013304:	f7fb fc7a 	bl	800ebfc <_ZSt3minIjERKT_S2_S2_>
 8013308:	4603      	mov	r3, r0
 801330a:	681b      	ldr	r3, [r3, #0]
      }
 801330c:	4618      	mov	r0, r3
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013314:	b5b0      	push	{r4, r5, r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	607a      	str	r2, [r7, #4]
 8013320:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8013322:	68f8      	ldr	r0, [r7, #12]
 8013324:	f000 f947 	bl	80135b6 <_ZSt12__niter_baseIPmET_S1_>
 8013328:	4604      	mov	r4, r0
 801332a:	68b8      	ldr	r0, [r7, #8]
 801332c:	f000 f943 	bl	80135b6 <_ZSt12__niter_baseIPmET_S1_>
 8013330:	4605      	mov	r5, r0
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 f93f 	bl	80135b6 <_ZSt12__niter_baseIPmET_S1_>
 8013338:	4602      	mov	r2, r0
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	4629      	mov	r1, r5
 801333e:	4620      	mov	r0, r4
 8013340:	f000 f944 	bl	80135cc <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8013344:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8013346:	4618      	mov	r0, r3
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bdb0      	pop	{r4, r5, r7, pc}

0801334e <_ZSt10destroy_atISt4pairIKhN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 801334e:	b480      	push	{r7}
 8013350:	b083      	sub	sp, #12
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
    }
 8013356:	bf00      	nop
 8013358:	370c      	adds	r7, #12
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr

08013362 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEET_S8_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8013362:	b480      	push	{r7}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
    { return __it; }
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	4618      	mov	r0, r3
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013376:	4770      	bx	lr

08013378 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEEEPmET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8013378:	b5b0      	push	{r4, r5, r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f000 f96d 	bl	8013664 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 801338a:	4604      	mov	r4, r0
 801338c:	68b8      	ldr	r0, [r7, #8]
 801338e:	f000 f969 	bl	8013664 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8013392:	4605      	mov	r5, r0
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	4618      	mov	r0, r3
 8013398:	f000 f90d 	bl	80135b6 <_ZSt12__niter_baseIPmET_S1_>
 801339c:	4603      	mov	r3, r0
 801339e:	461a      	mov	r2, r3
 80133a0:	4629      	mov	r1, r5
 80133a2:	4620      	mov	r0, r4
 80133a4:	f000 f96c 	bl	8013680 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>
 80133a8:	4602      	mov	r2, r0
 80133aa:	1d3b      	adds	r3, r7, #4
 80133ac:	4611      	mov	r1, r2
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 f976 	bl	80136a0 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 80133b4:	4603      	mov	r3, r0
    }
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bdb0      	pop	{r4, r5, r7, pc}

080133be <_ZNSt11_Tuple_implILj0EJRKhEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80133be:	b590      	push	{r4, r7, lr}
 80133c0:	b083      	sub	sp, #12
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
 80133c6:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80133c8:	687c      	ldr	r4, [r7, #4]
 80133ca:	6838      	ldr	r0, [r7, #0]
 80133cc:	f000 f993 	bl	80136f6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 80133d0:	4603      	mov	r3, r0
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7ff f828 	bl	8012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 80133d8:	4603      	mov	r3, r0
 80133da:	4619      	mov	r1, r3
 80133dc:	4620      	mov	r0, r4
 80133de:	f7ff f907 	bl	80125f0 <_ZNSt10_Head_baseILj0ERKhLb0EEC1ES1_>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	4618      	mov	r0, r3
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd90      	pop	{r4, r7, pc}

080133ec <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	60b9      	str	r1, [r7, #8]
 80133f6:	607a      	str	r2, [r7, #4]
 80133f8:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80133fa:	68b8      	ldr	r0, [r7, #8]
 80133fc:	f000 f988 	bl	8013710 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013400:	4603      	mov	r3, r0
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff f810 	bl	8012428 <_ZSt7forwardIRKhEOT_RNSt16remove_referenceIS2_E4typeE>
 8013408:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801340a:	781a      	ldrb	r2, [r3, #0]
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	701a      	strb	r2, [r3, #0]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2200      	movs	r2, #0
 8013414:	605a      	str	r2, [r3, #4]
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2200      	movs	r2, #0
 801341a:	609a      	str	r2, [r3, #8]
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	2200      	movs	r2, #0
 8013420:	60da      	str	r2, [r3, #12]
      { }
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	4618      	mov	r0, r3
 8013426:	3710      	adds	r7, #16
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}

0801342c <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 801342c:	b5b0      	push	{r4, r5, r7, lr}
 801342e:	b086      	sub	sp, #24
 8013430:	af02      	add	r7, sp, #8
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	7239      	strb	r1, [r7, #8]
 8013436:	607a      	str	r2, [r7, #4]
 8013438:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801343a:	463a      	mov	r2, r7
 801343c:	f88d 4000 	strb.w	r4, [sp]
 8013440:	462b      	mov	r3, r5
 8013442:	6879      	ldr	r1, [r7, #4]
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	f7ff ffd1 	bl	80133ec <_ZNSt4pairIKhN3ADC8InstanceEEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	4618      	mov	r0, r3
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bdb0      	pop	{r4, r5, r7, pc}

08013454 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013454:	b480      	push	{r7}
 8013456:	b083      	sub	sp, #12
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	4618      	mov	r0, r3
 8013460:	370c      	adds	r7, #12
 8013462:	46bd      	mov	sp, r7
 8013464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013468:	4770      	bx	lr

0801346a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKhN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 801346a:	b480      	push	{r7}
 801346c:	b083      	sub	sp, #12
 801346e:	af00      	add	r7, sp, #0
 8013470:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	4618      	mov	r0, r3
 8013476:	370c      	adds	r7, #12
 8013478:	46bd      	mov	sp, r7
 801347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347e:	4770      	bx	lr

08013480 <_ZNSt11_Tuple_implILj0EJRK3PinEEC1EOS3_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013480:	b590      	push	{r4, r7, lr}
 8013482:	b083      	sub	sp, #12
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801348a:	687c      	ldr	r4, [r7, #4]
 801348c:	6838      	ldr	r0, [r7, #0]
 801348e:	f000 f96e 	bl	801376e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 8013492:	4603      	mov	r3, r0
 8013494:	4618      	mov	r0, r3
 8013496:	f000 f977 	bl	8013788 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 801349a:	4603      	mov	r3, r0
 801349c:	4619      	mov	r1, r3
 801349e:	4620      	mov	r0, r4
 80134a0:	f7ff fa83 	bl	80129aa <_ZNSt10_Head_baseILj0ERK3PinLb0EEC1ES2_>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	4618      	mov	r0, r3
 80134a8:	370c      	adds	r7, #12
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd90      	pop	{r4, r7, pc}

080134ae <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b084      	sub	sp, #16
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	60f8      	str	r0, [r7, #12]
 80134b6:	60b9      	str	r1, [r7, #8]
 80134b8:	607a      	str	r2, [r7, #4]
 80134ba:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80134bc:	68b8      	ldr	r0, [r7, #8]
 80134be:	f000 f96e 	bl	801379e <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>
 80134c2:	4603      	mov	r3, r0
 80134c4:	4618      	mov	r0, r3
 80134c6:	f000 f95f 	bl	8013788 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 80134ca:	4602      	mov	r2, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80134d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2200      	movs	r2, #0
 80134da:	609a      	str	r2, [r3, #8]
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2200      	movs	r2, #0
 80134e0:	60da      	str	r2, [r3, #12]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2200      	movs	r2, #0
 80134e6:	611a      	str	r2, [r3, #16]
      { }
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 80134f2:	b5b0      	push	{r4, r5, r7, lr}
 80134f4:	b086      	sub	sp, #24
 80134f6:	af02      	add	r7, sp, #8
 80134f8:	60f8      	str	r0, [r7, #12]
 80134fa:	7239      	strb	r1, [r7, #8]
 80134fc:	607a      	str	r2, [r7, #4]
 80134fe:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013500:	463a      	mov	r2, r7
 8013502:	f88d 4000 	strb.w	r4, [sp]
 8013506:	462b      	mov	r3, r5
 8013508:	6879      	ldr	r1, [r7, #4]
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f7ff ffcf 	bl	80134ae <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IJRS1_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	4618      	mov	r0, r3
 8013514:	3710      	adds	r7, #16
 8013516:	46bd      	mov	sp, r7
 8013518:	bdb0      	pop	{r4, r5, r7, pc}

0801351a <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801351a:	b480      	push	{r7}
 801351c:	b083      	sub	sp, #12
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	4618      	mov	r0, r3
 8013526:	370c      	adds	r7, #12
 8013528:	46bd      	mov	sp, r7
 801352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352e:	4770      	bx	lr

08013530 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN3ADC8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4618      	mov	r0, r3
 801353c:	370c      	adds	r7, #12
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr

08013546 <_ZSt10destroy_atISt4pairIK3PinN3ADC8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8013546:	b480      	push	{r7}
 8013548:	b083      	sub	sp, #12
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
    }
 801354e:	bf00      	nop
 8013550:	370c      	adds	r7, #12
 8013552:	46bd      	mov	sp, r7
 8013554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013558:	4770      	bx	lr

0801355a <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 801355a:	b580      	push	{r7, lr}
 801355c:	b084      	sub	sp, #16
 801355e:	af00      	add	r7, sp, #0
 8013560:	60f8      	str	r0, [r7, #12]
 8013562:	60b9      	str	r1, [r7, #8]
 8013564:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	00db      	lsls	r3, r3, #3
 801356a:	4619      	mov	r1, r3
 801356c:	68b8      	ldr	r0, [r7, #8]
 801356e:	f006 fe89 	bl	801a284 <_ZdlPvj>
      }
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}

08013578 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013584:	68f8      	ldr	r0, [r7, #12]
 8013586:	f000 f929 	bl	80137dc <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>
 801358a:	4602      	mov	r2, r0
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	4293      	cmp	r3, r2
 8013590:	bf8c      	ite	hi
 8013592:	2301      	movhi	r3, #1
 8013594:	2300      	movls	r3, #0
 8013596:	b2db      	uxtb	r3, r3
 8013598:	2b00      	cmp	r3, #0
 801359a:	d001      	beq.n	80135a0 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801359c:	f006 ff38 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	009b      	lsls	r3, r3, #2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f006 fe6f 	bl	801a288 <_Znwj>
 80135aa:	4603      	mov	r3, r0
 80135ac:	bf00      	nop
      }
 80135ae:	4618      	mov	r0, r3
 80135b0:	3710      	adds	r7, #16
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}

080135b6 <_ZSt12__niter_baseIPmET_S1_>:
    __niter_base(_Iterator __it)
 80135b6:	b480      	push	{r7}
 80135b8:	b083      	sub	sp, #12
 80135ba:	af00      	add	r7, sp, #0
 80135bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	4618      	mov	r0, r3
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b086      	sub	sp, #24
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	607a      	str	r2, [r7, #4]
 80135d8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80135da:	68ba      	ldr	r2, [r7, #8]
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	1ad3      	subs	r3, r2, r3
 80135e0:	109b      	asrs	r3, r3, #2
 80135e2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	dd06      	ble.n	80135f8 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	009b      	lsls	r3, r3, #2
 80135ee:	461a      	mov	r2, r3
 80135f0:	68f9      	ldr	r1, [r7, #12]
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f006 ff6a 	bl	801a4cc <memmove>
      return __result + __count;
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	009b      	lsls	r3, r3, #2
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	4413      	add	r3, r2
    }
 8013600:	4618      	mov	r0, r3
 8013602:	3718      	adds	r7, #24
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}

08013608 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013608:	b580      	push	{r7, lr}
 801360a:	b084      	sub	sp, #16
 801360c:	af00      	add	r7, sp, #0
 801360e:	60f8      	str	r0, [r7, #12]
 8013610:	60b9      	str	r1, [r7, #8]
 8013612:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013614:	68f8      	ldr	r0, [r7, #12]
 8013616:	f000 f8ed 	bl	80137f4 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>
 801361a:	4602      	mov	r2, r0
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	4293      	cmp	r3, r2
 8013620:	bf8c      	ite	hi
 8013622:	2301      	movhi	r3, #1
 8013624:	2300      	movls	r3, #0
 8013626:	b2db      	uxtb	r3, r3
 8013628:	2b00      	cmp	r3, #0
 801362a:	d001      	beq.n	8013630 <_ZN9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801362c:	f006 fef0 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	00db      	lsls	r3, r3, #3
 8013634:	4618      	mov	r0, r3
 8013636:	f006 fe27 	bl	801a288 <_Znwj>
 801363a:	4603      	mov	r3, r0
 801363c:	bf00      	nop
      }
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}

08013646 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8013646:	b580      	push	{r7, lr}
 8013648:	b084      	sub	sp, #16
 801364a:	af00      	add	r7, sp, #0
 801364c:	60f8      	str	r0, [r7, #12]
 801364e:	60b9      	str	r1, [r7, #8]
 8013650:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	015b      	lsls	r3, r3, #5
 8013656:	4619      	mov	r1, r3
 8013658:	68b8      	ldr	r0, [r7, #8]
 801365a:	f006 fe13 	bl	801a284 <_ZdlPvj>
      }
 801365e:	3710      	adds	r7, #16
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}

08013664 <_ZSt12__niter_baseIPKmSt6vectorImSaImEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 801366c:	1d3b      	adds	r3, r7, #4
 801366e:	4618      	mov	r0, r3
 8013670:	f000 f8cc 	bl	801380c <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>
 8013674:	4603      	mov	r3, r0
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	4618      	mov	r0, r3
 801367a:	3708      	adds	r7, #8
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <_ZSt14__copy_move_a1ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	68b9      	ldr	r1, [r7, #8]
 8013690:	68f8      	ldr	r0, [r7, #12]
 8013692:	f000 f8c6 	bl	8013822 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>
 8013696:	4603      	mov	r3, r0
 8013698:	4618      	mov	r0, r3
 801369a:	3710      	adds	r7, #16
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
    { return __res; }
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	4618      	mov	r0, r3
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr

080136b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	60b9      	str	r1, [r7, #8]
 80136c2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f000 f8c9 	bl	801385c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>
 80136ca:	4602      	mov	r2, r0
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	4293      	cmp	r3, r2
 80136d0:	bf8c      	ite	hi
 80136d2:	2301      	movhi	r3, #1
 80136d4:	2300      	movls	r3, #0
 80136d6:	b2db      	uxtb	r3, r3
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d001      	beq.n	80136e0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80136dc:	f006 fe98 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	015b      	lsls	r3, r3, #5
 80136e4:	4618      	mov	r0, r3
 80136e6:	f006 fdcf 	bl	801a288 <_Znwj>
 80136ea:	4603      	mov	r3, r0
 80136ec:	bf00      	nop
      }
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b082      	sub	sp, #8
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	4618      	mov	r0, r3
 8013702:	f000 f8b7 	bl	8013874 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>
 8013706:	4603      	mov	r3, r0
 8013708:	4618      	mov	r0, r3
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}

08013710 <_ZSt3getILj0EJRKhEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	4618      	mov	r0, r3
 801371c:	f000 f8b6 	bl	801388c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013720:	4603      	mov	r3, r0
 8013722:	4618      	mov	r0, r3
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801372a:	b580      	push	{r7, lr}
 801372c:	b084      	sub	sp, #16
 801372e:	af00      	add	r7, sp, #0
 8013730:	60f8      	str	r0, [r7, #12]
 8013732:	60b9      	str	r1, [r7, #8]
 8013734:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013736:	68f8      	ldr	r0, [r7, #12]
 8013738:	f000 f8b4 	bl	80138a4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>
 801373c:	4602      	mov	r2, r0
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	4293      	cmp	r3, r2
 8013742:	bf8c      	ite	hi
 8013744:	2301      	movhi	r3, #1
 8013746:	2300      	movls	r3, #0
 8013748:	b2db      	uxtb	r3, r3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d001      	beq.n	8013752 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801374e:	f006 fe5f 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	4613      	mov	r3, r2
 8013756:	00db      	lsls	r3, r3, #3
 8013758:	4413      	add	r3, r2
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	4618      	mov	r0, r3
 801375e:	f006 fd93 	bl	801a288 <_Znwj>
 8013762:	4603      	mov	r3, r0
 8013764:	bf00      	nop
      }
 8013766:	4618      	mov	r0, r3
 8013768:	3710      	adds	r7, #16
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}

0801376e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 801376e:	b580      	push	{r7, lr}
 8013770:	b082      	sub	sp, #8
 8013772:	af00      	add	r7, sp, #0
 8013774:	6078      	str	r0, [r7, #4]
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	4618      	mov	r0, r3
 801377a:	f000 f8a1 	bl	80138c0 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>
 801377e:	4603      	mov	r3, r0
 8013780:	4618      	mov	r0, r3
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <_ZSt7forwardIRK3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013788:	b480      	push	{r7}
 801378a:	b083      	sub	sp, #12
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	4618      	mov	r0, r3
 8013794:	370c      	adds	r7, #12
 8013796:	46bd      	mov	sp, r7
 8013798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379c:	4770      	bx	lr

0801379e <_ZSt3getILj0EJRK3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS7_>:
    get(tuple<_Elements...>& __t) noexcept
 801379e:	b580      	push	{r7, lr}
 80137a0:	b082      	sub	sp, #8
 80137a2:	af00      	add	r7, sp, #0
 80137a4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f000 f895 	bl	80138d8 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80137ae:	4603      	mov	r3, r0
 80137b0:	4618      	mov	r0, r3
 80137b2:	3708      	adds	r7, #8
 80137b4:	46bd      	mov	sp, r7
 80137b6:	bd80      	pop	{r7, pc}

080137b8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b084      	sub	sp, #16
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	4613      	mov	r3, r2
 80137c8:	00db      	lsls	r3, r3, #3
 80137ca:	4413      	add	r3, r2
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	4619      	mov	r1, r3
 80137d0:	68b8      	ldr	r0, [r7, #8]
 80137d2:	f006 fd57 	bl	801a284 <_ZdlPvj>
      }
 80137d6:	3710      	adds	r7, #16
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <_ZNK9__gnu_cxx13new_allocatorImE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80137dc:	b480      	push	{r7}
 80137de:	b083      	sub	sp, #12
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80137e4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80137e8:	4618      	mov	r0, r3
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f2:	4770      	bx	lr

080137f4 <_ZNK9__gnu_cxx13new_allocatorISt14_Fwd_list_nodeIhEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80137f4:	b480      	push	{r7}
 80137f6:	b083      	sub	sp, #12
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80137fc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8013800:	4618      	mov	r0, r3
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr

0801380c <_ZNK9__gnu_cxx17__normal_iteratorIPKmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4618      	mov	r0, r3
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr

08013822 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	60f8      	str	r0, [r7, #12]
 801382a:	60b9      	str	r1, [r7, #8]
 801382c:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 801382e:	f7fb f9d1 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8013832:	4603      	mov	r3, r0
 8013834:	2b00      	cmp	r3, #0
 8013836:	d006      	beq.n	8013846 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x24>
	  __copy_m(__first, __last, __result);
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	68b9      	ldr	r1, [r7, #8]
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f000 f857 	bl	80138f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>
 8013842:	4603      	mov	r3, r0
 8013844:	e006      	b.n	8013854 <_ZSt14__copy_move_a2ILb0EPKmPmET1_T0_S4_S3_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	68b9      	ldr	r1, [r7, #8]
 801384a:	68f8      	ldr	r0, [r7, #12]
 801384c:	f000 f873 	bl	8013936 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8013850:	4603      	mov	r3, r0
 8013852:	bf00      	nop
    }
 8013854:	4618      	mov	r0, r3
 8013856:	3710      	adds	r7, #16
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}

0801385c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801385c:	b480      	push	{r7}
 801385e:	b083      	sub	sp, #12
 8013860:	af00      	add	r7, sp, #0
 8013862:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013864:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8013868:	4618      	mov	r0, r3
 801386a:	370c      	adds	r7, #12
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <_ZNSt10_Head_baseILj0ERKhLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	370c      	adds	r7, #12
 8013884:	46bd      	mov	sp, r7
 8013886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388a:	4770      	bx	lr

0801388c <_ZSt12__get_helperILj0ERKhJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 801388c:	b580      	push	{r7, lr}
 801388e:	b082      	sub	sp, #8
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff ff2e 	bl	80136f6 <_ZNSt11_Tuple_implILj0EJRKhEE7_M_headERS2_>
 801389a:	4603      	mov	r3, r0
 801389c:	4618      	mov	r0, r3
 801389e:	3708      	adds	r7, #8
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80138a4:	b480      	push	{r7}
 80138a6:	b083      	sub	sp, #12
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80138ac:	4b03      	ldr	r3, [pc, #12]	; (80138bc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 80138ae:	4618      	mov	r0, r3
 80138b0:	370c      	adds	r7, #12
 80138b2:	46bd      	mov	sp, r7
 80138b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b8:	4770      	bx	lr
 80138ba:	bf00      	nop
 80138bc:	038e38e3 	.word	0x038e38e3

080138c0 <_ZNSt10_Head_baseILj0ERK3PinLb0EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4618      	mov	r0, r3
 80138ce:	370c      	adds	r7, #12
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <_ZSt12__get_helperILj0ERK3PinJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f7ff ff44 	bl	801376e <_ZNSt11_Tuple_implILj0EJRK3PinEE7_M_headERS3_>
 80138e6:	4603      	mov	r3, r0
 80138e8:	4618      	mov	r0, r3
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_>:
	__copy_m(_II __first, _II __last, _OI __result)
 80138f0:	b480      	push	{r7}
 80138f2:	b087      	sub	sp, #28
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	60f8      	str	r0, [r7, #12]
 80138f8:	60b9      	str	r1, [r7, #8]
 80138fa:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80138fc:	68ba      	ldr	r2, [r7, #8]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	1ad3      	subs	r3, r2, r3
 8013902:	109b      	asrs	r3, r3, #2
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b00      	cmp	r3, #0
 801390a:	dd0d      	ble.n	8013928 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x38>
	      *__result = *__first;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	601a      	str	r2, [r3, #0]
	      ++__first;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3304      	adds	r3, #4
 8013918:	60fb      	str	r3, [r7, #12]
	      ++__result;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	3304      	adds	r3, #4
 801391e:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	3b01      	subs	r3, #1
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	e7ee      	b.n	8013906 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKmPmEET0_T_S7_S6_+0x16>
	  return __result;
 8013928:	687b      	ldr	r3, [r7, #4]
	}
 801392a:	4618      	mov	r0, r3
 801392c:	371c      	adds	r7, #28
 801392e:	46bd      	mov	sp, r7
 8013930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013934:	4770      	bx	lr

08013936 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8013936:	b580      	push	{r7, lr}
 8013938:	b086      	sub	sp, #24
 801393a:	af00      	add	r7, sp, #0
 801393c:	60f8      	str	r0, [r7, #12]
 801393e:	60b9      	str	r1, [r7, #8]
 8013940:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8013942:	68ba      	ldr	r2, [r7, #8]
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	1ad3      	subs	r3, r2, r3
 8013948:	109b      	asrs	r3, r3, #2
 801394a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801394c:	697b      	ldr	r3, [r7, #20]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d006      	beq.n	8013960 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	461a      	mov	r2, r3
 8013958:	68f9      	ldr	r1, [r7, #12]
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f006 fdb6 	bl	801a4cc <memmove>
	  return __result + _Num;
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	009b      	lsls	r3, r3, #2
 8013964:	687a      	ldr	r2, [r7, #4]
 8013966:	4413      	add	r3, r2
	}
 8013968:	4618      	mov	r0, r3
 801396a:	3718      	adds	r7, #24
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}

08013970 <_Z41__static_initialization_and_destruction_0ii>:
 8013970:	b580      	push	{r7, lr}
 8013972:	b0c6      	sub	sp, #280	; 0x118
 8013974:	af00      	add	r7, sp, #0
 8013976:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801397a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801397e:	6018      	str	r0, [r3, #0]
 8013980:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013984:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013988:	6019      	str	r1, [r3, #0]
 801398a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801398e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d142      	bne.n	8013a1e <_Z41__static_initialization_and_destruction_0ii+0xae>
 8013998:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801399c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139a6:	4293      	cmp	r3, r2
 80139a8:	d139      	bne.n	8013a1e <_Z41__static_initialization_and_destruction_0ii+0xae>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 80139aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80139b2:	4a28      	ldr	r2, [pc, #160]	; (8013a54 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80139b4:	4618      	mov	r0, r3
 80139b6:	4611      	mov	r1, r2
 80139b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80139bc:	461a      	mov	r2, r3
 80139be:	f006 fd77 	bl	801a4b0 <memcpy>
 80139c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139ca:	f107 0214 	add.w	r2, r7, #20
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80139d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80139d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80139dc:	605a      	str	r2, [r3, #4]
 80139de:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fc fd91 	bl	801050a <_ZNSaIhEC1Ev>
 80139e8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80139ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80139f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80139f4:	ca06      	ldmia	r2, {r1, r2}
 80139f6:	4818      	ldr	r0, [pc, #96]	; (8013a58 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80139f8:	f7fc fd9e 	bl	8010538 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80139fc:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fc fd8e 	bl	8010522 <_ZNSaIhED1Ev>
map<uint8_t, ADC::Instance> ADC::active_instances = {};
 8013a06:	4b15      	ldr	r3, [pc, #84]	; (8013a5c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8013a08:	461a      	mov	r2, r3
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	6013      	str	r3, [r2, #0]
 8013a0e:	6053      	str	r3, [r2, #4]
 8013a10:	6093      	str	r3, [r2, #8]
 8013a12:	60d3      	str	r3, [r2, #12]
 8013a14:	6113      	str	r3, [r2, #16]
 8013a16:	6153      	str	r3, [r2, #20]
 8013a18:	4810      	ldr	r0, [pc, #64]	; (8013a5c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8013a1a:	f7fc fa05 	bl	800fe28 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
 8013a1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a22:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d10e      	bne.n	8013a4a <_Z41__static_initialization_and_destruction_0ii+0xda>
 8013a2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013a30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d105      	bne.n	8013a4a <_Z41__static_initialization_and_destruction_0ii+0xda>
 8013a3e:	4807      	ldr	r0, [pc, #28]	; (8013a5c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8013a40:	f7fc f9ff 	bl	800fe42 <_ZNSt3mapIhN3ADC8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> ADC::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 8013a44:	4804      	ldr	r0, [pc, #16]	; (8013a58 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8013a46:	f7fc fda5 	bl	8010594 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 8013a4a:	bf00      	nop
 8013a4c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	0801aa00 	.word	0x0801aa00
 8013a58:	24000fd0 	.word	0x24000fd0
 8013a5c:	24000fd4 	.word	0x24000fd4

08013a60 <_GLOBAL__sub_I__ZN3ADC10id_managerE>:
 8013a60:	b580      	push	{r7, lr}
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a68:	2001      	movs	r0, #1
 8013a6a:	f7ff ff81 	bl	8013970 <_Z41__static_initialization_and_destruction_0ii>
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <_GLOBAL__sub_D__ZN3ADC10id_managerE>:
 8013a70:	b580      	push	{r7, lr}
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013a78:	2000      	movs	r0, #0
 8013a7a:	f7ff ff79 	bl	8013970 <_Z41__static_initialization_and_destruction_0ii>
 8013a7e:	bd80      	pop	{r7, pc}

08013a80 <_ZNSt9__cmp_cat8__unspecC1EPS0_>:

    enum class _Ncmp : type { _Unordered = 2 };

    struct __unspec
    {
      constexpr __unspec(__unspec*) noexcept { }
 8013a80:	b480      	push	{r7}
 8013a82:	b083      	sub	sp, #12
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	370c      	adds	r7, #12
 8013a90:	46bd      	mov	sp, r7
 8013a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a96:	4770      	bx	lr

08013a98 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>:
    constexpr operator partial_ordering() const noexcept
    { return partial_ordering(__cmp_cat::_Ord(_M_value)); }

    // comparisons
    friend constexpr bool
    operator==(weak_ordering __v, __cmp_cat::__unspec) noexcept
 8013a98:	b480      	push	{r7}
 8013a9a:	b083      	sub	sp, #12
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	7138      	strb	r0, [r7, #4]
 8013aa0:	7039      	strb	r1, [r7, #0]
    { return __v._M_value == 0; }
 8013aa2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	bf0c      	ite	eq
 8013aaa:	2301      	moveq	r3, #1
 8013aac:	2300      	movne	r3, #0
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr

08013abc <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>:

    friend constexpr bool
    operator==(weak_ordering, weak_ordering) noexcept = default;

    friend constexpr bool
    operator< (weak_ordering __v, __cmp_cat::__unspec) noexcept
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	7138      	strb	r0, [r7, #4]
 8013ac4:	7039      	strb	r1, [r7, #0]
    { return __v._M_value < 0; }
 8013ac6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	09db      	lsrs	r3, r3, #7
 8013ace:	b2db      	uxtb	r3, r3
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	609a      	str	r2, [r3, #8]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	4618      	mov	r0, r3
 8013aee:	370c      	adds	r7, #12
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr

08013af8 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b082      	sub	sp, #8
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d005      	beq.n	8013b14 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	6879      	ldr	r1, [r7, #4]
 8013b10:	2203      	movs	r2, #3
 8013b12:	4798      	blx	r3
    }
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	4618      	mov	r0, r3
 8013b18:	3708      	adds	r7, #8
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}

08013b1e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8013b1e:	b480      	push	{r7}
 8013b20:	b083      	sub	sp, #12
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	6078      	str	r0, [r7, #4]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	689b      	ldr	r3, [r3, #8]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	bf0c      	ite	eq
 8013b2e:	2301      	moveq	r3, #1
 8013b30:	2300      	movne	r3, #0
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	4618      	mov	r0, r3
 8013b36:	370c      	adds	r7, #12
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr

08013b40 <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      _Vector_base() = default;
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f000 f907 	bl	8013d5e <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	4618      	mov	r0, r3
 8013b54:	3708      	adds	r7, #8
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <_ZNSt6vectorImSaImEEC1Ev>:
      vector() = default;
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b082      	sub	sp, #8
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	f7ff ffeb 	bl	8013b40 <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>:
public:
	LPTIM_HandleTypeDef* handle;
	uint16_t period;

	LowPowerTimer() = default;
	LowPowerTimer(LPTIM_HandleTypeDef* handle, uint16_t period) : handle(handle), period(period) {};
 8013b74:	b480      	push	{r7}
 8013b76:	b085      	sub	sp, #20
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	4613      	mov	r3, r2
 8013b80:	80fb      	strh	r3, [r7, #6]
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	68ba      	ldr	r2, [r7, #8]
 8013b86:	601a      	str	r2, [r3, #0]
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	88fa      	ldrh	r2, [r7, #6]
 8013b8c:	809a      	strh	r2, [r3, #4]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	4618      	mov	r0, r3
 8013b92:	3714      	adds	r7, #20
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7ff ffa6 	bl	8013af8 <_ZNSt14_Function_baseD1Ev>
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3708      	adds	r7, #8
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>:
      ~map() = default;
 8013bb6:	b580      	push	{r7, lr}
 8013bb8:	b082      	sub	sp, #8
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f000 f971 	bl	8013ea8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8013bdc:	68b8      	ldr	r0, [r7, #8]
 8013bde:	f000 f812 	bl	8013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8013be2:	4602      	mov	r2, r0
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bea:	e883 0003 	stmia.w	r3, {r0, r1}
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	687a      	ldr	r2, [r7, #4]
 8013bf2:	3308      	adds	r3, #8
 8013bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013bf8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013c06:	b480      	push	{r7}
 8013c08:	b083      	sub	sp, #12
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	4618      	mov	r0, r3
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr

08013c1c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>:
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	4618      	mov	r0, r3
 8013c28:	f000 f99a 	bl	8013f60 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3708      	adds	r7, #8
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b082      	sub	sp, #8
 8013c3a:	af00      	add	r7, sp, #0
 8013c3c:	6078      	str	r0, [r7, #4]
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 f9b8 	bl	8013fb4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	4618      	mov	r0, r3
 8013c48:	3708      	adds	r7, #8
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}

08013c4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 8013c4e:	b580      	push	{r7, lr}
 8013c50:	b082      	sub	sp, #8
 8013c52:	af00      	add	r7, sp, #0
 8013c54:	6078      	str	r0, [r7, #4]
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f000 f996 	bl	8013f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	4618      	mov	r0, r3
 8013c62:	3708      	adds	r7, #8
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>:
      map() = default;
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ff ffeb 	bl	8013c4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1Ev>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	3708      	adds	r7, #8
 8013c7e:	46bd      	mov	sp, r7
 8013c80:	bd80      	pop	{r7, pc}

08013c82 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>:
      ~map() = default;
 8013c82:	b580      	push	{r7, lr}
 8013c84:	b082      	sub	sp, #8
 8013c86:	af00      	add	r7, sp, #0
 8013c88:	6078      	str	r0, [r7, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f000 fa08 	bl	80140a2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	4618      	mov	r0, r3
 8013c96:	3708      	adds	r7, #8
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	f000 fa85 	bl	80141b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	3708      	adds	r7, #8
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd80      	pop	{r7, pc}

08013cb6 <_ZN3ADC10PeripheralD1Ev>:
		vector<uint32_t> channels;
		InitData() = default;
		InitData(ADC_TypeDef* adc, uint32_t resolution, uint32_t external_trigger, vector<uint32_t>& channels);
	};

	class Peripheral {
 8013cb6:	b580      	push	{r7, lr}
 8013cb8:	b082      	sub	sp, #8
 8013cba:	af00      	add	r7, sp, #0
 8013cbc:	6078      	str	r0, [r7, #4]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	3310      	adds	r3, #16
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fc f904 	bl	800fed0 <_ZN3ADC8InitDataD1Ev>
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3708      	adds	r7, #8
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}

08013cd2 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>:
 8013cd2:	b580      	push	{r7, lr}
 8013cd4:	b082      	sub	sp, #8
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f000 faef 	bl	80142c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3708      	adds	r7, #8
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <_ZN17ExternalInterrupt8InstanceC1Ev>:
#ifdef HAL_EXTI_MODULE_ENABLED
#define GPIO_PORT GPIOE

class ExternalInterrupt {
public:
	class Instance {
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f000 f840 	bl	8013d7e <_ZNSt8functionIFvvEEC1EDn>
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2201      	movs	r2, #1
 8013d02:	741a      	strb	r2, [r3, #16]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	4618      	mov	r0, r3
 8013d08:	3708      	adds	r7, #8
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <_ZN17ExternalInterrupt8InstanceD1Ev>:
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b082      	sub	sp, #8
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7ff ff3f 	bl	8013b9c <_ZNSt8functionIFvvEED1Ev>
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4618      	mov	r0, r3
 8013d22:	3708      	adds	r7, #8
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bd80      	pop	{r7, pc}

08013d28 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>:
    struct pair
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	3304      	adds	r3, #4
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7ff ffea 	bl	8013d0e <_ZN17ExternalInterrupt8InstanceD1Ev>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}

08013d44 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>:
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f000 fb59 	bl	8014406 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	3708      	adds	r7, #8
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}

08013d5e <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b082      	sub	sp, #8
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f000 fb62 	bl	8014430 <_ZNSaImEC1Ev>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7fc fe9d 	bl	8010aae <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	4618      	mov	r0, r3
 8013d78:	3708      	adds	r7, #8
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}

08013d7e <_ZNSt8functionIFvvEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 8013d7e:	b580      	push	{r7, lr}
 8013d80:	b082      	sub	sp, #8
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff fea6 	bl	8013adc <_ZNSt14_Function_baseC1Ev>
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	4618      	mov	r0, r3
 8013d94:	3708      	adds	r7, #8
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b084      	sub	sp, #16
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	60f8      	str	r0, [r7, #12]
 8013da2:	60b9      	str	r1, [r7, #8]
 8013da4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013da6:	68b8      	ldr	r0, [r7, #8]
 8013da8:	f7ff ff2d 	bl	8013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8013dac:	4602      	mov	r2, r0
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013db4:	e883 0003 	stmia.w	r3, {r0, r1}
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f7ff ff24 	bl	8013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	3308      	adds	r3, #8
 8013dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013dc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8013dd6:	b490      	push	{r4, r7}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	60f8      	str	r0, [r7, #12]
 8013dde:	60b9      	str	r1, [r7, #8]
 8013de0:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8013de2:	68fa      	ldr	r2, [r7, #12]
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	4614      	mov	r4, r2
 8013de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	611a      	str	r2, [r3, #16]
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3710      	adds	r7, #16
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bc90      	pop	{r4, r7}
 8013e00:	4770      	bx	lr

08013e02 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013e02:	b580      	push	{r7, lr}
 8013e04:	b082      	sub	sp, #8
 8013e06:	af00      	add	r7, sp, #0
 8013e08:	6078      	str	r0, [r7, #4]
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f000 fb1c 	bl	8014448 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013e1a:	b480      	push	{r7}
 8013e1c:	b083      	sub	sp, #12
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	4618      	mov	r0, r3
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>:
      map(initializer_list<value_type> __l,
 8013e30:	b5b0      	push	{r4, r5, r7, lr}
 8013e32:	b086      	sub	sp, #24
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	1d38      	adds	r0, r7, #4
 8013e3a:	e880 0006 	stmia.w	r0, {r1, r2}
 8013e3e:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8013e40:	68fc      	ldr	r4, [r7, #12]
 8013e42:	f107 0314 	add.w	r3, r7, #20
 8013e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f000 fb08 	bl	801445e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>
 8013e4e:	f107 0314 	add.w	r3, r7, #20
 8013e52:	461a      	mov	r2, r3
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	4620      	mov	r0, r4
 8013e58:	f000 fb0f 	bl	801447a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>
 8013e5c:	f107 0314 	add.w	r3, r7, #20
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7ff ffda 	bl	8013e1a <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8013e66:	68fc      	ldr	r4, [r7, #12]
 8013e68:	1d3b      	adds	r3, r7, #4
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f000 fb23 	bl	80144b6 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 8013e70:	4605      	mov	r5, r0
 8013e72:	1d3b      	adds	r3, r7, #4
 8013e74:	4618      	mov	r0, r3
 8013e76:	f000 fb2a 	bl	80144ce <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	461a      	mov	r2, r3
 8013e7e:	4629      	mov	r1, r5
 8013e80:	4620      	mov	r0, r4
 8013e82:	f000 fb39 	bl	80144f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3718      	adds	r7, #24
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bdb0      	pop	{r4, r5, r7, pc}

08013e90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f000 fb59 	bl	8014550 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3708      	adds	r7, #8
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8013eb0:	6878      	ldr	r0, [r7, #4]
 8013eb2:	f000 fb77 	bl	80145a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f000 fb53 	bl	8014566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7ff ffe4 	bl	8013e90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}

08013ed2 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b082      	sub	sp, #8
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 fb6e 	bl	80145bc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	3708      	adds	r7, #8
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bd80      	pop	{r7, pc}

08013eea <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8013eea:	b480      	push	{r7}
 8013eec:	b083      	sub	sp, #12
 8013eee:	af00      	add	r7, sp, #0
 8013ef0:	6078      	str	r0, [r7, #4]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	370c      	adds	r7, #12
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr

08013f00 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 8013f00:	b5b0      	push	{r4, r5, r7, lr}
 8013f02:	b086      	sub	sp, #24
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60f8      	str	r0, [r7, #12]
 8013f08:	1d38      	adds	r0, r7, #4
 8013f0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8013f0e:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8013f10:	68fc      	ldr	r4, [r7, #12]
 8013f12:	f107 0314 	add.w	r3, r7, #20
 8013f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f000 fb5a 	bl	80145d2 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>
 8013f1e:	f107 0314 	add.w	r3, r7, #20
 8013f22:	461a      	mov	r2, r3
 8013f24:	6839      	ldr	r1, [r7, #0]
 8013f26:	4620      	mov	r0, r4
 8013f28:	f000 fb61 	bl	80145ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>
 8013f2c:	f107 0314 	add.w	r3, r7, #20
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7ff ffda 	bl	8013eea <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8013f36:	68fc      	ldr	r4, [r7, #12]
 8013f38:	1d3b      	adds	r3, r7, #4
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f000 fb75 	bl	801462a <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 8013f40:	4605      	mov	r5, r0
 8013f42:	1d3b      	adds	r3, r7, #4
 8013f44:	4618      	mov	r0, r3
 8013f46:	f000 fb7c 	bl	8014642 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4620      	mov	r0, r4
 8013f52:	f000 fb88 	bl	8014666 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3718      	adds	r7, #24
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bdb0      	pop	{r4, r5, r7, pc}

08013f60 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b082      	sub	sp, #8
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f000 fbc7 	bl	80146fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	4619      	mov	r1, r3
 8013f72:	6878      	ldr	r0, [r7, #4]
 8013f74:	f000 fba3 	bl	80146be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7ff fe5b 	bl	8013c36 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	4618      	mov	r0, r3
 8013f84:	3708      	adds	r7, #8
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b082      	sub	sp, #8
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f000 fbbe 	bl	8014714 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 fbc6 	bl	801472c <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	3304      	adds	r3, #4
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fb fed1 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}

08013fb4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>:
 8013fb4:	b480      	push	{r7}
 8013fb6:	b083      	sub	sp, #12
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	370c      	adds	r7, #12
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc8:	4770      	bx	lr

08013fca <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8013fca:	b490      	push	{r4, r7}
 8013fcc:	b084      	sub	sp, #16
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	60f8      	str	r0, [r7, #12]
 8013fd2:	60b9      	str	r1, [r7, #8]
 8013fd4:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	4614      	mov	r4, r2
 8013fdc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013fde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	3310      	adds	r3, #16
 8013fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013fec:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3710      	adds	r7, #16
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bc90      	pop	{r4, r7}
 8013ffa:	4770      	bx	lr

08013ffc <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8013ffc:	b580      	push	{r7, lr}
 8013ffe:	b082      	sub	sp, #8
 8014000:	af00      	add	r7, sp, #0
 8014002:	6078      	str	r0, [r7, #4]
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f000 fb9c 	bl	8014742 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	4618      	mov	r0, r3
 801400e:	3708      	adds	r7, #8
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	4618      	mov	r0, r3
 8014020:	370c      	adds	r7, #12
 8014022:	46bd      	mov	sp, r7
 8014024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014028:	4770      	bx	lr

0801402a <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>:
      map(initializer_list<value_type> __l,
 801402a:	b5b0      	push	{r4, r5, r7, lr}
 801402c:	b086      	sub	sp, #24
 801402e:	af00      	add	r7, sp, #0
 8014030:	60f8      	str	r0, [r7, #12]
 8014032:	1d38      	adds	r0, r7, #4
 8014034:	e880 0006 	stmia.w	r0, {r1, r2}
 8014038:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801403a:	68fc      	ldr	r4, [r7, #12]
 801403c:	f107 0314 	add.w	r3, r7, #20
 8014040:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014042:	4618      	mov	r0, r3
 8014044:	f000 fb88 	bl	8014758 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>
 8014048:	f107 0314 	add.w	r3, r7, #20
 801404c:	461a      	mov	r2, r3
 801404e:	6839      	ldr	r1, [r7, #0]
 8014050:	4620      	mov	r0, r4
 8014052:	f000 fb8f 	bl	8014774 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>
 8014056:	f107 0314 	add.w	r3, r7, #20
 801405a:	4618      	mov	r0, r3
 801405c:	f7ff ffda 	bl	8014014 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8014060:	68fc      	ldr	r4, [r7, #12]
 8014062:	1d3b      	adds	r3, r7, #4
 8014064:	4618      	mov	r0, r3
 8014066:	f000 fba3 	bl	80147b0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 801406a:	4605      	mov	r5, r0
 801406c:	1d3b      	adds	r3, r7, #4
 801406e:	4618      	mov	r0, r3
 8014070:	f000 fbaa 	bl	80147c8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>
 8014074:	4603      	mov	r3, r0
 8014076:	461a      	mov	r2, r3
 8014078:	4629      	mov	r1, r5
 801407a:	4620      	mov	r0, r4
 801407c:	f000 fbb9 	bl	80147f2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bdb0      	pop	{r4, r5, r7, pc}

0801408a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801408a:	b580      	push	{r7, lr}
 801408c:	b082      	sub	sp, #8
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f000 fbd9 	bl	801484a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80140a2:	b580      	push	{r7, lr}
 80140a4:	b082      	sub	sp, #8
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f000 fbf7 	bl	801489e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 80140b0:	4603      	mov	r3, r0
 80140b2:	4619      	mov	r1, r3
 80140b4:	6878      	ldr	r0, [r7, #4]
 80140b6:	f000 fbd3 	bl	8014860 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	f7ff ffe4 	bl	801408a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	4618      	mov	r0, r3
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80140cc:	b5b0      	push	{r4, r5, r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	60b9      	str	r1, [r7, #8]
 80140d6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80140d8:	68b8      	ldr	r0, [r7, #8]
 80140da:	f7ff fd94 	bl	8013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80140de:	4602      	mov	r2, r0
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f000 fbe3 	bl	80148b6 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 80140f0:	4602      	mov	r2, r0
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	f103 0408 	add.w	r4, r3, #8
 80140f8:	4615      	mov	r5, r2
 80140fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	4618      	mov	r0, r3
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bdb0      	pop	{r4, r5, r7, pc}

08014110 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f000 fbd7 	bl	80148cc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	4618      	mov	r0, r3
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}

08014128 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014128:	b480      	push	{r7}
 801412a:	b083      	sub	sp, #12
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	4618      	mov	r0, r3
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr

0801413e <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 801413e:	b5b0      	push	{r4, r5, r7, lr}
 8014140:	b086      	sub	sp, #24
 8014142:	af00      	add	r7, sp, #0
 8014144:	60f8      	str	r0, [r7, #12]
 8014146:	1d38      	adds	r0, r7, #4
 8014148:	e880 0006 	stmia.w	r0, {r1, r2}
 801414c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801414e:	68fc      	ldr	r4, [r7, #12]
 8014150:	f107 0314 	add.w	r3, r7, #20
 8014154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014156:	4618      	mov	r0, r3
 8014158:	f000 fbc3 	bl	80148e2 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>
 801415c:	f107 0314 	add.w	r3, r7, #20
 8014160:	461a      	mov	r2, r3
 8014162:	6839      	ldr	r1, [r7, #0]
 8014164:	4620      	mov	r0, r4
 8014166:	f000 fbca 	bl	80148fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 801416a:	f107 0314 	add.w	r3, r7, #20
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff ffda 	bl	8014128 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 8014174:	68fc      	ldr	r4, [r7, #12]
 8014176:	1d3b      	adds	r3, r7, #4
 8014178:	4618      	mov	r0, r3
 801417a:	f000 fbde 	bl	801493a <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 801417e:	4605      	mov	r5, r0
 8014180:	1d3b      	adds	r3, r7, #4
 8014182:	4618      	mov	r0, r3
 8014184:	f000 fbe5 	bl	8014952 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>
 8014188:	4603      	mov	r3, r0
 801418a:	461a      	mov	r2, r3
 801418c:	4629      	mov	r1, r5
 801418e:	4620      	mov	r0, r4
 8014190:	f000 fbf4 	bl	801497c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	4618      	mov	r0, r3
 8014198:	3718      	adds	r7, #24
 801419a:	46bd      	mov	sp, r7
 801419c:	bdb0      	pop	{r4, r5, r7, pc}

0801419e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 801419e:	b580      	push	{r7, lr}
 80141a0:	b082      	sub	sp, #8
 80141a2:	af00      	add	r7, sp, #0
 80141a4:	6078      	str	r0, [r7, #4]
 80141a6:	6878      	ldr	r0, [r7, #4]
 80141a8:	f000 fc14 	bl	80149d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}

080141b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80141b6:	b580      	push	{r7, lr}
 80141b8:	b082      	sub	sp, #8
 80141ba:	af00      	add	r7, sp, #0
 80141bc:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80141be:	6878      	ldr	r0, [r7, #4]
 80141c0:	f000 fc32 	bl	8014a28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80141c4:	4603      	mov	r3, r0
 80141c6:	4619      	mov	r1, r3
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 fc0e 	bl	80149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7ff ffe4 	bl	801419e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	60b9      	str	r1, [r7, #8]
 80141ea:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80141ec:	68b8      	ldr	r0, [r7, #8]
 80141ee:	f7ff fd0a 	bl	8013c06 <_ZSt7forwardIR3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 80141f2:	4602      	mov	r2, r0
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f000 fc1e 	bl	8014a40 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 8014204:	4602      	mov	r2, r0
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	3308      	adds	r3, #8
 801420a:	ca07      	ldmia	r2, {r0, r1, r2}
 801420c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	4618      	mov	r0, r3
 8014214:	3710      	adds	r7, #16
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}

0801421a <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801421a:	b580      	push	{r7, lr}
 801421c:	b082      	sub	sp, #8
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f000 fc17 	bl	8014a56 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	4618      	mov	r0, r3
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014232:	b480      	push	{r7}
 8014234:	b083      	sub	sp, #12
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>:
      map(initializer_list<value_type> __l,
 8014248:	b5b0      	push	{r4, r5, r7, lr}
 801424a:	b086      	sub	sp, #24
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	1d38      	adds	r0, r7, #4
 8014252:	e880 0006 	stmia.w	r0, {r1, r2}
 8014256:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 8014258:	68fc      	ldr	r4, [r7, #12]
 801425a:	f107 0314 	add.w	r3, r7, #20
 801425e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014260:	4618      	mov	r0, r3
 8014262:	f000 fc03 	bl	8014a6c <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>
 8014266:	f107 0314 	add.w	r3, r7, #20
 801426a:	461a      	mov	r2, r3
 801426c:	6839      	ldr	r1, [r7, #0]
 801426e:	4620      	mov	r0, r4
 8014270:	f000 fc0a 	bl	8014a88 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>
 8014274:	f107 0314 	add.w	r3, r7, #20
 8014278:	4618      	mov	r0, r3
 801427a:	f7ff ffda 	bl	8014232 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 801427e:	68fc      	ldr	r4, [r7, #12]
 8014280:	1d3b      	adds	r3, r7, #4
 8014282:	4618      	mov	r0, r3
 8014284:	f000 fc1e 	bl	8014ac4 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8014288:	4605      	mov	r5, r0
 801428a:	1d3b      	adds	r3, r7, #4
 801428c:	4618      	mov	r0, r3
 801428e:	f000 fc25 	bl	8014adc <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>
 8014292:	4603      	mov	r3, r0
 8014294:	461a      	mov	r2, r3
 8014296:	4629      	mov	r1, r5
 8014298:	4620      	mov	r0, r4
 801429a:	f000 fc34 	bl	8014b06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	4618      	mov	r0, r3
 80142a2:	3718      	adds	r7, #24
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bdb0      	pop	{r4, r5, r7, pc}

080142a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 fc54 	bl	8014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	4618      	mov	r0, r3
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7fe fb19 	bl	8012900 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 80142ce:	4603      	mov	r3, r0
 80142d0:	4619      	mov	r1, r3
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f000 fc4e 	bl	8014b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	4618      	mov	r0, r3
 80142dc:	f7ff ffe4 	bl	80142a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}

080142ea <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80142ea:	b480      	push	{r7}
 80142ec:	b083      	sub	sp, #12
 80142ee:	af00      	add	r7, sp, #0
 80142f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	4618      	mov	r0, r3
 80142f6:	370c      	adds	r7, #12
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <_ZN17ExternalInterrupt8InstanceC1EOS0_>:
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	683a      	ldr	r2, [r7, #0]
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f000 fc59 	bl	8014bc8 <_ZNSt8functionIFvvEEC1EOS1_>
 8014316:	683b      	ldr	r3, [r7, #0]
 8014318:	7c1a      	ldrb	r2, [r3, #16]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	741a      	strb	r2, [r3, #16]
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	4618      	mov	r0, r3
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8014328:	b590      	push	{r4, r7, lr}
 801432a:	b085      	sub	sp, #20
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8014334:	68b8      	ldr	r0, [r7, #8]
 8014336:	f7ff ffd8 	bl	80142ea <_ZSt7forwardIR8GPIO_PinEOT_RNSt16remove_referenceIS2_E4typeE>
 801433a:	4603      	mov	r3, r0
 801433c:	881a      	ldrh	r2, [r3, #0]
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	801a      	strh	r2, [r3, #0]
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	1d1c      	adds	r4, r3, #4
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 fc33 	bl	8014bb2 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>
 801434c:	4603      	mov	r3, r0
 801434e:	4619      	mov	r1, r3
 8014350:	4620      	mov	r0, r4
 8014352:	f7ff ffd5 	bl	8014300 <_ZN17ExternalInterrupt8InstanceC1EOS0_>
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	4618      	mov	r0, r3
 801435a:	3714      	adds	r7, #20
 801435c:	46bd      	mov	sp, r7
 801435e:	bd90      	pop	{r4, r7, pc}

08014360 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fc3f 	bl	8014bec <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	4618      	mov	r0, r3
 8014372:	3708      	adds	r7, #8
 8014374:	46bd      	mov	sp, r7
 8014376:	bd80      	pop	{r7, pc}

08014378 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014378:	b480      	push	{r7}
 801437a:	b083      	sub	sp, #12
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	4618      	mov	r0, r3
 8014384:	370c      	adds	r7, #12
 8014386:	46bd      	mov	sp, r7
 8014388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438c:	4770      	bx	lr

0801438e <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>:
      map(initializer_list<value_type> __l,
 801438e:	b5b0      	push	{r4, r5, r7, lr}
 8014390:	b086      	sub	sp, #24
 8014392:	af00      	add	r7, sp, #0
 8014394:	60f8      	str	r0, [r7, #12]
 8014396:	1d38      	adds	r0, r7, #4
 8014398:	e880 0006 	stmia.w	r0, {r1, r2}
 801439c:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801439e:	68fc      	ldr	r4, [r7, #12]
 80143a0:	f107 0314 	add.w	r3, r7, #20
 80143a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143a6:	4618      	mov	r0, r3
 80143a8:	f000 fc2b 	bl	8014c02 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>
 80143ac:	f107 0314 	add.w	r3, r7, #20
 80143b0:	461a      	mov	r2, r3
 80143b2:	6839      	ldr	r1, [r7, #0]
 80143b4:	4620      	mov	r0, r4
 80143b6:	f000 fc32 	bl	8014c1e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>
 80143ba:	f107 0314 	add.w	r3, r7, #20
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff ffda 	bl	8014378 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80143c4:	68fc      	ldr	r4, [r7, #12]
 80143c6:	1d3b      	adds	r3, r7, #4
 80143c8:	4618      	mov	r0, r3
 80143ca:	f000 fc46 	bl	8014c5a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 80143ce:	4605      	mov	r5, r0
 80143d0:	1d3b      	adds	r3, r7, #4
 80143d2:	4618      	mov	r0, r3
 80143d4:	f000 fc4d 	bl	8014c72 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>
 80143d8:	4603      	mov	r3, r0
 80143da:	461a      	mov	r2, r3
 80143dc:	4629      	mov	r1, r5
 80143de:	4620      	mov	r0, r4
 80143e0:	f000 fc5c 	bl	8014c9c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	4618      	mov	r0, r3
 80143e8:	3718      	adds	r7, #24
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bdb0      	pop	{r4, r5, r7, pc}

080143ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b082      	sub	sp, #8
 80143f2:	af00      	add	r7, sp, #0
 80143f4:	6078      	str	r0, [r7, #4]
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 fc7c 	bl	8014cf4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	4618      	mov	r0, r3
 8014400:	3708      	adds	r7, #8
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8014406:	b580      	push	{r7, lr}
 8014408:	b082      	sub	sp, #8
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 fc9a 	bl	8014d48 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8014414:	4603      	mov	r3, r0
 8014416:	4619      	mov	r1, r3
 8014418:	6878      	ldr	r0, [r7, #4]
 801441a:	f000 fc76 	bl	8014d0a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff ffe4 	bl	80143ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	4618      	mov	r0, r3
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 fc91 	bl	8014d60 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	4618      	mov	r0, r3
 8014442:	3708      	adds	r7, #8
 8014444:	46bd      	mov	sp, r7
 8014446:	bd80      	pop	{r7, pc}

08014448 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	4618      	mov	r0, r3
 8014454:	370c      	adds	r7, #12
 8014456:	46bd      	mov	sp, r7
 8014458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445c:	4770      	bx	lr

0801445e <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801445e:	b580      	push	{r7, lr}
 8014460:	b082      	sub	sp, #8
 8014462:	af00      	add	r7, sp, #0
 8014464:	6078      	str	r0, [r7, #4]
 8014466:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014468:	6839      	ldr	r1, [r7, #0]
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f000 fc83 	bl	8014d76 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	4618      	mov	r0, r3
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}

0801447a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EEC1ERKSA_RKSB_>:
      _Rb_tree(const _Compare& __comp,
 801447a:	b590      	push	{r4, r7, lr}
 801447c:	b087      	sub	sp, #28
 801447e:	af00      	add	r7, sp, #0
 8014480:	60f8      	str	r0, [r7, #12]
 8014482:	60b9      	str	r1, [r7, #8]
 8014484:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014486:	68fc      	ldr	r4, [r7, #12]
 8014488:	f107 0314 	add.w	r3, r7, #20
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	4618      	mov	r0, r3
 8014490:	f000 fc7d 	bl	8014d8e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>
 8014494:	f107 0314 	add.w	r3, r7, #20
 8014498:	461a      	mov	r2, r3
 801449a:	68b9      	ldr	r1, [r7, #8]
 801449c:	4620      	mov	r0, r4
 801449e:	f000 fc83 	bl	8014da8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>
 80144a2:	f107 0314 	add.w	r3, r7, #20
 80144a6:	4618      	mov	r0, r3
 80144a8:	f000 f852 	bl	8014550 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	4618      	mov	r0, r3
 80144b0:	371c      	adds	r7, #28
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd90      	pop	{r4, r7, pc}

080144b6 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80144b6:	b480      	push	{r7}
 80144b8:	b083      	sub	sp, #12
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4618      	mov	r0, r3
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80144ce:	b590      	push	{r4, r7, lr}
 80144d0:	b083      	sub	sp, #12
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f7ff ffed 	bl	80144b6 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE5beginEv>
 80144dc:	4604      	mov	r4, r0
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 fc7f 	bl	8014de2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>
 80144e4:	4602      	mov	r2, r0
 80144e6:	4613      	mov	r3, r2
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	4413      	add	r3, r2
 80144ec:	009b      	lsls	r3, r3, #2
 80144ee:	4423      	add	r3, r4
 80144f0:	4618      	mov	r0, r3
 80144f2:	370c      	adds	r7, #12
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd90      	pop	{r4, r7, pc}

080144f8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b088      	sub	sp, #32
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014504:	f107 0314 	add.w	r3, r7, #20
 8014508:	68f9      	ldr	r1, [r7, #12]
 801450a:	4618      	mov	r0, r3
 801450c:	f000 fc75 	bl	8014dfa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>
	  for (; __first != __last; ++__first)
 8014510:	68ba      	ldr	r2, [r7, #8]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	429a      	cmp	r2, r3
 8014516:	d017      	beq.n	8014548 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014518:	68f8      	ldr	r0, [r7, #12]
 801451a:	f000 fc7d 	bl	8014e18 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>
 801451e:	4603      	mov	r3, r0
 8014520:	61fb      	str	r3, [r7, #28]
 8014522:	f107 021c 	add.w	r2, r7, #28
 8014526:	f107 0318 	add.w	r3, r7, #24
 801452a:	4611      	mov	r1, r2
 801452c:	4618      	mov	r0, r3
 801452e:	f000 fc84 	bl	8014e3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>
 8014532:	f107 0314 	add.w	r3, r7, #20
 8014536:	68ba      	ldr	r2, [r7, #8]
 8014538:	69b9      	ldr	r1, [r7, #24]
 801453a:	68f8      	ldr	r0, [r7, #12]
 801453c:	f000 fc8d 	bl	8014e5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	3314      	adds	r3, #20
 8014544:	60bb      	str	r3, [r7, #8]
 8014546:	e7e3      	b.n	8014510 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE22_M_insert_range_uniqueIPKS6_EENSt9enable_ifIXsrSt7is_sameIS6_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESJ_SJ_+0x18>
	}
 8014548:	bf00      	nop
 801454a:	3720      	adds	r7, #32
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}

08014550 <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014550:	b480      	push	{r7}
 8014552:	b083      	sub	sp, #12
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	4618      	mov	r0, r3
 801455c:	370c      	adds	r7, #12
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014566:	b580      	push	{r7, lr}
 8014568:	b084      	sub	sp, #16
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d012      	beq.n	801459c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8014576:	6838      	ldr	r0, [r7, #0]
 8014578:	f000 fca2 	bl	8014ec0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801457c:	4603      	mov	r3, r0
 801457e:	4619      	mov	r1, r3
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff fff0 	bl	8014566 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8014586:	6838      	ldr	r0, [r7, #0]
 8014588:	f000 fca6 	bl	8014ed8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 801458c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801458e:	6839      	ldr	r1, [r7, #0]
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f000 fcad 	bl	8014ef0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801459a:	e7e9      	b.n	8014570 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 801459c:	bf00      	nop
 801459e:	3710      	adds	r7, #16
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80145a4:	b480      	push	{r7}
 80145a6:	b083      	sub	sp, #12
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	689b      	ldr	r3, [r3, #8]
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1Ev>:
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	4618      	mov	r0, r3
 80145c8:	370c      	adds	r7, #12
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b082      	sub	sp, #8
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80145dc:	6839      	ldr	r1, [r7, #0]
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 fc97 	bl	8014f12 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	4618      	mov	r0, r3
 80145e8:	3708      	adds	r7, #8
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 80145ee:	b590      	push	{r4, r7, lr}
 80145f0:	b087      	sub	sp, #28
 80145f2:	af00      	add	r7, sp, #0
 80145f4:	60f8      	str	r0, [r7, #12]
 80145f6:	60b9      	str	r1, [r7, #8]
 80145f8:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80145fa:	68fc      	ldr	r4, [r7, #12]
 80145fc:	f107 0314 	add.w	r3, r7, #20
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	4618      	mov	r0, r3
 8014604:	f000 fc91 	bl	8014f2a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>
 8014608:	f107 0314 	add.w	r3, r7, #20
 801460c:	461a      	mov	r2, r3
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	4620      	mov	r0, r4
 8014612:	f000 fc97 	bl	8014f44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8014616:	f107 0314 	add.w	r3, r7, #20
 801461a:	4618      	mov	r0, r3
 801461c:	f7ff fcca 	bl	8013fb4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEED1Ev>
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	4618      	mov	r0, r3
 8014624:	371c      	adds	r7, #28
 8014626:	46bd      	mov	sp, r7
 8014628:	bd90      	pop	{r4, r7, pc}

0801462a <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801462a:	b480      	push	{r7}
 801462c:	b083      	sub	sp, #12
 801462e:	af00      	add	r7, sp, #0
 8014630:	6078      	str	r0, [r7, #4]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	4618      	mov	r0, r3
 8014638:	370c      	adds	r7, #12
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr

08014642 <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014642:	b590      	push	{r4, r7, lr}
 8014644:	b083      	sub	sp, #12
 8014646:	af00      	add	r7, sp, #0
 8014648:	6078      	str	r0, [r7, #4]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7ff ffed 	bl	801462a <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE5beginEv>
 8014650:	4604      	mov	r4, r0
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f000 fc93 	bl	8014f7e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>
 8014658:	4603      	mov	r3, r0
 801465a:	011b      	lsls	r3, r3, #4
 801465c:	4423      	add	r3, r4
 801465e:	4618      	mov	r0, r3
 8014660:	370c      	adds	r7, #12
 8014662:	46bd      	mov	sp, r7
 8014664:	bd90      	pop	{r4, r7, pc}

08014666 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014666:	b580      	push	{r7, lr}
 8014668:	b088      	sub	sp, #32
 801466a:	af00      	add	r7, sp, #0
 801466c:	60f8      	str	r0, [r7, #12]
 801466e:	60b9      	str	r1, [r7, #8]
 8014670:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014672:	f107 0314 	add.w	r3, r7, #20
 8014676:	68f9      	ldr	r1, [r7, #12]
 8014678:	4618      	mov	r0, r3
 801467a:	f000 fc8c 	bl	8014f96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 801467e:	68ba      	ldr	r2, [r7, #8]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	429a      	cmp	r2, r3
 8014684:	d017      	beq.n	80146b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014686:	68f8      	ldr	r0, [r7, #12]
 8014688:	f000 fc94 	bl	8014fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>
 801468c:	4603      	mov	r3, r0
 801468e:	61fb      	str	r3, [r7, #28]
 8014690:	f107 021c 	add.w	r2, r7, #28
 8014694:	f107 0318 	add.w	r3, r7, #24
 8014698:	4611      	mov	r1, r2
 801469a:	4618      	mov	r0, r3
 801469c:	f000 fc9b 	bl	8014fd6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 80146a0:	f107 0314 	add.w	r3, r7, #20
 80146a4:	68ba      	ldr	r2, [r7, #8]
 80146a6:	69b9      	ldr	r1, [r7, #24]
 80146a8:	68f8      	ldr	r0, [r7, #12]
 80146aa:	f000 fca4 	bl	8014ff6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	3310      	adds	r3, #16
 80146b2:	60bb      	str	r3, [r7, #8]
 80146b4:	e7e3      	b.n	801467e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 80146b6:	bf00      	nop
 80146b8:	3720      	adds	r7, #32
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}

080146be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80146be:	b580      	push	{r7, lr}
 80146c0:	b084      	sub	sp, #16
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	6078      	str	r0, [r7, #4]
 80146c6:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80146c8:	683b      	ldr	r3, [r7, #0]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d012      	beq.n	80146f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 80146ce:	6838      	ldr	r0, [r7, #0]
 80146d0:	f000 fcc4 	bl	801505c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80146d4:	4603      	mov	r3, r0
 80146d6:	4619      	mov	r1, r3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f7ff fff0 	bl	80146be <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 80146de:	6838      	ldr	r0, [r7, #0]
 80146e0:	f000 fcc8 	bl	8015074 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80146e4:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80146e6:	6839      	ldr	r1, [r7, #0]
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fccf 	bl	801508c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80146f2:	e7e9      	b.n	80146c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 80146f4:	bf00      	nop
 80146f6:	3710      	adds	r7, #16
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	689b      	ldr	r3, [r3, #8]
 8014708:	4618      	mov	r0, r3
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f000 fcc6 	bl	80150ae <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	3708      	adds	r7, #8
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1Ev>:
      _Rb_tree_key_compare()
 801472c:	b480      	push	{r7}
 801472e:	b083      	sub	sp, #12
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
      { }
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	4618      	mov	r0, r3
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr

08014742 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1Ev>:
 8014742:	b480      	push	{r7}
 8014744:	b083      	sub	sp, #12
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	370c      	adds	r7, #12
 8014750:	46bd      	mov	sp, r7
 8014752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014756:	4770      	bx	lr

08014758 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
 8014760:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014762:	6839      	ldr	r1, [r7, #0]
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 fcad 	bl	80150c4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	4618      	mov	r0, r3
 801476e:	3708      	adds	r7, #8
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}

08014774 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8014774:	b590      	push	{r4, r7, lr}
 8014776:	b087      	sub	sp, #28
 8014778:	af00      	add	r7, sp, #0
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	60b9      	str	r1, [r7, #8]
 801477e:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014780:	68fc      	ldr	r4, [r7, #12]
 8014782:	f107 0314 	add.w	r3, r7, #20
 8014786:	6879      	ldr	r1, [r7, #4]
 8014788:	4618      	mov	r0, r3
 801478a:	f000 fca7 	bl	80150dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>
 801478e:	f107 0314 	add.w	r3, r7, #20
 8014792:	461a      	mov	r2, r3
 8014794:	68b9      	ldr	r1, [r7, #8]
 8014796:	4620      	mov	r0, r4
 8014798:	f000 fcad 	bl	80150f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 801479c:	f107 0314 	add.w	r3, r7, #20
 80147a0:	4618      	mov	r0, r3
 80147a2:	f000 f852 	bl	801484a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	4618      	mov	r0, r3
 80147aa:	371c      	adds	r7, #28
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd90      	pop	{r4, r7, pc}

080147b0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80147b0:	b480      	push	{r7}
 80147b2:	b083      	sub	sp, #12
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4618      	mov	r0, r3
 80147be:	370c      	adds	r7, #12
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr

080147c8 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE3endEv>:
      end() const noexcept { return begin() + size(); }
 80147c8:	b590      	push	{r4, r7, lr}
 80147ca:	b083      	sub	sp, #12
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ff ffed 	bl	80147b0 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE5beginEv>
 80147d6:	4604      	mov	r4, r0
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f000 fca9 	bl	8015130 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>
 80147de:	4602      	mov	r2, r0
 80147e0:	4613      	mov	r3, r2
 80147e2:	005b      	lsls	r3, r3, #1
 80147e4:	4413      	add	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	4423      	add	r3, r4
 80147ea:	4618      	mov	r0, r3
 80147ec:	370c      	adds	r7, #12
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd90      	pop	{r4, r7, pc}

080147f2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b088      	sub	sp, #32
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	60f8      	str	r0, [r7, #12]
 80147fa:	60b9      	str	r1, [r7, #8]
 80147fc:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 80147fe:	f107 0314 	add.w	r3, r7, #20
 8014802:	68f9      	ldr	r1, [r7, #12]
 8014804:	4618      	mov	r0, r3
 8014806:	f000 fc9f 	bl	8015148 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 801480a:	68ba      	ldr	r2, [r7, #8]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	429a      	cmp	r2, r3
 8014810:	d017      	beq.n	8014842 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014812:	68f8      	ldr	r0, [r7, #12]
 8014814:	f000 fca7 	bl	8015166 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>
 8014818:	4603      	mov	r3, r0
 801481a:	61fb      	str	r3, [r7, #28]
 801481c:	f107 021c 	add.w	r2, r7, #28
 8014820:	f107 0318 	add.w	r3, r7, #24
 8014824:	4611      	mov	r1, r2
 8014826:	4618      	mov	r0, r3
 8014828:	f000 fcae 	bl	8015188 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 801482c:	f107 0314 	add.w	r3, r7, #20
 8014830:	68ba      	ldr	r2, [r7, #8]
 8014832:	69b9      	ldr	r1, [r7, #24]
 8014834:	68f8      	ldr	r0, [r7, #12]
 8014836:	f000 fcb7 	bl	80151a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	3318      	adds	r3, #24
 801483e:	60bb      	str	r3, [r7, #8]
 8014840:	e7e3      	b.n	801480a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8014842:	bf00      	nop
 8014844:	3720      	adds	r7, #32
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}

0801484a <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801484a:	b480      	push	{r7}
 801484c:	b083      	sub	sp, #12
 801484e:	af00      	add	r7, sp, #0
 8014850:	6078      	str	r0, [r7, #4]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	4618      	mov	r0, r3
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d012      	beq.n	8014896 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8014870:	6838      	ldr	r0, [r7, #0]
 8014872:	f000 fccc 	bl	801520e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014876:	4603      	mov	r3, r0
 8014878:	4619      	mov	r1, r3
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7ff fff0 	bl	8014860 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014880:	6838      	ldr	r0, [r7, #0]
 8014882:	f000 fcd0 	bl	8015226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014886:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014888:	6839      	ldr	r1, [r7, #0]
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 fcd7 	bl	801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014894:	e7e9      	b.n	801486a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014896:	bf00      	nop
 8014898:	3710      	adds	r7, #16
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}

0801489e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 801489e:	b480      	push	{r7}
 80148a0:	b083      	sub	sp, #12
 80148a2:	af00      	add	r7, sp, #0
 80148a4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	689b      	ldr	r3, [r3, #8]
 80148aa:	4618      	mov	r0, r3
 80148ac:	370c      	adds	r7, #12
 80148ae:	46bd      	mov	sp, r7
 80148b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b4:	4770      	bx	lr

080148b6 <_ZSt7forwardIN12InputCapture8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80148b6:	b480      	push	{r7}
 80148b8:	b083      	sub	sp, #12
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	370c      	adds	r7, #12
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr

080148cc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>:
 80148cc:	b480      	push	{r7}
 80148ce:	b083      	sub	sp, #12
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	6078      	str	r0, [r7, #4]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	4618      	mov	r0, r3
 80148d8:	370c      	adds	r7, #12
 80148da:	46bd      	mov	sp, r7
 80148dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e0:	4770      	bx	lr

080148e2 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b082      	sub	sp, #8
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
 80148ea:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80148ec:	6839      	ldr	r1, [r7, #0]
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f000 fcb6 	bl	8015260 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	4618      	mov	r0, r3
 80148f8:	3708      	adds	r7, #8
 80148fa:	46bd      	mov	sp, r7
 80148fc:	bd80      	pop	{r7, pc}

080148fe <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 80148fe:	b590      	push	{r4, r7, lr}
 8014900:	b087      	sub	sp, #28
 8014902:	af00      	add	r7, sp, #0
 8014904:	60f8      	str	r0, [r7, #12]
 8014906:	60b9      	str	r1, [r7, #8]
 8014908:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 801490a:	68fc      	ldr	r4, [r7, #12]
 801490c:	f107 0314 	add.w	r3, r7, #20
 8014910:	6879      	ldr	r1, [r7, #4]
 8014912:	4618      	mov	r0, r3
 8014914:	f000 fcb0 	bl	8015278 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>
 8014918:	f107 0314 	add.w	r3, r7, #20
 801491c:	461a      	mov	r2, r3
 801491e:	68b9      	ldr	r1, [r7, #8]
 8014920:	4620      	mov	r0, r4
 8014922:	f000 fcb6 	bl	8015292 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8014926:	f107 0314 	add.w	r3, r7, #20
 801492a:	4618      	mov	r0, r3
 801492c:	f000 f852 	bl	80149d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	4618      	mov	r0, r3
 8014934:	371c      	adds	r7, #28
 8014936:	46bd      	mov	sp, r7
 8014938:	bd90      	pop	{r4, r7, pc}

0801493a <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 801493a:	b480      	push	{r7}
 801493c:	b083      	sub	sp, #12
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	4618      	mov	r0, r3
 8014948:	370c      	adds	r7, #12
 801494a:	46bd      	mov	sp, r7
 801494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014950:	4770      	bx	lr

08014952 <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014952:	b590      	push	{r4, r7, lr}
 8014954:	b083      	sub	sp, #12
 8014956:	af00      	add	r7, sp, #0
 8014958:	6078      	str	r0, [r7, #4]
 801495a:	6878      	ldr	r0, [r7, #4]
 801495c:	f7ff ffed 	bl	801493a <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE5beginEv>
 8014960:	4604      	mov	r4, r0
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 fcb2 	bl	80152cc <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>
 8014968:	4602      	mov	r2, r0
 801496a:	4613      	mov	r3, r2
 801496c:	009b      	lsls	r3, r3, #2
 801496e:	4413      	add	r3, r2
 8014970:	00db      	lsls	r3, r3, #3
 8014972:	4423      	add	r3, r4
 8014974:	4618      	mov	r0, r3
 8014976:	370c      	adds	r7, #12
 8014978:	46bd      	mov	sp, r7
 801497a:	bd90      	pop	{r4, r7, pc}

0801497c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 801497c:	b580      	push	{r7, lr}
 801497e:	b088      	sub	sp, #32
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014988:	f107 0314 	add.w	r3, r7, #20
 801498c:	68f9      	ldr	r1, [r7, #12]
 801498e:	4618      	mov	r0, r3
 8014990:	f000 fca8 	bl	80152e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	429a      	cmp	r2, r3
 801499a:	d017      	beq.n	80149cc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 801499c:	68f8      	ldr	r0, [r7, #12]
 801499e:	f000 fcb0 	bl	8015302 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 80149a2:	4603      	mov	r3, r0
 80149a4:	61fb      	str	r3, [r7, #28]
 80149a6:	f107 021c 	add.w	r2, r7, #28
 80149aa:	f107 0318 	add.w	r3, r7, #24
 80149ae:	4611      	mov	r1, r2
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 fcb7 	bl	8015324 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 80149b6:	f107 0314 	add.w	r3, r7, #20
 80149ba:	68ba      	ldr	r2, [r7, #8]
 80149bc:	69b9      	ldr	r1, [r7, #24]
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f000 fcc0 	bl	8015344 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	3328      	adds	r3, #40	; 0x28
 80149c8:	60bb      	str	r3, [r7, #8]
 80149ca:	e7e3      	b.n	8014994 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 80149cc:	bf00      	nop
 80149ce:	3720      	adds	r7, #32
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}

080149d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80149d4:	b480      	push	{r7}
 80149d6:	b083      	sub	sp, #12
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	4618      	mov	r0, r3
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr

080149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80149ea:	b580      	push	{r7, lr}
 80149ec:	b084      	sub	sp, #16
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d012      	beq.n	8014a20 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 80149fa:	6838      	ldr	r0, [r7, #0]
 80149fc:	f000 fcd5 	bl	80153aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014a00:	4603      	mov	r3, r0
 8014a02:	4619      	mov	r1, r3
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f7ff fff0 	bl	80149ea <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014a0a:	6838      	ldr	r0, [r7, #0]
 8014a0c:	f000 fcd9 	bl	80153c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014a10:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014a12:	6839      	ldr	r1, [r7, #0]
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 fce0 	bl	80153da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014a1e:	e7e9      	b.n	80149f4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014a20:	bf00      	nop
 8014a22:	3710      	adds	r7, #16
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}

08014a28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8014a28:	b480      	push	{r7}
 8014a2a:	b083      	sub	sp, #12
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	689b      	ldr	r3, [r3, #8]
 8014a34:	4618      	mov	r0, r3
 8014a36:	370c      	adds	r7, #12
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <_ZSt7forwardIN3ADC8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	370c      	adds	r7, #12
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr

08014a56 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1Ev>:
 8014a56:	b480      	push	{r7}
 8014a58:	b083      	sub	sp, #12
 8014a5a:	af00      	add	r7, sp, #0
 8014a5c:	6078      	str	r0, [r7, #4]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4618      	mov	r0, r3
 8014a62:	370c      	adds	r7, #12
 8014a64:	46bd      	mov	sp, r7
 8014a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a6a:	4770      	bx	lr

08014a6c <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 fcbf 	bl	80153fc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EEC1ERKS9_RKSA_>:
      _Rb_tree(const _Compare& __comp,
 8014a88:	b590      	push	{r4, r7, lr}
 8014a8a:	b087      	sub	sp, #28
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014a94:	68fc      	ldr	r4, [r7, #12]
 8014a96:	f107 0314 	add.w	r3, r7, #20
 8014a9a:	6879      	ldr	r1, [r7, #4]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f000 fcb9 	bl	8015414 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>
 8014aa2:	f107 0314 	add.w	r3, r7, #20
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	68b9      	ldr	r1, [r7, #8]
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f000 fcbf 	bl	801542e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>
 8014ab0:	f107 0314 	add.w	r3, r7, #20
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f000 f852 	bl	8014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	4618      	mov	r0, r3
 8014abe:	371c      	adds	r7, #28
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd90      	pop	{r4, r7, pc}

08014ac4 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014ac4:	b480      	push	{r7}
 8014ac6:	b083      	sub	sp, #12
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	370c      	adds	r7, #12
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b083      	sub	sp, #12
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
 8014ae4:	6878      	ldr	r0, [r7, #4]
 8014ae6:	f7ff ffed 	bl	8014ac4 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE5beginEv>
 8014aea:	4604      	mov	r4, r0
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 fcbb 	bl	8015468 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>
 8014af2:	4602      	mov	r2, r0
 8014af4:	4613      	mov	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	4413      	add	r3, r2
 8014afa:	009b      	lsls	r3, r3, #2
 8014afc:	4423      	add	r3, r4
 8014afe:	4618      	mov	r0, r3
 8014b00:	370c      	adds	r7, #12
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd90      	pop	{r4, r7, pc}

08014b06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014b06:	b580      	push	{r7, lr}
 8014b08:	b088      	sub	sp, #32
 8014b0a:	af00      	add	r7, sp, #0
 8014b0c:	60f8      	str	r0, [r7, #12]
 8014b0e:	60b9      	str	r1, [r7, #8]
 8014b10:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014b12:	f107 0314 	add.w	r3, r7, #20
 8014b16:	68f9      	ldr	r1, [r7, #12]
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f000 fcb1 	bl	8015480 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>
	  for (; __first != __last; ++__first)
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d017      	beq.n	8014b56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014b26:	68f8      	ldr	r0, [r7, #12]
 8014b28:	f7fd f8ba 	bl	8011ca0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	61fb      	str	r3, [r7, #28]
 8014b30:	f107 021c 	add.w	r2, r7, #28
 8014b34:	f107 0318 	add.w	r3, r7, #24
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fc fabe 	bl	80110bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>
 8014b40:	f107 0314 	add.w	r3, r7, #20
 8014b44:	68ba      	ldr	r2, [r7, #8]
 8014b46:	69b9      	ldr	r1, [r7, #24]
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 fca8 	bl	801549e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	3314      	adds	r3, #20
 8014b52:	60bb      	str	r3, [r7, #8]
 8014b54:	e7e3      	b.n	8014b1e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE22_M_insert_range_uniqueIPKS5_EENSt9enable_ifIXsrSt7is_sameIS5_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESI_SI_+0x18>
	}
 8014b56:	bf00      	nop
 8014b58:	3720      	adds	r7, #32
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}

08014b5e <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014b5e:	b480      	push	{r7}
 8014b60:	b083      	sub	sp, #12
 8014b62:	af00      	add	r7, sp, #0
 8014b64:	6078      	str	r0, [r7, #4]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	370c      	adds	r7, #12
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d012      	beq.n	8014baa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	  _M_erase(_S_right(__x));
 8014b84:	6838      	ldr	r0, [r7, #0]
 8014b86:	f7fe f828 	bl	8012bda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	4619      	mov	r1, r3
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f7ff fff0 	bl	8014b74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8014b94:	6838      	ldr	r0, [r7, #0]
 8014b96:	f7fe fa90 	bl	80130ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014b9a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014b9c:	6839      	ldr	r1, [r7, #0]
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7fd fa58 	bl	8012054 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014ba8:	e7e9      	b.n	8014b7e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
    }
 8014baa:	bf00      	nop
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}

08014bb2 <_ZSt7forwardIN17ExternalInterrupt8InstanceEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8014bb2:	b480      	push	{r7}
 8014bb4:	b083      	sub	sp, #12
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	370c      	adds	r7, #12
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc6:	4770      	bx	lr

08014bc8 <_ZNSt8functionIFvvEEC1EOS1_>:
       *  @param __x A %function object rvalue with identical call signature.
       *
       *  The newly-created %function contains the target of @a __x
       *  (if it has one).
       */
      function(function&& __x) noexcept : _Function_base()
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6039      	str	r1, [r7, #0]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fe ff81 	bl	8013adc <_ZNSt14_Function_baseC1Ev>
      {
	__x.swap(*this);
 8014bda:	6879      	ldr	r1, [r7, #4]
 8014bdc:	6838      	ldr	r0, [r7, #0]
 8014bde:	f000 fc91 	bl	8015504 <_ZNSt8functionIFvvEE4swapERS1_>
      }
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4618      	mov	r0, r3
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>:
 8014bec:	b480      	push	{r7}
 8014bee:	b083      	sub	sp, #12
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	370c      	adds	r7, #12
 8014bfa:	46bd      	mov	sp, r7
 8014bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c00:	4770      	bx	lr

08014c02 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8014c02:	b580      	push	{r7, lr}
 8014c04:	b082      	sub	sp, #8
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
 8014c0a:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8014c0c:	6839      	ldr	r1, [r7, #0]
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f000 fc99 	bl	8015546 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	4618      	mov	r0, r3
 8014c18:	3708      	adds	r7, #8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EEC1ERKS8_RKS9_>:
      _Rb_tree(const _Compare& __comp,
 8014c1e:	b590      	push	{r4, r7, lr}
 8014c20:	b087      	sub	sp, #28
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	60f8      	str	r0, [r7, #12]
 8014c26:	60b9      	str	r1, [r7, #8]
 8014c28:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 8014c2a:	68fc      	ldr	r4, [r7, #12]
 8014c2c:	f107 0314 	add.w	r3, r7, #20
 8014c30:	6879      	ldr	r1, [r7, #4]
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 fc93 	bl	801555e <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>
 8014c38:	f107 0314 	add.w	r3, r7, #20
 8014c3c:	461a      	mov	r2, r3
 8014c3e:	68b9      	ldr	r1, [r7, #8]
 8014c40:	4620      	mov	r0, r4
 8014c42:	f000 fc99 	bl	8015578 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>
 8014c46:	f107 0314 	add.w	r3, r7, #20
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f852 	bl	8014cf4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	4618      	mov	r0, r3
 8014c54:	371c      	adds	r7, #28
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd90      	pop	{r4, r7, pc}

08014c5a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>:
      begin() const noexcept { return _M_array; }
 8014c5a:	b480      	push	{r7}
 8014c5c:	b083      	sub	sp, #12
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	6078      	str	r0, [r7, #4]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	4618      	mov	r0, r3
 8014c68:	370c      	adds	r7, #12
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c70:	4770      	bx	lr

08014c72 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8014c72:	b590      	push	{r4, r7, lr}
 8014c74:	b083      	sub	sp, #12
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f7ff ffed 	bl	8014c5a <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE5beginEv>
 8014c80:	4604      	mov	r4, r0
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 fc95 	bl	80155b2 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	4423      	add	r3, r4
 8014c94:	4618      	mov	r0, r3
 8014c96:	370c      	adds	r7, #12
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd90      	pop	{r4, r7, pc}

08014c9c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b088      	sub	sp, #32
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8014ca8:	f107 0314 	add.w	r3, r7, #20
 8014cac:	68f9      	ldr	r1, [r7, #12]
 8014cae:	4618      	mov	r0, r3
 8014cb0:	f000 fc8b 	bl	80155ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>
	  for (; __first != __last; ++__first)
 8014cb4:	68ba      	ldr	r2, [r7, #8]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	429a      	cmp	r2, r3
 8014cba:	d017      	beq.n	8014cec <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f000 fc93 	bl	80155e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	61fb      	str	r3, [r7, #28]
 8014cc6:	f107 021c 	add.w	r2, r7, #28
 8014cca:	f107 0318 	add.w	r3, r7, #24
 8014cce:	4611      	mov	r1, r2
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f000 fc9a 	bl	801560a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>
 8014cd6:	f107 0314 	add.w	r3, r7, #20
 8014cda:	68ba      	ldr	r2, [r7, #8]
 8014cdc:	69b9      	ldr	r1, [r7, #24]
 8014cde:	68f8      	ldr	r0, [r7, #12]
 8014ce0:	f000 fca3 	bl	801562a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>
	  for (; __first != __last; ++__first)
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	3318      	adds	r3, #24
 8014ce8:	60bb      	str	r3, [r7, #8]
 8014cea:	e7e3      	b.n	8014cb4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_insert_range_uniqueIPKS4_EENSt9enable_ifIXsrSt7is_sameIS4_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESH_SH_+0x18>
	}
 8014cec:	bf00      	nop
 8014cee:	3720      	adds	r7, #32
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8014cf4:	b480      	push	{r7}
 8014cf6:	b083      	sub	sp, #12
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	4618      	mov	r0, r3
 8014d00:	370c      	adds	r7, #12
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr

08014d0a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014d0a:	b580      	push	{r7, lr}
 8014d0c:	b084      	sub	sp, #16
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
 8014d12:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d012      	beq.n	8014d40 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8014d1a:	6838      	ldr	r0, [r7, #0]
 8014d1c:	f000 fcb8 	bl	8015690 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8014d20:	4603      	mov	r3, r0
 8014d22:	4619      	mov	r1, r3
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f7ff fff0 	bl	8014d0a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8014d2a:	6838      	ldr	r0, [r7, #0]
 8014d2c:	f000 fcbc 	bl	80156a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8014d30:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 fcc3 	bl	80156c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8014d3e:	e7e9      	b.n	8014d14 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 8014d40:	bf00      	nop
 8014d42:	3710      	adds	r7, #16
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8014d48:	b480      	push	{r7}
 8014d4a:	b083      	sub	sp, #12
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	689b      	ldr	r3, [r3, #8]
 8014d54:	4618      	mov	r0, r3
 8014d56:	370c      	adds	r7, #12
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
 8014d60:	b480      	push	{r7}
 8014d62:	b083      	sub	sp, #12
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	370c      	adds	r7, #12
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr

08014d76 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEC1ERKS8_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8014d76:	b480      	push	{r7}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
 8014d7e:	6039      	str	r1, [r7, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	4618      	mov	r0, r3
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr

08014d8e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1IS6_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8014d8e:	b580      	push	{r7, lr}
 8014d90:	b082      	sub	sp, #8
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	6039      	str	r1, [r7, #0]
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 fca2 	bl	80156e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	4618      	mov	r0, r3
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1ERKSA_OSaISt13_Rb_tree_nodeIS6_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f000 fc9f 	bl	80156f8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	f000 fca5 	bl	801570e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	68b9      	ldr	r1, [r7, #8]
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f000 fcae 	bl	801572a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	3304      	adds	r3, #4
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fa ffba 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3710      	adds	r7, #16
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}

08014de2 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE4sizeEv>:
      size() const noexcept { return _M_len; }
 8014de2:	b480      	push	{r7}
 8014de4:	b083      	sub	sp, #12
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	4618      	mov	r0, r3
 8014df0:	370c      	adds	r7, #12
 8014df2:	46bd      	mov	sp, r7
 8014df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df8:	4770      	bx	lr

08014dfa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeC1ERSC_>:
	_Alloc_node(_Rb_tree& __t)
 8014dfa:	b480      	push	{r7}
 8014dfc:	b083      	sub	sp, #12
 8014dfe:	af00      	add	r7, sp, #0
 8014e00:	6078      	str	r0, [r7, #4]
 8014e02:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	683a      	ldr	r2, [r7, #0]
 8014e08:	601a      	str	r2, [r3, #0]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	370c      	adds	r7, #12
 8014e10:	46bd      	mov	sp, r7
 8014e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e16:	4770      	bx	lr

08014e18 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b084      	sub	sp, #16
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	1d1a      	adds	r2, r3, #4
 8014e24:	f107 030c 	add.w	r3, r7, #12
 8014e28:	4611      	mov	r1, r2
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f000 fc89 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	4618      	mov	r0, r3
 8014e34:	3710      	adds	r7, #16
 8014e36:	46bd      	mov	sp, r7
 8014e38:	bd80      	pop	{r7, pc}

08014e3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8014e3a:	b480      	push	{r7}
 8014e3c:	b083      	sub	sp, #12
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
 8014e42:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	601a      	str	r2, [r3, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	370c      	adds	r7, #12
 8014e52:	46bd      	mov	sp, r7
 8014e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e58:	4770      	bx	lr

08014e5a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014e5a:	b5b0      	push	{r4, r5, r7, lr}
 8014e5c:	b08a      	sub	sp, #40	; 0x28
 8014e5e:	af02      	add	r7, sp, #8
 8014e60:	60f8      	str	r0, [r7, #12]
 8014e62:	60b9      	str	r1, [r7, #8]
 8014e64:	607a      	str	r2, [r7, #4]
 8014e66:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8014e68:	f107 0318 	add.w	r3, r7, #24
 8014e6c:	6879      	ldr	r1, [r7, #4]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f000 fd99 	bl	80159a6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8014e74:	4603      	mov	r3, r0
 8014e76:	f107 0010 	add.w	r0, r7, #16
 8014e7a:	68ba      	ldr	r2, [r7, #8]
 8014e7c:	68f9      	ldr	r1, [r7, #12]
 8014e7e:	f000 fc6f 	bl	8015760 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
      if (__res.second)
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d00f      	beq.n	8014ea8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8014e88:	693c      	ldr	r4, [r7, #16]
 8014e8a:	697d      	ldr	r5, [r7, #20]
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 fd96 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8014e92:	4602      	mov	r2, r0
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	4613      	mov	r3, r2
 8014e9a:	462a      	mov	r2, r5
 8014e9c:	4621      	mov	r1, r4
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f000 fd98 	bl	80159d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>
 8014ea4:	4603      	mov	r3, r0
			  __node_gen);
 8014ea6:	e007      	b.n	8014eb8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_insert_unique_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8014ea8:	693a      	ldr	r2, [r7, #16]
 8014eaa:	f107 031c 	add.w	r3, r7, #28
 8014eae:	4611      	mov	r1, r2
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f000 fc46 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8014eb6:	69fb      	ldr	r3, [r7, #28]
    }
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3720      	adds	r7, #32
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bdb0      	pop	{r4, r5, r7, pc}

08014ec0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	68db      	ldr	r3, [r3, #12]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	370c      	adds	r7, #12
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed6:	4770      	bx	lr

08014ed8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8014ed8:	b480      	push	{r7}
 8014eda:	b083      	sub	sp, #12
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	689b      	ldr	r3, [r3, #8]
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f000 fdb2 	bl	8015a66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8014f02:	6839      	ldr	r1, [r7, #0]
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f000 fdc3 	bl	8015a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8014f0a:	bf00      	nop
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}

08014f12 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3Pin12TimerChannelEEC1ERKS6_>:
 8014f12:	b480      	push	{r7}
 8014f14:	b083      	sub	sp, #12
 8014f16:	af00      	add	r7, sp, #0
 8014f18:	6078      	str	r0, [r7, #4]
 8014f1a:	6039      	str	r1, [r7, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	370c      	adds	r7, #12
 8014f22:	46bd      	mov	sp, r7
 8014f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f28:	4770      	bx	lr

08014f2a <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1IS4_EERKSaIT_E>:
 8014f2a:	b580      	push	{r7, lr}
 8014f2c:	b082      	sub	sp, #8
 8014f2e:	af00      	add	r7, sp, #0
 8014f30:	6078      	str	r0, [r7, #4]
 8014f32:	6039      	str	r1, [r7, #0]
 8014f34:	6878      	ldr	r0, [r7, #4]
 8014f36:	f000 f8ba 	bl	80150ae <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3708      	adds	r7, #8
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f000 fdaf 	bl	8015ab4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>
 8014f56:	4603      	mov	r3, r0
 8014f58:	4619      	mov	r1, r3
 8014f5a:	68f8      	ldr	r0, [r7, #12]
 8014f5c:	f000 fdb5 	bl	8015aca <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	68b9      	ldr	r1, [r7, #8]
 8014f64:	4618      	mov	r0, r3
 8014f66:	f000 fdbe 	bl	8015ae6 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f7fa feec 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	4618      	mov	r0, r3
 8014f78:	3710      	adds	r7, #16
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}

08014f7e <_ZNKSt16initializer_listISt4pairIK3Pin12TimerChannelEE4sizeEv>:
 8014f7e:	b480      	push	{r7}
 8014f80:	b083      	sub	sp, #12
 8014f82:	af00      	add	r7, sp, #0
 8014f84:	6078      	str	r0, [r7, #4]
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	370c      	adds	r7, #12
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f94:	4770      	bx	lr

08014f96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 8014f96:	b480      	push	{r7}
 8014f98:	b083      	sub	sp, #12
 8014f9a:	af00      	add	r7, sp, #0
 8014f9c:	6078      	str	r0, [r7, #4]
 8014f9e:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	683a      	ldr	r2, [r7, #0]
 8014fa4:	601a      	str	r2, [r3, #0]
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	4618      	mov	r0, r3
 8014faa:	370c      	adds	r7, #12
 8014fac:	46bd      	mov	sp, r7
 8014fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb2:	4770      	bx	lr

08014fb4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	1d1a      	adds	r2, r3, #4
 8014fc0:	f107 030c 	add.w	r3, r7, #12
 8014fc4:	4611      	mov	r1, r2
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f000 fd99 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3710      	adds	r7, #16
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8014fd6:	b480      	push	{r7}
 8014fd8:	b083      	sub	sp, #12
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
 8014fde:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8014fe0:	683b      	ldr	r3, [r7, #0]
 8014fe2:	681a      	ldr	r2, [r3, #0]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	601a      	str	r2, [r3, #0]
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	4618      	mov	r0, r3
 8014fec:	370c      	adds	r7, #12
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff4:	4770      	bx	lr

08014ff6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8014ff6:	b5b0      	push	{r4, r5, r7, lr}
 8014ff8:	b08a      	sub	sp, #40	; 0x28
 8014ffa:	af02      	add	r7, sp, #8
 8014ffc:	60f8      	str	r0, [r7, #12]
 8014ffe:	60b9      	str	r1, [r7, #8]
 8015000:	607a      	str	r2, [r7, #4]
 8015002:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015004:	f107 0318 	add.w	r3, r7, #24
 8015008:	6879      	ldr	r1, [r7, #4]
 801500a:	4618      	mov	r0, r3
 801500c:	f000 fea9 	bl	8015d62 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8015010:	4603      	mov	r3, r0
 8015012:	f107 0010 	add.w	r0, r7, #16
 8015016:	68ba      	ldr	r2, [r7, #8]
 8015018:	68f9      	ldr	r1, [r7, #12]
 801501a:	f000 fd7f 	bl	8015b1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>
      if (__res.second)
 801501e:	697b      	ldr	r3, [r7, #20]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d00f      	beq.n	8015044 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015024:	693c      	ldr	r4, [r7, #16]
 8015026:	697d      	ldr	r5, [r7, #20]
 8015028:	6878      	ldr	r0, [r7, #4]
 801502a:	f000 fea6 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 801502e:	4602      	mov	r2, r0
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	9300      	str	r3, [sp, #0]
 8015034:	4613      	mov	r3, r2
 8015036:	462a      	mov	r2, r5
 8015038:	4621      	mov	r1, r4
 801503a:	68f8      	ldr	r0, [r7, #12]
 801503c:	f000 fea8 	bl	8015d90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8015040:	4603      	mov	r3, r0
			  __node_gen);
 8015042:	e007      	b.n	8015054 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015044:	693a      	ldr	r2, [r7, #16]
 8015046:	f107 031c 	add.w	r3, r7, #28
 801504a:	4611      	mov	r1, r2
 801504c:	4618      	mov	r0, r3
 801504e:	f000 fd56 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015052:	69fb      	ldr	r3, [r7, #28]
    }
 8015054:	4618      	mov	r0, r3
 8015056:	3720      	adds	r7, #32
 8015058:	46bd      	mov	sp, r7
 801505a:	bdb0      	pop	{r4, r5, r7, pc}

0801505c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	68db      	ldr	r3, [r3, #12]
 8015068:	4618      	mov	r0, r3
 801506a:	370c      	adds	r7, #12
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	689b      	ldr	r3, [r3, #8]
 8015080:	4618      	mov	r0, r3
 8015082:	370c      	adds	r7, #12
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr

0801508c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801508c:	b580      	push	{r7, lr}
 801508e:	b082      	sub	sp, #8
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8015096:	6839      	ldr	r1, [r7, #0]
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 fec2 	bl	8015e22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 801509e:	6839      	ldr	r1, [r7, #0]
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f000 fed3 	bl	8015e4c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80150a6:	bf00      	nop
 80150a8:	3708      	adds	r7, #8
 80150aa:	46bd      	mov	sp, r7
 80150ac:	bd80      	pop	{r7, pc}

080150ae <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80150ae:	b480      	push	{r7}
 80150b0:	b083      	sub	sp, #12
 80150b2:	af00      	add	r7, sp, #0
 80150b4:	6078      	str	r0, [r7, #4]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	4618      	mov	r0, r3
 80150ba:	370c      	adds	r7, #12
 80150bc:	46bd      	mov	sp, r7
 80150be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150c2:	4770      	bx	lr

080150c4 <_ZN9__gnu_cxx13new_allocatorISt4pairIKS1_I3PinS2_E12TimerChannelEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	6039      	str	r1, [r7, #0]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	4618      	mov	r0, r3
 80150d2:	370c      	adds	r7, #12
 80150d4:	46bd      	mov	sp, r7
 80150d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150da:	4770      	bx	lr

080150dc <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1IS5_EERKSaIT_E>:
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f000 fec2 	bl	8015e70 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	4618      	mov	r0, r3
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b084      	sub	sp, #16
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	60f8      	str	r0, [r7, #12]
 80150fe:	60b9      	str	r1, [r7, #8]
 8015100:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8015102:	6878      	ldr	r0, [r7, #4]
 8015104:	f000 febf 	bl	8015e86 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015108:	4603      	mov	r3, r0
 801510a:	4619      	mov	r1, r3
 801510c:	68f8      	ldr	r0, [r7, #12]
 801510e:	f000 fec5 	bl	8015e9c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	68b9      	ldr	r1, [r7, #8]
 8015116:	4618      	mov	r0, r3
 8015118:	f000 fb07 	bl	801572a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	3304      	adds	r3, #4
 8015120:	4618      	mov	r0, r3
 8015122:	f7fa fe13 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	4618      	mov	r0, r3
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <_ZNKSt16initializer_listISt4pairIKS0_I3PinS1_E12TimerChannelEE4sizeEv>:
 8015130:	b480      	push	{r7}
 8015132:	b083      	sub	sp, #12
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	370c      	adds	r7, #12
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	683a      	ldr	r2, [r7, #0]
 8015156:	601a      	str	r2, [r3, #0]
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	4618      	mov	r0, r3
 801515c:	370c      	adds	r7, #12
 801515e:	46bd      	mov	sp, r7
 8015160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015164:	4770      	bx	lr

08015166 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015166:	b580      	push	{r7, lr}
 8015168:	b084      	sub	sp, #16
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	1d1a      	adds	r2, r3, #4
 8015172:	f107 030c 	add.w	r3, r7, #12
 8015176:	4611      	mov	r1, r2
 8015178:	4618      	mov	r0, r3
 801517a:	f000 fe9d 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	4618      	mov	r0, r3
 8015182:	3710      	adds	r7, #16
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}

08015188 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4618      	mov	r0, r3
 801519e:	370c      	adds	r7, #12
 80151a0:	46bd      	mov	sp, r7
 80151a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a6:	4770      	bx	lr

080151a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80151a8:	b5b0      	push	{r4, r5, r7, lr}
 80151aa:	b08a      	sub	sp, #40	; 0x28
 80151ac:	af02      	add	r7, sp, #8
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	607a      	str	r2, [r7, #4]
 80151b4:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80151b6:	f107 0318 	add.w	r3, r7, #24
 80151ba:	6879      	ldr	r1, [r7, #4]
 80151bc:	4618      	mov	r0, r3
 80151be:	f000 ffad 	bl	801611c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 80151c2:	4603      	mov	r3, r0
 80151c4:	f107 0010 	add.w	r0, r7, #16
 80151c8:	68ba      	ldr	r2, [r7, #8]
 80151ca:	68f9      	ldr	r1, [r7, #12]
 80151cc:	f000 fe83 	bl	8015ed6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>
      if (__res.second)
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d00f      	beq.n	80151f6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80151d6:	693c      	ldr	r4, [r7, #16]
 80151d8:	697d      	ldr	r5, [r7, #20]
 80151da:	6878      	ldr	r0, [r7, #4]
 80151dc:	f000 ffaa 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80151e0:	4602      	mov	r2, r0
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	9300      	str	r3, [sp, #0]
 80151e6:	4613      	mov	r3, r2
 80151e8:	462a      	mov	r2, r5
 80151ea:	4621      	mov	r1, r4
 80151ec:	68f8      	ldr	r0, [r7, #12]
 80151ee:	f000 ffac 	bl	801614a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80151f2:	4603      	mov	r3, r0
			  __node_gen);
 80151f4:	e007      	b.n	8015206 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80151f6:	693a      	ldr	r2, [r7, #16]
 80151f8:	f107 031c 	add.w	r3, r7, #28
 80151fc:	4611      	mov	r1, r2
 80151fe:	4618      	mov	r0, r3
 8015200:	f000 fe5a 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015204:	69fb      	ldr	r3, [r7, #28]
    }
 8015206:	4618      	mov	r0, r3
 8015208:	3720      	adds	r7, #32
 801520a:	46bd      	mov	sp, r7
 801520c:	bdb0      	pop	{r4, r5, r7, pc}

0801520e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801520e:	b480      	push	{r7}
 8015210:	b083      	sub	sp, #12
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	68db      	ldr	r3, [r3, #12]
 801521a:	4618      	mov	r0, r3
 801521c:	370c      	adds	r7, #12
 801521e:	46bd      	mov	sp, r7
 8015220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015224:	4770      	bx	lr

08015226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015226:	b480      	push	{r7}
 8015228:	b083      	sub	sp, #12
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	689b      	ldr	r3, [r3, #8]
 8015232:	4618      	mov	r0, r3
 8015234:	370c      	adds	r7, #12
 8015236:	46bd      	mov	sp, r7
 8015238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801523c:	4770      	bx	lr

0801523e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 801523e:	b580      	push	{r7, lr}
 8015240:	b082      	sub	sp, #8
 8015242:	af00      	add	r7, sp, #0
 8015244:	6078      	str	r0, [r7, #4]
 8015246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8015248:	6839      	ldr	r1, [r7, #0]
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f000 ffc6 	bl	80161dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 8015250:	6839      	ldr	r1, [r7, #0]
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f000 ffd7 	bl	8016206 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8015258:	bf00      	nop
 801525a:	3708      	adds	r7, #8
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}

08015260 <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKS7_>:
 8015260:	b480      	push	{r7}
 8015262:	b083      	sub	sp, #12
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	4618      	mov	r0, r3
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr

08015278 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1IS5_EERKSaIT_E>:
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f000 ffd1 	bl	801622a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	4618      	mov	r0, r3
 801528c:	3708      	adds	r7, #8
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}

08015292 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8015292:	b580      	push	{r7, lr}
 8015294:	b084      	sub	sp, #16
 8015296:	af00      	add	r7, sp, #0
 8015298:	60f8      	str	r0, [r7, #12]
 801529a:	60b9      	str	r1, [r7, #8]
 801529c:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f000 ffce 	bl	8016240 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 80152a4:	4603      	mov	r3, r0
 80152a6:	4619      	mov	r1, r3
 80152a8:	68f8      	ldr	r0, [r7, #12]
 80152aa:	f000 ffd4 	bl	8016256 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	68b9      	ldr	r1, [r7, #8]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f000 fc17 	bl	8015ae6 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	3304      	adds	r3, #4
 80152bc:	4618      	mov	r0, r3
 80152be:	f7fa fd45 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	4618      	mov	r0, r3
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <_ZNKSt16initializer_listISt4pairIK3PinN12InputCapture8InstanceEEE4sizeEv>:
 80152cc:	b480      	push	{r7}
 80152ce:	b083      	sub	sp, #12
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	4618      	mov	r0, r3
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	683a      	ldr	r2, [r7, #0]
 80152f2:	601a      	str	r2, [r3, #0]
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	4618      	mov	r0, r3
 80152f8:	370c      	adds	r7, #12
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr

08015302 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8015302:	b580      	push	{r7, lr}
 8015304:	b084      	sub	sp, #16
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	1d1a      	adds	r2, r3, #4
 801530e:	f107 030c 	add.w	r3, r7, #12
 8015312:	4611      	mov	r1, r2
 8015314:	4618      	mov	r0, r3
 8015316:	f000 ffac 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	4618      	mov	r0, r3
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_ZNSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8015324:	b480      	push	{r7}
 8015326:	b083      	sub	sp, #12
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
 801532c:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	681a      	ldr	r2, [r3, #0]
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	601a      	str	r2, [r3, #0]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	4618      	mov	r0, r3
 801533a:	370c      	adds	r7, #12
 801533c:	46bd      	mov	sp, r7
 801533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015342:	4770      	bx	lr

08015344 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015344:	b5b0      	push	{r4, r5, r7, lr}
 8015346:	b08a      	sub	sp, #40	; 0x28
 8015348:	af02      	add	r7, sp, #8
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015352:	f107 0318 	add.w	r3, r7, #24
 8015356:	6879      	ldr	r1, [r7, #4]
 8015358:	4618      	mov	r0, r3
 801535a:	f001 f8bc 	bl	80164d6 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 801535e:	4603      	mov	r3, r0
 8015360:	f107 0010 	add.w	r0, r7, #16
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	68f9      	ldr	r1, [r7, #12]
 8015368:	f000 ff92 	bl	8016290 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d00f      	beq.n	8015392 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015372:	693c      	ldr	r4, [r7, #16]
 8015374:	697d      	ldr	r5, [r7, #20]
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	f001 f8b9 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801537c:	4602      	mov	r2, r0
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	9300      	str	r3, [sp, #0]
 8015382:	4613      	mov	r3, r2
 8015384:	462a      	mov	r2, r5
 8015386:	4621      	mov	r1, r4
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f001 f8bb 	bl	8016504 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 801538e:	4603      	mov	r3, r0
			  __node_gen);
 8015390:	e007      	b.n	80153a2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015392:	693a      	ldr	r2, [r7, #16]
 8015394:	f107 031c 	add.w	r3, r7, #28
 8015398:	4611      	mov	r1, r2
 801539a:	4618      	mov	r0, r3
 801539c:	f000 ff69 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80153a0:	69fb      	ldr	r3, [r7, #28]
    }
 80153a2:	4618      	mov	r0, r3
 80153a4:	3720      	adds	r7, #32
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bdb0      	pop	{r4, r5, r7, pc}

080153aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80153aa:	b480      	push	{r7}
 80153ac:	b083      	sub	sp, #12
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	68db      	ldr	r3, [r3, #12]
 80153b6:	4618      	mov	r0, r3
 80153b8:	370c      	adds	r7, #12
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr

080153c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80153c2:	b480      	push	{r7}
 80153c4:	b083      	sub	sp, #12
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	689b      	ldr	r3, [r3, #8]
 80153ce:	4618      	mov	r0, r3
 80153d0:	370c      	adds	r7, #12
 80153d2:	46bd      	mov	sp, r7
 80153d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d8:	4770      	bx	lr

080153da <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80153da:	b580      	push	{r7, lr}
 80153dc:	b082      	sub	sp, #8
 80153de:	af00      	add	r7, sp, #0
 80153e0:	6078      	str	r0, [r7, #4]
 80153e2:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80153e4:	6839      	ldr	r1, [r7, #0]
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f001 f8d5 	bl	8016596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 80153ec:	6839      	ldr	r1, [r7, #0]
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f001 f8e6 	bl	80165c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 80153f4:	bf00      	nop
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <_ZN9__gnu_cxx13new_allocatorISt4pairIK3PinN3ADC8InstanceEEEC1ERKS7_>:
 80153fc:	b480      	push	{r7}
 80153fe:	b083      	sub	sp, #12
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	4618      	mov	r0, r3
 801540a:	370c      	adds	r7, #12
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1IS5_EERKSaIT_E>:
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f001 f8e0 	bl	80165e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	4618      	mov	r0, r3
 8015428:	3708      	adds	r7, #8
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1ERKS9_OSaISt13_Rb_tree_nodeIS5_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 801542e:	b580      	push	{r7, lr}
 8015430:	b084      	sub	sp, #16
 8015432:	af00      	add	r7, sp, #0
 8015434:	60f8      	str	r0, [r7, #12]
 8015436:	60b9      	str	r1, [r7, #8]
 8015438:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f001 f8dd 	bl	80165fa <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>
 8015440:	4603      	mov	r3, r0
 8015442:	4619      	mov	r1, r3
 8015444:	68f8      	ldr	r0, [r7, #12]
 8015446:	f001 f8e3 	bl	8016610 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	68b9      	ldr	r1, [r7, #8]
 801544e:	4618      	mov	r0, r3
 8015450:	f000 fb49 	bl	8015ae6 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	3304      	adds	r3, #4
 8015458:	4618      	mov	r0, r3
 801545a:	f7fa fc77 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	4618      	mov	r0, r3
 8015462:	3710      	adds	r7, #16
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}

08015468 <_ZNKSt16initializer_listISt4pairIK3PinN3ADC8InstanceEEE4sizeEv>:
 8015468:	b480      	push	{r7}
 801546a:	b083      	sub	sp, #12
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	685b      	ldr	r3, [r3, #4]
 8015474:	4618      	mov	r0, r3
 8015476:	370c      	adds	r7, #12
 8015478:	46bd      	mov	sp, r7
 801547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801547e:	4770      	bx	lr

08015480 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeC1ERSB_>:
	_Alloc_node(_Rb_tree& __t)
 8015480:	b480      	push	{r7}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
 8015488:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	683a      	ldr	r2, [r7, #0]
 801548e:	601a      	str	r2, [r3, #0]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	4618      	mov	r0, r3
 8015494:	370c      	adds	r7, #12
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr

0801549e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801549e:	b5b0      	push	{r4, r5, r7, lr}
 80154a0:	b08a      	sub	sp, #40	; 0x28
 80154a2:	af02      	add	r7, sp, #8
 80154a4:	60f8      	str	r0, [r7, #12]
 80154a6:	60b9      	str	r1, [r7, #8]
 80154a8:	607a      	str	r2, [r7, #4]
 80154aa:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80154ac:	f107 0318 	add.w	r3, r7, #24
 80154b0:	6879      	ldr	r1, [r7, #4]
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fd fbbc 	bl	8012c30 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 80154b8:	4603      	mov	r3, r0
 80154ba:	f107 0010 	add.w	r0, r7, #16
 80154be:	68ba      	ldr	r2, [r7, #8]
 80154c0:	68f9      	ldr	r1, [r7, #12]
 80154c2:	f7fc fc54 	bl	8011d6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>
      if (__res.second)
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d00f      	beq.n	80154ec <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80154cc:	693c      	ldr	r4, [r7, #16]
 80154ce:	697d      	ldr	r5, [r7, #20]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	f001 f8ab 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80154d6:	4602      	mov	r2, r0
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	4613      	mov	r3, r2
 80154de:	462a      	mov	r2, r5
 80154e0:	4621      	mov	r1, r4
 80154e2:	68f8      	ldr	r0, [r7, #12]
 80154e4:	f001 f8ad 	bl	8016642 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>
 80154e8:	4603      	mov	r3, r0
			  __node_gen);
 80154ea:	e007      	b.n	80154fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_insert_unique_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EOT_RT0_+0x5e>
      return iterator(__res.first);
 80154ec:	693a      	ldr	r2, [r7, #16]
 80154ee:	f107 031c 	add.w	r3, r7, #28
 80154f2:	4611      	mov	r1, r2
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7fc fdbe 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80154fa:	69fb      	ldr	r3, [r7, #28]
    }
 80154fc:	4618      	mov	r0, r3
 80154fe:	3720      	adds	r7, #32
 8015500:	46bd      	mov	sp, r7
 8015502:	bdb0      	pop	{r4, r5, r7, pc}

08015504 <_ZNSt8functionIFvvEE4swapERS1_>:
       *  @param __x A %function with identical call signature.
       *
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x) noexcept
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
      {
	std::swap(_M_functor, __x._M_functor);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	683a      	ldr	r2, [r7, #0]
 8015512:	4611      	mov	r1, r2
 8015514:	4618      	mov	r0, r3
 8015516:	f001 f8dd 	bl	80166d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f103 0208 	add.w	r2, r3, #8
 8015520:	683b      	ldr	r3, [r7, #0]
 8015522:	3308      	adds	r3, #8
 8015524:	4619      	mov	r1, r3
 8015526:	4610      	mov	r0, r2
 8015528:	f001 f8fb 	bl	8016722 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f103 020c 	add.w	r2, r3, #12
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	330c      	adds	r3, #12
 8015536:	4619      	mov	r1, r3
 8015538:	4610      	mov	r0, r2
 801553a:	f001 f911 	bl	8016760 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 801553e:	bf00      	nop
 8015540:	3708      	adds	r7, #8
 8015542:	46bd      	mov	sp, r7
 8015544:	bd80      	pop	{r7, pc}

08015546 <_ZN9__gnu_cxx13new_allocatorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKS6_>:
 8015546:	b480      	push	{r7}
 8015548:	b083      	sub	sp, #12
 801554a:	af00      	add	r7, sp, #0
 801554c:	6078      	str	r0, [r7, #4]
 801554e:	6039      	str	r1, [r7, #0]
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	4618      	mov	r0, r3
 8015554:	370c      	adds	r7, #12
 8015556:	46bd      	mov	sp, r7
 8015558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555c:	4770      	bx	lr

0801555e <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1IS4_EERKSaIT_E>:
 801555e:	b580      	push	{r7, lr}
 8015560:	b082      	sub	sp, #8
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
 8015566:	6039      	str	r1, [r7, #0]
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f001 f918 	bl	801679e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4618      	mov	r0, r3
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1ERKS8_OSaISt13_Rb_tree_nodeIS4_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8015578:	b580      	push	{r7, lr}
 801557a:	b084      	sub	sp, #16
 801557c:	af00      	add	r7, sp, #0
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f001 f915 	bl	80167b4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>
 801558a:	4603      	mov	r3, r0
 801558c:	4619      	mov	r1, r3
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f001 f91b 	bl	80167ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	68b9      	ldr	r1, [r7, #8]
 8015598:	4618      	mov	r0, r3
 801559a:	f001 f924 	bl	80167e6 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	3304      	adds	r3, #4
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fa fbd2 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	4618      	mov	r0, r3
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <_ZNKSt16initializer_listISt4pairIKtN17ExternalInterrupt8InstanceEEE4sizeEv>:
 80155b2:	b480      	push	{r7}
 80155b4:	b083      	sub	sp, #12
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	685b      	ldr	r3, [r3, #4]
 80155be:	4618      	mov	r0, r3
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c8:	4770      	bx	lr

080155ca <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeC1ERSA_>:
	_Alloc_node(_Rb_tree& __t)
 80155ca:	b480      	push	{r7}
 80155cc:	b083      	sub	sp, #12
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	601a      	str	r2, [r3, #0]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	4618      	mov	r0, r3
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr

080155e8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b084      	sub	sp, #16
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	1d1a      	adds	r2, r3, #4
 80155f4:	f107 030c 	add.w	r3, r7, #12
 80155f8:	4611      	mov	r1, r2
 80155fa:	4618      	mov	r0, r3
 80155fc:	f001 f8ff 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	4618      	mov	r0, r3
 8015604:	3710      	adds	r7, #16
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 801560a:	b480      	push	{r7}
 801560c:	b083      	sub	sp, #12
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
 8015612:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	681a      	ldr	r2, [r3, #0]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	601a      	str	r2, [r3, #0]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	4618      	mov	r0, r3
 8015620:	370c      	adds	r7, #12
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr

0801562a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801562a:	b5b0      	push	{r4, r5, r7, lr}
 801562c:	b08a      	sub	sp, #40	; 0x28
 801562e:	af02      	add	r7, sp, #8
 8015630:	60f8      	str	r0, [r7, #12]
 8015632:	60b9      	str	r1, [r7, #8]
 8015634:	607a      	str	r2, [r7, #4]
 8015636:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 8015638:	f107 0318 	add.w	r3, r7, #24
 801563c:	6879      	ldr	r1, [r7, #4]
 801563e:	4618      	mov	r0, r3
 8015640:	f001 fa0f 	bl	8016a62 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8015644:	4603      	mov	r3, r0
 8015646:	f107 0010 	add.w	r0, r7, #16
 801564a:	68ba      	ldr	r2, [r7, #8]
 801564c:	68f9      	ldr	r1, [r7, #12]
 801564e:	f001 f8e5 	bl	801681c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
      if (__res.second)
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d00f      	beq.n	8015678 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 8015658:	693c      	ldr	r4, [r7, #16]
 801565a:	697d      	ldr	r5, [r7, #20]
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f001 fa0c 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015662:	4602      	mov	r2, r0
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	9300      	str	r3, [sp, #0]
 8015668:	4613      	mov	r3, r2
 801566a:	462a      	mov	r2, r5
 801566c:	4621      	mov	r1, r4
 801566e:	68f8      	ldr	r0, [r7, #12]
 8015670:	f001 fa0e 	bl	8016a90 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>
 8015674:	4603      	mov	r3, r0
			  __node_gen);
 8015676:	e007      	b.n	8015688 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_insert_unique_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8015678:	693a      	ldr	r2, [r7, #16]
 801567a:	f107 031c 	add.w	r3, r7, #28
 801567e:	4611      	mov	r1, r2
 8015680:	4618      	mov	r0, r3
 8015682:	f001 f8bc 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8015686:	69fb      	ldr	r3, [r7, #28]
    }
 8015688:	4618      	mov	r0, r3
 801568a:	3720      	adds	r7, #32
 801568c:	46bd      	mov	sp, r7
 801568e:	bdb0      	pop	{r4, r5, r7, pc}

08015690 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	4618      	mov	r0, r3
 801569e:	370c      	adds	r7, #12
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	689b      	ldr	r3, [r3, #8]
 80156b4:	4618      	mov	r0, r3
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
 80156c8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80156ca:	6839      	ldr	r1, [r7, #0]
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f001 fa28 	bl	8016b22 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80156d2:	6839      	ldr	r1, [r7, #0]
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f001 fa39 	bl	8016b4c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80156da:	bf00      	nop
 80156dc:	3708      	adds	r7, #8
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80156e2:	b480      	push	{r7}
 80156e4:	b083      	sub	sp, #12
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	4618      	mov	r0, r3
 80156ee:	370c      	adds	r7, #12
 80156f0:	46bd      	mov	sp, r7
 80156f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f6:	4770      	bx	lr

080156f8 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	4618      	mov	r0, r3
 8015704:	370c      	adds	r7, #12
 8015706:	46bd      	mov	sp, r7
 8015708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570c:	4770      	bx	lr

0801570e <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEEC1ERKS8_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 801570e:	b580      	push	{r7, lr}
 8015710:	b082      	sub	sp, #8
 8015712:	af00      	add	r7, sp, #0
 8015714:	6078      	str	r0, [r7, #4]
 8015716:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015718:	6839      	ldr	r1, [r7, #0]
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f001 fa28 	bl	8016b70 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	4618      	mov	r0, r3
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}

0801572a <_ZNSt20_Rb_tree_key_compareISt4lessISt4pairI3PinS2_EEEC1ERKS4_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 801572a:	b480      	push	{r7}
 801572c:	b083      	sub	sp, #12
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
 8015732:	6039      	str	r1, [r7, #0]
      { }
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	370c      	adds	r7, #12
 801573a:	46bd      	mov	sp, r7
 801573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015740:	4770      	bx	lr

08015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015742:	b480      	push	{r7}
 8015744:	b083      	sub	sp, #12
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
 801574a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	683a      	ldr	r2, [r7, #0]
 8015750:	601a      	str	r2, [r3, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	370c      	adds	r7, #12
 8015758:	46bd      	mov	sp, r7
 801575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575e:	4770      	bx	lr

08015760 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015760:	b590      	push	{r4, r7, lr}
 8015762:	b08d      	sub	sp, #52	; 0x34
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	60b9      	str	r1, [r7, #8]
 801576a:	607a      	str	r2, [r7, #4]
 801576c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801576e:	1d3b      	adds	r3, r7, #4
 8015770:	4618      	mov	r0, r3
 8015772:	f001 fa09 	bl	8016b88 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>
 8015776:	4603      	mov	r3, r0
 8015778:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801577a:	69bc      	ldr	r4, [r7, #24]
 801577c:	68b8      	ldr	r0, [r7, #8]
 801577e:	f001 fa14 	bl	8016baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8015782:	4603      	mov	r3, r0
 8015784:	429c      	cmp	r4, r3
 8015786:	bf0c      	ite	eq
 8015788:	2301      	moveq	r3, #1
 801578a:	2300      	movne	r3, #0
 801578c:	b2db      	uxtb	r3, r3
 801578e:	2b00      	cmp	r3, #0
 8015790:	d030      	beq.n	80157f4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x94>
	  if (size() > 0
 8015792:	68b8      	ldr	r0, [r7, #8]
 8015794:	f001 fa15 	bl	8016bc2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>
 8015798:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801579a:	2b00      	cmp	r3, #0
 801579c:	d013      	beq.n	80157c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 801579e:	68bc      	ldr	r4, [r7, #8]
 80157a0:	68b8      	ldr	r0, [r7, #8]
 80157a2:	f001 fa1a 	bl	8016bda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 80157a6:	4603      	mov	r3, r0
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	4618      	mov	r0, r3
 80157ac:	f001 fa21 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80157b0:	4603      	mov	r3, r0
 80157b2:	683a      	ldr	r2, [r7, #0]
 80157b4:	4619      	mov	r1, r3
 80157b6:	4620      	mov	r0, r4
 80157b8:	f001 fa44 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d001      	beq.n	80157c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x66>
 80157c2:	2301      	movs	r3, #1
 80157c4:	e000      	b.n	80157c8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x68>
 80157c6:	2300      	movs	r3, #0
	  if (size() > 0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d00c      	beq.n	80157e6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 80157cc:	2300      	movs	r3, #0
 80157ce:	61fb      	str	r3, [r7, #28]
 80157d0:	68b8      	ldr	r0, [r7, #8]
 80157d2:	f001 fa02 	bl	8016bda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 80157d6:	4602      	mov	r2, r0
 80157d8:	f107 031c 	add.w	r3, r7, #28
 80157dc:	4619      	mov	r1, r3
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f7fc ff7c 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80157e4:	e0db      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	683a      	ldr	r2, [r7, #0]
 80157ea:	68b9      	ldr	r1, [r7, #8]
 80157ec:	4618      	mov	r0, r3
 80157ee:	f001 fa43 	bl	8016c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80157f2:	e0d4      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80157f4:	68bc      	ldr	r4, [r7, #8]
 80157f6:	69bb      	ldr	r3, [r7, #24]
 80157f8:	4618      	mov	r0, r3
 80157fa:	f001 f9fa 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80157fe:	4603      	mov	r3, r0
 8015800:	461a      	mov	r2, r3
 8015802:	6839      	ldr	r1, [r7, #0]
 8015804:	4620      	mov	r0, r4
 8015806:	f001 fa1d 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d057      	beq.n	80158c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	  iterator __before = __pos;
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8015814:	69bc      	ldr	r4, [r7, #24]
 8015816:	68b8      	ldr	r0, [r7, #8]
 8015818:	f001 fab3 	bl	8016d82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 801581c:	4603      	mov	r3, r0
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	429c      	cmp	r4, r3
 8015822:	bf0c      	ite	eq
 8015824:	2301      	moveq	r3, #1
 8015826:	2300      	movne	r3, #0
 8015828:	b2db      	uxtb	r3, r3
 801582a:	2b00      	cmp	r3, #0
 801582c:	d00d      	beq.n	801584a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801582e:	68b8      	ldr	r0, [r7, #8]
 8015830:	f001 faa7 	bl	8016d82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 8015834:	4604      	mov	r4, r0
 8015836:	68b8      	ldr	r0, [r7, #8]
 8015838:	f001 faa3 	bl	8016d82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>
 801583c:	4603      	mov	r3, r0
 801583e:	461a      	mov	r2, r3
 8015840:	4621      	mov	r1, r4
 8015842:	68f8      	ldr	r0, [r7, #12]
 8015844:	f7fc fff1 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015848:	e0a9      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801584a:	68bc      	ldr	r4, [r7, #8]
 801584c:	f107 0314 	add.w	r3, r7, #20
 8015850:	4618      	mov	r0, r3
 8015852:	f001 faa2 	bl	8016d9a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
 8015856:	4603      	mov	r3, r0
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	4618      	mov	r0, r3
 801585c:	f001 f9c9 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015860:	4603      	mov	r3, r0
 8015862:	683a      	ldr	r2, [r7, #0]
 8015864:	4619      	mov	r1, r3
 8015866:	4620      	mov	r0, r4
 8015868:	f001 f9ec 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801586c:	4603      	mov	r3, r0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d01f      	beq.n	80158b2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8015872:	697b      	ldr	r3, [r7, #20]
 8015874:	4618      	mov	r0, r3
 8015876:	f7ff fb23 	bl	8014ec0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	bf0c      	ite	eq
 8015880:	2301      	moveq	r3, #1
 8015882:	2300      	movne	r3, #0
 8015884:	b2db      	uxtb	r3, r3
 8015886:	2b00      	cmp	r3, #0
 8015888:	d00a      	beq.n	80158a0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x140>
		return _Res(0, __before._M_node);
 801588a:	2300      	movs	r3, #0
 801588c:	623b      	str	r3, [r7, #32]
 801588e:	f107 0214 	add.w	r2, r7, #20
 8015892:	f107 0320 	add.w	r3, r7, #32
 8015896:	4619      	mov	r1, r3
 8015898:	68f8      	ldr	r0, [r7, #12]
 801589a:	f7fc ff1f 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801589e:	e07e      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80158a0:	f107 0218 	add.w	r2, r7, #24
 80158a4:	f107 0318 	add.w	r3, r7, #24
 80158a8:	4619      	mov	r1, r3
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f7fc ffbd 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80158b0:	e075      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	68b9      	ldr	r1, [r7, #8]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f001 f9dd 	bl	8016c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80158be:	e06e      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80158c0:	68bc      	ldr	r4, [r7, #8]
 80158c2:	69bb      	ldr	r3, [r7, #24]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f001 f994 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80158ca:	4603      	mov	r3, r0
 80158cc:	683a      	ldr	r2, [r7, #0]
 80158ce:	4619      	mov	r1, r3
 80158d0:	4620      	mov	r0, r4
 80158d2:	f001 f9b7 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d056      	beq.n	801598a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x22a>
	  iterator __after = __pos;
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80158e0:	69bc      	ldr	r4, [r7, #24]
 80158e2:	68b8      	ldr	r0, [r7, #8]
 80158e4:	f001 f979 	bl	8016bda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 80158e8:	4603      	mov	r3, r0
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	429c      	cmp	r4, r3
 80158ee:	bf0c      	ite	eq
 80158f0:	2301      	moveq	r3, #1
 80158f2:	2300      	movne	r3, #0
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d00c      	beq.n	8015914 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 80158fa:	2300      	movs	r3, #0
 80158fc:	627b      	str	r3, [r7, #36]	; 0x24
 80158fe:	68b8      	ldr	r0, [r7, #8]
 8015900:	f001 f96b 	bl	8016bda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>
 8015904:	4602      	mov	r2, r0
 8015906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801590a:	4619      	mov	r1, r3
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f7fc fee5 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015912:	e044      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8015914:	68bc      	ldr	r4, [r7, #8]
 8015916:	f107 0310 	add.w	r3, r7, #16
 801591a:	4618      	mov	r0, r3
 801591c:	f001 fa4e 	bl	8016dbc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>
 8015920:	4603      	mov	r3, r0
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	4618      	mov	r0, r3
 8015926:	f001 f964 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801592a:	4603      	mov	r3, r0
 801592c:	461a      	mov	r2, r3
 801592e:	6839      	ldr	r1, [r7, #0]
 8015930:	4620      	mov	r0, r4
 8015932:	f001 f987 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015936:	4603      	mov	r3, r0
 8015938:	2b00      	cmp	r3, #0
 801593a:	d01f      	beq.n	801597c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801593c:	69bb      	ldr	r3, [r7, #24]
 801593e:	4618      	mov	r0, r3
 8015940:	f7ff fabe 	bl	8014ec0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015944:	4603      	mov	r3, r0
 8015946:	2b00      	cmp	r3, #0
 8015948:	bf0c      	ite	eq
 801594a:	2301      	moveq	r3, #1
 801594c:	2300      	movne	r3, #0
 801594e:	b2db      	uxtb	r3, r3
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00a      	beq.n	801596a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 8015954:	2300      	movs	r3, #0
 8015956:	62bb      	str	r3, [r7, #40]	; 0x28
 8015958:	f107 0218 	add.w	r2, r7, #24
 801595c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015960:	4619      	mov	r1, r3
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7fc feba 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015968:	e019      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801596a:	f107 0210 	add.w	r2, r7, #16
 801596e:	f107 0310 	add.w	r3, r7, #16
 8015972:	4619      	mov	r1, r3
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f7fc ff58 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801597a:	e010      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	683a      	ldr	r2, [r7, #0]
 8015980:	68b9      	ldr	r1, [r7, #8]
 8015982:	4618      	mov	r0, r3
 8015984:	f001 f978 	bl	8016c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8015988:	e009      	b.n	801599e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 801598a:	2300      	movs	r3, #0
 801598c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801598e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015992:	f107 0318 	add.w	r3, r7, #24
 8015996:	4619      	mov	r1, r3
 8015998:	68f8      	ldr	r0, [r7, #12]
 801599a:	f7fc ff81 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	3734      	adds	r7, #52	; 0x34
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd90      	pop	{r4, r7, pc}

080159a6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>:
      operator()(const _Pair& __x) const
 80159a6:	b480      	push	{r7}
 80159a8:	b083      	sub	sp, #12
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
 80159ae:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	4618      	mov	r0, r3
 80159b4:	370c      	adds	r7, #12
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80159be:	b480      	push	{r7}
 80159c0:	b083      	sub	sp, #12
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	4618      	mov	r0, r3
 80159ca:	370c      	adds	r7, #12
 80159cc:	46bd      	mov	sp, r7
 80159ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80159d4:	b5b0      	push	{r4, r5, r7, lr}
 80159d6:	b088      	sub	sp, #32
 80159d8:	af00      	add	r7, sp, #0
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d11a      	bne.n	8015a1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	f001 f8de 	bl	8016baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 80159ee:	4602      	mov	r2, r0
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	4293      	cmp	r3, r2
 80159f4:	d013      	beq.n	8015a1e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 80159f6:	68fc      	ldr	r4, [r7, #12]
 80159f8:	f107 0310 	add.w	r3, r7, #16
 80159fc:	6839      	ldr	r1, [r7, #0]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff ffd1 	bl	80159a6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8015a04:	4605      	mov	r5, r0
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f001 f8f3 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	461a      	mov	r2, r3
 8015a10:	4629      	mov	r1, r5
 8015a12:	4620      	mov	r0, r4
 8015a14:	f001 f916 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d001      	beq.n	8015a22 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x4e>
 8015a1e:	2301      	movs	r3, #1
 8015a20:	e000      	b.n	8015a24 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE10_M_insert_IRKS6_NSC_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS6_EPSt18_Rb_tree_node_baseSK_OT_RT0_+0x50>
 8015a22:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015a24:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015a26:	6838      	ldr	r0, [r7, #0]
 8015a28:	f7ff ffc9 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	4619      	mov	r1, r3
 8015a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a32:	f001 f9d4 	bl	8016dde <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>
 8015a36:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015a3c:	7ff8      	ldrb	r0, [r7, #31]
 8015a3e:	687a      	ldr	r2, [r7, #4]
 8015a40:	69b9      	ldr	r1, [r7, #24]
 8015a42:	f004 fc8a 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	695b      	ldr	r3, [r3, #20]
 8015a4a:	1c5a      	adds	r2, r3, #1
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8015a50:	f107 0314 	add.w	r3, r7, #20
 8015a54:	69b9      	ldr	r1, [r7, #24]
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7ff fe73 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8015a5c:	697b      	ldr	r3, [r7, #20]
      }
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3720      	adds	r7, #32
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bdb0      	pop	{r4, r5, r7, pc}

08015a66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015a66:	b590      	push	{r4, r7, lr}
 8015a68:	b083      	sub	sp, #12
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
 8015a6e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f001 f9c8 	bl	8016e06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8015a76:	4604      	mov	r4, r0
 8015a78:	6838      	ldr	r0, [r7, #0]
 8015a7a:	f001 f9cf 	bl	8016e1c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	4619      	mov	r1, r3
 8015a82:	4620      	mov	r0, r4
 8015a84:	f001 f9d8 	bl	8016e38 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>
      }
 8015a88:	bf00      	nop
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd90      	pop	{r4, r7, pc}

08015a90 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b082      	sub	sp, #8
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
 8015a98:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f001 f9b3 	bl	8016e06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	2201      	movs	r2, #1
 8015aa4:	6839      	ldr	r1, [r7, #0]
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f001 f9d2 	bl	8016e50 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>
 8015aac:	bf00      	nop
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}

08015ab4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8015ab4:	b480      	push	{r7}
 8015ab6:	b083      	sub	sp, #12
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	370c      	adds	r7, #12
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac8:	4770      	bx	lr

08015aca <_ZNSaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b082      	sub	sp, #8
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	6078      	str	r0, [r7, #4]
 8015ad2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015ad4:	6839      	ldr	r1, [r7, #0]
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f001 f9d9 	bl	8016e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3708      	adds	r7, #8
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <_ZNSt20_Rb_tree_key_compareISt4lessI3PinEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 8015ae6:	b480      	push	{r7}
 8015ae8:	b083      	sub	sp, #12
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
      { }
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	4618      	mov	r0, r3
 8015af4:	370c      	adds	r7, #12
 8015af6:	46bd      	mov	sp, r7
 8015af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afc:	4770      	bx	lr

08015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015afe:	b480      	push	{r7}
 8015b00:	b083      	sub	sp, #12
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
 8015b06:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	683a      	ldr	r2, [r7, #0]
 8015b0c:	601a      	str	r2, [r3, #0]
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4618      	mov	r0, r3
 8015b12:	370c      	adds	r7, #12
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015b1c:	b590      	push	{r4, r7, lr}
 8015b1e:	b08d      	sub	sp, #52	; 0x34
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60f8      	str	r0, [r7, #12]
 8015b24:	60b9      	str	r1, [r7, #8]
 8015b26:	607a      	str	r2, [r7, #4]
 8015b28:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8015b2a:	1d3b      	adds	r3, r7, #4
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f001 f9ba 	bl	8016ea6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>
 8015b32:	4603      	mov	r3, r0
 8015b34:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8015b36:	69bc      	ldr	r4, [r7, #24]
 8015b38:	68b8      	ldr	r0, [r7, #8]
 8015b3a:	f001 f9c5 	bl	8016ec8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	429c      	cmp	r4, r3
 8015b42:	bf0c      	ite	eq
 8015b44:	2301      	moveq	r3, #1
 8015b46:	2300      	movne	r3, #0
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d030      	beq.n	8015bb0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x94>
	  if (size() > 0
 8015b4e:	68b8      	ldr	r0, [r7, #8]
 8015b50:	f001 f9c6 	bl	8016ee0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>
 8015b54:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d013      	beq.n	8015b82 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 8015b5a:	68bc      	ldr	r4, [r7, #8]
 8015b5c:	68b8      	ldr	r0, [r7, #8]
 8015b5e:	f001 f9cb 	bl	8016ef8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8015b62:	4603      	mov	r3, r0
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f001 f9d2 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	683a      	ldr	r2, [r7, #0]
 8015b70:	4619      	mov	r1, r3
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7fb fa84 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d001      	beq.n	8015b82 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x66>
 8015b7e:	2301      	movs	r3, #1
 8015b80:	e000      	b.n	8015b84 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x68>
 8015b82:	2300      	movs	r3, #0
	  if (size() > 0
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d00c      	beq.n	8015ba2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 8015b88:	2300      	movs	r3, #0
 8015b8a:	61fb      	str	r3, [r7, #28]
 8015b8c:	68b8      	ldr	r0, [r7, #8]
 8015b8e:	f001 f9b3 	bl	8016ef8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8015b92:	4602      	mov	r2, r0
 8015b94:	f107 031c 	add.w	r3, r7, #28
 8015b98:	4619      	mov	r1, r3
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	f7fc fd9e 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015ba0:	e0db      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	68b9      	ldr	r1, [r7, #8]
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f001 f9bd 	bl	8016f28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 8015bae:	e0d4      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8015bb0:	68bc      	ldr	r4, [r7, #8]
 8015bb2:	69bb      	ldr	r3, [r7, #24]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f001 f9ab 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	6839      	ldr	r1, [r7, #0]
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	f7fb fa5d 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d057      	beq.n	8015c7c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x160>
	  iterator __before = __pos;
 8015bcc:	69bb      	ldr	r3, [r7, #24]
 8015bce:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8015bd0:	69bc      	ldr	r4, [r7, #24]
 8015bd2:	68b8      	ldr	r0, [r7, #8]
 8015bd4:	f001 fa2d 	bl	8017032 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	429c      	cmp	r4, r3
 8015bde:	bf0c      	ite	eq
 8015be0:	2301      	moveq	r3, #1
 8015be2:	2300      	movne	r3, #0
 8015be4:	b2db      	uxtb	r3, r3
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d00d      	beq.n	8015c06 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8015bea:	68b8      	ldr	r0, [r7, #8]
 8015bec:	f001 fa21 	bl	8017032 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	68b8      	ldr	r0, [r7, #8]
 8015bf4:	f001 fa1d 	bl	8017032 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	4621      	mov	r1, r4
 8015bfe:	68f8      	ldr	r0, [r7, #12]
 8015c00:	f7fc fe13 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015c04:	e0a9      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8015c06:	68bc      	ldr	r4, [r7, #8]
 8015c08:	f107 0314 	add.w	r3, r7, #20
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f001 fa1c 	bl	801704a <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
 8015c12:	4603      	mov	r3, r0
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	4618      	mov	r0, r3
 8015c18:	f001 f97a 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015c1c:	4603      	mov	r3, r0
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	4619      	mov	r1, r3
 8015c22:	4620      	mov	r0, r4
 8015c24:	f7fb fa2c 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d01f      	beq.n	8015c6e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7ff fa13 	bl	801505c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	bf0c      	ite	eq
 8015c3c:	2301      	moveq	r3, #1
 8015c3e:	2300      	movne	r3, #0
 8015c40:	b2db      	uxtb	r3, r3
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d00a      	beq.n	8015c5c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x140>
		return _Res(0, __before._M_node);
 8015c46:	2300      	movs	r3, #0
 8015c48:	623b      	str	r3, [r7, #32]
 8015c4a:	f107 0214 	add.w	r2, r7, #20
 8015c4e:	f107 0320 	add.w	r3, r7, #32
 8015c52:	4619      	mov	r1, r3
 8015c54:	68f8      	ldr	r0, [r7, #12]
 8015c56:	f7fc fd41 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015c5a:	e07e      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8015c5c:	f107 0218 	add.w	r2, r7, #24
 8015c60:	f107 0318 	add.w	r3, r7, #24
 8015c64:	4619      	mov	r1, r3
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f7fc fddf 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015c6c:	e075      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	683a      	ldr	r2, [r7, #0]
 8015c72:	68b9      	ldr	r1, [r7, #8]
 8015c74:	4618      	mov	r0, r3
 8015c76:	f001 f957 	bl	8016f28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 8015c7a:	e06e      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8015c7c:	68bc      	ldr	r4, [r7, #8]
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f001 f945 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015c86:	4603      	mov	r3, r0
 8015c88:	683a      	ldr	r2, [r7, #0]
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	4620      	mov	r0, r4
 8015c8e:	f7fb f9f7 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d056      	beq.n	8015d46 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x22a>
	  iterator __after = __pos;
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8015c9c:	69bc      	ldr	r4, [r7, #24]
 8015c9e:	68b8      	ldr	r0, [r7, #8]
 8015ca0:	f001 f92a 	bl	8016ef8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	429c      	cmp	r4, r3
 8015caa:	bf0c      	ite	eq
 8015cac:	2301      	moveq	r3, #1
 8015cae:	2300      	movne	r3, #0
 8015cb0:	b2db      	uxtb	r3, r3
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d00c      	beq.n	8015cd0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8015cba:	68b8      	ldr	r0, [r7, #8]
 8015cbc:	f001 f91c 	bl	8016ef8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015cc6:	4619      	mov	r1, r3
 8015cc8:	68f8      	ldr	r0, [r7, #12]
 8015cca:	f7fc fd07 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015cce:	e044      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8015cd0:	68bc      	ldr	r4, [r7, #8]
 8015cd2:	f107 0310 	add.w	r3, r7, #16
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f001 f9c8 	bl	801706c <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f001 f915 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	461a      	mov	r2, r3
 8015cea:	6839      	ldr	r1, [r7, #0]
 8015cec:	4620      	mov	r0, r4
 8015cee:	f7fb f9c7 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d01f      	beq.n	8015d38 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7ff f9ae 	bl	801505c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	bf0c      	ite	eq
 8015d06:	2301      	moveq	r3, #1
 8015d08:	2300      	movne	r3, #0
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d00a      	beq.n	8015d26 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8015d10:	2300      	movs	r3, #0
 8015d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8015d14:	f107 0218 	add.w	r2, r7, #24
 8015d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	68f8      	ldr	r0, [r7, #12]
 8015d20:	f7fc fcdc 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015d24:	e019      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8015d26:	f107 0210 	add.w	r2, r7, #16
 8015d2a:	f107 0310 	add.w	r3, r7, #16
 8015d2e:	4619      	mov	r1, r3
 8015d30:	68f8      	ldr	r0, [r7, #12]
 8015d32:	f7fc fd7a 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015d36:	e010      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	683a      	ldr	r2, [r7, #0]
 8015d3c:	68b9      	ldr	r1, [r7, #8]
 8015d3e:	4618      	mov	r0, r3
 8015d40:	f001 f8f2 	bl	8016f28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>
 8015d44:	e009      	b.n	8015d5a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 8015d46:	2300      	movs	r3, #0
 8015d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d4a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015d4e:	f107 0318 	add.w	r3, r7, #24
 8015d52:	4619      	mov	r1, r3
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	f7fc fda3 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8015d5a:	68f8      	ldr	r0, [r7, #12]
 8015d5c:	3734      	adds	r7, #52	; 0x34
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd90      	pop	{r4, r7, pc}

08015d62 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>:
      operator()(const _Pair& __x) const
 8015d62:	b480      	push	{r7}
 8015d64:	b083      	sub	sp, #12
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	6078      	str	r0, [r7, #4]
 8015d6a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	370c      	adds	r7, #12
 8015d72:	46bd      	mov	sp, r7
 8015d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d78:	4770      	bx	lr

08015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8015d7a:	b480      	push	{r7}
 8015d7c:	b083      	sub	sp, #12
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	4618      	mov	r0, r3
 8015d86:	370c      	adds	r7, #12
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8e:	4770      	bx	lr

08015d90 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015d90:	b5b0      	push	{r4, r5, r7, lr}
 8015d92:	b088      	sub	sp, #32
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	60f8      	str	r0, [r7, #12]
 8015d98:	60b9      	str	r1, [r7, #8]
 8015d9a:	607a      	str	r2, [r7, #4]
 8015d9c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d11a      	bne.n	8015dda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015da4:	68f8      	ldr	r0, [r7, #12]
 8015da6:	f001 f88f 	bl	8016ec8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8015daa:	4602      	mov	r2, r0
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d013      	beq.n	8015dda <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8015db2:	68fc      	ldr	r4, [r7, #12]
 8015db4:	f107 0310 	add.w	r3, r7, #16
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f7ff ffd1 	bl	8015d62 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8015dc0:	4605      	mov	r5, r0
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f001 f8a4 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	461a      	mov	r2, r3
 8015dcc:	4629      	mov	r1, r5
 8015dce:	4620      	mov	r0, r4
 8015dd0:	f7fb f956 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d001      	beq.n	8015dde <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8015dda:	2301      	movs	r3, #1
 8015ddc:	e000      	b.n	8015de0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8015dde:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8015de0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8015de2:	6838      	ldr	r0, [r7, #0]
 8015de4:	f7ff ffc9 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8015de8:	4603      	mov	r3, r0
 8015dea:	4619      	mov	r1, r3
 8015dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dee:	f001 f94e 	bl	801708e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8015df2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8015df8:	7ff8      	ldrb	r0, [r7, #31]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	69b9      	ldr	r1, [r7, #24]
 8015dfe:	f004 faac 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	1c5a      	adds	r2, r3, #1
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8015e0c:	f107 0314 	add.w	r3, r7, #20
 8015e10:	69b9      	ldr	r1, [r7, #24]
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7ff fe73 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8015e18:	697b      	ldr	r3, [r7, #20]
      }
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3720      	adds	r7, #32
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bdb0      	pop	{r4, r5, r7, pc}

08015e22 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015e22:	b590      	push	{r4, r7, lr}
 8015e24:	b083      	sub	sp, #12
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
 8015e2a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f001 f942 	bl	80170b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8015e32:	4604      	mov	r4, r0
 8015e34:	6838      	ldr	r0, [r7, #0]
 8015e36:	f001 f949 	bl	80170cc <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	4619      	mov	r1, r3
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f001 f952 	bl	80170e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>
      }
 8015e44:	bf00      	nop
 8015e46:	370c      	adds	r7, #12
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd90      	pop	{r4, r7, pc}

08015e4c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f001 f92d 	bl	80170b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2201      	movs	r2, #1
 8015e60:	6839      	ldr	r1, [r7, #0]
 8015e62:	4618      	mov	r0, r3
 8015e64:	f001 f94c 	bl	8017100 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>
 8015e68:	bf00      	nop
 8015e6a:	3708      	adds	r7, #8
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	bd80      	pop	{r7, pc}

08015e70 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1Ev>:
 8015e70:	b480      	push	{r7}
 8015e72:	b083      	sub	sp, #12
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	370c      	adds	r7, #12
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e84:	4770      	bx	lr

08015e86 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8015e86:	b480      	push	{r7}
 8015e88:	b083      	sub	sp, #12
 8015e8a:	af00      	add	r7, sp, #0
 8015e8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	4618      	mov	r0, r3
 8015e92:	370c      	adds	r7, #12
 8015e94:	46bd      	mov	sp, r7
 8015e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9a:	4770      	bx	lr

08015e9c <_ZNSaISt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8015ea6:	6839      	ldr	r1, [r7, #0]
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f001 f948 	bl	801713e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3708      	adds	r7, #8
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}

08015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	6078      	str	r0, [r7, #4]
 8015ec0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	683a      	ldr	r2, [r7, #0]
 8015ec6:	601a      	str	r2, [r3, #0]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	4618      	mov	r0, r3
 8015ecc:	370c      	adds	r7, #12
 8015ece:	46bd      	mov	sp, r7
 8015ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed4:	4770      	bx	lr

08015ed6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8015ed6:	b590      	push	{r4, r7, lr}
 8015ed8:	b08d      	sub	sp, #52	; 0x34
 8015eda:	af00      	add	r7, sp, #0
 8015edc:	60f8      	str	r0, [r7, #12]
 8015ede:	60b9      	str	r1, [r7, #8]
 8015ee0:	607a      	str	r2, [r7, #4]
 8015ee2:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8015ee4:	1d3b      	adds	r3, r7, #4
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f001 f935 	bl	8017156 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>
 8015eec:	4603      	mov	r3, r0
 8015eee:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8015ef0:	69bc      	ldr	r4, [r7, #24]
 8015ef2:	68b8      	ldr	r0, [r7, #8]
 8015ef4:	f001 f940 	bl	8017178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	429c      	cmp	r4, r3
 8015efc:	bf0c      	ite	eq
 8015efe:	2301      	moveq	r3, #1
 8015f00:	2300      	movne	r3, #0
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d030      	beq.n	8015f6a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x94>
	  if (size() > 0
 8015f08:	68b8      	ldr	r0, [r7, #8]
 8015f0a:	f001 f941 	bl	8017190 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>
 8015f0e:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d013      	beq.n	8015f3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 8015f14:	68bc      	ldr	r4, [r7, #8]
 8015f16:	68b8      	ldr	r0, [r7, #8]
 8015f18:	f001 f946 	bl	80171a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	4618      	mov	r0, r3
 8015f22:	f001 f94d 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015f26:	4603      	mov	r3, r0
 8015f28:	683a      	ldr	r2, [r7, #0]
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	4620      	mov	r0, r4
 8015f2e:	f000 fe89 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d001      	beq.n	8015f3c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x66>
 8015f38:	2301      	movs	r3, #1
 8015f3a:	e000      	b.n	8015f3e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x68>
 8015f3c:	2300      	movs	r3, #0
	  if (size() > 0
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d00c      	beq.n	8015f5c <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x86>
	    return _Res(0, _M_rightmost());
 8015f42:	2300      	movs	r3, #0
 8015f44:	61fb      	str	r3, [r7, #28]
 8015f46:	68b8      	ldr	r0, [r7, #8]
 8015f48:	f001 f92e 	bl	80171a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	f107 031c 	add.w	r3, r7, #28
 8015f52:	4619      	mov	r1, r3
 8015f54:	68f8      	ldr	r0, [r7, #12]
 8015f56:	f7fc fbc1 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8015f5a:	e0db      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	683a      	ldr	r2, [r7, #0]
 8015f60:	68b9      	ldr	r1, [r7, #8]
 8015f62:	4618      	mov	r0, r3
 8015f64:	f001 f938 	bl	80171d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8015f68:	e0d4      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8015f6a:	68bc      	ldr	r4, [r7, #8]
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f001 f926 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015f74:	4603      	mov	r3, r0
 8015f76:	461a      	mov	r2, r3
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	4620      	mov	r0, r4
 8015f7c:	f000 fe62 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015f80:	4603      	mov	r3, r0
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d057      	beq.n	8016036 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	  iterator __before = __pos;
 8015f86:	69bb      	ldr	r3, [r7, #24]
 8015f88:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8015f8a:	69bc      	ldr	r4, [r7, #24]
 8015f8c:	68b8      	ldr	r0, [r7, #8]
 8015f8e:	f001 f9a8 	bl	80172e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8015f92:	4603      	mov	r3, r0
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	429c      	cmp	r4, r3
 8015f98:	bf0c      	ite	eq
 8015f9a:	2301      	moveq	r3, #1
 8015f9c:	2300      	movne	r3, #0
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00d      	beq.n	8015fc0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8015fa4:	68b8      	ldr	r0, [r7, #8]
 8015fa6:	f001 f99c 	bl	80172e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8015faa:	4604      	mov	r4, r0
 8015fac:	68b8      	ldr	r0, [r7, #8]
 8015fae:	f001 f998 	bl	80172e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	4621      	mov	r1, r4
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	f7fc fc36 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8015fbe:	e0a9      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8015fc0:	68bc      	ldr	r4, [r7, #8]
 8015fc2:	f107 0314 	add.w	r3, r7, #20
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f001 f997 	bl	80172fa <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f001 f8f5 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	683a      	ldr	r2, [r7, #0]
 8015fda:	4619      	mov	r1, r3
 8015fdc:	4620      	mov	r0, r4
 8015fde:	f000 fe31 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8015fe2:	4603      	mov	r3, r0
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d01f      	beq.n	8016028 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8015fe8:	697b      	ldr	r3, [r7, #20]
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7ff f90f 	bl	801520e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	bf0c      	ite	eq
 8015ff6:	2301      	moveq	r3, #1
 8015ff8:	2300      	movne	r3, #0
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d00a      	beq.n	8016016 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x140>
		return _Res(0, __before._M_node);
 8016000:	2300      	movs	r3, #0
 8016002:	623b      	str	r3, [r7, #32]
 8016004:	f107 0214 	add.w	r2, r7, #20
 8016008:	f107 0320 	add.w	r3, r7, #32
 801600c:	4619      	mov	r1, r3
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f7fc fb64 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016014:	e07e      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8016016:	f107 0218 	add.w	r2, r7, #24
 801601a:	f107 0318 	add.w	r3, r7, #24
 801601e:	4619      	mov	r1, r3
 8016020:	68f8      	ldr	r0, [r7, #12]
 8016022:	f7fc fc02 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016026:	e075      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	683a      	ldr	r2, [r7, #0]
 801602c:	68b9      	ldr	r1, [r7, #8]
 801602e:	4618      	mov	r0, r3
 8016030:	f001 f8d2 	bl	80171d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8016034:	e06e      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8016036:	68bc      	ldr	r4, [r7, #8]
 8016038:	69bb      	ldr	r3, [r7, #24]
 801603a:	4618      	mov	r0, r3
 801603c:	f001 f8c0 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016040:	4603      	mov	r3, r0
 8016042:	683a      	ldr	r2, [r7, #0]
 8016044:	4619      	mov	r1, r3
 8016046:	4620      	mov	r0, r4
 8016048:	f000 fdfc 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d056      	beq.n	8016100 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x22a>
	  iterator __after = __pos;
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8016056:	69bc      	ldr	r4, [r7, #24]
 8016058:	68b8      	ldr	r0, [r7, #8]
 801605a:	f001 f8a5 	bl	80171a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 801605e:	4603      	mov	r3, r0
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	429c      	cmp	r4, r3
 8016064:	bf0c      	ite	eq
 8016066:	2301      	moveq	r3, #1
 8016068:	2300      	movne	r3, #0
 801606a:	b2db      	uxtb	r3, r3
 801606c:	2b00      	cmp	r3, #0
 801606e:	d00c      	beq.n	801608a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1b4>
	    return _Res(0, _M_rightmost());
 8016070:	2300      	movs	r3, #0
 8016072:	627b      	str	r3, [r7, #36]	; 0x24
 8016074:	68b8      	ldr	r0, [r7, #8]
 8016076:	f001 f897 	bl	80171a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>
 801607a:	4602      	mov	r2, r0
 801607c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016080:	4619      	mov	r1, r3
 8016082:	68f8      	ldr	r0, [r7, #12]
 8016084:	f7fc fb2a 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016088:	e044      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801608a:	68bc      	ldr	r4, [r7, #8]
 801608c:	f107 0310 	add.w	r3, r7, #16
 8016090:	4618      	mov	r0, r3
 8016092:	f001 f943 	bl	801731c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>
 8016096:	4603      	mov	r3, r0
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	4618      	mov	r0, r3
 801609c:	f001 f890 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80160a0:	4603      	mov	r3, r0
 80160a2:	461a      	mov	r2, r3
 80160a4:	6839      	ldr	r1, [r7, #0]
 80160a6:	4620      	mov	r0, r4
 80160a8:	f000 fdcc 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80160ac:	4603      	mov	r3, r0
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d01f      	beq.n	80160f2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80160b2:	69bb      	ldr	r3, [r7, #24]
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7ff f8aa 	bl	801520e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80160ba:	4603      	mov	r3, r0
 80160bc:	2b00      	cmp	r3, #0
 80160be:	bf0c      	ite	eq
 80160c0:	2301      	moveq	r3, #1
 80160c2:	2300      	movne	r3, #0
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00a      	beq.n	80160e0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x20a>
		return _Res(0, __pos._M_node);
 80160ca:	2300      	movs	r3, #0
 80160cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80160ce:	f107 0218 	add.w	r2, r7, #24
 80160d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80160d6:	4619      	mov	r1, r3
 80160d8:	68f8      	ldr	r0, [r7, #12]
 80160da:	f7fc faff 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80160de:	e019      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80160e0:	f107 0210 	add.w	r2, r7, #16
 80160e4:	f107 0310 	add.w	r3, r7, #16
 80160e8:	4619      	mov	r1, r3
 80160ea:	68f8      	ldr	r0, [r7, #12]
 80160ec:	f7fc fb9d 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80160f0:	e010      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	683a      	ldr	r2, [r7, #0]
 80160f6:	68b9      	ldr	r1, [r7, #8]
 80160f8:	4618      	mov	r0, r3
 80160fa:	f001 f86d 	bl	80171d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 80160fe:	e009      	b.n	8016114 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x23e>
	return _Res(__pos._M_node, 0);
 8016100:	2300      	movs	r3, #0
 8016102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016104:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016108:	f107 0318 	add.w	r3, r7, #24
 801610c:	4619      	mov	r1, r3
 801610e:	68f8      	ldr	r0, [r7, #12]
 8016110:	f7fc fbc6 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	3734      	adds	r7, #52	; 0x34
 8016118:	46bd      	mov	sp, r7
 801611a:	bd90      	pop	{r4, r7, pc}

0801611c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>:
      operator()(const _Pair& __x) const
 801611c:	b480      	push	{r7}
 801611e:	b083      	sub	sp, #12
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	4618      	mov	r0, r3
 801612a:	370c      	adds	r7, #12
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr

08016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016134:	b480      	push	{r7}
 8016136:	b083      	sub	sp, #12
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	4618      	mov	r0, r3
 8016140:	370c      	adds	r7, #12
 8016142:	46bd      	mov	sp, r7
 8016144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016148:	4770      	bx	lr

0801614a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801614a:	b5b0      	push	{r4, r5, r7, lr}
 801614c:	b088      	sub	sp, #32
 801614e:	af00      	add	r7, sp, #0
 8016150:	60f8      	str	r0, [r7, #12]
 8016152:	60b9      	str	r1, [r7, #8]
 8016154:	607a      	str	r2, [r7, #4]
 8016156:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d11a      	bne.n	8016194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 801615e:	68f8      	ldr	r0, [r7, #12]
 8016160:	f001 f80a 	bl	8017178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 8016164:	4602      	mov	r2, r0
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	4293      	cmp	r3, r2
 801616a:	d013      	beq.n	8016194 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 801616c:	68fc      	ldr	r4, [r7, #12]
 801616e:	f107 0310 	add.w	r3, r7, #16
 8016172:	6839      	ldr	r1, [r7, #0]
 8016174:	4618      	mov	r0, r3
 8016176:	f7ff ffd1 	bl	801611c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 801617a:	4605      	mov	r5, r0
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f001 f81f 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016182:	4603      	mov	r3, r0
 8016184:	461a      	mov	r2, r3
 8016186:	4629      	mov	r1, r5
 8016188:	4620      	mov	r0, r4
 801618a:	f000 fd5b 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801618e:	4603      	mov	r3, r0
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 8016194:	2301      	movs	r3, #1
 8016196:	e000      	b.n	801619a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8016198:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 801619a:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 801619c:	6838      	ldr	r0, [r7, #0]
 801619e:	f7ff ffc9 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80161a2:	4603      	mov	r3, r0
 80161a4:	4619      	mov	r1, r3
 80161a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161a8:	f001 f8c9 	bl	801733e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80161ac:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80161b2:	7ff8      	ldrb	r0, [r7, #31]
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	69b9      	ldr	r1, [r7, #24]
 80161b8:	f004 f8cf 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	695b      	ldr	r3, [r3, #20]
 80161c0:	1c5a      	adds	r2, r3, #1
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80161c6:	f107 0314 	add.w	r3, r7, #20
 80161ca:	69b9      	ldr	r1, [r7, #24]
 80161cc:	4618      	mov	r0, r3
 80161ce:	f7ff fe73 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 80161d2:	697b      	ldr	r3, [r7, #20]
      }
 80161d4:	4618      	mov	r0, r3
 80161d6:	3720      	adds	r7, #32
 80161d8:	46bd      	mov	sp, r7
 80161da:	bdb0      	pop	{r4, r5, r7, pc}

080161dc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80161dc:	b590      	push	{r4, r7, lr}
 80161de:	b083      	sub	sp, #12
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80161e6:	6878      	ldr	r0, [r7, #4]
 80161e8:	f001 f8bd 	bl	8017366 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 80161ec:	4604      	mov	r4, r0
 80161ee:	6838      	ldr	r0, [r7, #0]
 80161f0:	f001 f8c4 	bl	801737c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 80161f4:	4603      	mov	r3, r0
 80161f6:	4619      	mov	r1, r3
 80161f8:	4620      	mov	r0, r4
 80161fa:	f001 f8cd 	bl	8017398 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>
      }
 80161fe:	bf00      	nop
 8016200:	370c      	adds	r7, #12
 8016202:	46bd      	mov	sp, r7
 8016204:	bd90      	pop	{r4, r7, pc}

08016206 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016206:	b580      	push	{r7, lr}
 8016208:	b082      	sub	sp, #8
 801620a:	af00      	add	r7, sp, #0
 801620c:	6078      	str	r0, [r7, #4]
 801620e:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f001 f8a8 	bl	8017366 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 8016216:	4603      	mov	r3, r0
 8016218:	2201      	movs	r2, #1
 801621a:	6839      	ldr	r1, [r7, #0]
 801621c:	4618      	mov	r0, r3
 801621e:	f001 f8c7 	bl	80173b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>
 8016222:	bf00      	nop
 8016224:	3708      	adds	r7, #8
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}

0801622a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1Ev>:
 801622a:	b480      	push	{r7}
 801622c:	b083      	sub	sp, #12
 801622e:	af00      	add	r7, sp, #0
 8016230:	6078      	str	r0, [r7, #4]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	4618      	mov	r0, r3
 8016236:	370c      	adds	r7, #12
 8016238:	46bd      	mov	sp, r7
 801623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801623e:	4770      	bx	lr

08016240 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 8016240:	b480      	push	{r7}
 8016242:	b083      	sub	sp, #12
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	4618      	mov	r0, r3
 801624c:	370c      	adds	r7, #12
 801624e:	46bd      	mov	sp, r7
 8016250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016254:	4770      	bx	lr

08016256 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8016256:	b580      	push	{r7, lr}
 8016258:	b082      	sub	sp, #8
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
 801625e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8016260:	6839      	ldr	r1, [r7, #0]
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f001 f8c3 	bl	80173ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	4618      	mov	r0, r3
 801626c:	3708      	adds	r7, #8
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}

08016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8016272:	b480      	push	{r7}
 8016274:	b083      	sub	sp, #12
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
 801627a:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	601a      	str	r2, [r3, #0]
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	4618      	mov	r0, r3
 8016286:	370c      	adds	r7, #12
 8016288:	46bd      	mov	sp, r7
 801628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628e:	4770      	bx	lr

08016290 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016290:	b590      	push	{r4, r7, lr}
 8016292:	b08d      	sub	sp, #52	; 0x34
 8016294:	af00      	add	r7, sp, #0
 8016296:	60f8      	str	r0, [r7, #12]
 8016298:	60b9      	str	r1, [r7, #8]
 801629a:	607a      	str	r2, [r7, #4]
 801629c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801629e:	1d3b      	adds	r3, r7, #4
 80162a0:	4618      	mov	r0, r3
 80162a2:	f001 f8b0 	bl	8017406 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>
 80162a6:	4603      	mov	r3, r0
 80162a8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80162aa:	69bc      	ldr	r4, [r7, #24]
 80162ac:	68b8      	ldr	r0, [r7, #8]
 80162ae:	f001 f8bb 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80162b2:	4603      	mov	r3, r0
 80162b4:	429c      	cmp	r4, r3
 80162b6:	bf0c      	ite	eq
 80162b8:	2301      	moveq	r3, #1
 80162ba:	2300      	movne	r3, #0
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d030      	beq.n	8016324 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x94>
	  if (size() > 0
 80162c2:	68b8      	ldr	r0, [r7, #8]
 80162c4:	f001 f8bc 	bl	8017440 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>
 80162c8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d013      	beq.n	80162f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80162ce:	68bc      	ldr	r4, [r7, #8]
 80162d0:	68b8      	ldr	r0, [r7, #8]
 80162d2:	f001 f8c1 	bl	8017458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 80162d6:	4603      	mov	r3, r0
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	4618      	mov	r0, r3
 80162dc:	f001 f8c8 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80162e0:	4603      	mov	r3, r0
 80162e2:	683a      	ldr	r2, [r7, #0]
 80162e4:	4619      	mov	r1, r3
 80162e6:	4620      	mov	r0, r4
 80162e8:	f7fa feca 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d001      	beq.n	80162f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x66>
 80162f2:	2301      	movs	r3, #1
 80162f4:	e000      	b.n	80162f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x68>
 80162f6:	2300      	movs	r3, #0
	  if (size() > 0
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d00c      	beq.n	8016316 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 80162fc:	2300      	movs	r3, #0
 80162fe:	61fb      	str	r3, [r7, #28]
 8016300:	68b8      	ldr	r0, [r7, #8]
 8016302:	f001 f8a9 	bl	8017458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8016306:	4602      	mov	r2, r0
 8016308:	f107 031c 	add.w	r3, r7, #28
 801630c:	4619      	mov	r1, r3
 801630e:	68f8      	ldr	r0, [r7, #12]
 8016310:	f7fc f9e4 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016314:	e0db      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	683a      	ldr	r2, [r7, #0]
 801631a:	68b9      	ldr	r1, [r7, #8]
 801631c:	4618      	mov	r0, r3
 801631e:	f001 f8b3 	bl	8017488 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 8016322:	e0d4      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8016324:	68bc      	ldr	r4, [r7, #8]
 8016326:	69bb      	ldr	r3, [r7, #24]
 8016328:	4618      	mov	r0, r3
 801632a:	f001 f8a1 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801632e:	4603      	mov	r3, r0
 8016330:	461a      	mov	r2, r3
 8016332:	6839      	ldr	r1, [r7, #0]
 8016334:	4620      	mov	r0, r4
 8016336:	f7fa fea3 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801633a:	4603      	mov	r3, r0
 801633c:	2b00      	cmp	r3, #0
 801633e:	d057      	beq.n	80163f0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x160>
	  iterator __before = __pos;
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8016344:	69bc      	ldr	r4, [r7, #24]
 8016346:	68b8      	ldr	r0, [r7, #8]
 8016348:	f001 f923 	bl	8017592 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 801634c:	4603      	mov	r3, r0
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	429c      	cmp	r4, r3
 8016352:	bf0c      	ite	eq
 8016354:	2301      	moveq	r3, #1
 8016356:	2300      	movne	r3, #0
 8016358:	b2db      	uxtb	r3, r3
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00d      	beq.n	801637a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801635e:	68b8      	ldr	r0, [r7, #8]
 8016360:	f001 f917 	bl	8017592 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 8016364:	4604      	mov	r4, r0
 8016366:	68b8      	ldr	r0, [r7, #8]
 8016368:	f001 f913 	bl	8017592 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>
 801636c:	4603      	mov	r3, r0
 801636e:	461a      	mov	r2, r3
 8016370:	4621      	mov	r1, r4
 8016372:	68f8      	ldr	r0, [r7, #12]
 8016374:	f7fc fa59 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016378:	e0a9      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801637a:	68bc      	ldr	r4, [r7, #8]
 801637c:	f107 0314 	add.w	r3, r7, #20
 8016380:	4618      	mov	r0, r3
 8016382:	f001 f912 	bl	80175aa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
 8016386:	4603      	mov	r3, r0
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	4618      	mov	r0, r3
 801638c:	f001 f870 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016390:	4603      	mov	r3, r0
 8016392:	683a      	ldr	r2, [r7, #0]
 8016394:	4619      	mov	r1, r3
 8016396:	4620      	mov	r0, r4
 8016398:	f7fa fe72 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d01f      	beq.n	80163e2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	4618      	mov	r0, r3
 80163a6:	f7ff f800 	bl	80153aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80163aa:	4603      	mov	r3, r0
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	bf0c      	ite	eq
 80163b0:	2301      	moveq	r3, #1
 80163b2:	2300      	movne	r3, #0
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d00a      	beq.n	80163d0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x140>
		return _Res(0, __before._M_node);
 80163ba:	2300      	movs	r3, #0
 80163bc:	623b      	str	r3, [r7, #32]
 80163be:	f107 0214 	add.w	r2, r7, #20
 80163c2:	f107 0320 	add.w	r3, r7, #32
 80163c6:	4619      	mov	r1, r3
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f7fc f987 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80163ce:	e07e      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80163d0:	f107 0218 	add.w	r2, r7, #24
 80163d4:	f107 0318 	add.w	r3, r7, #24
 80163d8:	4619      	mov	r1, r3
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	f7fc fa25 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80163e0:	e075      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80163e2:	68fb      	ldr	r3, [r7, #12]
 80163e4:	683a      	ldr	r2, [r7, #0]
 80163e6:	68b9      	ldr	r1, [r7, #8]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f001 f84d 	bl	8017488 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80163ee:	e06e      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80163f0:	68bc      	ldr	r4, [r7, #8]
 80163f2:	69bb      	ldr	r3, [r7, #24]
 80163f4:	4618      	mov	r0, r3
 80163f6:	f001 f83b 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80163fa:	4603      	mov	r3, r0
 80163fc:	683a      	ldr	r2, [r7, #0]
 80163fe:	4619      	mov	r1, r3
 8016400:	4620      	mov	r0, r4
 8016402:	f7fa fe3d 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016406:	4603      	mov	r3, r0
 8016408:	2b00      	cmp	r3, #0
 801640a:	d056      	beq.n	80164ba <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x22a>
	  iterator __after = __pos;
 801640c:	69bb      	ldr	r3, [r7, #24]
 801640e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8016410:	69bc      	ldr	r4, [r7, #24]
 8016412:	68b8      	ldr	r0, [r7, #8]
 8016414:	f001 f820 	bl	8017458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8016418:	4603      	mov	r3, r0
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	429c      	cmp	r4, r3
 801641e:	bf0c      	ite	eq
 8016420:	2301      	moveq	r3, #1
 8016422:	2300      	movne	r3, #0
 8016424:	b2db      	uxtb	r3, r3
 8016426:	2b00      	cmp	r3, #0
 8016428:	d00c      	beq.n	8016444 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 801642a:	2300      	movs	r3, #0
 801642c:	627b      	str	r3, [r7, #36]	; 0x24
 801642e:	68b8      	ldr	r0, [r7, #8]
 8016430:	f001 f812 	bl	8017458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>
 8016434:	4602      	mov	r2, r0
 8016436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801643a:	4619      	mov	r1, r3
 801643c:	68f8      	ldr	r0, [r7, #12]
 801643e:	f7fc f94d 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016442:	e044      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8016444:	68bc      	ldr	r4, [r7, #8]
 8016446:	f107 0310 	add.w	r3, r7, #16
 801644a:	4618      	mov	r0, r3
 801644c:	f001 f8be 	bl	80175cc <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>
 8016450:	4603      	mov	r3, r0
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	4618      	mov	r0, r3
 8016456:	f001 f80b 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801645a:	4603      	mov	r3, r0
 801645c:	461a      	mov	r2, r3
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	4620      	mov	r0, r4
 8016462:	f7fa fe0d 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016466:	4603      	mov	r3, r0
 8016468:	2b00      	cmp	r3, #0
 801646a:	d01f      	beq.n	80164ac <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801646c:	69bb      	ldr	r3, [r7, #24]
 801646e:	4618      	mov	r0, r3
 8016470:	f7fe ff9b 	bl	80153aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016474:	4603      	mov	r3, r0
 8016476:	2b00      	cmp	r3, #0
 8016478:	bf0c      	ite	eq
 801647a:	2301      	moveq	r3, #1
 801647c:	2300      	movne	r3, #0
 801647e:	b2db      	uxtb	r3, r3
 8016480:	2b00      	cmp	r3, #0
 8016482:	d00a      	beq.n	801649a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 8016484:	2300      	movs	r3, #0
 8016486:	62bb      	str	r3, [r7, #40]	; 0x28
 8016488:	f107 0218 	add.w	r2, r7, #24
 801648c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016490:	4619      	mov	r1, r3
 8016492:	68f8      	ldr	r0, [r7, #12]
 8016494:	f7fc f922 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016498:	e019      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801649a:	f107 0210 	add.w	r2, r7, #16
 801649e:	f107 0310 	add.w	r3, r7, #16
 80164a2:	4619      	mov	r1, r3
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	f7fc f9c0 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80164aa:	e010      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	683a      	ldr	r2, [r7, #0]
 80164b0:	68b9      	ldr	r1, [r7, #8]
 80164b2:	4618      	mov	r0, r3
 80164b4:	f000 ffe8 	bl	8017488 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>
 80164b8:	e009      	b.n	80164ce <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 80164ba:	2300      	movs	r3, #0
 80164bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80164c2:	f107 0318 	add.w	r3, r7, #24
 80164c6:	4619      	mov	r1, r3
 80164c8:	68f8      	ldr	r0, [r7, #12]
 80164ca:	f7fc f9e9 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80164ce:	68f8      	ldr	r0, [r7, #12]
 80164d0:	3734      	adds	r7, #52	; 0x34
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd90      	pop	{r4, r7, pc}

080164d6 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>:
      operator()(const _Pair& __x) const
 80164d6:	b480      	push	{r7}
 80164d8:	b083      	sub	sp, #12
 80164da:	af00      	add	r7, sp, #0
 80164dc:	6078      	str	r0, [r7, #4]
 80164de:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	4618      	mov	r0, r3
 80164e4:	370c      	adds	r7, #12
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr

080164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80164ee:	b480      	push	{r7}
 80164f0:	b083      	sub	sp, #12
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	4618      	mov	r0, r3
 80164fa:	370c      	adds	r7, #12
 80164fc:	46bd      	mov	sp, r7
 80164fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016502:	4770      	bx	lr

08016504 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016504:	b5b0      	push	{r4, r5, r7, lr}
 8016506:	b088      	sub	sp, #32
 8016508:	af00      	add	r7, sp, #0
 801650a:	60f8      	str	r0, [r7, #12]
 801650c:	60b9      	str	r1, [r7, #8]
 801650e:	607a      	str	r2, [r7, #4]
 8016510:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d11a      	bne.n	801654e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016518:	68f8      	ldr	r0, [r7, #12]
 801651a:	f000 ff85 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801651e:	4602      	mov	r2, r0
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	4293      	cmp	r3, r2
 8016524:	d013      	beq.n	801654e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016526:	68fc      	ldr	r4, [r7, #12]
 8016528:	f107 0310 	add.w	r3, r7, #16
 801652c:	6839      	ldr	r1, [r7, #0]
 801652e:	4618      	mov	r0, r3
 8016530:	f7ff ffd1 	bl	80164d6 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8016534:	4605      	mov	r5, r0
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f000 ff9a 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801653c:	4603      	mov	r3, r0
 801653e:	461a      	mov	r2, r3
 8016540:	4629      	mov	r1, r5
 8016542:	4620      	mov	r0, r4
 8016544:	f7fa fd9c 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016548:	4603      	mov	r3, r0
 801654a:	2b00      	cmp	r3, #0
 801654c:	d001      	beq.n	8016552 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 801654e:	2301      	movs	r3, #1
 8016550:	e000      	b.n	8016554 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8016552:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016554:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8016556:	6838      	ldr	r0, [r7, #0]
 8016558:	f7ff ffc9 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801655c:	4603      	mov	r3, r0
 801655e:	4619      	mov	r1, r3
 8016560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016562:	f001 f844 	bl	80175ee <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 8016566:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801656c:	7ff8      	ldrb	r0, [r7, #31]
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	69b9      	ldr	r1, [r7, #24]
 8016572:	f003 fef2 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8016576:	68fb      	ldr	r3, [r7, #12]
 8016578:	695b      	ldr	r3, [r3, #20]
 801657a:	1c5a      	adds	r2, r3, #1
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8016580:	f107 0314 	add.w	r3, r7, #20
 8016584:	69b9      	ldr	r1, [r7, #24]
 8016586:	4618      	mov	r0, r3
 8016588:	f7ff fe73 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801658c:	697b      	ldr	r3, [r7, #20]
      }
 801658e:	4618      	mov	r0, r3
 8016590:	3720      	adds	r7, #32
 8016592:	46bd      	mov	sp, r7
 8016594:	bdb0      	pop	{r4, r5, r7, pc}

08016596 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016596:	b590      	push	{r4, r7, lr}
 8016598:	b083      	sub	sp, #12
 801659a:	af00      	add	r7, sp, #0
 801659c:	6078      	str	r0, [r7, #4]
 801659e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f001 f838 	bl	8017616 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80165a6:	4604      	mov	r4, r0
 80165a8:	6838      	ldr	r0, [r7, #0]
 80165aa:	f001 f83f 	bl	801762c <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 80165ae:	4603      	mov	r3, r0
 80165b0:	4619      	mov	r1, r3
 80165b2:	4620      	mov	r0, r4
 80165b4:	f001 f848 	bl	8017648 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>
      }
 80165b8:	bf00      	nop
 80165ba:	370c      	adds	r7, #12
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd90      	pop	{r4, r7, pc}

080165c0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b082      	sub	sp, #8
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80165ca:	6878      	ldr	r0, [r7, #4]
 80165cc:	f001 f823 	bl	8017616 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2201      	movs	r2, #1
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f001 f842 	bl	8017660 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>
 80165dc:	bf00      	nop
 80165de:	3708      	adds	r7, #8
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}

080165e4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1Ev>:
 80165e4:	b480      	push	{r7}
 80165e6:	b083      	sub	sp, #12
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	4618      	mov	r0, r3
 80165f0:	370c      	adds	r7, #12
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr

080165fa <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSB_>:
    move(_Tp&& __t) noexcept
 80165fa:	b480      	push	{r7}
 80165fc:	b083      	sub	sp, #12
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	4618      	mov	r0, r3
 8016606:	370c      	adds	r7, #12
 8016608:	46bd      	mov	sp, r7
 801660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801660e:	4770      	bx	lr

08016610 <_ZNSaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS7_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 801661a:	6839      	ldr	r1, [r7, #0]
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f001 f83e 	bl	801769e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4618      	mov	r0, r3
 8016626:	3708      	adds	r7, #8
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}

0801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801662c:	b480      	push	{r7}
 801662e:	b083      	sub	sp, #12
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	4618      	mov	r0, r3
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr

08016642 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016642:	b5b0      	push	{r4, r5, r7, lr}
 8016644:	b088      	sub	sp, #32
 8016646:	af00      	add	r7, sp, #0
 8016648:	60f8      	str	r0, [r7, #12]
 801664a:	60b9      	str	r1, [r7, #8]
 801664c:	607a      	str	r2, [r7, #4]
 801664e:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d11a      	bne.n	801668c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016656:	68f8      	ldr	r0, [r7, #12]
 8016658:	f7fc f95e 	bl	8012918 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 801665c:	4602      	mov	r2, r0
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	4293      	cmp	r3, r2
 8016662:	d013      	beq.n	801668c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016664:	68fc      	ldr	r4, [r7, #12]
 8016666:	f107 0310 	add.w	r3, r7, #16
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	4618      	mov	r0, r3
 801666e:	f7fc fadf 	bl	8012c30 <_ZNKSt10_Select1stISt4pairIK3PinN3ADC8InstanceEEEclERKS5_>
 8016672:	4605      	mov	r5, r0
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7fb f8bf 	bl	80117f8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801667a:	4603      	mov	r3, r0
 801667c:	461a      	mov	r2, r3
 801667e:	4629      	mov	r1, r5
 8016680:	4620      	mov	r0, r4
 8016682:	f7fa fcfd 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016686:	4603      	mov	r3, r0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d001      	beq.n	8016690 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x4e>
 801668c:	2301      	movs	r3, #1
 801668e:	e000      	b.n	8016692 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE10_M_insert_IRKS5_NSB_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS5_EPSt18_Rb_tree_node_baseSJ_OT_RT0_+0x50>
 8016690:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016692:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8016694:	6838      	ldr	r0, [r7, #0]
 8016696:	f7ff ffc9 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801669a:	4603      	mov	r3, r0
 801669c:	4619      	mov	r1, r3
 801669e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166a0:	f001 f809 	bl	80176b6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>
 80166a4:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80166aa:	7ff8      	ldrb	r0, [r7, #31]
 80166ac:	687a      	ldr	r2, [r7, #4]
 80166ae:	69b9      	ldr	r1, [r7, #24]
 80166b0:	f003 fe53 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	695b      	ldr	r3, [r3, #20]
 80166b8:	1c5a      	adds	r2, r3, #1
 80166ba:	68fb      	ldr	r3, [r7, #12]
 80166bc:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 80166be:	f107 0314 	add.w	r3, r7, #20
 80166c2:	69b9      	ldr	r1, [r7, #24]
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fb fcd6 	bl	8012076 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN3ADC8InstanceEEEC1EPSt18_Rb_tree_node_base>
 80166ca:	697b      	ldr	r3, [r7, #20]
      }
 80166cc:	4618      	mov	r0, r3
 80166ce:	3720      	adds	r7, #32
 80166d0:	46bd      	mov	sp, r7
 80166d2:	bdb0      	pop	{r4, r5, r7, pc}

080166d4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b084      	sub	sp, #16
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f000 fffd 	bl	80176de <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80166e4:	4602      	mov	r2, r0
 80166e6:	f107 0308 	add.w	r3, r7, #8
 80166ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80166ee:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80166f2:	6838      	ldr	r0, [r7, #0]
 80166f4:	f000 fff3 	bl	80176de <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80166f8:	4602      	mov	r2, r0
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016700:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8016704:	f107 0308 	add.w	r3, r7, #8
 8016708:	4618      	mov	r0, r3
 801670a:	f000 ffe8 	bl	80176de <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801670e:	4602      	mov	r2, r0
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016716:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801671a:	bf00      	nop
 801671c:	3710      	adds	r7, #16
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}

08016722 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8016722:	b580      	push	{r7, lr}
 8016724:	b084      	sub	sp, #16
 8016726:	af00      	add	r7, sp, #0
 8016728:	6078      	str	r0, [r7, #4]
 801672a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801672c:	6878      	ldr	r0, [r7, #4]
 801672e:	f000 ffe1 	bl	80176f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8016732:	4603      	mov	r3, r0
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8016738:	6838      	ldr	r0, [r7, #0]
 801673a:	f000 ffdb 	bl	80176f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801673e:	4603      	mov	r3, r0
 8016740:	681a      	ldr	r2, [r3, #0]
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8016746:	f107 030c 	add.w	r3, r7, #12
 801674a:	4618      	mov	r0, r3
 801674c:	f000 ffd2 	bl	80176f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8016750:	4603      	mov	r3, r0
 8016752:	681a      	ldr	r2, [r3, #0]
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	601a      	str	r2, [r3, #0]
    }
 8016758:	bf00      	nop
 801675a:	3710      	adds	r7, #16
 801675c:	46bd      	mov	sp, r7
 801675e:	bd80      	pop	{r7, pc}

08016760 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8016760:	b580      	push	{r7, lr}
 8016762:	b084      	sub	sp, #16
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f000 ffcd 	bl	801770a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8016770:	4603      	mov	r3, r0
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8016776:	6838      	ldr	r0, [r7, #0]
 8016778:	f000 ffc7 	bl	801770a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 801677c:	4603      	mov	r3, r0
 801677e:	681a      	ldr	r2, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8016784:	f107 030c 	add.w	r3, r7, #12
 8016788:	4618      	mov	r0, r3
 801678a:	f000 ffbe 	bl	801770a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 801678e:	4603      	mov	r3, r0
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	601a      	str	r2, [r3, #0]
    }
 8016796:	bf00      	nop
 8016798:	3710      	adds	r7, #16
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}

0801679e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1Ev>:
 801679e:	b480      	push	{r7}
 80167a0:	b083      	sub	sp, #12
 80167a2:	af00      	add	r7, sp, #0
 80167a4:	6078      	str	r0, [r7, #4]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	4618      	mov	r0, r3
 80167aa:	370c      	adds	r7, #12
 80167ac:	46bd      	mov	sp, r7
 80167ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b2:	4770      	bx	lr

080167b4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80167b4:	b480      	push	{r7}
 80167b6:	b083      	sub	sp, #12
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	4618      	mov	r0, r3
 80167c0:	370c      	adds	r7, #12
 80167c2:	46bd      	mov	sp, r7
 80167c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167c8:	4770      	bx	lr

080167ca <_ZNSaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS6_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80167ca:	b580      	push	{r7, lr}
 80167cc:	b082      	sub	sp, #8
 80167ce:	af00      	add	r7, sp, #0
 80167d0:	6078      	str	r0, [r7, #4]
 80167d2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80167d4:	6839      	ldr	r1, [r7, #0]
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 ffa2 	bl	8017720 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	4618      	mov	r0, r3
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80167e6:	b480      	push	{r7}
 80167e8:	b083      	sub	sp, #12
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	6078      	str	r0, [r7, #4]
 80167ee:	6039      	str	r1, [r7, #0]
      { }
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	4618      	mov	r0, r3
 80167f4:	370c      	adds	r7, #12
 80167f6:	46bd      	mov	sp, r7
 80167f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fc:	4770      	bx	lr

080167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80167fe:	b480      	push	{r7}
 8016800:	b083      	sub	sp, #12
 8016802:	af00      	add	r7, sp, #0
 8016804:	6078      	str	r0, [r7, #4]
 8016806:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	683a      	ldr	r2, [r7, #0]
 801680c:	601a      	str	r2, [r3, #0]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	4618      	mov	r0, r3
 8016812:	370c      	adds	r7, #12
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr

0801681c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801681c:	b590      	push	{r4, r7, lr}
 801681e:	b08d      	sub	sp, #52	; 0x34
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
 8016828:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801682a:	1d3b      	adds	r3, r7, #4
 801682c:	4618      	mov	r0, r3
 801682e:	f000 ff83 	bl	8017738 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>
 8016832:	4603      	mov	r3, r0
 8016834:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8016836:	69bc      	ldr	r4, [r7, #24]
 8016838:	68b8      	ldr	r0, [r7, #8]
 801683a:	f000 ff8e 	bl	801775a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801683e:	4603      	mov	r3, r0
 8016840:	429c      	cmp	r4, r3
 8016842:	bf0c      	ite	eq
 8016844:	2301      	moveq	r3, #1
 8016846:	2300      	movne	r3, #0
 8016848:	b2db      	uxtb	r3, r3
 801684a:	2b00      	cmp	r3, #0
 801684c:	d030      	beq.n	80168b0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 801684e:	68b8      	ldr	r0, [r7, #8]
 8016850:	f000 ff8f 	bl	8017772 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8016854:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8016856:	2b00      	cmp	r3, #0
 8016858:	d013      	beq.n	8016882 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801685a:	68bc      	ldr	r4, [r7, #8]
 801685c:	68b8      	ldr	r0, [r7, #8]
 801685e:	f000 ff94 	bl	801778a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016862:	4603      	mov	r3, r0
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	4618      	mov	r0, r3
 8016868:	f000 ff9b 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801686c:	4603      	mov	r3, r0
 801686e:	683a      	ldr	r2, [r7, #0]
 8016870:	4619      	mov	r1, r3
 8016872:	4620      	mov	r0, r4
 8016874:	f000 ffa1 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 8016878:	4603      	mov	r3, r0
 801687a:	2b00      	cmp	r3, #0
 801687c:	d001      	beq.n	8016882 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801687e:	2301      	movs	r3, #1
 8016880:	e000      	b.n	8016884 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8016882:	2300      	movs	r3, #0
	  if (size() > 0
 8016884:	2b00      	cmp	r3, #0
 8016886:	d00c      	beq.n	80168a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8016888:	2300      	movs	r3, #0
 801688a:	61fb      	str	r3, [r7, #28]
 801688c:	68b8      	ldr	r0, [r7, #8]
 801688e:	f000 ff7c 	bl	801778a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8016892:	4602      	mov	r2, r0
 8016894:	f107 031c 	add.w	r3, r7, #28
 8016898:	4619      	mov	r1, r3
 801689a:	68f8      	ldr	r0, [r7, #12]
 801689c:	f7fb ff1e 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80168a0:	e0db      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	683a      	ldr	r2, [r7, #0]
 80168a6:	68b9      	ldr	r1, [r7, #8]
 80168a8:	4618      	mov	r0, r3
 80168aa:	f000 ff9b 	bl	80177e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80168ae:	e0d4      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80168b0:	68bc      	ldr	r4, [r7, #8]
 80168b2:	69bb      	ldr	r3, [r7, #24]
 80168b4:	4618      	mov	r0, r3
 80168b6:	f000 ff74 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80168ba:	4603      	mov	r3, r0
 80168bc:	461a      	mov	r2, r3
 80168be:	6839      	ldr	r1, [r7, #0]
 80168c0:	4620      	mov	r0, r4
 80168c2:	f000 ff7a 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d057      	beq.n	801697c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 80168cc:	69bb      	ldr	r3, [r7, #24]
 80168ce:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80168d0:	69bc      	ldr	r4, [r7, #24]
 80168d2:	68b8      	ldr	r0, [r7, #8]
 80168d4:	f001 f80b 	bl	80178ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80168d8:	4603      	mov	r3, r0
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	429c      	cmp	r4, r3
 80168de:	bf0c      	ite	eq
 80168e0:	2301      	moveq	r3, #1
 80168e2:	2300      	movne	r3, #0
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d00d      	beq.n	8016906 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80168ea:	68b8      	ldr	r0, [r7, #8]
 80168ec:	f000 ffff 	bl	80178ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80168f0:	4604      	mov	r4, r0
 80168f2:	68b8      	ldr	r0, [r7, #8]
 80168f4:	f000 fffb 	bl	80178ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80168f8:	4603      	mov	r3, r0
 80168fa:	461a      	mov	r2, r3
 80168fc:	4621      	mov	r1, r4
 80168fe:	68f8      	ldr	r0, [r7, #12]
 8016900:	f7fb ff93 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016904:	e0a9      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8016906:	68bc      	ldr	r4, [r7, #8]
 8016908:	f107 0314 	add.w	r3, r7, #20
 801690c:	4618      	mov	r0, r3
 801690e:	f000 fffa 	bl	8017906 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
 8016912:	4603      	mov	r3, r0
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4618      	mov	r0, r3
 8016918:	f000 ff43 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801691c:	4603      	mov	r3, r0
 801691e:	683a      	ldr	r2, [r7, #0]
 8016920:	4619      	mov	r1, r3
 8016922:	4620      	mov	r0, r4
 8016924:	f000 ff49 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 8016928:	4603      	mov	r3, r0
 801692a:	2b00      	cmp	r3, #0
 801692c:	d01f      	beq.n	801696e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	4618      	mov	r0, r3
 8016932:	f7fe fead 	bl	8015690 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016936:	4603      	mov	r3, r0
 8016938:	2b00      	cmp	r3, #0
 801693a:	bf0c      	ite	eq
 801693c:	2301      	moveq	r3, #1
 801693e:	2300      	movne	r3, #0
 8016940:	b2db      	uxtb	r3, r3
 8016942:	2b00      	cmp	r3, #0
 8016944:	d00a      	beq.n	801695c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8016946:	2300      	movs	r3, #0
 8016948:	623b      	str	r3, [r7, #32]
 801694a:	f107 0214 	add.w	r2, r7, #20
 801694e:	f107 0320 	add.w	r3, r7, #32
 8016952:	4619      	mov	r1, r3
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f7fb fec1 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801695a:	e07e      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 801695c:	f107 0218 	add.w	r2, r7, #24
 8016960:	f107 0318 	add.w	r3, r7, #24
 8016964:	4619      	mov	r1, r3
 8016966:	68f8      	ldr	r0, [r7, #12]
 8016968:	f7fb ff5f 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801696c:	e075      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	683a      	ldr	r2, [r7, #0]
 8016972:	68b9      	ldr	r1, [r7, #8]
 8016974:	4618      	mov	r0, r3
 8016976:	f000 ff35 	bl	80177e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 801697a:	e06e      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 801697c:	68bc      	ldr	r4, [r7, #8]
 801697e:	69bb      	ldr	r3, [r7, #24]
 8016980:	4618      	mov	r0, r3
 8016982:	f000 ff0e 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016986:	4603      	mov	r3, r0
 8016988:	683a      	ldr	r2, [r7, #0]
 801698a:	4619      	mov	r1, r3
 801698c:	4620      	mov	r0, r4
 801698e:	f000 ff14 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d056      	beq.n	8016a46 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8016998:	69bb      	ldr	r3, [r7, #24]
 801699a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801699c:	69bc      	ldr	r4, [r7, #24]
 801699e:	68b8      	ldr	r0, [r7, #8]
 80169a0:	f000 fef3 	bl	801778a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80169a4:	4603      	mov	r3, r0
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	429c      	cmp	r4, r3
 80169aa:	bf0c      	ite	eq
 80169ac:	2301      	moveq	r3, #1
 80169ae:	2300      	movne	r3, #0
 80169b0:	b2db      	uxtb	r3, r3
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d00c      	beq.n	80169d0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80169b6:	2300      	movs	r3, #0
 80169b8:	627b      	str	r3, [r7, #36]	; 0x24
 80169ba:	68b8      	ldr	r0, [r7, #8]
 80169bc:	f000 fee5 	bl	801778a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80169c0:	4602      	mov	r2, r0
 80169c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80169c6:	4619      	mov	r1, r3
 80169c8:	68f8      	ldr	r0, [r7, #12]
 80169ca:	f7fb fe87 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80169ce:	e044      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80169d0:	68bc      	ldr	r4, [r7, #8]
 80169d2:	f107 0310 	add.w	r3, r7, #16
 80169d6:	4618      	mov	r0, r3
 80169d8:	f000 ffa6 	bl	8017928 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>
 80169dc:	4603      	mov	r3, r0
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4618      	mov	r0, r3
 80169e2:	f000 fede 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80169e6:	4603      	mov	r3, r0
 80169e8:	461a      	mov	r2, r3
 80169ea:	6839      	ldr	r1, [r7, #0]
 80169ec:	4620      	mov	r0, r4
 80169ee:	f000 fee4 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d01f      	beq.n	8016a38 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7fe fe48 	bl	8015690 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016a00:	4603      	mov	r3, r0
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	bf0c      	ite	eq
 8016a06:	2301      	moveq	r3, #1
 8016a08:	2300      	movne	r3, #0
 8016a0a:	b2db      	uxtb	r3, r3
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d00a      	beq.n	8016a26 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8016a10:	2300      	movs	r3, #0
 8016a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a14:	f107 0218 	add.w	r2, r7, #24
 8016a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	68f8      	ldr	r0, [r7, #12]
 8016a20:	f7fb fe5c 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8016a24:	e019      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8016a26:	f107 0210 	add.w	r2, r7, #16
 8016a2a:	f107 0310 	add.w	r3, r7, #16
 8016a2e:	4619      	mov	r1, r3
 8016a30:	68f8      	ldr	r0, [r7, #12]
 8016a32:	f7fb fefa 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8016a36:	e010      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	683a      	ldr	r2, [r7, #0]
 8016a3c:	68b9      	ldr	r1, [r7, #8]
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f000 fed0 	bl	80177e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8016a44:	e009      	b.n	8016a5a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8016a46:	2300      	movs	r3, #0
 8016a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a4a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8016a4e:	f107 0318 	add.w	r3, r7, #24
 8016a52:	4619      	mov	r1, r3
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	f7fb ff23 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016a5a:	68f8      	ldr	r0, [r7, #12]
 8016a5c:	3734      	adds	r7, #52	; 0x34
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd90      	pop	{r4, r7, pc}

08016a62 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>:
      operator()(const _Pair& __x) const
 8016a62:	b480      	push	{r7}
 8016a64:	b083      	sub	sp, #12
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
 8016a6a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	4618      	mov	r0, r3
 8016a70:	370c      	adds	r7, #12
 8016a72:	46bd      	mov	sp, r7
 8016a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a78:	4770      	bx	lr

08016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8016a7a:	b480      	push	{r7}
 8016a7c:	b083      	sub	sp, #12
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr

08016a90 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016a90:	b5b0      	push	{r4, r5, r7, lr}
 8016a92:	b088      	sub	sp, #32
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	607a      	str	r2, [r7, #4]
 8016a9c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016a9e:	68bb      	ldr	r3, [r7, #8]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d11a      	bne.n	8016ada <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016aa4:	68f8      	ldr	r0, [r7, #12]
 8016aa6:	f000 fe58 	bl	801775a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8016aaa:	4602      	mov	r2, r0
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	4293      	cmp	r3, r2
 8016ab0:	d013      	beq.n	8016ada <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8016ab2:	68fc      	ldr	r4, [r7, #12]
 8016ab4:	f107 0310 	add.w	r3, r7, #16
 8016ab8:	6839      	ldr	r1, [r7, #0]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7ff ffd1 	bl	8016a62 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8016ac0:	4605      	mov	r5, r0
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f000 fe6d 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	461a      	mov	r2, r3
 8016acc:	4629      	mov	r1, r5
 8016ace:	4620      	mov	r0, r4
 8016ad0:	f000 fe73 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d001      	beq.n	8016ade <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x4e>
 8016ada:	2301      	movs	r3, #1
 8016adc:	e000      	b.n	8016ae0 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE10_M_insert_IRKS4_NSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_EPSt18_Rb_tree_node_baseSI_OT_RT0_+0x50>
 8016ade:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8016ae0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8016ae2:	6838      	ldr	r0, [r7, #0]
 8016ae4:	f7ff ffc9 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	4619      	mov	r1, r3
 8016aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016aee:	f000 ff2c 	bl	801794a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>
 8016af2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8016af8:	7ff8      	ldrb	r0, [r7, #31]
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	69b9      	ldr	r1, [r7, #24]
 8016afe:	f003 fc2c 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	695b      	ldr	r3, [r3, #20]
 8016b06:	1c5a      	adds	r2, r3, #1
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8016b0c:	f107 0314 	add.w	r3, r7, #20
 8016b10:	69b9      	ldr	r1, [r7, #24]
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7ff fe73 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8016b18:	697b      	ldr	r3, [r7, #20]
      }
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3720      	adds	r7, #32
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bdb0      	pop	{r4, r5, r7, pc}

08016b22 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016b22:	b590      	push	{r4, r7, lr}
 8016b24:	b083      	sub	sp, #12
 8016b26:	af00      	add	r7, sp, #0
 8016b28:	6078      	str	r0, [r7, #4]
 8016b2a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f000 ff20 	bl	8017972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8016b32:	4604      	mov	r4, r0
 8016b34:	6838      	ldr	r0, [r7, #0]
 8016b36:	f000 ff27 	bl	8017988 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	4619      	mov	r1, r3
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f000 ff30 	bl	80179a4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 8016b44:	bf00      	nop
 8016b46:	370c      	adds	r7, #12
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd90      	pop	{r4, r7, pc}

08016b4c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f000 ff0b 	bl	8017972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	2201      	movs	r2, #1
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	4618      	mov	r0, r3
 8016b64:	f000 ff2a 	bl	80179bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>
 8016b68:	bf00      	nop
 8016b6a:	3708      	adds	r7, #8
 8016b6c:	46bd      	mov	sp, r7
 8016b6e:	bd80      	pop	{r7, pc}

08016b70 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEEC1ERKSA_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8016b70:	b480      	push	{r7}
 8016b72:	b083      	sub	sp, #12
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	6078      	str	r0, [r7, #4]
 8016b78:	6039      	str	r1, [r7, #0]
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	370c      	adds	r7, #12
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr

08016b88 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681a      	ldr	r2, [r3, #0]
 8016b94:	f107 030c 	add.w	r3, r7, #12
 8016b98:	4611      	mov	r1, r2
 8016b9a:	4618      	mov	r0, r3
 8016b9c:	f7fe fdd1 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3710      	adds	r7, #16
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8016baa:	b480      	push	{r7}
 8016bac:	b083      	sub	sp, #12
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	3304      	adds	r3, #4
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr

08016bc2 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016bc2:	b480      	push	{r7}
 8016bc4:	b083      	sub	sp, #12
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	695b      	ldr	r3, [r3, #20]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	370c      	adds	r7, #12
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd8:	4770      	bx	lr

08016bda <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8016bda:	b480      	push	{r7}
 8016bdc:	b083      	sub	sp, #12
 8016bde:	af00      	add	r7, sp, #0
 8016be0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	3310      	adds	r3, #16
 8016be6:	4618      	mov	r0, r3
 8016be8:	370c      	adds	r7, #12
 8016bea:	46bd      	mov	sp, r7
 8016bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf0:	4770      	bx	lr

08016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8016bf2:	b580      	push	{r7, lr}
 8016bf4:	b082      	sub	sp, #8
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f000 fefd 	bl	80179fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8016c00:	4603      	mov	r3, r0
 8016c02:	4618      	mov	r0, r3
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>:
	    return noexcept(*__t < *__u) && noexcept(*__u < *__t);
	}

      template<typename _Tp, typename _Up>
	constexpr auto
	operator()(const _Tp& __t, const _Up& __u) const
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b084      	sub	sp, #16
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	60f8      	str	r0, [r7, #12]
 8016c12:	60b9      	str	r1, [r7, #8]
 8016c14:	607a      	str	r2, [r7, #4]
	{
	  if constexpr (three_way_comparable_with<_Tp, _Up>)
	    return __t <=> __u;
	  else
	    {
	      if (__t < __u)
 8016c16:	6879      	ldr	r1, [r7, #4]
 8016c18:	68b8      	ldr	r0, [r7, #8]
 8016c1a:	f7f9 f8c8 	bl	800fdae <_ZNK3PinltERKS_>
 8016c1e:	4603      	mov	r3, r0
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d001      	beq.n	8016c28 <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x1e>
		return weak_ordering::less;
 8016c24:	23ff      	movs	r3, #255	; 0xff
 8016c26:	e009      	b.n	8016c3c <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else if (__u < __t)
 8016c28:	68b9      	ldr	r1, [r7, #8]
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f7f9 f8bf 	bl	800fdae <_ZNK3PinltERKS_>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d001      	beq.n	8016c3a <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x30>
		return weak_ordering::greater;
 8016c36:	2301      	movs	r3, #1
 8016c38:	e000      	b.n	8016c3c <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_+0x32>
	      else
		return weak_ordering::equivalent;
 8016c3a:	2300      	movs	r3, #0
	    }
	}
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	3710      	adds	r7, #16
 8016c40:	46bd      	mov	sp, r7
 8016c42:	bd80      	pop	{r7, pc}

08016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8016c44:	b590      	push	{r4, r7, lr}
 8016c46:	b087      	sub	sp, #28
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	60b9      	str	r1, [r7, #8]
 8016c4e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8016c50:	6879      	ldr	r1, [r7, #4]
 8016c52:	68b8      	ldr	r0, [r7, #8]
 8016c54:	f000 fee4 	bl	8017a20 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>
 8016c58:	4604      	mov	r4, r0
 8016c5a:	f107 0314 	add.w	r3, r7, #20
 8016c5e:	2100      	movs	r1, #0
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7fc ff0d 	bl	8013a80 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8016c66:	7d39      	ldrb	r1, [r7, #20]
 8016c68:	4620      	mov	r0, r4
 8016c6a:	f7fc ff27 	bl	8013abc <_ZStltSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8016c6e:	4603      	mov	r3, r0
 8016c70:	4618      	mov	r0, r3
 8016c72:	371c      	adds	r7, #28
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd90      	pop	{r4, r7, pc}

08016c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016c78:	b590      	push	{r4, r7, lr}
 8016c7a:	b08b      	sub	sp, #44	; 0x2c
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	60f8      	str	r0, [r7, #12]
 8016c80:	60b9      	str	r1, [r7, #8]
 8016c82:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8016c84:	68b8      	ldr	r0, [r7, #8]
 8016c86:	f7fd fc8d 	bl	80145a4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_M_beginEv>
 8016c8a:	4603      	mov	r3, r0
 8016c8c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8016c8e:	68b8      	ldr	r0, [r7, #8]
 8016c90:	f7ff ff8b 	bl	8016baa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_M_endEv>
 8016c94:	4603      	mov	r3, r0
 8016c96:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8016c98:	2301      	movs	r3, #1
 8016c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8016c9e:	69bb      	ldr	r3, [r7, #24]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d020      	beq.n	8016ce6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8016ca4:	69bb      	ldr	r3, [r7, #24]
 8016ca6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8016ca8:	68bc      	ldr	r4, [r7, #8]
 8016caa:	69bb      	ldr	r3, [r7, #24]
 8016cac:	4618      	mov	r0, r3
 8016cae:	f000 fea4 	bl	80179fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	6879      	ldr	r1, [r7, #4]
 8016cb8:	4620      	mov	r0, r4
 8016cba:	f7ff ffc3 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8016cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d005      	beq.n	8016cd8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x60>
 8016ccc:	69bb      	ldr	r3, [r7, #24]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7fe f902 	bl	8014ed8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	e004      	b.n	8016ce2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x6a>
 8016cd8:	69bb      	ldr	r3, [r7, #24]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f7fe f8f0 	bl	8014ec0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8016ce4:	e7db      	b.n	8016c9e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8016ce6:	697a      	ldr	r2, [r7, #20]
 8016ce8:	f107 0310 	add.w	r3, r7, #16
 8016cec:	4611      	mov	r1, r2
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7fe fd27 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8016cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d01d      	beq.n	8016d38 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 8016cfc:	68b8      	ldr	r0, [r7, #8]
 8016cfe:	f000 febf 	bl	8017a80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>
 8016d02:	4603      	mov	r3, r0
 8016d04:	61fb      	str	r3, [r7, #28]
 8016d06:	f107 021c 	add.w	r2, r7, #28
 8016d0a:	f107 0310 	add.w	r3, r7, #16
 8016d0e:	4611      	mov	r1, r2
 8016d10:	4618      	mov	r0, r3
 8016d12:	f000 fec6 	bl	8017aa2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>
 8016d16:	4603      	mov	r3, r0
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d008      	beq.n	8016d2e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 8016d1c:	f107 0214 	add.w	r2, r7, #20
 8016d20:	f107 0318 	add.w	r3, r7, #24
 8016d24:	4619      	mov	r1, r3
 8016d26:	68f8      	ldr	r0, [r7, #12]
 8016d28:	f000 fecf 	bl	8017aca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 8016d2c:	e025      	b.n	8016d7a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 8016d2e:	f107 0310 	add.w	r3, r7, #16
 8016d32:	4618      	mov	r0, r3
 8016d34:	f000 f831 	bl	8016d9a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8016d38:	68bc      	ldr	r4, [r7, #8]
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7ff ff58 	bl	8016bf2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016d42:	4603      	mov	r3, r0
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	4619      	mov	r1, r3
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f7ff ff7b 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d008      	beq.n	8016d66 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 8016d54:	f107 0214 	add.w	r2, r7, #20
 8016d58:	f107 0318 	add.w	r3, r7, #24
 8016d5c:	4619      	mov	r1, r3
 8016d5e:	68f8      	ldr	r0, [r7, #12]
 8016d60:	f000 feb3 	bl	8017aca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>
 8016d64:	e009      	b.n	8016d7a <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 8016d66:	2300      	movs	r3, #0
 8016d68:	623b      	str	r3, [r7, #32]
 8016d6a:	f107 0220 	add.w	r2, r7, #32
 8016d6e:	f107 0310 	add.w	r3, r7, #16
 8016d72:	4619      	mov	r1, r3
 8016d74:	68f8      	ldr	r0, [r7, #12]
 8016d76:	f7fb fd93 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8016d7a:	68f8      	ldr	r0, [r7, #12]
 8016d7c:	372c      	adds	r7, #44	; 0x2c
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	bd90      	pop	{r4, r7, pc}

08016d82 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8016d82:	b480      	push	{r7}
 8016d84:	b083      	sub	sp, #12
 8016d86:	af00      	add	r7, sp, #0
 8016d88:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	330c      	adds	r3, #12
 8016d8e:	4618      	mov	r0, r3
 8016d90:	370c      	adds	r7, #12
 8016d92:	46bd      	mov	sp, r7
 8016d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d98:	4770      	bx	lr

08016d9a <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b082      	sub	sp, #8
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	4618      	mov	r0, r3
 8016da8:	f003 fad5 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8016dac:	4602      	mov	r2, r0
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	601a      	str	r2, [r3, #0]
	return *this;
 8016db2:	687b      	ldr	r3, [r7, #4]
      }
 8016db4:	4618      	mov	r0, r3
 8016db6:	3708      	adds	r7, #8
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b082      	sub	sp, #8
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	4618      	mov	r0, r3
 8016dca:	f003 fac2 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8016dce:	4602      	mov	r2, r0
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	601a      	str	r2, [r3, #0]
	return *this;
 8016dd4:	687b      	ldr	r3, [r7, #4]
      }
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3708      	adds	r7, #8
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}

08016dde <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_Alloc_nodeclIRKS6_EEPSt13_Rb_tree_nodeIS6_EOT_>:
	  operator()(_Arg&& __arg) const
 8016dde:	b590      	push	{r4, r7, lr}
 8016de0:	b083      	sub	sp, #12
 8016de2:	af00      	add	r7, sp, #0
 8016de4:	6078      	str	r0, [r7, #4]
 8016de6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	681c      	ldr	r4, [r3, #0]
 8016dec:	6838      	ldr	r0, [r7, #0]
 8016dee:	f7fe fde6 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8016df2:	4603      	mov	r3, r0
 8016df4:	4619      	mov	r1, r3
 8016df6:	4620      	mov	r0, r4
 8016df8:	f000 fe80 	bl	8017afc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	4618      	mov	r0, r3
 8016e00:	370c      	adds	r7, #12
 8016e02:	46bd      	mov	sp, r7
 8016e04:	bd90      	pop	{r4, r7, pc}

08016e06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8016e06:	b480      	push	{r7}
 8016e08:	b083      	sub	sp, #12
 8016e0a:	af00      	add	r7, sp, #0
 8016e0c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	4618      	mov	r0, r3
 8016e12:	370c      	adds	r7, #12
 8016e14:	46bd      	mov	sp, r7
 8016e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1a:	4770      	bx	lr

08016e1c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr()
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	3310      	adds	r3, #16
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f000 fe7e 	bl	8017b2a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	4618      	mov	r0, r3
 8016e32:	3708      	adds	r7, #8
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b082      	sub	sp, #8
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]
 8016e40:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8016e42:	6838      	ldr	r0, [r7, #0]
 8016e44:	f000 fe7d 	bl	8017b42 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>
	}
 8016e48:	bf00      	nop
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b088      	sub	sp, #32
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
 8016e5c:	68fb      	ldr	r3, [r7, #12]
 8016e5e:	61fb      	str	r3, [r7, #28]
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	61bb      	str	r3, [r7, #24]
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8016e68:	f7f7 feb4 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d003      	beq.n	8016e7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8016e72:	69b8      	ldr	r0, [r7, #24]
 8016e74:	f003 fa04 	bl	801a280 <_ZdlPv>
	    return;
 8016e78:	e005      	b.n	8016e86 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8016e7a:	697a      	ldr	r2, [r7, #20]
 8016e7c:	69b9      	ldr	r1, [r7, #24]
 8016e7e:	69f8      	ldr	r0, [r7, #28]
 8016e80:	f001 f8ce 	bl	8018020 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8016e84:	bf00      	nop
 8016e86:	bf00      	nop
 8016e88:	3720      	adds	r7, #32
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	bd80      	pop	{r7, pc}

08016e8e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEC1ERKS8_>:
 8016e8e:	b480      	push	{r7}
 8016e90:	b083      	sub	sp, #12
 8016e92:	af00      	add	r7, sp, #0
 8016e94:	6078      	str	r0, [r7, #4]
 8016e96:	6039      	str	r1, [r7, #0]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	370c      	adds	r7, #12
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr

08016ea6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3Pin12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8016ea6:	b580      	push	{r7, lr}
 8016ea8:	b084      	sub	sp, #16
 8016eaa:	af00      	add	r7, sp, #0
 8016eac:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681a      	ldr	r2, [r3, #0]
 8016eb2:	f107 030c 	add.w	r3, r7, #12
 8016eb6:	4611      	mov	r1, r2
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f7fe fe20 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	3710      	adds	r7, #16
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bd80      	pop	{r7, pc}

08016ec8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8016ec8:	b480      	push	{r7}
 8016eca:	b083      	sub	sp, #12
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	3304      	adds	r3, #4
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	370c      	adds	r7, #12
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ede:	4770      	bx	lr

08016ee0 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016ee0:	b480      	push	{r7}
 8016ee2:	b083      	sub	sp, #12
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	695b      	ldr	r3, [r3, #20]
 8016eec:	4618      	mov	r0, r3
 8016eee:	370c      	adds	r7, #12
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef6:	4770      	bx	lr

08016ef8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8016ef8:	b480      	push	{r7}
 8016efa:	b083      	sub	sp, #12
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	3310      	adds	r3, #16
 8016f04:	4618      	mov	r0, r3
 8016f06:	370c      	adds	r7, #12
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr

08016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f000 fe1c 	bl	8017b56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	4618      	mov	r0, r3
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8016f28:	b590      	push	{r4, r7, lr}
 8016f2a:	b08b      	sub	sp, #44	; 0x2c
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	60f8      	str	r0, [r7, #12]
 8016f30:	60b9      	str	r1, [r7, #8]
 8016f32:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8016f34:	68b8      	ldr	r0, [r7, #8]
 8016f36:	f7fd fbe1 	bl	80146fc <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_M_beginEv>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8016f3e:	68b8      	ldr	r0, [r7, #8]
 8016f40:	f7ff ffc2 	bl	8016ec8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_M_endEv>
 8016f44:	4603      	mov	r3, r0
 8016f46:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8016f48:	2301      	movs	r3, #1
 8016f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d020      	beq.n	8016f96 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8016f58:	68bc      	ldr	r4, [r7, #8]
 8016f5a:	69bb      	ldr	r3, [r7, #24]
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f000 fdfa 	bl	8017b56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8016f62:	4603      	mov	r3, r0
 8016f64:	461a      	mov	r2, r3
 8016f66:	6879      	ldr	r1, [r7, #4]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f7fa f889 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8016f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d005      	beq.n	8016f88 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x60>
 8016f7c:	69bb      	ldr	r3, [r7, #24]
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f7fe f878 	bl	8015074 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8016f84:	4603      	mov	r3, r0
 8016f86:	e004      	b.n	8016f92 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x6a>
 8016f88:	69bb      	ldr	r3, [r7, #24]
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fe f866 	bl	801505c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8016f90:	4603      	mov	r3, r0
 8016f92:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8016f94:	e7db      	b.n	8016f4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 8016f96:	697a      	ldr	r2, [r7, #20]
 8016f98:	f107 0310 	add.w	r3, r7, #16
 8016f9c:	4611      	mov	r1, r2
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f7fe fdad 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8016fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d01d      	beq.n	8016fe8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 8016fac:	68b8      	ldr	r0, [r7, #8]
 8016fae:	f000 fde5 	bl	8017b7c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	61fb      	str	r3, [r7, #28]
 8016fb6:	f107 021c 	add.w	r2, r7, #28
 8016fba:	f107 0310 	add.w	r3, r7, #16
 8016fbe:	4611      	mov	r1, r2
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f000 fdec 	bl	8017b9e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d008      	beq.n	8016fde <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 8016fcc:	f107 0214 	add.w	r2, r7, #20
 8016fd0:	f107 0318 	add.w	r3, r7, #24
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	68f8      	ldr	r0, [r7, #12]
 8016fd8:	f000 fdf5 	bl	8017bc6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8016fdc:	e025      	b.n	801702a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 8016fde:	f107 0310 	add.w	r3, r7, #16
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f000 f831 	bl	801704a <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8016fe8:	68bc      	ldr	r4, [r7, #8]
 8016fea:	693b      	ldr	r3, [r7, #16]
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7ff ff8f 	bl	8016f10 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	687a      	ldr	r2, [r7, #4]
 8016ff6:	4619      	mov	r1, r3
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f7fa f841 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d008      	beq.n	8017016 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8017004:	f107 0214 	add.w	r2, r7, #20
 8017008:	f107 0318 	add.w	r3, r7, #24
 801700c:	4619      	mov	r1, r3
 801700e:	68f8      	ldr	r0, [r7, #12]
 8017010:	f000 fdd9 	bl	8017bc6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>
 8017014:	e009      	b.n	801702a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8017016:	2300      	movs	r3, #0
 8017018:	623b      	str	r3, [r7, #32]
 801701a:	f107 0220 	add.w	r2, r7, #32
 801701e:	f107 0310 	add.w	r3, r7, #16
 8017022:	4619      	mov	r1, r3
 8017024:	68f8      	ldr	r0, [r7, #12]
 8017026:	f7fb fc3b 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801702a:	68f8      	ldr	r0, [r7, #12]
 801702c:	372c      	adds	r7, #44	; 0x2c
 801702e:	46bd      	mov	sp, r7
 8017030:	bd90      	pop	{r4, r7, pc}

08017032 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8017032:	b480      	push	{r7}
 8017034:	b083      	sub	sp, #12
 8017036:	af00      	add	r7, sp, #0
 8017038:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	330c      	adds	r3, #12
 801703e:	4618      	mov	r0, r3
 8017040:	370c      	adds	r7, #12
 8017042:	46bd      	mov	sp, r7
 8017044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017048:	4770      	bx	lr

0801704a <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801704a:	b580      	push	{r7, lr}
 801704c:	b082      	sub	sp, #8
 801704e:	af00      	add	r7, sp, #0
 8017050:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	4618      	mov	r0, r3
 8017058:	f003 f97d 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801705c:	4602      	mov	r2, r0
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	601a      	str	r2, [r3, #0]
	return *this;
 8017062:	687b      	ldr	r3, [r7, #4]
      }
 8017064:	4618      	mov	r0, r3
 8017066:	3708      	adds	r7, #8
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}

0801706c <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	4618      	mov	r0, r3
 801707a:	f003 f96a 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801707e:	4602      	mov	r2, r0
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	601a      	str	r2, [r3, #0]
	return *this;
 8017084:	687b      	ldr	r3, [r7, #4]
      }
 8017086:	4618      	mov	r0, r3
 8017088:	3708      	adds	r7, #8
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}

0801708e <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 801708e:	b590      	push	{r4, r7, lr}
 8017090:	b083      	sub	sp, #12
 8017092:	af00      	add	r7, sp, #0
 8017094:	6078      	str	r0, [r7, #4]
 8017096:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681c      	ldr	r4, [r3, #0]
 801709c:	6838      	ldr	r0, [r7, #0]
 801709e:	f7fe fe6c 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80170a2:	4603      	mov	r3, r0
 80170a4:	4619      	mov	r1, r3
 80170a6:	4620      	mov	r0, r4
 80170a8:	f000 fda6 	bl	8017bf8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 80170ac:	4603      	mov	r3, r0
 80170ae:	4618      	mov	r0, r3
 80170b0:	370c      	adds	r7, #12
 80170b2:	46bd      	mov	sp, r7
 80170b4:	bd90      	pop	{r4, r7, pc}

080170b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80170b6:	b480      	push	{r7}
 80170b8:	b083      	sub	sp, #12
 80170ba:	af00      	add	r7, sp, #0
 80170bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	4618      	mov	r0, r3
 80170c2:	370c      	adds	r7, #12
 80170c4:	46bd      	mov	sp, r7
 80170c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ca:	4770      	bx	lr

080170cc <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	3310      	adds	r3, #16
 80170d8:	4618      	mov	r0, r3
 80170da:	f000 fda4 	bl	8017c26 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 80170de:	4603      	mov	r3, r0
 80170e0:	4618      	mov	r0, r3
 80170e2:	3708      	adds	r7, #8
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}

080170e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b082      	sub	sp, #8
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	6078      	str	r0, [r7, #4]
 80170f0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80170f2:	6838      	ldr	r0, [r7, #0]
 80170f4:	f000 fda3 	bl	8017c3e <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>
	}
 80170f8:	bf00      	nop
 80170fa:	3708      	adds	r7, #8
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017100:	b580      	push	{r7, lr}
 8017102:	b088      	sub	sp, #32
 8017104:	af00      	add	r7, sp, #0
 8017106:	60f8      	str	r0, [r7, #12]
 8017108:	60b9      	str	r1, [r7, #8]
 801710a:	607a      	str	r2, [r7, #4]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	61fb      	str	r3, [r7, #28]
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	61bb      	str	r3, [r7, #24]
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8017118:	f7f7 fd5c 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 801711c:	4603      	mov	r3, r0
 801711e:	2b00      	cmp	r3, #0
 8017120:	d003      	beq.n	801712a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8017122:	69b8      	ldr	r0, [r7, #24]
 8017124:	f003 f8ac 	bl	801a280 <_ZdlPv>
	    return;
 8017128:	e005      	b.n	8017136 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801712a:	697a      	ldr	r2, [r7, #20]
 801712c:	69b9      	ldr	r1, [r7, #24]
 801712e:	69f8      	ldr	r0, [r7, #28]
 8017130:	f000 ffdd 	bl	80180ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8017134:	bf00      	nop
 8017136:	bf00      	nop
 8017138:	3720      	adds	r7, #32
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEEC1ERKS9_>:
 801713e:	b480      	push	{r7}
 8017140:	b083      	sub	sp, #12
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]
 8017146:	6039      	str	r1, [r7, #0]
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	4618      	mov	r0, r3
 801714c:	370c      	adds	r7, #12
 801714e:	46bd      	mov	sp, r7
 8017150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017154:	4770      	bx	lr

08017156 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8017156:	b580      	push	{r7, lr}
 8017158:	b084      	sub	sp, #16
 801715a:	af00      	add	r7, sp, #0
 801715c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	f107 030c 	add.w	r3, r7, #12
 8017166:	4611      	mov	r1, r2
 8017168:	4618      	mov	r0, r3
 801716a:	f7fe fea5 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	4618      	mov	r0, r3
 8017172:	3710      	adds	r7, #16
 8017174:	46bd      	mov	sp, r7
 8017176:	bd80      	pop	{r7, pc}

08017178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8017178:	b480      	push	{r7}
 801717a:	b083      	sub	sp, #12
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	3304      	adds	r3, #4
 8017184:	4618      	mov	r0, r3
 8017186:	370c      	adds	r7, #12
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr

08017190 <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017190:	b480      	push	{r7}
 8017192:	b083      	sub	sp, #12
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	695b      	ldr	r3, [r3, #20]
 801719c:	4618      	mov	r0, r3
 801719e:	370c      	adds	r7, #12
 80171a0:	46bd      	mov	sp, r7
 80171a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a6:	4770      	bx	lr

080171a8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80171a8:	b480      	push	{r7}
 80171aa:	b083      	sub	sp, #12
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	3310      	adds	r3, #16
 80171b4:	4618      	mov	r0, r3
 80171b6:	370c      	adds	r7, #12
 80171b8:	46bd      	mov	sp, r7
 80171ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171be:	4770      	bx	lr

080171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f000 fd42 	bl	8017c52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80171ce:	4603      	mov	r3, r0
 80171d0:	4618      	mov	r0, r3
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80171d8:	b590      	push	{r4, r7, lr}
 80171da:	b08b      	sub	sp, #44	; 0x2c
 80171dc:	af00      	add	r7, sp, #0
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	60b9      	str	r1, [r7, #8]
 80171e2:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80171e4:	68b8      	ldr	r0, [r7, #8]
 80171e6:	f7fd fb5a 	bl	801489e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_M_beginEv>
 80171ea:	4603      	mov	r3, r0
 80171ec:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80171ee:	68b8      	ldr	r0, [r7, #8]
 80171f0:	f7ff ffc2 	bl	8017178 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_M_endEv>
 80171f4:	4603      	mov	r3, r0
 80171f6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80171f8:	2301      	movs	r3, #1
 80171fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d020      	beq.n	8017246 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6e>
	  __y = __x;
 8017204:	69bb      	ldr	r3, [r7, #24]
 8017206:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8017208:	68bc      	ldr	r4, [r7, #8]
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	4618      	mov	r0, r3
 801720e:	f000 fd20 	bl	8017c52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8017212:	4603      	mov	r3, r0
 8017214:	461a      	mov	r2, r3
 8017216:	6879      	ldr	r1, [r7, #4]
 8017218:	4620      	mov	r0, r4
 801721a:	f7ff fd13 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 801721e:	4603      	mov	r3, r0
 8017220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8017224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017228:	2b00      	cmp	r3, #0
 801722a:	d005      	beq.n	8017238 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x60>
 801722c:	69bb      	ldr	r3, [r7, #24]
 801722e:	4618      	mov	r0, r3
 8017230:	f7fd fff9 	bl	8015226 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017234:	4603      	mov	r3, r0
 8017236:	e004      	b.n	8017242 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x6a>
 8017238:	69bb      	ldr	r3, [r7, #24]
 801723a:	4618      	mov	r0, r3
 801723c:	f7fd ffe7 	bl	801520e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8017240:	4603      	mov	r3, r0
 8017242:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017244:	e7db      	b.n	80171fe <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8017246:	697a      	ldr	r2, [r7, #20]
 8017248:	f107 0310 	add.w	r3, r7, #16
 801724c:	4611      	mov	r1, r2
 801724e:	4618      	mov	r0, r3
 8017250:	f7fe fe32 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017258:	2b00      	cmp	r3, #0
 801725a:	d01d      	beq.n	8017298 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc0>
	  if (__j == begin())
 801725c:	68b8      	ldr	r0, [r7, #8]
 801725e:	f000 fd0b 	bl	8017c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>
 8017262:	4603      	mov	r3, r0
 8017264:	61fb      	str	r3, [r7, #28]
 8017266:	f107 021c 	add.w	r2, r7, #28
 801726a:	f107 0310 	add.w	r3, r7, #16
 801726e:	4611      	mov	r1, r2
 8017270:	4618      	mov	r0, r3
 8017272:	f000 fd12 	bl	8017c9a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d008      	beq.n	801728e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xb6>
	    return _Res(__x, __y);
 801727c:	f107 0214 	add.w	r2, r7, #20
 8017280:	f107 0318 	add.w	r3, r7, #24
 8017284:	4619      	mov	r1, r3
 8017286:	68f8      	ldr	r0, [r7, #12]
 8017288:	f000 fd1b 	bl	8017cc2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 801728c:	e025      	b.n	80172da <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
	    --__j;
 801728e:	f107 0310 	add.w	r3, r7, #16
 8017292:	4618      	mov	r0, r3
 8017294:	f000 f831 	bl	80172fa <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8017298:	68bc      	ldr	r4, [r7, #8]
 801729a:	693b      	ldr	r3, [r7, #16]
 801729c:	4618      	mov	r0, r3
 801729e:	f7ff ff8f 	bl	80171c0 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80172a2:	4603      	mov	r3, r0
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	4619      	mov	r1, r3
 80172a8:	4620      	mov	r0, r4
 80172aa:	f7ff fccb 	bl	8016c44 <_ZNKSt4lessISt4pairI3PinS1_EEclERKS2_S5_>
 80172ae:	4603      	mov	r3, r0
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d008      	beq.n	80172c6 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xee>
	return _Res(__x, __y);
 80172b4:	f107 0214 	add.w	r2, r7, #20
 80172b8:	f107 0318 	add.w	r3, r7, #24
 80172bc:	4619      	mov	r1, r3
 80172be:	68f8      	ldr	r0, [r7, #12]
 80172c0:	f000 fcff 	bl	8017cc2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>
 80172c4:	e009      	b.n	80172da <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x102>
      return _Res(__j._M_node, 0);
 80172c6:	2300      	movs	r3, #0
 80172c8:	623b      	str	r3, [r7, #32]
 80172ca:	f107 0220 	add.w	r2, r7, #32
 80172ce:	f107 0310 	add.w	r3, r7, #16
 80172d2:	4619      	mov	r1, r3
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f7fb fae3 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80172da:	68f8      	ldr	r0, [r7, #12]
 80172dc:	372c      	adds	r7, #44	; 0x2c
 80172de:	46bd      	mov	sp, r7
 80172e0:	bd90      	pop	{r4, r7, pc}

080172e2 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80172e2:	b480      	push	{r7}
 80172e4:	b083      	sub	sp, #12
 80172e6:	af00      	add	r7, sp, #0
 80172e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	330c      	adds	r3, #12
 80172ee:	4618      	mov	r0, r3
 80172f0:	370c      	adds	r7, #12
 80172f2:	46bd      	mov	sp, r7
 80172f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f8:	4770      	bx	lr

080172fa <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80172fa:	b580      	push	{r7, lr}
 80172fc:	b082      	sub	sp, #8
 80172fe:	af00      	add	r7, sp, #0
 8017300:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	4618      	mov	r0, r3
 8017308:	f003 f825 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 801730c:	4602      	mov	r2, r0
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	601a      	str	r2, [r3, #0]
	return *this;
 8017312:	687b      	ldr	r3, [r7, #4]
      }
 8017314:	4618      	mov	r0, r3
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}

0801731c <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4618      	mov	r0, r3
 801732a:	f003 f812 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801732e:	4602      	mov	r2, r0
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	601a      	str	r2, [r3, #0]
	return *this;
 8017334:	687b      	ldr	r3, [r7, #4]
      }
 8017336:	4618      	mov	r0, r3
 8017338:	3708      	adds	r7, #8
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}

0801733e <_ZNKSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 801733e:	b590      	push	{r4, r7, lr}
 8017340:	b083      	sub	sp, #12
 8017342:	af00      	add	r7, sp, #0
 8017344:	6078      	str	r0, [r7, #4]
 8017346:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681c      	ldr	r4, [r3, #0]
 801734c:	6838      	ldr	r0, [r7, #0]
 801734e:	f7fe fef1 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017352:	4603      	mov	r3, r0
 8017354:	4619      	mov	r1, r3
 8017356:	4620      	mov	r0, r4
 8017358:	f000 fccc 	bl	8017cf4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801735c:	4603      	mov	r3, r0
 801735e:	4618      	mov	r0, r3
 8017360:	370c      	adds	r7, #12
 8017362:	46bd      	mov	sp, r7
 8017364:	bd90      	pop	{r4, r7, pc}

08017366 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017366:	b480      	push	{r7}
 8017368:	b083      	sub	sp, #12
 801736a:	af00      	add	r7, sp, #0
 801736c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	4618      	mov	r0, r3
 8017372:	370c      	adds	r7, #12
 8017374:	46bd      	mov	sp, r7
 8017376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737a:	4770      	bx	lr

0801737c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr()
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	3310      	adds	r3, #16
 8017388:	4618      	mov	r0, r3
 801738a:	f000 fcca 	bl	8017d22 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 801738e:	4603      	mov	r3, r0
 8017390:	4618      	mov	r0, r3
 8017392:	3708      	adds	r7, #8
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
 80173a0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80173a2:	6838      	ldr	r0, [r7, #0]
 80173a4:	f000 fcc9 	bl	8017d3a <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>
	}
 80173a8:	bf00      	nop
 80173aa:	3708      	adds	r7, #8
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}

080173b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b088      	sub	sp, #32
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	60f8      	str	r0, [r7, #12]
 80173b8:	60b9      	str	r1, [r7, #8]
 80173ba:	607a      	str	r2, [r7, #4]
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	61fb      	str	r3, [r7, #28]
 80173c0:	68bb      	ldr	r3, [r7, #8]
 80173c2:	61bb      	str	r3, [r7, #24]
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80173c8:	f7f7 fc04 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80173cc:	4603      	mov	r3, r0
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d003      	beq.n	80173da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 80173d2:	69b8      	ldr	r0, [r7, #24]
 80173d4:	f002 ff54 	bl	801a280 <_ZdlPv>
	    return;
 80173d8:	e005      	b.n	80173e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80173da:	697a      	ldr	r2, [r7, #20]
 80173dc:	69b9      	ldr	r1, [r7, #24]
 80173de:	69f8      	ldr	r0, [r7, #28]
 80173e0:	f000 fee9 	bl	80181b6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 80173e4:	bf00      	nop
 80173e6:	bf00      	nop
 80173e8:	3720      	adds	r7, #32
 80173ea:	46bd      	mov	sp, r7
 80173ec:	bd80      	pop	{r7, pc}

080173ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEC1ERKS9_>:
 80173ee:	b480      	push	{r7}
 80173f0:	b083      	sub	sp, #12
 80173f2:	af00      	add	r7, sp, #0
 80173f4:	6078      	str	r0, [r7, #4]
 80173f6:	6039      	str	r1, [r7, #0]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	4618      	mov	r0, r3
 80173fc:	370c      	adds	r7, #12
 80173fe:	46bd      	mov	sp, r7
 8017400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017404:	4770      	bx	lr

08017406 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK3PinN12InputCapture8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8017406:	b580      	push	{r7, lr}
 8017408:	b084      	sub	sp, #16
 801740a:	af00      	add	r7, sp, #0
 801740c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681a      	ldr	r2, [r3, #0]
 8017412:	f107 030c 	add.w	r3, r7, #12
 8017416:	4611      	mov	r1, r2
 8017418:	4618      	mov	r0, r3
 801741a:	f7fe ff2a 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	4618      	mov	r0, r3
 8017422:	3710      	adds	r7, #16
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}

08017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	3304      	adds	r3, #4
 8017434:	4618      	mov	r0, r3
 8017436:	370c      	adds	r7, #12
 8017438:	46bd      	mov	sp, r7
 801743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743e:	4770      	bx	lr

08017440 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017440:	b480      	push	{r7}
 8017442:	b083      	sub	sp, #12
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	695b      	ldr	r3, [r3, #20]
 801744c:	4618      	mov	r0, r3
 801744e:	370c      	adds	r7, #12
 8017450:	46bd      	mov	sp, r7
 8017452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017456:	4770      	bx	lr

08017458 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8017458:	b480      	push	{r7}
 801745a:	b083      	sub	sp, #12
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	3310      	adds	r3, #16
 8017464:	4618      	mov	r0, r3
 8017466:	370c      	adds	r7, #12
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr

08017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8017470:	b580      	push	{r7, lr}
 8017472:	b082      	sub	sp, #8
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f000 fc68 	bl	8017d4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 801747e:	4603      	mov	r3, r0
 8017480:	4618      	mov	r0, r3
 8017482:	3708      	adds	r7, #8
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8017488:	b590      	push	{r4, r7, lr}
 801748a:	b08b      	sub	sp, #44	; 0x2c
 801748c:	af00      	add	r7, sp, #0
 801748e:	60f8      	str	r0, [r7, #12]
 8017490:	60b9      	str	r1, [r7, #8]
 8017492:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8017494:	68b8      	ldr	r0, [r7, #8]
 8017496:	f7fd fac7 	bl	8014a28 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_M_beginEv>
 801749a:	4603      	mov	r3, r0
 801749c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801749e:	68b8      	ldr	r0, [r7, #8]
 80174a0:	f7ff ffc2 	bl	8017428 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_M_endEv>
 80174a4:	4603      	mov	r3, r0
 80174a6:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80174a8:	2301      	movs	r3, #1
 80174aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80174ae:	69bb      	ldr	r3, [r7, #24]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d020      	beq.n	80174f6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 80174b4:	69bb      	ldr	r3, [r7, #24]
 80174b6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80174b8:	68bc      	ldr	r4, [r7, #8]
 80174ba:	69bb      	ldr	r3, [r7, #24]
 80174bc:	4618      	mov	r0, r3
 80174be:	f000 fc46 	bl	8017d4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 80174c2:	4603      	mov	r3, r0
 80174c4:	461a      	mov	r2, r3
 80174c6:	6879      	ldr	r1, [r7, #4]
 80174c8:	4620      	mov	r0, r4
 80174ca:	f7f9 fdd9 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 80174ce:	4603      	mov	r3, r0
 80174d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80174d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d005      	beq.n	80174e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x60>
 80174dc:	69bb      	ldr	r3, [r7, #24]
 80174de:	4618      	mov	r0, r3
 80174e0:	f7fd ff6f 	bl	80153c2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 80174e4:	4603      	mov	r3, r0
 80174e6:	e004      	b.n	80174f2 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x6a>
 80174e8:	69bb      	ldr	r3, [r7, #24]
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7fd ff5d 	bl	80153aa <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80174f0:	4603      	mov	r3, r0
 80174f2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80174f4:	e7db      	b.n	80174ae <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 80174f6:	697a      	ldr	r2, [r7, #20]
 80174f8:	f107 0310 	add.w	r3, r7, #16
 80174fc:	4611      	mov	r1, r2
 80174fe:	4618      	mov	r0, r3
 8017500:	f7fe feb7 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017508:	2b00      	cmp	r3, #0
 801750a:	d01d      	beq.n	8017548 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 801750c:	68b8      	ldr	r0, [r7, #8]
 801750e:	f000 fc31 	bl	8017d74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>
 8017512:	4603      	mov	r3, r0
 8017514:	61fb      	str	r3, [r7, #28]
 8017516:	f107 021c 	add.w	r2, r7, #28
 801751a:	f107 0310 	add.w	r3, r7, #16
 801751e:	4611      	mov	r1, r2
 8017520:	4618      	mov	r0, r3
 8017522:	f000 fc38 	bl	8017d96 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>
 8017526:	4603      	mov	r3, r0
 8017528:	2b00      	cmp	r3, #0
 801752a:	d008      	beq.n	801753e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 801752c:	f107 0214 	add.w	r2, r7, #20
 8017530:	f107 0318 	add.w	r3, r7, #24
 8017534:	4619      	mov	r1, r3
 8017536:	68f8      	ldr	r0, [r7, #12]
 8017538:	f000 fc41 	bl	8017dbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 801753c:	e025      	b.n	801758a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 801753e:	f107 0310 	add.w	r3, r7, #16
 8017542:	4618      	mov	r0, r3
 8017544:	f000 f831 	bl	80175aa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8017548:	68bc      	ldr	r4, [r7, #8]
 801754a:	693b      	ldr	r3, [r7, #16]
 801754c:	4618      	mov	r0, r3
 801754e:	f7ff ff8f 	bl	8017470 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8017552:	4603      	mov	r3, r0
 8017554:	687a      	ldr	r2, [r7, #4]
 8017556:	4619      	mov	r1, r3
 8017558:	4620      	mov	r0, r4
 801755a:	f7f9 fd91 	bl	8011080 <_ZNKSt4lessI3PinEclERKS0_S3_>
 801755e:	4603      	mov	r3, r0
 8017560:	2b00      	cmp	r3, #0
 8017562:	d008      	beq.n	8017576 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 8017564:	f107 0214 	add.w	r2, r7, #20
 8017568:	f107 0318 	add.w	r3, r7, #24
 801756c:	4619      	mov	r1, r3
 801756e:	68f8      	ldr	r0, [r7, #12]
 8017570:	f000 fc25 	bl	8017dbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>
 8017574:	e009      	b.n	801758a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 8017576:	2300      	movs	r3, #0
 8017578:	623b      	str	r3, [r7, #32]
 801757a:	f107 0220 	add.w	r2, r7, #32
 801757e:	f107 0310 	add.w	r3, r7, #16
 8017582:	4619      	mov	r1, r3
 8017584:	68f8      	ldr	r0, [r7, #12]
 8017586:	f7fb f98b 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	372c      	adds	r7, #44	; 0x2c
 801758e:	46bd      	mov	sp, r7
 8017590:	bd90      	pop	{r4, r7, pc}

08017592 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8017592:	b480      	push	{r7}
 8017594:	b083      	sub	sp, #12
 8017596:	af00      	add	r7, sp, #0
 8017598:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	330c      	adds	r3, #12
 801759e:	4618      	mov	r0, r3
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr

080175aa <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80175aa:	b580      	push	{r7, lr}
 80175ac:	b082      	sub	sp, #8
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	4618      	mov	r0, r3
 80175b8:	f002 fecd 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80175bc:	4602      	mov	r2, r0
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	601a      	str	r2, [r3, #0]
	return *this;
 80175c2:	687b      	ldr	r3, [r7, #4]
      }
 80175c4:	4618      	mov	r0, r3
 80175c6:	3708      	adds	r7, #8
 80175c8:	46bd      	mov	sp, r7
 80175ca:	bd80      	pop	{r7, pc}

080175cc <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	4618      	mov	r0, r3
 80175da:	f002 feba 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80175de:	4602      	mov	r2, r0
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	601a      	str	r2, [r3, #0]
	return *this;
 80175e4:	687b      	ldr	r3, [r7, #4]
      }
 80175e6:	4618      	mov	r0, r3
 80175e8:	3708      	adds	r7, #8
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bd80      	pop	{r7, pc}

080175ee <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 80175ee:	b590      	push	{r4, r7, lr}
 80175f0:	b083      	sub	sp, #12
 80175f2:	af00      	add	r7, sp, #0
 80175f4:	6078      	str	r0, [r7, #4]
 80175f6:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681c      	ldr	r4, [r3, #0]
 80175fc:	6838      	ldr	r0, [r7, #0]
 80175fe:	f7fe ff76 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017602:	4603      	mov	r3, r0
 8017604:	4619      	mov	r1, r3
 8017606:	4620      	mov	r0, r4
 8017608:	f000 fbf2 	bl	8017df0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 801760c:	4603      	mov	r3, r0
 801760e:	4618      	mov	r0, r3
 8017610:	370c      	adds	r7, #12
 8017612:	46bd      	mov	sp, r7
 8017614:	bd90      	pop	{r4, r7, pc}

08017616 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017616:	b480      	push	{r7}
 8017618:	b083      	sub	sp, #12
 801761a:	af00      	add	r7, sp, #0
 801761c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	4618      	mov	r0, r3
 8017622:	370c      	adds	r7, #12
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr

0801762c <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	3310      	adds	r3, #16
 8017638:	4618      	mov	r0, r3
 801763a:	f000 fbf0 	bl	8017e1e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 801763e:	4603      	mov	r3, r0
 8017640:	4618      	mov	r0, r3
 8017642:	3708      	adds	r7, #8
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}

08017648 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	6078      	str	r0, [r7, #4]
 8017650:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8017652:	6838      	ldr	r0, [r7, #0]
 8017654:	f000 fbef 	bl	8017e36 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>
	}
 8017658:	bf00      	nop
 801765a:	3708      	adds	r7, #8
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}

08017660 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017660:	b580      	push	{r7, lr}
 8017662:	b088      	sub	sp, #32
 8017664:	af00      	add	r7, sp, #0
 8017666:	60f8      	str	r0, [r7, #12]
 8017668:	60b9      	str	r1, [r7, #8]
 801766a:	607a      	str	r2, [r7, #4]
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	61fb      	str	r3, [r7, #28]
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	61bb      	str	r3, [r7, #24]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8017678:	f7f7 faac 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 801767c:	4603      	mov	r3, r0
 801767e:	2b00      	cmp	r3, #0
 8017680:	d003      	beq.n	801768a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 8017682:	69b8      	ldr	r0, [r7, #24]
 8017684:	f002 fdfc 	bl	801a280 <_ZdlPv>
	    return;
 8017688:	e005      	b.n	8017696 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 801768a:	697a      	ldr	r2, [r7, #20]
 801768c:	69b9      	ldr	r1, [r7, #24]
 801768e:	69f8      	ldr	r0, [r7, #28]
 8017690:	f000 fdf8 	bl	8018284 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8017694:	bf00      	nop
 8017696:	bf00      	nop
 8017698:	3720      	adds	r7, #32
 801769a:	46bd      	mov	sp, r7
 801769c:	bd80      	pop	{r7, pc}

0801769e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEC1ERKS9_>:
 801769e:	b480      	push	{r7}
 80176a0:	b083      	sub	sp, #12
 80176a2:	af00      	add	r7, sp, #0
 80176a4:	6078      	str	r0, [r7, #4]
 80176a6:	6039      	str	r1, [r7, #0]
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	4618      	mov	r0, r3
 80176ac:	370c      	adds	r7, #12
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr

080176b6 <_ZNKSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_Alloc_nodeclIRKS5_EEPSt13_Rb_tree_nodeIS5_EOT_>:
	  operator()(_Arg&& __arg) const
 80176b6:	b590      	push	{r4, r7, lr}
 80176b8:	b083      	sub	sp, #12
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
 80176be:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681c      	ldr	r4, [r3, #0]
 80176c4:	6838      	ldr	r0, [r7, #0]
 80176c6:	f7fe ffb1 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80176ca:	4603      	mov	r3, r0
 80176cc:	4619      	mov	r1, r3
 80176ce:	4620      	mov	r0, r4
 80176d0:	f000 fbbb 	bl	8017e4a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 80176d4:	4603      	mov	r3, r0
 80176d6:	4618      	mov	r0, r3
 80176d8:	370c      	adds	r7, #12
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd90      	pop	{r4, r7, pc}

080176de <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80176de:	b480      	push	{r7}
 80176e0:	b083      	sub	sp, #12
 80176e2:	af00      	add	r7, sp, #0
 80176e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	4618      	mov	r0, r3
 80176ea:	370c      	adds	r7, #12
 80176ec:	46bd      	mov	sp, r7
 80176ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f2:	4770      	bx	lr

080176f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80176f4:	b480      	push	{r7}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	4618      	mov	r0, r3
 8017700:	370c      	adds	r7, #12
 8017702:	46bd      	mov	sp, r7
 8017704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017708:	4770      	bx	lr

0801770a <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 801770a:	b480      	push	{r7}
 801770c:	b083      	sub	sp, #12
 801770e:	af00      	add	r7, sp, #0
 8017710:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	4618      	mov	r0, r3
 8017716:	370c      	adds	r7, #12
 8017718:	46bd      	mov	sp, r7
 801771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771e:	4770      	bx	lr

08017720 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEC1ERKS8_>:
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	4618      	mov	r0, r3
 801772e:	370c      	adds	r7, #12
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8017738:	b580      	push	{r7, lr}
 801773a:	b084      	sub	sp, #16
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	f107 030c 	add.w	r3, r7, #12
 8017748:	4611      	mov	r1, r2
 801774a:	4618      	mov	r0, r3
 801774c:	f7ff f857 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 801775a:	b480      	push	{r7}
 801775c:	b083      	sub	sp, #12
 801775e:	af00      	add	r7, sp, #0
 8017760:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	3304      	adds	r3, #4
 8017766:	4618      	mov	r0, r3
 8017768:	370c      	adds	r7, #12
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr

08017772 <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8017772:	b480      	push	{r7}
 8017774:	b083      	sub	sp, #12
 8017776:	af00      	add	r7, sp, #0
 8017778:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	695b      	ldr	r3, [r3, #20]
 801777e:	4618      	mov	r0, r3
 8017780:	370c      	adds	r7, #12
 8017782:	46bd      	mov	sp, r7
 8017784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017788:	4770      	bx	lr

0801778a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801778a:	b480      	push	{r7}
 801778c:	b083      	sub	sp, #12
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	3310      	adds	r3, #16
 8017796:	4618      	mov	r0, r3
 8017798:	370c      	adds	r7, #12
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr

080177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80177a2:	b580      	push	{r7, lr}
 80177a4:	b082      	sub	sp, #8
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f000 fb64 	bl	8017e78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80177b0:	4603      	mov	r3, r0
 80177b2:	4618      	mov	r0, r3
 80177b4:	3708      	adds	r7, #8
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}

080177ba <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80177ba:	b480      	push	{r7}
 80177bc:	b085      	sub	sp, #20
 80177be:	af00      	add	r7, sp, #0
 80177c0:	60f8      	str	r0, [r7, #12]
 80177c2:	60b9      	str	r1, [r7, #8]
 80177c4:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	881a      	ldrh	r2, [r3, #0]
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	881b      	ldrh	r3, [r3, #0]
 80177ce:	429a      	cmp	r2, r3
 80177d0:	bf34      	ite	cc
 80177d2:	2301      	movcc	r3, #1
 80177d4:	2300      	movcs	r3, #0
 80177d6:	b2db      	uxtb	r3, r3
 80177d8:	4618      	mov	r0, r3
 80177da:	3714      	adds	r7, #20
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80177e4:	b590      	push	{r4, r7, lr}
 80177e6:	b08b      	sub	sp, #44	; 0x2c
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80177f0:	68b8      	ldr	r0, [r7, #8]
 80177f2:	f7fd faa9 	bl	8014d48 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80177f6:	4603      	mov	r3, r0
 80177f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80177fa:	68b8      	ldr	r0, [r7, #8]
 80177fc:	f7ff ffad 	bl	801775a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8017800:	4603      	mov	r3, r0
 8017802:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8017804:	2301      	movs	r3, #1
 8017806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801780a:	69bb      	ldr	r3, [r7, #24]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d020      	beq.n	8017852 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8017810:	69bb      	ldr	r3, [r7, #24]
 8017812:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8017814:	68bc      	ldr	r4, [r7, #8]
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	4618      	mov	r0, r3
 801781a:	f000 fb2d 	bl	8017e78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801781e:	4603      	mov	r3, r0
 8017820:	461a      	mov	r2, r3
 8017822:	6879      	ldr	r1, [r7, #4]
 8017824:	4620      	mov	r0, r4
 8017826:	f7ff ffc8 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 801782a:	4603      	mov	r3, r0
 801782c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8017830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017834:	2b00      	cmp	r3, #0
 8017836:	d005      	beq.n	8017844 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8017838:	69bb      	ldr	r3, [r7, #24]
 801783a:	4618      	mov	r0, r3
 801783c:	f7fd ff34 	bl	80156a8 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8017840:	4603      	mov	r3, r0
 8017842:	e004      	b.n	801784e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8017844:	69bb      	ldr	r3, [r7, #24]
 8017846:	4618      	mov	r0, r3
 8017848:	f7fd ff22 	bl	8015690 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801784c:	4603      	mov	r3, r0
 801784e:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8017850:	e7db      	b.n	801780a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8017852:	697a      	ldr	r2, [r7, #20]
 8017854:	f107 0310 	add.w	r3, r7, #16
 8017858:	4611      	mov	r1, r2
 801785a:	4618      	mov	r0, r3
 801785c:	f7fe ffcf 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8017860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017864:	2b00      	cmp	r3, #0
 8017866:	d01d      	beq.n	80178a4 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8017868:	68b8      	ldr	r0, [r7, #8]
 801786a:	f000 fb18 	bl	8017e9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 801786e:	4603      	mov	r3, r0
 8017870:	61fb      	str	r3, [r7, #28]
 8017872:	f107 021c 	add.w	r2, r7, #28
 8017876:	f107 0310 	add.w	r3, r7, #16
 801787a:	4611      	mov	r1, r2
 801787c:	4618      	mov	r0, r3
 801787e:	f000 fb1f 	bl	8017ec0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>
 8017882:	4603      	mov	r3, r0
 8017884:	2b00      	cmp	r3, #0
 8017886:	d008      	beq.n	801789a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8017888:	f107 0214 	add.w	r2, r7, #20
 801788c:	f107 0318 	add.w	r3, r7, #24
 8017890:	4619      	mov	r1, r3
 8017892:	68f8      	ldr	r0, [r7, #12]
 8017894:	f000 fb28 	bl	8017ee8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 8017898:	e025      	b.n	80178e6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801789a:	f107 0310 	add.w	r3, r7, #16
 801789e:	4618      	mov	r0, r3
 80178a0:	f000 f831 	bl	8017906 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80178a4:	68bc      	ldr	r4, [r7, #8]
 80178a6:	693b      	ldr	r3, [r7, #16]
 80178a8:	4618      	mov	r0, r3
 80178aa:	f7ff ff7a 	bl	80177a2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80178ae:	4603      	mov	r3, r0
 80178b0:	687a      	ldr	r2, [r7, #4]
 80178b2:	4619      	mov	r1, r3
 80178b4:	4620      	mov	r0, r4
 80178b6:	f7ff ff80 	bl	80177ba <_ZNKSt4lessItEclERKtS2_>
 80178ba:	4603      	mov	r3, r0
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d008      	beq.n	80178d2 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 80178c0:	f107 0214 	add.w	r2, r7, #20
 80178c4:	f107 0318 	add.w	r3, r7, #24
 80178c8:	4619      	mov	r1, r3
 80178ca:	68f8      	ldr	r0, [r7, #12]
 80178cc:	f000 fb0c 	bl	8017ee8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>
 80178d0:	e009      	b.n	80178e6 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 80178d2:	2300      	movs	r3, #0
 80178d4:	623b      	str	r3, [r7, #32]
 80178d6:	f107 0220 	add.w	r2, r7, #32
 80178da:	f107 0310 	add.w	r3, r7, #16
 80178de:	4619      	mov	r1, r3
 80178e0:	68f8      	ldr	r0, [r7, #12]
 80178e2:	f7fa ffdd 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80178e6:	68f8      	ldr	r0, [r7, #12]
 80178e8:	372c      	adds	r7, #44	; 0x2c
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd90      	pop	{r4, r7, pc}

080178ee <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80178ee:	b480      	push	{r7}
 80178f0:	b083      	sub	sp, #12
 80178f2:	af00      	add	r7, sp, #0
 80178f4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	330c      	adds	r3, #12
 80178fa:	4618      	mov	r0, r3
 80178fc:	370c      	adds	r7, #12
 80178fe:	46bd      	mov	sp, r7
 8017900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017904:	4770      	bx	lr

08017906 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8017906:	b580      	push	{r7, lr}
 8017908:	b082      	sub	sp, #8
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	4618      	mov	r0, r3
 8017914:	f002 fd1f 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8017918:	4602      	mov	r2, r0
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	601a      	str	r2, [r3, #0]
	return *this;
 801791e:	687b      	ldr	r3, [r7, #4]
      }
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	4618      	mov	r0, r3
 8017936:	f002 fd0c 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 801793a:	4602      	mov	r2, r0
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	601a      	str	r2, [r3, #0]
	return *this;
 8017940:	687b      	ldr	r3, [r7, #4]
      }
 8017942:	4618      	mov	r0, r3
 8017944:	3708      	adds	r7, #8
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}

0801794a <_ZNKSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_Alloc_nodeclIRKS4_EEPSt13_Rb_tree_nodeIS4_EOT_>:
	  operator()(_Arg&& __arg) const
 801794a:	b590      	push	{r4, r7, lr}
 801794c:	b083      	sub	sp, #12
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681c      	ldr	r4, [r3, #0]
 8017958:	6838      	ldr	r0, [r7, #0]
 801795a:	f7ff f88e 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 801795e:	4603      	mov	r3, r0
 8017960:	4619      	mov	r1, r3
 8017962:	4620      	mov	r0, r4
 8017964:	f000 fad9 	bl	8017f1a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8017968:	4603      	mov	r3, r0
 801796a:	4618      	mov	r0, r3
 801796c:	370c      	adds	r7, #12
 801796e:	46bd      	mov	sp, r7
 8017970:	bd90      	pop	{r4, r7, pc}

08017972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8017972:	b480      	push	{r7}
 8017974:	b083      	sub	sp, #12
 8017976:	af00      	add	r7, sp, #0
 8017978:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	4618      	mov	r0, r3
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr

08017988 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 8017988:	b580      	push	{r7, lr}
 801798a:	b082      	sub	sp, #8
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	3310      	adds	r3, #16
 8017994:	4618      	mov	r0, r3
 8017996:	f000 fad7 	bl	8017f48 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 801799a:	4603      	mov	r3, r0
 801799c:	4618      	mov	r0, r3
 801799e:	3708      	adds	r7, #8
 80179a0:	46bd      	mov	sp, r7
 80179a2:	bd80      	pop	{r7, pc}

080179a4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80179ae:	6838      	ldr	r0, [r7, #0]
 80179b0:	f000 fad6 	bl	8017f60 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>
	}
 80179b4:	bf00      	nop
 80179b6:	3708      	adds	r7, #8
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}

080179bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80179bc:	b580      	push	{r7, lr}
 80179be:	b088      	sub	sp, #32
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	60f8      	str	r0, [r7, #12]
 80179c4:	60b9      	str	r1, [r7, #8]
 80179c6:	607a      	str	r2, [r7, #4]
 80179c8:	68fb      	ldr	r3, [r7, #12]
 80179ca:	61fb      	str	r3, [r7, #28]
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	61bb      	str	r3, [r7, #24]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80179d4:	f7f7 f8fe 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80179d8:	4603      	mov	r3, r0
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d003      	beq.n	80179e6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 80179de:	69b8      	ldr	r0, [r7, #24]
 80179e0:	f002 fc4e 	bl	801a280 <_ZdlPv>
	    return;
 80179e4:	e005      	b.n	80179f2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80179e6:	697a      	ldr	r2, [r7, #20]
 80179e8:	69b9      	ldr	r1, [r7, #24]
 80179ea:	69f8      	ldr	r0, [r7, #28]
 80179ec:	f000 fcd1 	bl	8018392 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 80179f0:	bf00      	nop
 80179f2:	bf00      	nop
 80179f4:	3720      	adds	r7, #32
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}

080179fa <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 80179fa:	b580      	push	{r7, lr}
 80179fc:	b084      	sub	sp, #16
 80179fe:	af00      	add	r7, sp, #0
 8017a00:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017a02:	6878      	ldr	r0, [r7, #4]
 8017a04:	f000 fab7 	bl	8017f76 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	f107 030c 	add.w	r3, r7, #12
 8017a0e:	4611      	mov	r1, r2
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7fd ffc8 	bl	80159a6 <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEclERKS6_>
 8017a16:	4603      	mov	r3, r0
      }
 8017a18:	4618      	mov	r0, r3
 8017a1a:	3710      	adds	r7, #16
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	bd80      	pop	{r7, pc}

08017a20 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_>:

#if __cpp_lib_three_way_comparison && __cpp_lib_concepts
  template<typename _T1, typename _T2>
    constexpr common_comparison_category_t<__detail::__synth3way_t<_T1>,
					   __detail::__synth3way_t<_T2>>
    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b084      	sub	sp, #16
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
    {
      if (auto __c = __detail::__synth3way(__x.first, __y.first); __c != 0)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	683a      	ldr	r2, [r7, #0]
 8017a2e:	4619      	mov	r1, r3
 8017a30:	4812      	ldr	r0, [pc, #72]	; (8017a7c <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8017a32:	f7ff f8ea 	bl	8016c0a <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8017a36:	4603      	mov	r3, r0
 8017a38:	723b      	strb	r3, [r7, #8]
 8017a3a:	f107 030c 	add.w	r3, r7, #12
 8017a3e:	2100      	movs	r1, #0
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7fc f81d 	bl	8013a80 <_ZNSt9__cmp_cat8__unspecC1EPS0_>
 8017a46:	7b39      	ldrb	r1, [r7, #12]
 8017a48:	7a38      	ldrb	r0, [r7, #8]
 8017a4a:	f7fc f825 	bl	8013a98 <_ZSteqSt13weak_orderingNSt9__cmp_cat8__unspecE>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	f083 0301 	eor.w	r3, r3, #1
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d001      	beq.n	8017a5e <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x3e>
	return __c;
 8017a5a:	7a3b      	ldrb	r3, [r7, #8]
 8017a5c:	e00a      	b.n	8017a74 <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x54>
      return __detail::__synth3way(__x.second, __y.second);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	f103 0108 	add.w	r1, r3, #8
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	3308      	adds	r3, #8
 8017a68:	461a      	mov	r2, r3
 8017a6a:	4804      	ldr	r0, [pc, #16]	; (8017a7c <_ZStssI3PinS0_ENSt26common_comparison_categoryIJDTclL_ZNSt8__detail11__synth3wayEEcl7declvalIRT_EEcl7declvalIS4_EEEEDTclL_ZNS2_11__synth3wayEEcl7declvalIRT0_EEcl7declvalIS7_EEEEEE4typeERKSt4pairIS3_S6_ESE_+0x5c>)
 8017a6c:	f7ff f8cd 	bl	8016c0a <_ZNKSt8__detail10_Synth3wayclI3PinS2_EEDaRKT_RKT0_>
 8017a70:	4603      	mov	r3, r0
 8017a72:	bf00      	nop
    }
 8017a74:	4618      	mov	r0, r3
 8017a76:	3710      	adds	r7, #16
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}
 8017a7c:	0801ac54 	.word	0x0801ac54

08017a80 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	68da      	ldr	r2, [r3, #12]
 8017a8c:	f107 030c 	add.w	r3, r7, #12
 8017a90:	4611      	mov	r1, r2
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7fd fe55 	bl	8015742 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEC1EPSt18_Rb_tree_node_base>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	3710      	adds	r7, #16
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}

08017aa2 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017aa2:	b480      	push	{r7}
 8017aa4:	b083      	sub	sp, #12
 8017aa6:	af00      	add	r7, sp, #0
 8017aa8:	6078      	str	r0, [r7, #4]
 8017aaa:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681a      	ldr	r2, [r3, #0]
 8017ab0:	683b      	ldr	r3, [r7, #0]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	bf0c      	ite	eq
 8017ab8:	2301      	moveq	r3, #1
 8017aba:	2300      	movne	r3, #0
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	4618      	mov	r0, r3
 8017ac0:	370c      	adds	r7, #12
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_EP17TIM_HandleTypeDefEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017aca:	b580      	push	{r7, lr}
 8017acc:	b084      	sub	sp, #16
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	60f8      	str	r0, [r7, #12]
 8017ad2:	60b9      	str	r1, [r7, #8]
 8017ad4:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017ad6:	68b8      	ldr	r0, [r7, #8]
 8017ad8:	f000 fa5b 	bl	8017f92 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>
 8017adc:	4603      	mov	r3, r0
 8017ade:	681a      	ldr	r2, [r3, #0]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	601a      	str	r2, [r3, #0]
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f7fb faa7 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017aea:	4603      	mov	r3, r0
 8017aec:	681a      	ldr	r2, [r3, #0]
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	605a      	str	r2, [r3, #4]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	4618      	mov	r0, r3
 8017af6:	3710      	adds	r7, #16
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}

08017afc <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE14_M_create_nodeIJRKS6_EEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b084      	sub	sp, #16
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 fa4e 	bl	8017fa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>
 8017b0c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017b0e:	6838      	ldr	r0, [r7, #0]
 8017b10:	f7fd ff55 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017b14:	4603      	mov	r3, r0
 8017b16:	461a      	mov	r2, r3
 8017b18:	68f9      	ldr	r1, [r7, #12]
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f000 fa55 	bl	8017fca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8017b20:	68fb      	ldr	r3, [r7, #12]
	}
 8017b22:	4618      	mov	r0, r3
 8017b24:	3710      	adds	r7, #16
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}

08017b2a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017b2a:	b580      	push	{r7, lr}
 8017b2c:	b082      	sub	sp, #8
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	f000 fa69 	bl	801800a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3708      	adds	r7, #8
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}

08017b42 <_ZSt10destroy_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEvPT_>:
    destroy_at(_Tp* __location)
 8017b42:	b480      	push	{r7}
 8017b44:	b083      	sub	sp, #12
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	6078      	str	r0, [r7, #4]
    }
 8017b4a:	bf00      	nop
 8017b4c:	370c      	adds	r7, #12
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b54:	4770      	bx	lr

08017b56 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8017b56:	b580      	push	{r7, lr}
 8017b58:	b084      	sub	sp, #16
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017b5e:	6878      	ldr	r0, [r7, #4]
 8017b60:	f000 fa70 	bl	8018044 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 8017b64:	4602      	mov	r2, r0
 8017b66:	f107 030c 	add.w	r3, r7, #12
 8017b6a:	4611      	mov	r1, r2
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f7fe f8f8 	bl	8015d62 <_ZNKSt10_Select1stISt4pairIK3Pin12TimerChannelEEclERKS4_>
 8017b72:	4603      	mov	r3, r0
      }
 8017b74:	4618      	mov	r0, r3
 8017b76:	3710      	adds	r7, #16
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	bd80      	pop	{r7, pc}

08017b7c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b084      	sub	sp, #16
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	68da      	ldr	r2, [r3, #12]
 8017b88:	f107 030c 	add.w	r3, r7, #12
 8017b8c:	4611      	mov	r1, r2
 8017b8e:	4618      	mov	r0, r3
 8017b90:	f7fd ffb5 	bl	8015afe <_ZNSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	4618      	mov	r0, r3
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}

08017b9e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3Pin12TimerChannelEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017b9e:	b480      	push	{r7}
 8017ba0:	b083      	sub	sp, #12
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
 8017ba6:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681a      	ldr	r2, [r3, #0]
 8017bac:	683b      	ldr	r3, [r7, #0]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	429a      	cmp	r2, r3
 8017bb2:	bf0c      	ite	eq
 8017bb4:	2301      	moveq	r3, #1
 8017bb6:	2300      	movne	r3, #0
 8017bb8:	b2db      	uxtb	r3, r3
 8017bba:	4618      	mov	r0, r3
 8017bbc:	370c      	adds	r7, #12
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc4:	4770      	bx	lr

08017bc6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3Pin12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017bc6:	b580      	push	{r7, lr}
 8017bc8:	b084      	sub	sp, #16
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	60f8      	str	r0, [r7, #12]
 8017bce:	60b9      	str	r1, [r7, #8]
 8017bd0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017bd2:	68b8      	ldr	r0, [r7, #8]
 8017bd4:	f000 fa44 	bl	8018060 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	681a      	ldr	r2, [r3, #0]
 8017bdc:	68fb      	ldr	r3, [r7, #12]
 8017bde:	601a      	str	r2, [r3, #0]
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7fb fa29 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017be6:	4603      	mov	r3, r0
 8017be8:	681a      	ldr	r2, [r3, #0]
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	605a      	str	r2, [r3, #4]
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	3710      	adds	r7, #16
 8017bf4:	46bd      	mov	sp, r7
 8017bf6:	bd80      	pop	{r7, pc}

08017bf8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b084      	sub	sp, #16
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017c02:	6878      	ldr	r0, [r7, #4]
 8017c04:	f000 fa37 	bl	8018076 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>
 8017c08:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017c0a:	6838      	ldr	r0, [r7, #0]
 8017c0c:	f7fe f8b5 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017c10:	4603      	mov	r3, r0
 8017c12:	461a      	mov	r2, r3
 8017c14:	68f9      	ldr	r1, [r7, #12]
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f000 fa3e 	bl	8018098 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8017c1c:	68fb      	ldr	r3, [r7, #12]
	}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3710      	adds	r7, #16
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}

08017c26 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017c26:	b580      	push	{r7, lr}
 8017c28:	b082      	sub	sp, #8
 8017c2a:	af00      	add	r7, sp, #0
 8017c2c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f000 fa52 	bl	80180d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 8017c34:	4603      	mov	r3, r0
 8017c36:	4618      	mov	r0, r3
 8017c38:	3708      	adds	r7, #8
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}

08017c3e <_ZSt10destroy_atISt4pairIK3Pin12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 8017c3e:	b480      	push	{r7}
 8017c40:	b083      	sub	sp, #12
 8017c42:	af00      	add	r7, sp, #0
 8017c44:	6078      	str	r0, [r7, #4]
    }
 8017c46:	bf00      	nop
 8017c48:	370c      	adds	r7, #12
 8017c4a:	46bd      	mov	sp, r7
 8017c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c50:	4770      	bx	lr

08017c52 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8017c52:	b580      	push	{r7, lr}
 8017c54:	b084      	sub	sp, #16
 8017c56:	af00      	add	r7, sp, #0
 8017c58:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f000 fa56 	bl	801810c <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8017c60:	4602      	mov	r2, r0
 8017c62:	f107 030c 	add.w	r3, r7, #12
 8017c66:	4611      	mov	r1, r2
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fe fa57 	bl	801611c <_ZNKSt10_Select1stISt4pairIKS0_I3PinS1_E12TimerChannelEEclERKS5_>
 8017c6e:	4603      	mov	r3, r0
      }
 8017c70:	4618      	mov	r0, r3
 8017c72:	3710      	adds	r7, #16
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bd80      	pop	{r7, pc}

08017c78 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b084      	sub	sp, #16
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	68da      	ldr	r2, [r3, #12]
 8017c84:	f107 030c 	add.w	r3, r7, #12
 8017c88:	4611      	mov	r1, r2
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f7fe f914 	bl	8015eb8 <_ZNSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEEC1EPSt18_Rb_tree_node_base>
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	4618      	mov	r0, r3
 8017c94:	3710      	adds	r7, #16
 8017c96:	46bd      	mov	sp, r7
 8017c98:	bd80      	pop	{r7, pc}

08017c9a <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKS0_I3PinS1_E12TimerChannelEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017c9a:	b480      	push	{r7}
 8017c9c:	b083      	sub	sp, #12
 8017c9e:	af00      	add	r7, sp, #0
 8017ca0:	6078      	str	r0, [r7, #4]
 8017ca2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	683b      	ldr	r3, [r7, #0]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	429a      	cmp	r2, r3
 8017cae:	bf0c      	ite	eq
 8017cb0:	2301      	moveq	r3, #1
 8017cb2:	2300      	movne	r3, #0
 8017cb4:	b2db      	uxtb	r3, r3
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	370c      	adds	r7, #12
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc0:	4770      	bx	lr

08017cc2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKS_I3PinS5_E12TimerChannelEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017cc2:	b580      	push	{r7, lr}
 8017cc4:	b084      	sub	sp, #16
 8017cc6:	af00      	add	r7, sp, #0
 8017cc8:	60f8      	str	r0, [r7, #12]
 8017cca:	60b9      	str	r1, [r7, #8]
 8017ccc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017cce:	68b8      	ldr	r0, [r7, #8]
 8017cd0:	f000 fa2a 	bl	8018128 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	601a      	str	r2, [r3, #0]
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f7fb f9ab 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017ce2:	4603      	mov	r3, r0
 8017ce4:	681a      	ldr	r2, [r3, #0]
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	605a      	str	r2, [r3, #4]
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	4618      	mov	r0, r3
 8017cee:	3710      	adds	r7, #16
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}

08017cf4 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 fa1d 	bl	801813e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>
 8017d04:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017d06:	6838      	ldr	r0, [r7, #0]
 8017d08:	f7fe fa14 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	461a      	mov	r2, r3
 8017d10:	68f9      	ldr	r1, [r7, #12]
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f000 fa24 	bl	8018160 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8017d18:	68fb      	ldr	r3, [r7, #12]
	}
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	3710      	adds	r7, #16
 8017d1e:	46bd      	mov	sp, r7
 8017d20:	bd80      	pop	{r7, pc}

08017d22 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017d22:	b580      	push	{r7, lr}
 8017d24:	b082      	sub	sp, #8
 8017d26:	af00      	add	r7, sp, #0
 8017d28:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f000 fa38 	bl	80181a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 8017d30:	4603      	mov	r3, r0
 8017d32:	4618      	mov	r0, r3
 8017d34:	3708      	adds	r7, #8
 8017d36:	46bd      	mov	sp, r7
 8017d38:	bd80      	pop	{r7, pc}

08017d3a <_ZSt10destroy_atISt4pairIKS0_I3PinS1_E12TimerChannelEEvPT_>:
    destroy_at(_Tp* __location)
 8017d3a:	b480      	push	{r7}
 8017d3c:	b083      	sub	sp, #12
 8017d3e:	af00      	add	r7, sp, #0
 8017d40:	6078      	str	r0, [r7, #4]
    }
 8017d42:	bf00      	nop
 8017d44:	370c      	adds	r7, #12
 8017d46:	46bd      	mov	sp, r7
 8017d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d4c:	4770      	bx	lr

08017d4e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 8017d4e:	b580      	push	{r7, lr}
 8017d50:	b084      	sub	sp, #16
 8017d52:	af00      	add	r7, sp, #0
 8017d54:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	f000 fa3f 	bl	80181da <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8017d5c:	4602      	mov	r2, r0
 8017d5e:	f107 030c 	add.w	r3, r7, #12
 8017d62:	4611      	mov	r1, r2
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7fe fbb6 	bl	80164d6 <_ZNKSt10_Select1stISt4pairIK3PinN12InputCapture8InstanceEEEclERKS5_>
 8017d6a:	4603      	mov	r3, r0
      }
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	3710      	adds	r7, #16
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}

08017d74 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b084      	sub	sp, #16
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	68da      	ldr	r2, [r3, #12]
 8017d80:	f107 030c 	add.w	r3, r7, #12
 8017d84:	4611      	mov	r1, r2
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fe fa73 	bl	8016272 <_ZNSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3710      	adds	r7, #16
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}

08017d96 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK3PinN12InputCapture8InstanceEEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017d96:	b480      	push	{r7}
 8017d98:	b083      	sub	sp, #12
 8017d9a:	af00      	add	r7, sp, #0
 8017d9c:	6078      	str	r0, [r7, #4]
 8017d9e:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681a      	ldr	r2, [r3, #0]
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	bf0c      	ite	eq
 8017dac:	2301      	moveq	r3, #1
 8017dae:	2300      	movne	r3, #0
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	4618      	mov	r0, r3
 8017db4:	370c      	adds	r7, #12
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr

08017dbe <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK3PinN12InputCapture8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017dbe:	b580      	push	{r7, lr}
 8017dc0:	b084      	sub	sp, #16
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	60f8      	str	r0, [r7, #12]
 8017dc6:	60b9      	str	r1, [r7, #8]
 8017dc8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017dca:	68b8      	ldr	r0, [r7, #8]
 8017dcc:	f000 fa13 	bl	80181f6 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>
 8017dd0:	4603      	mov	r3, r0
 8017dd2:	681a      	ldr	r2, [r3, #0]
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	601a      	str	r2, [r3, #0]
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f7fb f92d 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017dde:	4603      	mov	r3, r0
 8017de0:	681a      	ldr	r2, [r3, #0]
 8017de2:	68fb      	ldr	r3, [r7, #12]
 8017de4:	605a      	str	r2, [r3, #4]
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	4618      	mov	r0, r3
 8017dea:	3710      	adds	r7, #16
 8017dec:	46bd      	mov	sp, r7
 8017dee:	bd80      	pop	{r7, pc}

08017df0 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017df0:	b580      	push	{r7, lr}
 8017df2:	b084      	sub	sp, #16
 8017df4:	af00      	add	r7, sp, #0
 8017df6:	6078      	str	r0, [r7, #4]
 8017df8:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017dfa:	6878      	ldr	r0, [r7, #4]
 8017dfc:	f000 fa06 	bl	801820c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8017e00:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017e02:	6838      	ldr	r0, [r7, #0]
 8017e04:	f7fe fb73 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017e08:	4603      	mov	r3, r0
 8017e0a:	461a      	mov	r2, r3
 8017e0c:	68f9      	ldr	r1, [r7, #12]
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f000 fa0d 	bl	801822e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8017e14:	68fb      	ldr	r3, [r7, #12]
	}
 8017e16:	4618      	mov	r0, r3
 8017e18:	3710      	adds	r7, #16
 8017e1a:	46bd      	mov	sp, r7
 8017e1c:	bd80      	pop	{r7, pc}

08017e1e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017e1e:	b580      	push	{r7, lr}
 8017e20:	b082      	sub	sp, #8
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f000 fa21 	bl	801826e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3708      	adds	r7, #8
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}

08017e36 <_ZSt10destroy_atISt4pairIK3PinN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017e36:	b480      	push	{r7}
 8017e38:	b083      	sub	sp, #12
 8017e3a:	af00      	add	r7, sp, #0
 8017e3c:	6078      	str	r0, [r7, #4]
    }
 8017e3e:	bf00      	nop
 8017e40:	370c      	adds	r7, #12
 8017e42:	46bd      	mov	sp, r7
 8017e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e48:	4770      	bx	lr

08017e4a <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE14_M_create_nodeIJRKS5_EEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017e4a:	b580      	push	{r7, lr}
 8017e4c:	b084      	sub	sp, #16
 8017e4e:	af00      	add	r7, sp, #0
 8017e50:	6078      	str	r0, [r7, #4]
 8017e52:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017e54:	6878      	ldr	r0, [r7, #4]
 8017e56:	f7fa fdb7 	bl	80129c8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>
 8017e5a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017e5c:	6838      	ldr	r0, [r7, #0]
 8017e5e:	f7fe fbe5 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8017e62:	4603      	mov	r3, r0
 8017e64:	461a      	mov	r2, r3
 8017e66:	68f9      	ldr	r1, [r7, #12]
 8017e68:	6878      	ldr	r0, [r7, #4]
 8017e6a:	f000 fa1d 	bl	80182a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3710      	adds	r7, #16
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}

08017e78 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b084      	sub	sp, #16
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f000 fa31 	bl	80182e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8017e86:	4602      	mov	r2, r0
 8017e88:	f107 030c 	add.w	r3, r7, #12
 8017e8c:	4611      	mov	r1, r2
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fe fde7 	bl	8016a62 <_ZNKSt10_Select1stISt4pairIKtN17ExternalInterrupt8InstanceEEEclERKS4_>
 8017e94:	4603      	mov	r3, r0
      }
 8017e96:	4618      	mov	r0, r3
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}

08017e9e <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017e9e:	b580      	push	{r7, lr}
 8017ea0:	b084      	sub	sp, #16
 8017ea2:	af00      	add	r7, sp, #0
 8017ea4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	68da      	ldr	r2, [r3, #12]
 8017eaa:	f107 030c 	add.w	r3, r7, #12
 8017eae:	4611      	mov	r1, r2
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7fe fca4 	bl	80167fe <_ZNSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEEC1EPSt18_Rb_tree_node_base>
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	4618      	mov	r0, r3
 8017eba:	3710      	adds	r7, #16
 8017ebc:	46bd      	mov	sp, r7
 8017ebe:	bd80      	pop	{r7, pc}

08017ec0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtN17ExternalInterrupt8InstanceEEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8017ec0:	b480      	push	{r7}
 8017ec2:	b083      	sub	sp, #12
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	683b      	ldr	r3, [r7, #0]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	bf0c      	ite	eq
 8017ed6:	2301      	moveq	r3, #1
 8017ed8:	2300      	movne	r3, #0
 8017eda:	b2db      	uxtb	r3, r3
 8017edc:	4618      	mov	r0, r3
 8017ede:	370c      	adds	r7, #12
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee6:	4770      	bx	lr

08017ee8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtN17ExternalInterrupt8InstanceEEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b084      	sub	sp, #16
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	60f8      	str	r0, [r7, #12]
 8017ef0:	60b9      	str	r1, [r7, #8]
 8017ef2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8017ef4:	68b8      	ldr	r0, [r7, #8]
 8017ef6:	f000 fa05 	bl	8018304 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017efa:	4603      	mov	r3, r0
 8017efc:	681a      	ldr	r2, [r3, #0]
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	601a      	str	r2, [r3, #0]
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7fb f898 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	681a      	ldr	r2, [r3, #0]
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	605a      	str	r2, [r3, #4]
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	4618      	mov	r0, r3
 8017f14:	3710      	adds	r7, #16
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}

08017f1a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKS4_EEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8017f1a:	b580      	push	{r7, lr}
 8017f1c:	b084      	sub	sp, #16
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	6078      	str	r0, [r7, #4]
 8017f22:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f000 f9f8 	bl	801831a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8017f2a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8017f2c:	6838      	ldr	r0, [r7, #0]
 8017f2e:	f7fe fda4 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8017f32:	4603      	mov	r3, r0
 8017f34:	461a      	mov	r2, r3
 8017f36:	68f9      	ldr	r1, [r7, #12]
 8017f38:	6878      	ldr	r0, [r7, #4]
 8017f3a:	f000 f9ff 	bl	801833c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8017f3e:	68fb      	ldr	r3, [r7, #12]
	}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3710      	adds	r7, #16
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}

08017f48 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b082      	sub	sp, #8
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8017f50:	6878      	ldr	r0, [r7, #4]
 8017f52:	f000 fa13 	bl	801837c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 8017f56:	4603      	mov	r3, r0
 8017f58:	4618      	mov	r0, r3
 8017f5a:	3708      	adds	r7, #8
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}

08017f60 <_ZSt10destroy_atISt4pairIKtN17ExternalInterrupt8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
	__location->~_Tp();
 8017f68:	6878      	ldr	r0, [r7, #4]
 8017f6a:	f7fb fedd 	bl	8013d28 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
    }
 8017f6e:	bf00      	nop
 8017f70:	3708      	adds	r7, #8
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd80      	pop	{r7, pc}

08017f76 <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>:
      _M_valptr() const
 8017f76:	b580      	push	{r7, lr}
 8017f78:	b082      	sub	sp, #8
 8017f7a:	af00      	add	r7, sp, #0
 8017f7c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	3310      	adds	r3, #16
 8017f82:	4618      	mov	r0, r3
 8017f84:	f000 fa17 	bl	80183b6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3708      	adds	r7, #8
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}

08017f92 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017f92:	b480      	push	{r7}
 8017f94:	b083      	sub	sp, #12
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	370c      	adds	r7, #12
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fa6:	4770      	bx	lr

08017fa8 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	f7fe ff28 	bl	8016e06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	2101      	movs	r1, #1
 8017fba:	4618      	mov	r0, r3
 8017fbc:	f000 fa07 	bl	80183ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>
 8017fc0:	4603      	mov	r3, r0
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	3708      	adds	r7, #8
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	bd80      	pop	{r7, pc}

08017fca <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE17_M_construct_nodeIJRKS6_EEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8017fca:	b5b0      	push	{r4, r5, r7, lr}
 8017fcc:	b084      	sub	sp, #16
 8017fce:	af00      	add	r7, sp, #0
 8017fd0:	60f8      	str	r0, [r7, #12]
 8017fd2:	60b9      	str	r1, [r7, #8]
 8017fd4:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8017fd6:	68bb      	ldr	r3, [r7, #8]
 8017fd8:	4619      	mov	r1, r3
 8017fda:	2024      	movs	r0, #36	; 0x24
 8017fdc:	f7f6 fe02 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8017fe0:	68f8      	ldr	r0, [r7, #12]
 8017fe2:	f7fe ff10 	bl	8016e06 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_P17TIM_HandleTypeDefESt10_Select1stIS6_ESt4lessIS2_ESaIS6_EE21_M_get_Node_allocatorEv>
 8017fe6:	4604      	mov	r4, r0
 8017fe8:	68b8      	ldr	r0, [r7, #8]
 8017fea:	f7fe ff17 	bl	8016e1c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEE9_M_valptrEv>
 8017fee:	4605      	mov	r5, r0
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f7fd fce4 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	461a      	mov	r2, r3
 8017ffa:	4629      	mov	r1, r5
 8017ffc:	4620      	mov	r0, r4
 8017ffe:	f000 fa22 	bl	8018446 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>
	}
 8018002:	bf00      	nop
 8018004:	3710      	adds	r7, #16
 8018006:	46bd      	mov	sp, r7
 8018008:	bdb0      	pop	{r4, r5, r7, pc}

0801800a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() noexcept
 801800a:	b480      	push	{r7}
 801800c:	b083      	sub	sp, #12
 801800e:	af00      	add	r7, sp, #0
 8018010:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	4618      	mov	r0, r3
 8018016:	370c      	adds	r7, #12
 8018018:	46bd      	mov	sp, r7
 801801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801e:	4770      	bx	lr

08018020 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8018020:	b580      	push	{r7, lr}
 8018022:	b084      	sub	sp, #16
 8018024:	af00      	add	r7, sp, #0
 8018026:	60f8      	str	r0, [r7, #12]
 8018028:	60b9      	str	r1, [r7, #8]
 801802a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801802c:	687a      	ldr	r2, [r7, #4]
 801802e:	4613      	mov	r3, r2
 8018030:	00db      	lsls	r3, r3, #3
 8018032:	4413      	add	r3, r2
 8018034:	009b      	lsls	r3, r3, #2
 8018036:	4619      	mov	r1, r3
 8018038:	68b8      	ldr	r0, [r7, #8]
 801803a:	f002 f923 	bl	801a284 <_ZdlPvj>
      }
 801803e:	3710      	adds	r7, #16
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}

08018044 <_ZNKSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	3310      	adds	r3, #16
 8018050:	4618      	mov	r0, r3
 8018052:	f000 fa0a 	bl	801846a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>
 8018056:	4603      	mov	r3, r0
 8018058:	4618      	mov	r0, r3
 801805a:	3708      	adds	r7, #8
 801805c:	46bd      	mov	sp, r7
 801805e:	bd80      	pop	{r7, pc}

08018060 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	4618      	mov	r0, r3
 801806c:	370c      	adds	r7, #12
 801806e:	46bd      	mov	sp, r7
 8018070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018074:	4770      	bx	lr

08018076 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8018076:	b580      	push	{r7, lr}
 8018078:	b082      	sub	sp, #8
 801807a:	af00      	add	r7, sp, #0
 801807c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f7ff f819 	bl	80170b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 8018084:	4603      	mov	r3, r0
 8018086:	2101      	movs	r1, #1
 8018088:	4618      	mov	r0, r3
 801808a:	f000 f9fa 	bl	8018482 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>
 801808e:	4603      	mov	r3, r0
 8018090:	4618      	mov	r0, r3
 8018092:	3708      	adds	r7, #8
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8018098:	b5b0      	push	{r4, r5, r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80180a4:	68bb      	ldr	r3, [r7, #8]
 80180a6:	4619      	mov	r1, r3
 80180a8:	2020      	movs	r0, #32
 80180aa:	f7f6 fd9b 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80180ae:	68f8      	ldr	r0, [r7, #12]
 80180b0:	f7ff f801 	bl	80170b6 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_12TimerChannelESt10_Select1stIS4_ESt4lessIS0_ESaIS4_EE21_M_get_Node_allocatorEv>
 80180b4:	4604      	mov	r4, r0
 80180b6:	68b8      	ldr	r0, [r7, #8]
 80180b8:	f7ff f808 	bl	80170cc <_ZNSt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEE9_M_valptrEv>
 80180bc:	4605      	mov	r5, r0
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f7fd fe5b 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80180c4:	4603      	mov	r3, r0
 80180c6:	461a      	mov	r2, r3
 80180c8:	4629      	mov	r1, r5
 80180ca:	4620      	mov	r0, r4
 80180cc:	f000 fa12 	bl	80184f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 80180d0:	bf00      	nop
 80180d2:	3710      	adds	r7, #16
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bdb0      	pop	{r4, r5, r7, pc}

080180d8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	4618      	mov	r0, r3
 80180e4:	370c      	adds	r7, #12
 80180e6:	46bd      	mov	sp, r7
 80180e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ec:	4770      	bx	lr

080180ee <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 80180ee:	b580      	push	{r7, lr}
 80180f0:	b084      	sub	sp, #16
 80180f2:	af00      	add	r7, sp, #0
 80180f4:	60f8      	str	r0, [r7, #12]
 80180f6:	60b9      	str	r1, [r7, #8]
 80180f8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	015b      	lsls	r3, r3, #5
 80180fe:	4619      	mov	r1, r3
 8018100:	68b8      	ldr	r0, [r7, #8]
 8018102:	f002 f8bf 	bl	801a284 <_ZdlPvj>
      }
 8018106:	3710      	adds	r7, #16
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}

0801810c <_ZNKSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>:
      _M_valptr() const
 801810c:	b580      	push	{r7, lr}
 801810e:	b082      	sub	sp, #8
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	3310      	adds	r3, #16
 8018118:	4618      	mov	r0, r3
 801811a:	f000 f9fd 	bl	8018518 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>
 801811e:	4603      	mov	r3, r0
 8018120:	4618      	mov	r0, r3
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018128:	b480      	push	{r7}
 801812a:	b083      	sub	sp, #12
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	4618      	mov	r0, r3
 8018134:	370c      	adds	r7, #12
 8018136:	46bd      	mov	sp, r7
 8018138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801813c:	4770      	bx	lr

0801813e <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 801813e:	b580      	push	{r7, lr}
 8018140:	b082      	sub	sp, #8
 8018142:	af00      	add	r7, sp, #0
 8018144:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f7ff f90d 	bl	8017366 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 801814c:	4603      	mov	r3, r0
 801814e:	2101      	movs	r1, #1
 8018150:	4618      	mov	r0, r3
 8018152:	f000 f9ed 	bl	8018530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>
 8018156:	4603      	mov	r3, r0
 8018158:	4618      	mov	r0, r3
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8018160:	b5b0      	push	{r4, r5, r7, lr}
 8018162:	b084      	sub	sp, #16
 8018164:	af00      	add	r7, sp, #0
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	4619      	mov	r1, r3
 8018170:	2028      	movs	r0, #40	; 0x28
 8018172:	f7f6 fd37 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8018176:	68f8      	ldr	r0, [r7, #12]
 8018178:	f7ff f8f5 	bl	8017366 <_ZNSt8_Rb_treeISt4pairI3PinS1_ES0_IKS2_12TimerChannelESt10_Select1stIS5_ESt4lessIS2_ESaIS5_EE21_M_get_Node_allocatorEv>
 801817c:	4604      	mov	r4, r0
 801817e:	68b8      	ldr	r0, [r7, #8]
 8018180:	f7ff f8fc 	bl	801737c <_ZNSt13_Rb_tree_nodeISt4pairIKS0_I3PinS1_E12TimerChannelEE9_M_valptrEv>
 8018184:	4605      	mov	r5, r0
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f7fd ffd4 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 801818c:	4603      	mov	r3, r0
 801818e:	461a      	mov	r2, r3
 8018190:	4629      	mov	r1, r5
 8018192:	4620      	mov	r0, r4
 8018194:	f000 fa0a 	bl	80185ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8018198:	bf00      	nop
 801819a:	3710      	adds	r7, #16
 801819c:	46bd      	mov	sp, r7
 801819e:	bdb0      	pop	{r4, r5, r7, pc}

080181a0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() noexcept
 80181a0:	b480      	push	{r7}
 80181a2:	b083      	sub	sp, #12
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	4618      	mov	r0, r3
 80181ac:	370c      	adds	r7, #12
 80181ae:	46bd      	mov	sp, r7
 80181b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b4:	4770      	bx	lr

080181b6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 80181b6:	b580      	push	{r7, lr}
 80181b8:	b084      	sub	sp, #16
 80181ba:	af00      	add	r7, sp, #0
 80181bc:	60f8      	str	r0, [r7, #12]
 80181be:	60b9      	str	r1, [r7, #8]
 80181c0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80181c2:	687a      	ldr	r2, [r7, #4]
 80181c4:	4613      	mov	r3, r2
 80181c6:	009b      	lsls	r3, r3, #2
 80181c8:	4413      	add	r3, r2
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	4619      	mov	r1, r3
 80181ce:	68b8      	ldr	r0, [r7, #8]
 80181d0:	f002 f858 	bl	801a284 <_ZdlPvj>
      }
 80181d4:	3710      	adds	r7, #16
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <_ZNKSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 80181da:	b580      	push	{r7, lr}
 80181dc:	b082      	sub	sp, #8
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	3310      	adds	r3, #16
 80181e6:	4618      	mov	r0, r3
 80181e8:	f000 f9f2 	bl	80185d0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>
 80181ec:	4603      	mov	r3, r0
 80181ee:	4618      	mov	r0, r3
 80181f0:	3708      	adds	r7, #8
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}

080181f6 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80181f6:	b480      	push	{r7}
 80181f8:	b083      	sub	sp, #12
 80181fa:	af00      	add	r7, sp, #0
 80181fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	4618      	mov	r0, r3
 8018202:	370c      	adds	r7, #12
 8018204:	46bd      	mov	sp, r7
 8018206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820a:	4770      	bx	lr

0801820c <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 801820c:	b580      	push	{r7, lr}
 801820e:	b082      	sub	sp, #8
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8018214:	6878      	ldr	r0, [r7, #4]
 8018216:	f7ff f9fe 	bl	8017616 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 801821a:	4603      	mov	r3, r0
 801821c:	2101      	movs	r1, #1
 801821e:	4618      	mov	r0, r3
 8018220:	f000 f9e2 	bl	80185e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>
 8018224:	4603      	mov	r3, r0
 8018226:	4618      	mov	r0, r3
 8018228:	3708      	adds	r7, #8
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}

0801822e <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801822e:	b5b0      	push	{r4, r5, r7, lr}
 8018230:	b084      	sub	sp, #16
 8018232:	af00      	add	r7, sp, #0
 8018234:	60f8      	str	r0, [r7, #12]
 8018236:	60b9      	str	r1, [r7, #8]
 8018238:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	4619      	mov	r1, r3
 801823e:	2038      	movs	r0, #56	; 0x38
 8018240:	f7f6 fcd0 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8018244:	68f8      	ldr	r0, [r7, #12]
 8018246:	f7ff f9e6 	bl	8017616 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N12InputCapture8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 801824a:	4604      	mov	r4, r0
 801824c:	68b8      	ldr	r0, [r7, #8]
 801824e:	f7ff f9ed 	bl	801762c <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEE9_M_valptrEv>
 8018252:	4605      	mov	r5, r0
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f7fe f94a 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801825a:	4603      	mov	r3, r0
 801825c:	461a      	mov	r2, r3
 801825e:	4629      	mov	r1, r5
 8018260:	4620      	mov	r0, r4
 8018262:	f000 fa01 	bl	8018668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 8018266:	bf00      	nop
 8018268:	3710      	adds	r7, #16
 801826a:	46bd      	mov	sp, r7
 801826c:	bdb0      	pop	{r4, r5, r7, pc}

0801826e <_ZN9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801826e:	b480      	push	{r7}
 8018270:	b083      	sub	sp, #12
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	4618      	mov	r0, r3
 801827a:	370c      	adds	r7, #12
 801827c:	46bd      	mov	sp, r7
 801827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018282:	4770      	bx	lr

08018284 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8018284:	b580      	push	{r7, lr}
 8018286:	b084      	sub	sp, #16
 8018288:	af00      	add	r7, sp, #0
 801828a:	60f8      	str	r0, [r7, #12]
 801828c:	60b9      	str	r1, [r7, #8]
 801828e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8018290:	687a      	ldr	r2, [r7, #4]
 8018292:	4613      	mov	r3, r2
 8018294:	00db      	lsls	r3, r3, #3
 8018296:	1a9b      	subs	r3, r3, r2
 8018298:	00db      	lsls	r3, r3, #3
 801829a:	4619      	mov	r1, r3
 801829c:	68b8      	ldr	r0, [r7, #8]
 801829e:	f001 fff1 	bl	801a284 <_ZdlPvj>
      }
 80182a2:	3710      	adds	r7, #16
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE17_M_construct_nodeIJRKS5_EEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80182a8:	b5b0      	push	{r4, r5, r7, lr}
 80182aa:	b084      	sub	sp, #16
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	60f8      	str	r0, [r7, #12]
 80182b0:	60b9      	str	r1, [r7, #8]
 80182b2:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	4619      	mov	r1, r3
 80182b8:	2024      	movs	r0, #36	; 0x24
 80182ba:	f7f6 fc93 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80182be:	68f8      	ldr	r0, [r7, #12]
 80182c0:	f7fa ff12 	bl	80130e8 <_ZNSt8_Rb_treeI3PinSt4pairIKS0_N3ADC8InstanceEESt10_Select1stIS5_ESt4lessIS0_ESaIS5_EE21_M_get_Node_allocatorEv>
 80182c4:	4604      	mov	r4, r0
 80182c6:	68b8      	ldr	r0, [r7, #8]
 80182c8:	f7f9 fd06 	bl	8011cd8 <_ZNSt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEE9_M_valptrEv>
 80182cc:	4605      	mov	r5, r0
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	f7fe f9ac 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80182d4:	4603      	mov	r3, r0
 80182d6:	461a      	mov	r2, r3
 80182d8:	4629      	mov	r1, r5
 80182da:	4620      	mov	r0, r4
 80182dc:	f000 f9ef 	bl	80186be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>
	}
 80182e0:	bf00      	nop
 80182e2:	3710      	adds	r7, #16
 80182e4:	46bd      	mov	sp, r7
 80182e6:	bdb0      	pop	{r4, r5, r7, pc}

080182e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>:
      _M_valptr() const
 80182e8:	b580      	push	{r7, lr}
 80182ea:	b082      	sub	sp, #8
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	3310      	adds	r3, #16
 80182f4:	4618      	mov	r0, r3
 80182f6:	f000 f9f4 	bl	80186e2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>
 80182fa:	4603      	mov	r3, r0
 80182fc:	4618      	mov	r0, r3
 80182fe:	3708      	adds	r7, #8
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}

08018304 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8018304:	b480      	push	{r7}
 8018306:	b083      	sub	sp, #12
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	4618      	mov	r0, r3
 8018310:	370c      	adds	r7, #12
 8018312:	46bd      	mov	sp, r7
 8018314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018318:	4770      	bx	lr

0801831a <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 801831a:	b580      	push	{r7, lr}
 801831c:	b082      	sub	sp, #8
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f7ff fb25 	bl	8017972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8018328:	4603      	mov	r3, r0
 801832a:	2101      	movs	r1, #1
 801832c:	4618      	mov	r0, r3
 801832e:	f000 f9e4 	bl	80186fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>
 8018332:	4603      	mov	r3, r0
 8018334:	4618      	mov	r0, r3
 8018336:	3708      	adds	r7, #8
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKS4_EEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801833c:	b5b0      	push	{r4, r5, r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
 8018342:	60f8      	str	r0, [r7, #12]
 8018344:	60b9      	str	r1, [r7, #8]
 8018346:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8018348:	68bb      	ldr	r3, [r7, #8]
 801834a:	4619      	mov	r1, r3
 801834c:	2028      	movs	r0, #40	; 0x28
 801834e:	f7f6 fc49 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8018352:	68f8      	ldr	r0, [r7, #12]
 8018354:	f7ff fb0d 	bl	8017972 <_ZNSt8_Rb_treeItSt4pairIKtN17ExternalInterrupt8InstanceEESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8018358:	4604      	mov	r4, r0
 801835a:	68b8      	ldr	r0, [r7, #8]
 801835c:	f7ff fb14 	bl	8017988 <_ZNSt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEE9_M_valptrEv>
 8018360:	4605      	mov	r5, r0
 8018362:	6878      	ldr	r0, [r7, #4]
 8018364:	f7fe fb89 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8018368:	4603      	mov	r3, r0
 801836a:	461a      	mov	r2, r3
 801836c:	4629      	mov	r1, r5
 801836e:	4620      	mov	r0, r4
 8018370:	f000 fa28 	bl	80187c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>
	}
 8018374:	bf00      	nop
 8018376:	3710      	adds	r7, #16
 8018378:	46bd      	mov	sp, r7
 801837a:	bdb0      	pop	{r4, r5, r7, pc}

0801837c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 801837c:	b480      	push	{r7}
 801837e:	b083      	sub	sp, #12
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	4618      	mov	r0, r3
 8018388:	370c      	adds	r7, #12
 801838a:	46bd      	mov	sp, r7
 801838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018390:	4770      	bx	lr

08018392 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8018392:	b580      	push	{r7, lr}
 8018394:	b084      	sub	sp, #16
 8018396:	af00      	add	r7, sp, #0
 8018398:	60f8      	str	r0, [r7, #12]
 801839a:	60b9      	str	r1, [r7, #8]
 801839c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801839e:	687a      	ldr	r2, [r7, #4]
 80183a0:	4613      	mov	r3, r2
 80183a2:	009b      	lsls	r3, r3, #2
 80183a4:	4413      	add	r3, r2
 80183a6:	00db      	lsls	r3, r3, #3
 80183a8:	4619      	mov	r1, r3
 80183aa:	68b8      	ldr	r0, [r7, #8]
 80183ac:	f001 ff6a 	bl	801a284 <_ZdlPvj>
      }
 80183b0:	3710      	adds	r7, #16
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}

080183b6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80183b6:	b580      	push	{r7, lr}
 80183b8:	b082      	sub	sp, #8
 80183ba:	af00      	add	r7, sp, #0
 80183bc:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80183be:	6878      	ldr	r0, [r7, #4]
 80183c0:	f000 fa12 	bl	80187e8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>
 80183c4:	4603      	mov	r3, r0
 80183c6:	4618      	mov	r0, r3
 80183c8:	3708      	adds	r7, #8
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}

080183ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 80183ce:	b580      	push	{r7, lr}
 80183d0:	b084      	sub	sp, #16
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
 80183d6:	6039      	str	r1, [r7, #0]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	60fb      	str	r3, [r7, #12]
 80183dc:	683b      	ldr	r3, [r7, #0]
 80183de:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80183e0:	f7f6 fbf8 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80183e4:	4603      	mov	r3, r0
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d009      	beq.n	80183fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80183ea:	68ba      	ldr	r2, [r7, #8]
 80183ec:	4613      	mov	r3, r2
 80183ee:	00db      	lsls	r3, r3, #3
 80183f0:	4413      	add	r3, r2
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	4618      	mov	r0, r3
 80183f6:	f001 ff47 	bl	801a288 <_Znwj>
 80183fa:	4603      	mov	r3, r0
 80183fc:	e006      	b.n	801840c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80183fe:	2200      	movs	r2, #0
 8018400:	68b9      	ldr	r1, [r7, #8]
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f000 fa49 	bl	801889a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>
 8018408:	4603      	mov	r3, r0
 801840a:	bf00      	nop
      { return __a.allocate(__n); }
 801840c:	4618      	mov	r0, r3
 801840e:	3710      	adds	r7, #16
 8018410:	46bd      	mov	sp, r7
 8018412:	bd80      	pop	{r7, pc}

08018414 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8018414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018416:	b083      	sub	sp, #12
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801841e:	6838      	ldr	r0, [r7, #0]
 8018420:	f7fd facd 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8018424:	4605      	mov	r5, r0
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	4619      	mov	r1, r3
 801842a:	2014      	movs	r0, #20
 801842c:	f7f6 fbda 	bl	800ebe4 <_ZnwjPv>
 8018430:	4606      	mov	r6, r0
 8018432:	4634      	mov	r4, r6
 8018434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018438:	682b      	ldr	r3, [r5, #0]
 801843a:	6023      	str	r3, [r4, #0]
 801843c:	4633      	mov	r3, r6
 801843e:	4618      	mov	r0, r3
 8018440:	370c      	adds	r7, #12
 8018442:	46bd      	mov	sp, r7
 8018444:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018446 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEEEE9constructIS7_JRKS7_EEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018446:	b580      	push	{r7, lr}
 8018448:	b084      	sub	sp, #16
 801844a:	af00      	add	r7, sp, #0
 801844c:	60f8      	str	r0, [r7, #12]
 801844e:	60b9      	str	r1, [r7, #8]
 8018450:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018452:	6878      	ldr	r0, [r7, #4]
 8018454:	f7fd fab3 	bl	80159be <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEEOT_RNSt16remove_referenceIS9_E4typeE>
 8018458:	4603      	mov	r3, r0
 801845a:	4619      	mov	r1, r3
 801845c:	68b8      	ldr	r0, [r7, #8]
 801845e:	f7ff ffd9 	bl	8018414 <_ZSt12construct_atISt4pairIKS0_I3PinS1_EP17TIM_HandleTypeDefEJRKS6_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSA_DpOSB_>
	}
 8018462:	bf00      	nop
 8018464:	3710      	adds	r7, #16
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}

0801846a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801846a:	b580      	push	{r7, lr}
 801846c:	b082      	sub	sp, #8
 801846e:	af00      	add	r7, sp, #0
 8018470:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8018472:	6878      	ldr	r0, [r7, #4]
 8018474:	f000 f9c3 	bl	80187fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>
 8018478:	4603      	mov	r3, r0
 801847a:	4618      	mov	r0, r3
 801847c:	3708      	adds	r7, #8
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}

08018482 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8018482:	b580      	push	{r7, lr}
 8018484:	b084      	sub	sp, #16
 8018486:	af00      	add	r7, sp, #0
 8018488:	6078      	str	r0, [r7, #4]
 801848a:	6039      	str	r1, [r7, #0]
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	60fb      	str	r3, [r7, #12]
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8018494:	f7f6 fb9e 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8018498:	4603      	mov	r3, r0
 801849a:	2b00      	cmp	r3, #0
 801849c:	d006      	beq.n	80184ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	015b      	lsls	r3, r3, #5
 80184a2:	4618      	mov	r0, r3
 80184a4:	f001 fef0 	bl	801a288 <_Znwj>
 80184a8:	4603      	mov	r3, r0
 80184aa:	e006      	b.n	80184ba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE8allocateERS7_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80184ac:	2200      	movs	r2, #0
 80184ae:	68b9      	ldr	r1, [r7, #8]
 80184b0:	68f8      	ldr	r0, [r7, #12]
 80184b2:	f000 fa14 	bl	80188de <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>
 80184b6:	4603      	mov	r3, r0
 80184b8:	bf00      	nop
      { return __a.allocate(__n); }
 80184ba:	4618      	mov	r0, r3
 80184bc:	3710      	adds	r7, #16
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}

080184c2 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80184c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184c4:	b083      	sub	sp, #12
 80184c6:	af00      	add	r7, sp, #0
 80184c8:	6078      	str	r0, [r7, #4]
 80184ca:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80184cc:	6838      	ldr	r0, [r7, #0]
 80184ce:	f7fd fc54 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 80184d2:	4606      	mov	r6, r0
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	4619      	mov	r1, r3
 80184d8:	2010      	movs	r0, #16
 80184da:	f7f6 fb83 	bl	800ebe4 <_ZnwjPv>
 80184de:	4605      	mov	r5, r0
 80184e0:	462c      	mov	r4, r5
 80184e2:	4633      	mov	r3, r6
 80184e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80184e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80184ea:	462b      	mov	r3, r5
 80184ec:	4618      	mov	r0, r3
 80184ee:	370c      	adds	r7, #12
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080184f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	60f8      	str	r0, [r7, #12]
 80184fc:	60b9      	str	r1, [r7, #8]
 80184fe:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f7fd fc3a 	bl	8015d7a <_ZSt7forwardIRKSt4pairIK3Pin12TimerChannelEEOT_RNSt16remove_referenceIS7_E4typeE>
 8018506:	4603      	mov	r3, r0
 8018508:	4619      	mov	r1, r3
 801850a:	68b8      	ldr	r0, [r7, #8]
 801850c:	f7ff ffd9 	bl	80184c2 <_ZSt12construct_atISt4pairIK3Pin12TimerChannelEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 8018510:	bf00      	nop
 8018512:	3710      	adds	r7, #16
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}

08018518 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8018520:	6878      	ldr	r0, [r7, #4]
 8018522:	f000 f977 	bl	8018814 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>
 8018526:	4603      	mov	r3, r0
 8018528:	4618      	mov	r0, r3
 801852a:	3708      	adds	r7, #8
 801852c:	46bd      	mov	sp, r7
 801852e:	bd80      	pop	{r7, pc}

08018530 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 8018530:	b580      	push	{r7, lr}
 8018532:	b084      	sub	sp, #16
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	6039      	str	r1, [r7, #0]
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	60fb      	str	r3, [r7, #12]
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8018542:	f7f6 fb47 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8018546:	4603      	mov	r3, r0
 8018548:	2b00      	cmp	r3, #0
 801854a:	d009      	beq.n	8018560 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801854c:	68ba      	ldr	r2, [r7, #8]
 801854e:	4613      	mov	r3, r2
 8018550:	009b      	lsls	r3, r3, #2
 8018552:	4413      	add	r3, r2
 8018554:	00db      	lsls	r3, r3, #3
 8018556:	4618      	mov	r0, r3
 8018558:	f001 fe96 	bl	801a288 <_Znwj>
 801855c:	4603      	mov	r3, r0
 801855e:	e006      	b.n	801856e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8018560:	2200      	movs	r2, #0
 8018562:	68b9      	ldr	r1, [r7, #8]
 8018564:	68f8      	ldr	r0, [r7, #12]
 8018566:	f000 f9d9 	bl	801891c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>
 801856a:	4603      	mov	r3, r0
 801856c:	bf00      	nop
      { return __a.allocate(__n); }
 801856e:	4618      	mov	r0, r3
 8018570:	3710      	adds	r7, #16
 8018572:	46bd      	mov	sp, r7
 8018574:	bd80      	pop	{r7, pc}

08018576 <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8018576:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018578:	b083      	sub	sp, #12
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
 801857e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8018580:	6838      	ldr	r0, [r7, #0]
 8018582:	f7fd fdd7 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 8018586:	4605      	mov	r5, r0
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	4619      	mov	r1, r3
 801858c:	2018      	movs	r0, #24
 801858e:	f7f6 fb29 	bl	800ebe4 <_ZnwjPv>
 8018592:	4606      	mov	r6, r0
 8018594:	4634      	mov	r4, r6
 8018596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801859a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801859e:	e884 0003 	stmia.w	r4, {r0, r1}
 80185a2:	4633      	mov	r3, r6
 80185a4:	4618      	mov	r0, r3
 80185a6:	370c      	adds	r7, #12
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080185ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKS1_I3PinS2_E12TimerChannelEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f7fd fdbb 	bl	8016134 <_ZSt7forwardIRKSt4pairIKS0_I3PinS1_E12TimerChannelEEOT_RNSt16remove_referenceIS8_E4typeE>
 80185be:	4603      	mov	r3, r0
 80185c0:	4619      	mov	r1, r3
 80185c2:	68b8      	ldr	r0, [r7, #8]
 80185c4:	f7ff ffd7 	bl	8018576 <_ZSt12construct_atISt4pairIKS0_I3PinS1_E12TimerChannelEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80185c8:	bf00      	nop
 80185ca:	3710      	adds	r7, #16
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd80      	pop	{r7, pc}

080185d0 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b082      	sub	sp, #8
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f000 f926 	bl	801882a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>
 80185de:	4603      	mov	r3, r0
 80185e0:	4618      	mov	r0, r3
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b084      	sub	sp, #16
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	60fb      	str	r3, [r7, #12]
 80185f6:	683b      	ldr	r3, [r7, #0]
 80185f8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80185fa:	f7f6 faeb 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 80185fe:	4603      	mov	r3, r0
 8018600:	2b00      	cmp	r3, #0
 8018602:	d009      	beq.n	8018618 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018604:	68ba      	ldr	r2, [r7, #8]
 8018606:	4613      	mov	r3, r2
 8018608:	00db      	lsls	r3, r3, #3
 801860a:	1a9b      	subs	r3, r3, r2
 801860c:	00db      	lsls	r3, r3, #3
 801860e:	4618      	mov	r0, r3
 8018610:	f001 fe3a 	bl	801a288 <_Znwj>
 8018614:	4603      	mov	r3, r0
 8018616:	e006      	b.n	8018626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8018618:	2200      	movs	r2, #0
 801861a:	68b9      	ldr	r1, [r7, #8]
 801861c:	68f8      	ldr	r0, [r7, #12]
 801861e:	f000 f99f 	bl	8018960 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>
 8018622:	4603      	mov	r3, r0
 8018624:	bf00      	nop
      { return __a.allocate(__n); }
 8018626:	4618      	mov	r0, r3
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}

0801862e <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801862e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018630:	b083      	sub	sp, #12
 8018632:	af00      	add	r7, sp, #0
 8018634:	6078      	str	r0, [r7, #4]
 8018636:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8018638:	6838      	ldr	r0, [r7, #0]
 801863a:	f7fd ff58 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801863e:	4605      	mov	r5, r0
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	4619      	mov	r1, r3
 8018644:	2028      	movs	r0, #40	; 0x28
 8018646:	f7f6 facd 	bl	800ebe4 <_ZnwjPv>
 801864a:	4606      	mov	r6, r0
 801864c:	4634      	mov	r4, r6
 801864e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018656:	e895 0003 	ldmia.w	r5, {r0, r1}
 801865a:	e884 0003 	stmia.w	r4, {r0, r1}
 801865e:	4633      	mov	r3, r6
 8018660:	4618      	mov	r0, r3
 8018662:	370c      	adds	r7, #12
 8018664:	46bd      	mov	sp, r7
 8018666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8018668:	b580      	push	{r7, lr}
 801866a:	b084      	sub	sp, #16
 801866c:	af00      	add	r7, sp, #0
 801866e:	60f8      	str	r0, [r7, #12]
 8018670:	60b9      	str	r1, [r7, #8]
 8018672:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f7fd ff3a 	bl	80164ee <_ZSt7forwardIRKSt4pairIK3PinN12InputCapture8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801867a:	4603      	mov	r3, r0
 801867c:	4619      	mov	r1, r3
 801867e:	68b8      	ldr	r0, [r7, #8]
 8018680:	f7ff ffd5 	bl	801862e <_ZSt12construct_atISt4pairIK3PinN12InputCapture8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 8018684:	bf00      	nop
 8018686:	3710      	adds	r7, #16
 8018688:	46bd      	mov	sp, r7
 801868a:	bd80      	pop	{r7, pc}

0801868c <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801868c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801868e:	b083      	sub	sp, #12
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
 8018694:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8018696:	6838      	ldr	r0, [r7, #0]
 8018698:	f7fd ffc8 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 801869c:	4605      	mov	r5, r0
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	4619      	mov	r1, r3
 80186a2:	2014      	movs	r0, #20
 80186a4:	f7f6 fa9e 	bl	800ebe4 <_ZnwjPv>
 80186a8:	4606      	mov	r6, r0
 80186aa:	4634      	mov	r4, r6
 80186ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80186ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80186b0:	682b      	ldr	r3, [r5, #0]
 80186b2:	6023      	str	r3, [r4, #0]
 80186b4:	4633      	mov	r3, r6
 80186b6:	4618      	mov	r0, r3
 80186b8:	370c      	adds	r7, #12
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080186be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK3PinN3ADC8InstanceEEEEE9constructIS6_JRKS6_EEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80186be:	b580      	push	{r7, lr}
 80186c0:	b084      	sub	sp, #16
 80186c2:	af00      	add	r7, sp, #0
 80186c4:	60f8      	str	r0, [r7, #12]
 80186c6:	60b9      	str	r1, [r7, #8]
 80186c8:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80186ca:	6878      	ldr	r0, [r7, #4]
 80186cc:	f7fd ffae 	bl	801662c <_ZSt7forwardIRKSt4pairIK3PinN3ADC8InstanceEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80186d0:	4603      	mov	r3, r0
 80186d2:	4619      	mov	r1, r3
 80186d4:	68b8      	ldr	r0, [r7, #8]
 80186d6:	f7ff ffd9 	bl	801868c <_ZSt12construct_atISt4pairIK3PinN3ADC8InstanceEEJRKS5_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS9_DpOSA_>
	}
 80186da:	bf00      	nop
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}

080186e2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80186e2:	b580      	push	{r7, lr}
 80186e4:	b082      	sub	sp, #8
 80186e6:	af00      	add	r7, sp, #0
 80186e8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f000 f8a8 	bl	8018840 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>
 80186f0:	4603      	mov	r3, r0
 80186f2:	4618      	mov	r0, r3
 80186f4:	3708      	adds	r7, #8
 80186f6:	46bd      	mov	sp, r7
 80186f8:	bd80      	pop	{r7, pc}

080186fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80186fa:	b580      	push	{r7, lr}
 80186fc:	b084      	sub	sp, #16
 80186fe:	af00      	add	r7, sp, #0
 8018700:	6078      	str	r0, [r7, #4]
 8018702:	6039      	str	r1, [r7, #0]
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	60fb      	str	r3, [r7, #12]
 8018708:	683b      	ldr	r3, [r7, #0]
 801870a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801870c:	f7f6 fa62 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8018710:	4603      	mov	r3, r0
 8018712:	2b00      	cmp	r3, #0
 8018714:	d009      	beq.n	801872a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018716:	68ba      	ldr	r2, [r7, #8]
 8018718:	4613      	mov	r3, r2
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	4413      	add	r3, r2
 801871e:	00db      	lsls	r3, r3, #3
 8018720:	4618      	mov	r0, r3
 8018722:	f001 fdb1 	bl	801a288 <_Znwj>
 8018726:	4603      	mov	r3, r0
 8018728:	e006      	b.n	8018738 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801872a:	2200      	movs	r2, #0
 801872c:	68b9      	ldr	r1, [r7, #8]
 801872e:	68f8      	ldr	r0, [r7, #12]
 8018730:	f000 f938 	bl	80189a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>
 8018734:	4603      	mov	r3, r0
 8018736:	bf00      	nop
      { return __a.allocate(__n); }
 8018738:	4618      	mov	r0, r3
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}

08018740 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>:
 8018740:	b580      	push	{r7, lr}
 8018742:	b082      	sub	sp, #8
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	6039      	str	r1, [r7, #0]
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	683a      	ldr	r2, [r7, #0]
 801874e:	4611      	mov	r1, r2
 8018750:	4618      	mov	r0, r3
 8018752:	f000 f880 	bl	8018856 <_ZNSt8functionIFvvEEC1ERKS1_>
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	7c1a      	ldrb	r2, [r3, #16]
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	741a      	strb	r2, [r3, #16]
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	4618      	mov	r0, r3
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>:
      constexpr pair(const pair&) = default;	///< Copy constructor
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
 8018770:	6039      	str	r1, [r7, #0]
 8018772:	683b      	ldr	r3, [r7, #0]
 8018774:	881a      	ldrh	r2, [r3, #0]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	801a      	strh	r2, [r3, #0]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	1d1a      	adds	r2, r3, #4
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	3304      	adds	r3, #4
 8018782:	4619      	mov	r1, r3
 8018784:	4610      	mov	r0, r2
 8018786:	f7ff ffdb 	bl	8018740 <_ZN17ExternalInterrupt8InstanceC1ERKS0_>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	4618      	mov	r0, r3
 801878e:	3708      	adds	r7, #8
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}

08018794 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8018794:	b5b0      	push	{r4, r5, r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801879e:	6838      	ldr	r0, [r7, #0]
 80187a0:	f7fe f96b 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80187a4:	4605      	mov	r5, r0
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	4619      	mov	r1, r3
 80187aa:	2018      	movs	r0, #24
 80187ac:	f7f6 fa1a 	bl	800ebe4 <_ZnwjPv>
 80187b0:	4604      	mov	r4, r0
 80187b2:	4629      	mov	r1, r5
 80187b4:	4620      	mov	r0, r4
 80187b6:	f7ff ffd7 	bl	8018768 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1ERKS3_>
 80187ba:	4623      	mov	r3, r4
 80187bc:	4618      	mov	r0, r3
 80187be:	3708      	adds	r7, #8
 80187c0:	46bd      	mov	sp, r7
 80187c2:	bdb0      	pop	{r4, r5, r7, pc}

080187c4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEEE9constructIS5_JRKS5_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b084      	sub	sp, #16
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	60f8      	str	r0, [r7, #12]
 80187cc:	60b9      	str	r1, [r7, #8]
 80187ce:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80187d0:	6878      	ldr	r0, [r7, #4]
 80187d2:	f7fe f952 	bl	8016a7a <_ZSt7forwardIRKSt4pairIKtN17ExternalInterrupt8InstanceEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80187d6:	4603      	mov	r3, r0
 80187d8:	4619      	mov	r1, r3
 80187da:	68b8      	ldr	r0, [r7, #8]
 80187dc:	f7ff ffda 	bl	8018794 <_ZSt12construct_atISt4pairIKtN17ExternalInterrupt8InstanceEEJRKS4_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS8_DpOS9_>
	}
 80187e0:	bf00      	nop
 80187e2:	3710      	adds	r7, #16
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}

080187e8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_EP17TIM_HandleTypeDefEE7_M_addrEv>:
      _M_addr() const noexcept
 80187e8:	b480      	push	{r7}
 80187ea:	b083      	sub	sp, #12
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	4618      	mov	r0, r3
 80187f4:	370c      	adds	r7, #12
 80187f6:	46bd      	mov	sp, r7
 80187f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187fc:	4770      	bx	lr

080187fe <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3Pin12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 80187fe:	b480      	push	{r7}
 8018800:	b083      	sub	sp, #12
 8018802:	af00      	add	r7, sp, #0
 8018804:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	4618      	mov	r0, r3
 801880a:	370c      	adds	r7, #12
 801880c:	46bd      	mov	sp, r7
 801880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018812:	4770      	bx	lr

08018814 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKS1_I3PinS2_E12TimerChannelEE7_M_addrEv>:
      _M_addr() const noexcept
 8018814:	b480      	push	{r7}
 8018816:	b083      	sub	sp, #12
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	4618      	mov	r0, r3
 8018820:	370c      	adds	r7, #12
 8018822:	46bd      	mov	sp, r7
 8018824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018828:	4770      	bx	lr

0801882a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK3PinN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 801882a:	b480      	push	{r7}
 801882c:	b083      	sub	sp, #12
 801882e:	af00      	add	r7, sp, #0
 8018830:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	4618      	mov	r0, r3
 8018836:	370c      	adds	r7, #12
 8018838:	46bd      	mov	sp, r7
 801883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883e:	4770      	bx	lr

08018840 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtN17ExternalInterrupt8InstanceEEE7_M_addrEv>:
      _M_addr() const noexcept
 8018840:	b480      	push	{r7}
 8018842:	b083      	sub	sp, #12
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	4618      	mov	r0, r3
 801884c:	370c      	adds	r7, #12
 801884e:	46bd      	mov	sp, r7
 8018850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018854:	4770      	bx	lr

08018856 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8018856:	b580      	push	{r7, lr}
 8018858:	b082      	sub	sp, #8
 801885a:	af00      	add	r7, sp, #0
 801885c:	6078      	str	r0, [r7, #4]
 801885e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	4618      	mov	r0, r3
 8018864:	f7fb f93a 	bl	8013adc <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8018868:	6838      	ldr	r0, [r7, #0]
 801886a:	f000 f8bd 	bl	80189e8 <_ZNKSt8functionIFvvEEcvbEv>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d00d      	beq.n	8018890 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8018874:	683b      	ldr	r3, [r7, #0]
 8018876:	689b      	ldr	r3, [r3, #8]
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	6839      	ldr	r1, [r7, #0]
 801887c:	2202      	movs	r2, #2
 801887e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	68da      	ldr	r2, [r3, #12]
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	689a      	ldr	r2, [r3, #8]
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	609a      	str	r2, [r3, #8]
	}
    }
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	4618      	mov	r0, r3
 8018894:	3708      	adds	r7, #8
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801889a:	b580      	push	{r7, lr}
 801889c:	b084      	sub	sp, #16
 801889e:	af00      	add	r7, sp, #0
 80188a0:	60f8      	str	r0, [r7, #12]
 80188a2:	60b9      	str	r1, [r7, #8]
 80188a4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80188a6:	68f8      	ldr	r0, [r7, #12]
 80188a8:	f000 f8ae 	bl	8018a08 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>
 80188ac:	4602      	mov	r2, r0
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	4293      	cmp	r3, r2
 80188b2:	bf8c      	ite	hi
 80188b4:	2301      	movhi	r3, #1
 80188b6:	2300      	movls	r3, #0
 80188b8:	b2db      	uxtb	r3, r3
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d001      	beq.n	80188c2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80188be:	f001 fda7 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80188c2:	68ba      	ldr	r2, [r7, #8]
 80188c4:	4613      	mov	r3, r2
 80188c6:	00db      	lsls	r3, r3, #3
 80188c8:	4413      	add	r3, r2
 80188ca:	009b      	lsls	r3, r3, #2
 80188cc:	4618      	mov	r0, r3
 80188ce:	f001 fcdb 	bl	801a288 <_Znwj>
 80188d2:	4603      	mov	r3, r0
 80188d4:	bf00      	nop
      }
 80188d6:	4618      	mov	r0, r3
 80188d8:	3710      	adds	r7, #16
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}

080188de <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80188de:	b580      	push	{r7, lr}
 80188e0:	b084      	sub	sp, #16
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	60f8      	str	r0, [r7, #12]
 80188e6:	60b9      	str	r1, [r7, #8]
 80188e8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80188ea:	68f8      	ldr	r0, [r7, #12]
 80188ec:	f000 f89a 	bl	8018a24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>
 80188f0:	4602      	mov	r2, r0
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	4293      	cmp	r3, r2
 80188f6:	bf8c      	ite	hi
 80188f8:	2301      	movhi	r3, #1
 80188fa:	2300      	movls	r3, #0
 80188fc:	b2db      	uxtb	r3, r3
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d001      	beq.n	8018906 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018902:	f001 fd85 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	015b      	lsls	r3, r3, #5
 801890a:	4618      	mov	r0, r3
 801890c:	f001 fcbc 	bl	801a288 <_Znwj>
 8018910:	4603      	mov	r3, r0
 8018912:	bf00      	nop
      }
 8018914:	4618      	mov	r0, r3
 8018916:	3710      	adds	r7, #16
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}

0801891c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801891c:	b580      	push	{r7, lr}
 801891e:	b084      	sub	sp, #16
 8018920:	af00      	add	r7, sp, #0
 8018922:	60f8      	str	r0, [r7, #12]
 8018924:	60b9      	str	r1, [r7, #8]
 8018926:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8018928:	68f8      	ldr	r0, [r7, #12]
 801892a:	f000 f887 	bl	8018a3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>
 801892e:	4602      	mov	r2, r0
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	4293      	cmp	r3, r2
 8018934:	bf8c      	ite	hi
 8018936:	2301      	movhi	r3, #1
 8018938:	2300      	movls	r3, #0
 801893a:	b2db      	uxtb	r3, r3
 801893c:	2b00      	cmp	r3, #0
 801893e:	d001      	beq.n	8018944 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018940:	f001 fd66 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018944:	68ba      	ldr	r2, [r7, #8]
 8018946:	4613      	mov	r3, r2
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	4413      	add	r3, r2
 801894c:	00db      	lsls	r3, r3, #3
 801894e:	4618      	mov	r0, r3
 8018950:	f001 fc9a 	bl	801a288 <_Znwj>
 8018954:	4603      	mov	r3, r0
 8018956:	bf00      	nop
      }
 8018958:	4618      	mov	r0, r3
 801895a:	3710      	adds	r7, #16
 801895c:	46bd      	mov	sp, r7
 801895e:	bd80      	pop	{r7, pc}

08018960 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	60f8      	str	r0, [r7, #12]
 8018968:	60b9      	str	r1, [r7, #8]
 801896a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801896c:	68f8      	ldr	r0, [r7, #12]
 801896e:	f000 f873 	bl	8018a58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>
 8018972:	4602      	mov	r2, r0
 8018974:	68bb      	ldr	r3, [r7, #8]
 8018976:	4293      	cmp	r3, r2
 8018978:	bf8c      	ite	hi
 801897a:	2301      	movhi	r3, #1
 801897c:	2300      	movls	r3, #0
 801897e:	b2db      	uxtb	r3, r3
 8018980:	2b00      	cmp	r3, #0
 8018982:	d001      	beq.n	8018988 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8018984:	f001 fd44 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8018988:	68ba      	ldr	r2, [r7, #8]
 801898a:	4613      	mov	r3, r2
 801898c:	00db      	lsls	r3, r3, #3
 801898e:	1a9b      	subs	r3, r3, r2
 8018990:	00db      	lsls	r3, r3, #3
 8018992:	4618      	mov	r0, r3
 8018994:	f001 fc78 	bl	801a288 <_Znwj>
 8018998:	4603      	mov	r3, r0
 801899a:	bf00      	nop
      }
 801899c:	4618      	mov	r0, r3
 801899e:	3710      	adds	r7, #16
 80189a0:	46bd      	mov	sp, r7
 80189a2:	bd80      	pop	{r7, pc}

080189a4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	60f8      	str	r0, [r7, #12]
 80189ac:	60b9      	str	r1, [r7, #8]
 80189ae:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80189b0:	68f8      	ldr	r0, [r7, #12]
 80189b2:	f000 f85f 	bl	8018a74 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>
 80189b6:	4602      	mov	r2, r0
 80189b8:	68bb      	ldr	r3, [r7, #8]
 80189ba:	4293      	cmp	r3, r2
 80189bc:	bf8c      	ite	hi
 80189be:	2301      	movhi	r3, #1
 80189c0:	2300      	movls	r3, #0
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d001      	beq.n	80189cc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80189c8:	f001 fd22 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80189cc:	68ba      	ldr	r2, [r7, #8]
 80189ce:	4613      	mov	r3, r2
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	4413      	add	r3, r2
 80189d4:	00db      	lsls	r3, r3, #3
 80189d6:	4618      	mov	r0, r3
 80189d8:	f001 fc56 	bl	801a288 <_Znwj>
 80189dc:	4603      	mov	r3, r0
 80189de:	bf00      	nop
      }
 80189e0:	4618      	mov	r0, r3
 80189e2:	3710      	adds	r7, #16
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}

080189e8 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80189e8:	b580      	push	{r7, lr}
 80189ea:	b082      	sub	sp, #8
 80189ec:	af00      	add	r7, sp, #0
 80189ee:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	4618      	mov	r0, r3
 80189f4:	f7fb f893 	bl	8013b1e <_ZNKSt14_Function_base8_M_emptyEv>
 80189f8:	4603      	mov	r3, r0
 80189fa:	f083 0301 	eor.w	r3, r3, #1
 80189fe:	b2db      	uxtb	r3, r3
 8018a00:	4618      	mov	r0, r3
 8018a02:	3708      	adds	r7, #8
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}

08018a08 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018a08:	b480      	push	{r7}
 8018a0a:	b083      	sub	sp, #12
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018a10:	4b03      	ldr	r3, [pc, #12]	; (8018a20 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_EP17TIM_HandleTypeDefEEE11_M_max_sizeEv+0x18>)
      }
 8018a12:	4618      	mov	r0, r3
 8018a14:	370c      	adds	r7, #12
 8018a16:	46bd      	mov	sp, r7
 8018a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop
 8018a20:	038e38e3 	.word	0x038e38e3

08018a24 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3Pin12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018a24:	b480      	push	{r7}
 8018a26:	b083      	sub	sp, #12
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018a2c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
      }
 8018a30:	4618      	mov	r0, r3
 8018a32:	370c      	adds	r7, #12
 8018a34:	46bd      	mov	sp, r7
 8018a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a3a:	4770      	bx	lr

08018a3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018a3c:	b480      	push	{r7}
 8018a3e:	b083      	sub	sp, #12
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018a44:	4b03      	ldr	r3, [pc, #12]	; (8018a54 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKS2_I3PinS3_E12TimerChannelEEE11_M_max_sizeEv+0x18>)
      }
 8018a46:	4618      	mov	r0, r3
 8018a48:	370c      	adds	r7, #12
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a50:	4770      	bx	lr
 8018a52:	bf00      	nop
 8018a54:	03333333 	.word	0x03333333

08018a58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018a60:	4b03      	ldr	r3, [pc, #12]	; (8018a70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK3PinN12InputCapture8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 8018a62:	4618      	mov	r0, r3
 8018a64:	370c      	adds	r7, #12
 8018a66:	46bd      	mov	sp, r7
 8018a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6c:	4770      	bx	lr
 8018a6e:	bf00      	nop
 8018a70:	02492492 	.word	0x02492492

08018a74 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8018a74:	b480      	push	{r7}
 8018a76:	b083      	sub	sp, #12
 8018a78:	af00      	add	r7, sp, #0
 8018a7a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8018a7c:	4b03      	ldr	r3, [pc, #12]	; (8018a8c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtN17ExternalInterrupt8InstanceEEEE11_M_max_sizeEv+0x18>)
      }
 8018a7e:	4618      	mov	r0, r3
 8018a80:	370c      	adds	r7, #12
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	03333333 	.word	0x03333333

08018a90 <_Z41__static_initialization_and_destruction_0ii>:
 ***********************************************/
#ifdef HAL_EXTI_MODULE_ENABLED

map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
	{PE7.gpio_pin, Instance()}
};
 8018a90:	b590      	push	{r4, r7, lr}
 8018a92:	b0ed      	sub	sp, #436	; 0x1b4
 8018a94:	af02      	add	r7, sp, #8
 8018a96:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018a9a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8018a9e:	6018      	str	r0, [r3, #0]
 8018aa0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018aa4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018aa8:	6019      	str	r1, [r3, #0]
 8018aaa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018aae:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	2b01      	cmp	r3, #1
 8018ab6:	f040 8240 	bne.w	8018f3a <_Z41__static_initialization_and_destruction_0ii+0x4aa>
 8018aba:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018abe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ac8:	4293      	cmp	r3, r2
 8018aca:	f040 8236 	bne.w	8018f3a <_Z41__static_initialization_and_destruction_0ii+0x4aa>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8018ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018ad2:	4acc      	ldr	r2, [pc, #816]	; (8018e04 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8018ad4:	49cc      	ldr	r1, [pc, #816]	; (8018e08 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7fb f95f 	bl	8013d9a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
		{{PC6, PC7}, {&htim8}},
 8018adc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018ae0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8018ae4:	4ac9      	ldr	r2, [pc, #804]	; (8018e0c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8018ae6:	601a      	str	r2, [r3, #0]
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8018ae8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8018aec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8018af0:	f107 0314 	add.w	r3, r7, #20
 8018af4:	4618      	mov	r0, r3
 8018af6:	f7fb f96e 	bl	8013dd6 <_ZNSt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEC1IS2_S4_Lb1EEERS2_RKS4_>
 8018afa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018afe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8018b02:	f107 0214 	add.w	r2, r7, #20
 8018b06:	601a      	str	r2, [r3, #0]
 8018b08:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b0c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8018b10:	2201      	movs	r2, #1
 8018b12:	605a      	str	r2, [r3, #4]
 8018b14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7fb f972 	bl	8013e02 <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEEC1Ev>
 8018b1e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8018b22:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b26:	f5a3 72ce 	sub.w	r2, r3, #412	; 0x19c
 8018b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b2e:	9300      	str	r3, [sp, #0]
 8018b30:	460b      	mov	r3, r1
 8018b32:	ca06      	ldmia	r2, {r1, r2}
 8018b34:	48b6      	ldr	r0, [pc, #728]	; (8018e10 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8018b36:	f7fb f97b 	bl	8013e30 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEEC1ESt16initializer_listIS8_ERKS6_RKS9_>
 8018b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018b3e:	4618      	mov	r0, r3
 8018b40:	f7fb f96b 	bl	8013e1a <_ZNSaISt4pairIKS_I3PinS0_EP17TIM_HandleTypeDefEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8018b44:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8018b4c:	4ab1      	ldr	r2, [pc, #708]	; (8018e14 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8018b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b52:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b56:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8018b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018b5e:	49ae      	ldr	r1, [pc, #696]	; (8018e18 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7fb f835 	bl	8013bd0 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 8018b66:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8018b6e:	4aab      	ldr	r2, [pc, #684]	; (8018e1c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8018b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b74:	e883 0003 	stmia.w	r3, {r0, r1}
 8018b78:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8018b7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018b80:	3310      	adds	r3, #16
 8018b82:	49a7      	ldr	r1, [pc, #668]	; (8018e20 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8018b84:	4618      	mov	r0, r3
 8018b86:	f7fb f823 	bl	8013bd0 <_ZNSt4pairIK3Pin12TimerChannelEC1IRS0_Lb1EEEOT_RKS2_>
 8018b8a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b8e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8018b92:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018b96:	601a      	str	r2, [r3, #0]
 8018b98:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018b9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8018ba0:	2202      	movs	r2, #2
 8018ba2:	605a      	str	r2, [r3, #4]
 8018ba4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018ba8:	4618      	mov	r0, r3
 8018baa:	f7fb f992 	bl	8013ed2 <_ZNSaISt4pairIK3Pin12TimerChannelEEC1Ev>
 8018bae:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8018bb2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018bb6:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 8018bba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018bbe:	9300      	str	r3, [sp, #0]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	ca06      	ldmia	r2, {r1, r2}
 8018bc4:	4897      	ldr	r0, [pc, #604]	; (8018e24 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8018bc6:	f7fb f99b 	bl	8013f00 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 8018bca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7fb f98b 	bl	8013eea <_ZNSaISt4pairIK3Pin12TimerChannelEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 8018bd4:	4b94      	ldr	r3, [pc, #592]	; (8018e28 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8018bd6:	461a      	mov	r2, r3
 8018bd8:	2300      	movs	r3, #0
 8018bda:	6013      	str	r3, [r2, #0]
 8018bdc:	6053      	str	r3, [r2, #4]
 8018bde:	6093      	str	r3, [r2, #8]
 8018be0:	60d3      	str	r3, [r2, #12]
 8018be2:	6113      	str	r3, [r2, #16]
 8018be4:	6153      	str	r3, [r2, #20]
 8018be6:	4890      	ldr	r0, [pc, #576]	; (8018e28 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8018be8:	f7fb f83e 	bl	8013c68 <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEEC1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8018bec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018bf0:	4a8e      	ldr	r2, [pc, #568]	; (8018e2c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8018bf2:	498f      	ldr	r1, [pc, #572]	; (8018e30 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7fb f8d0 	bl	8013d9a <_ZNSt4pairI3PinS0_EC1IRS0_S3_Lb1EEEOT_OT0_>
 8018bfa:	4b8e      	ldr	r3, [pc, #568]	; (8018e34 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8018bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018c00:	2300      	movs	r3, #0
 8018c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8018c06:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8018c0a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8018c0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018c12:	4618      	mov	r0, r3
 8018c14:	f7fb f9d9 	bl	8013fca <_ZNSt4pairIKS_I3PinS0_E12TimerChannelEC1IS2_S3_Lb1EEERS2_RKS3_>
 8018c18:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018c1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8018c20:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8018c24:	601a      	str	r2, [r3, #0]
 8018c26:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018c2a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8018c2e:	2201      	movs	r2, #1
 8018c30:	605a      	str	r2, [r3, #4]
 8018c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7fb f9e0 	bl	8013ffc <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEEC1Ev>
 8018c3c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8018c40:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018c44:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8018c48:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018c4c:	9300      	str	r3, [sp, #0]
 8018c4e:	460b      	mov	r3, r1
 8018c50:	ca06      	ldmia	r2, {r1, r2}
 8018c52:	4879      	ldr	r0, [pc, #484]	; (8018e38 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8018c54:	f7fb f9e9 	bl	801402a <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEEC1ESt16initializer_listIS7_ERKS5_RKS8_>
 8018c58:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	f7fb f9d9 	bl	8014014 <_ZNSaISt4pairIKS_I3PinS0_E12TimerChannelEED1Ev>
		{PA0, InputCapture::Instance(PA0, &htim2, TIM_CHANNEL_1, TIM_CHANNEL_2)}
 8018c62:	4a76      	ldr	r2, [pc, #472]	; (8018e3c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8018c64:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8018c68:	2304      	movs	r3, #4
 8018c6a:	9301      	str	r3, [sp, #4]
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	9300      	str	r3, [sp, #0]
 8018c70:	4b73      	ldr	r3, [pc, #460]	; (8018e40 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8018c72:	ca06      	ldmia	r2, {r1, r2}
 8018c74:	f000 fa16 	bl	80190a4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8018c78:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8018c7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8018c80:	496e      	ldr	r1, [pc, #440]	; (8018e3c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8018c82:	4618      	mov	r0, r3
 8018c84:	f7fb fa22 	bl	80140cc <_ZNSt4pairIK3PinN12InputCapture8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8018c88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8018c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8018c90:	2301      	movs	r3, #1
 8018c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018c96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fb fa38 	bl	8014110 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEEC1Ev>
 8018ca0:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8018ca4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018ca8:	9300      	str	r3, [sp, #0]
 8018caa:	4613      	mov	r3, r2
 8018cac:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8018cb0:	ca06      	ldmia	r2, {r1, r2}
 8018cb2:	4864      	ldr	r0, [pc, #400]	; (8018e44 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8018cb4:	f7fb fa43 	bl	801413e <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8018cb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	f7fb fa33 	bl	8014128 <_ZNSaISt4pairIK3PinN12InputCapture8InstanceEEED1Ev>
LowPowerTimer lptim1 = LowPowerTimer(&hlptim1, LPTIM1_PERIOD);
 8018cc2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018cc6:	4960      	ldr	r1, [pc, #384]	; (8018e48 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8018cc8:	4860      	ldr	r0, [pc, #384]	; (8018e4c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8018cca:	f7fa ff53 	bl	8013b74 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim2 = LowPowerTimer(&hlptim2, LPTIM2_PERIOD);
 8018cce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018cd2:	495f      	ldr	r1, [pc, #380]	; (8018e50 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8018cd4:	485f      	ldr	r0, [pc, #380]	; (8018e54 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8018cd6:	f7fa ff4d 	bl	8013b74 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
LowPowerTimer lptim3 = LowPowerTimer(&hlptim3, LPTIM3_PERIOD);
 8018cda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8018cde:	495e      	ldr	r1, [pc, #376]	; (8018e58 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8018ce0:	485e      	ldr	r0, [pc, #376]	; (8018e5c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8018ce2:	f7fa ff47 	bl	8013b74 <_ZN13LowPowerTimerC1EP19LPTIM_HandleTypeDeft>
vector<uint32_t> channels1 = {};
 8018ce6:	4b5e      	ldr	r3, [pc, #376]	; (8018e60 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8018ce8:	461a      	mov	r2, r3
 8018cea:	2300      	movs	r3, #0
 8018cec:	6013      	str	r3, [r2, #0]
 8018cee:	6053      	str	r3, [r2, #4]
 8018cf0:	6093      	str	r3, [r2, #8]
 8018cf2:	485b      	ldr	r0, [pc, #364]	; (8018e60 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8018cf4:	f7fa ff31 	bl	8013b5a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels2 = {};
 8018cf8:	4b5a      	ldr	r3, [pc, #360]	; (8018e64 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8018cfa:	461a      	mov	r2, r3
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	6013      	str	r3, [r2, #0]
 8018d00:	6053      	str	r3, [r2, #4]
 8018d02:	6093      	str	r3, [r2, #8]
 8018d04:	4857      	ldr	r0, [pc, #348]	; (8018e64 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8018d06:	f7fa ff28 	bl	8013b5a <_ZNSt6vectorImSaImEEC1Ev>
vector<uint32_t> channels3 = {};
 8018d0a:	4b57      	ldr	r3, [pc, #348]	; (8018e68 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018d0c:	461a      	mov	r2, r3
 8018d0e:	2300      	movs	r3, #0
 8018d10:	6013      	str	r3, [r2, #0]
 8018d12:	6053      	str	r3, [r2, #4]
 8018d14:	6093      	str	r3, [r2, #8]
 8018d16:	4854      	ldr	r0, [pc, #336]	; (8018e68 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018d18:	f7fa ff1f 	bl	8013b5a <_ZNSt6vectorImSaImEEC1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8018d1c:	4b50      	ldr	r3, [pc, #320]	; (8018e60 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8018d1e:	9300      	str	r3, [sp, #0]
 8018d20:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8018d24:	2200      	movs	r2, #0
 8018d26:	4951      	ldr	r1, [pc, #324]	; (8018e6c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8018d28:	4851      	ldr	r0, [pc, #324]	; (8018e70 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8018d2a:	f7f7 f897 	bl	800fe5c <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8018d2e:	4b4d      	ldr	r3, [pc, #308]	; (8018e64 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8018d30:	9300      	str	r3, [sp, #0]
 8018d32:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8018d36:	2200      	movs	r2, #0
 8018d38:	494e      	ldr	r1, [pc, #312]	; (8018e74 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8018d3a:	484f      	ldr	r0, [pc, #316]	; (8018e78 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8018d3c:	f7f7 f88e 	bl	800fe5c <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8018d40:	4b49      	ldr	r3, [pc, #292]	; (8018e68 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8018d48:	2208      	movs	r2, #8
 8018d4a:	494c      	ldr	r1, [pc, #304]	; (8018e7c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8018d4c:	484c      	ldr	r0, [pc, #304]	; (8018e80 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8018d4e:	f7f7 f885 	bl	800fe5c <_ZN3ADC8InitDataC1EP11ADC_TypeDefmmRSt6vectorImSaImEE>
};
 8018d52:	4c4c      	ldr	r4, [pc, #304]	; (8018e84 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8018d54:	4b46      	ldr	r3, [pc, #280]	; (8018e70 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8018d56:	9300      	str	r3, [sp, #0]
 8018d58:	4b3c      	ldr	r3, [pc, #240]	; (8018e4c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8018d5a:	4a4b      	ldr	r2, [pc, #300]	; (8018e88 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8018d5c:	494b      	ldr	r1, [pc, #300]	; (8018e8c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8018d5e:	4620      	mov	r0, r4
 8018d60:	f7f7 f8c4 	bl	800feec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8018d64:	342c      	adds	r4, #44	; 0x2c
 8018d66:	4b44      	ldr	r3, [pc, #272]	; (8018e78 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8018d68:	9300      	str	r3, [sp, #0]
 8018d6a:	4b3a      	ldr	r3, [pc, #232]	; (8018e54 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8018d6c:	4a48      	ldr	r2, [pc, #288]	; (8018e90 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8018d6e:	4949      	ldr	r1, [pc, #292]	; (8018e94 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7f7 f8bb 	bl	800feec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
 8018d76:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8018d7a:	4b41      	ldr	r3, [pc, #260]	; (8018e80 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8018d7c:	9300      	str	r3, [sp, #0]
 8018d7e:	4b37      	ldr	r3, [pc, #220]	; (8018e5c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8018d80:	4a45      	ldr	r2, [pc, #276]	; (8018e98 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8018d82:	4946      	ldr	r1, [pc, #280]	; (8018e9c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8018d84:	f7f7 f8b2 	bl	800feec <_ZN3ADC10PeripheralC1EP17ADC_HandleTypeDefPtR13LowPowerTimerRNS_8InitDataE>
		{PF11, Instance(&peripherals[0], ADC_CHANNEL_2)},
 8018d88:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8018d8c:	4a44      	ldr	r2, [pc, #272]	; (8018ea0 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8018d8e:	493d      	ldr	r1, [pc, #244]	; (8018e84 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8018d90:	4618      	mov	r0, r3
 8018d92:	f7f7 f8e1 	bl	800ff58 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018d96:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8018d9a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018d9e:	4941      	ldr	r1, [pc, #260]	; (8018ea4 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8018da0:	4618      	mov	r0, r3
 8018da2:	f7fb fa1d 	bl	80141e0 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
		{PA6, Instance(&peripherals[0], ADC_CHANNEL_3)}
 8018da6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018daa:	4a3f      	ldr	r2, [pc, #252]	; (8018ea8 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8018dac:	4935      	ldr	r1, [pc, #212]	; (8018e84 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8018dae:	4618      	mov	r0, r3
 8018db0:	f7f7 f8d2 	bl	800ff58 <_ZN3ADC8InstanceC1EPNS_10PeripheralEm>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018db4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8018db8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018dbc:	3314      	adds	r3, #20
 8018dbe:	493b      	ldr	r1, [pc, #236]	; (8018eac <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7fb fa0d 	bl	80141e0 <_ZNSt4pairIK3PinN3ADC8InstanceEEC1IRS0_S3_Lb1EEEOT_OT0_>
 8018dc6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8018dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8018dce:	2302      	movs	r3, #2
 8018dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8018dd4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7fb fa1e 	bl	801421a <_ZNSaISt4pairIK3PinN3ADC8InstanceEEEC1Ev>
 8018dde:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8018de2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018de6:	9300      	str	r3, [sp, #0]
 8018de8:	4613      	mov	r3, r2
 8018dea:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8018dee:	ca06      	ldmia	r2, {r1, r2}
 8018df0:	482f      	ldr	r0, [pc, #188]	; (8018eb0 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8018df2:	f7fb fa29 	bl	8014248 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEEC1ESt16initializer_listIS7_ERKS4_RKS8_>
 8018df6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7fb fa19 	bl	8014232 <_ZNSaISt4pairIK3PinN3ADC8InstanceEEED1Ev>
 8018e00:	e058      	b.n	8018eb4 <_Z41__static_initialization_and_destruction_0ii+0x424>
 8018e02:	bf00      	nop
 8018e04:	24000eb4 	.word	0x24000eb4
 8018e08:	24000eac 	.word	0x24000eac
 8018e0c:	24000968 	.word	0x24000968
 8018e10:	24000fec 	.word	0x24000fec
 8018e14:	0801ab00 	.word	0x0801ab00
 8018e18:	24000c74 	.word	0x24000c74
 8018e1c:	0801ab08 	.word	0x0801ab08
 8018e20:	24000c9c 	.word	0x24000c9c
 8018e24:	24001004 	.word	0x24001004
 8018e28:	2400101c 	.word	0x2400101c
 8018e2c:	24000c6c 	.word	0x24000c6c
 8018e30:	24000c64 	.word	0x24000c64
 8018e34:	24000a00 	.word	0x24000a00
 8018e38:	24001034 	.word	0x24001034
 8018e3c:	24000d1c 	.word	0x24000d1c
 8018e40:	24000884 	.word	0x24000884
 8018e44:	2400104c 	.word	0x2400104c
 8018e48:	240006e0 	.word	0x240006e0
 8018e4c:	240010c4 	.word	0x240010c4
 8018e50:	24000718 	.word	0x24000718
 8018e54:	240010cc 	.word	0x240010cc
 8018e58:	24000750 	.word	0x24000750
 8018e5c:	240010d4 	.word	0x240010d4
 8018e60:	240010dc 	.word	0x240010dc
 8018e64:	240010e8 	.word	0x240010e8
 8018e68:	240010f4 	.word	0x240010f4
 8018e6c:	40022000 	.word	0x40022000
 8018e70:	24001100 	.word	0x24001100
 8018e74:	40022100 	.word	0x40022100
 8018e78:	24001118 	.word	0x24001118
 8018e7c:	58026000 	.word	0x58026000
 8018e80:	24001130 	.word	0x24001130
 8018e84:	24001148 	.word	0x24001148
 8018e88:	24001064 	.word	0x24001064
 8018e8c:	24000190 	.word	0x24000190
 8018e90:	24001084 	.word	0x24001084
 8018e94:	24000200 	.word	0x24000200
 8018e98:	240010a4 	.word	0x240010a4
 8018e9c:	24000270 	.word	0x24000270
 8018ea0:	08600004 	.word	0x08600004
 8018ea4:	24000d84 	.word	0x24000d84
 8018ea8:	0c900008 	.word	0x0c900008
 8018eac:	24000d4c 	.word	0x24000d4c
 8018eb0:	240011cc 	.word	0x240011cc
	{PE7.gpio_pin, Instance()}
 8018eb4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018eb8:	2200      	movs	r2, #0
 8018eba:	601a      	str	r2, [r3, #0]
 8018ebc:	605a      	str	r2, [r3, #4]
 8018ebe:	609a      	str	r2, [r3, #8]
 8018ec0:	60da      	str	r2, [r3, #12]
 8018ec2:	611a      	str	r2, [r3, #16]
 8018ec4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7fa ff0f 	bl	8013cec <_ZN17ExternalInterrupt8InstanceC1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018ece:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8018ed2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018ed6:	493b      	ldr	r1, [pc, #236]	; (8018fc4 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7fb fa25 	bl	8014328 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEEC1IR8GPIO_PinS2_Lb1EEEOT_OT0_>
 8018ede:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018ee2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8018eec:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fb fa35 	bl	8014360 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEEC1Ev>
 8018ef6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8018efa:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	4613      	mov	r3, r2
 8018f02:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8018f06:	ca06      	ldmia	r2, {r1, r2}
 8018f08:	482f      	ldr	r0, [pc, #188]	; (8018fc8 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8018f0a:	f7fb fa40 	bl	801438e <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEEC1ESt16initializer_listIS6_ERKS3_RKS7_>
 8018f0e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8018f12:	4618      	mov	r0, r3
 8018f14:	f7fb fa30 	bl	8014378 <_ZNSaISt4pairIKtN17ExternalInterrupt8InstanceEEED1Ev>
};
 8018f18:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 8018f1c:	3418      	adds	r4, #24
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018f1e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8018f22:	429c      	cmp	r4, r3
 8018f24:	d004      	beq.n	8018f30 <_Z41__static_initialization_and_destruction_0ii+0x4a0>
};
 8018f26:	3c18      	subs	r4, #24
 8018f28:	4620      	mov	r0, r4
 8018f2a:	f7fa fefd 	bl	8013d28 <_ZNSt4pairIKtN17ExternalInterrupt8InstanceEED1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018f2e:	e7f6      	b.n	8018f1e <_Z41__static_initialization_and_destruction_0ii+0x48e>
	{PE7.gpio_pin, Instance()}
 8018f30:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7fa feea 	bl	8013d0e <_ZN17ExternalInterrupt8InstanceD1Ev>
map<uint16_t, ExternalInterrupt::Instance> ExternalInterrupt::instances = {
 8018f3a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018f3e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d138      	bne.n	8018fba <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8018f48:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8018f4c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f56:	4293      	cmp	r3, r2
 8018f58:	d12f      	bne.n	8018fba <_Z41__static_initialization_and_destruction_0ii+0x52a>
 8018f5a:	481b      	ldr	r0, [pc, #108]	; (8018fc8 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8018f5c:	f7fa fef2 	bl	8013d44 <_ZNSt3mapItN17ExternalInterrupt8InstanceESt4lessItESaISt4pairIKtS1_EEED1Ev>
map<Pin, ADC::Instance> ADC::available_instances = {
 8018f60:	481a      	ldr	r0, [pc, #104]	; (8018fcc <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 8018f62:	f7fa feb6 	bl	8013cd2 <_ZNSt3mapI3PinN3ADC8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
ADC::Peripheral ADC::peripherals[3] = {
 8018f66:	4c1a      	ldr	r4, [pc, #104]	; (8018fd0 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 8018f68:	4b1a      	ldr	r3, [pc, #104]	; (8018fd4 <_Z41__static_initialization_and_destruction_0ii+0x544>)
 8018f6a:	429c      	cmp	r4, r3
 8018f6c:	d004      	beq.n	8018f78 <_Z41__static_initialization_and_destruction_0ii+0x4e8>
 8018f6e:	3c2c      	subs	r4, #44	; 0x2c
 8018f70:	4620      	mov	r0, r4
 8018f72:	f7fa fea0 	bl	8013cb6 <_ZN3ADC10PeripheralD1Ev>
 8018f76:	e7f7      	b.n	8018f68 <_Z41__static_initialization_and_destruction_0ii+0x4d8>
ADC::InitData init_data3 = ADC::InitData(ADC3, ADC_RESOLUTION_12B, ADC_EXTERNALTRIG_LPTIM3_OUT, channels3);
 8018f78:	4817      	ldr	r0, [pc, #92]	; (8018fd8 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 8018f7a:	f7f6 ffa9 	bl	800fed0 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data2 = ADC::InitData(ADC2, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM2_OUT, channels2);
 8018f7e:	4817      	ldr	r0, [pc, #92]	; (8018fdc <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 8018f80:	f7f6 ffa6 	bl	800fed0 <_ZN3ADC8InitDataD1Ev>
ADC::InitData init_data1 = ADC::InitData(ADC1, ADC_RESOLUTION_16B, ADC_EXTERNALTRIG_LPTIM1_OUT, channels1);
 8018f84:	4816      	ldr	r0, [pc, #88]	; (8018fe0 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 8018f86:	f7f6 ffa3 	bl	800fed0 <_ZN3ADC8InitDataD1Ev>
vector<uint32_t> channels3 = {};
 8018f8a:	4816      	ldr	r0, [pc, #88]	; (8018fe4 <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8018f8c:	f7f7 fa92 	bl	80104b4 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels2 = {};
 8018f90:	4815      	ldr	r0, [pc, #84]	; (8018fe8 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8018f92:	f7f7 fa8f 	bl	80104b4 <_ZNSt6vectorImSaImEED1Ev>
vector<uint32_t> channels1 = {};
 8018f96:	4815      	ldr	r0, [pc, #84]	; (8018fec <_Z41__static_initialization_and_destruction_0ii+0x55c>)
 8018f98:	f7f7 fa8c 	bl	80104b4 <_ZNSt6vectorImSaImEED1Ev>
map<Pin, InputCapture::Instance> InputCapture::instances_data = {
 8018f9c:	4814      	ldr	r0, [pc, #80]	; (8018ff0 <_Z41__static_initialization_and_destruction_0ii+0x560>)
 8018f9e:	f7fa fe7d 	bl	8013c9c <_ZNSt3mapI3PinN12InputCapture8InstanceESt4lessIS0_ESaISt4pairIKS0_S2_EEED1Ev>
map<pair<Pin, Pin>, TimerChannel> PWM::pin_timer_map_dual = {
 8018fa2:	4814      	ldr	r0, [pc, #80]	; (8018ff4 <_Z41__static_initialization_and_destruction_0ii+0x564>)
 8018fa4:	f7fa fe6d 	bl	8013c82 <_ZNSt3mapISt4pairI3PinS1_E12TimerChannelSt4lessIS2_ESaIS0_IKS2_S3_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map_negated = {};
 8018fa8:	4813      	ldr	r0, [pc, #76]	; (8018ff8 <_Z41__static_initialization_and_destruction_0ii+0x568>)
 8018faa:	f7fa fe37 	bl	8013c1c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<Pin, TimerChannel> PWM::pin_timer_map = {
 8018fae:	4813      	ldr	r0, [pc, #76]	; (8018ffc <_Z41__static_initialization_and_destruction_0ii+0x56c>)
 8018fb0:	f7fa fe34 	bl	8013c1c <_ZNSt3mapI3Pin12TimerChannelSt4lessIS0_ESaISt4pairIKS0_S1_EEED1Ev>
map<pair<Pin, Pin>, TIM_HandleTypeDef*> Encoder::pin_timer_map = {
 8018fb4:	4812      	ldr	r0, [pc, #72]	; (8019000 <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8018fb6:	f7fa fdfe 	bl	8013bb6 <_ZNSt3mapISt4pairI3PinS1_EP17TIM_HandleTypeDefSt4lessIS2_ESaIS0_IKS2_S4_EEED1Ev>
};
 8018fba:	bf00      	nop
 8018fbc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd90      	pop	{r4, r7, pc}
 8018fc4:	24000dc0 	.word	0x24000dc0
 8018fc8:	240011e4 	.word	0x240011e4
 8018fcc:	240011cc 	.word	0x240011cc
 8018fd0:	240011cc 	.word	0x240011cc
 8018fd4:	24001148 	.word	0x24001148
 8018fd8:	24001130 	.word	0x24001130
 8018fdc:	24001118 	.word	0x24001118
 8018fe0:	24001100 	.word	0x24001100
 8018fe4:	240010f4 	.word	0x240010f4
 8018fe8:	240010e8 	.word	0x240010e8
 8018fec:	240010dc 	.word	0x240010dc
 8018ff0:	2400104c 	.word	0x2400104c
 8018ff4:	24001034 	.word	0x24001034
 8018ff8:	2400101c 	.word	0x2400101c
 8018ffc:	24001004 	.word	0x24001004
 8019000:	24000fec 	.word	0x24000fec

08019004 <_GLOBAL__sub_I__ZN7Encoder13pin_timer_mapE>:
 8019004:	b580      	push	{r7, lr}
 8019006:	af00      	add	r7, sp, #0
 8019008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801900c:	2001      	movs	r0, #1
 801900e:	f7ff fd3f 	bl	8018a90 <_Z41__static_initialization_and_destruction_0ii>
 8019012:	bd80      	pop	{r7, pc}

08019014 <_GLOBAL__sub_D__ZN7Encoder13pin_timer_mapE>:
 8019014:	b580      	push	{r7, lr}
 8019016:	af00      	add	r7, sp, #0
 8019018:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801901c:	2000      	movs	r0, #0
 801901e:	f7ff fd37 	bl	8018a90 <_Z41__static_initialization_and_destruction_0ii>
 8019022:	bd80      	pop	{r7, pc}

08019024 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
 801902a:	6078      	str	r0, [r7, #4]
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f000 f86d 	bl	801910c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	4618      	mov	r0, r3
 8019036:	3708      	adds	r7, #8
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 801903c:	b580      	push	{r7, lr}
 801903e:	b082      	sub	sp, #8
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	4618      	mov	r0, r3
 8019048:	f000 f84b 	bl	80190e2 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	4618      	mov	r0, r3
 8019050:	3708      	adds	r7, #8
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}

08019056 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>:
      map() = default;
 8019056:	b580      	push	{r7, lr}
 8019058:	b082      	sub	sp, #8
 801905a:	af00      	add	r7, sp, #0
 801905c:	6078      	str	r0, [r7, #4]
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	4618      	mov	r0, r3
 8019062:	f7ff ffeb 	bl	801903c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EEC1Ev>
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	4618      	mov	r0, r3
 801906a:	3708      	adds	r7, #8
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}

08019070 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>:
      ~map() = default;
 8019070:	b580      	push	{r7, lr}
 8019072:	b082      	sub	sp, #8
 8019074:	af00      	add	r7, sp, #0
 8019076:	6078      	str	r0, [r7, #4]
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	4618      	mov	r0, r3
 801907c:	f000 f851 	bl	8019122 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	4618      	mov	r0, r3
 8019084:	3708      	adds	r7, #8
 8019086:	46bd      	mov	sp, r7
 8019088:	bd80      	pop	{r7, pc}

0801908a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>:
 801908a:	b580      	push	{r7, lr}
 801908c:	b082      	sub	sp, #8
 801908e:	af00      	add	r7, sp, #0
 8019090:	6078      	str	r0, [r7, #4]
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	4618      	mov	r0, r3
 8019096:	f000 f8ac 	bl	80191f2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	4618      	mov	r0, r3
 801909e:	3708      	adds	r7, #8
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}

080190a4 <_ZN12InputCapture8InstanceC1E3PinP17TIM_HandleTypeDefmm>:
	{HAL_TIM_ACTIVE_CHANNEL_4, TIM_CHANNEL_4},
	{HAL_TIM_ACTIVE_CHANNEL_5, TIM_CHANNEL_5},
	{HAL_TIM_ACTIVE_CHANNEL_6, TIM_CHANNEL_6}
};

InputCapture::Instance::Instance(Pin pin, TIM_HandleTypeDef* timer, uint32_t channel_rising, uint32_t channel_falling) :
 80190a4:	b480      	push	{r7}
 80190a6:	b085      	sub	sp, #20
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	1d38      	adds	r0, r7, #4
 80190ae:	e880 0006 	stmia.w	r0, {r1, r2}
 80190b2:	603b      	str	r3, [r7, #0]
	pin(pin),
	timer(timer),
	channel_rising(channel_rising),
	channel_falling(channel_falling)
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	3304      	adds	r3, #4
 80190b8:	1d3a      	adds	r2, r7, #4
 80190ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190be:	e883 0003 	stmia.w	r3, {r0, r1}
 80190c2:	68fb      	ldr	r3, [r7, #12]
 80190c4:	683a      	ldr	r2, [r7, #0]
 80190c6:	60da      	str	r2, [r3, #12]
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	69ba      	ldr	r2, [r7, #24]
 80190cc:	611a      	str	r2, [r3, #16]
 80190ce:	68fb      	ldr	r3, [r7, #12]
 80190d0:	69fa      	ldr	r2, [r7, #28]
 80190d2:	615a      	str	r2, [r3, #20]
	{ }
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	4618      	mov	r0, r3
 80190d8:	3714      	adds	r7, #20
 80190da:	46bd      	mov	sp, r7
 80190dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e0:	4770      	bx	lr

080190e2 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80190e2:	b580      	push	{r7, lr}
 80190e4:	b082      	sub	sp, #8
 80190e6:	af00      	add	r7, sp, #0
 80190e8:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80190ea:	6878      	ldr	r0, [r7, #4]
 80190ec:	f000 f896 	bl	801921c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7f7 fdb8 	bl	8010c68 <_ZNSt20_Rb_tree_key_compareISt4lessIhEEC1Ev>
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	3304      	adds	r3, #4
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7f6 fe25 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	4618      	mov	r0, r3
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801910c:	b480      	push	{r7}
 801910e:	b083      	sub	sp, #12
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	4618      	mov	r0, r3
 8019118:	370c      	adds	r7, #12
 801911a:	46bd      	mov	sp, r7
 801911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019120:	4770      	bx	lr

08019122 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8019122:	b580      	push	{r7, lr}
 8019124:	b082      	sub	sp, #8
 8019126:	af00      	add	r7, sp, #0
 8019128:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 801912a:	6878      	ldr	r0, [r7, #4]
 801912c:	f000 f8a1 	bl	8019272 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>
 8019130:	4603      	mov	r3, r0
 8019132:	4619      	mov	r1, r3
 8019134:	6878      	ldr	r0, [r7, #4]
 8019136:	f000 f87d 	bl	8019234 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	4618      	mov	r0, r3
 801913e:	f7ff ff71 	bl	8019024 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	4618      	mov	r0, r3
 8019146:	3708      	adds	r7, #8
 8019148:	46bd      	mov	sp, r7
 801914a:	bd80      	pop	{r7, pc}

0801914c <_ZNSaISt4pairIKmmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801914c:	b580      	push	{r7, lr}
 801914e:	b082      	sub	sp, #8
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
 8019154:	6878      	ldr	r0, [r7, #4]
 8019156:	f000 f898 	bl	801928a <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	4618      	mov	r0, r3
 801915e:	3708      	adds	r7, #8
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <_ZNSaISt4pairIKmmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	4618      	mov	r0, r3
 8019170:	370c      	adds	r7, #12
 8019172:	46bd      	mov	sp, r7
 8019174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019178:	4770      	bx	lr

0801917a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>:
      map(initializer_list<value_type> __l,
 801917a:	b5b0      	push	{r4, r5, r7, lr}
 801917c:	b086      	sub	sp, #24
 801917e:	af00      	add	r7, sp, #0
 8019180:	60f8      	str	r0, [r7, #12]
 8019182:	1d38      	adds	r0, r7, #4
 8019184:	e880 0006 	stmia.w	r0, {r1, r2}
 8019188:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 801918a:	68fc      	ldr	r4, [r7, #12]
 801918c:	f107 0314 	add.w	r3, r7, #20
 8019190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019192:	4618      	mov	r0, r3
 8019194:	f000 f884 	bl	80192a0 <_ZNSaISt4pairIKmmEEC1ERKS2_>
 8019198:	f107 0314 	add.w	r3, r7, #20
 801919c:	461a      	mov	r2, r3
 801919e:	6839      	ldr	r1, [r7, #0]
 80191a0:	4620      	mov	r0, r4
 80191a2:	f000 f88b 	bl	80192bc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>
 80191a6:	f107 0314 	add.w	r3, r7, #20
 80191aa:	4618      	mov	r0, r3
 80191ac:	f7ff ffda 	bl	8019164 <_ZNSaISt4pairIKmmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 80191b0:	68fc      	ldr	r4, [r7, #12]
 80191b2:	1d3b      	adds	r3, r7, #4
 80191b4:	4618      	mov	r0, r3
 80191b6:	f000 f89f 	bl	80192f8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 80191ba:	4605      	mov	r5, r0
 80191bc:	1d3b      	adds	r3, r7, #4
 80191be:	4618      	mov	r0, r3
 80191c0:	f000 f8a6 	bl	8019310 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>
 80191c4:	4603      	mov	r3, r0
 80191c6:	461a      	mov	r2, r3
 80191c8:	4629      	mov	r1, r5
 80191ca:	4620      	mov	r0, r4
 80191cc:	f000 f8b2 	bl	8019334 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>
 80191d0:	68fb      	ldr	r3, [r7, #12]
 80191d2:	4618      	mov	r0, r3
 80191d4:	3718      	adds	r7, #24
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bdb0      	pop	{r4, r5, r7, pc}

080191da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80191da:	b580      	push	{r7, lr}
 80191dc:	b082      	sub	sp, #8
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f000 f8d2 	bl	801938c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	4618      	mov	r0, r3
 80191ec:	3708      	adds	r7, #8
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd80      	pop	{r7, pc}

080191f2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80191f2:	b580      	push	{r7, lr}
 80191f4:	b082      	sub	sp, #8
 80191f6:	af00      	add	r7, sp, #0
 80191f8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80191fa:	6878      	ldr	r0, [r7, #4]
 80191fc:	f000 f8f0 	bl	80193e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8019200:	4603      	mov	r3, r0
 8019202:	4619      	mov	r1, r3
 8019204:	6878      	ldr	r0, [r7, #4]
 8019206:	f000 f8cc 	bl	80193a2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	4618      	mov	r0, r3
 801920e:	f7ff ffe4 	bl	80191da <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EED1Ev>
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	4618      	mov	r0, r3
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <_ZNSaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	6878      	ldr	r0, [r7, #4]
 8019226:	f000 f92e 	bl	8019486 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	4618      	mov	r0, r3
 801922e:	3708      	adds	r7, #8
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}

08019234 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019234:	b580      	push	{r7, lr}
 8019236:	b084      	sub	sp, #16
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d012      	beq.n	801926a <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 8019244:	6838      	ldr	r0, [r7, #0]
 8019246:	f000 f929 	bl	801949c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801924a:	4603      	mov	r3, r0
 801924c:	4619      	mov	r1, r3
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f7ff fff0 	bl	8019234 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 8019254:	6838      	ldr	r0, [r7, #0]
 8019256:	f000 f92d 	bl	80194b4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801925a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 801925c:	6839      	ldr	r1, [r7, #0]
 801925e:	6878      	ldr	r0, [r7, #4]
 8019260:	f000 f934 	bl	80194cc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8019268:	e7e9      	b.n	801923e <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 801926a:	bf00      	nop
 801926c:	3710      	adds	r7, #16
 801926e:	46bd      	mov	sp, r7
 8019270:	bd80      	pop	{r7, pc}

08019272 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8019272:	b480      	push	{r7}
 8019274:	b083      	sub	sp, #12
 8019276:	af00      	add	r7, sp, #0
 8019278:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	689b      	ldr	r3, [r3, #8]
 801927e:	4618      	mov	r0, r3
 8019280:	370c      	adds	r7, #12
 8019282:	46bd      	mov	sp, r7
 8019284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019288:	4770      	bx	lr

0801928a <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801928a:	b480      	push	{r7}
 801928c:	b083      	sub	sp, #12
 801928e:	af00      	add	r7, sp, #0
 8019290:	6078      	str	r0, [r7, #4]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	4618      	mov	r0, r3
 8019296:	370c      	adds	r7, #12
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr

080192a0 <_ZNSaISt4pairIKmmEEC1ERKS2_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b082      	sub	sp, #8
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80192aa:	6839      	ldr	r1, [r7, #0]
 80192ac:	6878      	ldr	r0, [r7, #4]
 80192ae:	f000 f91e 	bl	80194ee <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	4618      	mov	r0, r3
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EEC1ERKS6_RKS7_>:
      _Rb_tree(const _Compare& __comp,
 80192bc:	b590      	push	{r4, r7, lr}
 80192be:	b087      	sub	sp, #28
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	60f8      	str	r0, [r7, #12]
 80192c4:	60b9      	str	r1, [r7, #8]
 80192c6:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 80192c8:	68fc      	ldr	r4, [r7, #12]
 80192ca:	f107 0314 	add.w	r3, r7, #20
 80192ce:	6879      	ldr	r1, [r7, #4]
 80192d0:	4618      	mov	r0, r3
 80192d2:	f000 f918 	bl	8019506 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>
 80192d6:	f107 0314 	add.w	r3, r7, #20
 80192da:	461a      	mov	r2, r3
 80192dc:	68b9      	ldr	r1, [r7, #8]
 80192de:	4620      	mov	r0, r4
 80192e0:	f000 f91e 	bl	8019520 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>
 80192e4:	f107 0314 	add.w	r3, r7, #20
 80192e8:	4618      	mov	r0, r3
 80192ea:	f000 f84f 	bl	801938c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	4618      	mov	r0, r3
 80192f2:	371c      	adds	r7, #28
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd90      	pop	{r4, r7, pc}

080192f8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 80192f8:	b480      	push	{r7}
 80192fa:	b083      	sub	sp, #12
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	4618      	mov	r0, r3
 8019306:	370c      	adds	r7, #12
 8019308:	46bd      	mov	sp, r7
 801930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801930e:	4770      	bx	lr

08019310 <_ZNKSt16initializer_listISt4pairIKmmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 8019310:	b590      	push	{r4, r7, lr}
 8019312:	b083      	sub	sp, #12
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	6878      	ldr	r0, [r7, #4]
 801931a:	f7ff ffed 	bl	80192f8 <_ZNKSt16initializer_listISt4pairIKmmEE5beginEv>
 801931e:	4604      	mov	r4, r0
 8019320:	6878      	ldr	r0, [r7, #4]
 8019322:	f000 f91a 	bl	801955a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>
 8019326:	4603      	mov	r3, r0
 8019328:	00db      	lsls	r3, r3, #3
 801932a:	4423      	add	r3, r4
 801932c:	4618      	mov	r0, r3
 801932e:	370c      	adds	r7, #12
 8019330:	46bd      	mov	sp, r7
 8019332:	bd90      	pop	{r4, r7, pc}

08019334 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 8019334:	b580      	push	{r7, lr}
 8019336:	b088      	sub	sp, #32
 8019338:	af00      	add	r7, sp, #0
 801933a:	60f8      	str	r0, [r7, #12]
 801933c:	60b9      	str	r1, [r7, #8]
 801933e:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 8019340:	f107 0314 	add.w	r3, r7, #20
 8019344:	68f9      	ldr	r1, [r7, #12]
 8019346:	4618      	mov	r0, r3
 8019348:	f000 f913 	bl	8019572 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>
	  for (; __first != __last; ++__first)
 801934c:	68ba      	ldr	r2, [r7, #8]
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	429a      	cmp	r2, r3
 8019352:	d017      	beq.n	8019384 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 8019354:	68f8      	ldr	r0, [r7, #12]
 8019356:	f000 f91b 	bl	8019590 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>
 801935a:	4603      	mov	r3, r0
 801935c:	61fb      	str	r3, [r7, #28]
 801935e:	f107 021c 	add.w	r2, r7, #28
 8019362:	f107 0318 	add.w	r3, r7, #24
 8019366:	4611      	mov	r1, r2
 8019368:	4618      	mov	r0, r3
 801936a:	f000 f87c 	bl	8019466 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>
 801936e:	f107 0314 	add.w	r3, r7, #20
 8019372:	68ba      	ldr	r2, [r7, #8]
 8019374:	69b9      	ldr	r1, [r7, #24]
 8019376:	68f8      	ldr	r0, [r7, #12]
 8019378:	f000 f91b 	bl	80195b2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>
	  for (; __first != __last; ++__first)
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	3308      	adds	r3, #8
 8019380:	60bb      	str	r3, [r7, #8]
 8019382:	e7e3      	b.n	801934c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE22_M_insert_range_uniqueIPKS2_EENSt9enable_ifIXsrSt7is_sameIS2_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESF_SF_+0x18>
	}
 8019384:	bf00      	nop
 8019386:	3720      	adds	r7, #32
 8019388:	46bd      	mov	sp, r7
 801938a:	bd80      	pop	{r7, pc}

0801938c <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 801938c:	b480      	push	{r7}
 801938e:	b083      	sub	sp, #12
 8019390:	af00      	add	r7, sp, #0
 8019392:	6078      	str	r0, [r7, #4]
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	4618      	mov	r0, r3
 8019398:	370c      	adds	r7, #12
 801939a:	46bd      	mov	sp, r7
 801939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a0:	4770      	bx	lr

080193a2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80193a2:	b580      	push	{r7, lr}
 80193a4:	b084      	sub	sp, #16
 80193a6:	af00      	add	r7, sp, #0
 80193a8:	6078      	str	r0, [r7, #4]
 80193aa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d012      	beq.n	80193d8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0x36>
	  _M_erase(_S_right(__x));
 80193b2:	6838      	ldr	r0, [r7, #0]
 80193b4:	f000 f930 	bl	8019618 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80193b8:	4603      	mov	r3, r0
 80193ba:	4619      	mov	r1, r3
 80193bc:	6878      	ldr	r0, [r7, #4]
 80193be:	f7ff fff0 	bl	80193a2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E>
	  _Link_type __y = _S_left(__x);
 80193c2:	6838      	ldr	r0, [r7, #0]
 80193c4:	f000 f934 	bl	8019630 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 80193c8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 80193ca:	6839      	ldr	r1, [r7, #0]
 80193cc:	6878      	ldr	r0, [r7, #4]
 80193ce:	f000 f93b 	bl	8019648 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>
	  __x = __y;
 80193d2:	68fb      	ldr	r3, [r7, #12]
 80193d4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80193d6:	e7e9      	b.n	80193ac <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E+0xa>
    }
 80193d8:	bf00      	nop
 80193da:	3710      	adds	r7, #16
 80193dc:	46bd      	mov	sp, r7
 80193de:	bd80      	pop	{r7, pc}

080193e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 80193e0:	b480      	push	{r7}
 80193e2:	b083      	sub	sp, #12
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	689b      	ldr	r3, [r3, #8]
 80193ec:	4618      	mov	r0, r3
 80193ee:	370c      	adds	r7, #12
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr

080193f8 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>:
      _M_valptr()
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	3310      	adds	r3, #16
 8019404:	4618      	mov	r0, r3
 8019406:	f000 f930 	bl	801966a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>
 801940a:	4603      	mov	r3, r0
 801940c:	4618      	mov	r0, r3
 801940e:	3708      	adds	r7, #8
 8019410:	46bd      	mov	sp, r7
 8019412:	bd80      	pop	{r7, pc}

08019414 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8019414:	b480      	push	{r7}
 8019416:	b083      	sub	sp, #12
 8019418:	af00      	add	r7, sp, #0
 801941a:	6078      	str	r0, [r7, #4]
 801941c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681a      	ldr	r2, [r3, #0]
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	429a      	cmp	r2, r3
 8019428:	bf0c      	ite	eq
 801942a:	2301      	moveq	r3, #1
 801942c:	2300      	movne	r3, #0
 801942e:	b2db      	uxtb	r3, r3
 8019430:	4618      	mov	r0, r3
 8019432:	370c      	adds	r7, #12
 8019434:	46bd      	mov	sp, r7
 8019436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943a:	4770      	bx	lr

0801943c <_ZNKSt4lessImEclERKmS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 801943c:	b480      	push	{r7}
 801943e:	b085      	sub	sp, #20
 8019440:	af00      	add	r7, sp, #0
 8019442:	60f8      	str	r0, [r7, #12]
 8019444:	60b9      	str	r1, [r7, #8]
 8019446:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	681a      	ldr	r2, [r3, #0]
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	429a      	cmp	r2, r3
 8019452:	bf34      	ite	cc
 8019454:	2301      	movcc	r3, #1
 8019456:	2300      	movcs	r3, #0
 8019458:	b2db      	uxtb	r3, r3
 801945a:	4618      	mov	r0, r3
 801945c:	3714      	adds	r7, #20
 801945e:	46bd      	mov	sp, r7
 8019460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019464:	4770      	bx	lr

08019466 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKmmEEC1ERKSt17_Rb_tree_iteratorIS2_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8019466:	b480      	push	{r7}
 8019468:	b083      	sub	sp, #12
 801946a:	af00      	add	r7, sp, #0
 801946c:	6078      	str	r0, [r7, #4]
 801946e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8019470:	683b      	ldr	r3, [r7, #0]
 8019472:	681a      	ldr	r2, [r3, #0]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	601a      	str	r2, [r3, #0]
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	4618      	mov	r0, r3
 801947c:	370c      	adds	r7, #12
 801947e:	46bd      	mov	sp, r7
 8019480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019484:	4770      	bx	lr

08019486 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEC1Ev>:
 8019486:	b480      	push	{r7}
 8019488:	b083      	sub	sp, #12
 801948a:	af00      	add	r7, sp, #0
 801948c:	6078      	str	r0, [r7, #4]
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	4618      	mov	r0, r3
 8019492:	370c      	adds	r7, #12
 8019494:	46bd      	mov	sp, r7
 8019496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801949a:	4770      	bx	lr

0801949c <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801949c:	b480      	push	{r7}
 801949e:	b083      	sub	sp, #12
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	4618      	mov	r0, r3
 80194aa:	370c      	adds	r7, #12
 80194ac:	46bd      	mov	sp, r7
 80194ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b2:	4770      	bx	lr

080194b4 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80194b4:	b480      	push	{r7}
 80194b6:	b083      	sub	sp, #12
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	689b      	ldr	r3, [r3, #8]
 80194c0:	4618      	mov	r0, r3
 80194c2:	370c      	adds	r7, #12
 80194c4:	46bd      	mov	sp, r7
 80194c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ca:	4770      	bx	lr

080194cc <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80194d6:	6839      	ldr	r1, [r7, #0]
 80194d8:	6878      	ldr	r0, [r7, #4]
 80194da:	f000 fa25 	bl	8019928 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 80194de:	6839      	ldr	r1, [r7, #0]
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f000 fa36 	bl	8019952 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 80194e6:	bf00      	nop
 80194e8:	3708      	adds	r7, #8
 80194ea:	46bd      	mov	sp, r7
 80194ec:	bd80      	pop	{r7, pc}

080194ee <_ZN9__gnu_cxx13new_allocatorISt4pairIKmmEEC1ERKS4_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80194ee:	b480      	push	{r7}
 80194f0:	b083      	sub	sp, #12
 80194f2:	af00      	add	r7, sp, #0
 80194f4:	6078      	str	r0, [r7, #4]
 80194f6:	6039      	str	r1, [r7, #0]
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	4618      	mov	r0, r3
 80194fc:	370c      	adds	r7, #12
 80194fe:	46bd      	mov	sp, r7
 8019500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019504:	4770      	bx	lr

08019506 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1IS2_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8019506:	b580      	push	{r7, lr}
 8019508:	b082      	sub	sp, #8
 801950a:	af00      	add	r7, sp, #0
 801950c:	6078      	str	r0, [r7, #4]
 801950e:	6039      	str	r1, [r7, #0]
 8019510:	6878      	ldr	r0, [r7, #4]
 8019512:	f000 fa30 	bl	8019976 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	4618      	mov	r0, r3
 801951a:	3708      	adds	r7, #8
 801951c:	46bd      	mov	sp, r7
 801951e:	bd80      	pop	{r7, pc}

08019520 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE13_Rb_tree_implIS6_Lb1EEC1ERKS6_OSaISt13_Rb_tree_nodeIS2_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 8019520:	b580      	push	{r7, lr}
 8019522:	b084      	sub	sp, #16
 8019524:	af00      	add	r7, sp, #0
 8019526:	60f8      	str	r0, [r7, #12]
 8019528:	60b9      	str	r1, [r7, #8]
 801952a:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	f000 fa2d 	bl	801998c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8019532:	4603      	mov	r3, r0
 8019534:	4619      	mov	r1, r3
 8019536:	68f8      	ldr	r0, [r7, #12]
 8019538:	f000 fa33 	bl	80199a2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	68b9      	ldr	r1, [r7, #8]
 8019540:	4618      	mov	r0, r3
 8019542:	f000 fa3c 	bl	80199be <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	3304      	adds	r3, #4
 801954a:	4618      	mov	r0, r3
 801954c:	f7f6 fbfe 	bl	800fd4c <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	4618      	mov	r0, r3
 8019554:	3710      	adds	r7, #16
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}

0801955a <_ZNKSt16initializer_listISt4pairIKmmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 801955a:	b480      	push	{r7}
 801955c:	b083      	sub	sp, #12
 801955e:	af00      	add	r7, sp, #0
 8019560:	6078      	str	r0, [r7, #4]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	685b      	ldr	r3, [r3, #4]
 8019566:	4618      	mov	r0, r3
 8019568:	370c      	adds	r7, #12
 801956a:	46bd      	mov	sp, r7
 801956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019570:	4770      	bx	lr

08019572 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeC1ERS8_>:
	_Alloc_node(_Rb_tree& __t)
 8019572:	b480      	push	{r7}
 8019574:	b083      	sub	sp, #12
 8019576:	af00      	add	r7, sp, #0
 8019578:	6078      	str	r0, [r7, #4]
 801957a:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	683a      	ldr	r2, [r7, #0]
 8019580:	601a      	str	r2, [r3, #0]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	4618      	mov	r0, r3
 8019586:	370c      	adds	r7, #12
 8019588:	46bd      	mov	sp, r7
 801958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958e:	4770      	bx	lr

08019590 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	1d1a      	adds	r2, r3, #4
 801959c:	f107 030c 	add.w	r3, r7, #12
 80195a0:	4611      	mov	r1, r2
 80195a2:	4618      	mov	r0, r3
 80195a4:	f000 f9b1 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	4618      	mov	r0, r3
 80195ac:	3710      	adds	r7, #16
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}

080195b2 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80195b2:	b5b0      	push	{r4, r5, r7, lr}
 80195b4:	b08a      	sub	sp, #40	; 0x28
 80195b6:	af02      	add	r7, sp, #8
 80195b8:	60f8      	str	r0, [r7, #12]
 80195ba:	60b9      	str	r1, [r7, #8]
 80195bc:	607a      	str	r2, [r7, #4]
 80195be:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 80195c0:	f107 0318 	add.w	r3, r7, #24
 80195c4:	6879      	ldr	r1, [r7, #4]
 80195c6:	4618      	mov	r0, r3
 80195c8:	f000 fa05 	bl	80199d6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 80195cc:	4603      	mov	r3, r0
 80195ce:	f107 0010 	add.w	r0, r7, #16
 80195d2:	68ba      	ldr	r2, [r7, #8]
 80195d4:	68f9      	ldr	r1, [r7, #12]
 80195d6:	f000 f862 	bl	801969e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>
      if (__res.second)
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d00f      	beq.n	8019600 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 80195e0:	693c      	ldr	r4, [r7, #16]
 80195e2:	697d      	ldr	r5, [r7, #20]
 80195e4:	6878      	ldr	r0, [r7, #4]
 80195e6:	f000 fa02 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 80195ea:	4602      	mov	r2, r0
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	9300      	str	r3, [sp, #0]
 80195f0:	4613      	mov	r3, r2
 80195f2:	462a      	mov	r2, r5
 80195f4:	4621      	mov	r1, r4
 80195f6:	68f8      	ldr	r0, [r7, #12]
 80195f8:	f000 fa04 	bl	8019a04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>
 80195fc:	4603      	mov	r3, r0
			  __node_gen);
 80195fe:	e007      	b.n	8019610 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_insert_unique_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EOT_RT0_+0x5e>
      return iterator(__res.first);
 8019600:	693a      	ldr	r2, [r7, #16]
 8019602:	f107 031c 	add.w	r3, r7, #28
 8019606:	4611      	mov	r1, r2
 8019608:	4618      	mov	r0, r3
 801960a:	f000 f97e 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 801960e:	69fb      	ldr	r3, [r7, #28]
    }
 8019610:	4618      	mov	r0, r3
 8019612:	3720      	adds	r7, #32
 8019614:	46bd      	mov	sp, r7
 8019616:	bdb0      	pop	{r4, r5, r7, pc}

08019618 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019618:	b480      	push	{r7}
 801961a:	b083      	sub	sp, #12
 801961c:	af00      	add	r7, sp, #0
 801961e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	68db      	ldr	r3, [r3, #12]
 8019624:	4618      	mov	r0, r3
 8019626:	370c      	adds	r7, #12
 8019628:	46bd      	mov	sp, r7
 801962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801962e:	4770      	bx	lr

08019630 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8019630:	b480      	push	{r7}
 8019632:	b083      	sub	sp, #12
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	689b      	ldr	r3, [r3, #8]
 801963c:	4618      	mov	r0, r3
 801963e:	370c      	adds	r7, #12
 8019640:	46bd      	mov	sp, r7
 8019642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019646:	4770      	bx	lr

08019648 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]
 8019650:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8019652:	6839      	ldr	r1, [r7, #0]
 8019654:	6878      	ldr	r0, [r7, #4]
 8019656:	f000 fa1e 	bl	8019a96 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>
	_M_put_node(__p);
 801965a:	6839      	ldr	r1, [r7, #0]
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f000 fa2f 	bl	8019ac0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>
      }
 8019662:	bf00      	nop
 8019664:	3708      	adds	r7, #8
 8019666:	46bd      	mov	sp, r7
 8019668:	bd80      	pop	{r7, pc}

0801966a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE6_M_ptrEv>:
      _M_ptr() noexcept
 801966a:	b580      	push	{r7, lr}
 801966c:	b082      	sub	sp, #8
 801966e:	af00      	add	r7, sp, #0
 8019670:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f000 fa36 	bl	8019ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>
 8019678:	4603      	mov	r3, r0
 801967a:	4618      	mov	r0, r3
 801967c:	3708      	adds	r7, #8
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}

08019682 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr()
 8019682:	b580      	push	{r7, lr}
 8019684:	b082      	sub	sp, #8
 8019686:	af00      	add	r7, sp, #0
 8019688:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	3310      	adds	r3, #16
 801968e:	4618      	mov	r0, r3
 8019690:	f000 fa3f 	bl	8019b12 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8019694:	4603      	mov	r3, r0
 8019696:	4618      	mov	r0, r3
 8019698:	3708      	adds	r7, #8
 801969a:	46bd      	mov	sp, r7
 801969c:	bd80      	pop	{r7, pc}

0801969e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801969e:	b590      	push	{r4, r7, lr}
 80196a0:	b08d      	sub	sp, #52	; 0x34
 80196a2:	af00      	add	r7, sp, #0
 80196a4:	60f8      	str	r0, [r7, #12]
 80196a6:	60b9      	str	r1, [r7, #8]
 80196a8:	607a      	str	r2, [r7, #4]
 80196aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80196ac:	1d3b      	adds	r3, r7, #4
 80196ae:	4618      	mov	r0, r3
 80196b0:	f000 fa4c 	bl	8019b4c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>
 80196b4:	4603      	mov	r3, r0
 80196b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80196b8:	69bc      	ldr	r4, [r7, #24]
 80196ba:	68b8      	ldr	r0, [r7, #8]
 80196bc:	f000 fa1d 	bl	8019afa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 80196c0:	4603      	mov	r3, r0
 80196c2:	429c      	cmp	r4, r3
 80196c4:	bf0c      	ite	eq
 80196c6:	2301      	moveq	r3, #1
 80196c8:	2300      	movne	r3, #0
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	d030      	beq.n	8019732 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x94>
	  if (size() > 0
 80196d0:	68b8      	ldr	r0, [r7, #8]
 80196d2:	f000 fa4c 	bl	8019b6e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>
 80196d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d013      	beq.n	8019704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 80196dc:	68bc      	ldr	r4, [r7, #8]
 80196de:	68b8      	ldr	r0, [r7, #8]
 80196e0:	f000 fa51 	bl	8019b86 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 80196e4:	4603      	mov	r3, r0
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	4618      	mov	r0, r3
 80196ea:	f000 fa58 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80196ee:	4603      	mov	r3, r0
 80196f0:	683a      	ldr	r2, [r7, #0]
 80196f2:	4619      	mov	r1, r3
 80196f4:	4620      	mov	r0, r4
 80196f6:	f7ff fea1 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 80196fa:	4603      	mov	r3, r0
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d001      	beq.n	8019704 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x66>
 8019700:	2301      	movs	r3, #1
 8019702:	e000      	b.n	8019706 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x68>
 8019704:	2300      	movs	r3, #0
	  if (size() > 0
 8019706:	2b00      	cmp	r3, #0
 8019708:	d00c      	beq.n	8019724 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801970a:	2300      	movs	r3, #0
 801970c:	61fb      	str	r3, [r7, #28]
 801970e:	68b8      	ldr	r0, [r7, #8]
 8019710:	f000 fa39 	bl	8019b86 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019714:	4602      	mov	r2, r0
 8019716:	f107 031c 	add.w	r3, r7, #28
 801971a:	4619      	mov	r1, r3
 801971c:	68f8      	ldr	r0, [r7, #12]
 801971e:	f7f8 ffdd 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019722:	e0db      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8019724:	68fb      	ldr	r3, [r7, #12]
 8019726:	683a      	ldr	r2, [r7, #0]
 8019728:	68b9      	ldr	r1, [r7, #8]
 801972a:	4618      	mov	r0, r3
 801972c:	f000 fa43 	bl	8019bb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 8019730:	e0d4      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8019732:	68bc      	ldr	r4, [r7, #8]
 8019734:	69bb      	ldr	r3, [r7, #24]
 8019736:	4618      	mov	r0, r3
 8019738:	f000 fa31 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801973c:	4603      	mov	r3, r0
 801973e:	461a      	mov	r2, r3
 8019740:	6839      	ldr	r1, [r7, #0]
 8019742:	4620      	mov	r0, r4
 8019744:	f7ff fe7a 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019748:	4603      	mov	r3, r0
 801974a:	2b00      	cmp	r3, #0
 801974c:	d057      	beq.n	80197fe <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x160>
	  iterator __before = __pos;
 801974e:	69bb      	ldr	r3, [r7, #24]
 8019750:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8019752:	69bc      	ldr	r4, [r7, #24]
 8019754:	68b8      	ldr	r0, [r7, #8]
 8019756:	f000 fab3 	bl	8019cc0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 801975a:	4603      	mov	r3, r0
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	429c      	cmp	r4, r3
 8019760:	bf0c      	ite	eq
 8019762:	2301      	moveq	r3, #1
 8019764:	2300      	movne	r3, #0
 8019766:	b2db      	uxtb	r3, r3
 8019768:	2b00      	cmp	r3, #0
 801976a:	d00d      	beq.n	8019788 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 801976c:	68b8      	ldr	r0, [r7, #8]
 801976e:	f000 faa7 	bl	8019cc0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 8019772:	4604      	mov	r4, r0
 8019774:	68b8      	ldr	r0, [r7, #8]
 8019776:	f000 faa3 	bl	8019cc0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>
 801977a:	4603      	mov	r3, r0
 801977c:	461a      	mov	r2, r3
 801977e:	4621      	mov	r1, r4
 8019780:	68f8      	ldr	r0, [r7, #12]
 8019782:	f7f9 f852 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8019786:	e0a9      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8019788:	68bc      	ldr	r4, [r7, #8]
 801978a:	f107 0314 	add.w	r3, r7, #20
 801978e:	4618      	mov	r0, r3
 8019790:	f000 faa2 	bl	8019cd8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
 8019794:	4603      	mov	r3, r0
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	4618      	mov	r0, r3
 801979a:	f000 fa00 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801979e:	4603      	mov	r3, r0
 80197a0:	683a      	ldr	r2, [r7, #0]
 80197a2:	4619      	mov	r1, r3
 80197a4:	4620      	mov	r0, r4
 80197a6:	f7ff fe49 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 80197aa:	4603      	mov	r3, r0
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d01f      	beq.n	80197f0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 80197b0:	697b      	ldr	r3, [r7, #20]
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7ff ff30 	bl	8019618 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 80197b8:	4603      	mov	r3, r0
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	bf0c      	ite	eq
 80197be:	2301      	moveq	r3, #1
 80197c0:	2300      	movne	r3, #0
 80197c2:	b2db      	uxtb	r3, r3
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d00a      	beq.n	80197de <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x140>
		return _Res(0, __before._M_node);
 80197c8:	2300      	movs	r3, #0
 80197ca:	623b      	str	r3, [r7, #32]
 80197cc:	f107 0214 	add.w	r2, r7, #20
 80197d0:	f107 0320 	add.w	r3, r7, #32
 80197d4:	4619      	mov	r1, r3
 80197d6:	68f8      	ldr	r0, [r7, #12]
 80197d8:	f7f8 ff80 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80197dc:	e07e      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 80197de:	f107 0218 	add.w	r2, r7, #24
 80197e2:	f107 0318 	add.w	r3, r7, #24
 80197e6:	4619      	mov	r1, r3
 80197e8:	68f8      	ldr	r0, [r7, #12]
 80197ea:	f7f9 f81e 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80197ee:	e075      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	683a      	ldr	r2, [r7, #0]
 80197f4:	68b9      	ldr	r1, [r7, #8]
 80197f6:	4618      	mov	r0, r3
 80197f8:	f000 f9dd 	bl	8019bb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80197fc:	e06e      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80197fe:	68bc      	ldr	r4, [r7, #8]
 8019800:	69bb      	ldr	r3, [r7, #24]
 8019802:	4618      	mov	r0, r3
 8019804:	f000 f9cb 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019808:	4603      	mov	r3, r0
 801980a:	683a      	ldr	r2, [r7, #0]
 801980c:	4619      	mov	r1, r3
 801980e:	4620      	mov	r0, r4
 8019810:	f7ff fe14 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019814:	4603      	mov	r3, r0
 8019816:	2b00      	cmp	r3, #0
 8019818:	d056      	beq.n	80198c8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x22a>
	  iterator __after = __pos;
 801981a:	69bb      	ldr	r3, [r7, #24]
 801981c:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 801981e:	69bc      	ldr	r4, [r7, #24]
 8019820:	68b8      	ldr	r0, [r7, #8]
 8019822:	f000 f9b0 	bl	8019b86 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019826:	4603      	mov	r3, r0
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	429c      	cmp	r4, r3
 801982c:	bf0c      	ite	eq
 801982e:	2301      	moveq	r3, #1
 8019830:	2300      	movne	r3, #0
 8019832:	b2db      	uxtb	r3, r3
 8019834:	2b00      	cmp	r3, #0
 8019836:	d00c      	beq.n	8019852 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8019838:	2300      	movs	r3, #0
 801983a:	627b      	str	r3, [r7, #36]	; 0x24
 801983c:	68b8      	ldr	r0, [r7, #8]
 801983e:	f000 f9a2 	bl	8019b86 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>
 8019842:	4602      	mov	r2, r0
 8019844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019848:	4619      	mov	r1, r3
 801984a:	68f8      	ldr	r0, [r7, #12]
 801984c:	f7f8 ff46 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8019850:	e044      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8019852:	68bc      	ldr	r4, [r7, #8]
 8019854:	f107 0310 	add.w	r3, r7, #16
 8019858:	4618      	mov	r0, r3
 801985a:	f000 fa4e 	bl	8019cfa <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>
 801985e:	4603      	mov	r3, r0
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	4618      	mov	r0, r3
 8019864:	f000 f99b 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019868:	4603      	mov	r3, r0
 801986a:	461a      	mov	r2, r3
 801986c:	6839      	ldr	r1, [r7, #0]
 801986e:	4620      	mov	r0, r4
 8019870:	f7ff fde4 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019874:	4603      	mov	r3, r0
 8019876:	2b00      	cmp	r3, #0
 8019878:	d01f      	beq.n	80198ba <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 801987a:	69bb      	ldr	r3, [r7, #24]
 801987c:	4618      	mov	r0, r3
 801987e:	f7ff fecb 	bl	8019618 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8019882:	4603      	mov	r3, r0
 8019884:	2b00      	cmp	r3, #0
 8019886:	bf0c      	ite	eq
 8019888:	2301      	moveq	r3, #1
 801988a:	2300      	movne	r3, #0
 801988c:	b2db      	uxtb	r3, r3
 801988e:	2b00      	cmp	r3, #0
 8019890:	d00a      	beq.n	80198a8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8019892:	2300      	movs	r3, #0
 8019894:	62bb      	str	r3, [r7, #40]	; 0x28
 8019896:	f107 0218 	add.w	r2, r7, #24
 801989a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801989e:	4619      	mov	r1, r3
 80198a0:	68f8      	ldr	r0, [r7, #12]
 80198a2:	f7f8 ff1b 	bl	80126dc <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80198a6:	e019      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 80198a8:	f107 0210 	add.w	r2, r7, #16
 80198ac:	f107 0310 	add.w	r3, r7, #16
 80198b0:	4619      	mov	r1, r3
 80198b2:	68f8      	ldr	r0, [r7, #12]
 80198b4:	f7f8 ffb9 	bl	801282a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80198b8:	e010      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80198ba:	68fb      	ldr	r3, [r7, #12]
 80198bc:	683a      	ldr	r2, [r7, #0]
 80198be:	68b9      	ldr	r1, [r7, #8]
 80198c0:	4618      	mov	r0, r3
 80198c2:	f000 f978 	bl	8019bb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>
 80198c6:	e009      	b.n	80198dc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 80198c8:	2300      	movs	r3, #0
 80198ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80198d0:	f107 0318 	add.w	r3, r7, #24
 80198d4:	4619      	mov	r1, r3
 80198d6:	68f8      	ldr	r0, [r7, #12]
 80198d8:	f7f8 ffe2 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80198dc:	68f8      	ldr	r0, [r7, #12]
 80198de:	3734      	adds	r7, #52	; 0x34
 80198e0:	46bd      	mov	sp, r7
 80198e2:	bd90      	pop	{r4, r7, pc}

080198e4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>:
      _S_key(_Const_Link_type __x)
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b084      	sub	sp, #16
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f000 fa15 	bl	8019d1c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 80198f2:	4602      	mov	r2, r0
 80198f4:	f107 030c 	add.w	r3, r7, #12
 80198f8:	4611      	mov	r1, r2
 80198fa:	4618      	mov	r0, r3
 80198fc:	f000 f86b 	bl	80199d6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8019900:	4603      	mov	r3, r0
      }
 8019902:	4618      	mov	r0, r3
 8019904:	3710      	adds	r7, #16
 8019906:	46bd      	mov	sp, r7
 8019908:	bd80      	pop	{r7, pc}

0801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801990a:	b480      	push	{r7}
 801990c:	b083      	sub	sp, #12
 801990e:	af00      	add	r7, sp, #0
 8019910:	6078      	str	r0, [r7, #4]
 8019912:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	683a      	ldr	r2, [r7, #0]
 8019918:	601a      	str	r2, [r3, #0]
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	4618      	mov	r0, r3
 801991e:	370c      	adds	r7, #12
 8019920:	46bd      	mov	sp, r7
 8019922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019926:	4770      	bx	lr

08019928 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019928:	b590      	push	{r4, r7, lr}
 801992a:	b083      	sub	sp, #12
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
 8019930:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8019932:	6878      	ldr	r0, [r7, #4]
 8019934:	f000 fa00 	bl	8019d38 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8019938:	4604      	mov	r4, r0
 801993a:	6838      	ldr	r0, [r7, #0]
 801993c:	f7ff fd5c 	bl	80193f8 <_ZNSt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEE9_M_valptrEv>
 8019940:	4603      	mov	r3, r0
 8019942:	4619      	mov	r1, r3
 8019944:	4620      	mov	r0, r4
 8019946:	f000 fa02 	bl	8019d4e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>
      }
 801994a:	bf00      	nop
 801994c:	370c      	adds	r7, #12
 801994e:	46bd      	mov	sp, r7
 8019950:	bd90      	pop	{r4, r7, pc}

08019952 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019952:	b580      	push	{r7, lr}
 8019954:	b082      	sub	sp, #8
 8019956:	af00      	add	r7, sp, #0
 8019958:	6078      	str	r0, [r7, #4]
 801995a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f000 f9eb 	bl	8019d38 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>
 8019962:	4603      	mov	r3, r0
 8019964:	2201      	movs	r2, #1
 8019966:	6839      	ldr	r1, [r7, #0]
 8019968:	4618      	mov	r0, r3
 801996a:	f000 f9fc 	bl	8019d66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>
 801996e:	bf00      	nop
 8019970:	3708      	adds	r7, #8
 8019972:	46bd      	mov	sp, r7
 8019974:	bd80      	pop	{r7, pc}

08019976 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8019976:	b480      	push	{r7}
 8019978:	b083      	sub	sp, #12
 801997a:	af00      	add	r7, sp, #0
 801997c:	6078      	str	r0, [r7, #4]
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	4618      	mov	r0, r3
 8019982:	370c      	adds	r7, #12
 8019984:	46bd      	mov	sp, r7
 8019986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998a:	4770      	bx	lr

0801998c <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIKmmEEEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 801998c:	b480      	push	{r7}
 801998e:	b083      	sub	sp, #12
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	4618      	mov	r0, r3
 8019998:	370c      	adds	r7, #12
 801999a:	46bd      	mov	sp, r7
 801999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a0:	4770      	bx	lr

080199a2 <_ZNSaISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS4_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80199a2:	b580      	push	{r7, lr}
 80199a4:	b082      	sub	sp, #8
 80199a6:	af00      	add	r7, sp, #0
 80199a8:	6078      	str	r0, [r7, #4]
 80199aa:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80199ac:	6839      	ldr	r1, [r7, #0]
 80199ae:	6878      	ldr	r0, [r7, #4]
 80199b0:	f000 f9f8 	bl	8019da4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	4618      	mov	r0, r3
 80199b8:	3708      	adds	r7, #8
 80199ba:	46bd      	mov	sp, r7
 80199bc:	bd80      	pop	{r7, pc}

080199be <_ZNSt20_Rb_tree_key_compareISt4lessImEEC1ERKS1_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 80199be:	b480      	push	{r7}
 80199c0:	b083      	sub	sp, #12
 80199c2:	af00      	add	r7, sp, #0
 80199c4:	6078      	str	r0, [r7, #4]
 80199c6:	6039      	str	r1, [r7, #0]
      { }
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	4618      	mov	r0, r3
 80199cc:	370c      	adds	r7, #12
 80199ce:	46bd      	mov	sp, r7
 80199d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199d4:	4770      	bx	lr

080199d6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>:
      operator()(const _Pair& __x) const
 80199d6:	b480      	push	{r7}
 80199d8:	b083      	sub	sp, #12
 80199da:	af00      	add	r7, sp, #0
 80199dc:	6078      	str	r0, [r7, #4]
 80199de:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80199e0:	683b      	ldr	r3, [r7, #0]
 80199e2:	4618      	mov	r0, r3
 80199e4:	370c      	adds	r7, #12
 80199e6:	46bd      	mov	sp, r7
 80199e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ec:	4770      	bx	lr

080199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80199ee:	b480      	push	{r7}
 80199f0:	b083      	sub	sp, #12
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	4618      	mov	r0, r3
 80199fa:	370c      	adds	r7, #12
 80199fc:	46bd      	mov	sp, r7
 80199fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a02:	4770      	bx	lr

08019a04 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019a04:	b5b0      	push	{r4, r5, r7, lr}
 8019a06:	b088      	sub	sp, #32
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	60f8      	str	r0, [r7, #12]
 8019a0c:	60b9      	str	r1, [r7, #8]
 8019a0e:	607a      	str	r2, [r7, #4]
 8019a10:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019a12:	68bb      	ldr	r3, [r7, #8]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d11a      	bne.n	8019a4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	f000 f86e 	bl	8019afa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8019a1e:	4602      	mov	r2, r0
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	4293      	cmp	r3, r2
 8019a24:	d013      	beq.n	8019a4e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 8019a26:	68fc      	ldr	r4, [r7, #12]
 8019a28:	f107 0310 	add.w	r3, r7, #16
 8019a2c:	6839      	ldr	r1, [r7, #0]
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7ff ffd1 	bl	80199d6 <_ZNKSt10_Select1stISt4pairIKmmEEclERKS2_>
 8019a34:	4605      	mov	r5, r0
 8019a36:	6878      	ldr	r0, [r7, #4]
 8019a38:	f000 f8b1 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019a3c:	4603      	mov	r3, r0
 8019a3e:	461a      	mov	r2, r3
 8019a40:	4629      	mov	r1, r5
 8019a42:	4620      	mov	r0, r4
 8019a44:	f7ff fcfa 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019a48:	4603      	mov	r3, r0
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d001      	beq.n	8019a52 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x4e>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	e000      	b.n	8019a54 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE10_M_insert_IRKS2_NS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_EPSt18_Rb_tree_node_baseSG_OT_RT0_+0x50>
 8019a52:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 8019a54:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 8019a56:	6838      	ldr	r0, [r7, #0]
 8019a58:	f7ff ffc9 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	4619      	mov	r1, r3
 8019a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a62:	f000 f9ab 	bl	8019dbc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>
 8019a66:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8019a6c:	7ff8      	ldrb	r0, [r7, #31]
 8019a6e:	687a      	ldr	r2, [r7, #4]
 8019a70:	69b9      	ldr	r1, [r7, #24]
 8019a72:	f000 fc72 	bl	801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	695b      	ldr	r3, [r3, #20]
 8019a7a:	1c5a      	adds	r2, r3, #1
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 8019a80:	f107 0314 	add.w	r3, r7, #20
 8019a84:	69b9      	ldr	r1, [r7, #24]
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7ff ff3f 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019a8c:	697b      	ldr	r3, [r7, #20]
      }
 8019a8e:	4618      	mov	r0, r3
 8019a90:	3720      	adds	r7, #32
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bdb0      	pop	{r4, r5, r7, pc}

08019a96 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019a96:	b590      	push	{r4, r7, lr}
 8019a98:	b083      	sub	sp, #12
 8019a9a:	af00      	add	r7, sp, #0
 8019a9c:	6078      	str	r0, [r7, #4]
 8019a9e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8019aa0:	6878      	ldr	r0, [r7, #4]
 8019aa2:	f000 f99f 	bl	8019de4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019aa6:	4604      	mov	r4, r0
 8019aa8:	6838      	ldr	r0, [r7, #0]
 8019aaa:	f7ff fdea 	bl	8019682 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	f000 f9a1 	bl	8019dfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>
      }
 8019ab8:	bf00      	nop
 8019aba:	370c      	adds	r7, #12
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd90      	pop	{r4, r7, pc}

08019ac0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS2_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8019ac0:	b580      	push	{r7, lr}
 8019ac2:	b082      	sub	sp, #8
 8019ac4:	af00      	add	r7, sp, #0
 8019ac6:	6078      	str	r0, [r7, #4]
 8019ac8:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f000 f98a 	bl	8019de4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	2201      	movs	r2, #1
 8019ad4:	6839      	ldr	r1, [r7, #0]
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f000 f99b 	bl	8019e12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>
 8019adc:	bf00      	nop
 8019ade:	3708      	adds	r7, #8
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bd80      	pop	{r7, pc}

08019ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKhN12InputCapture8InstanceEEE7_M_addrEv>:
      _M_addr() noexcept
 8019ae4:	b480      	push	{r7}
 8019ae6:	b083      	sub	sp, #12
 8019ae8:	af00      	add	r7, sp, #0
 8019aea:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	4618      	mov	r0, r3
 8019af0:	370c      	adds	r7, #12
 8019af2:	46bd      	mov	sp, r7
 8019af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af8:	4770      	bx	lr

08019afa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8019afa:	b480      	push	{r7}
 8019afc:	b083      	sub	sp, #12
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	3304      	adds	r3, #4
 8019b06:	4618      	mov	r0, r3
 8019b08:	370c      	adds	r7, #12
 8019b0a:	46bd      	mov	sp, r7
 8019b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b10:	4770      	bx	lr

08019b12 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() noexcept
 8019b12:	b580      	push	{r7, lr}
 8019b14:	b082      	sub	sp, #8
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f000 f998 	bl	8019e50 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8019b20:	4603      	mov	r3, r0
 8019b22:	4618      	mov	r0, r3
 8019b24:	3708      	adds	r7, #8
 8019b26:	46bd      	mov	sp, r7
 8019b28:	bd80      	pop	{r7, pc}

08019b2a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>:
      _M_get_node()
 8019b2a:	b580      	push	{r7, lr}
 8019b2c:	b082      	sub	sp, #8
 8019b2e:	af00      	add	r7, sp, #0
 8019b30:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f000 f956 	bl	8019de4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019b38:	4603      	mov	r3, r0
 8019b3a:	2101      	movs	r1, #1
 8019b3c:	4618      	mov	r0, r3
 8019b3e:	f000 f992 	bl	8019e66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>
 8019b42:	4603      	mov	r3, r0
 8019b44:	4618      	mov	r0, r3
 8019b46:	3708      	adds	r7, #8
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}

08019b4c <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKmmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b084      	sub	sp, #16
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	681a      	ldr	r2, [r3, #0]
 8019b58:	f107 030c 	add.w	r3, r7, #12
 8019b5c:	4611      	mov	r1, r2
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7ff fed3 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	4618      	mov	r0, r3
 8019b68:	3710      	adds	r7, #16
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}

08019b6e <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8019b6e:	b480      	push	{r7}
 8019b70:	b083      	sub	sp, #12
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	695b      	ldr	r3, [r3, #20]
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	370c      	adds	r7, #12
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b84:	4770      	bx	lr

08019b86 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8019b86:	b480      	push	{r7}
 8019b88:	b083      	sub	sp, #12
 8019b8a:	af00      	add	r7, sp, #0
 8019b8c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	3310      	adds	r3, #16
 8019b92:	4618      	mov	r0, r3
 8019b94:	370c      	adds	r7, #12
 8019b96:	46bd      	mov	sp, r7
 8019b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b9c:	4770      	bx	lr

08019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8019b9e:	b580      	push	{r7, lr}
 8019ba0:	b082      	sub	sp, #8
 8019ba2:	af00      	add	r7, sp, #0
 8019ba4:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f7ff fe9c 	bl	80198e4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8019bac:	4603      	mov	r3, r0
 8019bae:	4618      	mov	r0, r3
 8019bb0:	3708      	adds	r7, #8
 8019bb2:	46bd      	mov	sp, r7
 8019bb4:	bd80      	pop	{r7, pc}

08019bb6 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8019bb6:	b590      	push	{r4, r7, lr}
 8019bb8:	b08b      	sub	sp, #44	; 0x2c
 8019bba:	af00      	add	r7, sp, #0
 8019bbc:	60f8      	str	r0, [r7, #12]
 8019bbe:	60b9      	str	r1, [r7, #8]
 8019bc0:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8019bc2:	68b8      	ldr	r0, [r7, #8]
 8019bc4:	f7ff fc0c 	bl	80193e0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_M_beginEv>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8019bcc:	68b8      	ldr	r0, [r7, #8]
 8019bce:	f7ff ff94 	bl	8019afa <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_M_endEv>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8019bdc:	69bb      	ldr	r3, [r7, #24]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d020      	beq.n	8019c24 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8019be2:	69bb      	ldr	r3, [r7, #24]
 8019be4:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8019be6:	68bc      	ldr	r4, [r7, #8]
 8019be8:	69bb      	ldr	r3, [r7, #24]
 8019bea:	4618      	mov	r0, r3
 8019bec:	f7ff fe7a 	bl	80198e4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt13_Rb_tree_nodeIS2_E>
 8019bf0:	4603      	mov	r3, r0
 8019bf2:	461a      	mov	r2, r3
 8019bf4:	6879      	ldr	r1, [r7, #4]
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	f7ff fc20 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8019c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d005      	beq.n	8019c16 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x60>
 8019c0a:	69bb      	ldr	r3, [r7, #24]
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	f7ff fd0f 	bl	8019630 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE7_S_leftEPSt18_Rb_tree_node_base>
 8019c12:	4603      	mov	r3, r0
 8019c14:	e004      	b.n	8019c20 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x6a>
 8019c16:	69bb      	ldr	r3, [r7, #24]
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f7ff fcfd 	bl	8019618 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE8_S_rightEPSt18_Rb_tree_node_base>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8019c22:	e7db      	b.n	8019bdc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8019c24:	697a      	ldr	r2, [r7, #20]
 8019c26:	f107 0310 	add.w	r3, r7, #16
 8019c2a:	4611      	mov	r1, r2
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7ff fe6c 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8019c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d01d      	beq.n	8019c76 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8019c3a:	68b8      	ldr	r0, [r7, #8]
 8019c3c:	f000 f936 	bl	8019eac <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>
 8019c40:	4603      	mov	r3, r0
 8019c42:	61fb      	str	r3, [r7, #28]
 8019c44:	f107 021c 	add.w	r2, r7, #28
 8019c48:	f107 0310 	add.w	r3, r7, #16
 8019c4c:	4611      	mov	r1, r2
 8019c4e:	4618      	mov	r0, r3
 8019c50:	f7ff fbe0 	bl	8019414 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKmmEES5_>
 8019c54:	4603      	mov	r3, r0
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d008      	beq.n	8019c6c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8019c5a:	f107 0214 	add.w	r2, r7, #20
 8019c5e:	f107 0318 	add.w	r3, r7, #24
 8019c62:	4619      	mov	r1, r3
 8019c64:	68f8      	ldr	r0, [r7, #12]
 8019c66:	f000 f932 	bl	8019ece <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8019c6a:	e025      	b.n	8019cb8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8019c6c:	f107 0310 	add.w	r3, r7, #16
 8019c70:	4618      	mov	r0, r3
 8019c72:	f000 f831 	bl	8019cd8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8019c76:	68bc      	ldr	r4, [r7, #8]
 8019c78:	693b      	ldr	r3, [r7, #16]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7ff ff8f 	bl	8019b9e <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8019c80:	4603      	mov	r3, r0
 8019c82:	687a      	ldr	r2, [r7, #4]
 8019c84:	4619      	mov	r1, r3
 8019c86:	4620      	mov	r0, r4
 8019c88:	f7ff fbd8 	bl	801943c <_ZNKSt4lessImEclERKmS2_>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d008      	beq.n	8019ca4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8019c92:	f107 0214 	add.w	r2, r7, #20
 8019c96:	f107 0318 	add.w	r3, r7, #24
 8019c9a:	4619      	mov	r1, r3
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	f000 f916 	bl	8019ece <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>
 8019ca2:	e009      	b.n	8019cb8 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	623b      	str	r3, [r7, #32]
 8019ca8:	f107 0220 	add.w	r2, r7, #32
 8019cac:	f107 0310 	add.w	r3, r7, #16
 8019cb0:	4619      	mov	r1, r3
 8019cb2:	68f8      	ldr	r0, [r7, #12]
 8019cb4:	f7f8 fdf4 	bl	80128a0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8019cb8:	68f8      	ldr	r0, [r7, #12]
 8019cba:	372c      	adds	r7, #44	; 0x2c
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd90      	pop	{r4, r7, pc}

08019cc0 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8019cc0:	b480      	push	{r7}
 8019cc2:	b083      	sub	sp, #12
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	330c      	adds	r3, #12
 8019ccc:	4618      	mov	r0, r3
 8019cce:	370c      	adds	r7, #12
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd6:	4770      	bx	lr

08019cd8 <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8019cd8:	b580      	push	{r7, lr}
 8019cda:	b082      	sub	sp, #8
 8019cdc:	af00      	add	r7, sp, #0
 8019cde:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f000 fb36 	bl	801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8019cea:	4602      	mov	r2, r0
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	601a      	str	r2, [r3, #0]
	return *this;
 8019cf0:	687b      	ldr	r3, [r7, #4]
      }
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3708      	adds	r7, #8
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}

08019cfa <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b082      	sub	sp, #8
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	4618      	mov	r0, r3
 8019d08:	f000 fb23 	bl	801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	601a      	str	r2, [r3, #0]
	return *this;
 8019d12:	687b      	ldr	r3, [r7, #4]
      }
 8019d14:	4618      	mov	r0, r3
 8019d16:	3708      	adds	r7, #8
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <_ZNKSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>:
      _M_valptr() const
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	3310      	adds	r3, #16
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f000 f8e9 	bl	8019f00 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>
 8019d2e:	4603      	mov	r3, r0
 8019d30:	4618      	mov	r0, r3
 8019d32:	3708      	adds	r7, #8
 8019d34:	46bd      	mov	sp, r7
 8019d36:	bd80      	pop	{r7, pc}

08019d38 <_ZNSt8_Rb_treeIhSt4pairIKhN12InputCapture8InstanceEESt10_Select1stIS4_ESt4lessIhESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8019d38:	b480      	push	{r7}
 8019d3a:	b083      	sub	sp, #12
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	4618      	mov	r0, r3
 8019d44:	370c      	adds	r7, #12
 8019d46:	46bd      	mov	sp, r7
 8019d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d4c:	4770      	bx	lr

08019d4e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8019d4e:	b580      	push	{r7, lr}
 8019d50:	b082      	sub	sp, #8
 8019d52:	af00      	add	r7, sp, #0
 8019d54:	6078      	str	r0, [r7, #4]
 8019d56:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8019d58:	6838      	ldr	r0, [r7, #0]
 8019d5a:	f000 f8dd 	bl	8019f18 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>
	}
 8019d5e:	bf00      	nop
 8019d60:	3708      	adds	r7, #8
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}

08019d66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8019d66:	b580      	push	{r7, lr}
 8019d68:	b088      	sub	sp, #32
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	60f8      	str	r0, [r7, #12]
 8019d6e:	60b9      	str	r1, [r7, #8]
 8019d70:	607a      	str	r2, [r7, #4]
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	61fb      	str	r3, [r7, #28]
 8019d76:	68bb      	ldr	r3, [r7, #8]
 8019d78:	61bb      	str	r3, [r7, #24]
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8019d7e:	f7f4 ff29 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8019d82:	4603      	mov	r3, r0
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d003      	beq.n	8019d90 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 8019d88:	69b8      	ldr	r0, [r7, #24]
 8019d8a:	f000 fa79 	bl	801a280 <_ZdlPv>
	    return;
 8019d8e:	e005      	b.n	8019d9c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8019d90:	697a      	ldr	r2, [r7, #20]
 8019d92:	69b9      	ldr	r1, [r7, #24]
 8019d94:	69f8      	ldr	r0, [r7, #28]
 8019d96:	f000 f900 	bl	8019f9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 8019d9a:	bf00      	nop
 8019d9c:	bf00      	nop
 8019d9e:	3720      	adds	r7, #32
 8019da0:	46bd      	mov	sp, r7
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEEC1ERKS6_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8019da4:	b480      	push	{r7}
 8019da6:	b083      	sub	sp, #12
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	6078      	str	r0, [r7, #4]
 8019dac:	6039      	str	r1, [r7, #0]
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	4618      	mov	r0, r3
 8019db2:	370c      	adds	r7, #12
 8019db4:	46bd      	mov	sp, r7
 8019db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dba:	4770      	bx	lr

08019dbc <_ZNKSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_Alloc_nodeclIRKS2_EEPSt13_Rb_tree_nodeIS2_EOT_>:
	  operator()(_Arg&& __arg) const
 8019dbc:	b590      	push	{r4, r7, lr}
 8019dbe:	b083      	sub	sp, #12
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	6078      	str	r0, [r7, #4]
 8019dc4:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	681c      	ldr	r4, [r3, #0]
 8019dca:	6838      	ldr	r0, [r7, #0]
 8019dcc:	f7ff fe0f 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019dd0:	4603      	mov	r3, r0
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	4620      	mov	r0, r4
 8019dd6:	f000 f8a9 	bl	8019f2c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	4618      	mov	r0, r3
 8019dde:	370c      	adds	r7, #12
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd90      	pop	{r4, r7, pc}

08019de4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8019de4:	b480      	push	{r7}
 8019de6:	b083      	sub	sp, #12
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	4618      	mov	r0, r3
 8019df0:	370c      	adds	r7, #12
 8019df2:	46bd      	mov	sp, r7
 8019df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df8:	4770      	bx	lr

08019dfa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE7destroyIS3_EEvRS5_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8019dfa:	b580      	push	{r7, lr}
 8019dfc:	b082      	sub	sp, #8
 8019dfe:	af00      	add	r7, sp, #0
 8019e00:	6078      	str	r0, [r7, #4]
 8019e02:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8019e04:	6838      	ldr	r0, [r7, #0]
 8019e06:	f000 f8a8 	bl	8019f5a <_ZSt10destroy_atISt4pairIKmmEEvPT_>
	}
 8019e0a:	bf00      	nop
 8019e0c:	3708      	adds	r7, #8
 8019e0e:	46bd      	mov	sp, r7
 8019e10:	bd80      	pop	{r7, pc}

08019e12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8019e12:	b580      	push	{r7, lr}
 8019e14:	b088      	sub	sp, #32
 8019e16:	af00      	add	r7, sp, #0
 8019e18:	60f8      	str	r0, [r7, #12]
 8019e1a:	60b9      	str	r1, [r7, #8]
 8019e1c:	607a      	str	r2, [r7, #4]
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	61fb      	str	r3, [r7, #28]
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	61bb      	str	r3, [r7, #24]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8019e2a:	f7f4 fed3 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d003      	beq.n	8019e3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x2a>
	    ::operator delete(__p);
 8019e34:	69b8      	ldr	r0, [r7, #24]
 8019e36:	f000 fa23 	bl	801a280 <_ZdlPv>
	    return;
 8019e3a:	e005      	b.n	8019e48 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE10deallocateERS5_PS4_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8019e3c:	697a      	ldr	r2, [r7, #20]
 8019e3e:	69b9      	ldr	r1, [r7, #24]
 8019e40:	69f8      	ldr	r0, [r7, #28]
 8019e42:	f000 f8db 	bl	8019ffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>
      { __a.deallocate(__p, __n); }
 8019e46:	bf00      	nop
 8019e48:	bf00      	nop
 8019e4a:	3720      	adds	r7, #32
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() noexcept
 8019e50:	b480      	push	{r7}
 8019e52:	b083      	sub	sp, #12
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	370c      	adds	r7, #12
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e64:	4770      	bx	lr

08019e66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j>:
      allocate(allocator_type& __a, size_type __n)
 8019e66:	b580      	push	{r7, lr}
 8019e68:	b084      	sub	sp, #16
 8019e6a:	af00      	add	r7, sp, #0
 8019e6c:	6078      	str	r0, [r7, #4]
 8019e6e:	6039      	str	r1, [r7, #0]
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	60fb      	str	r3, [r7, #12]
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8019e78:	f7f4 feac 	bl	800ebd4 <_ZSt21is_constant_evaluatedv>
 8019e7c:	4603      	mov	r3, r0
 8019e7e:	2b00      	cmp	r3, #0
 8019e80:	d009      	beq.n	8019e96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8019e82:	68ba      	ldr	r2, [r7, #8]
 8019e84:	4613      	mov	r3, r2
 8019e86:	005b      	lsls	r3, r3, #1
 8019e88:	4413      	add	r3, r2
 8019e8a:	00db      	lsls	r3, r3, #3
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f000 f9fb 	bl	801a288 <_Znwj>
 8019e92:	4603      	mov	r3, r0
 8019e94:	e006      	b.n	8019ea4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE8allocateERS5_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8019e96:	2200      	movs	r2, #0
 8019e98:	68b9      	ldr	r1, [r7, #8]
 8019e9a:	68f8      	ldr	r0, [r7, #12]
 8019e9c:	f000 f8c0 	bl	801a020 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	bf00      	nop
      { return __a.allocate(__n); }
 8019ea4:	4618      	mov	r0, r3
 8019ea6:	3710      	adds	r7, #16
 8019ea8:	46bd      	mov	sp, r7
 8019eaa:	bd80      	pop	{r7, pc}

08019eac <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8019eac:	b580      	push	{r7, lr}
 8019eae:	b084      	sub	sp, #16
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	68da      	ldr	r2, [r3, #12]
 8019eb8:	f107 030c 	add.w	r3, r7, #12
 8019ebc:	4611      	mov	r1, r2
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	f7ff fd23 	bl	801990a <_ZNSt17_Rb_tree_iteratorISt4pairIKmmEEC1EPSt18_Rb_tree_node_base>
 8019ec4:	68fb      	ldr	r3, [r7, #12]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	3710      	adds	r7, #16
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	bd80      	pop	{r7, pc}

08019ece <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKmmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8019ece:	b580      	push	{r7, lr}
 8019ed0:	b084      	sub	sp, #16
 8019ed2:	af00      	add	r7, sp, #0
 8019ed4:	60f8      	str	r0, [r7, #12]
 8019ed6:	60b9      	str	r1, [r7, #8]
 8019ed8:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8019eda:	68b8      	ldr	r0, [r7, #8]
 8019edc:	f000 f847 	bl	8019f6e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8019ee0:	4603      	mov	r3, r0
 8019ee2:	681a      	ldr	r2, [r3, #0]
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	601a      	str	r2, [r3, #0]
 8019ee8:	6878      	ldr	r0, [r7, #4]
 8019eea:	f7f9 f8a5 	bl	8013038 <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8019eee:	4603      	mov	r3, r0
 8019ef0:	681a      	ldr	r2, [r3, #0]
 8019ef2:	68fb      	ldr	r3, [r7, #12]
 8019ef4:	605a      	str	r2, [r3, #4]
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	4618      	mov	r0, r3
 8019efa:	3710      	adds	r7, #16
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd80      	pop	{r7, pc}

08019f00 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b082      	sub	sp, #8
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8019f08:	6878      	ldr	r0, [r7, #4]
 8019f0a:	f000 f83b 	bl	8019f84 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>
 8019f0e:	4603      	mov	r3, r0
 8019f10:	4618      	mov	r0, r3
 8019f12:	3708      	adds	r7, #8
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bd80      	pop	{r7, pc}

08019f18 <_ZSt10destroy_atISt4pairIKhN12InputCapture8InstanceEEEvPT_>:
    destroy_at(_Tp* __location)
 8019f18:	b480      	push	{r7}
 8019f1a:	b083      	sub	sp, #12
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
    }
 8019f20:	bf00      	nop
 8019f22:	370c      	adds	r7, #12
 8019f24:	46bd      	mov	sp, r7
 8019f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f2a:	4770      	bx	lr

08019f2c <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE14_M_create_nodeIJRKS2_EEEPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8019f2c:	b580      	push	{r7, lr}
 8019f2e:	b084      	sub	sp, #16
 8019f30:	af00      	add	r7, sp, #0
 8019f32:	6078      	str	r0, [r7, #4]
 8019f34:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8019f36:	6878      	ldr	r0, [r7, #4]
 8019f38:	f7ff fdf7 	bl	8019b2a <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE11_M_get_nodeEv>
 8019f3c:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8019f3e:	6838      	ldr	r0, [r7, #0]
 8019f40:	f7ff fd55 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019f44:	4603      	mov	r3, r0
 8019f46:	461a      	mov	r2, r3
 8019f48:	68f9      	ldr	r1, [r7, #12]
 8019f4a:	6878      	ldr	r0, [r7, #4]
 8019f4c:	f000 f836 	bl	8019fbc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>
	  return __tmp;
 8019f50:	68fb      	ldr	r3, [r7, #12]
	}
 8019f52:	4618      	mov	r0, r3
 8019f54:	3710      	adds	r7, #16
 8019f56:	46bd      	mov	sp, r7
 8019f58:	bd80      	pop	{r7, pc}

08019f5a <_ZSt10destroy_atISt4pairIKmmEEvPT_>:
    destroy_at(_Tp* __location)
 8019f5a:	b480      	push	{r7}
 8019f5c:	b083      	sub	sp, #12
 8019f5e:	af00      	add	r7, sp, #0
 8019f60:	6078      	str	r0, [r7, #4]
    }
 8019f62:	bf00      	nop
 8019f64:	370c      	adds	r7, #12
 8019f66:	46bd      	mov	sp, r7
 8019f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6c:	4770      	bx	lr

08019f6e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKmmEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8019f6e:	b480      	push	{r7}
 8019f70:	b083      	sub	sp, #12
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	4618      	mov	r0, r3
 8019f7a:	370c      	adds	r7, #12
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f82:	4770      	bx	lr

08019f84 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKmmEE7_M_addrEv>:
      _M_addr() const noexcept
 8019f84:	b480      	push	{r7}
 8019f86:	b083      	sub	sp, #12
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	4618      	mov	r0, r3
 8019f90:	370c      	adds	r7, #12
 8019f92:	46bd      	mov	sp, r7
 8019f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f98:	4770      	bx	lr

08019f9a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKhN12InputCapture8InstanceEEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b084      	sub	sp, #16
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	60f8      	str	r0, [r7, #12]
 8019fa2:	60b9      	str	r1, [r7, #8]
 8019fa4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	2234      	movs	r2, #52	; 0x34
 8019faa:	fb02 f303 	mul.w	r3, r2, r3
 8019fae:	4619      	mov	r1, r3
 8019fb0:	68b8      	ldr	r0, [r7, #8]
 8019fb2:	f000 f967 	bl	801a284 <_ZdlPvj>
      }
 8019fb6:	3710      	adds	r7, #16
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE17_M_construct_nodeIJRKS2_EEEvPSt13_Rb_tree_nodeIS2_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8019fbc:	b5b0      	push	{r4, r5, r7, lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	60f8      	str	r0, [r7, #12]
 8019fc4:	60b9      	str	r1, [r7, #8]
 8019fc6:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	4619      	mov	r1, r3
 8019fcc:	2018      	movs	r0, #24
 8019fce:	f7f4 fe09 	bl	800ebe4 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8019fd2:	68f8      	ldr	r0, [r7, #12]
 8019fd4:	f7ff ff06 	bl	8019de4 <_ZNSt8_Rb_treeImSt4pairIKmmESt10_Select1stIS2_ESt4lessImESaIS2_EE21_M_get_Node_allocatorEv>
 8019fd8:	4604      	mov	r4, r0
 8019fda:	68b8      	ldr	r0, [r7, #8]
 8019fdc:	f7ff fb51 	bl	8019682 <_ZNSt13_Rb_tree_nodeISt4pairIKmmEE9_M_valptrEv>
 8019fe0:	4605      	mov	r5, r0
 8019fe2:	6878      	ldr	r0, [r7, #4]
 8019fe4:	f7ff fd03 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	461a      	mov	r2, r3
 8019fec:	4629      	mov	r1, r5
 8019fee:	4620      	mov	r0, r4
 8019ff0:	f000 f852 	bl	801a098 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>
	}
 8019ff4:	bf00      	nop
 8019ff6:	3710      	adds	r7, #16
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bdb0      	pop	{r4, r5, r7, pc}

08019ffc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE10deallocateEPS5_j>:
      deallocate(_Tp* __p, size_type __t)
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
 801a002:	60f8      	str	r0, [r7, #12]
 801a004:	60b9      	str	r1, [r7, #8]
 801a006:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801a008:	687a      	ldr	r2, [r7, #4]
 801a00a:	4613      	mov	r3, r2
 801a00c:	005b      	lsls	r3, r3, #1
 801a00e:	4413      	add	r3, r2
 801a010:	00db      	lsls	r3, r3, #3
 801a012:	4619      	mov	r1, r3
 801a014:	68b8      	ldr	r0, [r7, #8]
 801a016:	f000 f935 	bl	801a284 <_ZdlPvj>
      }
 801a01a:	3710      	adds	r7, #16
 801a01c:	46bd      	mov	sp, r7
 801a01e:	bd80      	pop	{r7, pc}

0801a020 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801a020:	b580      	push	{r7, lr}
 801a022:	b084      	sub	sp, #16
 801a024:	af00      	add	r7, sp, #0
 801a026:	60f8      	str	r0, [r7, #12]
 801a028:	60b9      	str	r1, [r7, #8]
 801a02a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f000 f845 	bl	801a0bc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>
 801a032:	4602      	mov	r2, r0
 801a034:	68bb      	ldr	r3, [r7, #8]
 801a036:	4293      	cmp	r3, r2
 801a038:	bf8c      	ite	hi
 801a03a:	2301      	movhi	r3, #1
 801a03c:	2300      	movls	r3, #0
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	2b00      	cmp	r3, #0
 801a042:	d001      	beq.n	801a048 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801a044:	f000 f9e4 	bl	801a410 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801a048:	68ba      	ldr	r2, [r7, #8]
 801a04a:	4613      	mov	r3, r2
 801a04c:	005b      	lsls	r3, r3, #1
 801a04e:	4413      	add	r3, r2
 801a050:	00db      	lsls	r3, r3, #3
 801a052:	4618      	mov	r0, r3
 801a054:	f000 f918 	bl	801a288 <_Znwj>
 801a058:	4603      	mov	r3, r0
 801a05a:	bf00      	nop
      }
 801a05c:	4618      	mov	r0, r3
 801a05e:	3710      	adds	r7, #16
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}

0801a064 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801a064:	b5b0      	push	{r4, r5, r7, lr}
 801a066:	b082      	sub	sp, #8
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
 801a06c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801a06e:	6838      	ldr	r0, [r7, #0]
 801a070:	f7ff fcbd 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a074:	4605      	mov	r5, r0
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	4619      	mov	r1, r3
 801a07a:	2008      	movs	r0, #8
 801a07c:	f7f4 fdb2 	bl	800ebe4 <_ZnwjPv>
 801a080:	4604      	mov	r4, r0
 801a082:	4623      	mov	r3, r4
 801a084:	462a      	mov	r2, r5
 801a086:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a08a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a08e:	4623      	mov	r3, r4
 801a090:	4618      	mov	r0, r3
 801a092:	3708      	adds	r7, #8
 801a094:	46bd      	mov	sp, r7
 801a096:	bdb0      	pop	{r4, r5, r7, pc}

0801a098 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKmmEEEE9constructIS3_JRKS3_EEEvRS5_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801a098:	b580      	push	{r7, lr}
 801a09a:	b084      	sub	sp, #16
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	60f8      	str	r0, [r7, #12]
 801a0a0:	60b9      	str	r1, [r7, #8]
 801a0a2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801a0a4:	6878      	ldr	r0, [r7, #4]
 801a0a6:	f7ff fca2 	bl	80199ee <_ZSt7forwardIRKSt4pairIKmmEEOT_RNSt16remove_referenceIS5_E4typeE>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	4619      	mov	r1, r3
 801a0ae:	68b8      	ldr	r0, [r7, #8]
 801a0b0:	f7ff ffd8 	bl	801a064 <_ZSt12construct_atISt4pairIKmmEJRKS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS6_DpOS7_>
	}
 801a0b4:	bf00      	nop
 801a0b6:	3710      	adds	r7, #16
 801a0b8:	46bd      	mov	sp, r7
 801a0ba:	bd80      	pop	{r7, pc}

0801a0bc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801a0bc:	b480      	push	{r7}
 801a0be:	b083      	sub	sp, #12
 801a0c0:	af00      	add	r7, sp, #0
 801a0c2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801a0c4:	4b03      	ldr	r3, [pc, #12]	; (801a0d4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKmmEEE11_M_max_sizeEv+0x18>)
      }
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	370c      	adds	r7, #12
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop
 801a0d4:	05555555 	.word	0x05555555

0801a0d8 <_Z41__static_initialization_and_destruction_0ii>:
		float falling_value = HAL_TIM_ReadCapturedValue(htim, instance.channel_falling);

		InputCapture::instances[instance.id].frequency = round(ref_clock / rising_value);
		InputCapture::instances[instance.id].duty_cycle = round((falling_value * 100) / rising_value);
	}
}
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b0d8      	sub	sp, #352	; 0x160
 801a0dc:	af02      	add	r7, sp, #8
 801a0de:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a0e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a0e6:	6018      	str	r0, [r3, #0]
 801a0e8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a0ec:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a0f0:	6019      	str	r1, [r3, #0]
 801a0f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a0f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	2b01      	cmp	r3, #1
 801a0fe:	f040 8088 	bne.w	801a212 <_Z41__static_initialization_and_destruction_0ii+0x13a>
 801a102:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a106:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a110:	4293      	cmp	r3, r2
 801a112:	d17e      	bne.n	801a212 <_Z41__static_initialization_and_destruction_0ii+0x13a>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801a114:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a118:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801a11c:	4a4c      	ldr	r2, [pc, #304]	; (801a250 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 801a11e:	4618      	mov	r0, r3
 801a120:	4611      	mov	r1, r2
 801a122:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a126:	461a      	mov	r2, r3
 801a128:	f000 f9c2 	bl	801a4b0 <memcpy>
 801a12c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a130:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801a134:	f107 0214 	add.w	r2, r7, #20
 801a138:	601a      	str	r2, [r3, #0]
 801a13a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a13e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 801a142:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a146:	605a      	str	r2, [r3, #4]
 801a148:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7f6 f9dc 	bl	801050a <_ZNSaIhEC1Ev>
 801a152:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a156:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801a15a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 801a15e:	ca06      	ldmia	r2, {r1, r2}
 801a160:	483c      	ldr	r0, [pc, #240]	; (801a254 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801a162:	f7f6 f9e9 	bl	8010538 <_ZNSt12forward_listIhSaIhEEC1ESt16initializer_listIhERKS0_>
 801a166:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801a16a:	4618      	mov	r0, r3
 801a16c:	f7f6 f9d9 	bl	8010522 <_ZNSaIhED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 801a170:	4b39      	ldr	r3, [pc, #228]	; (801a258 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a172:	461a      	mov	r2, r3
 801a174:	2300      	movs	r3, #0
 801a176:	6013      	str	r3, [r2, #0]
 801a178:	6053      	str	r3, [r2, #4]
 801a17a:	6093      	str	r3, [r2, #8]
 801a17c:	60d3      	str	r3, [r2, #12]
 801a17e:	6113      	str	r3, [r2, #16]
 801a180:	6153      	str	r3, [r2, #20]
 801a182:	4835      	ldr	r0, [pc, #212]	; (801a258 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a184:	f7fe ff67 	bl	8019056 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEEC1Ev>
static map<uint32_t, uint32_t> channel_dict = {
 801a188:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801a18c:	2230      	movs	r2, #48	; 0x30
 801a18e:	2100      	movs	r1, #0
 801a190:	4618      	mov	r0, r3
 801a192:	f000 f9b5 	bl	801a500 <memset>
 801a196:	2301      	movs	r3, #1
 801a198:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801a19c:	2302      	movs	r3, #2
 801a19e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801a1a2:	2304      	movs	r3, #4
 801a1a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801a1a8:	2304      	movs	r3, #4
 801a1aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 801a1ae:	2308      	movs	r3, #8
 801a1b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801a1b4:	2308      	movs	r3, #8
 801a1b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 801a1ba:	230c      	movs	r3, #12
 801a1bc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 801a1c0:	2310      	movs	r3, #16
 801a1c2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801a1c6:	2310      	movs	r3, #16
 801a1c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 801a1cc:	2320      	movs	r3, #32
 801a1ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801a1d2:	2314      	movs	r3, #20
 801a1d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801a1d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801a1dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801a1e0:	2306      	movs	r3, #6
 801a1e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801a1e6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f7fe ffae 	bl	801914c <_ZNSaISt4pairIKmmEEC1Ev>
 801a1f0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 801a1f4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a1f8:	9300      	str	r3, [sp, #0]
 801a1fa:	4613      	mov	r3, r2
 801a1fc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 801a200:	ca06      	ldmia	r2, {r1, r2}
 801a202:	4816      	ldr	r0, [pc, #88]	; (801a25c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801a204:	f7fe ffb9 	bl	801917a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEEC1ESt16initializer_listIS4_ERKS1_RKS5_>
 801a208:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801a20c:	4618      	mov	r0, r3
 801a20e:	f7fe ffa9 	bl	8019164 <_ZNSaISt4pairIKmmEED1Ev>
 801a212:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a216:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d111      	bne.n	801a244 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 801a220:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801a224:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a22e:	4293      	cmp	r3, r2
 801a230:	d108      	bne.n	801a244 <_Z41__static_initialization_and_destruction_0ii+0x16c>
 801a232:	480a      	ldr	r0, [pc, #40]	; (801a25c <_Z41__static_initialization_and_destruction_0ii+0x184>)
 801a234:	f7fe ff29 	bl	801908a <_ZNSt3mapImmSt4lessImESaISt4pairIKmmEEED1Ev>
map<uint8_t, InputCapture::Instance> InputCapture::instances = {};
 801a238:	4807      	ldr	r0, [pc, #28]	; (801a258 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 801a23a:	f7fe ff19 	bl	8019070 <_ZNSt3mapIhN12InputCapture8InstanceESt4lessIhESaISt4pairIKhS1_EEED1Ev>
forward_list<uint8_t> InputCapture::id_manager = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255};
 801a23e:	4805      	ldr	r0, [pc, #20]	; (801a254 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 801a240:	f7f6 f9a8 	bl	8010594 <_ZNSt12forward_listIhSaIhEED1Ev>
}
 801a244:	bf00      	nop
 801a246:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801a24a:	46bd      	mov	sp, r7
 801a24c:	bd80      	pop	{r7, pc}
 801a24e:	bf00      	nop
 801a250:	0801ab10 	.word	0x0801ab10
 801a254:	240011fc 	.word	0x240011fc
 801a258:	24001200 	.word	0x24001200
 801a25c:	24001218 	.word	0x24001218

0801a260 <_GLOBAL__sub_I__ZN12InputCapture10id_managerE>:
 801a260:	b580      	push	{r7, lr}
 801a262:	af00      	add	r7, sp, #0
 801a264:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a268:	2001      	movs	r0, #1
 801a26a:	f7ff ff35 	bl	801a0d8 <_Z41__static_initialization_and_destruction_0ii>
 801a26e:	bd80      	pop	{r7, pc}

0801a270 <_GLOBAL__sub_D__ZN12InputCapture10id_managerE>:
 801a270:	b580      	push	{r7, lr}
 801a272:	af00      	add	r7, sp, #0
 801a274:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a278:	2000      	movs	r0, #0
 801a27a:	f7ff ff2d 	bl	801a0d8 <_Z41__static_initialization_and_destruction_0ii>
 801a27e:	bd80      	pop	{r7, pc}

0801a280 <_ZdlPv>:
 801a280:	f000 b90e 	b.w	801a4a0 <free>

0801a284 <_ZdlPvj>:
 801a284:	f7ff bffc 	b.w	801a280 <_ZdlPv>

0801a288 <_Znwj>:
 801a288:	2801      	cmp	r0, #1
 801a28a:	bf38      	it	cc
 801a28c:	2001      	movcc	r0, #1
 801a28e:	b510      	push	{r4, lr}
 801a290:	4604      	mov	r4, r0
 801a292:	4620      	mov	r0, r4
 801a294:	f000 f8fc 	bl	801a490 <malloc>
 801a298:	b930      	cbnz	r0, 801a2a8 <_Znwj+0x20>
 801a29a:	f000 f8bf 	bl	801a41c <_ZSt15get_new_handlerv>
 801a29e:	b908      	cbnz	r0, 801a2a4 <_Znwj+0x1c>
 801a2a0:	f000 f8c4 	bl	801a42c <abort>
 801a2a4:	4780      	blx	r0
 801a2a6:	e7f4      	b.n	801a292 <_Znwj+0xa>
 801a2a8:	bd10      	pop	{r4, pc}

0801a2aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 801a2aa:	68c3      	ldr	r3, [r0, #12]
 801a2ac:	689a      	ldr	r2, [r3, #8]
 801a2ae:	60c2      	str	r2, [r0, #12]
 801a2b0:	b510      	push	{r4, lr}
 801a2b2:	b102      	cbz	r2, 801a2b6 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 801a2b4:	6050      	str	r0, [r2, #4]
 801a2b6:	6842      	ldr	r2, [r0, #4]
 801a2b8:	605a      	str	r2, [r3, #4]
 801a2ba:	680c      	ldr	r4, [r1, #0]
 801a2bc:	4284      	cmp	r4, r0
 801a2be:	d103      	bne.n	801a2c8 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 801a2c0:	600b      	str	r3, [r1, #0]
 801a2c2:	6098      	str	r0, [r3, #8]
 801a2c4:	6043      	str	r3, [r0, #4]
 801a2c6:	bd10      	pop	{r4, pc}
 801a2c8:	6891      	ldr	r1, [r2, #8]
 801a2ca:	4281      	cmp	r1, r0
 801a2cc:	bf0c      	ite	eq
 801a2ce:	6093      	streq	r3, [r2, #8]
 801a2d0:	60d3      	strne	r3, [r2, #12]
 801a2d2:	e7f6      	b.n	801a2c2 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0801a2d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 801a2d4:	6883      	ldr	r3, [r0, #8]
 801a2d6:	68da      	ldr	r2, [r3, #12]
 801a2d8:	6082      	str	r2, [r0, #8]
 801a2da:	b510      	push	{r4, lr}
 801a2dc:	b102      	cbz	r2, 801a2e0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 801a2de:	6050      	str	r0, [r2, #4]
 801a2e0:	6842      	ldr	r2, [r0, #4]
 801a2e2:	605a      	str	r2, [r3, #4]
 801a2e4:	680c      	ldr	r4, [r1, #0]
 801a2e6:	4284      	cmp	r4, r0
 801a2e8:	d103      	bne.n	801a2f2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 801a2ea:	600b      	str	r3, [r1, #0]
 801a2ec:	60d8      	str	r0, [r3, #12]
 801a2ee:	6043      	str	r3, [r0, #4]
 801a2f0:	bd10      	pop	{r4, pc}
 801a2f2:	68d1      	ldr	r1, [r2, #12]
 801a2f4:	4281      	cmp	r1, r0
 801a2f6:	bf0c      	ite	eq
 801a2f8:	60d3      	streq	r3, [r2, #12]
 801a2fa:	6093      	strne	r3, [r2, #8]
 801a2fc:	e7f6      	b.n	801a2ec <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

0801a2fe <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801a2fe:	68c3      	ldr	r3, [r0, #12]
 801a300:	b123      	cbz	r3, 801a30c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 801a302:	4618      	mov	r0, r3
 801a304:	689b      	ldr	r3, [r3, #8]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d1fb      	bne.n	801a302 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 801a30a:	4770      	bx	lr
 801a30c:	6843      	ldr	r3, [r0, #4]
 801a30e:	68da      	ldr	r2, [r3, #12]
 801a310:	4282      	cmp	r2, r0
 801a312:	d102      	bne.n	801a31a <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 801a314:	4618      	mov	r0, r3
 801a316:	685b      	ldr	r3, [r3, #4]
 801a318:	e7f9      	b.n	801a30e <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 801a31a:	68c2      	ldr	r2, [r0, #12]
 801a31c:	4293      	cmp	r3, r2
 801a31e:	bf18      	it	ne
 801a320:	4618      	movne	r0, r3
 801a322:	4770      	bx	lr

0801a324 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801a324:	7803      	ldrb	r3, [r0, #0]
 801a326:	b933      	cbnz	r3, 801a336 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801a328:	6843      	ldr	r3, [r0, #4]
 801a32a:	685b      	ldr	r3, [r3, #4]
 801a32c:	4283      	cmp	r3, r0
 801a32e:	d102      	bne.n	801a336 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	4618      	mov	r0, r3
 801a334:	4770      	bx	lr
 801a336:	6882      	ldr	r2, [r0, #8]
 801a338:	b122      	cbz	r2, 801a344 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 801a33a:	4613      	mov	r3, r2
 801a33c:	68d2      	ldr	r2, [r2, #12]
 801a33e:	2a00      	cmp	r2, #0
 801a340:	d1fb      	bne.n	801a33a <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 801a342:	e7f6      	b.n	801a332 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801a344:	6843      	ldr	r3, [r0, #4]
 801a346:	689a      	ldr	r2, [r3, #8]
 801a348:	4282      	cmp	r2, r0
 801a34a:	d1f2      	bne.n	801a332 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 801a34c:	4618      	mov	r0, r3
 801a34e:	685b      	ldr	r3, [r3, #4]
 801a350:	e7f9      	b.n	801a346 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0801a352 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 801a352:	f7ff bfd4 	b.w	801a2fe <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

0801a356 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 801a356:	f7ff bfe5 	b.w	801a324 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

0801a35a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 801a35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a35e:	461e      	mov	r6, r3
 801a360:	f103 0804 	add.w	r8, r3, #4
 801a364:	2300      	movs	r3, #0
 801a366:	e9c1 3302 	strd	r3, r3, [r1, #8]
 801a36a:	460c      	mov	r4, r1
 801a36c:	604a      	str	r2, [r1, #4]
 801a36e:	700b      	strb	r3, [r1, #0]
 801a370:	b300      	cbz	r0, 801a3b4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 801a372:	4296      	cmp	r6, r2
 801a374:	6091      	str	r1, [r2, #8]
 801a376:	d118      	bne.n	801a3aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 801a378:	6071      	str	r1, [r6, #4]
 801a37a:	60f4      	str	r4, [r6, #12]
 801a37c:	2701      	movs	r7, #1
 801a37e:	f04f 0900 	mov.w	r9, #0
 801a382:	6873      	ldr	r3, [r6, #4]
 801a384:	42a3      	cmp	r3, r4
 801a386:	d03f      	beq.n	801a408 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801a388:	6860      	ldr	r0, [r4, #4]
 801a38a:	7802      	ldrb	r2, [r0, #0]
 801a38c:	2a00      	cmp	r2, #0
 801a38e:	d13b      	bne.n	801a408 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 801a390:	6845      	ldr	r5, [r0, #4]
 801a392:	68ab      	ldr	r3, [r5, #8]
 801a394:	4298      	cmp	r0, r3
 801a396:	d123      	bne.n	801a3e0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 801a398:	68eb      	ldr	r3, [r5, #12]
 801a39a:	b183      	cbz	r3, 801a3be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801a39c:	781a      	ldrb	r2, [r3, #0]
 801a39e:	b972      	cbnz	r2, 801a3be <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 801a3a0:	7007      	strb	r7, [r0, #0]
 801a3a2:	701f      	strb	r7, [r3, #0]
 801a3a4:	702a      	strb	r2, [r5, #0]
 801a3a6:	462c      	mov	r4, r5
 801a3a8:	e7eb      	b.n	801a382 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 801a3aa:	68b3      	ldr	r3, [r6, #8]
 801a3ac:	4293      	cmp	r3, r2
 801a3ae:	d1e5      	bne.n	801a37c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a3b0:	60b1      	str	r1, [r6, #8]
 801a3b2:	e7e3      	b.n	801a37c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a3b4:	60d1      	str	r1, [r2, #12]
 801a3b6:	68f3      	ldr	r3, [r6, #12]
 801a3b8:	4293      	cmp	r3, r2
 801a3ba:	d1df      	bne.n	801a37c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 801a3bc:	e7dd      	b.n	801a37a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 801a3be:	68c3      	ldr	r3, [r0, #12]
 801a3c0:	42a3      	cmp	r3, r4
 801a3c2:	d103      	bne.n	801a3cc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 801a3c4:	4641      	mov	r1, r8
 801a3c6:	f7ff ff70 	bl	801a2aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801a3ca:	4604      	mov	r4, r0
 801a3cc:	6863      	ldr	r3, [r4, #4]
 801a3ce:	4641      	mov	r1, r8
 801a3d0:	701f      	strb	r7, [r3, #0]
 801a3d2:	4628      	mov	r0, r5
 801a3d4:	f885 9000 	strb.w	r9, [r5]
 801a3d8:	f7ff ff7c 	bl	801a2d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801a3dc:	4625      	mov	r5, r4
 801a3de:	e7e2      	b.n	801a3a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 801a3e0:	b113      	cbz	r3, 801a3e8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 801a3e2:	781a      	ldrb	r2, [r3, #0]
 801a3e4:	2a00      	cmp	r2, #0
 801a3e6:	d0db      	beq.n	801a3a0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 801a3e8:	6883      	ldr	r3, [r0, #8]
 801a3ea:	42a3      	cmp	r3, r4
 801a3ec:	d103      	bne.n	801a3f6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 801a3ee:	4641      	mov	r1, r8
 801a3f0:	f7ff ff70 	bl	801a2d4 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	6863      	ldr	r3, [r4, #4]
 801a3f8:	4641      	mov	r1, r8
 801a3fa:	701f      	strb	r7, [r3, #0]
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	f885 9000 	strb.w	r9, [r5]
 801a402:	f7ff ff52 	bl	801a2aa <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 801a406:	e7e9      	b.n	801a3dc <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 801a408:	2201      	movs	r2, #1
 801a40a:	701a      	strb	r2, [r3, #0]
 801a40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801a410 <_ZSt17__throw_bad_allocv>:
 801a410:	b508      	push	{r3, lr}
 801a412:	f000 f80b 	bl	801a42c <abort>

0801a416 <_ZSt20__throw_length_errorPKc>:
 801a416:	b508      	push	{r3, lr}
 801a418:	f000 f808 	bl	801a42c <abort>

0801a41c <_ZSt15get_new_handlerv>:
 801a41c:	4b02      	ldr	r3, [pc, #8]	; (801a428 <_ZSt15get_new_handlerv+0xc>)
 801a41e:	6818      	ldr	r0, [r3, #0]
 801a420:	f3bf 8f5b 	dmb	ish
 801a424:	4770      	bx	lr
 801a426:	bf00      	nop
 801a428:	24001230 	.word	0x24001230

0801a42c <abort>:
 801a42c:	b508      	push	{r3, lr}
 801a42e:	2006      	movs	r0, #6
 801a430:	f000 f986 	bl	801a740 <raise>
 801a434:	2001      	movs	r0, #1
 801a436:	f7e7 fb63 	bl	8001b00 <_exit>
	...

0801a43c <__errno>:
 801a43c:	4b01      	ldr	r3, [pc, #4]	; (801a444 <__errno+0x8>)
 801a43e:	6818      	ldr	r0, [r3, #0]
 801a440:	4770      	bx	lr
 801a442:	bf00      	nop
 801a444:	24000050 	.word	0x24000050

0801a448 <__libc_init_array>:
 801a448:	b570      	push	{r4, r5, r6, lr}
 801a44a:	4d0d      	ldr	r5, [pc, #52]	; (801a480 <__libc_init_array+0x38>)
 801a44c:	4c0d      	ldr	r4, [pc, #52]	; (801a484 <__libc_init_array+0x3c>)
 801a44e:	1b64      	subs	r4, r4, r5
 801a450:	10a4      	asrs	r4, r4, #2
 801a452:	2600      	movs	r6, #0
 801a454:	42a6      	cmp	r6, r4
 801a456:	d109      	bne.n	801a46c <__libc_init_array+0x24>
 801a458:	4d0b      	ldr	r5, [pc, #44]	; (801a488 <__libc_init_array+0x40>)
 801a45a:	4c0c      	ldr	r4, [pc, #48]	; (801a48c <__libc_init_array+0x44>)
 801a45c:	f000 f99a 	bl	801a794 <_init>
 801a460:	1b64      	subs	r4, r4, r5
 801a462:	10a4      	asrs	r4, r4, #2
 801a464:	2600      	movs	r6, #0
 801a466:	42a6      	cmp	r6, r4
 801a468:	d105      	bne.n	801a476 <__libc_init_array+0x2e>
 801a46a:	bd70      	pop	{r4, r5, r6, pc}
 801a46c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a470:	4798      	blx	r3
 801a472:	3601      	adds	r6, #1
 801a474:	e7ee      	b.n	801a454 <__libc_init_array+0xc>
 801a476:	f855 3b04 	ldr.w	r3, [r5], #4
 801a47a:	4798      	blx	r3
 801a47c:	3601      	adds	r6, #1
 801a47e:	e7f2      	b.n	801a466 <__libc_init_array+0x1e>
 801a480:	0801ac60 	.word	0x0801ac60
 801a484:	0801ac60 	.word	0x0801ac60
 801a488:	0801ac60 	.word	0x0801ac60
 801a48c:	0801ac74 	.word	0x0801ac74

0801a490 <malloc>:
 801a490:	4b02      	ldr	r3, [pc, #8]	; (801a49c <malloc+0xc>)
 801a492:	4601      	mov	r1, r0
 801a494:	6818      	ldr	r0, [r3, #0]
 801a496:	f000 b8a7 	b.w	801a5e8 <_malloc_r>
 801a49a:	bf00      	nop
 801a49c:	24000050 	.word	0x24000050

0801a4a0 <free>:
 801a4a0:	4b02      	ldr	r3, [pc, #8]	; (801a4ac <free+0xc>)
 801a4a2:	4601      	mov	r1, r0
 801a4a4:	6818      	ldr	r0, [r3, #0]
 801a4a6:	f000 b833 	b.w	801a510 <_free_r>
 801a4aa:	bf00      	nop
 801a4ac:	24000050 	.word	0x24000050

0801a4b0 <memcpy>:
 801a4b0:	440a      	add	r2, r1
 801a4b2:	4291      	cmp	r1, r2
 801a4b4:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4b8:	d100      	bne.n	801a4bc <memcpy+0xc>
 801a4ba:	4770      	bx	lr
 801a4bc:	b510      	push	{r4, lr}
 801a4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4c6:	4291      	cmp	r1, r2
 801a4c8:	d1f9      	bne.n	801a4be <memcpy+0xe>
 801a4ca:	bd10      	pop	{r4, pc}

0801a4cc <memmove>:
 801a4cc:	4288      	cmp	r0, r1
 801a4ce:	b510      	push	{r4, lr}
 801a4d0:	eb01 0402 	add.w	r4, r1, r2
 801a4d4:	d902      	bls.n	801a4dc <memmove+0x10>
 801a4d6:	4284      	cmp	r4, r0
 801a4d8:	4623      	mov	r3, r4
 801a4da:	d807      	bhi.n	801a4ec <memmove+0x20>
 801a4dc:	1e43      	subs	r3, r0, #1
 801a4de:	42a1      	cmp	r1, r4
 801a4e0:	d008      	beq.n	801a4f4 <memmove+0x28>
 801a4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4ea:	e7f8      	b.n	801a4de <memmove+0x12>
 801a4ec:	4402      	add	r2, r0
 801a4ee:	4601      	mov	r1, r0
 801a4f0:	428a      	cmp	r2, r1
 801a4f2:	d100      	bne.n	801a4f6 <memmove+0x2a>
 801a4f4:	bd10      	pop	{r4, pc}
 801a4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a4fe:	e7f7      	b.n	801a4f0 <memmove+0x24>

0801a500 <memset>:
 801a500:	4402      	add	r2, r0
 801a502:	4603      	mov	r3, r0
 801a504:	4293      	cmp	r3, r2
 801a506:	d100      	bne.n	801a50a <memset+0xa>
 801a508:	4770      	bx	lr
 801a50a:	f803 1b01 	strb.w	r1, [r3], #1
 801a50e:	e7f9      	b.n	801a504 <memset+0x4>

0801a510 <_free_r>:
 801a510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a512:	2900      	cmp	r1, #0
 801a514:	d044      	beq.n	801a5a0 <_free_r+0x90>
 801a516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a51a:	9001      	str	r0, [sp, #4]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	f1a1 0404 	sub.w	r4, r1, #4
 801a522:	bfb8      	it	lt
 801a524:	18e4      	addlt	r4, r4, r3
 801a526:	f000 f927 	bl	801a778 <__malloc_lock>
 801a52a:	4a1e      	ldr	r2, [pc, #120]	; (801a5a4 <_free_r+0x94>)
 801a52c:	9801      	ldr	r0, [sp, #4]
 801a52e:	6813      	ldr	r3, [r2, #0]
 801a530:	b933      	cbnz	r3, 801a540 <_free_r+0x30>
 801a532:	6063      	str	r3, [r4, #4]
 801a534:	6014      	str	r4, [r2, #0]
 801a536:	b003      	add	sp, #12
 801a538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a53c:	f000 b922 	b.w	801a784 <__malloc_unlock>
 801a540:	42a3      	cmp	r3, r4
 801a542:	d908      	bls.n	801a556 <_free_r+0x46>
 801a544:	6825      	ldr	r5, [r4, #0]
 801a546:	1961      	adds	r1, r4, r5
 801a548:	428b      	cmp	r3, r1
 801a54a:	bf01      	itttt	eq
 801a54c:	6819      	ldreq	r1, [r3, #0]
 801a54e:	685b      	ldreq	r3, [r3, #4]
 801a550:	1949      	addeq	r1, r1, r5
 801a552:	6021      	streq	r1, [r4, #0]
 801a554:	e7ed      	b.n	801a532 <_free_r+0x22>
 801a556:	461a      	mov	r2, r3
 801a558:	685b      	ldr	r3, [r3, #4]
 801a55a:	b10b      	cbz	r3, 801a560 <_free_r+0x50>
 801a55c:	42a3      	cmp	r3, r4
 801a55e:	d9fa      	bls.n	801a556 <_free_r+0x46>
 801a560:	6811      	ldr	r1, [r2, #0]
 801a562:	1855      	adds	r5, r2, r1
 801a564:	42a5      	cmp	r5, r4
 801a566:	d10b      	bne.n	801a580 <_free_r+0x70>
 801a568:	6824      	ldr	r4, [r4, #0]
 801a56a:	4421      	add	r1, r4
 801a56c:	1854      	adds	r4, r2, r1
 801a56e:	42a3      	cmp	r3, r4
 801a570:	6011      	str	r1, [r2, #0]
 801a572:	d1e0      	bne.n	801a536 <_free_r+0x26>
 801a574:	681c      	ldr	r4, [r3, #0]
 801a576:	685b      	ldr	r3, [r3, #4]
 801a578:	6053      	str	r3, [r2, #4]
 801a57a:	4421      	add	r1, r4
 801a57c:	6011      	str	r1, [r2, #0]
 801a57e:	e7da      	b.n	801a536 <_free_r+0x26>
 801a580:	d902      	bls.n	801a588 <_free_r+0x78>
 801a582:	230c      	movs	r3, #12
 801a584:	6003      	str	r3, [r0, #0]
 801a586:	e7d6      	b.n	801a536 <_free_r+0x26>
 801a588:	6825      	ldr	r5, [r4, #0]
 801a58a:	1961      	adds	r1, r4, r5
 801a58c:	428b      	cmp	r3, r1
 801a58e:	bf04      	itt	eq
 801a590:	6819      	ldreq	r1, [r3, #0]
 801a592:	685b      	ldreq	r3, [r3, #4]
 801a594:	6063      	str	r3, [r4, #4]
 801a596:	bf04      	itt	eq
 801a598:	1949      	addeq	r1, r1, r5
 801a59a:	6021      	streq	r1, [r4, #0]
 801a59c:	6054      	str	r4, [r2, #4]
 801a59e:	e7ca      	b.n	801a536 <_free_r+0x26>
 801a5a0:	b003      	add	sp, #12
 801a5a2:	bd30      	pop	{r4, r5, pc}
 801a5a4:	24001234 	.word	0x24001234

0801a5a8 <sbrk_aligned>:
 801a5a8:	b570      	push	{r4, r5, r6, lr}
 801a5aa:	4e0e      	ldr	r6, [pc, #56]	; (801a5e4 <sbrk_aligned+0x3c>)
 801a5ac:	460c      	mov	r4, r1
 801a5ae:	6831      	ldr	r1, [r6, #0]
 801a5b0:	4605      	mov	r5, r0
 801a5b2:	b911      	cbnz	r1, 801a5ba <sbrk_aligned+0x12>
 801a5b4:	f000 f88c 	bl	801a6d0 <_sbrk_r>
 801a5b8:	6030      	str	r0, [r6, #0]
 801a5ba:	4621      	mov	r1, r4
 801a5bc:	4628      	mov	r0, r5
 801a5be:	f000 f887 	bl	801a6d0 <_sbrk_r>
 801a5c2:	1c43      	adds	r3, r0, #1
 801a5c4:	d00a      	beq.n	801a5dc <sbrk_aligned+0x34>
 801a5c6:	1cc4      	adds	r4, r0, #3
 801a5c8:	f024 0403 	bic.w	r4, r4, #3
 801a5cc:	42a0      	cmp	r0, r4
 801a5ce:	d007      	beq.n	801a5e0 <sbrk_aligned+0x38>
 801a5d0:	1a21      	subs	r1, r4, r0
 801a5d2:	4628      	mov	r0, r5
 801a5d4:	f000 f87c 	bl	801a6d0 <_sbrk_r>
 801a5d8:	3001      	adds	r0, #1
 801a5da:	d101      	bne.n	801a5e0 <sbrk_aligned+0x38>
 801a5dc:	f04f 34ff 	mov.w	r4, #4294967295
 801a5e0:	4620      	mov	r0, r4
 801a5e2:	bd70      	pop	{r4, r5, r6, pc}
 801a5e4:	24001238 	.word	0x24001238

0801a5e8 <_malloc_r>:
 801a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ec:	1ccd      	adds	r5, r1, #3
 801a5ee:	f025 0503 	bic.w	r5, r5, #3
 801a5f2:	3508      	adds	r5, #8
 801a5f4:	2d0c      	cmp	r5, #12
 801a5f6:	bf38      	it	cc
 801a5f8:	250c      	movcc	r5, #12
 801a5fa:	2d00      	cmp	r5, #0
 801a5fc:	4607      	mov	r7, r0
 801a5fe:	db01      	blt.n	801a604 <_malloc_r+0x1c>
 801a600:	42a9      	cmp	r1, r5
 801a602:	d905      	bls.n	801a610 <_malloc_r+0x28>
 801a604:	230c      	movs	r3, #12
 801a606:	603b      	str	r3, [r7, #0]
 801a608:	2600      	movs	r6, #0
 801a60a:	4630      	mov	r0, r6
 801a60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a610:	4e2e      	ldr	r6, [pc, #184]	; (801a6cc <_malloc_r+0xe4>)
 801a612:	f000 f8b1 	bl	801a778 <__malloc_lock>
 801a616:	6833      	ldr	r3, [r6, #0]
 801a618:	461c      	mov	r4, r3
 801a61a:	bb34      	cbnz	r4, 801a66a <_malloc_r+0x82>
 801a61c:	4629      	mov	r1, r5
 801a61e:	4638      	mov	r0, r7
 801a620:	f7ff ffc2 	bl	801a5a8 <sbrk_aligned>
 801a624:	1c43      	adds	r3, r0, #1
 801a626:	4604      	mov	r4, r0
 801a628:	d14d      	bne.n	801a6c6 <_malloc_r+0xde>
 801a62a:	6834      	ldr	r4, [r6, #0]
 801a62c:	4626      	mov	r6, r4
 801a62e:	2e00      	cmp	r6, #0
 801a630:	d140      	bne.n	801a6b4 <_malloc_r+0xcc>
 801a632:	6823      	ldr	r3, [r4, #0]
 801a634:	4631      	mov	r1, r6
 801a636:	4638      	mov	r0, r7
 801a638:	eb04 0803 	add.w	r8, r4, r3
 801a63c:	f000 f848 	bl	801a6d0 <_sbrk_r>
 801a640:	4580      	cmp	r8, r0
 801a642:	d13a      	bne.n	801a6ba <_malloc_r+0xd2>
 801a644:	6821      	ldr	r1, [r4, #0]
 801a646:	3503      	adds	r5, #3
 801a648:	1a6d      	subs	r5, r5, r1
 801a64a:	f025 0503 	bic.w	r5, r5, #3
 801a64e:	3508      	adds	r5, #8
 801a650:	2d0c      	cmp	r5, #12
 801a652:	bf38      	it	cc
 801a654:	250c      	movcc	r5, #12
 801a656:	4629      	mov	r1, r5
 801a658:	4638      	mov	r0, r7
 801a65a:	f7ff ffa5 	bl	801a5a8 <sbrk_aligned>
 801a65e:	3001      	adds	r0, #1
 801a660:	d02b      	beq.n	801a6ba <_malloc_r+0xd2>
 801a662:	6823      	ldr	r3, [r4, #0]
 801a664:	442b      	add	r3, r5
 801a666:	6023      	str	r3, [r4, #0]
 801a668:	e00e      	b.n	801a688 <_malloc_r+0xa0>
 801a66a:	6822      	ldr	r2, [r4, #0]
 801a66c:	1b52      	subs	r2, r2, r5
 801a66e:	d41e      	bmi.n	801a6ae <_malloc_r+0xc6>
 801a670:	2a0b      	cmp	r2, #11
 801a672:	d916      	bls.n	801a6a2 <_malloc_r+0xba>
 801a674:	1961      	adds	r1, r4, r5
 801a676:	42a3      	cmp	r3, r4
 801a678:	6025      	str	r5, [r4, #0]
 801a67a:	bf18      	it	ne
 801a67c:	6059      	strne	r1, [r3, #4]
 801a67e:	6863      	ldr	r3, [r4, #4]
 801a680:	bf08      	it	eq
 801a682:	6031      	streq	r1, [r6, #0]
 801a684:	5162      	str	r2, [r4, r5]
 801a686:	604b      	str	r3, [r1, #4]
 801a688:	4638      	mov	r0, r7
 801a68a:	f104 060b 	add.w	r6, r4, #11
 801a68e:	f000 f879 	bl	801a784 <__malloc_unlock>
 801a692:	f026 0607 	bic.w	r6, r6, #7
 801a696:	1d23      	adds	r3, r4, #4
 801a698:	1af2      	subs	r2, r6, r3
 801a69a:	d0b6      	beq.n	801a60a <_malloc_r+0x22>
 801a69c:	1b9b      	subs	r3, r3, r6
 801a69e:	50a3      	str	r3, [r4, r2]
 801a6a0:	e7b3      	b.n	801a60a <_malloc_r+0x22>
 801a6a2:	6862      	ldr	r2, [r4, #4]
 801a6a4:	42a3      	cmp	r3, r4
 801a6a6:	bf0c      	ite	eq
 801a6a8:	6032      	streq	r2, [r6, #0]
 801a6aa:	605a      	strne	r2, [r3, #4]
 801a6ac:	e7ec      	b.n	801a688 <_malloc_r+0xa0>
 801a6ae:	4623      	mov	r3, r4
 801a6b0:	6864      	ldr	r4, [r4, #4]
 801a6b2:	e7b2      	b.n	801a61a <_malloc_r+0x32>
 801a6b4:	4634      	mov	r4, r6
 801a6b6:	6876      	ldr	r6, [r6, #4]
 801a6b8:	e7b9      	b.n	801a62e <_malloc_r+0x46>
 801a6ba:	230c      	movs	r3, #12
 801a6bc:	603b      	str	r3, [r7, #0]
 801a6be:	4638      	mov	r0, r7
 801a6c0:	f000 f860 	bl	801a784 <__malloc_unlock>
 801a6c4:	e7a1      	b.n	801a60a <_malloc_r+0x22>
 801a6c6:	6025      	str	r5, [r4, #0]
 801a6c8:	e7de      	b.n	801a688 <_malloc_r+0xa0>
 801a6ca:	bf00      	nop
 801a6cc:	24001234 	.word	0x24001234

0801a6d0 <_sbrk_r>:
 801a6d0:	b538      	push	{r3, r4, r5, lr}
 801a6d2:	4d06      	ldr	r5, [pc, #24]	; (801a6ec <_sbrk_r+0x1c>)
 801a6d4:	2300      	movs	r3, #0
 801a6d6:	4604      	mov	r4, r0
 801a6d8:	4608      	mov	r0, r1
 801a6da:	602b      	str	r3, [r5, #0]
 801a6dc:	f7e7 fa1a 	bl	8001b14 <_sbrk>
 801a6e0:	1c43      	adds	r3, r0, #1
 801a6e2:	d102      	bne.n	801a6ea <_sbrk_r+0x1a>
 801a6e4:	682b      	ldr	r3, [r5, #0]
 801a6e6:	b103      	cbz	r3, 801a6ea <_sbrk_r+0x1a>
 801a6e8:	6023      	str	r3, [r4, #0]
 801a6ea:	bd38      	pop	{r3, r4, r5, pc}
 801a6ec:	2400123c 	.word	0x2400123c

0801a6f0 <_raise_r>:
 801a6f0:	291f      	cmp	r1, #31
 801a6f2:	b538      	push	{r3, r4, r5, lr}
 801a6f4:	4604      	mov	r4, r0
 801a6f6:	460d      	mov	r5, r1
 801a6f8:	d904      	bls.n	801a704 <_raise_r+0x14>
 801a6fa:	2316      	movs	r3, #22
 801a6fc:	6003      	str	r3, [r0, #0]
 801a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 801a702:	bd38      	pop	{r3, r4, r5, pc}
 801a704:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a706:	b112      	cbz	r2, 801a70e <_raise_r+0x1e>
 801a708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a70c:	b94b      	cbnz	r3, 801a722 <_raise_r+0x32>
 801a70e:	4620      	mov	r0, r4
 801a710:	f000 f830 	bl	801a774 <_getpid_r>
 801a714:	462a      	mov	r2, r5
 801a716:	4601      	mov	r1, r0
 801a718:	4620      	mov	r0, r4
 801a71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a71e:	f000 b817 	b.w	801a750 <_kill_r>
 801a722:	2b01      	cmp	r3, #1
 801a724:	d00a      	beq.n	801a73c <_raise_r+0x4c>
 801a726:	1c59      	adds	r1, r3, #1
 801a728:	d103      	bne.n	801a732 <_raise_r+0x42>
 801a72a:	2316      	movs	r3, #22
 801a72c:	6003      	str	r3, [r0, #0]
 801a72e:	2001      	movs	r0, #1
 801a730:	e7e7      	b.n	801a702 <_raise_r+0x12>
 801a732:	2400      	movs	r4, #0
 801a734:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a738:	4628      	mov	r0, r5
 801a73a:	4798      	blx	r3
 801a73c:	2000      	movs	r0, #0
 801a73e:	e7e0      	b.n	801a702 <_raise_r+0x12>

0801a740 <raise>:
 801a740:	4b02      	ldr	r3, [pc, #8]	; (801a74c <raise+0xc>)
 801a742:	4601      	mov	r1, r0
 801a744:	6818      	ldr	r0, [r3, #0]
 801a746:	f7ff bfd3 	b.w	801a6f0 <_raise_r>
 801a74a:	bf00      	nop
 801a74c:	24000050 	.word	0x24000050

0801a750 <_kill_r>:
 801a750:	b538      	push	{r3, r4, r5, lr}
 801a752:	4d07      	ldr	r5, [pc, #28]	; (801a770 <_kill_r+0x20>)
 801a754:	2300      	movs	r3, #0
 801a756:	4604      	mov	r4, r0
 801a758:	4608      	mov	r0, r1
 801a75a:	4611      	mov	r1, r2
 801a75c:	602b      	str	r3, [r5, #0]
 801a75e:	f7e7 f9bf 	bl	8001ae0 <_kill>
 801a762:	1c43      	adds	r3, r0, #1
 801a764:	d102      	bne.n	801a76c <_kill_r+0x1c>
 801a766:	682b      	ldr	r3, [r5, #0]
 801a768:	b103      	cbz	r3, 801a76c <_kill_r+0x1c>
 801a76a:	6023      	str	r3, [r4, #0]
 801a76c:	bd38      	pop	{r3, r4, r5, pc}
 801a76e:	bf00      	nop
 801a770:	2400123c 	.word	0x2400123c

0801a774 <_getpid_r>:
 801a774:	f7e7 b9ac 	b.w	8001ad0 <_getpid>

0801a778 <__malloc_lock>:
 801a778:	4801      	ldr	r0, [pc, #4]	; (801a780 <__malloc_lock+0x8>)
 801a77a:	f000 b809 	b.w	801a790 <__retarget_lock_acquire_recursive>
 801a77e:	bf00      	nop
 801a780:	24001240 	.word	0x24001240

0801a784 <__malloc_unlock>:
 801a784:	4801      	ldr	r0, [pc, #4]	; (801a78c <__malloc_unlock+0x8>)
 801a786:	f000 b804 	b.w	801a792 <__retarget_lock_release_recursive>
 801a78a:	bf00      	nop
 801a78c:	24001240 	.word	0x24001240

0801a790 <__retarget_lock_acquire_recursive>:
 801a790:	4770      	bx	lr

0801a792 <__retarget_lock_release_recursive>:
 801a792:	4770      	bx	lr

0801a794 <_init>:
 801a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a796:	bf00      	nop
 801a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a79a:	bc08      	pop	{r3}
 801a79c:	469e      	mov	lr, r3
 801a79e:	4770      	bx	lr

0801a7a0 <_fini>:
 801a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7a2:	bf00      	nop
 801a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7a6:	bc08      	pop	{r3}
 801a7a8:	469e      	mov	lr, r3
 801a7aa:	4770      	bx	lr
